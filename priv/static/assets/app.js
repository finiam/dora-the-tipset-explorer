(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key2 of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key2) && key2 !== except)
          __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

  // vendor/topbar.js
  var require_topbar = __commonJS({
    "vendor/topbar.js"(exports, module) {
      (function(window2, document2) {
        "use strict";
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x = 0; x < vendors.length && !window2.requestAnimationFrame; ++x) {
            window2.requestAnimationFrame = window2[vendors[x] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x] + "CancelAnimationFrame"] || window2[vendors[x] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame)
            window2.requestAnimationFrame = function(callback, element) {
              var currTime = new Date().getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id2 = window2.setTimeout(function() {
                callback(currTime + timeToCall);
              }, timeToCall);
              lastTime = currTime + timeToCall;
              return id2;
            };
          if (!window2.cancelAnimationFrame)
            window2.cancelAnimationFrame = function(id2) {
              clearTimeout(id2);
            };
        })();
        var canvas, currentProgress, showing, progressTimerId = null, fadeTimerId = null, delayTimerId = null, addEvent = function(elem, type, handler) {
          if (elem.addEventListener)
            elem.addEventListener(type, handler, false);
          else if (elem.attachEvent)
            elem.attachEvent("on" + type, handler);
          else
            elem["on" + type] = handler;
        }, options = {
          autoRun: true,
          barThickness: 3,
          barColors: {
            0: "rgba(26,  188, 156, .9)",
            ".25": "rgba(52,  152, 219, .9)",
            ".50": "rgba(241, 196, 15,  .9)",
            ".75": "rgba(230, 126, 34,  .9)",
            "1.0": "rgba(211, 84,  0,   .9)"
          },
          shadowBlur: 10,
          shadowColor: "rgba(0,   0,   0,   .6)",
          className: null
        }, repaint = function() {
          canvas.width = window2.innerWidth;
          canvas.height = options.barThickness * 5;
          var ctx = canvas.getContext("2d");
          ctx.shadowBlur = options.shadowBlur;
          ctx.shadowColor = options.shadowColor;
          var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
          for (var stop in options.barColors)
            lineGradient.addColorStop(stop, options.barColors[stop]);
          ctx.lineWidth = options.barThickness;
          ctx.beginPath();
          ctx.moveTo(0, options.barThickness / 2);
          ctx.lineTo(Math.ceil(currentProgress * canvas.width), options.barThickness / 2);
          ctx.strokeStyle = lineGradient;
          ctx.stroke();
        }, createCanvas = function() {
          canvas = document2.createElement("canvas");
          var style2 = canvas.style;
          style2.position = "fixed";
          style2.top = style2.left = style2.right = style2.margin = style2.padding = 0;
          style2.zIndex = 100001;
          style2.display = "none";
          if (options.className)
            canvas.classList.add(options.className);
          document2.body.appendChild(canvas);
          addEvent(window2, "resize", repaint);
        }, topbar2 = {
          config: function(opts) {
            for (var key2 in opts)
              if (options.hasOwnProperty(key2))
                options[key2] = opts[key2];
          },
          show: function(delay) {
            if (showing)
              return;
            if (delay) {
              if (delayTimerId)
                return;
              delayTimerId = setTimeout(() => topbar2.show(), delay);
            } else {
              showing = true;
              if (fadeTimerId !== null)
                window2.cancelAnimationFrame(fadeTimerId);
              if (!canvas)
                createCanvas();
              canvas.style.opacity = 1;
              canvas.style.display = "block";
              topbar2.progress(0);
              if (options.autoRun) {
                (function loop() {
                  progressTimerId = window2.requestAnimationFrame(loop);
                  topbar2.progress("+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2));
                })();
              }
            }
          },
          progress: function(to) {
            if (typeof to === "undefined")
              return currentProgress;
            if (typeof to === "string") {
              to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
            }
            currentProgress = to > 1 ? 1 : to;
            repaint();
            return currentProgress;
          },
          hide: function() {
            clearTimeout(delayTimerId);
            delayTimerId = null;
            if (!showing)
              return;
            showing = false;
            if (progressTimerId != null) {
              window2.cancelAnimationFrame(progressTimerId);
              progressTimerId = null;
            }
            (function loop() {
              if (topbar2.progress("+.1") >= 1) {
                canvas.style.opacity -= 0.05;
                if (canvas.style.opacity <= 0.05) {
                  canvas.style.display = "none";
                  fadeTimerId = null;
                  return;
                }
              }
              fadeTimerId = window2.requestAnimationFrame(loop);
            })();
          }
        };
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = topbar2;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return topbar2;
          });
        } else {
          this.topbar = topbar2;
        }
      }).call(exports, window, document);
    }
  });

  // ../deps/phoenix_html/priv/static/phoenix_html.js
  (function() {
    var PolyfillEvent = eventConstructor();
    function eventConstructor() {
      if (typeof window.CustomEvent === "function")
        return window.CustomEvent;
      function CustomEvent2(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: void 0 };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }
      CustomEvent2.prototype = window.Event.prototype;
      return CustomEvent2;
    }
    function buildHiddenInput(name2, value) {
      var input = document.createElement("input");
      input.type = "hidden";
      input.name = name2;
      input.value = value;
      return input;
    }
    function handleClick(element, targetModifierKey) {
      var to = element.getAttribute("data-to"), method = buildHiddenInput("_method", element.getAttribute("data-method")), csrf = buildHiddenInput("_csrf_token", element.getAttribute("data-csrf")), form = document.createElement("form"), submit = document.createElement("input"), target = element.getAttribute("target");
      form.method = element.getAttribute("data-method") === "get" ? "get" : "post";
      form.action = to;
      form.style.display = "none";
      if (target)
        form.target = target;
      else if (targetModifierKey)
        form.target = "_blank";
      form.appendChild(csrf);
      form.appendChild(method);
      document.body.appendChild(form);
      submit.type = "submit";
      form.appendChild(submit);
      submit.click();
    }
    window.addEventListener("click", function(e) {
      var element = e.target;
      if (e.defaultPrevented)
        return;
      while (element && element.getAttribute) {
        var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
          "bubbles": true,
          "cancelable": true
        });
        if (!element.dispatchEvent(phoenixLinkEvent)) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return false;
        }
        if (element.getAttribute("data-method")) {
          handleClick(element, e.metaKey || e.shiftKey);
          e.preventDefault();
          return false;
        } else {
          element = element.parentNode;
        }
      }
    }, false);
    window.addEventListener("phoenix.link.click", function(e) {
      var message = e.target.getAttribute("data-confirm");
      if (message && !window.confirm(message)) {
        e.preventDefault();
      }
    }, false);
  })();

  // ../deps/phoenix/priv/static/phoenix.mjs
  var closure = (value) => {
    if (typeof value === "function") {
      return value;
    } else {
      let closure22 = function() {
        return value;
      };
      return closure22;
    }
  };
  var globalSelf = typeof self !== "undefined" ? self : null;
  var phxWindow = typeof window !== "undefined" ? window : null;
  var global2 = globalSelf || phxWindow || global2;
  var DEFAULT_VSN = "2.0.0";
  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var CHANNEL_STATES = {
    closed: "closed",
    errored: "errored",
    joined: "joined",
    joining: "joining",
    leaving: "leaving"
  };
  var CHANNEL_EVENTS = {
    close: "phx_close",
    error: "phx_error",
    join: "phx_join",
    reply: "phx_reply",
    leave: "phx_leave"
  };
  var TRANSPORTS = {
    longpoll: "longpoll",
    websocket: "websocket"
  };
  var XHR_STATES = {
    complete: 4
  };
  var Push = class {
    constructor(channel, event, payload, timeout) {
      this.channel = channel;
      this.event = event;
      this.payload = payload || function() {
        return {};
      };
      this.receivedResp = null;
      this.timeout = timeout;
      this.timeoutTimer = null;
      this.recHooks = [];
      this.sent = false;
    }
    resend(timeout) {
      this.timeout = timeout;
      this.reset();
      this.send();
    }
    send() {
      if (this.hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload(),
        ref: this.ref,
        join_ref: this.channel.joinRef()
      });
    }
    receive(status, callback) {
      if (this.hasReceived(status)) {
        callback(this.receivedResp.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    reset() {
      this.cancelRefEvent();
      this.ref = null;
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
    }
    matchReceive({ status, response, _ref }) {
      this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
    }
    cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel.off(this.refEvent);
    }
    cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = null;
    }
    startTimeout() {
      if (this.timeoutTimer) {
        this.cancelTimeout();
      }
      this.ref = this.channel.socket.makeRef();
      this.refEvent = this.channel.replyEventName(this.ref);
      this.channel.on(this.refEvent, (payload) => {
        this.cancelRefEvent();
        this.cancelTimeout();
        this.receivedResp = payload;
        this.matchReceive(payload);
      });
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
    trigger(status, response) {
      this.channel.trigger(this.refEvent, { status, response });
    }
  };
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = null;
      this.tries = 0;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
    }
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };
  var Channel = class {
    constructor(topic, params, socket) {
      this.state = CHANNEL_STATES.closed;
      this.topic = topic;
      this.params = closure(params || {});
      this.socket = socket;
      this.bindings = [];
      this.bindingRef = 0;
      this.timeout = this.socket.timeout;
      this.joinedOnce = false;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.pushBuffer = [];
      this.stateChangeRefs = [];
      this.rejoinTimer = new Timer(() => {
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      }, this.socket.rejoinAfterMs);
      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
      this.stateChangeRefs.push(this.socket.onOpen(() => {
        this.rejoinTimer.reset();
        if (this.isErrored()) {
          this.rejoin();
        }
      }));
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this.joinPush.receive("error", () => {
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.onClose(() => {
        this.rejoinTimer.reset();
        if (this.socket.hasLogger())
          this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket.remove(this);
      });
      this.onError((reason) => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `error ${this.topic}`, reason);
        if (this.isJoining()) {
          this.joinPush.reset();
        }
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.joinPush.receive("timeout", () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
        leavePush.send();
        this.state = CHANNEL_STATES.errored;
        this.joinPush.reset();
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
        this.trigger(this.replyEventName(ref), payload);
      });
    }
    join(timeout = this.timeout) {
      if (this.joinedOnce) {
        throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
      } else {
        this.timeout = timeout;
        this.joinedOnce = true;
        this.rejoin();
        return this.joinPush;
      }
    }
    onClose(callback) {
      this.on(CHANNEL_EVENTS.close, callback);
    }
    onError(callback) {
      return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
    }
    on(event, callback) {
      let ref = this.bindingRef++;
      this.bindings.push({ event, ref, callback });
      return ref;
    }
    off(event, ref) {
      this.bindings = this.bindings.filter((bind) => {
        return !(bind.event === event && (typeof ref === "undefined" || ref === bind.ref));
      });
    }
    canPush() {
      return this.socket.isConnected() && this.isJoined();
    }
    push(event, payload, timeout = this.timeout) {
      payload = payload || {};
      if (!this.joinedOnce) {
        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
      }
      let pushEvent = new Push(this, event, function() {
        return payload;
      }, timeout);
      if (this.canPush()) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this.pushBuffer.push(pushEvent);
      }
      return pushEvent;
    }
    leave(timeout = this.timeout) {
      this.rejoinTimer.reset();
      this.joinPush.cancelTimeout();
      this.state = CHANNEL_STATES.leaving;
      let onClose = () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `leave ${this.topic}`);
        this.trigger(CHANNEL_EVENTS.close, "leave");
      };
      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
      leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
      leavePush.send();
      if (!this.canPush()) {
        leavePush.trigger("ok", {});
      }
      return leavePush;
    }
    onMessage(_event, payload, _ref) {
      return payload;
    }
    isMember(topic, event, payload, joinRef) {
      if (this.topic !== topic) {
        return false;
      }
      if (joinRef && joinRef !== this.joinRef()) {
        if (this.socket.hasLogger())
          this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
        return false;
      } else {
        return true;
      }
    }
    joinRef() {
      return this.joinPush.ref;
    }
    rejoin(timeout = this.timeout) {
      if (this.isLeaving()) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    trigger(event, payload, ref, joinRef) {
      let handledPayload = this.onMessage(event, payload, ref, joinRef);
      if (payload && !handledPayload) {
        throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      let eventBindings = this.bindings.filter((bind) => bind.event === event);
      for (let i = 0; i < eventBindings.length; i++) {
        let bind = eventBindings[i];
        bind.callback(handledPayload, ref, joinRef || this.joinRef());
      }
    }
    replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    isErrored() {
      return this.state === CHANNEL_STATES.errored;
    }
    isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
  };
  var Ajax = class {
    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
      if (global2.XDomainRequest) {
        let req = new global2.XDomainRequest();
        return this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
      } else {
        let req = new global2.XMLHttpRequest();
        return this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
      }
    }
    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
      req.timeout = timeout;
      req.open(method, endPoint);
      req.onload = () => {
        let response = this.parseJSON(req.responseText);
        callback && callback(response);
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.onprogress = () => {
      };
      req.send(body);
      return req;
    }
    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
      req.open(method, endPoint, true);
      req.timeout = timeout;
      req.setRequestHeader("Content-Type", accept);
      req.onerror = () => callback && callback(null);
      req.onreadystatechange = () => {
        if (req.readyState === XHR_STATES.complete && callback) {
          let response = this.parseJSON(req.responseText);
          callback(response);
        }
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.send(body);
      return req;
    }
    static parseJSON(resp) {
      if (!resp || resp === "") {
        return null;
      }
      try {
        return JSON.parse(resp);
      } catch (e) {
        console && console.log("failed to parse JSON response", resp);
        return null;
      }
    }
    static serialize(obj, parentKey) {
      let queryStr = [];
      for (var key2 in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, key2)) {
          continue;
        }
        let paramKey = parentKey ? `${parentKey}[${key2}]` : key2;
        let paramVal = obj[key2];
        if (typeof paramVal === "object") {
          queryStr.push(this.serialize(paramVal, paramKey));
        } else {
          queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
        }
      }
      return queryStr.join("&");
    }
    static appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      let prefix = url.match(/\?/) ? "&" : "?";
      return `${url}${prefix}${this.serialize(params)}`;
    }
  };
  var LongPoll = class {
    constructor(endPoint) {
      this.endPoint = null;
      this.token = null;
      this.skipHeartbeat = true;
      this.reqs = /* @__PURE__ */ new Set();
      this.awaitingBatchAck = false;
      this.currentBatch = null;
      this.currentBatchTimer = null;
      this.batchBuffer = [];
      this.onopen = function() {
      };
      this.onerror = function() {
      };
      this.onmessage = function() {
      };
      this.onclose = function() {
      };
      this.pollEndpoint = this.normalizeEndpoint(endPoint);
      this.readyState = SOCKET_STATES.connecting;
      this.poll();
    }
    normalizeEndpoint(endPoint) {
      return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
    }
    endpointURL() {
      return Ajax.appendParams(this.pollEndpoint, { token: this.token });
    }
    closeAndRetry(code, reason, wasClean) {
      this.close(code, reason, wasClean);
      this.readyState = SOCKET_STATES.connecting;
    }
    ontimeout() {
      this.onerror("timeout");
      this.closeAndRetry(1005, "timeout", false);
    }
    isActive() {
      return this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting;
    }
    poll() {
      this.ajax("GET", "application/json", null, () => this.ontimeout(), (resp) => {
        if (resp) {
          var { status, token, messages } = resp;
          this.token = token;
        } else {
          status = 0;
        }
        switch (status) {
          case 200:
            messages.forEach((msg) => {
              setTimeout(() => this.onmessage({ data: msg }), 0);
            });
            this.poll();
            break;
          case 204:
            this.poll();
            break;
          case 410:
            this.readyState = SOCKET_STATES.open;
            this.onopen({});
            this.poll();
            break;
          case 403:
            this.onerror(403);
            this.close(1008, "forbidden", false);
            break;
          case 0:
          case 500:
            this.onerror(500);
            this.closeAndRetry(1011, "internal server error", 500);
            break;
          default:
            throw new Error(`unhandled poll status ${status}`);
        }
      });
    }
    send(body) {
      if (this.currentBatch) {
        this.currentBatch.push(body);
      } else if (this.awaitingBatchAck) {
        this.batchBuffer.push(body);
      } else {
        this.currentBatch = [body];
        this.currentBatchTimer = setTimeout(() => {
          this.batchSend(this.currentBatch);
          this.currentBatch = null;
        }, 0);
      }
    }
    batchSend(messages) {
      this.awaitingBatchAck = true;
      this.ajax("POST", "application/x-ndjson", messages.join("\n"), () => this.onerror("timeout"), (resp) => {
        this.awaitingBatchAck = false;
        if (!resp || resp.status !== 200) {
          this.onerror(resp && resp.status);
          this.closeAndRetry(1011, "internal server error", false);
        } else if (this.batchBuffer.length > 0) {
          this.batchSend(this.batchBuffer);
          this.batchBuffer = [];
        }
      });
    }
    close(code, reason, wasClean) {
      for (let req of this.reqs) {
        req.abort();
      }
      this.readyState = SOCKET_STATES.closed;
      let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
      this.batchBuffer = [];
      clearTimeout(this.currentBatchTimer);
      this.currentBatchTimer = null;
      if (typeof CloseEvent !== "undefined") {
        this.onclose(new CloseEvent("close", opts));
      } else {
        this.onclose(opts);
      }
    }
    ajax(method, contentType, body, onCallerTimeout, callback) {
      let req;
      let ontimeout = () => {
        this.reqs.delete(req);
        onCallerTimeout();
      };
      req = Ajax.request(method, this.endpointURL(), contentType, body, this.timeout, ontimeout, (resp) => {
        this.reqs.delete(req);
        if (this.isActive()) {
          callback(resp);
        }
      });
      this.reqs.add(req);
    }
  };
  var serializer_default = {
    HEADER_LENGTH: 1,
    META_LENGTH: 4,
    KINDS: { push: 0, reply: 1, broadcast: 2 },
    encode(msg, callback) {
      if (msg.payload.constructor === ArrayBuffer) {
        return callback(this.binaryEncode(msg));
      } else {
        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
        return callback(JSON.stringify(payload));
      }
    },
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this.binaryDecode(rawPayload));
      } else {
        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
        return callback({ join_ref, ref, topic, event, payload });
      }
    },
    binaryEncode(message) {
      let { join_ref, ref, event, topic, payload } = message;
      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
      let view = new DataView(header);
      let offset = 0;
      view.setUint8(offset++, this.KINDS.push);
      view.setUint8(offset++, join_ref.length);
      view.setUint8(offset++, ref.length);
      view.setUint8(offset++, topic.length);
      view.setUint8(offset++, event.length);
      Array.from(join_ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(topic, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(event, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      var combined = new Uint8Array(header.byteLength + payload.byteLength);
      combined.set(new Uint8Array(header), 0);
      combined.set(new Uint8Array(payload), header.byteLength);
      return combined.buffer;
    },
    binaryDecode(buffer) {
      let view = new DataView(buffer);
      let kind = view.getUint8(0);
      let decoder = new TextDecoder();
      switch (kind) {
        case this.KINDS.push:
          return this.decodePush(buffer, view, decoder);
        case this.KINDS.reply:
          return this.decodeReply(buffer, view, decoder);
        case this.KINDS.broadcast:
          return this.decodeBroadcast(buffer, view, decoder);
      }
    },
    decodePush(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let topicSize = view.getUint8(2);
      let eventSize = view.getUint8(3);
      let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data2 = buffer.slice(offset, buffer.byteLength);
      return { join_ref: joinRef, ref: null, topic, event, payload: data2 };
    },
    decodeReply(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let refSize = view.getUint8(2);
      let topicSize = view.getUint8(3);
      let eventSize = view.getUint8(4);
      let offset = this.HEADER_LENGTH + this.META_LENGTH;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let ref = decoder.decode(buffer.slice(offset, offset + refSize));
      offset = offset + refSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data2 = buffer.slice(offset, buffer.byteLength);
      let payload = { status: event, response: data2 };
      return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
    },
    decodeBroadcast(buffer, view, decoder) {
      let topicSize = view.getUint8(1);
      let eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data2 = buffer.slice(offset, buffer.byteLength);
      return { join_ref: null, ref: null, topic, event, payload: data2 };
    }
  };
  var Socket = class {
    constructor(endPoint, opts = {}) {
      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
      this.channels = [];
      this.sendBuffer = [];
      this.ref = 0;
      this.timeout = opts.timeout || DEFAULT_TIMEOUT;
      this.transport = opts.transport || global2.WebSocket || LongPoll;
      this.establishedConnections = 0;
      this.defaultEncoder = serializer_default.encode.bind(serializer_default);
      this.defaultDecoder = serializer_default.decode.bind(serializer_default);
      this.closeWasClean = false;
      this.binaryType = opts.binaryType || "arraybuffer";
      this.connectClock = 1;
      if (this.transport !== LongPoll) {
        this.encode = opts.encode || this.defaultEncoder;
        this.decode = opts.decode || this.defaultDecoder;
      } else {
        this.encode = this.defaultEncoder;
        this.decode = this.defaultDecoder;
      }
      let awaitingConnectionOnPageShow = null;
      if (phxWindow && phxWindow.addEventListener) {
        phxWindow.addEventListener("pagehide", (_e) => {
          if (this.conn) {
            this.disconnect();
            awaitingConnectionOnPageShow = this.connectClock;
          }
        });
        phxWindow.addEventListener("pageshow", (_e) => {
          if (awaitingConnectionOnPageShow === this.connectClock) {
            awaitingConnectionOnPageShow = null;
            this.connect();
          }
        });
      }
      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
      this.rejoinAfterMs = (tries) => {
        if (opts.rejoinAfterMs) {
          return opts.rejoinAfterMs(tries);
        } else {
          return [1e3, 2e3, 5e3][tries - 1] || 1e4;
        }
      };
      this.reconnectAfterMs = (tries) => {
        if (opts.reconnectAfterMs) {
          return opts.reconnectAfterMs(tries);
        } else {
          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
        }
      };
      this.logger = opts.logger || null;
      this.longpollerTimeout = opts.longpollerTimeout || 2e4;
      this.params = closure(opts.params || {});
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.vsn = opts.vsn || DEFAULT_VSN;
      this.heartbeatTimeoutTimer = null;
      this.heartbeatTimer = null;
      this.pendingHeartbeatRef = null;
      this.reconnectTimer = new Timer(() => {
        this.teardown(() => this.connect());
      }, this.reconnectAfterMs);
    }
    getLongPollTransport() {
      return LongPoll;
    }
    replaceTransport(newTransport) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.sendBuffer = [];
      if (this.conn) {
        this.conn.close();
        this.conn = null;
      }
      this.transport = newTransport;
    }
    protocol() {
      return location.protocol.match(/^https/) ? "wss" : "ws";
    }
    endPointURL() {
      let uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params()), { vsn: this.vsn });
      if (uri.charAt(0) !== "/") {
        return uri;
      }
      if (uri.charAt(1) === "/") {
        return `${this.protocol()}:${uri}`;
      }
      return `${this.protocol()}://${location.host}${uri}`;
    }
    disconnect(callback, code, reason) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.teardown(callback, code, reason);
    }
    connect(params) {
      if (params) {
        console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
        this.params = closure(params);
      }
      if (this.conn) {
        return;
      }
      this.connectClock++;
      this.closeWasClean = false;
      this.conn = new this.transport(this.endPointURL());
      this.conn.binaryType = this.binaryType;
      this.conn.timeout = this.longpollerTimeout;
      this.conn.onopen = () => this.onConnOpen();
      this.conn.onerror = (error) => this.onConnError(error);
      this.conn.onmessage = (event) => this.onConnMessage(event);
      this.conn.onclose = (event) => this.onConnClose(event);
    }
    log(kind, msg, data2) {
      this.logger(kind, msg, data2);
    }
    hasLogger() {
      return this.logger !== null;
    }
    onOpen(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.open.push([ref, callback]);
      return ref;
    }
    onClose(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.close.push([ref, callback]);
      return ref;
    }
    onError(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.error.push([ref, callback]);
      return ref;
    }
    onMessage(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.message.push([ref, callback]);
      return ref;
    }
    ping(callback) {
      if (!this.isConnected()) {
        return false;
      }
      let ref = this.makeRef();
      let startTime = Date.now();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref });
      let onMsgRef = this.onMessage((msg) => {
        if (msg.ref === ref) {
          this.off([onMsgRef]);
          callback(Date.now() - startTime);
        }
      });
      return true;
    }
    clearHeartbeats() {
      clearTimeout(this.heartbeatTimer);
      clearTimeout(this.heartbeatTimeoutTimer);
    }
    onConnOpen() {
      if (this.hasLogger())
        this.log("transport", `connected to ${this.endPointURL()}`);
      this.closeWasClean = false;
      this.establishedConnections++;
      this.flushSendBuffer();
      this.reconnectTimer.reset();
      this.resetHeartbeat();
      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
    }
    heartbeatTimeout() {
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        if (this.hasLogger()) {
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        }
        this.triggerChanError();
        this.closeWasClean = false;
        this.teardown(() => this.reconnectTimer.scheduleTimeout(), WS_CLOSE_NORMAL, "heartbeat timeout");
      }
    }
    resetHeartbeat() {
      if (this.conn && this.conn.skipHeartbeat) {
        return;
      }
      this.pendingHeartbeatRef = null;
      this.clearHeartbeats();
      this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    teardown(callback, code, reason) {
      if (!this.conn) {
        return callback && callback();
      }
      this.waitForBufferDone(() => {
        if (this.conn) {
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
        }
        this.waitForSocketClosed(() => {
          if (this.conn) {
            this.conn.onopen = function() {
            };
            this.conn.onerror = function() {
            };
            this.conn.onmessage = function() {
            };
            this.conn.onclose = function() {
            };
            this.conn = null;
          }
          callback && callback();
        });
      });
    }
    waitForBufferDone(callback, tries = 1) {
      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForBufferDone(callback, tries + 1);
      }, 150 * tries);
    }
    waitForSocketClosed(callback, tries = 1) {
      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForSocketClosed(callback, tries + 1);
      }, 150 * tries);
    }
    onConnClose(event) {
      let closeCode = event && event.code;
      if (this.hasLogger())
        this.log("transport", "close", event);
      this.triggerChanError();
      this.clearHeartbeats();
      if (!this.closeWasClean && closeCode !== 1e3) {
        this.reconnectTimer.scheduleTimeout();
      }
      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
    }
    onConnError(error) {
      if (this.hasLogger())
        this.log("transport", error);
      let transportBefore = this.transport;
      let establishedBefore = this.establishedConnections;
      this.stateChangeCallbacks.error.forEach(([, callback]) => {
        callback(error, transportBefore, establishedBefore);
      });
      if (transportBefore === this.transport || establishedBefore > 0) {
        this.triggerChanError();
      }
    }
    triggerChanError() {
      this.channels.forEach((channel) => {
        if (!(channel.isErrored() || channel.isLeaving() || channel.isClosed())) {
          channel.trigger(CHANNEL_EVENTS.error);
        }
      });
    }
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return "connecting";
        case SOCKET_STATES.open:
          return "open";
        case SOCKET_STATES.closing:
          return "closing";
        default:
          return "closed";
      }
    }
    isConnected() {
      return this.connectionState() === "open";
    }
    remove(channel) {
      this.off(channel.stateChangeRefs);
      this.channels = this.channels.filter((c) => c.joinRef() !== channel.joinRef());
    }
    off(refs) {
      for (let key2 in this.stateChangeCallbacks) {
        this.stateChangeCallbacks[key2] = this.stateChangeCallbacks[key2].filter(([ref]) => {
          return refs.indexOf(ref) === -1;
        });
      }
    }
    channel(topic, chanParams = {}) {
      let chan = new Channel(topic, chanParams, this);
      this.channels.push(chan);
      return chan;
    }
    push(data2) {
      if (this.hasLogger()) {
        let { topic, event, payload, ref, join_ref } = data2;
        this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
      }
      if (this.isConnected()) {
        this.encode(data2, (result) => this.conn.send(result));
      } else {
        this.sendBuffer.push(() => this.encode(data2, (result) => this.conn.send(result)));
      }
    }
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    sendHeartbeat() {
      if (this.pendingHeartbeatRef && !this.isConnected()) {
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
      this.heartbeatTimeoutTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
    }
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        let { topic, event, payload, ref, join_ref } = msg;
        if (ref && ref === this.pendingHeartbeatRef) {
          this.clearHeartbeats();
          this.pendingHeartbeatRef = null;
          this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        if (this.hasLogger())
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
        for (let i = 0; i < this.channels.length; i++) {
          const channel = this.channels[i];
          if (!channel.isMember(topic, event, payload, join_ref)) {
            continue;
          }
          channel.trigger(event, payload, ref, join_ref);
        }
        for (let i = 0; i < this.stateChangeCallbacks.message.length; i++) {
          let [, callback] = this.stateChangeCallbacks.message[i];
          callback(msg);
        }
      });
    }
    leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c) => c.topic === topic && (c.isJoined() || c.isJoining()));
      if (dupChannel) {
        if (this.hasLogger())
          this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.leave();
      }
    }
  };

  // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
  var CONSECUTIVE_RELOADS = "consecutive-reloads";
  var MAX_RELOADS = 10;
  var RELOAD_JITTER_MIN = 5e3;
  var RELOAD_JITTER_MAX = 1e4;
  var FAILSAFE_JITTER = 3e4;
  var PHX_EVENT_CLASSES = [
    "phx-click-loading",
    "phx-change-loading",
    "phx-submit-loading",
    "phx-keydown-loading",
    "phx-keyup-loading",
    "phx-blur-loading",
    "phx-focus-loading"
  ];
  var PHX_COMPONENT = "data-phx-component";
  var PHX_LIVE_LINK = "data-phx-link";
  var PHX_TRACK_STATIC = "track-static";
  var PHX_LINK_STATE = "data-phx-link-state";
  var PHX_REF = "data-phx-ref";
  var PHX_REF_SRC = "data-phx-ref-src";
  var PHX_TRACK_UPLOADS = "track-uploads";
  var PHX_UPLOAD_REF = "data-phx-upload-ref";
  var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
  var PHX_DONE_REFS = "data-phx-done-refs";
  var PHX_DROP_TARGET = "drop-target";
  var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
  var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
  var PHX_SKIP = "data-phx-skip";
  var PHX_PRUNE = "data-phx-prune";
  var PHX_PAGE_LOADING = "page-loading";
  var PHX_CONNECTED_CLASS = "phx-connected";
  var PHX_DISCONNECTED_CLASS = "phx-loading";
  var PHX_NO_FEEDBACK_CLASS = "phx-no-feedback";
  var PHX_ERROR_CLASS = "phx-error";
  var PHX_PARENT_ID = "data-phx-parent-id";
  var PHX_MAIN = "data-phx-main";
  var PHX_ROOT_ID = "data-phx-root-id";
  var PHX_TRIGGER_ACTION = "trigger-action";
  var PHX_FEEDBACK_FOR = "feedback-for";
  var PHX_HAS_FOCUSED = "phx-has-focused";
  var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
  var CHECKABLE_INPUTS = ["checkbox", "radio"];
  var PHX_HAS_SUBMITTED = "phx-has-submitted";
  var PHX_SESSION = "data-phx-session";
  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
  var PHX_STICKY = "data-phx-sticky";
  var PHX_STATIC = "data-phx-static";
  var PHX_READONLY = "data-phx-readonly";
  var PHX_DISABLED = "data-phx-disabled";
  var PHX_DISABLE_WITH = "disable-with";
  var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
  var PHX_HOOK = "hook";
  var PHX_DEBOUNCE = "debounce";
  var PHX_THROTTLE = "throttle";
  var PHX_UPDATE = "update";
  var PHX_STREAM = "stream";
  var PHX_KEY = "key";
  var PHX_PRIVATE = "phxPrivate";
  var PHX_AUTO_RECOVER = "auto-recover";
  var PHX_LV_DEBUG = "phx:live-socket:debug";
  var PHX_LV_PROFILE = "phx:live-socket:profiling";
  var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
  var PHX_PROGRESS = "progress";
  var PHX_MOUNTED = "mounted";
  var LOADER_TIMEOUT = 1;
  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
  var BINDING_PREFIX = "phx-";
  var PUSH_TIMEOUT = 3e4;
  var DEBOUNCE_TRIGGER = "debounce-trigger";
  var THROTTLED = "throttled";
  var DEBOUNCE_PREV_KEY = "debounce-prev-key";
  var DEFAULTS = {
    debounce: 300,
    throttle: 300
  };
  var DYNAMICS = "d";
  var STATIC = "s";
  var COMPONENTS = "c";
  var EVENTS = "e";
  var REPLY = "r";
  var TITLE = "t";
  var TEMPLATES = "p";
  var STREAM = "stream";
  var EntryUploader = class {
    constructor(entry, chunkSize, liveSocket2) {
      this.liveSocket = liveSocket2;
      this.entry = entry;
      this.offset = 0;
      this.chunkSize = chunkSize;
      this.chunkTimer = null;
      this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
    }
    error(reason) {
      clearTimeout(this.chunkTimer);
      this.uploadChannel.leave();
      this.entry.error(reason);
    }
    upload() {
      this.uploadChannel.onError((reason) => this.error(reason));
      this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
    }
    isDone() {
      return this.offset >= this.entry.file.size;
    }
    readNextChunk() {
      let reader = new window.FileReader();
      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
      reader.onload = (e) => {
        if (e.target.error === null) {
          this.offset += e.target.result.byteLength;
          this.pushChunk(e.target.result);
        } else {
          return logError("Read error: " + e.target.error);
        }
      };
      reader.readAsArrayBuffer(blob);
    }
    pushChunk(chunk) {
      if (!this.uploadChannel.isJoined()) {
        return;
      }
      this.uploadChannel.push("chunk", chunk).receive("ok", () => {
        this.entry.progress(this.offset / this.entry.file.size * 100);
        if (!this.isDone()) {
          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
        }
      });
    }
  };
  var logError = (msg, obj) => console.error && console.error(msg, obj);
  var isCid = (cid) => {
    let type = typeof cid;
    return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
  };
  function detectDuplicateIds() {
    let ids = /* @__PURE__ */ new Set();
    let elems = document.querySelectorAll("*[id]");
    for (let i = 0, len = elems.length; i < len; i++) {
      if (ids.has(elems[i].id)) {
        console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);
      } else {
        ids.add(elems[i].id);
      }
    }
  }
  var debug = (view, kind, msg, obj) => {
    if (view.liveSocket.isDebugEnabled()) {
      console.log(`${view.id} ${kind}: ${msg} - `, obj);
    }
  };
  var closure2 = (val) => typeof val === "function" ? val : function() {
    return val;
  };
  var clone = (obj) => {
    return JSON.parse(JSON.stringify(obj));
  };
  var closestPhxBinding = (el, binding, borderEl) => {
    do {
      if (el.matches(`[${binding}]`) && !el.disabled) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
    return null;
  };
  var isObject = (obj) => {
    return obj !== null && typeof obj === "object" && !(obj instanceof Array);
  };
  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
  var isEmpty = (obj) => {
    for (let x in obj) {
      return false;
    }
    return true;
  };
  var maybe = (el, callback) => el && callback(el);
  var channelUploader = function(entries, onError, resp, liveSocket2) {
    entries.forEach((entry) => {
      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
      entryUploader.upload();
    });
  };
  var Browser = {
    canPushState() {
      return typeof history.pushState !== "undefined";
    },
    dropLocal(localStorage, namespace, subkey) {
      return localStorage.removeItem(this.localKey(namespace, subkey));
    },
    updateLocal(localStorage, namespace, subkey, initial, func) {
      let current = this.getLocal(localStorage, namespace, subkey);
      let key2 = this.localKey(namespace, subkey);
      let newVal = current === null ? initial : func(current);
      localStorage.setItem(key2, JSON.stringify(newVal));
      return newVal;
    },
    getLocal(localStorage, namespace, subkey) {
      return JSON.parse(localStorage.getItem(this.localKey(namespace, subkey)));
    },
    updateCurrentState(callback) {
      if (!this.canPushState()) {
        return;
      }
      history.replaceState(callback(history.state || {}), "", window.location.href);
    },
    pushState(kind, meta, to) {
      if (this.canPushState()) {
        if (to !== window.location.href) {
          if (meta.type == "redirect" && meta.scroll) {
            let currentState = history.state || {};
            currentState.scroll = meta.scroll;
            history.replaceState(currentState, "", window.location.href);
          }
          delete meta.scroll;
          history[kind + "State"](meta, "", to || null);
          let hashEl = this.getHashTargetEl(window.location.hash);
          if (hashEl) {
            hashEl.scrollIntoView();
          } else if (meta.type === "redirect") {
            window.scroll(0, 0);
          }
        }
      } else {
        this.redirect(to);
      }
    },
    setCookie(name2, value) {
      document.cookie = `${name2}=${value}`;
    },
    getCookie(name2) {
      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name2}s*=s*([^;]*).*$)|^.*$`), "$1");
    },
    redirect(toURL, flash) {
      if (flash) {
        Browser.setCookie("__phoenix_flash__", flash + "; max-age=60000; path=/");
      }
      window.location = toURL;
    },
    localKey(namespace, subkey) {
      return `${namespace}-${subkey}`;
    },
    getHashTargetEl(maybeHash) {
      let hash = maybeHash.toString().substring(1);
      if (hash === "") {
        return;
      }
      return document.getElementById(hash) || document.querySelector(`a[name="${hash}"]`);
    }
  };
  var browser_default = Browser;
  var DOM = {
    byId(id2) {
      return document.getElementById(id2) || logError(`no id found for ${id2}`);
    },
    removeClass(el, className) {
      el.classList.remove(className);
      if (el.classList.length === 0) {
        el.removeAttribute("class");
      }
    },
    all(node, query, callback) {
      if (!node) {
        return [];
      }
      let array = Array.from(node.querySelectorAll(query));
      return callback ? array.forEach(callback) : array;
    },
    childNodeLength(html) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return template.content.childElementCount;
    },
    isUploadInput(el) {
      return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
    },
    findUploadInputs(node) {
      return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`);
    },
    findComponentNodeList(node, cid) {
      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
    },
    isPhxDestroyed(node) {
      return node.id && DOM.private(node, "destroyed") ? true : false;
    },
    wantsNewTab(e) {
      let wantsNewTab = e.ctrlKey || e.shiftKey || e.metaKey || e.button && e.button === 1;
      return wantsNewTab || e.target.getAttribute("target") === "_blank";
    },
    isUnloadableFormSubmit(e) {
      return !e.defaultPrevented && !this.wantsNewTab(e);
    },
    isNewPageHref(href, currentLocation) {
      let url;
      try {
        url = new URL(href);
      } catch (e) {
        try {
          url = new URL(href, currentLocation);
        } catch (e2) {
          return true;
        }
      }
      if (url.host === currentLocation.host && url.protocol === currentLocation.protocol) {
        if (url.pathname === currentLocation.pathname && url.search === currentLocation.search) {
          return url.hash === "" && !url.href.endsWith("#");
        }
      }
      return true;
    },
    markPhxChildDestroyed(el) {
      if (this.isPhxChild(el)) {
        el.setAttribute(PHX_SESSION, "");
      }
      this.putPrivate(el, "destroyed", true);
    },
    findPhxChildrenInFragment(html, parentId) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return this.findPhxChildren(template.content, parentId);
    },
    isIgnored(el, phxUpdate) {
      return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
    },
    isPhxUpdate(el, phxUpdate, updateTypes) {
      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
    },
    findPhxSticky(el) {
      return this.all(el, `[${PHX_STICKY}]`);
    },
    findPhxChildren(el, parentId) {
      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
    },
    findParentCIDs(node, cids) {
      let initial = new Set(cids);
      let parentCids = cids.reduce((acc, cid) => {
        let selector = `[${PHX_COMPONENT}="${cid}"] [${PHX_COMPONENT}]`;
        this.filterWithinSameLiveView(this.all(node, selector), node).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => acc.delete(childCID));
        return acc;
      }, initial);
      return parentCids.size === 0 ? new Set(cids) : parentCids;
    },
    filterWithinSameLiveView(nodes, parent) {
      if (parent.querySelector(PHX_VIEW_SELECTOR)) {
        return nodes.filter((el) => this.withinSameLiveView(el, parent));
      } else {
        return nodes;
      }
    },
    withinSameLiveView(node, parent) {
      while (node = node.parentNode) {
        if (node.isSameNode(parent)) {
          return true;
        }
        if (node.getAttribute(PHX_SESSION) !== null) {
          return false;
        }
      }
    },
    private(el, key2) {
      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key2];
    },
    deletePrivate(el, key2) {
      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key2];
    },
    putPrivate(el, key2, value) {
      if (!el[PHX_PRIVATE]) {
        el[PHX_PRIVATE] = {};
      }
      el[PHX_PRIVATE][key2] = value;
    },
    updatePrivate(el, key2, defaultVal, updateFunc) {
      let existing = this.private(el, key2);
      if (existing === void 0) {
        this.putPrivate(el, key2, updateFunc(defaultVal));
      } else {
        this.putPrivate(el, key2, updateFunc(existing));
      }
    },
    copyPrivates(target, source) {
      if (source[PHX_PRIVATE]) {
        target[PHX_PRIVATE] = source[PHX_PRIVATE];
      }
    },
    putTitle(str) {
      let titleEl = document.querySelector("title");
      if (titleEl) {
        let { prefix, suffix } = titleEl.dataset;
        document.title = `${prefix || ""}${str}${suffix || ""}`;
      } else {
        document.title = str;
      }
    },
    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, callback) {
      let debounce = el.getAttribute(phxDebounce);
      let throttle = el.getAttribute(phxThrottle);
      if (debounce === "") {
        debounce = defaultDebounce;
      }
      if (throttle === "") {
        throttle = defaultThrottle;
      }
      let value = debounce || throttle;
      switch (value) {
        case null:
          return callback();
        case "blur":
          if (this.once(el, "debounce-blur")) {
            el.addEventListener("blur", () => callback());
          }
          return;
        default:
          let timeout = parseInt(value);
          let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();
          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);
          if (isNaN(timeout)) {
            return logError(`invalid throttle/debounce value: ${value}`);
          }
          if (throttle) {
            let newKeyDown = false;
            if (event.type === "keydown") {
              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
              newKeyDown = prevKey !== event.key;
            }
            if (!newKeyDown && this.private(el, THROTTLED)) {
              return false;
            } else {
              callback();
              this.putPrivate(el, THROTTLED, true);
              setTimeout(() => {
                if (asyncFilter()) {
                  this.triggerCycle(el, DEBOUNCE_TRIGGER);
                }
              }, timeout);
            }
          } else {
            setTimeout(() => {
              if (asyncFilter()) {
                this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle);
              }
            }, timeout);
          }
          let form = el.form;
          if (form && this.once(form, "bind-debounce")) {
            form.addEventListener("submit", () => {
              Array.from(new FormData(form).entries(), ([name2]) => {
                let input = form.querySelector(`[name="${name2}"]`);
                this.incCycle(input, DEBOUNCE_TRIGGER);
                this.deletePrivate(input, THROTTLED);
              });
            });
          }
          if (this.once(el, "bind-debounce")) {
            el.addEventListener("blur", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));
          }
      }
    },
    triggerCycle(el, key2, currentCycle) {
      let [cycle, trigger] = this.private(el, key2);
      if (!currentCycle) {
        currentCycle = cycle;
      }
      if (currentCycle === cycle) {
        this.incCycle(el, key2);
        trigger();
      }
    },
    once(el, key2) {
      if (this.private(el, key2) === true) {
        return false;
      }
      this.putPrivate(el, key2, true);
      return true;
    },
    incCycle(el, key2, trigger = function() {
    }) {
      let [currentCycle] = this.private(el, key2) || [0, trigger];
      currentCycle++;
      this.putPrivate(el, key2, [currentCycle, trigger]);
      return currentCycle;
    },
    discardError(container, el, phxFeedbackFor) {
      let field = el.getAttribute && el.getAttribute(phxFeedbackFor);
      let input = field && container.querySelector(`[id="${field}"], [name="${field}"], [name="${field}[]"]`);
      if (!input) {
        return;
      }
      if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input, PHX_HAS_SUBMITTED))) {
        el.classList.add(PHX_NO_FEEDBACK_CLASS);
      }
    },
    resetForm(form, phxFeedbackFor) {
      Array.from(form.elements).forEach((input) => {
        let query = `[${phxFeedbackFor}="${input.id}"],
                   [${phxFeedbackFor}="${input.name}"],
                   [${phxFeedbackFor}="${input.name.replace(/\[\]$/, "")}"]`;
        this.deletePrivate(input, PHX_HAS_FOCUSED);
        this.deletePrivate(input, PHX_HAS_SUBMITTED);
        this.all(document, query, (feedbackEl) => {
          feedbackEl.classList.add(PHX_NO_FEEDBACK_CLASS);
        });
      });
    },
    showError(inputEl, phxFeedbackFor) {
      if (inputEl.id || inputEl.name) {
        this.all(inputEl.form, `[${phxFeedbackFor}="${inputEl.id}"], [${phxFeedbackFor}="${inputEl.name}"]`, (el) => {
          this.removeClass(el, PHX_NO_FEEDBACK_CLASS);
        });
      }
    },
    isPhxChild(node) {
      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
    },
    isPhxSticky(node) {
      return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
    },
    firstPhxChild(el) {
      return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
    },
    dispatchEvent(target, name2, opts = {}) {
      let bubbles = opts.bubbles === void 0 ? true : !!opts.bubbles;
      let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
      let event = name2 === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name2, eventOpts);
      target.dispatchEvent(event);
    },
    cloneNode(node, html) {
      if (typeof html === "undefined") {
        return node.cloneNode(true);
      } else {
        let cloned = node.cloneNode(false);
        cloned.innerHTML = html;
        return cloned;
      }
    },
    mergeAttrs(target, source, opts = {}) {
      let exclude = opts.exclude || [];
      let isIgnored = opts.isIgnored;
      let sourceAttrs = source.attributes;
      for (let i = sourceAttrs.length - 1; i >= 0; i--) {
        let name2 = sourceAttrs[i].name;
        if (exclude.indexOf(name2) < 0) {
          target.setAttribute(name2, source.getAttribute(name2));
        }
      }
      let targetAttrs = target.attributes;
      for (let i = targetAttrs.length - 1; i >= 0; i--) {
        let name2 = targetAttrs[i].name;
        if (isIgnored) {
          if (name2.startsWith("data-") && !source.hasAttribute(name2)) {
            target.removeAttribute(name2);
          }
        } else {
          if (!source.hasAttribute(name2)) {
            target.removeAttribute(name2);
          }
        }
      }
    },
    mergeFocusedInput(target, source) {
      if (!(target instanceof HTMLSelectElement)) {
        DOM.mergeAttrs(target, source, { exclude: ["value"] });
      }
      if (source.readOnly) {
        target.setAttribute("readonly", true);
      } else {
        target.removeAttribute("readonly");
      }
    },
    hasSelectionRange(el) {
      return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
    },
    restoreFocus(focused, selectionStart, selectionEnd) {
      if (!DOM.isTextualInput(focused)) {
        return;
      }
      let wasFocused = focused.matches(":focus");
      if (focused.readOnly) {
        focused.blur();
      }
      if (!wasFocused) {
        focused.focus();
      }
      if (this.hasSelectionRange(focused)) {
        focused.setSelectionRange(selectionStart, selectionEnd);
      }
    },
    isFormInput(el) {
      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
    },
    syncAttrsToProps(el) {
      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
        el.checked = el.getAttribute("checked") !== null;
      }
    },
    isTextualInput(el) {
      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
    },
    isNowTriggerFormExternal(el, phxTriggerExternal) {
      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
    },
    syncPendingRef(fromEl, toEl, disableWith) {
      let ref = fromEl.getAttribute(PHX_REF);
      if (ref === null) {
        return true;
      }
      let refSrc = fromEl.getAttribute(PHX_REF_SRC);
      if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {
        if (DOM.isUploadInput(fromEl)) {
          DOM.mergeAttrs(fromEl, toEl, { isIgnored: true });
        }
        DOM.putPrivate(fromEl, PHX_REF, toEl);
        return false;
      } else {
        PHX_EVENT_CLASSES.forEach((className) => {
          fromEl.classList.contains(className) && toEl.classList.add(className);
        });
        toEl.setAttribute(PHX_REF, ref);
        toEl.setAttribute(PHX_REF_SRC, refSrc);
        return true;
      }
    },
    cleanChildNodes(container, phxUpdate) {
      if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
        let toRemove = [];
        container.childNodes.forEach((childNode) => {
          if (!childNode.id) {
            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
            if (!isEmptyTextNode) {
              logError(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"

`);
            }
            toRemove.push(childNode);
          }
        });
        toRemove.forEach((childNode) => childNode.remove());
      }
    },
    replaceRootContainer(container, tagName, attrs) {
      let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
        Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));
        Object.keys(attrs).filter((name2) => !retainedAttrs.has(name2.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));
        return container;
      } else {
        let newContainer = document.createElement(tagName);
        Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));
        retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));
        newContainer.innerHTML = container.innerHTML;
        container.replaceWith(newContainer);
        return newContainer;
      }
    },
    getSticky(el, name2, defaultVal) {
      let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name2 === existingName);
      if (op) {
        let [_name, _op, stashedResult] = op;
        return stashedResult;
      } else {
        return typeof defaultVal === "function" ? defaultVal() : defaultVal;
      }
    },
    deleteSticky(el, name2) {
      this.updatePrivate(el, "sticky", [], (ops) => {
        return ops.filter(([existingName, _]) => existingName !== name2);
      });
    },
    putSticky(el, name2, op) {
      let stashedResult = op(el);
      this.updatePrivate(el, "sticky", [], (ops) => {
        let existingIndex = ops.findIndex(([existingName]) => name2 === existingName);
        if (existingIndex >= 0) {
          ops[existingIndex] = [name2, op, stashedResult];
        } else {
          ops.push([name2, op, stashedResult]);
        }
        return ops;
      });
    },
    applyStickyOperations(el) {
      let ops = DOM.private(el, "sticky");
      if (!ops) {
        return;
      }
      ops.forEach(([name2, op, _stashed]) => this.putSticky(el, name2, op));
    }
  };
  var dom_default = DOM;
  var UploadEntry = class {
    static isActive(fileEl, file) {
      let isNew = file._phxRef === void 0;
      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return file.size > 0 && (isNew || isActive);
    }
    static isPreflighted(fileEl, file) {
      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return isPreflighted && this.isActive(fileEl, file);
    }
    constructor(fileEl, file, view) {
      this.ref = LiveUploader.genFileRef(file);
      this.fileEl = fileEl;
      this.file = file;
      this.view = view;
      this.meta = null;
      this._isCancelled = false;
      this._isDone = false;
      this._progress = 0;
      this._lastProgressSent = -1;
      this._onDone = function() {
      };
      this._onElUpdated = this.onElUpdated.bind(this);
      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
    }
    metadata() {
      return this.meta;
    }
    progress(progress) {
      this._progress = Math.floor(progress);
      if (this._progress > this._lastProgressSent) {
        if (this._progress >= 100) {
          this._progress = 100;
          this._lastProgressSent = 100;
          this._isDone = true;
          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
            LiveUploader.untrackFile(this.fileEl, this.file);
            this._onDone();
          });
        } else {
          this._lastProgressSent = this._progress;
          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
        }
      }
    }
    cancel() {
      this._isCancelled = true;
      this._isDone = true;
      this._onDone();
    }
    isDone() {
      return this._isDone;
    }
    error(reason = "failed") {
      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
      LiveUploader.clearFiles(this.fileEl);
    }
    onDone(callback) {
      this._onDone = () => {
        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        callback();
      };
    }
    onElUpdated() {
      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      if (activeRefs.indexOf(this.ref) === -1) {
        this.cancel();
      }
    }
    toPreflightPayload() {
      return {
        last_modified: this.file.lastModified,
        name: this.file.name,
        relative_path: this.file.webkitRelativePath,
        size: this.file.size,
        type: this.file.type,
        ref: this.ref
      };
    }
    uploader(uploaders) {
      if (this.meta.uploader) {
        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
        return { name: this.meta.uploader, callback };
      } else {
        return { name: "channel", callback: channelUploader };
      }
    }
    zipPostFlight(resp) {
      this.meta = resp.entries[this.ref];
      if (!this.meta) {
        logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
      }
    }
  };
  var liveUploaderFileRef = 0;
  var LiveUploader = class {
    static genFileRef(file) {
      let ref = file._phxRef;
      if (ref !== void 0) {
        return ref;
      } else {
        file._phxRef = (liveUploaderFileRef++).toString();
        return file._phxRef;
      }
    }
    static getEntryDataURL(inputEl, ref, callback) {
      let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);
      callback(URL.createObjectURL(file));
    }
    static hasUploadsInProgress(formEl) {
      let active = 0;
      dom_default.findUploadInputs(formEl).forEach((input) => {
        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
          active++;
        }
      });
      return active > 0;
    }
    static serializeUploads(inputEl) {
      let files = this.activeFiles(inputEl);
      let fileData = {};
      files.forEach((file) => {
        let entry = { path: inputEl.name };
        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
        fileData[uploadRef] = fileData[uploadRef] || [];
        entry.ref = this.genFileRef(file);
        entry.last_modified = file.lastModified;
        entry.name = file.name || entry.ref;
        entry.relative_path = file.webkitRelativePath;
        entry.type = file.type;
        entry.size = file.size;
        fileData[uploadRef].push(entry);
      });
      return fileData;
    }
    static clearFiles(inputEl) {
      inputEl.value = null;
      inputEl.removeAttribute(PHX_UPLOAD_REF);
      dom_default.putPrivate(inputEl, "files", []);
    }
    static untrackFile(inputEl, file) {
      dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f2) => !Object.is(f2, file)));
    }
    static trackFiles(inputEl, files, dataTransfer) {
      if (inputEl.getAttribute("multiple") !== null) {
        let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f2) => Object.is(f2, file)));
        dom_default.putPrivate(inputEl, "files", this.activeFiles(inputEl).concat(newFiles));
        inputEl.value = null;
      } else {
        if (dataTransfer && dataTransfer.files.length > 0) {
          inputEl.files = dataTransfer.files;
        }
        dom_default.putPrivate(inputEl, "files", files);
      }
    }
    static activeFileInputs(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
    }
    static activeFiles(input) {
      return (dom_default.private(input, "files") || []).filter((f2) => UploadEntry.isActive(input, f2));
    }
    static inputsAwaitingPreflight(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
    }
    static filesAwaitingPreflight(input) {
      return this.activeFiles(input).filter((f2) => !UploadEntry.isPreflighted(input, f2));
    }
    constructor(inputEl, view, onComplete) {
      this.view = view;
      this.onComplete = onComplete;
      this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view));
      this.numEntriesInProgress = this._entries.length;
    }
    entries() {
      return this._entries;
    }
    initAdapterUpload(resp, onError, liveSocket2) {
      this._entries = this._entries.map((entry) => {
        entry.zipPostFlight(resp);
        entry.onDone(() => {
          this.numEntriesInProgress--;
          if (this.numEntriesInProgress === 0) {
            this.onComplete();
          }
        });
        return entry;
      });
      let groupedEntries = this._entries.reduce((acc, entry) => {
        let { name: name2, callback } = entry.uploader(liveSocket2.uploaders);
        acc[name2] = acc[name2] || { callback, entries: [] };
        acc[name2].entries.push(entry);
        return acc;
      }, {});
      for (let name2 in groupedEntries) {
        let { callback, entries } = groupedEntries[name2];
        callback(entries, onError, resp, liveSocket2);
      }
    }
  };
  var ARIA = {
    focusMain() {
      let target = document.querySelector("main h1, main, h1");
      if (target) {
        let origTabIndex = target.tabIndex;
        target.tabIndex = -1;
        target.focus();
        target.tabIndex = origTabIndex;
      }
    },
    anyOf(instance, classes) {
      return classes.find((name2) => instance instanceof name2);
    },
    isFocusable(el, interactiveOnly) {
      return el instanceof HTMLAnchorElement && el.rel !== "ignore" || el instanceof HTMLAreaElement && el.href !== void 0 || !el.disabled && this.anyOf(el, [HTMLInputElement, HTMLSelectElement, HTMLTextAreaElement, HTMLButtonElement]) || el instanceof HTMLIFrameElement || (el.tabIndex > 0 || !interactiveOnly && el.tabIndex === 0 && el.getAttribute("tabindex") !== null && el.getAttribute("aria-hidden") !== "true");
    },
    attemptFocus(el, interactiveOnly) {
      if (this.isFocusable(el, interactiveOnly)) {
        try {
          el.focus();
        } catch (e) {
        }
      }
      return !!document.activeElement && document.activeElement.isSameNode(el);
    },
    focusFirstInteractive(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child, true) || this.focusFirstInteractive(child, true)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusFirst(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusFirst(child)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusLast(el) {
      let child = el.lastElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusLast(child)) {
          return true;
        }
        child = child.previousElementSibling;
      }
    }
  };
  var aria_default = ARIA;
  var Hooks = {
    LiveFileUpload: {
      activeRefs() {
        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
      },
      preflightedRefs() {
        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
      },
      mounted() {
        this.preflightedWas = this.preflightedRefs();
      },
      updated() {
        let newPreflights = this.preflightedRefs();
        if (this.preflightedWas !== newPreflights) {
          this.preflightedWas = newPreflights;
          if (newPreflights === "") {
            this.__view.cancelSubmit(this.el.form);
          }
        }
        if (this.activeRefs() === "") {
          this.el.value = null;
        }
        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
      }
    },
    LiveImgPreview: {
      mounted() {
        this.ref = this.el.getAttribute("data-phx-entry-ref");
        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
        LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
          this.url = url;
          this.el.src = url;
        });
      },
      destroyed() {
        URL.revokeObjectURL(this.url);
      }
    },
    FocusWrap: {
      mounted() {
        this.focusStart = this.el.firstElementChild;
        this.focusEnd = this.el.lastElementChild;
        this.focusStart.addEventListener("focus", () => aria_default.focusLast(this.el));
        this.focusEnd.addEventListener("focus", () => aria_default.focusFirst(this.el));
        this.el.addEventListener("phx:show-end", () => this.el.focus());
        if (window.getComputedStyle(this.el).display !== "none") {
          aria_default.focusFirst(this.el);
        }
      }
    }
  };
  var hooks_default = Hooks;
  var DOMPostMorphRestorer = class {
    constructor(containerBefore, containerAfter, updateType) {
      let idsBefore = /* @__PURE__ */ new Set();
      let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
      let elementsToModify = [];
      Array.from(containerBefore.children).forEach((child) => {
        if (child.id) {
          idsBefore.add(child.id);
          if (idsAfter.has(child.id)) {
            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
            elementsToModify.push({ elementId: child.id, previousElementId });
          }
        }
      });
      this.containerId = containerAfter.id;
      this.updateType = updateType;
      this.elementsToModify = elementsToModify;
      this.elementIdsToAdd = [...idsAfter].filter((id2) => !idsBefore.has(id2));
    }
    perform() {
      let container = dom_default.byId(this.containerId);
      this.elementsToModify.forEach((elementToModify) => {
        if (elementToModify.previousElementId) {
          maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
            maybe(document.getElementById(elementToModify.elementId), (elem) => {
              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
              if (!isInRightPlace) {
                previousElem.insertAdjacentElement("afterend", elem);
              }
            });
          });
        } else {
          maybe(document.getElementById(elementToModify.elementId), (elem) => {
            let isInRightPlace = elem.previousElementSibling == null;
            if (!isInRightPlace) {
              container.insertAdjacentElement("afterbegin", elem);
            }
          });
        }
      });
      if (this.updateType == "prepend") {
        this.elementIdsToAdd.reverse().forEach((elemId) => {
          maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
        });
      }
    }
  };
  var DOCUMENT_FRAGMENT_NODE = 11;
  function morphAttrs(fromNode, toNode) {
    var toNodeAttrs = toNode.attributes;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;
    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
      return;
    }
    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {
      attr = toNodeAttrs[i];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      attrValue = attr.value;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
        if (fromValue !== attrValue) {
          if (attr.prefix === "xmlns") {
            attrName = attr.name;
          }
          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
        }
      } else {
        fromValue = fromNode.getAttribute(attrName);
        if (fromValue !== attrValue) {
          fromNode.setAttribute(attrName, attrValue);
        }
      }
    }
    var fromNodeAttrs = fromNode.attributes;
    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {
      attr = fromNodeAttrs[d];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          fromNode.removeAttributeNS(attrNamespaceURI, attrName);
        }
      } else {
        if (!toNode.hasAttribute(attrName)) {
          fromNode.removeAttribute(attrName);
        }
      }
    }
  }
  var range;
  var NS_XHTML = "http://www.w3.org/1999/xhtml";
  var doc = typeof document === "undefined" ? void 0 : document;
  var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();
  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    template.innerHTML = str;
    return template.content.childNodes[0];
  }
  function createFragmentFromRange(str) {
    if (!range) {
      range = doc.createRange();
      range.selectNode(doc.body);
    }
    var fragment = range.createContextualFragment(str);
    return fragment.childNodes[0];
  }
  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    fragment.innerHTML = str;
    return fragment.childNodes[0];
  }
  function toElement(str) {
    str = str.trim();
    if (HAS_TEMPLATE_SUPPORT) {
      return createFragmentFromTemplate(str);
    } else if (HAS_RANGE_SUPPORT) {
      return createFragmentFromRange(str);
    }
    return createFragmentFromWrap(str);
  }
  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    var fromCodeStart, toCodeStart;
    if (fromNodeName === toNodeName) {
      return true;
    }
    fromCodeStart = fromNodeName.charCodeAt(0);
    toCodeStart = toNodeName.charCodeAt(0);
    if (fromCodeStart <= 90 && toCodeStart >= 97) {
      return fromNodeName === toNodeName.toUpperCase();
    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
      return toNodeName === fromNodeName.toUpperCase();
    } else {
      return false;
    }
  }
  function createElementNS(name2, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name2) : doc.createElementNS(namespaceURI, name2);
  }
  function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild);
      curChild = nextChild;
    }
    return toEl;
  }
  function syncBooleanAttrProp(fromEl, toEl, name2) {
    if (fromEl[name2] !== toEl[name2]) {
      fromEl[name2] = toEl[name2];
      if (fromEl[name2]) {
        fromEl.setAttribute(name2, "");
      } else {
        fromEl.removeAttribute(name2);
      }
    }
  }
  var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
      var parentNode = fromEl.parentNode;
      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        if (parentName === "OPTGROUP") {
          parentNode = parentNode.parentNode;
          parentName = parentNode && parentNode.nodeName.toUpperCase();
        }
        if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
          if (fromEl.hasAttribute("selected") && !toEl.selected) {
            fromEl.setAttribute("selected", "selected");
            fromEl.removeAttribute("selected");
          }
          parentNode.selectedIndex = -1;
        }
      }
      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    INPUT: function(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked");
      syncBooleanAttrProp(fromEl, toEl, "disabled");
      if (fromEl.value !== toEl.value) {
        fromEl.value = toEl.value;
      }
      if (!toEl.hasAttribute("value")) {
        fromEl.removeAttribute("value");
      }
    },
    TEXTAREA: function(fromEl, toEl) {
      var newValue = toEl.value;
      if (fromEl.value !== newValue) {
        fromEl.value = newValue;
      }
      var firstChild = fromEl.firstChild;
      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
          return;
        }
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        var selectedIndex = -1;
        var i = 0;
        var curChild = fromEl.firstChild;
        var optgroup;
        var nodeName;
        while (curChild) {
          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
          if (nodeName === "OPTGROUP") {
            optgroup = curChild;
            curChild = optgroup.firstChild;
          } else {
            if (nodeName === "OPTION") {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i;
                break;
              }
              i++;
            }
            curChild = curChild.nextSibling;
            if (!curChild && optgroup) {
              curChild = optgroup.nextSibling;
              optgroup = null;
            }
          }
        }
        fromEl.selectedIndex = selectedIndex;
      }
    }
  };
  var ELEMENT_NODE = 1;
  var DOCUMENT_FRAGMENT_NODE$1 = 11;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  function noop() {
  }
  function defaultGetNodeKey(node) {
    if (node) {
      return node.getAttribute && node.getAttribute("id") || node.id;
    }
  }
  function morphdomFactory(morphAttrs2) {
    return function morphdom2(fromNode, toNode, options) {
      if (!options) {
        options = {};
      }
      if (typeof toNode === "string") {
        if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
          var toNodeHtml = toNode;
          toNode = doc.createElement("html");
          toNode.innerHTML = toNodeHtml;
        } else {
          toNode = toElement(toNode);
        }
      } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
        toNode = toNode.firstElementChild;
      }
      var getNodeKey = options.getNodeKey || defaultGetNodeKey;
      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
      var onNodeAdded = options.onNodeAdded || noop;
      var onBeforeElUpdated = options.onBeforeElUpdated || noop;
      var onElUpdated = options.onElUpdated || noop;
      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
      var onNodeDiscarded = options.onNodeDiscarded || noop;
      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
      var skipFromChildren = options.skipFromChildren || noop;
      var addChild = options.addChild || function(parent, child) {
        return parent.appendChild(child);
      };
      var childrenOnly = options.childrenOnly === true;
      var fromNodesLookup = /* @__PURE__ */ Object.create(null);
      var keyedRemovalList = [];
      function addKeyedRemoval(key2) {
        keyedRemovalList.push(key2);
      }
      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
          var curChild = node.firstChild;
          while (curChild) {
            var key2 = void 0;
            if (skipKeyedNodes && (key2 = getNodeKey(curChild))) {
              addKeyedRemoval(key2);
            } else {
              onNodeDiscarded(curChild);
              if (curChild.firstChild) {
                walkDiscardedChildNodes(curChild, skipKeyedNodes);
              }
            }
            curChild = curChild.nextSibling;
          }
        }
      }
      function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
          return;
        }
        if (parentNode) {
          parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
      }
      function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
          var curChild = node.firstChild;
          while (curChild) {
            var key2 = getNodeKey(curChild);
            if (key2) {
              fromNodesLookup[key2] = curChild;
            }
            indexTree(curChild);
            curChild = curChild.nextSibling;
          }
        }
      }
      indexTree(fromNode);
      function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
          var nextSibling = curChild.nextSibling;
          var key2 = getNodeKey(curChild);
          if (key2) {
            var unmatchedFromEl = fromNodesLookup[key2];
            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
              morphEl(unmatchedFromEl, curChild);
            } else {
              handleNodeAdded(curChild);
            }
          } else {
            handleNodeAdded(curChild);
          }
          curChild = nextSibling;
        }
      }
      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        while (curFromNodeChild) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
            addKeyedRemoval(curFromNodeKey);
          } else {
            removeNode(curFromNodeChild, fromEl, true);
          }
          curFromNodeChild = fromNextSibling;
        }
      }
      function morphEl(fromEl, toEl, childrenOnly2) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
          delete fromNodesLookup[toElKey];
        }
        if (!childrenOnly2) {
          if (onBeforeElUpdated(fromEl, toEl) === false) {
            return;
          }
          morphAttrs2(fromEl, toEl);
          onElUpdated(fromEl);
          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
            return;
          }
        }
        if (fromEl.nodeName !== "TEXTAREA") {
          morphChildren(fromEl, toEl);
        } else {
          specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }
      function morphChildren(fromEl, toEl) {
        var skipFrom = skipFromChildren(fromEl);
        var curToNodeChild = toEl.firstChild;
        var curFromNodeChild = fromEl.firstChild;
        var curToNodeKey;
        var curFromNodeKey;
        var fromNextSibling;
        var toNextSibling;
        var matchingFromEl;
        outer:
          while (curToNodeChild) {
            toNextSibling = curToNodeChild.nextSibling;
            curToNodeKey = getNodeKey(curToNodeChild);
            while (!skipFrom && curFromNodeChild) {
              fromNextSibling = curFromNodeChild.nextSibling;
              if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              curFromNodeKey = getNodeKey(curFromNodeChild);
              var curFromNodeType = curFromNodeChild.nodeType;
              var isCompatible = void 0;
              if (curFromNodeType === curToNodeChild.nodeType) {
                if (curFromNodeType === ELEMENT_NODE) {
                  if (curToNodeKey) {
                    if (curToNodeKey !== curFromNodeKey) {
                      if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                        if (fromNextSibling === matchingFromEl) {
                          isCompatible = false;
                        } else {
                          fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                          if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                          } else {
                            removeNode(curFromNodeChild, fromEl, true);
                          }
                          curFromNodeChild = matchingFromEl;
                        }
                      } else {
                        isCompatible = false;
                      }
                    }
                  } else if (curFromNodeKey) {
                    isCompatible = false;
                  }
                  isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                  if (isCompatible) {
                    morphEl(curFromNodeChild, curToNodeChild);
                  }
                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                  isCompatible = true;
                  if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                  }
                }
              }
              if (isCompatible) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              if (curFromNodeKey) {
                addKeyedRemoval(curFromNodeKey);
              } else {
                removeNode(curFromNodeChild, fromEl, true);
              }
              curFromNodeChild = fromNextSibling;
            }
            if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
              if (!skipFrom) {
                addChild(fromEl, matchingFromEl);
              }
              morphEl(matchingFromEl, curToNodeChild);
            } else {
              var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
              if (onBeforeNodeAddedResult !== false) {
                if (onBeforeNodeAddedResult) {
                  curToNodeChild = onBeforeNodeAddedResult;
                }
                if (curToNodeChild.actualize) {
                  curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                }
                addChild(fromEl, curToNodeChild);
                handleNodeAdded(curToNodeChild);
              }
            }
            curToNodeChild = toNextSibling;
            curFromNodeChild = fromNextSibling;
          }
        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
          specialElHandler(fromEl, toEl);
        }
      }
      var morphedNode = fromNode;
      var morphedNodeType = morphedNode.nodeType;
      var toNodeType = toNode.nodeType;
      if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
          if (toNodeType === ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
              onNodeDiscarded(fromNode);
              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
            }
          } else {
            morphedNode = toNode;
          }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
          if (toNodeType === morphedNodeType) {
            if (morphedNode.nodeValue !== toNode.nodeValue) {
              morphedNode.nodeValue = toNode.nodeValue;
            }
            return morphedNode;
          } else {
            morphedNode = toNode;
          }
        }
      }
      if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
      } else {
        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
          return;
        }
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
          for (var i = 0, len = keyedRemovalList.length; i < len; i++) {
            var elToRemove = fromNodesLookup[keyedRemovalList[i]];
            if (elToRemove) {
              removeNode(elToRemove, elToRemove.parentNode, false);
            }
          }
        }
      }
      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
      }
      return morphedNode;
    };
  }
  var morphdom = morphdomFactory(morphAttrs);
  var morphdom_esm_default = morphdom;
  var DOMPatch = class {
    static patchEl(fromEl, toEl, activeElement) {
      morphdom_esm_default(fromEl, toEl, {
        childrenOnly: false,
        onBeforeElUpdated: (fromEl2, toEl2) => {
          if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {
            dom_default.mergeFocusedInput(fromEl2, toEl2);
            return false;
          }
        }
      });
    }
    constructor(view, container, id2, html, streams, targetCID) {
      this.view = view;
      this.liveSocket = view.liveSocket;
      this.container = container;
      this.id = id2;
      this.rootID = view.root.id;
      this.html = html;
      this.streams = streams;
      this.streamInserts = {};
      this.targetCID = targetCID;
      this.cidPatch = isCid(this.targetCID);
      this.pendingRemoves = [];
      this.phxRemove = this.liveSocket.binding("remove");
      this.callbacks = {
        beforeadded: [],
        beforeupdated: [],
        beforephxChildAdded: [],
        afteradded: [],
        afterupdated: [],
        afterdiscarded: [],
        afterphxChildAdded: [],
        aftertransitionsDiscarded: []
      };
    }
    before(kind, callback) {
      this.callbacks[`before${kind}`].push(callback);
    }
    after(kind, callback) {
      this.callbacks[`after${kind}`].push(callback);
    }
    trackBefore(kind, ...args) {
      this.callbacks[`before${kind}`].forEach((callback) => callback(...args));
    }
    trackAfter(kind, ...args) {
      this.callbacks[`after${kind}`].forEach((callback) => callback(...args));
    }
    markPrunableContentForRemoval() {
      let phxUpdate = this.liveSocket.binding(PHX_UPDATE);
      dom_default.all(this.container, `[${phxUpdate}=${PHX_STREAM}]`, (el) => el.innerHTML = "");
      dom_default.all(this.container, `[${phxUpdate}=append] > *, [${phxUpdate}=prepend] > *`, (el) => {
        el.setAttribute(PHX_PRUNE, "");
      });
    }
    perform() {
      let { view, liveSocket: liveSocket2, container, html } = this;
      let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;
      if (this.isCIDPatch() && !targetContainer) {
        return;
      }
      let focused = liveSocket2.getActiveElement();
      let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      let phxFeedbackFor = liveSocket2.binding(PHX_FEEDBACK_FOR);
      let disableWith = liveSocket2.binding(PHX_DISABLE_WITH);
      let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
      let added = [];
      let updates = [];
      let appendPrependUpdates = [];
      let externalFormTriggered = null;
      let diffHTML = liveSocket2.time("premorph container prep", () => {
        return this.buildDiffHTML(container, html, phxUpdate, targetContainer);
      });
      this.trackBefore("added", container);
      this.trackBefore("updated", container, container);
      liveSocket2.time("morphdom", () => {
        this.streams.forEach(([inserts, deleteIds]) => {
          this.streamInserts = Object.assign(this.streamInserts, inserts);
          deleteIds.forEach((id2) => {
            let child = container.querySelector(`[id="${id2}"]`);
            if (child) {
              if (!this.maybePendingRemove(child)) {
                child.remove();
                this.onNodeDiscarded(child);
              }
            }
          });
        });
        morphdom_esm_default(targetContainer, diffHTML, {
          childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,
          getNodeKey: (node) => {
            return dom_default.isPhxDestroyed(node) ? null : node.id;
          },
          skipFromChildren: (from) => {
            return from.getAttribute(phxUpdate) === PHX_STREAM;
          },
          addChild: (parent, child) => {
            let streamAt = child.id ? this.streamInserts[child.id] : void 0;
            if (streamAt === void 0) {
              return parent.appendChild(child);
            }
            dom_default.putPrivate(child, PHX_STREAM, true);
            if (streamAt === 0) {
              parent.insertAdjacentElement("afterbegin", child);
            } else if (streamAt === -1) {
              parent.appendChild(child);
            } else if (streamAt > 0) {
              let sibling = Array.from(parent.children)[streamAt];
              parent.insertBefore(child, sibling);
            }
          },
          onBeforeNodeAdded: (el) => {
            this.trackBefore("added", el);
            return el;
          },
          onNodeAdded: (el) => {
            if (el instanceof HTMLImageElement && el.srcset) {
              el.srcset = el.srcset;
            } else if (el instanceof HTMLVideoElement && el.autoplay) {
              el.play();
            }
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            dom_default.discardError(targetContainer, el, phxFeedbackFor);
            if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
              this.trackAfter("phxChildAdded", el);
            }
            added.push(el);
          },
          onNodeDiscarded: (el) => this.onNodeDiscarded(el),
          onBeforeNodeDiscarded: (el) => {
            if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
              return true;
            }
            if (dom_default.private(el, PHX_STREAM)) {
              return false;
            }
            if (el.parentElement !== null && dom_default.isPhxUpdate(el.parentElement, phxUpdate, ["append", "prepend"]) && el.id) {
              return false;
            }
            if (this.maybePendingRemove(el)) {
              return false;
            }
            if (this.skipCIDSibling(el)) {
              return false;
            }
            return true;
          },
          onElUpdated: (el) => {
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            updates.push(el);
            this.maybeReOrderStream(el);
          },
          onBeforeElUpdated: (fromEl, toEl) => {
            dom_default.cleanChildNodes(toEl, phxUpdate);
            if (this.skipCIDSibling(toEl)) {
              return false;
            }
            if (dom_default.isPhxSticky(fromEl)) {
              return false;
            }
            if (dom_default.isIgnored(fromEl, phxUpdate) || fromEl.form && fromEl.form.isSameNode(externalFormTriggered)) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
              return false;
            }
            if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {
              if (dom_default.isUploadInput(fromEl)) {
                this.trackBefore("updated", fromEl, toEl);
                updates.push(fromEl);
              }
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (dom_default.isPhxChild(toEl)) {
              let prevSession = fromEl.getAttribute(PHX_SESSION);
              dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
              if (prevSession !== "") {
                fromEl.setAttribute(PHX_SESSION, prevSession);
              }
              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            dom_default.copyPrivates(toEl, fromEl);
            dom_default.discardError(targetContainer, toEl, phxFeedbackFor);
            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
            if (isFocusedFormEl && fromEl.type !== "hidden") {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeFocusedInput(fromEl, toEl);
              dom_default.syncAttrsToProps(fromEl);
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            } else {
              if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
              }
              dom_default.syncAttrsToProps(toEl);
              dom_default.applyStickyOperations(toEl);
              this.trackBefore("updated", fromEl, toEl);
              return true;
            }
          }
        });
      });
      if (liveSocket2.isDebugEnabled()) {
        detectDuplicateIds();
      }
      if (appendPrependUpdates.length > 0) {
        liveSocket2.time("post-morph append/prepend restoration", () => {
          appendPrependUpdates.forEach((update5) => update5.perform());
        });
      }
      liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
      dom_default.dispatchEvent(document, "phx:update");
      added.forEach((el) => this.trackAfter("added", el));
      updates.forEach((el) => this.trackAfter("updated", el));
      this.transitionPendingRemoves();
      if (externalFormTriggered) {
        liveSocket2.unload();
        externalFormTriggered.submit();
      }
      return true;
    }
    onNodeDiscarded(el) {
      if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
        this.liveSocket.destroyViewByEl(el);
      }
      this.trackAfter("discarded", el);
    }
    maybePendingRemove(node) {
      if (node.getAttribute && node.getAttribute(this.phxRemove) !== null) {
        this.pendingRemoves.push(node);
        return true;
      } else {
        return false;
      }
    }
    maybeReOrderStream(el) {
      let streamAt = el.id ? this.streamInserts[el.id] : void 0;
      if (streamAt === void 0) {
        return;
      }
      dom_default.putPrivate(el, PHX_STREAM, true);
      if (streamAt === 0) {
        el.parentElement.insertBefore(el, el.parentElement.firstElementChild);
      } else if (streamAt > 0) {
        let children = Array.from(el.parentElement.children);
        let oldIndex = children.indexOf(el);
        if (streamAt >= children.length - 1) {
          el.parentElement.appendChild(el);
        } else {
          let sibling = children[streamAt];
          if (oldIndex > streamAt) {
            el.parentElement.insertBefore(el, sibling);
          } else {
            el.parentElement.insertBefore(el, sibling.nextElementSibling);
          }
        }
      }
    }
    transitionPendingRemoves() {
      let { pendingRemoves, liveSocket: liveSocket2 } = this;
      if (pendingRemoves.length > 0) {
        liveSocket2.transitionRemoves(pendingRemoves);
        liveSocket2.requestDOMUpdate(() => {
          pendingRemoves.forEach((el) => {
            let child = dom_default.firstPhxChild(el);
            if (child) {
              liveSocket2.destroyViewByEl(child);
            }
            el.remove();
          });
          this.trackAfter("transitionsDiscarded", pendingRemoves);
        });
      }
    }
    isCIDPatch() {
      return this.cidPatch;
    }
    skipCIDSibling(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.getAttribute(PHX_SKIP) !== null;
    }
    targetCIDContainer(html) {
      if (!this.isCIDPatch()) {
        return;
      }
      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
      if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {
        return first;
      } else {
        return first && first.parentNode;
      }
    }
    buildDiffHTML(container, html, phxUpdate, targetContainer) {
      let isCIDPatch = this.isCIDPatch();
      let isCIDWithSingleRoot = isCIDPatch && targetContainer.getAttribute(PHX_COMPONENT) === this.targetCID.toString();
      if (!isCIDPatch || isCIDWithSingleRoot) {
        return html;
      } else {
        let diffContainer = null;
        let template = document.createElement("template");
        diffContainer = dom_default.cloneNode(targetContainer);
        let [firstComponent, ...rest] = dom_default.findComponentNodeList(diffContainer, this.targetCID);
        template.innerHTML = html;
        rest.forEach((el) => el.remove());
        Array.from(diffContainer.childNodes).forEach((child) => {
          if (child.id && child.nodeType === Node.ELEMENT_NODE && child.getAttribute(PHX_COMPONENT) !== this.targetCID.toString()) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
        });
        Array.from(template.content.childNodes).forEach((el) => diffContainer.insertBefore(el, firstComponent));
        firstComponent.remove();
        return diffContainer.outerHTML;
      }
    }
    indexOf(parent, child) {
      return Array.from(parent.children).indexOf(child);
    }
  };
  var Rendered = class {
    static extract(diff) {
      let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
      delete diff[REPLY];
      delete diff[EVENTS];
      delete diff[TITLE];
      return { diff, title, reply: reply || null, events: events || [] };
    }
    constructor(viewId, rendered) {
      this.viewId = viewId;
      this.rendered = {};
      this.mergeDiff(rendered);
    }
    parentViewId() {
      return this.viewId;
    }
    toString(onlyCids) {
      let [str, streams] = this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids);
      return [str, streams];
    }
    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids) {
      onlyCids = onlyCids ? new Set(onlyCids) : null;
      let output = { buffer: "", components, onlyCids, streams: /* @__PURE__ */ new Set() };
      this.toOutputBuffer(rendered, null, output);
      return [output.buffer, output.streams];
    }
    componentCIDs(diff) {
      return Object.keys(diff[COMPONENTS] || {}).map((i) => parseInt(i));
    }
    isComponentOnlyDiff(diff) {
      if (!diff[COMPONENTS]) {
        return false;
      }
      return Object.keys(diff).length === 1;
    }
    getComponent(diff, cid) {
      return diff[COMPONENTS][cid];
    }
    mergeDiff(diff) {
      let newc = diff[COMPONENTS];
      let cache = {};
      delete diff[COMPONENTS];
      this.rendered = this.mutableMerge(this.rendered, diff);
      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
      if (newc) {
        let oldc = this.rendered[COMPONENTS];
        for (let cid in newc) {
          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
        }
        for (let cid in newc) {
          oldc[cid] = newc[cid];
        }
        diff[COMPONENTS] = newc;
      }
    }
    cachedFindComponent(cid, cdiff, oldc, newc, cache) {
      if (cache[cid]) {
        return cache[cid];
      } else {
        let ndiff, stat, scid = cdiff[STATIC];
        if (isCid(scid)) {
          let tdiff;
          if (scid > 0) {
            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
          } else {
            tdiff = oldc[-scid];
          }
          stat = tdiff[STATIC];
          ndiff = this.cloneMerge(tdiff, cdiff);
          ndiff[STATIC] = stat;
        } else {
          ndiff = cdiff[STATIC] !== void 0 ? cdiff : this.cloneMerge(oldc[cid] || {}, cdiff);
        }
        cache[cid] = ndiff;
        return ndiff;
      }
    }
    mutableMerge(target, source) {
      if (source[STATIC] !== void 0) {
        return source;
      } else {
        this.doMutableMerge(target, source);
        return target;
      }
    }
    doMutableMerge(target, source) {
      for (let key2 in source) {
        let val = source[key2];
        let targetVal = target[key2];
        let isObjVal = isObject(val);
        if (isObjVal && val[STATIC] === void 0 && isObject(targetVal)) {
          this.doMutableMerge(targetVal, val);
        } else {
          target[key2] = val;
        }
      }
    }
    cloneMerge(target, source) {
      let merged = __spreadValues(__spreadValues({}, target), source);
      for (let key2 in merged) {
        let val = source[key2];
        let targetVal = target[key2];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          merged[key2] = this.cloneMerge(targetVal, val);
        }
      }
      return merged;
    }
    componentToString(cid) {
      let [str, streams] = this.recursiveCIDToString(this.rendered[COMPONENTS], cid);
      return [str, streams];
    }
    pruneCIDs(cids) {
      cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
    }
    get() {
      return this.rendered;
    }
    isNewFingerprint(diff = {}) {
      return !!diff[STATIC];
    }
    templateStatic(part, templates) {
      if (typeof part === "number") {
        return templates[part];
      } else {
        return part;
      }
    }
    toOutputBuffer(rendered, templates, output) {
      if (rendered[DYNAMICS]) {
        return this.comprehensionToBuffer(rendered, templates, output);
      }
      let { [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      output.buffer += statics[0];
      for (let i = 1; i < statics.length; i++) {
        this.dynamicToBuffer(rendered[i - 1], templates, output);
        output.buffer += statics[i];
      }
    }
    comprehensionToBuffer(rendered, templates, output) {
      let { [DYNAMICS]: dynamics, [STATIC]: statics, [STREAM]: stream } = rendered;
      let [_inserts, deleteIds] = stream || [{}, []];
      statics = this.templateStatic(statics, templates);
      let compTemplates = templates || rendered[TEMPLATES];
      for (let d = 0; d < dynamics.length; d++) {
        let dynamic = dynamics[d];
        output.buffer += statics[0];
        for (let i = 1; i < statics.length; i++) {
          this.dynamicToBuffer(dynamic[i - 1], compTemplates, output);
          output.buffer += statics[i];
        }
      }
      if (stream !== void 0 && (rendered[DYNAMICS].length > 0 || deleteIds.length > 0)) {
        rendered[DYNAMICS] = [];
        output.streams.add(stream);
      }
    }
    dynamicToBuffer(rendered, templates, output) {
      if (typeof rendered === "number") {
        let [str, streams] = this.recursiveCIDToString(output.components, rendered, output.onlyCids);
        output.buffer += str;
        output.streams = /* @__PURE__ */ new Set([...output.streams, ...streams]);
      } else if (isObject(rendered)) {
        this.toOutputBuffer(rendered, templates, output);
      } else {
        output.buffer += rendered;
      }
    }
    recursiveCIDToString(components, cid, onlyCids) {
      let component = components[cid] || logError(`no component for CID ${cid}`, components);
      let template = document.createElement("template");
      let [html, streams] = this.recursiveToString(component, components, onlyCids);
      template.innerHTML = html;
      let container = template.content;
      let skip = onlyCids && !onlyCids.has(cid);
      let [hasChildNodes, hasChildComponents] = Array.from(container.childNodes).reduce(([hasNodes, hasComponents], child, i) => {
        if (child.nodeType === Node.ELEMENT_NODE) {
          if (child.getAttribute(PHX_COMPONENT)) {
            return [hasNodes, true];
          }
          child.setAttribute(PHX_COMPONENT, cid);
          if (!child.id) {
            child.id = `${this.parentViewId()}-${cid}-${i}`;
          }
          if (skip) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
          return [true, hasComponents];
        } else {
          if (child.nodeValue.trim() !== "") {
            logError(`only HTML element tags are allowed at the root of components.

got: "${child.nodeValue.trim()}"

within:
`, template.innerHTML.trim());
            child.replaceWith(this.createSpan(child.nodeValue, cid));
            return [true, hasComponents];
          } else {
            child.remove();
            return [hasNodes, hasComponents];
          }
        }
      }, [false, false]);
      if (!hasChildNodes && !hasChildComponents) {
        logError("expected at least one HTML element tag inside a component, but the component is empty:\n", template.innerHTML.trim());
        return [this.createSpan("", cid).outerHTML, streams];
      } else if (!hasChildNodes && hasChildComponents) {
        logError("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.", template.innerHTML.trim());
        return [template.innerHTML, streams];
      } else {
        return [template.innerHTML, streams];
      }
    }
    createSpan(text, cid) {
      let span = document.createElement("span");
      span.innerText = text;
      span.setAttribute(PHX_COMPONENT, cid);
      return span;
    }
  };
  var viewHookID = 1;
  var ViewHook = class {
    static makeID() {
      return viewHookID++;
    }
    static elementID(el) {
      return el.phxHookId;
    }
    constructor(view, el, callbacks) {
      this.__view = view;
      this.liveSocket = view.liveSocket;
      this.__callbacks = callbacks;
      this.__listeners = /* @__PURE__ */ new Set();
      this.__isDisconnected = false;
      this.el = el;
      this.el.phxHookId = this.constructor.makeID();
      for (let key2 in this.__callbacks) {
        this[key2] = this.__callbacks[key2];
      }
    }
    __mounted() {
      this.mounted && this.mounted();
    }
    __updated() {
      this.updated && this.updated();
    }
    __beforeUpdate() {
      this.beforeUpdate && this.beforeUpdate();
    }
    __destroyed() {
      this.destroyed && this.destroyed();
    }
    __reconnected() {
      if (this.__isDisconnected) {
        this.__isDisconnected = false;
        this.reconnected && this.reconnected();
      }
    }
    __disconnected() {
      this.__isDisconnected = true;
      this.disconnected && this.disconnected();
    }
    pushEvent(event, payload = {}, onReply = function() {
    }) {
      return this.__view.pushHookEvent(null, event, payload, onReply);
    }
    pushEventTo(phxTarget, event, payload = {}, onReply = function() {
    }) {
      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
        return view.pushHookEvent(targetCtx, event, payload, onReply);
      });
    }
    handleEvent(event, callback) {
      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
      window.addEventListener(`phx:${event}`, callbackRef);
      this.__listeners.add(callbackRef);
      return callbackRef;
    }
    removeHandleEvent(callbackRef) {
      let event = callbackRef(null, true);
      window.removeEventListener(`phx:${event}`, callbackRef);
      this.__listeners.delete(callbackRef);
    }
    upload(name2, files) {
      return this.__view.dispatchUploads(name2, files);
    }
    uploadTo(phxTarget, name2, files) {
      return this.__view.withinTargets(phxTarget, (view) => view.dispatchUploads(name2, files));
    }
    __cleanup__() {
      this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
    }
  };
  var focusStack = null;
  var JS = {
    exec(eventType, phxEvent, view, sourceEl, defaults) {
      let [defaultKind, defaultArgs] = defaults || [null, {}];
      let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];
      commands.forEach(([kind, args]) => {
        if (kind === defaultKind && defaultArgs.data) {
          args.data = Object.assign(args.data || {}, defaultArgs.data);
        }
        this.filterToEls(sourceEl, args).forEach((el) => {
          this[`exec_${kind}`](eventType, phxEvent, view, sourceEl, el, args);
        });
      });
    },
    isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
    },
    exec_dispatch(eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
      detail = detail || {};
      detail.dispatcher = sourceEl;
      dom_default.dispatchEvent(el, event, { detail, bubbles });
    },
    exec_push(eventType, phxEvent, view, sourceEl, el, args) {
      if (!view.isConnected()) {
        return;
      }
      let { event, data: data2, target, page_loading, loading, value, dispatcher } = args;
      let pushOpts = { loading, value, target, page_loading: !!page_loading };
      let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
      let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
      view.withinTargets(phxTarget, (targetView, targetCtx) => {
        if (eventType === "change") {
          let { newCid, _target, callback } = args;
          _target = _target || (dom_default.isFormInput(sourceEl) ? sourceEl.name : void 0);
          if (_target) {
            pushOpts._target = _target;
          }
          targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
        } else if (eventType === "submit") {
          targetView.submitForm(sourceEl, targetCtx, event || phxEvent, pushOpts);
        } else {
          targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data2, pushOpts);
        }
      });
    },
    exec_navigate(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.historyRedirect(href, replace ? "replace" : "push");
    },
    exec_patch(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.pushHistoryPatch(href, replace ? "replace" : "push", sourceEl);
    },
    exec_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.attemptFocus(el));
    },
    exec_focus_first(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.focusFirstInteractive(el) || aria_default.focusFirst(el));
    },
    exec_push_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => focusStack = el || sourceEl);
    },
    exec_pop_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => {
        if (focusStack) {
          focusStack.focus();
        }
        focusStack = null;
      });
    },
    exec_add_class(eventType, phxEvent, view, sourceEl, el, { names: names2, transition, time }) {
      this.addOrRemoveClasses(el, names2, [], transition, time, view);
    },
    exec_remove_class(eventType, phxEvent, view, sourceEl, el, { names: names2, transition, time }) {
      this.addOrRemoveClasses(el, [], names2, transition, time, view);
    },
    exec_transition(eventType, phxEvent, view, sourceEl, el, { time, transition }) {
      this.addOrRemoveClasses(el, [], [], transition, time, view);
    },
    exec_toggle(eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time }) {
      this.toggle(eventType, view, el, display, ins, outs, time);
    },
    exec_show(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.show(eventType, view, el, display, transition, time);
    },
    exec_hide(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.hide(eventType, view, el, display, transition, time);
    },
    exec_set_attr(eventType, phxEvent, view, sourceEl, el, { attr: [attr, val] }) {
      this.setOrRemoveAttrs(el, [[attr, val]], []);
    },
    exec_remove_attr(eventType, phxEvent, view, sourceEl, el, { attr }) {
      this.setOrRemoveAttrs(el, [], [attr]);
    },
    show(eventType, view, el, display, transition, time) {
      if (!this.isVisible(el)) {
        this.toggle(eventType, view, el, display, transition, null, time);
      }
    },
    hide(eventType, view, el, display, transition, time) {
      if (this.isVisible(el)) {
        this.toggle(eventType, view, el, display, null, transition, time);
      }
    },
    toggle(eventType, view, el, display, ins, outs, time) {
      let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];
      let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];
      if (inClasses.length > 0 || outClasses.length > 0) {
        if (this.isVisible(el)) {
          let onStart = () => {
            this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, outClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:hide-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          if (eventType === "remove") {
            return;
          }
          let onStart = () => {
            this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, inClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:show-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      } else {
        if (this.isVisible(el)) {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:hide-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:show-start"));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      }
    },
    addOrRemoveClasses(el, adds, removes, transition, time, view) {
      let [transition_run, transition_start, transition_end] = transition || [[], [], []];
      if (transition_run.length > 0) {
        let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(transition_run), []);
        let onDone = () => this.addOrRemoveClasses(el, adds.concat(transition_end), removes.concat(transition_run).concat(transition_start));
        return view.transition(time, onStart, onDone);
      }
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let keepAdds = adds.filter((name2) => prevAdds.indexOf(name2) < 0 && !el.classList.contains(name2));
        let keepRemoves = removes.filter((name2) => prevRemoves.indexOf(name2) < 0 && el.classList.contains(name2));
        let newAdds = prevAdds.filter((name2) => removes.indexOf(name2) < 0).concat(keepAdds);
        let newRemoves = prevRemoves.filter((name2) => adds.indexOf(name2) < 0).concat(keepRemoves);
        dom_default.putSticky(el, "classes", (currentEl) => {
          currentEl.classList.remove(...newRemoves);
          currentEl.classList.add(...newAdds);
          return [newAdds, newRemoves];
        });
      });
    },
    setOrRemoveAttrs(el, sets, removes) {
      let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [[], []]);
      let alteredAttrs = sets.map(([attr, _val]) => attr).concat(removes);
      let newSets = prevSets.filter(([attr, _val]) => !alteredAttrs.includes(attr)).concat(sets);
      let newRemoves = prevRemoves.filter((attr) => !alteredAttrs.includes(attr)).concat(removes);
      dom_default.putSticky(el, "attrs", (currentEl) => {
        newRemoves.forEach((attr) => currentEl.removeAttribute(attr));
        newSets.forEach(([attr, val]) => currentEl.setAttribute(attr, val));
        return [newSets, newRemoves];
      });
    },
    hasAllClasses(el, classes) {
      return classes.every((name2) => el.classList.contains(name2));
    },
    isToggledOut(el, outClasses) {
      return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
    },
    filterToEls(sourceEl, { to }) {
      return to ? dom_default.all(document, to) : [sourceEl];
    },
    defaultDisplay(el) {
      return { tr: "table-row", td: "table-cell" }[el.tagName.toLowerCase()] || "block";
    }
  };
  var js_default = JS;
  var serializeForm = (form, meta, onlyNames = []) => {
    let formData = new FormData(form);
    let toRemove = [];
    formData.forEach((val, key2, _index) => {
      if (val instanceof File) {
        toRemove.push(key2);
      }
    });
    toRemove.forEach((key2) => formData.delete(key2));
    let params = new URLSearchParams();
    for (let [key2, val] of formData.entries()) {
      if (onlyNames.length === 0 || onlyNames.indexOf(key2) >= 0) {
        params.append(key2, val);
      }
    }
    for (let metaKey in meta) {
      params.append(metaKey, meta[metaKey]);
    }
    return params.toString();
  };
  var View = class {
    constructor(el, liveSocket2, parentView, flash, liveReferer) {
      this.isDead = false;
      this.liveSocket = liveSocket2;
      this.flash = flash;
      this.parent = parentView;
      this.root = parentView ? parentView.root : this;
      this.el = el;
      this.id = this.el.id;
      this.ref = 0;
      this.childJoins = 0;
      this.loaderTimer = null;
      this.pendingDiffs = [];
      this.pruningCIDs = [];
      this.redirect = false;
      this.href = null;
      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
      this.joinPending = true;
      this.destroyed = false;
      this.joinCallback = function(onDone) {
        onDone && onDone();
      };
      this.stopCallback = function() {
      };
      this.pendingJoinOps = this.parent ? null : [];
      this.viewHooks = {};
      this.uploaders = {};
      this.formSubmits = [];
      this.children = this.parent ? null : {};
      this.root.children[this.id] = {};
      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
        return {
          redirect: this.redirect ? this.href : void 0,
          url: this.redirect ? void 0 : this.href || void 0,
          params: this.connectParams(liveReferer),
          session: this.getSession(),
          static: this.getStatic(),
          flash: this.flash
        };
      });
    }
    setHref(href) {
      this.href = href;
    }
    setRedirect(href) {
      this.redirect = true;
      this.href = href;
    }
    isMain() {
      return this.el.hasAttribute(PHX_MAIN);
    }
    connectParams(liveReferer) {
      let params = this.liveSocket.params(this.el);
      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
      if (manifest.length > 0) {
        params["_track_static"] = manifest;
      }
      params["_mounts"] = this.joinCount;
      params["_live_referer"] = liveReferer;
      return params;
    }
    isConnected() {
      return this.channel.canPush();
    }
    getSession() {
      return this.el.getAttribute(PHX_SESSION);
    }
    getStatic() {
      let val = this.el.getAttribute(PHX_STATIC);
      return val === "" ? null : val;
    }
    destroy(callback = function() {
    }) {
      this.destroyAllChildren();
      this.destroyed = true;
      delete this.root.children[this.id];
      if (this.parent) {
        delete this.root.children[this.parent.id][this.id];
      }
      clearTimeout(this.loaderTimer);
      let onFinished = () => {
        callback();
        for (let id2 in this.viewHooks) {
          this.destroyHook(this.viewHooks[id2]);
        }
      };
      dom_default.markPhxChildDestroyed(this.el);
      this.log("destroyed", () => ["the child has been removed from the parent"]);
      this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
    }
    setContainerClasses(...classes) {
      this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
      this.el.classList.add(...classes);
    }
    showLoader(timeout) {
      clearTimeout(this.loaderTimer);
      if (timeout) {
        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
      } else {
        for (let id2 in this.viewHooks) {
          this.viewHooks[id2].__disconnected();
        }
        this.setContainerClasses(PHX_DISCONNECTED_CLASS);
      }
    }
    execAll(binding) {
      dom_default.all(this.el, `[${binding}]`, (el) => this.liveSocket.execJS(el, el.getAttribute(binding)));
    }
    hideLoader() {
      clearTimeout(this.loaderTimer);
      this.setContainerClasses(PHX_CONNECTED_CLASS);
      this.execAll(this.binding("connected"));
    }
    triggerReconnected() {
      for (let id2 in this.viewHooks) {
        this.viewHooks[id2].__reconnected();
      }
    }
    log(kind, msgCallback) {
      this.liveSocket.log(this, kind, msgCallback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.liveSocket.transition(time, onStart, onDone);
    }
    withinTargets(phxTarget, callback) {
      if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
        return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
      }
      if (isCid(phxTarget)) {
        let targets = dom_default.findComponentNodeList(this.el, phxTarget);
        if (targets.length === 0) {
          logError(`no component found matching phx-target of ${phxTarget}`);
        } else {
          callback(this, parseInt(phxTarget));
        }
      } else {
        let targets = Array.from(document.querySelectorAll(phxTarget));
        if (targets.length === 0) {
          logError(`nothing found matching the phx-target selector "${phxTarget}"`);
        }
        targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
      }
    }
    applyDiff(type, rawDiff, callback) {
      this.log(type, () => ["", clone(rawDiff)]);
      let { diff, reply, events, title } = Rendered.extract(rawDiff);
      callback({ diff, reply, events });
      if (title) {
        window.requestAnimationFrame(() => dom_default.putTitle(title));
      }
    }
    onJoin(resp) {
      let { rendered, container } = resp;
      if (container) {
        let [tag, attrs] = container;
        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
      }
      this.childJoins = 0;
      this.joinPending = true;
      this.flash = null;
      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
      this.applyDiff("mount", rendered, ({ diff, events }) => {
        this.rendered = new Rendered(this.id, diff);
        let [html, streams] = this.renderContainer(null, "join");
        this.dropPendingRefs();
        let forms = this.formsForRecovery(html);
        this.joinCount++;
        if (forms.length > 0) {
          forms.forEach(([form, newForm, newCid], i) => {
            this.pushFormRecovery(form, newCid, (resp2) => {
              if (i === forms.length - 1) {
                this.onJoinComplete(resp2, html, streams, events);
              }
            });
          });
        } else {
          this.onJoinComplete(resp, html, streams, events);
        }
      });
    }
    dropPendingRefs() {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}]`, (el) => {
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
      });
    }
    onJoinComplete({ live_patch }, html, streams, events) {
      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
        return this.applyJoinPatch(live_patch, html, streams, events);
      }
      let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {
        let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
        if (phxStatic) {
          toEl.setAttribute(PHX_STATIC, phxStatic);
        }
        return this.joinChild(toEl);
      });
      if (newChildren.length === 0) {
        if (this.parent) {
          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
          this.applyJoinPatch(live_patch, html, streams, events);
        }
      } else {
        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
      }
    }
    attachTrueDocEl() {
      this.el = dom_default.byId(this.id);
      this.el.setAttribute(PHX_ROOT_ID, this.root.id);
    }
    execNewMounted() {
      dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
        this.maybeAddNewHook(hookEl);
      });
      dom_default.all(this.el, `[${this.binding(PHX_MOUNTED)}]`, (el) => this.maybeMounted(el));
    }
    applyJoinPatch(live_patch, html, streams, events) {
      this.attachTrueDocEl();
      let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
      patch.markPrunableContentForRemoval();
      this.performPatch(patch, false);
      this.joinNewChildren();
      this.execNewMounted();
      this.joinPending = false;
      this.liveSocket.dispatchEvents(events);
      this.applyPendingUpdates();
      if (live_patch) {
        let { kind, to } = live_patch;
        this.liveSocket.historyPatch(to, kind);
      }
      this.hideLoader();
      if (this.joinCount > 1) {
        this.triggerReconnected();
      }
      this.stopCallback();
    }
    triggerBeforeUpdateHook(fromEl, toEl) {
      this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
      let hook = this.getHook(fromEl);
      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
        hook.__beforeUpdate();
        return hook;
      }
    }
    maybeMounted(el) {
      let phxMounted = el.getAttribute(this.binding(PHX_MOUNTED));
      let hasBeenInvoked = phxMounted && dom_default.private(el, "mounted");
      if (phxMounted && !hasBeenInvoked) {
        this.liveSocket.execJS(el, phxMounted);
        dom_default.putPrivate(el, "mounted", true);
      }
    }
    maybeAddNewHook(el, force) {
      let newHook = this.addHook(el);
      if (newHook) {
        newHook.__mounted();
      }
    }
    performPatch(patch, pruneCids) {
      let removedEls = [];
      let phxChildrenAdded = false;
      let updatedHookIds = /* @__PURE__ */ new Set();
      patch.after("added", (el) => {
        this.liveSocket.triggerDOM("onNodeAdded", [el]);
        this.maybeAddNewHook(el);
        if (el.getAttribute) {
          this.maybeMounted(el);
        }
      });
      patch.after("phxChildAdded", (el) => {
        if (dom_default.isPhxSticky(el)) {
          this.liveSocket.joinRootViews();
        } else {
          phxChildrenAdded = true;
        }
      });
      patch.before("updated", (fromEl, toEl) => {
        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
        if (hook) {
          updatedHookIds.add(fromEl.id);
        }
      });
      patch.after("updated", (el) => {
        if (updatedHookIds.has(el.id)) {
          this.getHook(el).__updated();
        }
      });
      patch.after("discarded", (el) => {
        if (el.nodeType === Node.ELEMENT_NODE) {
          removedEls.push(el);
        }
      });
      patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
      patch.perform();
      this.afterElementsRemoved(removedEls, pruneCids);
      return phxChildrenAdded;
    }
    afterElementsRemoved(elements, pruneCids) {
      let destroyedCIDs = [];
      elements.forEach((parent) => {
        let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
        let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}]`);
        components.concat(parent).forEach((el) => {
          let cid = this.componentID(el);
          if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
            destroyedCIDs.push(cid);
          }
        });
        hooks.concat(parent).forEach((hookEl) => {
          let hook = this.getHook(hookEl);
          hook && this.destroyHook(hook);
        });
      });
      if (pruneCids) {
        this.maybePushComponentsDestroyed(destroyedCIDs);
      }
    }
    joinNewChildren() {
      dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
    }
    getChildById(id2) {
      return this.root.children[this.id][id2];
    }
    getDescendentByEl(el) {
      if (el.id === this.id) {
        return this;
      } else {
        return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];
      }
    }
    destroyDescendent(id2) {
      for (let parentId in this.root.children) {
        for (let childId in this.root.children[parentId]) {
          if (childId === id2) {
            return this.root.children[parentId][childId].destroy();
          }
        }
      }
    }
    joinChild(el) {
      let child = this.getChildById(el.id);
      if (!child) {
        let view = new View(el, this.liveSocket, this);
        this.root.children[this.id][view.id] = view;
        view.join();
        this.childJoins++;
        return true;
      }
    }
    isJoinPending() {
      return this.joinPending;
    }
    ackJoin(_child) {
      this.childJoins--;
      if (this.childJoins === 0) {
        if (this.parent) {
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
        }
      }
    }
    onAllChildJoinsComplete() {
      this.joinCallback(() => {
        this.pendingJoinOps.forEach(([view, op]) => {
          if (!view.isDestroyed()) {
            op();
          }
        });
        this.pendingJoinOps = [];
      });
    }
    update(diff, events) {
      if (this.isJoinPending() || this.liveSocket.hasPendingLink() && this.root.isMain()) {
        return this.pendingDiffs.push({ diff, events });
      }
      this.rendered.mergeDiff(diff);
      let phxChildrenAdded = false;
      if (this.rendered.isComponentOnlyDiff(diff)) {
        this.liveSocket.time("component patch complete", () => {
          let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));
          parentCids.forEach((parentCID) => {
            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
              phxChildrenAdded = true;
            }
          });
        });
      } else if (!isEmpty(diff)) {
        this.liveSocket.time("full patch complete", () => {
          let [html, streams] = this.renderContainer(diff, "update");
          let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
          phxChildrenAdded = this.performPatch(patch, true);
        });
      }
      this.liveSocket.dispatchEvents(events);
      if (phxChildrenAdded) {
        this.joinNewChildren();
      }
    }
    renderContainer(diff, kind) {
      return this.liveSocket.time(`toString diff (${kind})`, () => {
        let tag = this.el.tagName;
        let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;
        let [html, streams] = this.rendered.toString(cids);
        return [`<${tag}>${html}</${tag}>`, streams];
      });
    }
    componentPatch(diff, cid) {
      if (isEmpty(diff))
        return false;
      let [html, streams] = this.rendered.componentToString(cid);
      let patch = new DOMPatch(this, this.el, this.id, html, streams, cid);
      let childrenAdded = this.performPatch(patch, true);
      return childrenAdded;
    }
    getHook(el) {
      return this.viewHooks[ViewHook.elementID(el)];
    }
    addHook(el) {
      if (ViewHook.elementID(el) || !el.getAttribute) {
        return;
      }
      let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
      if (hookName && !this.ownsElement(el)) {
        return;
      }
      let callbacks = this.liveSocket.getHookCallbacks(hookName);
      if (callbacks) {
        if (!el.id) {
          logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
        }
        let hook = new ViewHook(this, el, callbacks);
        this.viewHooks[ViewHook.elementID(hook.el)] = hook;
        return hook;
      } else if (hookName !== null) {
        logError(`unknown hook found for "${hookName}"`, el);
      }
    }
    destroyHook(hook) {
      hook.__destroyed();
      hook.__cleanup__();
      delete this.viewHooks[ViewHook.elementID(hook.el)];
    }
    applyPendingUpdates() {
      this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
      this.pendingDiffs = [];
      this.eachChild((child) => child.applyPendingUpdates());
    }
    eachChild(callback) {
      let children = this.root.children[this.id] || {};
      for (let id2 in children) {
        callback(this.getChildById(id2));
      }
    }
    onChannel(event, cb) {
      this.liveSocket.onChannel(this.channel, event, (resp) => {
        if (this.isJoinPending()) {
          this.root.pendingJoinOps.push([this, () => cb(resp)]);
        } else {
          this.liveSocket.requestDOMUpdate(() => cb(resp));
        }
      });
    }
    bindChannel() {
      this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
        this.liveSocket.requestDOMUpdate(() => {
          this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
        });
      });
      this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
      this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
      this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
      this.channel.onError((reason) => this.onError(reason));
      this.channel.onClose((reason) => this.onClose(reason));
    }
    destroyAllChildren() {
      this.eachChild((child) => child.destroy());
    }
    onLiveRedirect(redir) {
      let { to, kind, flash } = redir;
      let url = this.expandURL(to);
      this.liveSocket.historyRedirect(url, kind, flash);
    }
    onLivePatch(redir) {
      let { to, kind } = redir;
      this.href = this.expandURL(to);
      this.liveSocket.historyPatch(to, kind);
    }
    expandURL(to) {
      return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
    }
    onRedirect({ to, flash }) {
      this.liveSocket.redirect(to, flash);
    }
    isDestroyed() {
      return this.destroyed;
    }
    joinDead() {
      this.isDead = true;
    }
    join(callback) {
      this.showLoader(this.liveSocket.loaderTimeout);
      this.bindChannel();
      if (this.isMain()) {
        this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
      }
      this.joinCallback = (onDone) => {
        onDone = onDone || function() {
        };
        callback ? callback(this.joinCount, onDone) : onDone();
      };
      this.liveSocket.wrapPush(this, { timeout: false }, () => {
        return this.channel.join().receive("ok", (data2) => {
          if (!this.isDestroyed()) {
            this.liveSocket.requestDOMUpdate(() => this.onJoin(data2));
          }
        }).receive("error", (resp) => !this.isDestroyed() && this.onJoinError(resp)).receive("timeout", () => !this.isDestroyed() && this.onJoinError({ reason: "timeout" }));
      });
    }
    onJoinError(resp) {
      if (resp.reason === "reload") {
        this.log("error", () => [`failed mount with ${resp.status}. Falling back to page request`, resp]);
        return this.onRedirect({ to: this.href });
      } else if (resp.reason === "unauthorized" || resp.reason === "stale") {
        this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
        return this.onRedirect({ to: this.href });
      }
      if (resp.redirect || resp.live_redirect) {
        this.joinPending = false;
        this.channel.leave();
      }
      if (resp.redirect) {
        return this.onRedirect(resp.redirect);
      }
      if (resp.live_redirect) {
        return this.onLiveRedirect(resp.live_redirect);
      }
      this.log("error", () => ["unable to join", resp]);
      if (this.liveSocket.isConnected()) {
        this.liveSocket.reloadWithJitter(this);
      }
    }
    onClose(reason) {
      if (this.isDestroyed()) {
        return;
      }
      if (this.liveSocket.hasPendingLink() && reason !== "leave") {
        return this.liveSocket.reloadWithJitter(this);
      }
      this.destroyAllChildren();
      this.liveSocket.dropActiveElement(this);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      if (this.liveSocket.isUnloaded()) {
        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
      }
    }
    onError(reason) {
      this.onClose(reason);
      if (this.liveSocket.isConnected()) {
        this.log("error", () => ["view crashed", reason]);
      }
      if (!this.liveSocket.isUnloaded()) {
        this.displayError();
      }
    }
    displayError() {
      if (this.isMain()) {
        dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
      }
      this.showLoader();
      this.setContainerClasses(PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
      this.execAll(this.binding("disconnected"));
    }
    pushWithReply(refGenerator, event, payload, onReply = function() {
    }) {
      if (!this.isConnected()) {
        return;
      }
      let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
      let onLoadingDone = function() {
      };
      if (opts.page_loading || el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {
        onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
      }
      if (typeof payload.cid !== "number") {
        delete payload.cid;
      }
      return this.liveSocket.wrapPush(this, { timeout: true }, () => {
        return this.channel.push(event, payload, PUSH_TIMEOUT).receive("ok", (resp) => {
          let finish = (hookReply) => {
            if (resp.redirect) {
              this.onRedirect(resp.redirect);
            }
            if (resp.live_patch) {
              this.onLivePatch(resp.live_patch);
            }
            if (resp.live_redirect) {
              this.onLiveRedirect(resp.live_redirect);
            }
            if (ref !== null) {
              this.undoRefs(ref);
            }
            onLoadingDone();
            onReply(resp, hookReply);
          };
          if (resp.diff) {
            this.liveSocket.requestDOMUpdate(() => {
              this.applyDiff("update", resp.diff, ({ diff, reply, events }) => {
                this.update(diff, events);
                finish(reply);
              });
            });
          } else {
            finish(null);
          }
        });
      });
    }
    undoRefs(ref) {
      if (!this.isConnected()) {
        return;
      }
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}="${ref}"]`, (el) => {
        let disabledVal = el.getAttribute(PHX_DISABLED);
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
        if (el.getAttribute(PHX_READONLY) !== null) {
          el.readOnly = false;
          el.removeAttribute(PHX_READONLY);
        }
        if (disabledVal !== null) {
          el.disabled = disabledVal === "true" ? true : false;
          el.removeAttribute(PHX_DISABLED);
        }
        PHX_EVENT_CLASSES.forEach((className) => dom_default.removeClass(el, className));
        let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);
        if (disableRestore !== null) {
          el.innerText = disableRestore;
          el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
        }
        let toEl = dom_default.private(el, PHX_REF);
        if (toEl) {
          let hook = this.triggerBeforeUpdateHook(el, toEl);
          DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());
          if (hook) {
            hook.__updated();
          }
          dom_default.deletePrivate(el, PHX_REF);
        }
      });
    }
    putRef(elements, event, opts = {}) {
      let newRef = this.ref++;
      let disableWith = this.binding(PHX_DISABLE_WITH);
      if (opts.loading) {
        elements = elements.concat(dom_default.all(document, opts.loading));
      }
      elements.forEach((el) => {
        el.classList.add(`phx-${event}-loading`);
        el.setAttribute(PHX_REF, newRef);
        el.setAttribute(PHX_REF_SRC, this.el.id);
        let disableText = el.getAttribute(disableWith);
        if (disableText !== null) {
          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
          }
          if (disableText !== "") {
            el.innerText = disableText;
          }
          el.setAttribute("disabled", "");
        }
      });
      return [newRef, elements, opts];
    }
    componentID(el) {
      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
      return cid ? parseInt(cid) : null;
    }
    targetComponentID(target, targetCtx, opts = {}) {
      if (isCid(targetCtx)) {
        return targetCtx;
      }
      let cidOrSelector = target.getAttribute(this.binding("target"));
      if (isCid(cidOrSelector)) {
        return parseInt(cidOrSelector);
      } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
        return this.closestComponentID(targetCtx);
      } else {
        return null;
      }
    }
    closestComponentID(targetCtx) {
      if (isCid(targetCtx)) {
        return targetCtx;
      } else if (targetCtx) {
        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
      } else {
        return null;
      }
    }
    pushHookEvent(targetCtx, event, payload, onReply) {
      if (!this.isConnected()) {
        this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
        return false;
      }
      let [ref, els, opts] = this.putRef([], "hook");
      this.pushWithReply(() => [ref, els, opts], "event", {
        type: "hook",
        event,
        value: payload,
        cid: this.closestComponentID(targetCtx)
      }, (resp, reply) => onReply(reply, ref));
      return ref;
    }
    extractMeta(el, meta, value) {
      let prefix = this.binding("value-");
      for (let i = 0; i < el.attributes.length; i++) {
        if (!meta) {
          meta = {};
        }
        let name2 = el.attributes[i].name;
        if (name2.startsWith(prefix)) {
          meta[name2.replace(prefix, "")] = el.getAttribute(name2);
        }
      }
      if (el.value !== void 0) {
        if (!meta) {
          meta = {};
        }
        meta.value = el.value;
        if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
          delete meta.value;
        }
      }
      if (value) {
        if (!meta) {
          meta = {};
        }
        for (let key2 in value) {
          meta[key2] = value[key2];
        }
      }
      return meta;
    }
    pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}) {
      this.pushWithReply(() => this.putRef([el], type, opts), "event", {
        type,
        event: phxEvent,
        value: this.extractMeta(el, meta, opts.value),
        cid: this.targetComponentID(el, targetCtx, opts)
      });
    }
    pushFileProgress(fileEl, entryRef, progress, onReply = function() {
    }) {
      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
        view.pushWithReply(null, "progress", {
          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
          ref: fileEl.getAttribute(PHX_UPLOAD_REF),
          entry_ref: entryRef,
          progress,
          cid: view.targetComponentID(fileEl.form, targetCtx)
        }, onReply);
      });
    }
    pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
      let uploads;
      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx);
      let refGenerator = () => this.putRef([inputEl, inputEl.form], "change", opts);
      let formData;
      if (inputEl.getAttribute(this.binding("change"))) {
        formData = serializeForm(inputEl.form, { _target: opts._target }, [inputEl.name]);
      } else {
        formData = serializeForm(inputEl.form, { _target: opts._target });
      }
      if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
      }
      uploads = LiveUploader.serializeUploads(inputEl);
      let event = {
        type: "form",
        event: phxEvent,
        value: formData,
        uploads,
        cid
      };
      this.pushWithReply(refGenerator, "event", event, (resp) => {
        dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));
        if (dom_default.isUploadInput(inputEl) && inputEl.getAttribute("data-phx-auto-upload") !== null) {
          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
            let [ref, _els] = refGenerator();
            this.uploadFiles(inputEl.form, targetCtx, ref, cid, (_uploads) => {
              callback && callback(resp);
              this.triggerAwaitingSubmit(inputEl.form);
            });
          }
        } else {
          callback && callback(resp);
        }
      });
    }
    triggerAwaitingSubmit(formEl) {
      let awaitingSubmit = this.getScheduledSubmit(formEl);
      if (awaitingSubmit) {
        let [_el, _ref, _opts, callback] = awaitingSubmit;
        this.cancelSubmit(formEl);
        callback();
      }
    }
    getScheduledSubmit(formEl) {
      return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
    }
    scheduleSubmit(formEl, ref, opts, callback) {
      if (this.getScheduledSubmit(formEl)) {
        return true;
      }
      this.formSubmits.push([formEl, ref, opts, callback]);
    }
    cancelSubmit(formEl) {
      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
        if (el.isSameNode(formEl)) {
          this.undoRefs(ref);
          return false;
        } else {
          return true;
        }
      });
    }
    disableForm(formEl, opts = {}) {
      let filterIgnored = (el) => {
        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
        return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
      };
      let filterDisables = (el) => {
        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
      };
      let filterButton = (el) => el.tagName == "BUTTON";
      let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
      let formElements = Array.from(formEl.elements);
      let disables = formElements.filter(filterDisables);
      let buttons = formElements.filter(filterButton).filter(filterIgnored);
      let inputs = formElements.filter(filterInput).filter(filterIgnored);
      buttons.forEach((button) => {
        button.setAttribute(PHX_DISABLED, button.disabled);
        button.disabled = true;
      });
      inputs.forEach((input) => {
        input.setAttribute(PHX_READONLY, input.readOnly);
        input.readOnly = true;
        if (input.files) {
          input.setAttribute(PHX_DISABLED, input.disabled);
          input.disabled = true;
        }
      });
      formEl.setAttribute(this.binding(PHX_PAGE_LOADING), "");
      return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), "submit", opts);
    }
    pushFormSubmit(formEl, targetCtx, phxEvent, opts, onReply) {
      let refGenerator = () => this.disableForm(formEl, opts);
      let cid = this.targetComponentID(formEl, targetCtx);
      if (LiveUploader.hasUploadsInProgress(formEl)) {
        let [ref, _els] = refGenerator();
        let push = () => this.pushFormSubmit(formEl, targetCtx, phxEvent, opts, onReply);
        return this.scheduleSubmit(formEl, ref, opts, push);
      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
        let [ref, els] = refGenerator();
        let proxyRefGen = () => [ref, els, opts];
        this.uploadFiles(formEl, targetCtx, ref, cid, (_uploads) => {
          let formData = serializeForm(formEl, {});
          this.pushWithReply(proxyRefGen, "event", {
            type: "form",
            event: phxEvent,
            value: formData,
            cid
          }, onReply);
        });
      } else {
        let formData = serializeForm(formEl, {});
        this.pushWithReply(refGenerator, "event", {
          type: "form",
          event: phxEvent,
          value: formData,
          cid
        }, onReply);
      }
    }
    uploadFiles(formEl, targetCtx, ref, cid, onComplete) {
      let joinCountAtUpload = this.joinCount;
      let inputEls = LiveUploader.activeFileInputs(formEl);
      let numFileInputsInProgress = inputEls.length;
      inputEls.forEach((inputEl) => {
        let uploader = new LiveUploader(inputEl, this, () => {
          numFileInputsInProgress--;
          if (numFileInputsInProgress === 0) {
            onComplete();
          }
        });
        this.uploaders[inputEl] = uploader;
        let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
        let payload = {
          ref: inputEl.getAttribute(PHX_UPLOAD_REF),
          entries,
          cid: this.targetComponentID(inputEl.form, targetCtx)
        };
        this.log("upload", () => ["sending preflight request", payload]);
        this.pushWithReply(null, "allow_upload", payload, (resp) => {
          this.log("upload", () => ["got preflight response", resp]);
          if (resp.error) {
            this.undoRefs(ref);
            let [entry_ref, reason] = resp.error;
            this.log("upload", () => [`error for entry ${entry_ref}`, reason]);
          } else {
            let onError = (callback) => {
              this.channel.onError(() => {
                if (this.joinCount === joinCountAtUpload) {
                  callback();
                }
              });
            };
            uploader.initAdapterUpload(resp, onError, this.liveSocket);
          }
        });
      });
    }
    dispatchUploads(name2, filesOrBlobs) {
      let inputs = dom_default.findUploadInputs(this.el).filter((el) => el.name === name2);
      if (inputs.length === 0) {
        logError(`no live file inputs found matching the name "${name2}"`);
      } else if (inputs.length > 1) {
        logError(`duplicate live file inputs found matching the name "${name2}"`);
      } else {
        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
      }
    }
    pushFormRecovery(form, newCid, callback) {
      this.liveSocket.withinOwners(form, (view, targetCtx) => {
        let input = Array.from(form.elements).find((el) => {
          return dom_default.isFormInput(el) && el.type !== "hidden" && !el.hasAttribute(this.binding("change"));
        });
        let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding("change"));
        js_default.exec("change", phxEvent, view, input, ["push", { _target: input.name, newCid, callback }]);
      });
    }
    pushLinkPatch(href, targetEl, callback) {
      let linkRef = this.liveSocket.setPendingLink(href);
      let refGen = targetEl ? () => this.putRef([targetEl], "click") : null;
      let fallback = () => this.liveSocket.redirect(window.location.href);
      let push = this.pushWithReply(refGen, "live_patch", { url: href }, (resp) => {
        this.liveSocket.requestDOMUpdate(() => {
          if (resp.link_redirect) {
            this.liveSocket.replaceMain(href, null, callback, linkRef);
          } else {
            if (this.liveSocket.commitPendingLink(linkRef)) {
              this.href = href;
            }
            this.applyPendingUpdates();
            callback && callback(linkRef);
          }
        });
      });
      if (push) {
        push.receive("timeout", fallback);
      } else {
        fallback();
      }
    }
    formsForRecovery(html) {
      if (this.joinCount === 0) {
        return [];
      }
      let phxChange = this.binding("change");
      let template = document.createElement("template");
      template.innerHTML = html;
      return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id && this.ownsElement(form)).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => {
        let newForm = template.content.querySelector(`form[id="${form.id}"][${phxChange}="${form.getAttribute(phxChange)}"]`);
        if (newForm) {
          return [form, newForm, this.targetComponentID(newForm)];
        } else {
          return [form, null, null];
        }
      }).filter(([form, newForm, newCid]) => newForm);
    }
    maybePushComponentsDestroyed(destroyedCIDs) {
      let willDestroyCIDs = destroyedCIDs.filter((cid) => {
        return dom_default.findComponentNodeList(this.el, cid).length === 0;
      });
      if (willDestroyCIDs.length > 0) {
        this.pruningCIDs.push(...willDestroyCIDs);
        this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }, () => {
          this.pruningCIDs = this.pruningCIDs.filter((cid) => willDestroyCIDs.indexOf(cid) !== -1);
          let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
            return dom_default.findComponentNodeList(this.el, cid).length === 0;
          });
          if (completelyDestroyCIDs.length > 0) {
            this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }, (resp) => {
              this.rendered.pruneCIDs(resp.cids);
            });
          }
        });
      }
    }
    ownsElement(el) {
      let parentViewEl = el.closest(PHX_VIEW_SELECTOR);
      return el.getAttribute(PHX_PARENT_ID) === this.id || parentViewEl && parentViewEl.id === this.id || !parentViewEl && this.isDead;
    }
    submitForm(form, targetCtx, phxEvent, opts = {}) {
      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
      let phxFeedback = this.liveSocket.binding(PHX_FEEDBACK_FOR);
      let inputs = Array.from(form.elements);
      inputs.forEach((input) => dom_default.putPrivate(input, PHX_HAS_SUBMITTED, true));
      this.liveSocket.blurActiveElement(this);
      this.pushFormSubmit(form, targetCtx, phxEvent, opts, () => {
        inputs.forEach((input) => dom_default.showError(input, phxFeedback));
        this.liveSocket.restorePreviouslyActiveFocus();
      });
    }
    binding(kind) {
      return this.liveSocket.binding(kind);
    }
  };
  var LiveSocket = class {
    constructor(url, phxSocket, opts = {}) {
      this.unloaded = false;
      if (!phxSocket || phxSocket.constructor.name === "Object") {
        throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);
      }
      this.socket = new phxSocket(url, opts);
      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
      this.opts = opts;
      this.params = closure2(opts.params || {});
      this.viewLogger = opts.viewLogger;
      this.metadataCallbacks = opts.metadata || {};
      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
      this.activeElement = null;
      this.prevActive = null;
      this.silenced = false;
      this.main = null;
      this.outgoingMainEl = null;
      this.clickStartedAtTarget = null;
      this.linkRef = 1;
      this.roots = {};
      this.href = window.location.href;
      this.pendingLink = null;
      this.currentLocation = clone(window.location);
      this.hooks = opts.hooks || {};
      this.uploaders = opts.uploaders || {};
      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
      this.reloadWithJitterTimer = null;
      this.maxReloads = opts.maxReloads || MAX_RELOADS;
      this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
      this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
      this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
      this.localStorage = opts.localStorage || window.localStorage;
      this.sessionStorage = opts.sessionStorage || window.sessionStorage;
      this.boundTopLevelEvents = false;
      this.domCallbacks = Object.assign({ onNodeAdded: closure2(), onBeforeElUpdated: closure2() }, opts.dom || {});
      this.transitions = new TransitionSet();
      window.addEventListener("pagehide", (_e) => {
        this.unloaded = true;
      });
      this.socket.onOpen(() => {
        if (this.isUnloaded()) {
          window.location.reload();
        }
      });
    }
    isProfileEnabled() {
      return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
    }
    isDebugEnabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
    }
    isDebugDisabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
    }
    enableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
    }
    enableProfiling() {
      this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
    }
    disableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
    }
    disableProfiling() {
      this.sessionStorage.removeItem(PHX_LV_PROFILE);
    }
    enableLatencySim(upperBoundMs) {
      this.enableDebug();
      console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
    }
    disableLatencySim() {
      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
    }
    getLatencySim() {
      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
      return str ? parseInt(str) : null;
    }
    getSocket() {
      return this.socket;
    }
    connect() {
      if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
        this.enableDebug();
      }
      let doConnect = () => {
        if (this.joinRootViews()) {
          this.bindTopLevelEvents();
          this.socket.connect();
        } else if (this.main) {
          this.socket.connect();
        } else {
          this.bindTopLevelEvents({ dead: true });
        }
        this.joinDeadView();
      };
      if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
        doConnect();
      } else {
        document.addEventListener("DOMContentLoaded", () => doConnect());
      }
    }
    disconnect(callback) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.disconnect(callback);
    }
    replaceTransport(transport) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.replaceTransport(transport);
      this.connect();
    }
    execJS(el, encodedJS, eventType = null) {
      this.owner(el, (view) => js_default.exec(eventType, encodedJS, view, el));
    }
    unload() {
      if (this.unloaded) {
        return;
      }
      if (this.main && this.isConnected()) {
        this.log(this.main, "socket", () => ["disconnect for page nav"]);
      }
      this.unloaded = true;
      this.destroyAllViews();
      this.disconnect();
    }
    triggerDOM(kind, args) {
      this.domCallbacks[kind](...args);
    }
    time(name2, func) {
      if (!this.isProfileEnabled() || !console.time) {
        return func();
      }
      console.time(name2);
      let result = func();
      console.timeEnd(name2);
      return result;
    }
    log(view, kind, msgCallback) {
      if (this.viewLogger) {
        let [msg, obj] = msgCallback();
        this.viewLogger(view, kind, msg, obj);
      } else if (this.isDebugEnabled()) {
        let [msg, obj] = msgCallback();
        debug(view, kind, msg, obj);
      }
    }
    requestDOMUpdate(callback) {
      this.transitions.after(callback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.transitions.addTransition(time, onStart, onDone);
    }
    onChannel(channel, event, cb) {
      channel.on(event, (data2) => {
        let latency = this.getLatencySim();
        if (!latency) {
          cb(data2);
        } else {
          setTimeout(() => cb(data2), latency);
        }
      });
    }
    wrapPush(view, opts, push) {
      let latency = this.getLatencySim();
      let oldJoinCount = view.joinCount;
      if (!latency) {
        if (this.isConnected() && opts.timeout) {
          return push().receive("timeout", () => {
            if (view.joinCount === oldJoinCount && !view.isDestroyed()) {
              this.reloadWithJitter(view, () => {
                this.log(view, "timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
              });
            }
          });
        } else {
          return push();
        }
      }
      let fakePush = {
        receives: [],
        receive(kind, cb) {
          this.receives.push([kind, cb]);
        }
      };
      setTimeout(() => {
        if (view.isDestroyed()) {
          return;
        }
        fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());
      }, latency);
      return fakePush;
    }
    reloadWithJitter(view, log) {
      clearTimeout(this.reloadWithJitterTimer);
      this.disconnect();
      let minMs = this.reloadJitterMin;
      let maxMs = this.reloadJitterMax;
      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);
      if (tries > this.maxReloads) {
        afterMs = this.failsafeJitter;
      }
      this.reloadWithJitterTimer = setTimeout(() => {
        if (view.isDestroyed() || view.isConnected()) {
          return;
        }
        view.destroy();
        log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
        if (tries > this.maxReloads) {
          this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
        }
        if (this.hasPendingLink()) {
          window.location = this.pendingLink;
        } else {
          window.location.reload();
        }
      }, afterMs);
    }
    getHookCallbacks(name2) {
      return name2 && name2.startsWith("Phoenix.") ? hooks_default[name2.split(".")[1]] : this.hooks[name2];
    }
    isUnloaded() {
      return this.unloaded;
    }
    isConnected() {
      return this.socket.isConnected();
    }
    getBindingPrefix() {
      return this.bindingPrefix;
    }
    binding(kind) {
      return `${this.getBindingPrefix()}${kind}`;
    }
    channel(topic, params) {
      return this.socket.channel(topic, params);
    }
    joinDeadView() {
      let body = document.body;
      if (body && !this.isPhxView(body) && !this.isPhxView(document.firstElementChild)) {
        let view = this.newRootView(body);
        view.setHref(this.getHref());
        view.joinDead();
        if (!this.main) {
          this.main = view;
        }
        window.requestAnimationFrame(() => view.execNewMounted());
      }
    }
    joinRootViews() {
      let rootsFound = false;
      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
        if (!this.getRootById(rootEl.id)) {
          let view = this.newRootView(rootEl);
          view.setHref(this.getHref());
          view.join();
          if (rootEl.hasAttribute(PHX_MAIN)) {
            this.main = view;
          }
        }
        rootsFound = true;
      });
      return rootsFound;
    }
    redirect(to, flash) {
      this.unload();
      browser_default.redirect(to, flash);
    }
    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
      let liveReferer = this.currentLocation.href;
      this.outgoingMainEl = this.outgoingMainEl || this.main.el;
      let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
      this.main.showLoader(this.loaderTimeout);
      this.main.destroy();
      this.main = this.newRootView(newMainEl, flash, liveReferer);
      this.main.setRedirect(href);
      this.transitionRemoves();
      this.main.join((joinCount, onDone) => {
        if (joinCount === 1 && this.commitPendingLink(linkRef)) {
          this.requestDOMUpdate(() => {
            dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
            this.outgoingMainEl.replaceWith(newMainEl);
            this.outgoingMainEl = null;
            callback && requestAnimationFrame(callback);
            onDone();
          });
        }
      });
    }
    transitionRemoves(elements) {
      let removeAttr = this.binding("remove");
      elements = elements || dom_default.all(document, `[${removeAttr}]`);
      elements.forEach((el) => {
        if (document.body.contains(el)) {
          this.execJS(el, el.getAttribute(removeAttr), "remove");
        }
      });
    }
    isPhxView(el) {
      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
    }
    newRootView(el, flash, liveReferer) {
      let view = new View(el, this, null, flash, liveReferer);
      this.roots[view.id] = view;
      return view;
    }
    owner(childEl, callback) {
      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
      if (view) {
        callback(view);
      }
    }
    withinOwners(childEl, callback) {
      this.owner(childEl, (view) => callback(view, childEl));
    }
    getViewByEl(el) {
      let rootId = el.getAttribute(PHX_ROOT_ID);
      return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
    }
    getRootById(id2) {
      return this.roots[id2];
    }
    destroyAllViews() {
      for (let id2 in this.roots) {
        this.roots[id2].destroy();
        delete this.roots[id2];
      }
      this.main = null;
    }
    destroyViewByEl(el) {
      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
      if (root && root.id === el.id) {
        root.destroy();
        delete this.roots[root.id];
      } else if (root) {
        root.destroyDescendent(el.id);
      }
    }
    setActiveElement(target) {
      if (this.activeElement === target) {
        return;
      }
      this.activeElement = target;
      let cancel = () => {
        if (target === this.activeElement) {
          this.activeElement = null;
        }
        target.removeEventListener("mouseup", this);
        target.removeEventListener("touchend", this);
      };
      target.addEventListener("mouseup", cancel);
      target.addEventListener("touchend", cancel);
    }
    getActiveElement() {
      if (document.activeElement === document.body) {
        return this.activeElement || document.activeElement;
      } else {
        return document.activeElement || document.body;
      }
    }
    dropActiveElement(view) {
      if (this.prevActive && view.ownsElement(this.prevActive)) {
        this.prevActive = null;
      }
    }
    restorePreviouslyActiveFocus() {
      if (this.prevActive && this.prevActive !== document.body) {
        this.prevActive.focus();
      }
    }
    blurActiveElement() {
      this.prevActive = this.getActiveElement();
      if (this.prevActive !== document.body) {
        this.prevActive.blur();
      }
    }
    bindTopLevelEvents({ dead } = {}) {
      if (this.boundTopLevelEvents) {
        return;
      }
      this.boundTopLevelEvents = true;
      this.socket.onClose((event) => {
        if (event && event.code === 1001) {
          return this.unload();
        }
        if (event && event.code === 1e3 && this.main) {
          return this.reloadWithJitter(this.main);
        }
      });
      document.body.addEventListener("click", function() {
      });
      window.addEventListener("pageshow", (e) => {
        if (e.persisted) {
          this.getSocket().disconnect();
          this.withPageLoading({ to: window.location.href, kind: "redirect" });
          window.location.reload();
        }
      }, true);
      if (!dead) {
        this.bindNav();
      }
      this.bindClicks();
      if (!dead) {
        this.bindForms();
      }
      this.bind({ keyup: "keyup", keydown: "keydown" }, (e, type, view, targetEl, phxEvent, eventTarget) => {
        let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
        let pressedKey = e.key && e.key.toLowerCase();
        if (matchKey && matchKey.toLowerCase() !== pressedKey) {
          return;
        }
        let data2 = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
        js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
      });
      this.bind({ blur: "focusout", focus: "focusin" }, (e, type, view, targetEl, phxEvent, eventTarget) => {
        if (!eventTarget) {
          let data2 = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
        }
      });
      this.bind({ blur: "blur", focus: "focus" }, (e, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {
        if (phxTarget === "window") {
          let data2 = this.eventMeta(type, e, targetEl);
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
        }
      });
      window.addEventListener("dragover", (e) => e.preventDefault());
      window.addEventListener("drop", (e) => {
        e.preventDefault();
        let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
        });
        let dropTarget = dropTargetId && document.getElementById(dropTargetId);
        let files = Array.from(e.dataTransfer.files || []);
        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
          return;
        }
        LiveUploader.trackFiles(dropTarget, files, e.dataTransfer);
        dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
      this.on(PHX_TRACK_UPLOADS, (e) => {
        let uploadTarget = e.target;
        if (!dom_default.isUploadInput(uploadTarget)) {
          return;
        }
        let files = Array.from(e.detail.files || []).filter((f2) => f2 instanceof File || f2 instanceof Blob);
        LiveUploader.trackFiles(uploadTarget, files);
        uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    eventMeta(eventName, e, targetEl) {
      let callback = this.metadataCallbacks[eventName];
      return callback ? callback(e, targetEl) : {};
    }
    setPendingLink(href) {
      this.linkRef++;
      this.pendingLink = href;
      return this.linkRef;
    }
    commitPendingLink(linkRef) {
      if (this.linkRef !== linkRef) {
        return false;
      } else {
        this.href = this.pendingLink;
        this.pendingLink = null;
        return true;
      }
    }
    getHref() {
      return this.href;
    }
    hasPendingLink() {
      return !!this.pendingLink;
    }
    bind(events, callback) {
      for (let event in events) {
        let browserEventName = events[event];
        this.on(browserEventName, (e) => {
          let binding = this.binding(event);
          let windowBinding = this.binding(`window-${event}`);
          let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);
          if (targetPhxEvent) {
            this.debounce(e.target, e, browserEventName, () => {
              this.withinOwners(e.target, (view) => {
                callback(e, event, view, e.target, targetPhxEvent, null);
              });
            });
          } else {
            dom_default.all(document, `[${windowBinding}]`, (el) => {
              let phxEvent = el.getAttribute(windowBinding);
              this.debounce(el, e, browserEventName, () => {
                this.withinOwners(el, (view) => {
                  callback(e, event, view, el, phxEvent, "window");
                });
              });
            });
          }
        });
      }
    }
    bindClicks() {
      window.addEventListener("click", (e) => this.clickStartedAtTarget = e.target);
      this.bindClick("click", "click", false);
      this.bindClick("mousedown", "capture-click", true);
    }
    bindClick(eventName, bindingName, capture) {
      let click = this.binding(bindingName);
      window.addEventListener(eventName, (e) => {
        let target = null;
        if (capture) {
          target = e.target.matches(`[${click}]`) ? e.target : e.target.querySelector(`[${click}]`);
        } else {
          let clickStartedAtTarget = this.clickStartedAtTarget || e.target;
          target = closestPhxBinding(clickStartedAtTarget, click);
          this.dispatchClickAway(e, clickStartedAtTarget);
          this.clickStartedAtTarget = null;
        }
        let phxEvent = target && target.getAttribute(click);
        if (!phxEvent) {
          let href = e.target instanceof HTMLAnchorElement ? e.target.getAttribute("href") : null;
          if (!capture && href !== null && !dom_default.wantsNewTab(e) && dom_default.isNewPageHref(href, window.location)) {
            this.unload();
          }
          return;
        }
        if (target.getAttribute("href") === "#") {
          e.preventDefault();
        }
        this.debounce(target, e, "click", () => {
          this.withinOwners(target, (view) => {
            js_default.exec("click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e, target) }]);
          });
        });
      }, capture);
    }
    dispatchClickAway(e, clickStartedAt) {
      let phxClickAway = this.binding("click-away");
      dom_default.all(document, `[${phxClickAway}]`, (el) => {
        if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
          this.withinOwners(e.target, (view) => {
            let phxEvent = el.getAttribute(phxClickAway);
            if (js_default.isVisible(el)) {
              js_default.exec("click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e, e.target) }]);
            }
          });
        }
      });
    }
    bindNav() {
      if (!browser_default.canPushState()) {
        return;
      }
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }
      let scrollTimer = null;
      window.addEventListener("scroll", (_e) => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
        }, 100);
      });
      window.addEventListener("popstate", (event) => {
        if (!this.registerNewLocation(window.location)) {
          return;
        }
        let { type, id: id2, root, scroll } = event.state || {};
        let href = window.location.href;
        this.requestDOMUpdate(() => {
          if (this.main.isConnected() && (type === "patch" && id2 === this.main.id)) {
            this.main.pushLinkPatch(href, null, () => {
              this.maybeScroll(scroll);
            });
          } else {
            this.replaceMain(href, null, () => {
              if (root) {
                this.replaceRootHistory();
              }
              this.maybeScroll(scroll);
            });
          }
        });
      }, false);
      window.addEventListener("click", (e) => {
        let target = closestPhxBinding(e.target, PHX_LIVE_LINK);
        let type = target && target.getAttribute(PHX_LIVE_LINK);
        if (!type || !this.isConnected() || !this.main || dom_default.wantsNewTab(e)) {
          return;
        }
        let href = target.href;
        let linkState = target.getAttribute(PHX_LINK_STATE);
        e.preventDefault();
        e.stopImmediatePropagation();
        if (this.pendingLink === href) {
          return;
        }
        this.requestDOMUpdate(() => {
          if (type === "patch") {
            this.pushHistoryPatch(href, linkState, target);
          } else if (type === "redirect") {
            this.historyRedirect(href, linkState);
          } else {
            throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
          }
          let phxClick = target.getAttribute(this.binding("click"));
          if (phxClick) {
            this.requestDOMUpdate(() => this.execJS(target, phxClick, "click"));
          }
        });
      }, false);
    }
    maybeScroll(scroll) {
      if (typeof scroll === "number") {
        requestAnimationFrame(() => {
          window.scrollTo(0, scroll);
        });
      }
    }
    dispatchEvent(event, payload = {}) {
      dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
    }
    dispatchEvents(events) {
      events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
    }
    withPageLoading(info, callback) {
      dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
      let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
      return callback ? callback(done) : done;
    }
    pushHistoryPatch(href, linkState, targetEl) {
      if (!this.isConnected()) {
        return browser_default.redirect(href);
      }
      this.withPageLoading({ to: href, kind: "patch" }, (done) => {
        this.main.pushLinkPatch(href, targetEl, (linkRef) => {
          this.historyPatch(href, linkState, linkRef);
          done();
        });
      });
    }
    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
      if (!this.commitPendingLink(linkRef)) {
        return;
      }
      browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
      this.registerNewLocation(window.location);
    }
    historyRedirect(href, linkState, flash) {
      if (!this.isConnected()) {
        return browser_default.redirect(href, flash);
      }
      if (/^\/$|^\/[^\/]+.*$/.test(href)) {
        let { protocol, host } = window.location;
        href = `${protocol}//${host}${href}`;
      }
      let scroll = window.scrollY;
      this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
        this.replaceMain(href, flash, () => {
          browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
          this.registerNewLocation(window.location);
          done();
        });
      });
    }
    replaceRootHistory() {
      browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
    }
    registerNewLocation(newLocation) {
      let { pathname, search } = this.currentLocation;
      if (pathname + search === newLocation.pathname + newLocation.search) {
        return false;
      } else {
        this.currentLocation = clone(newLocation);
        return true;
      }
    }
    bindForms() {
      let iterations = 0;
      let externalFormSubmitted = false;
      this.on("submit", (e) => {
        let phxSubmit = e.target.getAttribute(this.binding("submit"));
        let phxChange = e.target.getAttribute(this.binding("change"));
        if (!externalFormSubmitted && phxChange && !phxSubmit) {
          externalFormSubmitted = true;
          e.preventDefault();
          this.withinOwners(e.target, (view) => {
            view.disableForm(e.target);
            window.requestAnimationFrame(() => {
              if (dom_default.isUnloadableFormSubmit(e)) {
                this.unload();
              }
              e.target.submit();
            });
          });
        }
      }, true);
      this.on("submit", (e) => {
        let phxEvent = e.target.getAttribute(this.binding("submit"));
        if (!phxEvent) {
          if (dom_default.isUnloadableFormSubmit(e)) {
            this.unload();
          }
          return;
        }
        e.preventDefault();
        e.target.disabled = true;
        this.withinOwners(e.target, (view) => {
          js_default.exec("submit", phxEvent, view, e.target, ["push", {}]);
        });
      }, false);
      for (let type of ["change", "input"]) {
        this.on(type, (e) => {
          let phxChange = this.binding("change");
          let input = e.target;
          let inputEvent = input.getAttribute(phxChange);
          let formEvent = input.form && input.form.getAttribute(phxChange);
          let phxEvent = inputEvent || formEvent;
          if (!phxEvent) {
            return;
          }
          if (input.type === "number" && input.validity && input.validity.badInput) {
            return;
          }
          let dispatcher = inputEvent ? input : input.form;
          let currentIterations = iterations;
          iterations++;
          let { at, type: lastType } = dom_default.private(input, "prev-iteration") || {};
          if (at === currentIterations - 1 && type !== lastType) {
            return;
          }
          dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
          this.debounce(input, e, type, () => {
            this.withinOwners(dispatcher, (view) => {
              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
              if (!dom_default.isTextualInput(input)) {
                this.setActiveElement(input);
              }
              js_default.exec("change", phxEvent, view, input, ["push", { _target: e.target.name, dispatcher }]);
            });
          });
        }, false);
      }
      this.on("reset", (e) => {
        let form = e.target;
        dom_default.resetForm(form, this.binding(PHX_FEEDBACK_FOR));
        let input = Array.from(form.elements).find((el) => el.type === "reset");
        window.requestAnimationFrame(() => {
          input.dispatchEvent(new Event("input", { bubbles: true, cancelable: false }));
        });
      });
    }
    debounce(el, event, eventType, callback) {
      if (eventType === "blur" || eventType === "focusout") {
        return callback();
      }
      let phxDebounce = this.binding(PHX_DEBOUNCE);
      let phxThrottle = this.binding(PHX_THROTTLE);
      let defaultDebounce = this.defaults.debounce.toString();
      let defaultThrottle = this.defaults.throttle.toString();
      this.withinOwners(el, (view) => {
        let asyncFilter = () => !view.isDestroyed() && document.body.contains(el);
        dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, () => {
          callback();
        });
      });
    }
    silenceEvents(callback) {
      this.silenced = true;
      callback();
      this.silenced = false;
    }
    on(event, callback) {
      window.addEventListener(event, (e) => {
        if (!this.silenced) {
          callback(e);
        }
      });
    }
  };
  var TransitionSet = class {
    constructor() {
      this.transitions = /* @__PURE__ */ new Set();
      this.pendingOps = [];
    }
    reset() {
      this.transitions.forEach((timer2) => {
        clearTimeout(timer2);
        this.transitions.delete(timer2);
      });
      this.flushPendingOps();
    }
    after(callback) {
      if (this.size() === 0) {
        callback();
      } else {
        this.pushPendingOp(callback);
      }
    }
    addTransition(time, onStart, onDone) {
      onStart();
      let timer2 = setTimeout(() => {
        this.transitions.delete(timer2);
        onDone();
        this.flushPendingOps();
      }, time);
      this.transitions.add(timer2);
    }
    pushPendingOp(op) {
      this.pendingOps.push(op);
    }
    size() {
      return this.transitions.size;
    }
    flushPendingOps() {
      if (this.size() > 0) {
        return;
      }
      let op = this.pendingOps.shift();
      if (op) {
        op();
        this.flushPendingOps();
      }
    }
  };

  // js/app.js
  var import_topbar = __toESM(require_topbar());

  // vendor/ethers.js
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function createCommonjsModule(fn, basedir, module) {
    return module = { path: basedir, exports: {}, require: function(path, base2) {
      return commonjsRequire(path, base2 === void 0 || base2 === null ? module.path : base2);
    } }, fn(module, module.exports), module.exports;
  }
  function commonjsRequire() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
  }
  var bn = createCommonjsModule(function(module) {
    (function(module2, exports) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number, base2, endian) {
        if (BN2.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = null.Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN2.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN2.prototype._init = function init3(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [number & 67108863, number / 67108864 & 67108863];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [number & 67108863, number / 67108864 & 67108863, 1];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN2.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index2) {
        var c = string.charCodeAt(index2);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index2) {
        var r2 = parseHex4Bits(string, index2);
        if (index2 - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index2 - 1) << 4;
        }
        return r2;
      }
      BN2.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN2.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN2.prototype.clone = function clone2() {
        var r2 = new BN2(null);
        this.copy(r2);
        return r2;
      };
      BN2.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN2.prototype.inspect = function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      BN2.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN2.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN2.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN2.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN2.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N2) {
        var t = new Array(N2);
        var l = BN2.prototype._countBits(N2) - 1;
        for (var i = 0; i < N2; i++) {
          t[i] = this.revBin(i, l, N2);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N2) {
        if (x === 0 || x === N2 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N2) {
        for (var i = 0; i < N2; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N2, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N2);
        for (var s2 = 1; s2 < N2; s2 <<= 1) {
          var l = s2 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N2; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s2; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s2];
              var io = itws[p + j + s2];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s2] = re - ro;
              itws[p + j + s2] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N2 = Math.max(m, n) | 1;
        var odd = N2 & 1;
        var i = 0;
        for (N2 = N2 / 2 | 0; N2; N2 = N2 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N2) {
        if (N2 <= 1)
          return;
        for (var i = 0; i < N2 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N2 - i - 1];
          rws[N2 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N2 - i - 1];
          iws[N2 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N2) {
        var carry = 0;
        for (var i = 0; i < N2 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N2) * 8192 + Math.round(ws[2 * i] / N2) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N2) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N2; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N2) {
        var ph = new Array(N2);
        for (var i = 0; i < N2; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N2 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N2);
        var _ = this.stub(N2);
        var rws = new Array(N2);
        var rwst = new Array(N2);
        var iwst = new Array(N2);
        var nrws = new Array(N2);
        var nrwst = new Array(N2);
        var niwst = new Array(N2);
        var rmws = out.words;
        rmws.length = N2;
        this.convert13b(x.words, x.length, rws, N2);
        this.convert13b(y.words, y.length, nrws, N2);
        this.transform(rws, _, rwst, iwst, N2, rbt);
        this.transform(nrws, _, nrwst, niwst, N2, rbt);
        for (var i = 0; i < N2; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N2);
        this.transform(rwst, iwst, rmws, _, N2, rbt);
        this.conjugate(rmws, _, N2);
        this.normalize13b(rmws, N2);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN2.prototype.mul = function mul3(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN2(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s2] = this.words[i];
          }
          for (i = 0; i < s2; i++) {
            this.words[i] = 0;
          }
          this.length += s2;
        }
        return this.strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s2;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s2; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) {
        } else if (this.length > s2) {
          this.length -= s2;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2)
          return false;
        var w = this.words[s2];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return { div: q || null, mod: a };
      };
      BN2.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return { div: new BN2(0), mod: new BN2(0) };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return { div, mod };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return { div, mod: res.mod };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return { div: res.div, mod };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return { div: new BN2(0), mod: this };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return { div: this.divn(num.words[0]), mod: null };
          }
          if (mode === "mod") {
            return { div: null, mod: new BN2(this.modn(num.words[0])) };
          }
          return { div: this.divn(num.words[0]), mod: new BN2(this.modn(num.words[0])) };
        }
        return this._wordDiv(num, mode);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN2.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return { a: C, b: D, gcd: y.iushln(g) };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q;
          return this;
        }
        var carry = q;
        for (var i = s2; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = { k256: null, p224: null, p192: null, p25519: null };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(a.red && a.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s2 = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s2++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s2;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN2(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN2(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
  });
  var version = "logger/5.1.0";
  var _permanentCensorErrors = false;
  var _censorErrors = false;
  var LogLevels = { debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5 };
  var _logLevel = LogLevels["default"];
  var _globalLogger = null;
  function _checkNormalize() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _normalizeError = _checkNormalize();
  var LogLevel;
  (function(LogLevel2) {
    LogLevel2["DEBUG"] = "DEBUG";
    LogLevel2["INFO"] = "INFO";
    LogLevel2["WARNING"] = "WARNING";
    LogLevel2["ERROR"] = "ERROR";
    LogLevel2["OFF"] = "OFF";
  })(LogLevel || (LogLevel = {}));
  var ErrorCode;
  (function(ErrorCode2) {
    ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
    ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
    ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
    ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
    ErrorCode2["TIMEOUT"] = "TIMEOUT";
    ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
    ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
    ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
    ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
    ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
    ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
    ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
    ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
    ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
    ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
    ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  })(ErrorCode || (ErrorCode = {}));
  var Logger = class {
    constructor(version2) {
      Object.defineProperty(this, "version", { enumerable: true, value: version2, writable: false });
    }
    _log(logLevel, args) {
      const level = logLevel.toLowerCase();
      if (LogLevels[level] == null) {
        this.throwArgumentError("invalid log level name", "logLevel", logLevel);
      }
      if (_logLevel > LogLevels[level]) {
        return;
      }
      console.log.apply(console, args);
    }
    debug(...args) {
      this._log(Logger.levels.DEBUG, args);
    }
    info(...args) {
      this._log(Logger.levels.INFO, args);
    }
    warn(...args) {
      this._log(Logger.levels.WARNING, args);
    }
    makeError(message, code, params) {
      if (_censorErrors) {
        return this.makeError("censored error", code, {});
      }
      if (!code) {
        code = Logger.errors.UNKNOWN_ERROR;
      }
      if (!params) {
        params = {};
      }
      const messageDetails = [];
      Object.keys(params).forEach((key2) => {
        try {
          messageDetails.push(key2 + "=" + JSON.stringify(params[key2]));
        } catch (error2) {
          messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
        }
      });
      messageDetails.push(`code=${code}`);
      messageDetails.push(`version=${this.version}`);
      const reason = message;
      if (messageDetails.length) {
        message += " (" + messageDetails.join(", ") + ")";
      }
      const error = new Error(message);
      error.reason = reason;
      error.code = code;
      Object.keys(params).forEach(function(key2) {
        error[key2] = params[key2];
      });
      return error;
    }
    throwError(message, code, params) {
      throw this.makeError(message, code, params);
    }
    throwArgumentError(message, name2, value) {
      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, { argument: name2, value });
    }
    assert(condition, message, code, params) {
      if (!!condition) {
        return;
      }
      this.throwError(message, code, params);
    }
    assertArgument(condition, message, name2, value) {
      if (!!condition) {
        return;
      }
      this.throwArgumentError(message, name2, value);
    }
    checkNormalize(message) {
      if (message == null) {
        message = "platform missing String.prototype.normalize";
      }
      if (_normalizeError) {
        this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, { operation: "String.prototype.normalize", form: _normalizeError });
      }
    }
    checkSafeUint53(value, message) {
      if (typeof value !== "number") {
        return;
      }
      if (message == null) {
        message = "value not safe";
      }
      if (value < 0 || value >= 9007199254740991) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, { operation: "checkSafeInteger", fault: "out-of-safe-range", value });
      }
      if (value % 1) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, { operation: "checkSafeInteger", fault: "non-integer", value });
      }
    }
    checkArgumentCount(count, expectedCount, message) {
      if (message) {
        message = ": " + message;
      } else {
        message = "";
      }
      if (count < expectedCount) {
        this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, { count, expectedCount });
      }
      if (count > expectedCount) {
        this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, { count, expectedCount });
      }
    }
    checkNew(target, kind) {
      if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
      }
    }
    checkAbstract(target, kind) {
      if (target === kind) {
        this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
      } else if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
      }
    }
    static globalLogger() {
      if (!_globalLogger) {
        _globalLogger = new Logger(version);
      }
      return _globalLogger;
    }
    static setCensorship(censorship, permanent) {
      if (!censorship && permanent) {
        this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, { operation: "setCensorship" });
      }
      if (_permanentCensorErrors) {
        if (!censorship) {
          return;
        }
        this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, { operation: "setCensorship" });
      }
      _censorErrors = !!censorship;
      _permanentCensorErrors = !!permanent;
    }
    static setLogLevel(logLevel) {
      const level = LogLevels[logLevel.toLowerCase()];
      if (level == null) {
        Logger.globalLogger().warn("invalid log level - " + logLevel);
        return;
      }
      _logLevel = level;
    }
    static from(version2) {
      return new Logger(version2);
    }
  };
  Logger.errors = ErrorCode;
  Logger.levels = LogLevel;
  var version$1 = "bytes/5.1.0";
  var logger = new Logger(version$1);
  function isHexable(value) {
    return !!value.toHexString;
  }
  function addSlice(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function() {
      const args = Array.prototype.slice.call(arguments);
      return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
    };
    return array;
  }
  function isBytesLike(value) {
    return isHexString(value) && !(value.length % 2) || isBytes(value);
  }
  function isBytes(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (value.length == null) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v = value[i];
      if (typeof v !== "number" || v < 0 || v >= 256 || v % 1) {
        return false;
      }
    }
    return true;
  }
  function arrayify(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice(new Uint8Array(result));
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (isHexable(value)) {
      value = value.toHexString();
    }
    if (isHexString(value)) {
      let hex2 = value.substring(2);
      if (hex2.length % 2) {
        if (options.hexPad === "left") {
          hex2 = "0x0" + hex2.substring(2);
        } else if (options.hexPad === "right") {
          hex2 += "0";
        } else {
          logger.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex2.length; i += 2) {
        result.push(parseInt(hex2.substring(i, i + 2), 16));
      }
      return addSlice(new Uint8Array(result));
    }
    if (isBytes(value)) {
      return addSlice(new Uint8Array(value));
    }
    return logger.throwArgumentError("invalid arrayify value", "value", value);
  }
  function concat(items) {
    const objects = items.map((item) => arrayify(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice(result);
  }
  function stripZeros(value) {
    let result = arrayify(value);
    if (result.length === 0) {
      return result;
    }
    let start = 0;
    while (start < result.length && result[start] === 0) {
      start++;
    }
    if (start) {
      result = result.slice(start);
    }
    return result;
  }
  function zeroPad(value, length) {
    value = arrayify(value);
    if (value.length > length) {
      logger.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice(result);
  }
  function isHexString(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  var HexCharacters = "0123456789abcdef";
  function hexlify(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger.checkSafeUint53(value, "invalid hexlify value");
      let hex2 = "";
      while (value) {
        hex2 = HexCharacters[value & 15] + hex2;
        value = Math.floor(value / 16);
      }
      if (hex2.length) {
        if (hex2.length % 2) {
          hex2 = "0" + hex2;
        }
        return "0x" + hex2;
      }
      return "0x00";
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (isHexable(value)) {
      return value.toHexString();
    }
    if (isHexString(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v = value[i];
        result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
      }
      return result;
    }
    return logger.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataLength(data2) {
    if (typeof data2 !== "string") {
      data2 = hexlify(data2);
    } else if (!isHexString(data2) || data2.length % 2) {
      return null;
    }
    return (data2.length - 2) / 2;
  }
  function hexDataSlice(data2, offset, endOffset) {
    if (typeof data2 !== "string") {
      data2 = hexlify(data2);
    } else if (!isHexString(data2) || data2.length % 2) {
      logger.throwArgumentError("invalid hexData", "value", data2);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data2.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data2.substring(offset);
  }
  function hexConcat(items) {
    let result = "0x";
    items.forEach((item) => {
      result += hexlify(item).substring(2);
    });
    return result;
  }
  function hexValue(value) {
    const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
    if (trimmed === "0x") {
      return "0x0";
    }
    return trimmed;
  }
  function hexStripZeros(value) {
    if (typeof value !== "string") {
      value = hexlify(value);
    }
    if (!isHexString(value)) {
      logger.throwArgumentError("invalid hex string", "value", value);
    }
    value = value.substring(2);
    let offset = 0;
    while (offset < value.length && value[offset] === "0") {
      offset++;
    }
    return "0x" + value.substring(offset);
  }
  function hexZeroPad(value, length) {
    if (typeof value !== "string") {
      value = hexlify(value);
    } else if (!isHexString(value)) {
      logger.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  function splitSignature(signature2) {
    const result = { r: "0x", s: "0x", _vs: "0x", recoveryParam: 0, v: 0 };
    if (isBytesLike(signature2)) {
      const bytes = arrayify(signature2);
      if (bytes.length !== 65) {
        logger.throwArgumentError("invalid signature string; must be 65 bytes", "signature", signature2);
      }
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
      if (result.v < 27) {
        if (result.v === 0 || result.v === 1) {
          result.v += 27;
        } else {
          logger.throwArgumentError("signature invalid v byte", "signature", signature2);
        }
      }
      result.recoveryParam = 1 - result.v % 2;
      if (result.recoveryParam) {
        bytes[32] |= 128;
      }
      result._vs = hexlify(bytes.slice(32, 64));
    } else {
      result.r = signature2.r;
      result.s = signature2.s;
      result.v = signature2.v;
      result.recoveryParam = signature2.recoveryParam;
      result._vs = signature2._vs;
      if (result._vs != null) {
        const vs2 = zeroPad(arrayify(result._vs), 32);
        result._vs = hexlify(vs2);
        const recoveryParam = vs2[0] >= 128 ? 1 : 0;
        if (result.recoveryParam == null) {
          result.recoveryParam = recoveryParam;
        } else if (result.recoveryParam !== recoveryParam) {
          logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
        }
        vs2[0] &= 127;
        const s2 = hexlify(vs2);
        if (result.s == null) {
          result.s = s2;
        } else if (result.s !== s2) {
          logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
        }
      }
      if (result.recoveryParam == null) {
        if (result.v == null) {
          logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
        } else if (result.v === 0 || result.v === 1) {
          result.recoveryParam = result.v;
        } else {
          result.recoveryParam = 1 - result.v % 2;
        }
      } else {
        if (result.v == null) {
          result.v = 27 + result.recoveryParam;
        } else if (result.recoveryParam !== 1 - result.v % 2) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
      if (result.r == null || !isHexString(result.r)) {
        logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
      } else {
        result.r = hexZeroPad(result.r, 32);
      }
      if (result.s == null || !isHexString(result.s)) {
        logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
      } else {
        result.s = hexZeroPad(result.s, 32);
      }
      const vs = arrayify(result.s);
      if (vs[0] >= 128) {
        logger.throwArgumentError("signature s out of range", "signature", signature2);
      }
      if (result.recoveryParam) {
        vs[0] |= 128;
      }
      const _vs = hexlify(vs);
      if (result._vs) {
        if (!isHexString(result._vs)) {
          logger.throwArgumentError("signature invalid _vs", "signature", signature2);
        }
        result._vs = hexZeroPad(result._vs, 32);
      }
      if (result._vs == null) {
        result._vs = _vs;
      } else if (result._vs !== _vs) {
        logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
      }
    }
    return result;
  }
  function joinSignature(signature2) {
    signature2 = splitSignature(signature2);
    return hexlify(concat([signature2.r, signature2.s, signature2.recoveryParam ? "0x1c" : "0x1b"]));
  }
  var version$2 = "bignumber/5.1.1";
  var BN = bn.BN;
  var logger$1 = new Logger(version$2);
  var _constructorGuard = {};
  var MAX_SAFE = 9007199254740991;
  function isBigNumberish(value) {
    return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
  }
  var _warnedToStringRadix = false;
  var BigNumber = class {
    constructor(constructorGuard, hex2) {
      logger$1.checkNew(new.target, BigNumber);
      if (constructorGuard !== _constructorGuard) {
        logger$1.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new (BigNumber)" });
      }
      this._hex = hex2;
      this._isBigNumber = true;
      Object.freeze(this);
    }
    fromTwos(value) {
      return toBigNumber(toBN(this).fromTwos(value));
    }
    toTwos(value) {
      return toBigNumber(toBN(this).toTwos(value));
    }
    abs() {
      if (this._hex[0] === "-") {
        return BigNumber.from(this._hex.substring(1));
      }
      return this;
    }
    add(other) {
      return toBigNumber(toBN(this).add(toBN(other)));
    }
    sub(other) {
      return toBigNumber(toBN(this).sub(toBN(other)));
    }
    div(other) {
      const o = BigNumber.from(other);
      if (o.isZero()) {
        throwFault("division by zero", "div");
      }
      return toBigNumber(toBN(this).div(toBN(other)));
    }
    mul(other) {
      return toBigNumber(toBN(this).mul(toBN(other)));
    }
    mod(other) {
      const value = toBN(other);
      if (value.isNeg()) {
        throwFault("cannot modulo negative values", "mod");
      }
      return toBigNumber(toBN(this).umod(value));
    }
    pow(other) {
      const value = toBN(other);
      if (value.isNeg()) {
        throwFault("cannot raise to negative values", "pow");
      }
      return toBigNumber(toBN(this).pow(value));
    }
    and(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("cannot 'and' negative values", "and");
      }
      return toBigNumber(toBN(this).and(value));
    }
    or(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("cannot 'or' negative values", "or");
      }
      return toBigNumber(toBN(this).or(value));
    }
    xor(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("cannot 'xor' negative values", "xor");
      }
      return toBigNumber(toBN(this).xor(value));
    }
    mask(value) {
      if (this.isNegative() || value < 0) {
        throwFault("cannot mask negative values", "mask");
      }
      return toBigNumber(toBN(this).maskn(value));
    }
    shl(value) {
      if (this.isNegative() || value < 0) {
        throwFault("cannot shift negative values", "shl");
      }
      return toBigNumber(toBN(this).shln(value));
    }
    shr(value) {
      if (this.isNegative() || value < 0) {
        throwFault("cannot shift negative values", "shr");
      }
      return toBigNumber(toBN(this).shrn(value));
    }
    eq(other) {
      return toBN(this).eq(toBN(other));
    }
    lt(other) {
      return toBN(this).lt(toBN(other));
    }
    lte(other) {
      return toBN(this).lte(toBN(other));
    }
    gt(other) {
      return toBN(this).gt(toBN(other));
    }
    gte(other) {
      return toBN(this).gte(toBN(other));
    }
    isNegative() {
      return this._hex[0] === "-";
    }
    isZero() {
      return toBN(this).isZero();
    }
    toNumber() {
      try {
        return toBN(this).toNumber();
      } catch (error) {
        throwFault("overflow", "toNumber", this.toString());
      }
      return null;
    }
    toBigInt() {
      try {
        return BigInt(this.toString());
      } catch (e) {
      }
      return logger$1.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, { value: this.toString() });
    }
    toString() {
      if (arguments.length > 0) {
        if (arguments[0] === 10) {
          if (!_warnedToStringRadix) {
            _warnedToStringRadix = true;
            logger$1.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
          }
        } else if (arguments[0] === 16) {
          logger$1.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
        } else {
          logger$1.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
        }
      }
      return toBN(this).toString(10);
    }
    toHexString() {
      return this._hex;
    }
    toJSON(key2) {
      return { type: "BigNumber", hex: this.toHexString() };
    }
    static from(value) {
      if (value instanceof BigNumber) {
        return value;
      }
      if (typeof value === "string") {
        if (value.match(/^-?0x[0-9a-f]+$/i)) {
          return new BigNumber(_constructorGuard, toHex(value));
        }
        if (value.match(/^-?[0-9]+$/)) {
          return new BigNumber(_constructorGuard, toHex(new BN(value)));
        }
        return logger$1.throwArgumentError("invalid BigNumber string", "value", value);
      }
      if (typeof value === "number") {
        if (value % 1) {
          throwFault("underflow", "BigNumber.from", value);
        }
        if (value >= MAX_SAFE || value <= -MAX_SAFE) {
          throwFault("overflow", "BigNumber.from", value);
        }
        return BigNumber.from(String(value));
      }
      const anyValue = value;
      if (typeof anyValue === "bigint") {
        return BigNumber.from(anyValue.toString());
      }
      if (isBytes(anyValue)) {
        return BigNumber.from(hexlify(anyValue));
      }
      if (anyValue) {
        if (anyValue.toHexString) {
          const hex2 = anyValue.toHexString();
          if (typeof hex2 === "string") {
            return BigNumber.from(hex2);
          }
        } else {
          let hex2 = anyValue._hex;
          if (hex2 == null && anyValue.type === "BigNumber") {
            hex2 = anyValue.hex;
          }
          if (typeof hex2 === "string") {
            if (isHexString(hex2) || hex2[0] === "-" && isHexString(hex2.substring(1))) {
              return BigNumber.from(hex2);
            }
          }
        }
      }
      return logger$1.throwArgumentError("invalid BigNumber value", "value", value);
    }
    static isBigNumber(value) {
      return !!(value && value._isBigNumber);
    }
  };
  function toHex(value) {
    if (typeof value !== "string") {
      return toHex(value.toString(16));
    }
    if (value[0] === "-") {
      value = value.substring(1);
      if (value[0] === "-") {
        logger$1.throwArgumentError("invalid hex", "value", value);
      }
      value = toHex(value);
      if (value === "0x00") {
        return value;
      }
      return "-" + value;
    }
    if (value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (value === "0x") {
      return "0x00";
    }
    if (value.length % 2) {
      value = "0x0" + value.substring(2);
    }
    while (value.length > 4 && value.substring(0, 4) === "0x00") {
      value = "0x" + value.substring(4);
    }
    return value;
  }
  function toBigNumber(value) {
    return BigNumber.from(toHex(value));
  }
  function toBN(value) {
    const hex2 = BigNumber.from(value).toHexString();
    if (hex2[0] === "-") {
      return new BN("-" + hex2.substring(3), 16);
    }
    return new BN(hex2.substring(2), 16);
  }
  function throwFault(fault, operation, value) {
    const params = { fault, operation };
    if (value != null) {
      params.value = value;
    }
    return logger$1.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
  }
  function _base36To16(value) {
    return new BN(value, 36).toString(16);
  }
  function _base16To36(value) {
    return new BN(value, 16).toString(36);
  }
  var logger$2 = new Logger(version$2);
  var _constructorGuard$1 = {};
  var Zero = BigNumber.from(0);
  var NegativeOne = BigNumber.from(-1);
  function throwFault$1(message, fault, operation, value) {
    const params = { fault, operation };
    if (value !== void 0) {
      params.value = value;
    }
    return logger$2.throwError(message, Logger.errors.NUMERIC_FAULT, params);
  }
  var zeros = "0";
  while (zeros.length < 256) {
    zeros += zeros;
  }
  function getMultiplier(decimals) {
    if (typeof decimals !== "number") {
      try {
        decimals = BigNumber.from(decimals).toNumber();
      } catch (e) {
      }
    }
    if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
      return "1" + zeros.substring(0, decimals);
    }
    return logger$2.throwArgumentError("invalid decimal size", "decimals", decimals);
  }
  function formatFixed(value, decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const multiplier = getMultiplier(decimals);
    value = BigNumber.from(value);
    const negative = value.lt(Zero);
    if (negative) {
      value = value.mul(NegativeOne);
    }
    let fraction = value.mod(multiplier).toString();
    while (fraction.length < multiplier.length - 1) {
      fraction = "0" + fraction;
    }
    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    const whole = value.div(multiplier).toString();
    value = whole + "." + fraction;
    if (negative) {
      value = "-" + value;
    }
    return value;
  }
  function parseFixed(value, decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const multiplier = getMultiplier(decimals);
    if (typeof value !== "string" || !value.match(/^-?[0-9.,]+$/)) {
      logger$2.throwArgumentError("invalid decimal value", "value", value);
    }
    if (multiplier.length - 1 === 0) {
      return BigNumber.from(value);
    }
    const negative = value.substring(0, 1) === "-";
    if (negative) {
      value = value.substring(1);
    }
    if (value === ".") {
      logger$2.throwArgumentError("missing value", "value", value);
    }
    const comps = value.split(".");
    if (comps.length > 2) {
      logger$2.throwArgumentError("too many decimal points", "value", value);
    }
    let whole = comps[0], fraction = comps[1];
    if (!whole) {
      whole = "0";
    }
    if (!fraction) {
      fraction = "0";
    }
    if (fraction.length > multiplier.length - 1) {
      throwFault$1("fractional component exceeds decimals", "underflow", "parseFixed");
    }
    while (fraction.length < multiplier.length - 1) {
      fraction += "0";
    }
    const wholeValue = BigNumber.from(whole);
    const fractionValue = BigNumber.from(fraction);
    let wei = wholeValue.mul(multiplier).add(fractionValue);
    if (negative) {
      wei = wei.mul(NegativeOne);
    }
    return wei;
  }
  var FixedFormat = class {
    constructor(constructorGuard, signed, width, decimals) {
      if (constructorGuard !== _constructorGuard$1) {
        logger$2.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new FixedFormat" });
      }
      this.signed = signed;
      this.width = width;
      this.decimals = decimals;
      this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
      this._multiplier = getMultiplier(decimals);
      Object.freeze(this);
    }
    static from(value) {
      if (value instanceof FixedFormat) {
        return value;
      }
      let signed = true;
      let width = 128;
      let decimals = 18;
      if (typeof value === "string") {
        if (value === "fixed") {
        } else if (value === "ufixed") {
          signed = false;
        } else if (value != null) {
          const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
          if (!match) {
            logger$2.throwArgumentError("invalid fixed format", "format", value);
          }
          signed = match[1] !== "u";
          width = parseInt(match[2]);
          decimals = parseInt(match[3]);
        }
      } else if (value) {
        const check = (key2, type, defaultValue) => {
          if (value[key2] == null) {
            return defaultValue;
          }
          if (typeof value[key2] !== type) {
            logger$2.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value[key2]);
          }
          return value[key2];
        };
        signed = check("signed", "boolean", signed);
        width = check("width", "number", width);
        decimals = check("decimals", "number", decimals);
      }
      if (width % 8) {
        logger$2.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
      }
      if (decimals > 80) {
        logger$2.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
      }
      return new FixedFormat(_constructorGuard$1, signed, width, decimals);
    }
  };
  var FixedNumber = class {
    constructor(constructorGuard, hex2, value, format) {
      logger$2.checkNew(new.target, FixedNumber);
      if (constructorGuard !== _constructorGuard$1) {
        logger$2.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new FixedFormat" });
      }
      this.format = format;
      this._hex = hex2;
      this._value = value;
      this._isFixedNumber = true;
      Object.freeze(this);
    }
    _checkFormat(other) {
      if (this.format.name !== other.format.name) {
        logger$2.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
      }
    }
    addUnsafe(other) {
      this._checkFormat(other);
      const a = parseFixed(this._value, this.format.decimals);
      const b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
    }
    subUnsafe(other) {
      this._checkFormat(other);
      const a = parseFixed(this._value, this.format.decimals);
      const b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
    }
    mulUnsafe(other) {
      this._checkFormat(other);
      const a = parseFixed(this._value, this.format.decimals);
      const b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
    }
    divUnsafe(other) {
      this._checkFormat(other);
      const a = parseFixed(this._value, this.format.decimals);
      const b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
    }
    floor() {
      let comps = this.toString().split(".");
      let result = FixedNumber.from(comps[0], this.format);
      const hasFraction = !comps[1].match(/^(0*)$/);
      if (this.isNegative() && hasFraction) {
        result = result.subUnsafe(ONE);
      }
      return result;
    }
    ceiling() {
      let comps = this.toString().split(".");
      let result = FixedNumber.from(comps[0], this.format);
      const hasFraction = !comps[1].match(/^(0*)$/);
      if (!this.isNegative() && hasFraction) {
        result = result.addUnsafe(ONE);
      }
      return result;
    }
    round(decimals) {
      if (decimals == null) {
        decimals = 0;
      }
      let comps = this.toString().split(".");
      if (decimals < 0 || decimals > 80 || decimals % 1) {
        logger$2.throwArgumentError("invalid decimal count", "decimals", decimals);
      }
      if (comps[1].length <= decimals) {
        return this;
      }
      const factor = FixedNumber.from("1" + zeros.substring(0, decimals));
      return this.mulUnsafe(factor).addUnsafe(BUMP).floor().divUnsafe(factor);
    }
    isZero() {
      return this._value === "0.0";
    }
    isNegative() {
      return this._value[0] === "-";
    }
    toString() {
      return this._value;
    }
    toHexString(width) {
      if (width == null) {
        return this._hex;
      }
      if (width % 8) {
        logger$2.throwArgumentError("invalid byte width", "width", width);
      }
      const hex2 = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
      return hexZeroPad(hex2, width / 8);
    }
    toUnsafeFloat() {
      return parseFloat(this.toString());
    }
    toFormat(format) {
      return FixedNumber.fromString(this._value, format);
    }
    static fromValue(value, decimals, format) {
      if (format == null && decimals != null && !isBigNumberish(decimals)) {
        format = decimals;
        decimals = null;
      }
      if (decimals == null) {
        decimals = 0;
      }
      if (format == null) {
        format = "fixed";
      }
      return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
    }
    static fromString(value, format) {
      if (format == null) {
        format = "fixed";
      }
      const fixedFormat = FixedFormat.from(format);
      const numeric = parseFixed(value, fixedFormat.decimals);
      if (!fixedFormat.signed && numeric.lt(Zero)) {
        throwFault$1("unsigned value cannot be negative", "overflow", "value", value);
      }
      let hex2 = null;
      if (fixedFormat.signed) {
        hex2 = numeric.toTwos(fixedFormat.width).toHexString();
      } else {
        hex2 = numeric.toHexString();
        hex2 = hexZeroPad(hex2, fixedFormat.width / 8);
      }
      const decimal = formatFixed(numeric, fixedFormat.decimals);
      return new FixedNumber(_constructorGuard$1, hex2, decimal, fixedFormat);
    }
    static fromBytes(value, format) {
      if (format == null) {
        format = "fixed";
      }
      const fixedFormat = FixedFormat.from(format);
      if (arrayify(value).length > fixedFormat.width / 8) {
        throw new Error("overflow");
      }
      let numeric = BigNumber.from(value);
      if (fixedFormat.signed) {
        numeric = numeric.fromTwos(fixedFormat.width);
      }
      const hex2 = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
      const decimal = formatFixed(numeric, fixedFormat.decimals);
      return new FixedNumber(_constructorGuard$1, hex2, decimal, fixedFormat);
    }
    static from(value, format) {
      if (typeof value === "string") {
        return FixedNumber.fromString(value, format);
      }
      if (isBytes(value)) {
        return FixedNumber.fromBytes(value, format);
      }
      try {
        return FixedNumber.fromValue(value, 0, format);
      } catch (error) {
        if (error.code !== Logger.errors.INVALID_ARGUMENT) {
          throw error;
        }
      }
      return logger$2.throwArgumentError("invalid FixedNumber value", "value", value);
    }
    static isFixedNumber(value) {
      return !!(value && value._isFixedNumber);
    }
  };
  var ONE = FixedNumber.from(1);
  var BUMP = FixedNumber.from("0.5");
  var version$3 = "properties/5.1.0";
  var __awaiter = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$3 = new Logger(version$3);
  function defineReadOnly(object, name2, value) {
    Object.defineProperty(object, name2, { enumerable: true, value, writable: false });
  }
  function getStatic(ctor, key2) {
    for (let i = 0; i < 32; i++) {
      if (ctor[key2]) {
        return ctor[key2];
      }
      if (!ctor.prototype || typeof ctor.prototype !== "object") {
        break;
      }
      ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
  }
  function resolveProperties(object) {
    return __awaiter(this, void 0, void 0, function* () {
      const promises = Object.keys(object).map((key2) => {
        const value = object[key2];
        return Promise.resolve(value).then((v) => ({ key: key2, value: v }));
      });
      const results = yield Promise.all(promises);
      return results.reduce((accum, result) => {
        accum[result.key] = result.value;
        return accum;
      }, {});
    });
  }
  function checkProperties(object, properties) {
    if (!object || typeof object !== "object") {
      logger$3.throwArgumentError("invalid object", "object", object);
    }
    Object.keys(object).forEach((key2) => {
      if (!properties[key2]) {
        logger$3.throwArgumentError("invalid object key - " + key2, "transaction:" + key2, object);
      }
    });
  }
  function shallowCopy(object) {
    const result = {};
    for (const key2 in object) {
      result[key2] = object[key2];
    }
    return result;
  }
  var opaque = { bigint: true, boolean: true, function: true, number: true, string: true };
  function _isFrozen(object) {
    if (object === void 0 || object === null || opaque[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i = 0; i < keys.length; i++) {
        if (!_isFrozen(object[keys[i]])) {
          return false;
        }
      }
      return true;
    }
    return logger$3.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
  }
  function _deepCopy(object) {
    if (_isFrozen(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly(result, key2, deepCopy(value));
      }
      return result;
    }
    return logger$3.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
  }
  function deepCopy(object) {
    return _deepCopy(object);
  }
  var Description = class {
    constructor(info) {
      for (const key2 in info) {
        this[key2] = deepCopy(info[key2]);
      }
    }
  };
  var version$4 = "abi/5.1.2";
  var logger$4 = new Logger(version$4);
  var _constructorGuard$2 = {};
  var ModifiersBytes = { calldata: true, memory: true, storage: true };
  var ModifiersNest = { calldata: true, memory: true };
  function checkModifier(type, name2) {
    if (type === "bytes" || type === "string") {
      if (ModifiersBytes[name2]) {
        return true;
      }
    } else if (type === "address") {
      if (name2 === "payable") {
        return true;
      }
    } else if (type.indexOf("[") >= 0 || type === "tuple") {
      if (ModifiersNest[name2]) {
        return true;
      }
    }
    if (ModifiersBytes[name2] || name2 === "payable") {
      logger$4.throwArgumentError("invalid modifier", "name", name2);
    }
    return false;
  }
  function parseParamType(param, allowIndexed) {
    let originalParam = param;
    function throwError(i) {
      logger$4.throwArgumentError(`unexpected character at position ${i}`, "param", param);
    }
    param = param.replace(/\s/g, " ");
    function newNode(parent2) {
      let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
      if (allowIndexed) {
        node2.indexed = false;
      }
      return node2;
    }
    let parent = { type: "", name: "", state: { allowType: true } };
    let node = parent;
    for (let i = 0; i < param.length; i++) {
      let c = param[i];
      switch (c) {
        case "(":
          if (node.state.allowType && node.type === "") {
            node.type = "tuple";
          } else if (!node.state.allowParams) {
            throwError(i);
          }
          node.state.allowType = false;
          node.type = verifyType(node.type);
          node.components = [newNode(node)];
          node = node.components[0];
          break;
        case ")":
          delete node.state;
          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(i);
            }
            node.indexed = true;
            node.name = "";
          }
          if (checkModifier(node.type, node.name)) {
            node.name = "";
          }
          node.type = verifyType(node.type);
          let child = node;
          node = node.parent;
          if (!node) {
            throwError(i);
          }
          delete child.parent;
          node.state.allowParams = false;
          node.state.allowName = true;
          node.state.allowArray = true;
          break;
        case ",":
          delete node.state;
          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(i);
            }
            node.indexed = true;
            node.name = "";
          }
          if (checkModifier(node.type, node.name)) {
            node.name = "";
          }
          node.type = verifyType(node.type);
          let sibling = newNode(node.parent);
          node.parent.components.push(sibling);
          delete node.parent;
          node = sibling;
          break;
        case " ":
          if (node.state.allowType) {
            if (node.type !== "") {
              node.type = verifyType(node.type);
              delete node.state.allowType;
              node.state.allowName = true;
              node.state.allowParams = true;
            }
          }
          if (node.state.allowName) {
            if (node.name !== "") {
              if (node.name === "indexed") {
                if (!allowIndexed) {
                  throwError(i);
                }
                if (node.indexed) {
                  throwError(i);
                }
                node.indexed = true;
                node.name = "";
              } else if (checkModifier(node.type, node.name)) {
                node.name = "";
              } else {
                node.state.allowName = false;
              }
            }
          }
          break;
        case "[":
          if (!node.state.allowArray) {
            throwError(i);
          }
          node.type += c;
          node.state.allowArray = false;
          node.state.allowName = false;
          node.state.readArray = true;
          break;
        case "]":
          if (!node.state.readArray) {
            throwError(i);
          }
          node.type += c;
          node.state.readArray = false;
          node.state.allowArray = true;
          node.state.allowName = true;
          break;
        default:
          if (node.state.allowType) {
            node.type += c;
            node.state.allowParams = true;
            node.state.allowArray = true;
          } else if (node.state.allowName) {
            node.name += c;
            delete node.state.allowArray;
          } else if (node.state.readArray) {
            node.type += c;
          } else {
            throwError(i);
          }
      }
    }
    if (node.parent) {
      logger$4.throwArgumentError("unexpected eof", "param", param);
    }
    delete parent.state;
    if (node.name === "indexed") {
      if (!allowIndexed) {
        throwError(originalParam.length - 7);
      }
      if (node.indexed) {
        throwError(originalParam.length - 7);
      }
      node.indexed = true;
      node.name = "";
    } else if (checkModifier(node.type, node.name)) {
      node.name = "";
    }
    parent.type = verifyType(parent.type);
    return parent;
  }
  function populate(object, params) {
    for (let key2 in params) {
      defineReadOnly(object, key2, params[key2]);
    }
  }
  var FormatTypes = Object.freeze({ sighash: "sighash", minimal: "minimal", full: "full", json: "json" });
  var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
  var ParamType = class {
    constructor(constructorGuard, params) {
      if (constructorGuard !== _constructorGuard$2) {
        logger$4.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new ParamType()" });
      }
      populate(this, params);
      let match = this.type.match(paramTypeArray);
      if (match) {
        populate(this, { arrayLength: parseInt(match[2] || "-1"), arrayChildren: ParamType.fromObject({ type: match[1], components: this.components }), baseType: "array" });
      } else {
        populate(this, { arrayLength: null, arrayChildren: null, baseType: this.components != null ? "tuple" : this.type });
      }
      this._isParamType = true;
      Object.freeze(this);
    }
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        let result2 = { type: this.baseType === "tuple" ? "tuple" : this.type, name: this.name || void 0 };
        if (typeof this.indexed === "boolean") {
          result2.indexed = this.indexed;
        }
        if (this.components) {
          result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
        }
        return JSON.stringify(result2);
      }
      let result = "";
      if (this.baseType === "array") {
        result += this.arrayChildren.format(format);
        result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
      } else {
        if (this.baseType === "tuple") {
          if (format !== FormatTypes.sighash) {
            result += this.type;
          }
          result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
        } else {
          result += this.type;
        }
      }
      if (format !== FormatTypes.sighash) {
        if (this.indexed === true) {
          result += " indexed";
        }
        if (format === FormatTypes.full && this.name) {
          result += " " + this.name;
        }
      }
      return result;
    }
    static from(value, allowIndexed) {
      if (typeof value === "string") {
        return ParamType.fromString(value, allowIndexed);
      }
      return ParamType.fromObject(value);
    }
    static fromObject(value) {
      if (ParamType.isParamType(value)) {
        return value;
      }
      return new ParamType(_constructorGuard$2, { name: value.name || null, type: verifyType(value.type), indexed: value.indexed == null ? null : !!value.indexed, components: value.components ? value.components.map(ParamType.fromObject) : null });
    }
    static fromString(value, allowIndexed) {
      function ParamTypify(node) {
        return ParamType.fromObject({ name: node.name, type: node.type, indexed: node.indexed, components: node.components });
      }
      return ParamTypify(parseParamType(value, !!allowIndexed));
    }
    static isParamType(value) {
      return !!(value != null && value._isParamType);
    }
  };
  function parseParams(value, allowIndex) {
    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
  }
  var Fragment = class {
    constructor(constructorGuard, params) {
      if (constructorGuard !== _constructorGuard$2) {
        logger$4.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new Fragment()" });
      }
      populate(this, params);
      this._isFragment = true;
      Object.freeze(this);
    }
    static from(value) {
      if (Fragment.isFragment(value)) {
        return value;
      }
      if (typeof value === "string") {
        return Fragment.fromString(value);
      }
      return Fragment.fromObject(value);
    }
    static fromObject(value) {
      if (Fragment.isFragment(value)) {
        return value;
      }
      switch (value.type) {
        case "function":
          return FunctionFragment.fromObject(value);
        case "event":
          return EventFragment.fromObject(value);
        case "constructor":
          return ConstructorFragment.fromObject(value);
        case "error":
        case "fallback":
        case "receive":
          return null;
      }
      return logger$4.throwArgumentError("invalid fragment object", "value", value);
    }
    static fromString(value) {
      value = value.replace(/\s/g, " ");
      value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
      value = value.trim();
      if (value.split(" ")[0] === "event") {
        return EventFragment.fromString(value.substring(5).trim());
      } else if (value.split(" ")[0] === "function") {
        return FunctionFragment.fromString(value.substring(8).trim());
      } else if (value.split("(")[0].trim() === "constructor") {
        return ConstructorFragment.fromString(value.trim());
      }
      return logger$4.throwArgumentError("unsupported fragment", "value", value);
    }
    static isFragment(value) {
      return !!(value && value._isFragment);
    }
  };
  var EventFragment = class extends Fragment {
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        return JSON.stringify({ type: "event", anonymous: this.anonymous, name: this.name, inputs: this.inputs.map((input) => JSON.parse(input.format(format))) });
      }
      let result = "";
      if (format !== FormatTypes.sighash) {
        result += "event ";
      }
      result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
      if (format !== FormatTypes.sighash) {
        if (this.anonymous) {
          result += "anonymous ";
        }
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return EventFragment.fromString(value);
      }
      return EventFragment.fromObject(value);
    }
    static fromObject(value) {
      if (EventFragment.isEventFragment(value)) {
        return value;
      }
      if (value.type !== "event") {
        logger$4.throwArgumentError("invalid event object", "value", value);
      }
      const params = { name: verifyIdentifier(value.name), anonymous: value.anonymous, inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [], type: "event" };
      return new EventFragment(_constructorGuard$2, params);
    }
    static fromString(value) {
      let match = value.match(regexParen);
      if (!match) {
        logger$4.throwArgumentError("invalid event string", "value", value);
      }
      let anonymous = false;
      match[3].split(" ").forEach((modifier) => {
        switch (modifier.trim()) {
          case "anonymous":
            anonymous = true;
            break;
          case "":
            break;
          default:
            logger$4.warn("unknown modifier: " + modifier);
        }
      });
      return EventFragment.fromObject({ name: match[1].trim(), anonymous, inputs: parseParams(match[2], true), type: "event" });
    }
    static isEventFragment(value) {
      return value && value._isFragment && value.type === "event";
    }
  };
  function parseGas(value, params) {
    params.gas = null;
    let comps = value.split("@");
    if (comps.length !== 1) {
      if (comps.length > 2) {
        logger$4.throwArgumentError("invalid human-readable ABI signature", "value", value);
      }
      if (!comps[1].match(/^[0-9]+$/)) {
        logger$4.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
      }
      params.gas = BigNumber.from(comps[1]);
      return comps[0];
    }
    return value;
  }
  function parseModifiers(value, params) {
    params.constant = false;
    params.payable = false;
    params.stateMutability = "nonpayable";
    value.split(" ").forEach((modifier) => {
      switch (modifier.trim()) {
        case "constant":
          params.constant = true;
          break;
        case "payable":
          params.payable = true;
          params.stateMutability = "payable";
          break;
        case "nonpayable":
          params.payable = false;
          params.stateMutability = "nonpayable";
          break;
        case "pure":
          params.constant = true;
          params.stateMutability = "pure";
          break;
        case "view":
          params.constant = true;
          params.stateMutability = "view";
          break;
        case "external":
        case "public":
        case "":
          break;
        default:
          console.log("unknown modifier: " + modifier);
      }
    });
  }
  function verifyState(value) {
    let result = { constant: false, payable: true, stateMutability: "payable" };
    if (value.stateMutability != null) {
      result.stateMutability = value.stateMutability;
      result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
      if (value.constant != null) {
        if (!!value.constant !== result.constant) {
          logger$4.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
        }
      }
      result.payable = result.stateMutability === "payable";
      if (value.payable != null) {
        if (!!value.payable !== result.payable) {
          logger$4.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
        }
      }
    } else if (value.payable != null) {
      result.payable = !!value.payable;
      if (value.constant == null && !result.payable && value.type !== "constructor") {
        logger$4.throwArgumentError("unable to determine stateMutability", "value", value);
      }
      result.constant = !!value.constant;
      if (result.constant) {
        result.stateMutability = "view";
      } else {
        result.stateMutability = result.payable ? "payable" : "nonpayable";
      }
      if (result.payable && result.constant) {
        logger$4.throwArgumentError("cannot have constant payable function", "value", value);
      }
    } else if (value.constant != null) {
      result.constant = !!value.constant;
      result.payable = !result.constant;
      result.stateMutability = result.constant ? "view" : "payable";
    } else if (value.type !== "constructor") {
      logger$4.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    return result;
  }
  var ConstructorFragment = class extends Fragment {
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        return JSON.stringify({ type: "constructor", stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0, payable: this.payable, gas: this.gas ? this.gas.toNumber() : void 0, inputs: this.inputs.map((input) => JSON.parse(input.format(format))) });
      }
      if (format === FormatTypes.sighash) {
        logger$4.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, { operation: "format(sighash)" });
      }
      let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
      if (this.stateMutability && this.stateMutability !== "nonpayable") {
        result += this.stateMutability + " ";
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return ConstructorFragment.fromString(value);
      }
      return ConstructorFragment.fromObject(value);
    }
    static fromObject(value) {
      if (ConstructorFragment.isConstructorFragment(value)) {
        return value;
      }
      if (value.type !== "constructor") {
        logger$4.throwArgumentError("invalid constructor object", "value", value);
      }
      let state = verifyState(value);
      if (state.constant) {
        logger$4.throwArgumentError("constructor cannot be constant", "value", value);
      }
      const params = { name: null, type: value.type, inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [], payable: state.payable, stateMutability: state.stateMutability, gas: value.gas ? BigNumber.from(value.gas) : null };
      return new ConstructorFragment(_constructorGuard$2, params);
    }
    static fromString(value) {
      let params = { type: "constructor" };
      value = parseGas(value, params);
      let parens = value.match(regexParen);
      if (!parens || parens[1].trim() !== "constructor") {
        logger$4.throwArgumentError("invalid constructor string", "value", value);
      }
      params.inputs = parseParams(parens[2].trim(), false);
      parseModifiers(parens[3].trim(), params);
      return ConstructorFragment.fromObject(params);
    }
    static isConstructorFragment(value) {
      return value && value._isFragment && value.type === "constructor";
    }
  };
  var FunctionFragment = class extends ConstructorFragment {
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        return JSON.stringify({ type: "function", name: this.name, constant: this.constant, stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0, payable: this.payable, gas: this.gas ? this.gas.toNumber() : void 0, inputs: this.inputs.map((input) => JSON.parse(input.format(format))), outputs: this.outputs.map((output) => JSON.parse(output.format(format))) });
      }
      let result = "";
      if (format !== FormatTypes.sighash) {
        result += "function ";
      }
      result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
      if (format !== FormatTypes.sighash) {
        if (this.stateMutability) {
          if (this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
          }
        } else if (this.constant) {
          result += "view ";
        }
        if (this.outputs && this.outputs.length) {
          result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
        }
        if (this.gas != null) {
          result += "@" + this.gas.toString() + " ";
        }
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return FunctionFragment.fromString(value);
      }
      return FunctionFragment.fromObject(value);
    }
    static fromObject(value) {
      if (FunctionFragment.isFunctionFragment(value)) {
        return value;
      }
      if (value.type !== "function") {
        logger$4.throwArgumentError("invalid function object", "value", value);
      }
      let state = verifyState(value);
      const params = { type: value.type, name: verifyIdentifier(value.name), constant: state.constant, inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [], outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [], payable: state.payable, stateMutability: state.stateMutability, gas: value.gas ? BigNumber.from(value.gas) : null };
      return new FunctionFragment(_constructorGuard$2, params);
    }
    static fromString(value) {
      let params = { type: "function" };
      value = parseGas(value, params);
      let comps = value.split(" returns ");
      if (comps.length > 2) {
        logger$4.throwArgumentError("invalid function string", "value", value);
      }
      let parens = comps[0].match(regexParen);
      if (!parens) {
        logger$4.throwArgumentError("invalid function signature", "value", value);
      }
      params.name = parens[1].trim();
      if (params.name) {
        verifyIdentifier(params.name);
      }
      params.inputs = parseParams(parens[2], false);
      parseModifiers(parens[3].trim(), params);
      if (comps.length > 1) {
        let returns = comps[1].match(regexParen);
        if (returns[1].trim() != "" || returns[3].trim() != "") {
          logger$4.throwArgumentError("unexpected tokens", "value", value);
        }
        params.outputs = parseParams(returns[2], false);
      } else {
        params.outputs = [];
      }
      return FunctionFragment.fromObject(params);
    }
    static isFunctionFragment(value) {
      return value && value._isFragment && value.type === "function";
    }
  };
  function verifyType(type) {
    if (type.match(/^uint($|[^1-9])/)) {
      type = "uint256" + type.substring(4);
    } else if (type.match(/^int($|[^1-9])/)) {
      type = "int256" + type.substring(3);
    }
    return type;
  }
  var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
  function verifyIdentifier(value) {
    if (!value || !value.match(regexIdentifier)) {
      logger$4.throwArgumentError(`invalid identifier "${value}"`, "value", value);
    }
    return value;
  }
  var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  function splitNesting(value) {
    value = value.trim();
    let result = [];
    let accum = "";
    let depth = 0;
    for (let offset = 0; offset < value.length; offset++) {
      let c = value[offset];
      if (c === "," && depth === 0) {
        result.push(accum);
        accum = "";
      } else {
        accum += c;
        if (c === "(") {
          depth++;
        } else if (c === ")") {
          depth--;
          if (depth === -1) {
            logger$4.throwArgumentError("unbalanced parenthesis", "value", value);
          }
        }
      }
    }
    if (accum) {
      result.push(accum);
    }
    return result;
  }
  var logger$5 = new Logger(version$4);
  function checkResultErrors(result) {
    const errors = [];
    const checkErrors = function(path, object) {
      if (!Array.isArray(object)) {
        return;
      }
      for (let key2 in object) {
        const childPath = path.slice();
        childPath.push(key2);
        try {
          checkErrors(childPath, object[key2]);
        } catch (error) {
          errors.push({ path: childPath, error });
        }
      }
    };
    checkErrors([], result);
    return errors;
  }
  var Coder = class {
    constructor(name2, type, localName, dynamic) {
      this.name = name2;
      this.type = type;
      this.localName = localName;
      this.dynamic = dynamic;
    }
    _throwError(message, value) {
      logger$5.throwArgumentError(message, this.localName, value);
    }
  };
  var Writer = class {
    constructor(wordSize) {
      defineReadOnly(this, "wordSize", wordSize || 32);
      this._data = [];
      this._dataLength = 0;
      this._padding = new Uint8Array(wordSize);
    }
    get data() {
      return hexConcat(this._data);
    }
    get length() {
      return this._dataLength;
    }
    _writeData(data2) {
      this._data.push(data2);
      this._dataLength += data2.length;
      return data2.length;
    }
    appendWriter(writer) {
      return this._writeData(concat(writer._data));
    }
    writeBytes(value) {
      let bytes = arrayify(value);
      const paddingOffset = bytes.length % this.wordSize;
      if (paddingOffset) {
        bytes = concat([bytes, this._padding.slice(paddingOffset)]);
      }
      return this._writeData(bytes);
    }
    _getValue(value) {
      let bytes = arrayify(BigNumber.from(value));
      if (bytes.length > this.wordSize) {
        logger$5.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, { length: this.wordSize, offset: bytes.length });
      }
      if (bytes.length % this.wordSize) {
        bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
      }
      return bytes;
    }
    writeValue(value) {
      return this._writeData(this._getValue(value));
    }
    writeUpdatableValue() {
      const offset = this._data.length;
      this._data.push(this._padding);
      this._dataLength += this.wordSize;
      return (value) => {
        this._data[offset] = this._getValue(value);
      };
    }
  };
  var Reader = class {
    constructor(data2, wordSize, coerceFunc, allowLoose) {
      defineReadOnly(this, "_data", arrayify(data2));
      defineReadOnly(this, "wordSize", wordSize || 32);
      defineReadOnly(this, "_coerceFunc", coerceFunc);
      defineReadOnly(this, "allowLoose", allowLoose);
      this._offset = 0;
    }
    get data() {
      return hexlify(this._data);
    }
    get consumed() {
      return this._offset;
    }
    static coerce(name2, value) {
      let match = name2.match("^u?int([0-9]+)$");
      if (match && parseInt(match[1]) <= 48) {
        value = value.toNumber();
      }
      return value;
    }
    coerce(name2, value) {
      if (this._coerceFunc) {
        return this._coerceFunc(name2, value);
      }
      return Reader.coerce(name2, value);
    }
    _peekBytes(offset, length, loose) {
      let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
      if (this._offset + alignedLength > this._data.length) {
        if (this.allowLoose && loose && this._offset + length <= this._data.length) {
          alignedLength = length;
        } else {
          logger$5.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, { length: this._data.length, offset: this._offset + alignedLength });
        }
      }
      return this._data.slice(this._offset, this._offset + alignedLength);
    }
    subReader(offset) {
      return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
    }
    readBytes(length, loose) {
      let bytes = this._peekBytes(0, length, !!loose);
      this._offset += bytes.length;
      return bytes.slice(0, length);
    }
    readValue() {
      return BigNumber.from(this.readBytes(this.wordSize));
    }
  };
  var sha3 = createCommonjsModule(function(module) {
    (function() {
      "use strict";
      var root = typeof window === "object" ? window : {};
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && true && module.exports;
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array"];
      var createOutputMethod = function(bits2, padding2, outputType) {
        return function(message) {
          return new Keccak(bits2, padding2, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createMethod = function(bits2, padding2) {
        var method = createOutputMethod(bits2, padding2, "hex");
        method.create = function() {
          return new Keccak(bits2, padding2, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createOutputMethod(bits2, padding2, type);
        }
        return method;
      };
      var createShakeMethod = function(bits2, padding2) {
        var method = createShakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createShakeOutputMethod(bits2, padding2, type);
        }
        return method;
      };
      var algorithms = [{ name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod }, { name: "sha3", padding: PADDING, bits: BITS, createMethod }, { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod }];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
        }
      }
      function Keccak(bits2, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        var notString = typeof message !== "string";
        if (notString && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
        var length = message.length, blocks = this.blocks, byteCount = this.byteCount, blockCount = this.blockCount, index2 = 0, s2 = this.s, i2, code;
        while (index2 < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index2 < length && i2 < byteCount; ++index2) {
              blocks[i2 >> 2] |= message[index2] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index2 < length && i2 < byteCount; ++index2) {
              code = message.charCodeAt(index2);
              if (code < 128) {
                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index2) & 1023);
                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s2[i2] ^= blocks[i2];
            }
            f2(s2);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak.prototype.finalize = function() {
        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
        blocks[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks[i2] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s2[i2] ^= blocks[i2];
        }
        f2(s2);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var hex2 = "", block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            block = s2[i2];
            hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f2(s2);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s2[i2];
          if (extraBytes > 0) {
            hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          }
          if (extraBytes > 1) {
            hex2 += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex2 += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex2;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            array[j2] = s2[i2];
          }
          if (j2 % blockCount === 0) {
            f2(s2);
          }
        }
        if (extraBytes) {
          array[i2] = s2[i2];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var array = [], offset, block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            offset = j2 << 2;
            block = s2[i2];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f2(s2);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s2[i2];
          if (extraBytes > 0) {
            array[offset] = block & 255;
          }
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      var f2 = function(s2) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
          c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
          c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
          c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
          c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
          c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
          c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
          c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
          c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
          c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s2[0] ^= h;
          s2[1] ^= l;
          s2[10] ^= h;
          s2[11] ^= l;
          s2[20] ^= h;
          s2[21] ^= l;
          s2[30] ^= h;
          s2[31] ^= l;
          s2[40] ^= h;
          s2[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s2[2] ^= h;
          s2[3] ^= l;
          s2[12] ^= h;
          s2[13] ^= l;
          s2[22] ^= h;
          s2[23] ^= l;
          s2[32] ^= h;
          s2[33] ^= l;
          s2[42] ^= h;
          s2[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s2[4] ^= h;
          s2[5] ^= l;
          s2[14] ^= h;
          s2[15] ^= l;
          s2[24] ^= h;
          s2[25] ^= l;
          s2[34] ^= h;
          s2[35] ^= l;
          s2[44] ^= h;
          s2[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s2[6] ^= h;
          s2[7] ^= l;
          s2[16] ^= h;
          s2[17] ^= l;
          s2[26] ^= h;
          s2[27] ^= l;
          s2[36] ^= h;
          s2[37] ^= l;
          s2[46] ^= h;
          s2[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s2[8] ^= h;
          s2[9] ^= l;
          s2[18] ^= h;
          s2[19] ^= l;
          s2[28] ^= h;
          s2[29] ^= l;
          s2[38] ^= h;
          s2[39] ^= l;
          s2[48] ^= h;
          s2[49] ^= l;
          b0 = s2[0];
          b1 = s2[1];
          b32 = s2[11] << 4 | s2[10] >>> 28;
          b33 = s2[10] << 4 | s2[11] >>> 28;
          b14 = s2[20] << 3 | s2[21] >>> 29;
          b15 = s2[21] << 3 | s2[20] >>> 29;
          b46 = s2[31] << 9 | s2[30] >>> 23;
          b47 = s2[30] << 9 | s2[31] >>> 23;
          b28 = s2[40] << 18 | s2[41] >>> 14;
          b29 = s2[41] << 18 | s2[40] >>> 14;
          b20 = s2[2] << 1 | s2[3] >>> 31;
          b21 = s2[3] << 1 | s2[2] >>> 31;
          b2 = s2[13] << 12 | s2[12] >>> 20;
          b3 = s2[12] << 12 | s2[13] >>> 20;
          b34 = s2[22] << 10 | s2[23] >>> 22;
          b35 = s2[23] << 10 | s2[22] >>> 22;
          b16 = s2[33] << 13 | s2[32] >>> 19;
          b17 = s2[32] << 13 | s2[33] >>> 19;
          b48 = s2[42] << 2 | s2[43] >>> 30;
          b49 = s2[43] << 2 | s2[42] >>> 30;
          b40 = s2[5] << 30 | s2[4] >>> 2;
          b41 = s2[4] << 30 | s2[5] >>> 2;
          b22 = s2[14] << 6 | s2[15] >>> 26;
          b23 = s2[15] << 6 | s2[14] >>> 26;
          b4 = s2[25] << 11 | s2[24] >>> 21;
          b5 = s2[24] << 11 | s2[25] >>> 21;
          b36 = s2[34] << 15 | s2[35] >>> 17;
          b37 = s2[35] << 15 | s2[34] >>> 17;
          b18 = s2[45] << 29 | s2[44] >>> 3;
          b19 = s2[44] << 29 | s2[45] >>> 3;
          b10 = s2[6] << 28 | s2[7] >>> 4;
          b11 = s2[7] << 28 | s2[6] >>> 4;
          b42 = s2[17] << 23 | s2[16] >>> 9;
          b43 = s2[16] << 23 | s2[17] >>> 9;
          b24 = s2[26] << 25 | s2[27] >>> 7;
          b25 = s2[27] << 25 | s2[26] >>> 7;
          b6 = s2[36] << 21 | s2[37] >>> 11;
          b7 = s2[37] << 21 | s2[36] >>> 11;
          b38 = s2[47] << 24 | s2[46] >>> 8;
          b39 = s2[46] << 24 | s2[47] >>> 8;
          b30 = s2[8] << 27 | s2[9] >>> 5;
          b31 = s2[9] << 27 | s2[8] >>> 5;
          b12 = s2[18] << 20 | s2[19] >>> 12;
          b13 = s2[19] << 20 | s2[18] >>> 12;
          b44 = s2[29] << 7 | s2[28] >>> 25;
          b45 = s2[28] << 7 | s2[29] >>> 25;
          b26 = s2[38] << 8 | s2[39] >>> 24;
          b27 = s2[39] << 8 | s2[38] >>> 24;
          b8 = s2[48] << 14 | s2[49] >>> 18;
          b9 = s2[49] << 14 | s2[48] >>> 18;
          s2[0] = b0 ^ ~b2 & b4;
          s2[1] = b1 ^ ~b3 & b5;
          s2[10] = b10 ^ ~b12 & b14;
          s2[11] = b11 ^ ~b13 & b15;
          s2[20] = b20 ^ ~b22 & b24;
          s2[21] = b21 ^ ~b23 & b25;
          s2[30] = b30 ^ ~b32 & b34;
          s2[31] = b31 ^ ~b33 & b35;
          s2[40] = b40 ^ ~b42 & b44;
          s2[41] = b41 ^ ~b43 & b45;
          s2[2] = b2 ^ ~b4 & b6;
          s2[3] = b3 ^ ~b5 & b7;
          s2[12] = b12 ^ ~b14 & b16;
          s2[13] = b13 ^ ~b15 & b17;
          s2[22] = b22 ^ ~b24 & b26;
          s2[23] = b23 ^ ~b25 & b27;
          s2[32] = b32 ^ ~b34 & b36;
          s2[33] = b33 ^ ~b35 & b37;
          s2[42] = b42 ^ ~b44 & b46;
          s2[43] = b43 ^ ~b45 & b47;
          s2[4] = b4 ^ ~b6 & b8;
          s2[5] = b5 ^ ~b7 & b9;
          s2[14] = b14 ^ ~b16 & b18;
          s2[15] = b15 ^ ~b17 & b19;
          s2[24] = b24 ^ ~b26 & b28;
          s2[25] = b25 ^ ~b27 & b29;
          s2[34] = b34 ^ ~b36 & b38;
          s2[35] = b35 ^ ~b37 & b39;
          s2[44] = b44 ^ ~b46 & b48;
          s2[45] = b45 ^ ~b47 & b49;
          s2[6] = b6 ^ ~b8 & b0;
          s2[7] = b7 ^ ~b9 & b1;
          s2[16] = b16 ^ ~b18 & b10;
          s2[17] = b17 ^ ~b19 & b11;
          s2[26] = b26 ^ ~b28 & b20;
          s2[27] = b27 ^ ~b29 & b21;
          s2[36] = b36 ^ ~b38 & b30;
          s2[37] = b37 ^ ~b39 & b31;
          s2[46] = b46 ^ ~b48 & b40;
          s2[47] = b47 ^ ~b49 & b41;
          s2[8] = b8 ^ ~b0 & b2;
          s2[9] = b9 ^ ~b1 & b3;
          s2[18] = b18 ^ ~b10 & b12;
          s2[19] = b19 ^ ~b11 & b13;
          s2[28] = b28 ^ ~b20 & b22;
          s2[29] = b29 ^ ~b21 & b23;
          s2[38] = b38 ^ ~b30 & b32;
          s2[39] = b39 ^ ~b31 & b33;
          s2[48] = b48 ^ ~b40 & b42;
          s2[49] = b49 ^ ~b41 & b43;
          s2[0] ^= RC[n];
          s2[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (var i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
  });
  function keccak256(data2) {
    return "0x" + sha3.keccak_256(arrayify(data2));
  }
  var version$5 = "rlp/5.1.0";
  var logger$6 = new Logger(version$5);
  function arrayifyInteger(value) {
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value >>= 8;
    }
    return result;
  }
  function unarrayifyInteger(data2, offset, length) {
    let result = 0;
    for (let i = 0; i < length; i++) {
      result = result * 256 + data2[offset + i];
    }
    return result;
  }
  function _encode(object) {
    if (Array.isArray(object)) {
      let payload = [];
      object.forEach(function(child) {
        payload = payload.concat(_encode(child));
      });
      if (payload.length <= 55) {
        payload.unshift(192 + payload.length);
        return payload;
      }
      const length2 = arrayifyInteger(payload.length);
      length2.unshift(247 + length2.length);
      return length2.concat(payload);
    }
    if (!isBytesLike(object)) {
      logger$6.throwArgumentError("RLP object must be BytesLike", "object", object);
    }
    const data2 = Array.prototype.slice.call(arrayify(object));
    if (data2.length === 1 && data2[0] <= 127) {
      return data2;
    } else if (data2.length <= 55) {
      data2.unshift(128 + data2.length);
      return data2;
    }
    const length = arrayifyInteger(data2.length);
    length.unshift(183 + length.length);
    return length.concat(data2);
  }
  function encode(object) {
    return hexlify(_encode(object));
  }
  function _decodeChildren(data2, offset, childOffset, length) {
    const result = [];
    while (childOffset < offset + 1 + length) {
      const decoded = _decode(data2, childOffset);
      result.push(decoded.result);
      childOffset += decoded.consumed;
      if (childOffset > offset + 1 + length) {
        logger$6.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
      }
    }
    return { consumed: 1 + length, result };
  }
  function _decode(data2, offset) {
    if (data2.length === 0) {
      logger$6.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    if (data2[offset] >= 248) {
      const lengthLength = data2[offset] - 247;
      if (offset + 1 + lengthLength > data2.length) {
        logger$6.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const length = unarrayifyInteger(data2, offset + 1, lengthLength);
      if (offset + 1 + lengthLength + length > data2.length) {
        logger$6.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      return _decodeChildren(data2, offset, offset + 1 + lengthLength, lengthLength + length);
    } else if (data2[offset] >= 192) {
      const length = data2[offset] - 192;
      if (offset + 1 + length > data2.length) {
        logger$6.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      return _decodeChildren(data2, offset, offset + 1, length);
    } else if (data2[offset] >= 184) {
      const lengthLength = data2[offset] - 183;
      if (offset + 1 + lengthLength > data2.length) {
        logger$6.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const length = unarrayifyInteger(data2, offset + 1, lengthLength);
      if (offset + 1 + lengthLength + length > data2.length) {
        logger$6.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const result = hexlify(data2.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
      return { consumed: 1 + lengthLength + length, result };
    } else if (data2[offset] >= 128) {
      const length = data2[offset] - 128;
      if (offset + 1 + length > data2.length) {
        logger$6.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const result = hexlify(data2.slice(offset + 1, offset + 1 + length));
      return { consumed: 1 + length, result };
    }
    return { consumed: 1, result: hexlify(data2[offset]) };
  }
  function decode(data2) {
    const bytes = arrayify(data2);
    const decoded = _decode(bytes, 0);
    if (decoded.consumed !== bytes.length) {
      logger$6.throwArgumentError("invalid rlp data", "data", data2);
    }
    return decoded.result;
  }
  var index = Object.freeze({ __proto__: null, encode, decode });
  var version$6 = "address/5.1.0";
  var logger$7 = new Logger(version$6);
  function getChecksumAddress(address) {
    if (!isHexString(address, 20)) {
      logger$7.throwArgumentError("invalid address", "address", address);
    }
    address = address.toLowerCase();
    const chars = address.substring(2).split("");
    const expanded = new Uint8Array(40);
    for (let i = 0; i < 40; i++) {
      expanded[i] = chars[i].charCodeAt(0);
    }
    const hashed = arrayify(keccak256(expanded));
    for (let i = 0; i < 40; i += 2) {
      if (hashed[i >> 1] >> 4 >= 8) {
        chars[i] = chars[i].toUpperCase();
      }
      if ((hashed[i >> 1] & 15) >= 8) {
        chars[i + 1] = chars[i + 1].toUpperCase();
      }
    }
    return "0x" + chars.join("");
  }
  var MAX_SAFE_INTEGER = 9007199254740991;
  function log10(x) {
    if (Math.log10) {
      return Math.log10(x);
    }
    return Math.log(x) / Math.LN10;
  }
  var ibanLookup = {};
  for (let i = 0; i < 10; i++) {
    ibanLookup[String(i)] = String(i);
  }
  for (let i = 0; i < 26; i++) {
    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
  }
  var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  function ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + "00";
    let expanded = address.split("").map((c) => {
      return ibanLookup[c];
    }).join("");
    while (expanded.length >= safeDigits) {
      let block = expanded.substring(0, safeDigits);
      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum = String(98 - parseInt(expanded, 10) % 97);
    while (checksum.length < 2) {
      checksum = "0" + checksum;
    }
    return checksum;
  }
  function getAddress(address) {
    let result = null;
    if (typeof address !== "string") {
      logger$7.throwArgumentError("invalid address", "address", address);
    }
    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
      if (address.substring(0, 2) !== "0x") {
        address = "0x" + address;
      }
      result = getChecksumAddress(address);
      if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
        logger$7.throwArgumentError("bad address checksum", "address", address);
      }
    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
      if (address.substring(2, 4) !== ibanChecksum(address)) {
        logger$7.throwArgumentError("bad icap checksum", "address", address);
      }
      result = _base36To16(address.substring(4));
      while (result.length < 40) {
        result = "0" + result;
      }
      result = getChecksumAddress("0x" + result);
    } else {
      logger$7.throwArgumentError("invalid address", "address", address);
    }
    return result;
  }
  function isAddress(address) {
    try {
      getAddress(address);
      return true;
    } catch (error) {
    }
    return false;
  }
  function getIcapAddress(address) {
    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
    while (base36.length < 30) {
      base36 = "0" + base36;
    }
    return "XE" + ibanChecksum("XE00" + base36) + base36;
  }
  function getContractAddress(transaction) {
    let from = null;
    try {
      from = getAddress(transaction.from);
    } catch (error) {
      logger$7.throwArgumentError("missing from address", "transaction", transaction);
    }
    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
    return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));
  }
  function getCreate2Address(from, salt, initCodeHash) {
    if (hexDataLength(salt) !== 32) {
      logger$7.throwArgumentError("salt must be 32 bytes", "salt", salt);
    }
    if (hexDataLength(initCodeHash) !== 32) {
      logger$7.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
    }
    return getAddress(hexDataSlice(keccak256(concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
  }
  var AddressCoder = class extends Coder {
    constructor(localName) {
      super("address", "address", localName, false);
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, value) {
      try {
        getAddress(value);
      } catch (error) {
        this._throwError(error.message, value);
      }
      return writer.writeValue(value);
    }
    decode(reader) {
      return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
    }
  };
  var AnonymousCoder = class extends Coder {
    constructor(coder) {
      super(coder.name, coder.type, void 0, coder.dynamic);
      this.coder = coder;
    }
    defaultValue() {
      return this.coder.defaultValue();
    }
    encode(writer, value) {
      return this.coder.encode(writer, value);
    }
    decode(reader) {
      return this.coder.decode(reader);
    }
  };
  var logger$8 = new Logger(version$4);
  function pack(writer, coders, values) {
    let arrayValues = null;
    if (Array.isArray(values)) {
      arrayValues = values;
    } else if (values && typeof values === "object") {
      let unique = {};
      arrayValues = coders.map((coder) => {
        const name2 = coder.localName;
        if (!name2) {
          logger$8.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, { argument: "values", coder, value: values });
        }
        if (unique[name2]) {
          logger$8.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, { argument: "values", coder, value: values });
        }
        unique[name2] = true;
        return values[name2];
      });
    } else {
      logger$8.throwArgumentError("invalid tuple value", "tuple", values);
    }
    if (coders.length !== arrayValues.length) {
      logger$8.throwArgumentError("types/value length mismatch", "tuple", values);
    }
    let staticWriter = new Writer(writer.wordSize);
    let dynamicWriter = new Writer(writer.wordSize);
    let updateFuncs = [];
    coders.forEach((coder, index2) => {
      let value = arrayValues[index2];
      if (coder.dynamic) {
        let dynamicOffset = dynamicWriter.length;
        coder.encode(dynamicWriter, value);
        let updateFunc = staticWriter.writeUpdatableValue();
        updateFuncs.push((baseOffset) => {
          updateFunc(baseOffset + dynamicOffset);
        });
      } else {
        coder.encode(staticWriter, value);
      }
    });
    updateFuncs.forEach((func) => {
      func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
  }
  function unpack(reader, coders) {
    let values = [];
    let baseReader = reader.subReader(0);
    coders.forEach((coder) => {
      let value = null;
      if (coder.dynamic) {
        let offset = reader.readValue();
        let offsetReader = baseReader.subReader(offset.toNumber());
        try {
          value = coder.decode(offsetReader);
        } catch (error) {
          if (error.code === Logger.errors.BUFFER_OVERRUN) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      } else {
        try {
          value = coder.decode(reader);
        } catch (error) {
          if (error.code === Logger.errors.BUFFER_OVERRUN) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      }
      if (value != void 0) {
        values.push(value);
      }
    });
    const uniqueNames = coders.reduce((accum, coder) => {
      const name2 = coder.localName;
      if (name2) {
        if (!accum[name2]) {
          accum[name2] = 0;
        }
        accum[name2]++;
      }
      return accum;
    }, {});
    coders.forEach((coder, index2) => {
      let name2 = coder.localName;
      if (!name2 || uniqueNames[name2] !== 1) {
        return;
      }
      if (name2 === "length") {
        name2 = "_length";
      }
      if (values[name2] != null) {
        return;
      }
      const value = values[index2];
      if (value instanceof Error) {
        Object.defineProperty(values, name2, { get: () => {
          throw value;
        } });
      } else {
        values[name2] = value;
      }
    });
    for (let i = 0; i < values.length; i++) {
      const value = values[i];
      if (value instanceof Error) {
        Object.defineProperty(values, i, { get: () => {
          throw value;
        } });
      }
    }
    return Object.freeze(values);
  }
  var ArrayCoder = class extends Coder {
    constructor(coder, length, localName) {
      const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
      const dynamic = length === -1 || coder.dynamic;
      super("array", type, localName, dynamic);
      this.coder = coder;
      this.length = length;
    }
    defaultValue() {
      const defaultChild = this.coder.defaultValue();
      const result = [];
      for (let i = 0; i < this.length; i++) {
        result.push(defaultChild);
      }
      return result;
    }
    encode(writer, value) {
      if (!Array.isArray(value)) {
        this._throwError("expected array value", value);
      }
      let count = this.length;
      if (count === -1) {
        count = value.length;
        writer.writeValue(value.length);
      }
      logger$8.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
      let coders = [];
      for (let i = 0; i < value.length; i++) {
        coders.push(this.coder);
      }
      return pack(writer, coders, value);
    }
    decode(reader) {
      let count = this.length;
      if (count === -1) {
        count = reader.readValue().toNumber();
        if (count * 32 > reader._data.length) {
          logger$8.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, { length: reader._data.length, count });
        }
      }
      let coders = [];
      for (let i = 0; i < count; i++) {
        coders.push(new AnonymousCoder(this.coder));
      }
      return reader.coerce(this.name, unpack(reader, coders));
    }
  };
  var BooleanCoder = class extends Coder {
    constructor(localName) {
      super("bool", "bool", localName, false);
    }
    defaultValue() {
      return false;
    }
    encode(writer, value) {
      return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
      return reader.coerce(this.type, !reader.readValue().isZero());
    }
  };
  var DynamicBytesCoder = class extends Coder {
    constructor(type, localName) {
      super(type, type, localName, true);
    }
    defaultValue() {
      return "0x";
    }
    encode(writer, value) {
      value = arrayify(value);
      let length = writer.writeValue(value.length);
      length += writer.writeBytes(value);
      return length;
    }
    decode(reader) {
      return reader.readBytes(reader.readValue().toNumber(), true);
    }
  };
  var BytesCoder = class extends DynamicBytesCoder {
    constructor(localName) {
      super("bytes", localName);
    }
    decode(reader) {
      return reader.coerce(this.name, hexlify(super.decode(reader)));
    }
  };
  var FixedBytesCoder = class extends Coder {
    constructor(size, localName) {
      let name2 = "bytes" + String(size);
      super(name2, name2, localName, false);
      this.size = size;
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
    encode(writer, value) {
      let data2 = arrayify(value);
      if (data2.length !== this.size) {
        this._throwError("incorrect data length", value);
      }
      return writer.writeBytes(data2);
    }
    decode(reader) {
      return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
    }
  };
  var NullCoder = class extends Coder {
    constructor(localName) {
      super("null", "", localName, false);
    }
    defaultValue() {
      return null;
    }
    encode(writer, value) {
      if (value != null) {
        this._throwError("not null", value);
      }
      return writer.writeBytes([]);
    }
    decode(reader) {
      reader.readBytes(0);
      return reader.coerce(this.name, null);
    }
  };
  var AddressZero = "0x0000000000000000000000000000000000000000";
  var NegativeOne$1 = BigNumber.from(-1);
  var Zero$1 = BigNumber.from(0);
  var One = BigNumber.from(1);
  var Two = BigNumber.from(2);
  var WeiPerEther = BigNumber.from("1000000000000000000");
  var MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  var HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
  var EtherSymbol = "\u039E";
  var index$1 = Object.freeze({ __proto__: null, AddressZero, NegativeOne: NegativeOne$1, Zero: Zero$1, One, Two, WeiPerEther, MaxUint256, HashZero, EtherSymbol });
  var NumberCoder = class extends Coder {
    constructor(size, signed, localName) {
      const name2 = (signed ? "int" : "uint") + size * 8;
      super(name2, name2, localName, false);
      this.size = size;
      this.signed = signed;
    }
    defaultValue() {
      return 0;
    }
    encode(writer, value) {
      let v = BigNumber.from(value);
      let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
      if (this.signed) {
        let bounds = maxUintValue.mask(this.size * 8 - 1);
        if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne$1))) {
          this._throwError("value out-of-bounds", value);
        }
      } else if (v.lt(Zero$1) || v.gt(maxUintValue.mask(this.size * 8))) {
        this._throwError("value out-of-bounds", value);
      }
      v = v.toTwos(this.size * 8).mask(this.size * 8);
      if (this.signed) {
        v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
      }
      return writer.writeValue(v);
    }
    decode(reader) {
      let value = reader.readValue().mask(this.size * 8);
      if (this.signed) {
        value = value.fromTwos(this.size * 8);
      }
      return reader.coerce(this.name, value);
    }
  };
  var version$7 = "strings/5.1.0";
  var logger$9 = new Logger(version$7);
  var UnicodeNormalizationForm;
  (function(UnicodeNormalizationForm2) {
    UnicodeNormalizationForm2["current"] = "";
    UnicodeNormalizationForm2["NFC"] = "NFC";
    UnicodeNormalizationForm2["NFD"] = "NFD";
    UnicodeNormalizationForm2["NFKC"] = "NFKC";
    UnicodeNormalizationForm2["NFKD"] = "NFKD";
  })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
  var Utf8ErrorReason;
  (function(Utf8ErrorReason2) {
    Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
    Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
    Utf8ErrorReason2["OVERRUN"] = "string overrun";
    Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
    Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
    Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
    Utf8ErrorReason2["OVERLONG"] = "overlong representation";
  })(Utf8ErrorReason || (Utf8ErrorReason = {}));
  function errorFunc(reason, offset, bytes, output, badCodepoint) {
    return logger$9.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
  }
  function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
      let i = 0;
      for (let o = offset + 1; o < bytes.length; o++) {
        if (bytes[o] >> 6 !== 2) {
          break;
        }
        i++;
      }
      return i;
    }
    if (reason === Utf8ErrorReason.OVERRUN) {
      return bytes.length - offset - 1;
    }
    return 0;
  }
  function replaceFunc(reason, offset, bytes, output, badCodepoint) {
    if (reason === Utf8ErrorReason.OVERLONG) {
      output.push(badCodepoint);
      return 0;
    }
    output.push(65533);
    return ignoreFunc(reason, offset, bytes, output, badCodepoint);
  }
  var Utf8ErrorFuncs = Object.freeze({ error: errorFunc, ignore: ignoreFunc, replace: replaceFunc });
  function getUtf8CodePoints(bytes, onError) {
    if (onError == null) {
      onError = Utf8ErrorFuncs.error;
    }
    bytes = arrayify(bytes);
    const result = [];
    let i = 0;
    while (i < bytes.length) {
      const c = bytes[i++];
      if (c >> 7 === 0) {
        result.push(c);
        continue;
      }
      let extraLength = null;
      let overlongMask = null;
      if ((c & 224) === 192) {
        extraLength = 1;
        overlongMask = 127;
      } else if ((c & 240) === 224) {
        extraLength = 2;
        overlongMask = 2047;
      } else if ((c & 248) === 240) {
        extraLength = 3;
        overlongMask = 65535;
      } else {
        if ((c & 192) === 128) {
          i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
        } else {
          i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
        }
        continue;
      }
      if (i - 1 + extraLength >= bytes.length) {
        i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
        continue;
      }
      let res = c & (1 << 8 - extraLength - 1) - 1;
      for (let j = 0; j < extraLength; j++) {
        let nextChar = bytes[i];
        if ((nextChar & 192) != 128) {
          i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
          res = null;
          break;
        }
        res = res << 6 | nextChar & 63;
        i++;
      }
      if (res === null) {
        continue;
      }
      if (res > 1114111) {
        i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
        continue;
      }
      if (res >= 55296 && res <= 57343) {
        i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
        continue;
      }
      if (res <= overlongMask) {
        i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
        continue;
      }
      result.push(res);
    }
    return result;
  }
  function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
    if (form != UnicodeNormalizationForm.current) {
      logger$9.checkNormalize();
      str = str.normalize(form);
    }
    let result = [];
    for (let i = 0; i < str.length; i++) {
      const c = str.charCodeAt(i);
      if (c < 128) {
        result.push(c);
      } else if (c < 2048) {
        result.push(c >> 6 | 192);
        result.push(c & 63 | 128);
      } else if ((c & 64512) == 55296) {
        i++;
        const c2 = str.charCodeAt(i);
        if (i >= str.length || (c2 & 64512) !== 56320) {
          throw new Error("invalid utf-8 string");
        }
        const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
        result.push(pair >> 18 | 240);
        result.push(pair >> 12 & 63 | 128);
        result.push(pair >> 6 & 63 | 128);
        result.push(pair & 63 | 128);
      } else {
        result.push(c >> 12 | 224);
        result.push(c >> 6 & 63 | 128);
        result.push(c & 63 | 128);
      }
    }
    return arrayify(result);
  }
  function escapeChar(value) {
    const hex2 = "0000" + value.toString(16);
    return "\\u" + hex2.substring(hex2.length - 4);
  }
  function _toEscapedUtf8String(bytes, onError) {
    return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
      if (codePoint < 256) {
        switch (codePoint) {
          case 8:
            return "\\b";
          case 9:
            return "\\t";
          case 10:
            return "\\n";
          case 13:
            return "\\r";
          case 34:
            return '\\"';
          case 92:
            return "\\\\";
        }
        if (codePoint >= 32 && codePoint < 127) {
          return String.fromCharCode(codePoint);
        }
      }
      if (codePoint <= 65535) {
        return escapeChar(codePoint);
      }
      codePoint -= 65536;
      return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);
    }).join("") + '"';
  }
  function _toUtf8String(codePoints) {
    return codePoints.map((codePoint) => {
      if (codePoint <= 65535) {
        return String.fromCharCode(codePoint);
      }
      codePoint -= 65536;
      return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
    }).join("");
  }
  function toUtf8String(bytes, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes, onError));
  }
  function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
    return getUtf8CodePoints(toUtf8Bytes(str, form));
  }
  function formatBytes32String(text) {
    const bytes = toUtf8Bytes(text);
    if (bytes.length > 31) {
      throw new Error("bytes32 string must be less than 32 bytes");
    }
    return hexlify(concat([bytes, HashZero]).slice(0, 32));
  }
  function parseBytes32String(bytes) {
    const data2 = arrayify(bytes);
    if (data2.length !== 32) {
      throw new Error("invalid bytes32 - not 32 bytes long");
    }
    if (data2[31] !== 0) {
      throw new Error("invalid bytes32 string - no null terminator");
    }
    let length = 31;
    while (data2[length - 1] === 0) {
      length--;
    }
    return toUtf8String(data2.slice(0, length));
  }
  function bytes2(data2) {
    if (data2.length % 4 !== 0) {
      throw new Error("bad data");
    }
    let result = [];
    for (let i = 0; i < data2.length; i += 4) {
      result.push(parseInt(data2.substring(i, i + 4), 16));
    }
    return result;
  }
  function createTable(data2, func) {
    if (!func) {
      func = function(value) {
        return [parseInt(value, 16)];
      };
    }
    let lo = 0;
    let result = {};
    data2.split(",").forEach((pair) => {
      let comps = pair.split(":");
      lo += parseInt(comps[0], 16);
      result[lo] = func(comps[1]);
    });
    return result;
  }
  function createRangeTable(data2) {
    let hi = 0;
    return data2.split(",").map((v) => {
      let comps = v.split("-");
      if (comps.length === 1) {
        comps[1] = "0";
      } else if (comps[1] === "") {
        comps[1] = "1";
      }
      let lo = hi + parseInt(comps[0], 16);
      hi = parseInt(comps[1], 16);
      return { l: lo, h: hi };
    });
  }
  function matchMap(value, ranges) {
    let lo = 0;
    for (let i = 0; i < ranges.length; i++) {
      let range2 = ranges[i];
      lo += range2.l;
      if (value >= lo && value <= lo + range2.h && (value - lo) % (range2.d || 1) === 0) {
        if (range2.e && range2.e.indexOf(value - lo) !== -1) {
          continue;
        }
        return range2;
      }
    }
    return null;
  }
  var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
  var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
  var Table_B_2_ranges = [{ h: 25, s: 32, l: 65 }, { h: 30, s: 32, e: [23], l: 127 }, { h: 54, s: 1, e: [48], l: 64, d: 2 }, { h: 14, s: 1, l: 57, d: 2 }, { h: 44, s: 1, l: 17, d: 2 }, { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 }, { h: 16, s: 1, l: 68, d: 2 }, { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 }, { h: 26, s: 32, e: [17], l: 435 }, { h: 22, s: 1, l: 71, d: 2 }, { h: 15, s: 80, l: 40 }, { h: 31, s: 32, l: 16 }, { h: 32, s: 1, l: 80, d: 2 }, { h: 52, s: 1, l: 42, d: 2 }, { h: 12, s: 1, l: 55, d: 2 }, { h: 40, s: 1, e: [38], l: 15, d: 2 }, { h: 14, s: 1, l: 48, d: 2 }, { h: 37, s: 48, l: 49 }, { h: 148, s: 1, l: 6351, d: 2 }, { h: 88, s: 1, l: 160, d: 2 }, { h: 15, s: 16, l: 704 }, { h: 25, s: 26, l: 854 }, { h: 25, s: 32, l: 55915 }, { h: 37, s: 40, l: 1247 }, { h: 25, s: -119711, l: 53248 }, { h: 25, s: -119763, l: 52 }, { h: 25, s: -119815, l: 52 }, { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 }, { h: 25, s: -119919, l: 52 }, { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 }, { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 }, { h: 25, s: -120075, l: 52 }, { h: 25, s: -120127, l: 52 }, { h: 25, s: -120179, l: 52 }, { h: 25, s: -120231, l: 52 }, { h: 25, s: -120283, l: 52 }, { h: 25, s: -120335, l: 52 }, { h: 24, s: -119543, e: [17], l: 56 }, { h: 24, s: -119601, e: [17], l: 58 }, { h: 24, s: -119659, e: [17], l: 58 }, { h: 24, s: -119717, e: [17], l: 58 }, { h: 24, s: -119775, e: [17], l: 58 }];
  var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
  var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
  var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
  var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
  function flatten(values) {
    return values.reduce((accum, value) => {
      value.forEach((value2) => {
        accum.push(value2);
      });
      return accum;
    }, []);
  }
  function _nameprepTableA1(codepoint) {
    return !!matchMap(codepoint, Table_A_1_ranges);
  }
  function _nameprepTableB2(codepoint) {
    let range2 = matchMap(codepoint, Table_B_2_ranges);
    if (range2) {
      return [codepoint + range2.s];
    }
    let codes2 = Table_B_2_lut_abs[codepoint];
    if (codes2) {
      return codes2;
    }
    let shift = Table_B_2_lut_rel[codepoint];
    if (shift) {
      return [codepoint + shift[0]];
    }
    let complex = Table_B_2_complex[codepoint];
    if (complex) {
      return complex;
    }
    return null;
  }
  function _nameprepTableC(codepoint) {
    return !!matchMap(codepoint, Table_C_ranges);
  }
  function nameprep(value) {
    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
      return value.toLowerCase();
    }
    let codes2 = toUtf8CodePoints(value);
    codes2 = flatten(codes2.map((code) => {
      if (Table_B_1_flags.indexOf(code) >= 0) {
        return [];
      }
      if (code >= 65024 && code <= 65039) {
        return [];
      }
      let codesTableB2 = _nameprepTableB2(code);
      if (codesTableB2) {
        return codesTableB2;
      }
      return [code];
    }));
    codes2 = toUtf8CodePoints(_toUtf8String(codes2), UnicodeNormalizationForm.NFKC);
    codes2.forEach((code) => {
      if (_nameprepTableC(code)) {
        throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
      }
    });
    codes2.forEach((code) => {
      if (_nameprepTableA1(code)) {
        throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
      }
    });
    let name2 = _toUtf8String(codes2);
    if (name2.substring(0, 1) === "-" || name2.substring(2, 4) === "--" || name2.substring(name2.length - 1) === "-") {
      throw new Error("invalid hyphen");
    }
    if (name2.length > 63) {
      throw new Error("too long");
    }
    return name2;
  }
  var StringCoder = class extends DynamicBytesCoder {
    constructor(localName) {
      super("string", localName);
    }
    defaultValue() {
      return "";
    }
    encode(writer, value) {
      return super.encode(writer, toUtf8Bytes(value));
    }
    decode(reader) {
      return toUtf8String(super.decode(reader));
    }
  };
  var TupleCoder = class extends Coder {
    constructor(coders, localName) {
      let dynamic = false;
      const types = [];
      coders.forEach((coder) => {
        if (coder.dynamic) {
          dynamic = true;
        }
        types.push(coder.type);
      });
      const type = "tuple(" + types.join(",") + ")";
      super("tuple", type, localName, dynamic);
      this.coders = coders;
    }
    defaultValue() {
      const values = [];
      this.coders.forEach((coder) => {
        values.push(coder.defaultValue());
      });
      const uniqueNames = this.coders.reduce((accum, coder) => {
        const name2 = coder.localName;
        if (name2) {
          if (!accum[name2]) {
            accum[name2] = 0;
          }
          accum[name2]++;
        }
        return accum;
      }, {});
      this.coders.forEach((coder, index2) => {
        let name2 = coder.localName;
        if (!name2 || uniqueNames[name2] !== 1) {
          return;
        }
        if (name2 === "length") {
          name2 = "_length";
        }
        if (values[name2] != null) {
          return;
        }
        values[name2] = values[index2];
      });
      return Object.freeze(values);
    }
    encode(writer, value) {
      return pack(writer, this.coders, value);
    }
    decode(reader) {
      return reader.coerce(this.name, unpack(reader, this.coders));
    }
  };
  var logger$a = new Logger(version$4);
  var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
  var AbiCoder = class {
    constructor(coerceFunc) {
      logger$a.checkNew(new.target, AbiCoder);
      defineReadOnly(this, "coerceFunc", coerceFunc || null);
    }
    _getCoder(param) {
      switch (param.baseType) {
        case "address":
          return new AddressCoder(param.name);
        case "bool":
          return new BooleanCoder(param.name);
        case "string":
          return new StringCoder(param.name);
        case "bytes":
          return new BytesCoder(param.name);
        case "array":
          return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
        case "tuple":
          return new TupleCoder((param.components || []).map((component) => {
            return this._getCoder(component);
          }), param.name);
        case "":
          return new NullCoder(param.name);
      }
      let match = param.type.match(paramTypeNumber);
      if (match) {
        let size = parseInt(match[2] || "256");
        if (size === 0 || size > 256 || size % 8 !== 0) {
          logger$a.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
        }
        return new NumberCoder(size / 8, match[1] === "int", param.name);
      }
      match = param.type.match(paramTypeBytes);
      if (match) {
        let size = parseInt(match[1]);
        if (size === 0 || size > 32) {
          logger$a.throwArgumentError("invalid bytes length", "param", param);
        }
        return new FixedBytesCoder(size, param.name);
      }
      return logger$a.throwArgumentError("invalid type", "type", param.type);
    }
    _getWordSize() {
      return 32;
    }
    _getReader(data2, allowLoose) {
      return new Reader(data2, this._getWordSize(), this.coerceFunc, allowLoose);
    }
    _getWriter() {
      return new Writer(this._getWordSize());
    }
    getDefaultValue(types) {
      const coders = types.map((type) => this._getCoder(ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      return coder.defaultValue();
    }
    encode(types, values) {
      if (types.length !== values.length) {
        logger$a.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, { count: { types: types.length, values: values.length }, value: { types, values } });
      }
      const coders = types.map((type) => this._getCoder(ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      const writer = this._getWriter();
      coder.encode(writer, values);
      return writer.data;
    }
    decode(types, data2, loose) {
      const coders = types.map((type) => this._getCoder(ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      return coder.decode(this._getReader(arrayify(data2), loose));
    }
  };
  var defaultAbiCoder = new AbiCoder();
  function id(text) {
    return keccak256(toUtf8Bytes(text));
  }
  var version$8 = "hash/5.1.0";
  var logger$b = new Logger(version$8);
  var Zeros = new Uint8Array(32);
  Zeros.fill(0);
  var Partition = new RegExp("^((.*)\\.)?([^.]+)$");
  function isValidName(name2) {
    try {
      const comps = name2.split(".");
      for (let i = 0; i < comps.length; i++) {
        if (nameprep(comps[i]).length === 0) {
          throw new Error("empty");
        }
      }
      return true;
    } catch (error) {
    }
    return false;
  }
  function namehash(name2) {
    if (typeof name2 !== "string") {
      logger$b.throwArgumentError("invalid address - " + String(name2), "name", name2);
    }
    let result = Zeros;
    while (name2.length) {
      const partition = name2.match(Partition);
      const label = toUtf8Bytes(nameprep(partition[3]));
      result = keccak256(concat([result, keccak256(label)]));
      name2 = partition[2] || "";
    }
    return hexlify(result);
  }
  var messagePrefix = "Ethereum Signed Message:\n";
  function hashMessage(message) {
    if (typeof message === "string") {
      message = toUtf8Bytes(message);
    }
    return keccak256(concat([toUtf8Bytes(messagePrefix), toUtf8Bytes(String(message.length)), message]));
  }
  var __awaiter$1 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$c = new Logger(version$8);
  var padding = new Uint8Array(32);
  padding.fill(0);
  var NegativeOne$2 = BigNumber.from(-1);
  var Zero$2 = BigNumber.from(0);
  var One$1 = BigNumber.from(1);
  var MaxUint256$1 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  function hexPadRight(value) {
    const bytes = arrayify(value);
    const padOffset = bytes.length % 32;
    if (padOffset) {
      return hexConcat([bytes, padding.slice(padOffset)]);
    }
    return hexlify(bytes);
  }
  var hexTrue = hexZeroPad(One$1.toHexString(), 32);
  var hexFalse = hexZeroPad(Zero$2.toHexString(), 32);
  var domainFieldTypes = { name: "string", version: "string", chainId: "uint256", verifyingContract: "address", salt: "bytes32" };
  var domainFieldNames = ["name", "version", "chainId", "verifyingContract", "salt"];
  function checkString(key2) {
    return function(value) {
      if (typeof value !== "string") {
        logger$c.throwArgumentError(`invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value);
      }
      return value;
    };
  }
  var domainChecks = { name: checkString("name"), version: checkString("version"), chainId: function(value) {
    try {
      return BigNumber.from(value).toString();
    } catch (error) {
    }
    return logger$c.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
  }, verifyingContract: function(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {
    }
    return logger$c.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  }, salt: function(value) {
    try {
      const bytes = arrayify(value);
      if (bytes.length !== 32) {
        throw new Error("bad length");
      }
      return hexlify(bytes);
    } catch (error) {
    }
    return logger$c.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
  } };
  function getBaseEncoder(type) {
    {
      const match = type.match(/^(u?)int(\d*)$/);
      if (match) {
        const signed = match[1] === "";
        const width = parseInt(match[2] || "256");
        if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {
          logger$c.throwArgumentError("invalid numeric width", "type", type);
        }
        const boundsUpper = MaxUint256$1.mask(signed ? width - 1 : width);
        const boundsLower = signed ? boundsUpper.add(One$1).mul(NegativeOne$2) : Zero$2;
        return function(value) {
          const v = BigNumber.from(value);
          if (v.lt(boundsLower) || v.gt(boundsUpper)) {
            logger$c.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
          }
          return hexZeroPad(v.toTwos(256).toHexString(), 32);
        };
      }
    }
    {
      const match = type.match(/^bytes(\d+)$/);
      if (match) {
        const width = parseInt(match[1]);
        if (width === 0 || width > 32 || match[1] !== String(width)) {
          logger$c.throwArgumentError("invalid bytes width", "type", type);
        }
        return function(value) {
          const bytes = arrayify(value);
          if (bytes.length !== width) {
            logger$c.throwArgumentError(`invalid length for ${type}`, "value", value);
          }
          return hexPadRight(value);
        };
      }
    }
    switch (type) {
      case "address":
        return function(value) {
          return hexZeroPad(getAddress(value), 32);
        };
      case "bool":
        return function(value) {
          return !value ? hexFalse : hexTrue;
        };
      case "bytes":
        return function(value) {
          return keccak256(value);
        };
      case "string":
        return function(value) {
          return id(value);
        };
    }
    return null;
  }
  function encodeType(name2, fields) {
    return `${name2}(${fields.map(({ name: name3, type }) => type + " " + name3).join(",")})`;
  }
  var TypedDataEncoder = class {
    constructor(types) {
      defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
      defineReadOnly(this, "_encoderCache", {});
      defineReadOnly(this, "_types", {});
      const links = {};
      const parents = {};
      const subtypes = {};
      Object.keys(types).forEach((type) => {
        links[type] = {};
        parents[type] = [];
        subtypes[type] = {};
      });
      for (const name2 in types) {
        const uniqueNames = {};
        types[name2].forEach((field) => {
          if (uniqueNames[field.name]) {
            logger$c.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name2)}`, "types", types);
          }
          uniqueNames[field.name] = true;
          const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
          if (baseType === name2) {
            logger$c.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
          }
          const encoder = getBaseEncoder(baseType);
          if (encoder) {
            return;
          }
          if (!parents[baseType]) {
            logger$c.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
          }
          parents[baseType].push(name2);
          links[name2][baseType] = true;
        });
      }
      const primaryTypes = Object.keys(parents).filter((n) => parents[n].length === 0);
      if (primaryTypes.length === 0) {
        logger$c.throwArgumentError("missing primary type", "types", types);
      } else if (primaryTypes.length > 1) {
        logger$c.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", types);
      }
      defineReadOnly(this, "primaryType", primaryTypes[0]);
      function checkCircular(type, found) {
        if (found[type]) {
          logger$c.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
        }
        found[type] = true;
        Object.keys(links[type]).forEach((child) => {
          if (!parents[child]) {
            return;
          }
          checkCircular(child, found);
          Object.keys(found).forEach((subtype) => {
            subtypes[subtype][child] = true;
          });
        });
        delete found[type];
      }
      checkCircular(this.primaryType, {});
      for (const name2 in subtypes) {
        const st = Object.keys(subtypes[name2]);
        st.sort();
        this._types[name2] = encodeType(name2, types[name2]) + st.map((t) => encodeType(t, types[t])).join("");
      }
    }
    getEncoder(type) {
      let encoder = this._encoderCache[type];
      if (!encoder) {
        encoder = this._encoderCache[type] = this._getEncoder(type);
      }
      return encoder;
    }
    _getEncoder(type) {
      {
        const encoder = getBaseEncoder(type);
        if (encoder) {
          return encoder;
        }
      }
      const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
      if (match) {
        const subtype = match[1];
        const subEncoder = this.getEncoder(subtype);
        const length = parseInt(match[3]);
        return (value) => {
          if (length >= 0 && value.length !== length) {
            logger$c.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
          }
          let result = value.map(subEncoder);
          if (this._types[subtype]) {
            result = result.map(keccak256);
          }
          return keccak256(hexConcat(result));
        };
      }
      const fields = this.types[type];
      if (fields) {
        const encodedType = id(this._types[type]);
        return (value) => {
          const values = fields.map(({ name: name2, type: type2 }) => {
            const result = this.getEncoder(type2)(value[name2]);
            if (this._types[type2]) {
              return keccak256(result);
            }
            return result;
          });
          values.unshift(encodedType);
          return hexConcat(values);
        };
      }
      return logger$c.throwArgumentError(`unknown type: ${type}`, "type", type);
    }
    encodeType(name2) {
      const result = this._types[name2];
      if (!result) {
        logger$c.throwArgumentError(`unknown type: ${JSON.stringify(name2)}`, "name", name2);
      }
      return result;
    }
    encodeData(type, value) {
      return this.getEncoder(type)(value);
    }
    hashStruct(name2, value) {
      return keccak256(this.encodeData(name2, value));
    }
    encode(value) {
      return this.encodeData(this.primaryType, value);
    }
    hash(value) {
      return this.hashStruct(this.primaryType, value);
    }
    _visit(type, value, callback) {
      {
        const encoder = getBaseEncoder(type);
        if (encoder) {
          return callback(type, value);
        }
      }
      const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
      if (match) {
        const subtype = match[1];
        const length = parseInt(match[3]);
        if (length >= 0 && value.length !== length) {
          logger$c.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
        }
        return value.map((v) => this._visit(subtype, v, callback));
      }
      const fields = this.types[type];
      if (fields) {
        return fields.reduce((accum, { name: name2, type: type2 }) => {
          accum[name2] = this._visit(type2, value[name2], callback);
          return accum;
        }, {});
      }
      return logger$c.throwArgumentError(`unknown type: ${type}`, "type", type);
    }
    visit(value, callback) {
      return this._visit(this.primaryType, value, callback);
    }
    static from(types) {
      return new TypedDataEncoder(types);
    }
    static getPrimaryType(types) {
      return TypedDataEncoder.from(types).primaryType;
    }
    static hashStruct(name2, types, value) {
      return TypedDataEncoder.from(types).hashStruct(name2, value);
    }
    static hashDomain(domain) {
      const domainFields = [];
      for (const name2 in domain) {
        const type = domainFieldTypes[name2];
        if (!type) {
          logger$c.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name2)}`, "domain", domain);
        }
        domainFields.push({ name: name2, type });
      }
      domainFields.sort((a, b) => {
        return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
      });
      return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
    }
    static encode(domain, types, value) {
      return hexConcat(["0x1901", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);
    }
    static hash(domain, types, value) {
      return keccak256(TypedDataEncoder.encode(domain, types, value));
    }
    static resolveNames(domain, types, value, resolveName2) {
      return __awaiter$1(this, void 0, void 0, function* () {
        domain = shallowCopy(domain);
        const ensCache = {};
        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
          ensCache[domain.verifyingContract] = "0x";
        }
        const encoder = TypedDataEncoder.from(types);
        encoder.visit(value, (type, value2) => {
          if (type === "address" && !isHexString(value2, 20)) {
            ensCache[value2] = "0x";
          }
          return value2;
        });
        for (const name2 in ensCache) {
          ensCache[name2] = yield resolveName2(name2);
        }
        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
          domain.verifyingContract = ensCache[domain.verifyingContract];
        }
        value = encoder.visit(value, (type, value2) => {
          if (type === "address" && ensCache[value2]) {
            return ensCache[value2];
          }
          return value2;
        });
        return { domain, value };
      });
    }
    static getPayload(domain, types, value) {
      TypedDataEncoder.hashDomain(domain);
      const domainValues = {};
      const domainTypes = [];
      domainFieldNames.forEach((name2) => {
        const value2 = domain[name2];
        if (value2 == null) {
          return;
        }
        domainValues[name2] = domainChecks[name2](value2);
        domainTypes.push({ name: name2, type: domainFieldTypes[name2] });
      });
      const encoder = TypedDataEncoder.from(types);
      const typesWithDomain = shallowCopy(types);
      if (typesWithDomain.EIP712Domain) {
        logger$c.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
      } else {
        typesWithDomain.EIP712Domain = domainTypes;
      }
      encoder.encode(value);
      return { types: typesWithDomain, domain: domainValues, primaryType: encoder.primaryType, message: encoder.visit(value, (type, value2) => {
        if (type.match(/^bytes(\d*)/)) {
          return hexlify(arrayify(value2));
        }
        if (type.match(/^u?int/)) {
          return BigNumber.from(value2).toString();
        }
        switch (type) {
          case "address":
            return value2.toLowerCase();
          case "bool":
            return !!value2;
          case "string":
            if (typeof value2 !== "string") {
              logger$c.throwArgumentError(`invalid string`, "value", value2);
            }
            return value2;
        }
        return logger$c.throwArgumentError("unsupported type", "type", type);
      }) };
    }
  };
  var logger$d = new Logger(version$4);
  var LogDescription = class extends Description {
  };
  var TransactionDescription = class extends Description {
  };
  var Indexed = class extends Description {
    static isIndexed(value) {
      return !!(value && value._isIndexed);
    }
  };
  function wrapAccessError(property, error) {
    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
    wrap.error = error;
    return wrap;
  }
  var Interface = class {
    constructor(fragments) {
      logger$d.checkNew(new.target, Interface);
      let abi = [];
      if (typeof fragments === "string") {
        abi = JSON.parse(fragments);
      } else {
        abi = fragments;
      }
      defineReadOnly(this, "fragments", abi.map((fragment) => {
        return Fragment.from(fragment);
      }).filter((fragment) => fragment != null));
      defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
      defineReadOnly(this, "functions", {});
      defineReadOnly(this, "errors", {});
      defineReadOnly(this, "events", {});
      defineReadOnly(this, "structs", {});
      this.fragments.forEach((fragment) => {
        let bucket = null;
        switch (fragment.type) {
          case "constructor":
            if (this.deploy) {
              logger$d.warn("duplicate definition - constructor");
              return;
            }
            defineReadOnly(this, "deploy", fragment);
            return;
          case "function":
            bucket = this.functions;
            break;
          case "event":
            bucket = this.events;
            break;
          default:
            return;
        }
        let signature2 = fragment.format();
        if (bucket[signature2]) {
          logger$d.warn("duplicate definition - " + signature2);
          return;
        }
        bucket[signature2] = fragment;
      });
      if (!this.deploy) {
        defineReadOnly(this, "deploy", ConstructorFragment.from({ payable: false, type: "constructor" }));
      }
      defineReadOnly(this, "_isInterface", true);
    }
    format(format) {
      if (!format) {
        format = FormatTypes.full;
      }
      if (format === FormatTypes.sighash) {
        logger$d.throwArgumentError("interface does not support formatting sighash", "format", format);
      }
      const abi = this.fragments.map((fragment) => fragment.format(format));
      if (format === FormatTypes.json) {
        return JSON.stringify(abi.map((j) => JSON.parse(j)));
      }
      return abi;
    }
    static getAbiCoder() {
      return defaultAbiCoder;
    }
    static getAddress(address) {
      return getAddress(address);
    }
    static getSighash(functionFragment) {
      return hexDataSlice(id(functionFragment.format()), 0, 4);
    }
    static getEventTopic(eventFragment) {
      return id(eventFragment.format());
    }
    getFunction(nameOrSignatureOrSighash) {
      if (isHexString(nameOrSignatureOrSighash)) {
        for (const name2 in this.functions) {
          if (nameOrSignatureOrSighash === this.getSighash(name2)) {
            return this.functions[name2];
          }
        }
        logger$d.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
      }
      if (nameOrSignatureOrSighash.indexOf("(") === -1) {
        const name2 = nameOrSignatureOrSighash.trim();
        const matching = Object.keys(this.functions).filter((f2) => f2.split("(")[0] === name2);
        if (matching.length === 0) {
          logger$d.throwArgumentError("no matching function", "name", name2);
        } else if (matching.length > 1) {
          logger$d.throwArgumentError("multiple matching functions", "name", name2);
        }
        return this.functions[matching[0]];
      }
      const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
      if (!result) {
        logger$d.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
      }
      return result;
    }
    getEvent(nameOrSignatureOrTopic) {
      if (isHexString(nameOrSignatureOrTopic)) {
        const topichash = nameOrSignatureOrTopic.toLowerCase();
        for (const name2 in this.events) {
          if (topichash === this.getEventTopic(name2)) {
            return this.events[name2];
          }
        }
        logger$d.throwArgumentError("no matching event", "topichash", topichash);
      }
      if (nameOrSignatureOrTopic.indexOf("(") === -1) {
        const name2 = nameOrSignatureOrTopic.trim();
        const matching = Object.keys(this.events).filter((f2) => f2.split("(")[0] === name2);
        if (matching.length === 0) {
          logger$d.throwArgumentError("no matching event", "name", name2);
        } else if (matching.length > 1) {
          logger$d.throwArgumentError("multiple matching events", "name", name2);
        }
        return this.events[matching[0]];
      }
      const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
      if (!result) {
        logger$d.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
      }
      return result;
    }
    getSighash(functionFragment) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return getStatic(this.constructor, "getSighash")(functionFragment);
    }
    getEventTopic(eventFragment) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      return getStatic(this.constructor, "getEventTopic")(eventFragment);
    }
    _decodeParams(params, data2) {
      return this._abiCoder.decode(params, data2);
    }
    _encodeParams(params, values) {
      return this._abiCoder.encode(params, values);
    }
    encodeDeploy(values) {
      return this._encodeParams(this.deploy.inputs, values || []);
    }
    decodeFunctionData(functionFragment, data2) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      const bytes = arrayify(data2);
      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
        logger$d.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
      }
      return this._decodeParams(functionFragment.inputs, bytes.slice(4));
    }
    encodeFunctionData(functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));
    }
    decodeFunctionResult(functionFragment, data2) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      let bytes = arrayify(data2);
      let reason = null;
      let errorSignature = null;
      switch (bytes.length % this._abiCoder._getWordSize()) {
        case 0:
          try {
            return this._abiCoder.decode(functionFragment.outputs, bytes);
          } catch (error) {
          }
          break;
        case 4:
          if (hexlify(bytes.slice(0, 4)) === "0x08c379a0") {
            errorSignature = "Error(string)";
            reason = this._abiCoder.decode(["string"], bytes.slice(4))[0];
          }
          break;
      }
      return logger$d.throwError("call revert exception", Logger.errors.CALL_EXCEPTION, { method: functionFragment.format(), errorSignature, errorArgs: [reason], reason });
    }
    encodeFunctionResult(functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
    }
    encodeFilterTopics(eventFragment, values) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      if (values.length > eventFragment.inputs.length) {
        logger$d.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, { argument: "values", value: values });
      }
      let topics = [];
      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }
      const encodeTopic = (param, value) => {
        if (param.type === "string") {
          return id(value);
        } else if (param.type === "bytes") {
          return keccak256(hexlify(value));
        }
        if (param.type === "address") {
          this._abiCoder.encode(["address"], [value]);
        }
        return hexZeroPad(hexlify(value), 32);
      };
      values.forEach((value, index2) => {
        let param = eventFragment.inputs[index2];
        if (!param.indexed) {
          if (value != null) {
            logger$d.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
          }
          return;
        }
        if (value == null) {
          topics.push(null);
        } else if (param.baseType === "array" || param.baseType === "tuple") {
          logger$d.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
        } else if (Array.isArray(value)) {
          topics.push(value.map((value2) => encodeTopic(param, value2)));
        } else {
          topics.push(encodeTopic(param, value));
        }
      });
      while (topics.length && topics[topics.length - 1] === null) {
        topics.pop();
      }
      return topics;
    }
    encodeEventLog(eventFragment, values) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      const topics = [];
      const dataTypes = [];
      const dataValues = [];
      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }
      if (values.length !== eventFragment.inputs.length) {
        logger$d.throwArgumentError("event arguments/values mismatch", "values", values);
      }
      eventFragment.inputs.forEach((param, index2) => {
        const value = values[index2];
        if (param.indexed) {
          if (param.type === "string") {
            topics.push(id(value));
          } else if (param.type === "bytes") {
            topics.push(keccak256(value));
          } else if (param.baseType === "tuple" || param.baseType === "array") {
            throw new Error("not implemented");
          } else {
            topics.push(this._abiCoder.encode([param.type], [value]));
          }
        } else {
          dataTypes.push(param);
          dataValues.push(value);
        }
      });
      return { data: this._abiCoder.encode(dataTypes, dataValues), topics };
    }
    decodeEventLog(eventFragment, data2, topics) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      if (topics != null && !eventFragment.anonymous) {
        let topicHash = this.getEventTopic(eventFragment);
        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
          logger$d.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
        }
        topics = topics.slice(1);
      }
      let indexed = [];
      let nonIndexed = [];
      let dynamic = [];
      eventFragment.inputs.forEach((param, index2) => {
        if (param.indexed) {
          if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
            indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
            dynamic.push(true);
          } else {
            indexed.push(param);
            dynamic.push(false);
          }
        } else {
          nonIndexed.push(param);
          dynamic.push(false);
        }
      });
      let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
      let resultNonIndexed = this._abiCoder.decode(nonIndexed, data2, true);
      let result = [];
      let nonIndexedIndex = 0, indexedIndex = 0;
      eventFragment.inputs.forEach((param, index2) => {
        if (param.indexed) {
          if (resultIndexed == null) {
            result[index2] = new Indexed({ _isIndexed: true, hash: null });
          } else if (dynamic[index2]) {
            result[index2] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
          } else {
            try {
              result[index2] = resultIndexed[indexedIndex++];
            } catch (error) {
              result[index2] = error;
            }
          }
        } else {
          try {
            result[index2] = resultNonIndexed[nonIndexedIndex++];
          } catch (error) {
            result[index2] = error;
          }
        }
        if (param.name && result[param.name] == null) {
          const value = result[index2];
          if (value instanceof Error) {
            Object.defineProperty(result, param.name, { get: () => {
              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
            } });
          } else {
            result[param.name] = value;
          }
        }
      });
      for (let i = 0; i < result.length; i++) {
        const value = result[i];
        if (value instanceof Error) {
          Object.defineProperty(result, i, { get: () => {
            throw wrapAccessError(`index ${i}`, value);
          } });
        }
      }
      return Object.freeze(result);
    }
    parseTransaction(tx) {
      let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
      if (!fragment) {
        return null;
      }
      return new TransactionDescription({ args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)), functionFragment: fragment, name: fragment.name, signature: fragment.format(), sighash: this.getSighash(fragment), value: BigNumber.from(tx.value || "0") });
    }
    parseLog(log) {
      let fragment = this.getEvent(log.topics[0]);
      if (!fragment || fragment.anonymous) {
        return null;
      }
      return new LogDescription({ eventFragment: fragment, name: fragment.name, signature: fragment.format(), topic: this.getEventTopic(fragment), args: this.decodeEventLog(fragment, log.data, log.topics) });
    }
    static isInterface(value) {
      return !!(value && value._isInterface);
    }
  };
  var version$9 = "abstract-provider/5.1.0";
  var logger$e = new Logger(version$9);
  var ForkEvent = class extends Description {
    static isForkEvent(value) {
      return !!(value && value._isForkEvent);
    }
  };
  var Provider = class {
    constructor() {
      logger$e.checkAbstract(new.target, Provider);
      defineReadOnly(this, "_isProvider", true);
    }
    addListener(eventName, listener) {
      return this.on(eventName, listener);
    }
    removeListener(eventName, listener) {
      return this.off(eventName, listener);
    }
    static isProvider(value) {
      return !!(value && value._isProvider);
    }
  };
  var version$a = "abstract-signer/5.1.0";
  var __awaiter$2 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$f = new Logger(version$a);
  var allowedTransactionKeys = ["accessList", "chainId", "data", "from", "gasLimit", "gasPrice", "nonce", "to", "type", "value"];
  var forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];
  var Signer = class {
    constructor() {
      logger$f.checkAbstract(new.target, Signer);
      defineReadOnly(this, "_isSigner", true);
    }
    getBalance(blockTag) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("getBalance");
        return yield this.provider.getBalance(this.getAddress(), blockTag);
      });
    }
    getTransactionCount(blockTag) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("getTransactionCount");
        return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
      });
    }
    estimateGas(transaction) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("estimateGas");
        const tx = yield resolveProperties(this.checkTransaction(transaction));
        return yield this.provider.estimateGas(tx);
      });
    }
    call(transaction, blockTag) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("call");
        const tx = yield resolveProperties(this.checkTransaction(transaction));
        return yield this.provider.call(tx, blockTag);
      });
    }
    sendTransaction(transaction) {
      this._checkProvider("sendTransaction");
      return this.populateTransaction(transaction).then((tx) => {
        return this.signTransaction(tx).then((signedTx) => {
          return this.provider.sendTransaction(signedTx);
        });
      });
    }
    getChainId() {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("getChainId");
        const network = yield this.provider.getNetwork();
        return network.chainId;
      });
    }
    getGasPrice() {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("getGasPrice");
        return yield this.provider.getGasPrice();
      });
    }
    resolveName(name2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("resolveName");
        return yield this.provider.resolveName(name2);
      });
    }
    checkTransaction(transaction) {
      for (const key2 in transaction) {
        if (allowedTransactionKeys.indexOf(key2) === -1) {
          logger$f.throwArgumentError("invalid transaction key: " + key2, "transaction", transaction);
        }
      }
      const tx = shallowCopy(transaction);
      if (tx.from == null) {
        tx.from = this.getAddress();
      } else {
        tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then((result) => {
          if (result[0].toLowerCase() !== result[1].toLowerCase()) {
            logger$f.throwArgumentError("from address mismatch", "transaction", transaction);
          }
          return result[0];
        });
      }
      return tx;
    }
    populateTransaction(transaction) {
      return __awaiter$2(this, void 0, void 0, function* () {
        const tx = yield resolveProperties(this.checkTransaction(transaction));
        if (tx.to != null) {
          tx.to = Promise.resolve(tx.to).then((to) => __awaiter$2(this, void 0, void 0, function* () {
            if (to == null) {
              return null;
            }
            const address = yield this.resolveName(to);
            if (address == null) {
              logger$f.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
            }
            return address;
          }));
        }
        if (tx.gasPrice == null) {
          tx.gasPrice = this.getGasPrice();
        }
        if (tx.nonce == null) {
          tx.nonce = this.getTransactionCount("pending");
        }
        if (tx.gasLimit == null) {
          tx.gasLimit = this.estimateGas(tx).catch((error) => {
            if (forwardErrors.indexOf(error.code) >= 0) {
              throw error;
            }
            return logger$f.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, { error, tx });
          });
        }
        if (tx.chainId == null) {
          tx.chainId = this.getChainId();
        } else {
          tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then((results) => {
            if (results[1] !== 0 && results[0] !== results[1]) {
              logger$f.throwArgumentError("chainId address mismatch", "transaction", transaction);
            }
            return results[0];
          });
        }
        return yield resolveProperties(tx);
      });
    }
    _checkProvider(operation) {
      if (!this.provider) {
        logger$f.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: operation || "_checkProvider" });
      }
    }
    static isSigner(value) {
      return !!(value && value._isSigner);
    }
  };
  var VoidSigner = class extends Signer {
    constructor(address, provider) {
      logger$f.checkNew(new.target, VoidSigner);
      super();
      defineReadOnly(this, "address", address);
      defineReadOnly(this, "provider", provider || null);
    }
    getAddress() {
      return Promise.resolve(this.address);
    }
    _fail(message, operation) {
      return Promise.resolve().then(() => {
        logger$f.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation });
      });
    }
    signMessage(message) {
      return this._fail("VoidSigner cannot sign messages", "signMessage");
    }
    signTransaction(transaction) {
      return this._fail("VoidSigner cannot sign transactions", "signTransaction");
    }
    _signTypedData(domain, types, value) {
      return this._fail("VoidSigner cannot sign typed data", "signTypedData");
    }
    connect(provider) {
      return new VoidSigner(this.address, provider);
    }
  };
  var minimalisticAssert = assert;
  function assert(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert.equal = function assertEqual(l, r2, msg) {
    if (l != r2)
      throw new Error(msg || "Assertion failed: " + l + " != " + r2);
  };
  var inherits_browser = createCommonjsModule(function(module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, { constructor: { value: ctor, enumerable: false, writable: true, configurable: true } });
        }
      };
    } else {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  });
  var inherits = createCommonjsModule(function(module) {
    try {
      var util = null;
      if (typeof util.inherits !== "function")
        throw "";
      module.exports = util.inherits;
    } catch (e) {
      module.exports = inherits_browser;
    }
  });
  var inherits_1 = inherits;
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/gi, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  var toArray_1 = toArray;
  function toHex$1(msg) {
    var res = "";
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  var toHex_1 = toHex$1;
  function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
  }
  var htonl_1 = htonl;
  function toHex32(msg, endian) {
    var res = "";
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === "little")
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  var toHex32_1 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  var zero2_1 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  var zero8_1 = zero8;
  function join32(msg, start, end, endian) {
    var len = end - start;
    minimalisticAssert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === "big")
        w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
      else
        w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  var join32_1 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === "big") {
        res[k] = m >>> 24;
        res[k + 1] = m >>> 16 & 255;
        res[k + 2] = m >>> 8 & 255;
        res[k + 3] = m & 255;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = m >>> 16 & 255;
        res[k + 1] = m >>> 8 & 255;
        res[k] = m & 255;
      }
    }
    return res;
  }
  var split32_1 = split32;
  function rotr32(w, b) {
    return w >>> b | w << 32 - b;
  }
  var rotr32_1 = rotr32;
  function rotl32(w, b) {
    return w << b | w >>> 32 - b;
  }
  var rotl32_1 = rotl32;
  function sum32(a, b) {
    return a + b >>> 0;
  }
  var sum32_1 = sum32;
  function sum32_3(a, b, c) {
    return a + b + c >>> 0;
  }
  var sum32_3_1 = sum32_3;
  function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
  }
  var sum32_4_1 = sum32_4;
  function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
  }
  var sum32_5_1 = sum32_5;
  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  var sum64_1 = sum64;
  function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  var sum64_hi_1 = sum64_hi;
  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  var sum64_lo_1 = sum64_lo;
  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  var sum64_4_hi_1 = sum64_4_hi;
  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  var sum64_4_lo_1 = sum64_4_lo;
  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  var sum64_5_hi_1 = sum64_5_hi;
  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  var sum64_5_lo_1 = sum64_5_lo;
  function rotr64_hi(ah, al, num) {
    var r2 = al << 32 - num | ah >>> num;
    return r2 >>> 0;
  }
  var rotr64_hi_1 = rotr64_hi;
  function rotr64_lo(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  var rotr64_lo_1 = rotr64_lo;
  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }
  var shr64_hi_1 = shr64_hi;
  function shr64_lo(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  var shr64_lo_1 = shr64_lo;
  var utils = { inherits: inherits_1, toArray: toArray_1, toHex: toHex_1, htonl: htonl_1, toHex32: toHex32_1, zero2: zero2_1, zero8: zero8_1, join32: join32_1, split32: split32_1, rotr32: rotr32_1, rotl32: rotl32_1, sum32: sum32_1, sum32_3: sum32_3_1, sum32_4: sum32_4_1, sum32_5: sum32_5_1, sum64: sum64_1, sum64_hi: sum64_hi_1, sum64_lo: sum64_lo_1, sum64_4_hi: sum64_4_hi_1, sum64_4_lo: sum64_4_lo_1, sum64_5_hi: sum64_5_hi_1, sum64_5_lo: sum64_5_lo_1, rotr64_hi: rotr64_hi_1, rotr64_lo: rotr64_lo_1, shr64_hi: shr64_hi_1, shr64_lo: shr64_lo_1 };
  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  var BlockHash_1 = BlockHash;
  BlockHash.prototype.update = function update(msg, enc) {
    msg = utils.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r2 = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r2, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils.join32(msg, 0, msg.length - r2, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }
    return this;
  };
  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    minimalisticAssert(this.pending === null);
    return this._digest(enc);
  };
  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for (var i = 1; i < k; i++)
      res[i] = 0;
    len <<= 3;
    if (this.endian === "big") {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = len >>> 24 & 255;
      res[i++] = len >>> 16 & 255;
      res[i++] = len >>> 8 & 255;
      res[i++] = len & 255;
    } else {
      res[i++] = len & 255;
      res[i++] = len >>> 8 & 255;
      res[i++] = len >>> 16 & 255;
      res[i++] = len >>> 24 & 255;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      for (t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }
    return res;
  };
  var common = { BlockHash: BlockHash_1 };
  var rotr32$1 = utils.rotr32;
  function ft_1(s2, x, y, z) {
    if (s2 === 0)
      return ch32(x, y, z);
    if (s2 === 1 || s2 === 3)
      return p32(x, y, z);
    if (s2 === 2)
      return maj32(x, y, z);
  }
  var ft_1_1 = ft_1;
  function ch32(x, y, z) {
    return x & y ^ ~x & z;
  }
  var ch32_1 = ch32;
  function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
  }
  var maj32_1 = maj32;
  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  var p32_1 = p32;
  function s0_256(x) {
    return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
  }
  var s0_256_1 = s0_256;
  function s1_256(x) {
    return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
  }
  var s1_256_1 = s1_256;
  function g0_256(x) {
    return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ x >>> 3;
  }
  var g0_256_1 = g0_256;
  function g1_256(x) {
    return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ x >>> 10;
  }
  var g1_256_1 = g1_256;
  var common$1 = { ft_1: ft_1_1, ch32: ch32_1, maj32: maj32_1, p32: p32_1, s0_256: s0_256_1, s1_256: s1_256_1, g0_256: g0_256_1, g1_256: g1_256_1 };
  var rotl32$1 = utils.rotl32;
  var sum32$1 = utils.sum32;
  var sum32_5$1 = utils.sum32_5;
  var ft_1$1 = common$1.ft_1;
  var BlockHash$1 = common.BlockHash;
  var sha1_K = [1518500249, 1859775393, 2400959708, 3395469782];
  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();
    BlockHash$1.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.W = new Array(80);
  }
  utils.inherits(SHA1, BlockHash$1);
  var _1 = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for (i = 0; i < W.length; i++) {
      var s2 = ~~(i / 20);
      var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s2, b, c, d), e, W[i], sha1_K[s2]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t;
    }
    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
  };
  SHA1.prototype._digest = function digest2(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h, "big");
    else
      return utils.split32(this.h, "big");
  };
  var sum32$2 = utils.sum32;
  var sum32_4$1 = utils.sum32_4;
  var sum32_5$2 = utils.sum32_5;
  var ch32$1 = common$1.ch32;
  var maj32$1 = common$1.maj32;
  var s0_256$1 = common$1.s0_256;
  var s1_256$1 = common$1.s1_256;
  var g0_256$1 = common$1.g0_256;
  var g1_256$1 = common$1.g1_256;
  var BlockHash$2 = common.BlockHash;
  var sha256_K = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();
    BlockHash$2.call(this);
    this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils.inherits(SHA256, BlockHash$2);
  var _256 = SHA256;
  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;
  SHA256.prototype._update = function _update2(msg, start) {
    var W = this.W;
    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f2 = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    minimalisticAssert(this.k.length === W.length);
    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f2, g), this.k[i], W[i]);
      var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));
      h = g;
      g = f2;
      f2 = e;
      e = sum32$2(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$2(T1, T2);
    }
    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
    this.h[5] = sum32$2(this.h[5], f2);
    this.h[6] = sum32$2(this.h[6], g);
    this.h[7] = sum32$2(this.h[7], h);
  };
  SHA256.prototype._digest = function digest3(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h, "big");
    else
      return utils.split32(this.h, "big");
  };
  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();
    _256.call(this);
    this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
  }
  utils.inherits(SHA224, _256);
  var _224 = SHA224;
  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;
  SHA224.prototype._digest = function digest4(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h.slice(0, 7), "big");
    else
      return utils.split32(this.h.slice(0, 7), "big");
  };
  var rotr64_hi$1 = utils.rotr64_hi;
  var rotr64_lo$1 = utils.rotr64_lo;
  var shr64_hi$1 = utils.shr64_hi;
  var shr64_lo$1 = utils.shr64_lo;
  var sum64$1 = utils.sum64;
  var sum64_hi$1 = utils.sum64_hi;
  var sum64_lo$1 = utils.sum64_lo;
  var sum64_4_hi$1 = utils.sum64_4_hi;
  var sum64_4_lo$1 = utils.sum64_4_lo;
  var sum64_5_hi$1 = utils.sum64_5_hi;
  var sum64_5_lo$1 = utils.sum64_5_lo;
  var BlockHash$3 = common.BlockHash;
  var sha512_K = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();
    BlockHash$3.call(this);
    this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils.inherits(SHA512, BlockHash$3);
  var _512 = SHA512;
  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;
  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];
      var c3_lo = W[i - 31];
      W[i] = sum64_4_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
  };
  SHA512.prototype._update = function _update3(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    minimalisticAssert(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];
      var T1_hi = sum64_5_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
      var T1_lo = sum64_5_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);
      el = sum64_lo$1(dl, dl, T1_hi, T1_lo);
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64$1(this.h, 0, ah, al);
    sum64$1(this.h, 2, bh, bl);
    sum64$1(this.h, 4, ch, cl);
    sum64$1(this.h, 6, dh, dl);
    sum64$1(this.h, 8, eh, el);
    sum64$1(this.h, 10, fh, fl);
    sum64$1(this.h, 12, gh, gl);
    sum64$1(this.h, 14, hh, hl);
  };
  SHA512.prototype._digest = function digest5(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h, "big");
    else
      return utils.split32(this.h, "big");
  };
  function ch64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ ~xh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ ~xl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ xh & zh ^ yh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ xl & zl ^ yl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 28);
    var c1_hi = rotr64_hi$1(xl, xh, 2);
    var c2_hi = rotr64_hi$1(xl, xh, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 28);
    var c1_lo = rotr64_lo$1(xl, xh, 2);
    var c2_lo = rotr64_lo$1(xl, xh, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 14);
    var c1_hi = rotr64_hi$1(xh, xl, 18);
    var c2_hi = rotr64_hi$1(xl, xh, 9);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 14);
    var c1_lo = rotr64_lo$1(xh, xl, 18);
    var c2_lo = rotr64_lo$1(xl, xh, 9);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 1);
    var c1_hi = rotr64_hi$1(xh, xl, 8);
    var c2_hi = shr64_hi$1(xh, xl, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 1);
    var c1_lo = rotr64_lo$1(xh, xl, 8);
    var c2_lo = shr64_lo$1(xh, xl, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 19);
    var c1_hi = rotr64_hi$1(xl, xh, 29);
    var c2_hi = shr64_hi$1(xh, xl, 6);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 19);
    var c1_lo = rotr64_lo$1(xl, xh, 29);
    var c2_lo = shr64_lo$1(xh, xl, 6);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();
    _512.call(this);
    this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
  }
  utils.inherits(SHA384, _512);
  var _384 = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  SHA384.prototype._digest = function digest6(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h.slice(0, 12), "big");
    else
      return utils.split32(this.h.slice(0, 12), "big");
  };
  var sha1 = _1;
  var sha224 = _224;
  var sha256 = _256;
  var sha384 = _384;
  var sha512 = _512;
  var sha = { sha1, sha224, sha256, sha384, sha512 };
  var rotl32$2 = utils.rotl32;
  var sum32$3 = utils.sum32;
  var sum32_3$1 = utils.sum32_3;
  var sum32_4$2 = utils.sum32_4;
  var BlockHash$4 = common.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash$4.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.endian = "little";
  }
  utils.inherits(RIPEMD160, BlockHash$4);
  var ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update2(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32$3(rotl32$2(sum32_4$2(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
      A = E;
      E = D;
      D = rotl32$2(C, 10);
      C = B;
      B = T;
      T = sum32$3(rotl32$2(sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32$2(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3$1(this.h[1], C, Dh);
    this.h[1] = sum32_3$1(this.h[2], D, Eh);
    this.h[2] = sum32_3$1(this.h[3], E, Ah);
    this.h[3] = sum32_3$1(this.h[4], A, Bh);
    this.h[4] = sum32_3$1(this.h[0], B, Ch);
    this.h[0] = T;
  };
  RIPEMD160.prototype._digest = function digest7(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h, "little");
    else
      return utils.split32(this.h, "little");
  };
  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return x & y | ~x & z;
    else if (j <= 47)
      return (x | ~y) ^ z;
    else if (j <= 63)
      return x & z | y & ~z;
    else
      return x ^ (y | ~z);
  }
  function K(j) {
    if (j <= 15)
      return 0;
    else if (j <= 31)
      return 1518500249;
    else if (j <= 47)
      return 1859775393;
    else if (j <= 63)
      return 2400959708;
    else
      return 2840853838;
  }
  function Kh(j) {
    if (j <= 15)
      return 1352829926;
    else if (j <= 31)
      return 1548603684;
    else if (j <= 47)
      return 1836072691;
    else if (j <= 63)
      return 2053994217;
    else
      return 0;
  }
  var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
  var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
  var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
  var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  var ripemd = { ripemd160 };
  function Hmac(hash, key2, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key2, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key2, enc));
  }
  var hmac = Hmac;
  Hmac.prototype._init = function init(key2) {
    if (key2.length > this.blockSize)
      key2 = new this.Hash().update(key2).digest();
    minimalisticAssert(key2.length <= this.blockSize);
    for (var i = key2.length; i < this.blockSize; i++)
      key2.push(0);
    for (i = 0; i < key2.length; i++)
      key2[i] ^= 54;
    this.inner = new this.Hash().update(key2);
    for (i = 0; i < key2.length; i++)
      key2[i] ^= 106;
    this.outer = new this.Hash().update(key2);
  };
  Hmac.prototype.update = function update3(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac.prototype.digest = function digest8(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  var hash_1 = createCommonjsModule(function(module, exports) {
    var hash = exports;
    hash.utils = utils;
    hash.common = common;
    hash.sha = sha;
    hash.ripemd = ripemd;
    hash.hmac = hmac;
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  });
  function createCommonjsModule$1(fn, basedir, module) {
    return module = { path: basedir, exports: {}, require: function(path, base2) {
      return commonjsRequire$1(path, base2 === void 0 || base2 === null ? module.path : base2);
    } }, fn(module, module.exports), module.exports;
  }
  function commonjsRequire$1() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
  }
  var minimalisticAssert$1 = assert$1;
  function assert$1(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert$1.equal = function assertEqual2(l, r2, msg) {
    if (l != r2)
      throw new Error(msg || "Assertion failed: " + l + " != " + r2);
  };
  var utils_1 = createCommonjsModule$1(function(module, exports) {
    "use strict";
    var utils2 = exports;
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/gi, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils2.toArray = toArray2;
    function zero22(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils2.zero2 = zero22;
    function toHex2(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero22(msg[i].toString(16));
      return res;
    }
    utils2.toHex = toHex2;
    utils2.encode = function encode3(arr, enc) {
      if (enc === "hex")
        return toHex2(arr);
      else
        return arr;
    };
  });
  var utils_1$1 = createCommonjsModule$1(function(module, exports) {
    "use strict";
    var utils2 = exports;
    utils2.assert = minimalisticAssert$1;
    utils2.toArray = utils_1.toArray;
    utils2.zero2 = utils_1.zero2;
    utils2.toHex = utils_1.toHex;
    utils2.encode = utils_1.encode;
    function getNAF2(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << w + 1;
      var k = num.clone();
      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils2.getNAF = getNAF2;
    function getJSF2(k1, k2) {
      var jsf = [[], []];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils2.getJSF = getJSF2;
    function cachedProperty(obj, name2, computer) {
      var key2 = "_" + name2;
      obj.prototype[name2] = function cachedProperty2() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils2.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils2.toArray(bytes, "hex") : bytes;
    }
    utils2.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new bn(bytes, "hex", "le");
    }
    utils2.intFromLE = intFromLE;
  });
  var getNAF = utils_1$1.getNAF;
  var getJSF = utils_1$1.getJSF;
  var assert$1$1 = utils_1$1.assert;
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new bn(conf.p, 16);
    this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);
    this.zero = new bn(0).toRed(this.red);
    this.one = new bn(1).toRed(this.red);
    this.two = new bn(2).toRed(this.red);
    this.n = conf.n && new bn(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$1$1(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    var repr = [];
    var j;
    var nafW;
    for (j = 0; j < naf.length; j += doubles.step) {
      nafW = 0;
      for (var l = j + doubles.step - 1; l >= j; l--)
        nafW = (nafW << 1) + naf[l];
      repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (j = 0; j < repr.length; j++) {
        nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k, w, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      for (var l = 0; i >= 0 && naf[i] === 0; i--)
        l++;
      if (i >= 0)
        l++;
      acc = acc.dblp(l);
      if (i < 0)
        break;
      var z = naf[i];
      assert$1$1(z !== 0);
      if (p.type === "affine") {
        if (z > 0)
          acc = acc.mixedAdd(wnd[z - 1 >> 1]);
        else
          acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
      } else {
        if (z > 0)
          acc = acc.add(wnd[z - 1 >> 1]);
        else
          acc = acc.add(wnd[-z - 1 >> 1].neg());
      }
    }
    return p.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;
    var i;
    var j;
    var p;
    for (i = 0; i < len; i++) {
      p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }
    for (i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }
      var comb = [points[a], null, null, points[b]];
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }
      var index2 = [-3, -1, -5, -7, 0, 7, 5, 1, 3];
      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;
        naf[a][j] = index2[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i = max; i >= 0; i--) {
      var k = 0;
      while (i >= 0) {
        var zero = true;
        for (j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;
      for (j = 0; j < len; j++) {
        var z = tmp[j];
        p;
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][z - 1 >> 1];
        else if (z < 0)
          p = wnd[j][-z - 1 >> 1].neg();
        if (p.type === "affine")
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    for (i = 0; i < len; i++)
      wnd[i] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate2() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils_1$1.toArray(bytes, enc);
    var len = this.p.byteLength();
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
      if (bytes[0] === 6)
        assert$1$1(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 7)
        assert$1$1(bytes[bytes.length - 1] % 2 === 1);
      var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
      return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
    }
    throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode2(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);
    if (compact)
      return [this.getY().isEven() ? 2 : 3].concat(x);
    return [4].concat(x, this.getY().toArray("be", len));
  };
  BasePoint.prototype.encode = function encode2(enc, compact) {
    return utils_1$1.encode(this._encode(compact), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = { doubles: null, naf: null, beta: null };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return { step, points: doubles };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl3 = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl3);
    return { wnd, points: res };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k) {
    var r2 = this;
    for (var i = 0; i < k; i++)
      r2 = r2.dbl();
    return r2;
  };
  var inherits_browser$1 = createCommonjsModule$1(function(module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, { constructor: { value: ctor, enumerable: false, writable: true, configurable: true } });
        }
      };
    } else {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  });
  var assert$2 = utils_1$1.assert;
  function ShortCurve(conf) {
    base.call(this, "short", conf);
    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits_browser$1(ShortCurve, base);
  var short_1 = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new bn(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new bn(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return { a: new bn(vec.a, 16), b: new bn(vec.b, 16) };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return { beta, lambda, basis };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : bn.mont(num);
    var tinv = new bn(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s2 = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s2).fromRed();
    var l2 = ntinv.redSub(s2).fromRed();
    return [l1, l2];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u = lambda;
    var v = this.n.clone();
    var x1 = new bn(1);
    var y1 = new bn(0);
    var x2 = new bn(0);
    var y2 = new bn(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r2;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r2 = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));
      if (!a1 && r2.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r2.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r2;
      v = u;
      u = r2;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r2.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
    return [{ a: a1, b: b1 }, { a: a2, b: b2 }];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1, k2 };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
    return this.point(x, y);
  };
  ShortCurve.prototype.validate = function validate3(point3) {
    if (point3.inf)
      return true;
    var x = point3.x;
    var y = point3.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i = 0; i < points.length; i++) {
      var split = this._endoSplit(coeffs[i]);
      var p = points[i];
      var beta = p._getBeta();
      if (split.k1.negative) {
        split.k1.ineg();
        p = p.neg(true);
      }
      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }
      npoints[i * 2] = p;
      npoints[i * 2 + 1] = beta;
      ncoeffs[i * 2] = split.k1;
      ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    for (var j = 0; j < i * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }
    return res;
  };
  function Point(curve, x, y, isRed) {
    base.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits_browser$1(Point, base.BasePoint);
  ShortCurve.prototype.point = function point2(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta2() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = { beta: null, naf: pre.naf && { wnd: pre.naf.wnd, points: pre.naf.points.map(endoMul) }, doubles: pre.doubles && { step: pre.doubles.step, points: pre.doubles.points.map(endoMul) } };
    }
    return beta;
  };
  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }];
  };
  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string")
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj2) {
      return curve.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = { beta: null, doubles: pre.doubles && { step: pre.doubles.step, points: [res].concat(pre.doubles.points.map(obj2point)) }, naf: pre.naf && { wnd: pre.naf.wnd, points: [res].concat(pre.naf.points.map(obj2point)) } };
    return res;
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point.prototype.add = function add(p) {
    if (this.inf)
      return p;
    if (p.inf)
      return this;
    if (this.eq(p))
      return this.dbl();
    if (this.neg().eq(p))
      return this.curve.point(null, null);
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k) {
    k = new bn(k, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k]);
    else
      return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point.prototype.eq = function eq2(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = { naf: pre.naf && { wnd: pre.naf.wnd, points: pre.naf.points.map(negate) }, doubles: pre.doubles && { step: pre.doubles.step, points: pre.doubles.points.map(negate) } };
    }
    return res;
  };
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve, x, y, z) {
    base.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new bn(0);
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      this.z = new bn(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits_browser$1(JPoint, base.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg2() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add2(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    if (this.isInfinity())
      return p.toJ();
    if (p.isInfinity())
      return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp2(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
      var r2 = this;
      for (i = 0; i < pow; i++)
        r2 = r2.dbl();
      return r2;
    }
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl2() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m = xx.redAdd(xx).redIAdd(xx);
      var t = m.redSqr().redISub(s2).redISub(s2);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t;
      ny = m.redMul(s2.redISub(t)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = b.redSqr();
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      var e = a.redAdd(a).redIAdd(a);
      var f2 = e.redSqr();
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f2.redISub(d).redISub(d);
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t = m.redSqr().redISub(s2).redISub(s2);
      nx = t;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s2.redISub(t)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m = xx.redAdd(xx).redIAdd(xx);
    var mm = m.redSqr();
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    var ee = e.redSqr();
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul2(k, kbase) {
    k = new bn(k, kbase);
    return this.curve._wnafMul(this, k);
  };
  JPoint.prototype.eq = function eq3(p) {
    if (p.type === "affine")
      return this.eq(p.toJ());
    if (this === p)
      return true;
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect2() {
    if (this.isInfinity())
      return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity2() {
    return this.z.cmpn(0) === 0;
  };
  var curve_1 = createCommonjsModule$1(function(module, exports) {
    "use strict";
    var curve = exports;
    curve.base = base;
    curve.short = short_1;
    curve.mont = null;
    curve.edwards = null;
  });
  var curves_1 = createCommonjsModule$1(function(module, exports) {
    "use strict";
    var curves = exports;
    var assert2 = utils_1$1.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve_1.short(options);
      else if (options.type === "edwards")
        this.curve = new curve_1.edwards(options);
      else
        this.curve = new curve_1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert2(this.g.validate(), "Invalid curve");
      assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name2, options) {
      Object.defineProperty(curves, name2, { configurable: true, enumerable: true, get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name2, { configurable: true, enumerable: true, value: curve });
        return curve;
      } });
    }
    defineCurve("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: hash_1.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] });
    defineCurve("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: hash_1.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] });
    defineCurve("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: hash_1.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] });
    defineCurve("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: hash_1.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] });
    defineCurve("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: hash_1.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] });
    defineCurve("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: hash_1.sha256, gRed: false, g: ["9"] });
    defineCurve("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: hash_1.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] });
    var pre;
    try {
      pre = null.crash();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: hash_1.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", pre] });
  });
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
    minimalisticAssert$1(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
  }
  var hmacDrbg = HmacDRBG;
  HmacDRBG.prototype._init = function init2(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0;
      this.V[i] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
  };
  HmacDRBG.prototype._hmac = function hmac2() {
    return new hash_1.hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update4(seed) {
    var kmac = this._hmac().update(this.V).update([0]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add3, addEnc) {
    if (typeof entropyEnc !== "string") {
      addEnc = add3;
      add3 = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils_1.toArray(entropy, entropyEnc);
    add3 = utils_1.toArray(add3, addEnc);
    minimalisticAssert$1(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add3 || []));
    this._reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    if (typeof enc !== "string") {
      addEnc = add3;
      add3 = enc;
      enc = null;
    }
    if (add3) {
      add3 = utils_1.toArray(add3, addEnc || "hex");
      this._update(add3);
    }
    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add3);
    this._reseed++;
    return utils_1.encode(res, enc);
  };
  var assert$3 = utils_1$1.assert;
  function KeyPair(ec2, options) {
    this.ec = ec2;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(ec2, { pub, pubEnc: enc });
  };
  KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
    return new KeyPair(ec2, { priv, privEnc: enc });
  };
  KeyPair.prototype.validate = function validate4() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return { result: false, reason: "Invalid public key" };
    if (!pub.validate())
      return { result: false, reason: "Public key is not a point" };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: "Public key * N != O" };
    return { result: true, reason: null };
  };
  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    if (typeof compact === "string") {
      enc = compact;
      compact = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex")
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
    this.priv = new bn(key2, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
    if (key2.x || key2.y) {
      if (this.ec.curve.type === "mont") {
        assert$3(key2.x, "Need x coordinate");
      } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
        assert$3(key2.x && key2.y, "Need both x and y coordinate");
      }
      this.pub = this.ec.curve.point(key2.x, key2.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key2, enc);
  };
  KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
      assert$3(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair.prototype.verify = function verify(msg, signature2) {
    return this.ec.verify(msg, signature2, this);
  };
  KeyPair.prototype.inspect = function inspect3() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  var assert$4 = utils_1$1.assert;
  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;
    if (this._importDER(options, enc))
      return;
    assert$4(options.r && options.s, "Signature without r or s");
    this.r = new bn(options.r, 16);
    this.s = new bn(options.s, 16);
    if (options.recoveryParam === void 0)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature = Signature;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p.place = off;
    return val;
  }
  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }
  Signature.prototype._importDER = function _importDER(data2, enc) {
    data2 = utils_1$1.toArray(data2, enc);
    var p = new Position();
    if (data2[p.place++] !== 48) {
      return false;
    }
    var len = getLength(data2, p);
    if (len === false) {
      return false;
    }
    if (len + p.place !== data2.length) {
      return false;
    }
    if (data2[p.place++] !== 2) {
      return false;
    }
    var rlen = getLength(data2, p);
    if (rlen === false) {
      return false;
    }
    var r2 = data2.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data2[p.place++] !== 2) {
      return false;
    }
    var slen = getLength(data2, p);
    if (slen === false) {
      return false;
    }
    if (data2.length !== slen + p.place) {
      return false;
    }
    var s2 = data2.slice(p.place, slen + p.place);
    if (r2[0] === 0) {
      if (r2[1] & 128) {
        r2 = r2.slice(1);
      } else {
        return false;
      }
    }
    if (s2[0] === 0) {
      if (s2[1] & 128) {
        s2 = s2.slice(1);
      } else {
        return false;
      }
    }
    this.r = new bn(r2);
    this.s = new bn(s2);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len) {
    if (len < 128) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push(len >>> (octets << 3) & 255);
    }
    arr.push(len);
  }
  Signature.prototype.toDER = function toDER(enc) {
    var r2 = this.r.toArray();
    var s2 = this.s.toArray();
    if (r2[0] & 128)
      r2 = [0].concat(r2);
    if (s2[0] & 128)
      s2 = [0].concat(s2);
    r2 = rmPadding(r2);
    s2 = rmPadding(s2);
    while (!s2[0] && !(s2[1] & 128)) {
      s2 = s2.slice(1);
    }
    var arr = [2];
    constructLength(arr, r2.length);
    arr = arr.concat(r2);
    arr.push(2);
    constructLength(arr, s2.length);
    var backHalf = arr.concat(s2);
    var res = [48];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils_1$1.encode(res, enc);
  };
  var rand = function() {
    throw new Error("unsupported");
  };
  var assert$5 = utils_1$1.assert;
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
    if (typeof options === "string") {
      assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), "Unknown curve " + options);
      options = curves_1[options];
    }
    if (options instanceof curves_1.PresetCurve)
      options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  var ec = EC;
  EC.prototype.keyPair = function keyPair(options) {
    return new key(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return key.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return key.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new hmacDrbg({ hash: this.hash, pers: options.pers, persEnc: options.persEnc || "utf8", entropy: options.entropy || rand(this.hash.hmacStrength), entropyEnc: options.entropy && options.entropyEnc || "utf8", nonce: this.n.toArray() });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new bn(2));
    for (; ; ) {
      var priv = new bn(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC.prototype.sign = function sign2(msg, key2, enc, options) {
    if (typeof enc === "object") {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    key2 = this.keyFromPrivate(key2, enc);
    msg = this._truncateToN(new bn(msg, 16));
    var bytes = this.n.byteLength();
    var bkey = key2.getPrivate().toArray("be", bytes);
    var nonce = msg.toArray("be", bytes);
    var drbg = new hmacDrbg({ hash: this.hash, entropy: bkey, nonce, pers: options.pers, persEnc: options.persEnc || "utf8" });
    var ns1 = this.n.sub(new bn(1));
    for (var iter = 0; ; iter++) {
      var k = options.k ? options.k(iter) : new bn(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r2 = kpX.umod(this.n);
      if (r2.cmpn(0) === 0)
        continue;
      var s2 = k.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
      s2 = s2.umod(this.n);
      if (s2.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
      if (options.canonical && s2.cmp(this.nh) > 0) {
        s2 = this.n.sub(s2);
        recoveryParam ^= 1;
      }
      return new signature({ r: r2, s: s2, recoveryParam });
    }
  };
  EC.prototype.verify = function verify2(msg, signature$1, key2, enc) {
    msg = this._truncateToN(new bn(msg, 16));
    key2 = this.keyFromPublic(key2, enc);
    signature$1 = new signature(signature$1, "hex");
    var r2 = signature$1.r;
    var s2 = signature$1.s;
    if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
      return false;
    if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
      return false;
    var sinv = s2.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r2).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
      p = this.g.mulAdd(u1, key2.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.getX().umod(this.n).cmp(r2) === 0;
    }
    p = this.g.jmulAdd(u1, key2.getPublic(), u2);
    if (p.isInfinity())
      return false;
    return p.eqXToP(r2);
  };
  EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
    assert$5((3 & j) === j, "The recovery param is more than two bits");
    signature$1 = new signature(signature$1, enc);
    var n = this.n;
    var e = new bn(msg);
    var r2 = signature$1.r;
    var s2 = signature$1.s;
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error("Unable to find sencond key candinate");
    if (isSecondKey)
      r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
    else
      r2 = this.curve.pointFromX(r2, isYOdd);
    var rInv = signature$1.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s22 = s2.mul(rInv).umod(n);
    return this.g.mulAdd(s1, r2, s22);
  };
  EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
    signature$1 = new signature(signature$1, enc);
    if (signature$1.recoveryParam !== null)
      return signature$1.recoveryParam;
    for (var i = 0; i < 4; i++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature$1, i);
      } catch (e2) {
        continue;
      }
      if (Qprime.eq(Q))
        return i;
    }
    throw new Error("Unable to find valid recovery factor");
  };
  var elliptic_1 = createCommonjsModule$1(function(module, exports) {
    "use strict";
    var elliptic = exports;
    elliptic.version = { version: "6.5.4" }.version;
    elliptic.utils = utils_1$1;
    elliptic.rand = function() {
      throw new Error("unsupported");
    };
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;
    elliptic.ec = ec;
    elliptic.eddsa = null;
  });
  var EC$1 = elliptic_1.ec;
  var version$b = "signing-key/5.1.0";
  var logger$g = new Logger(version$b);
  var _curve = null;
  function getCurve() {
    if (!_curve) {
      _curve = new EC$1("secp256k1");
    }
    return _curve;
  }
  var SigningKey = class {
    constructor(privateKey) {
      defineReadOnly(this, "curve", "secp256k1");
      defineReadOnly(this, "privateKey", hexlify(privateKey));
      const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
      defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
      defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
      defineReadOnly(this, "_isSigningKey", true);
    }
    _addPoint(other) {
      const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
      const p1 = getCurve().keyFromPublic(arrayify(other));
      return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
    }
    signDigest(digest9) {
      const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
      const digestBytes = arrayify(digest9);
      if (digestBytes.length !== 32) {
        logger$g.throwArgumentError("bad digest length", "digest", digest9);
      }
      const signature2 = keyPair2.sign(digestBytes, { canonical: true });
      return splitSignature({ recoveryParam: signature2.recoveryParam, r: hexZeroPad("0x" + signature2.r.toString(16), 32), s: hexZeroPad("0x" + signature2.s.toString(16), 32) });
    }
    computeSharedSecret(otherKey) {
      const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
      const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
      return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
    }
    static isSigningKey(value) {
      return !!(value && value._isSigningKey);
    }
  };
  function recoverPublicKey(digest9, signature2) {
    const sig = splitSignature(signature2);
    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
    return "0x" + getCurve().recoverPubKey(arrayify(digest9), rs, sig.recoveryParam).encode("hex", false);
  }
  function computePublicKey(key2, compressed) {
    const bytes = arrayify(key2);
    if (bytes.length === 32) {
      const signingKey = new SigningKey(bytes);
      if (compressed) {
        return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
      }
      return signingKey.publicKey;
    } else if (bytes.length === 33) {
      if (compressed) {
        return hexlify(bytes);
      }
      return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
    } else if (bytes.length === 65) {
      if (!compressed) {
        return hexlify(bytes);
      }
      return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
    }
    return logger$g.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
  }
  var version$c = "transactions/5.1.1";
  var logger$h = new Logger(version$c);
  function handleAddress(value) {
    if (value === "0x") {
      return null;
    }
    return getAddress(value);
  }
  function handleNumber(value) {
    if (value === "0x") {
      return Zero$1;
    }
    return BigNumber.from(value);
  }
  var transactionFields = [{ name: "nonce", maxLength: 32, numeric: true }, { name: "gasPrice", maxLength: 32, numeric: true }, { name: "gasLimit", maxLength: 32, numeric: true }, { name: "to", length: 20 }, { name: "value", maxLength: 32, numeric: true }, { name: "data" }];
  var allowedTransactionKeys$1 = { chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true };
  function computeAddress(key2) {
    const publicKey = computePublicKey(key2);
    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
  }
  function recoverAddress(digest9, signature2) {
    return computeAddress(recoverPublicKey(arrayify(digest9), signature2));
  }
  function formatNumber(value, name2) {
    const result = stripZeros(BigNumber.from(value).toHexString());
    if (result.length > 32) {
      logger$h.throwArgumentError("invalid length for " + name2, "transaction:" + name2, value);
    }
    return result;
  }
  function accessSetify(addr, storageKeys) {
    return { address: getAddress(addr), storageKeys: (storageKeys || []).map((storageKey, index2) => {
      if (hexDataLength(storageKey) !== 32) {
        logger$h.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index2}]`, storageKey);
      }
      return storageKey.toLowerCase();
    }) };
  }
  function accessListify(value) {
    if (Array.isArray(value)) {
      return value.map((set, index2) => {
        if (Array.isArray(set)) {
          if (set.length > 2) {
            logger$h.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index2}]`, set);
          }
          return accessSetify(set[0], set[1]);
        }
        return accessSetify(set.address, set.storageKeys);
      });
    }
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a, b) => a.address.localeCompare(b.address));
    return result;
  }
  function formatAccessList(value) {
    return accessListify(value).map((set) => [set.address, set.storageKeys]);
  }
  function _serializeEip2930(transaction, signature2) {
    const fields = [formatNumber(transaction.chainId || 0, "chainId"), formatNumber(transaction.nonce || 0, "nonce"), formatNumber(transaction.gasPrice || 0, "gasPrice"), formatNumber(transaction.gasLimit || 0, "gasLimit"), transaction.to != null ? getAddress(transaction.to) : "0x", formatNumber(transaction.value || 0, "value"), transaction.data || "0x", formatAccessList(transaction.accessList || [])];
    if (signature2) {
      const sig = splitSignature(signature2);
      fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros(sig.r));
      fields.push(stripZeros(sig.s));
    }
    return hexConcat(["0x01", encode(fields)]);
  }
  function _serialize(transaction, signature2) {
    checkProperties(transaction, allowedTransactionKeys$1);
    const raw = [];
    transactionFields.forEach(function(fieldInfo) {
      let value = transaction[fieldInfo.name] || [];
      const options = {};
      if (fieldInfo.numeric) {
        options.hexPad = "left";
      }
      value = arrayify(hexlify(value, options));
      if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
        logger$h.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
      }
      if (fieldInfo.maxLength) {
        value = stripZeros(value);
        if (value.length > fieldInfo.maxLength) {
          logger$h.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
        }
      }
      raw.push(hexlify(value));
    });
    let chainId = 0;
    if (transaction.chainId != null) {
      chainId = transaction.chainId;
      if (typeof chainId !== "number") {
        logger$h.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
      }
    } else if (signature2 && !isBytesLike(signature2) && signature2.v > 28) {
      chainId = Math.floor((signature2.v - 35) / 2);
    }
    if (chainId !== 0) {
      raw.push(hexlify(chainId));
      raw.push("0x");
      raw.push("0x");
    }
    if (!signature2) {
      return encode(raw);
    }
    const sig = splitSignature(signature2);
    let v = 27 + sig.recoveryParam;
    if (chainId !== 0) {
      raw.pop();
      raw.pop();
      raw.pop();
      v += chainId * 2 + 8;
      if (sig.v > 28 && sig.v !== v) {
        logger$h.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
      }
    } else if (sig.v !== v) {
      logger$h.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
    }
    raw.push(hexlify(v));
    raw.push(stripZeros(arrayify(sig.r)));
    raw.push(stripZeros(arrayify(sig.s)));
    return encode(raw);
  }
  function serialize(transaction, signature2) {
    if (transaction.type == null) {
      if (transaction.accessList != null) {
        logger$h.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
      }
      return _serialize(transaction, signature2);
    }
    switch (transaction.type) {
      case 1:
        return _serializeEip2930(transaction, signature2);
      default:
        break;
    }
    return logger$h.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, { operation: "serializeTransaction", transactionType: transaction.type });
  }
  function _parseEip2930(payload) {
    const transaction = decode(payload.slice(1));
    if (transaction.length !== 8 && transaction.length !== 11) {
      logger$h.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
    }
    const tx = { type: 1, chainId: handleNumber(transaction[0]).toNumber(), nonce: handleNumber(transaction[1]).toNumber(), gasPrice: handleNumber(transaction[2]), gasLimit: handleNumber(transaction[3]), to: handleAddress(transaction[4]), value: handleNumber(transaction[5]), data: transaction[6], accessList: accessListify(transaction[7]) };
    if (transaction.length === 8) {
      return tx;
    }
    try {
      const recid = handleNumber(transaction[8]).toNumber();
      if (recid !== 0 && recid !== 1) {
        throw new Error("bad recid");
      }
      tx.v = recid;
    } catch (error) {
      logger$h.throwArgumentError("invalid v for transaction type: 1", "v", transaction[8]);
    }
    tx.r = hexZeroPad(transaction[9], 32);
    tx.s = hexZeroPad(transaction[10], 32);
    try {
      const digest9 = keccak256(_serializeEip2930(tx));
      tx.from = recoverAddress(digest9, { r: tx.r, s: tx.s, recoveryParam: tx.v });
    } catch (error) {
      console.log(error);
    }
    tx.hash = keccak256(payload);
    return tx;
  }
  function _parse(rawTransaction) {
    const transaction = decode(rawTransaction);
    if (transaction.length !== 9 && transaction.length !== 6) {
      logger$h.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
    }
    const tx = { nonce: handleNumber(transaction[0]).toNumber(), gasPrice: handleNumber(transaction[1]), gasLimit: handleNumber(transaction[2]), to: handleAddress(transaction[3]), value: handleNumber(transaction[4]), data: transaction[5], chainId: 0 };
    if (transaction.length === 6) {
      return tx;
    }
    try {
      tx.v = BigNumber.from(transaction[6]).toNumber();
    } catch (error) {
      console.log(error);
      return tx;
    }
    tx.r = hexZeroPad(transaction[7], 32);
    tx.s = hexZeroPad(transaction[8], 32);
    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
      tx.chainId = tx.v;
      tx.v = 0;
    } else {
      tx.chainId = Math.floor((tx.v - 35) / 2);
      if (tx.chainId < 0) {
        tx.chainId = 0;
      }
      let recoveryParam = tx.v - 27;
      const raw = transaction.slice(0, 6);
      if (tx.chainId !== 0) {
        raw.push(hexlify(tx.chainId));
        raw.push("0x");
        raw.push("0x");
        recoveryParam -= tx.chainId * 2 + 8;
      }
      const digest9 = keccak256(encode(raw));
      try {
        tx.from = recoverAddress(digest9, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam });
      } catch (error) {
        console.log(error);
      }
      tx.hash = keccak256(rawTransaction);
    }
    tx.type = null;
    return tx;
  }
  function parse(rawTransaction) {
    const payload = arrayify(rawTransaction);
    if (payload[0] > 127) {
      return _parse(payload);
    }
    switch (payload[0]) {
      case 1:
        return _parseEip2930(payload);
      default:
        break;
    }
    return logger$h.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, { operation: "parseTransaction", transactionType: payload[0] });
  }
  var version$d = "contracts/5.1.1";
  var __awaiter$3 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$i = new Logger(version$d);
  var allowedTransactionKeys$2 = { chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true, type: true, accessList: true };
  function resolveName(resolver, nameOrPromise) {
    return __awaiter$3(this, void 0, void 0, function* () {
      const name2 = yield nameOrPromise;
      try {
        return getAddress(name2);
      } catch (error) {
      }
      if (!resolver) {
        logger$i.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, { operation: "resolveName" });
      }
      const address = yield resolver.resolveName(name2);
      if (address == null) {
        logger$i.throwArgumentError("resolver or addr is not configured for ENS name", "name", name2);
      }
      return address;
    });
  }
  function resolveAddresses(resolver, value, paramType) {
    return __awaiter$3(this, void 0, void 0, function* () {
      if (Array.isArray(paramType)) {
        return yield Promise.all(paramType.map((paramType2, index2) => {
          return resolveAddresses(resolver, Array.isArray(value) ? value[index2] : value[paramType2.name], paramType2);
        }));
      }
      if (paramType.type === "address") {
        return yield resolveName(resolver, value);
      }
      if (paramType.type === "tuple") {
        return yield resolveAddresses(resolver, value, paramType.components);
      }
      if (paramType.baseType === "array") {
        if (!Array.isArray(value)) {
          return Promise.reject(new Error("invalid value for array"));
        }
        return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));
      }
      return value;
    });
  }
  function populateTransaction(contract, fragment, args) {
    return __awaiter$3(this, void 0, void 0, function* () {
      let overrides = {};
      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        overrides = shallowCopy(args.pop());
      }
      logger$i.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
      if (contract.signer) {
        if (overrides.from) {
          overrides.from = resolveProperties({ override: resolveName(contract.signer, overrides.from), signer: contract.signer.getAddress() }).then((check) => __awaiter$3(this, void 0, void 0, function* () {
            if (getAddress(check.signer) !== check.override) {
              logger$i.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, { operation: "overrides.from" });
            }
            return check.override;
          }));
        } else {
          overrides.from = contract.signer.getAddress();
        }
      } else if (overrides.from) {
        overrides.from = resolveName(contract.provider, overrides.from);
      }
      const resolved = yield resolveProperties({ args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs), address: contract.resolvedAddress, overrides: resolveProperties(overrides) || {} });
      const data2 = contract.interface.encodeFunctionData(fragment, resolved.args);
      const tx = { data: data2, to: resolved.address };
      const ro = resolved.overrides;
      if (ro.nonce != null) {
        tx.nonce = BigNumber.from(ro.nonce).toNumber();
      }
      if (ro.gasLimit != null) {
        tx.gasLimit = BigNumber.from(ro.gasLimit);
      }
      if (ro.gasPrice != null) {
        tx.gasPrice = BigNumber.from(ro.gasPrice);
      }
      if (ro.from != null) {
        tx.from = ro.from;
      }
      if (ro.type != null) {
        tx.type = ro.type;
      }
      if (ro.accessList != null) {
        tx.accessList = accessListify(ro.accessList);
      }
      if (tx.gasLimit == null && fragment.gas != null) {
        let intrinsic = 21e3;
        const bytes = arrayify(data2);
        for (let i = 0; i < bytes.length; i++) {
          intrinsic += 4;
          if (bytes[i]) {
            intrinsic += 64;
          }
        }
        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
      }
      if (ro.value) {
        const roValue = BigNumber.from(ro.value);
        if (!roValue.isZero() && !fragment.payable) {
          logger$i.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, { operation: "overrides.value", value: overrides.value });
        }
        tx.value = roValue;
      }
      delete overrides.nonce;
      delete overrides.gasLimit;
      delete overrides.gasPrice;
      delete overrides.from;
      delete overrides.value;
      delete overrides.type;
      delete overrides.accessList;
      const leftovers = Object.keys(overrides).filter((key2) => overrides[key2] != null);
      if (leftovers.length) {
        logger$i.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, { operation: "overrides", overrides: leftovers });
      }
      return tx;
    });
  }
  function buildPopulate(contract, fragment) {
    return function(...args) {
      return populateTransaction(contract, fragment, args);
    };
  }
  function buildEstimate(contract, fragment) {
    const signerOrProvider = contract.signer || contract.provider;
    return function(...args) {
      return __awaiter$3(this, void 0, void 0, function* () {
        if (!signerOrProvider) {
          logger$i.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "estimateGas" });
        }
        const tx = yield populateTransaction(contract, fragment, args);
        return yield signerOrProvider.estimateGas(tx);
      });
    };
  }
  function buildCall(contract, fragment, collapseSimple) {
    const signerOrProvider = contract.signer || contract.provider;
    return function(...args) {
      return __awaiter$3(this, void 0, void 0, function* () {
        let blockTag = void 0;
        if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
          const overrides = shallowCopy(args.pop());
          if (overrides.blockTag != null) {
            blockTag = yield overrides.blockTag;
          }
          delete overrides.blockTag;
          args.push(overrides);
        }
        if (contract.deployTransaction != null) {
          yield contract._deployed(blockTag);
        }
        const tx = yield populateTransaction(contract, fragment, args);
        const result = yield signerOrProvider.call(tx, blockTag);
        try {
          let value = contract.interface.decodeFunctionResult(fragment, result);
          if (collapseSimple && fragment.outputs.length === 1) {
            value = value[0];
          }
          return value;
        } catch (error) {
          if (error.code === Logger.errors.CALL_EXCEPTION) {
            error.address = contract.address;
            error.args = args;
            error.transaction = tx;
          }
          throw error;
        }
      });
    };
  }
  function buildSend(contract, fragment) {
    return function(...args) {
      return __awaiter$3(this, void 0, void 0, function* () {
        if (!contract.signer) {
          logger$i.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction" });
        }
        if (contract.deployTransaction != null) {
          yield contract._deployed();
        }
        const txRequest = yield populateTransaction(contract, fragment, args);
        const tx = yield contract.signer.sendTransaction(txRequest);
        const wait = tx.wait.bind(tx);
        tx.wait = (confirmations) => {
          return wait(confirmations).then((receipt) => {
            receipt.events = receipt.logs.map((log) => {
              let event = deepCopy(log);
              let parsed = null;
              try {
                parsed = contract.interface.parseLog(log);
              } catch (e) {
              }
              if (parsed) {
                event.args = parsed.args;
                event.decode = (data2, topics) => {
                  return contract.interface.decodeEventLog(parsed.eventFragment, data2, topics);
                };
                event.event = parsed.name;
                event.eventSignature = parsed.signature;
              }
              event.removeListener = () => {
                return contract.provider;
              };
              event.getBlock = () => {
                return contract.provider.getBlock(receipt.blockHash);
              };
              event.getTransaction = () => {
                return contract.provider.getTransaction(receipt.transactionHash);
              };
              event.getTransactionReceipt = () => {
                return Promise.resolve(receipt);
              };
              return event;
            });
            return receipt;
          });
        };
        return tx;
      });
    };
  }
  function buildDefault(contract, fragment, collapseSimple) {
    if (fragment.constant) {
      return buildCall(contract, fragment, collapseSimple);
    }
    return buildSend(contract, fragment);
  }
  function getEventTag(filter) {
    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
      return "*";
    }
    return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
      if (Array.isArray(topic)) {
        return topic.join("|");
      }
      return topic;
    }).join(":") : "");
  }
  var RunningEvent = class {
    constructor(tag, filter) {
      defineReadOnly(this, "tag", tag);
      defineReadOnly(this, "filter", filter);
      this._listeners = [];
    }
    addListener(listener, once) {
      this._listeners.push({ listener, once });
    }
    removeListener(listener) {
      let done = false;
      this._listeners = this._listeners.filter((item) => {
        if (done || item.listener !== listener) {
          return true;
        }
        done = true;
        return false;
      });
    }
    removeAllListeners() {
      this._listeners = [];
    }
    listeners() {
      return this._listeners.map((i) => i.listener);
    }
    listenerCount() {
      return this._listeners.length;
    }
    run(args) {
      const listenerCount = this.listenerCount();
      this._listeners = this._listeners.filter((item) => {
        const argsCopy = args.slice();
        setTimeout(() => {
          item.listener.apply(this, argsCopy);
        }, 0);
        return !item.once;
      });
      return listenerCount;
    }
    prepareEvent(event) {
    }
    getEmit(event) {
      return [event];
    }
  };
  var ErrorRunningEvent = class extends RunningEvent {
    constructor() {
      super("error", null);
    }
  };
  var FragmentRunningEvent = class extends RunningEvent {
    constructor(address, contractInterface, fragment, topics) {
      const filter = { address };
      let topic = contractInterface.getEventTopic(fragment);
      if (topics) {
        if (topic !== topics[0]) {
          logger$i.throwArgumentError("topic mismatch", "topics", topics);
        }
        filter.topics = topics.slice();
      } else {
        filter.topics = [topic];
      }
      super(getEventTag(filter), filter);
      defineReadOnly(this, "address", address);
      defineReadOnly(this, "interface", contractInterface);
      defineReadOnly(this, "fragment", fragment);
    }
    prepareEvent(event) {
      super.prepareEvent(event);
      event.event = this.fragment.name;
      event.eventSignature = this.fragment.format();
      event.decode = (data2, topics) => {
        return this.interface.decodeEventLog(this.fragment, data2, topics);
      };
      try {
        event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
      } catch (error) {
        event.args = null;
        event.decodeError = error;
      }
    }
    getEmit(event) {
      const errors = checkResultErrors(event.args);
      if (errors.length) {
        throw errors[0].error;
      }
      const args = (event.args || []).slice();
      args.push(event);
      return args;
    }
  };
  var WildcardRunningEvent = class extends RunningEvent {
    constructor(address, contractInterface) {
      super("*", { address });
      defineReadOnly(this, "address", address);
      defineReadOnly(this, "interface", contractInterface);
    }
    prepareEvent(event) {
      super.prepareEvent(event);
      try {
        const parsed = this.interface.parseLog(event);
        event.event = parsed.name;
        event.eventSignature = parsed.signature;
        event.decode = (data2, topics) => {
          return this.interface.decodeEventLog(parsed.eventFragment, data2, topics);
        };
        event.args = parsed.args;
      } catch (error) {
      }
    }
  };
  var BaseContract = class {
    constructor(addressOrName, contractInterface, signerOrProvider) {
      logger$i.checkNew(new.target, Contract);
      defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
      if (signerOrProvider == null) {
        defineReadOnly(this, "provider", null);
        defineReadOnly(this, "signer", null);
      } else if (Signer.isSigner(signerOrProvider)) {
        defineReadOnly(this, "provider", signerOrProvider.provider || null);
        defineReadOnly(this, "signer", signerOrProvider);
      } else if (Provider.isProvider(signerOrProvider)) {
        defineReadOnly(this, "provider", signerOrProvider);
        defineReadOnly(this, "signer", null);
      } else {
        logger$i.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
      }
      defineReadOnly(this, "callStatic", {});
      defineReadOnly(this, "estimateGas", {});
      defineReadOnly(this, "functions", {});
      defineReadOnly(this, "populateTransaction", {});
      defineReadOnly(this, "filters", {});
      {
        const uniqueFilters = {};
        Object.keys(this.interface.events).forEach((eventSignature) => {
          const event = this.interface.events[eventSignature];
          defineReadOnly(this.filters, eventSignature, (...args) => {
            return { address: this.address, topics: this.interface.encodeFilterTopics(event, args) };
          });
          if (!uniqueFilters[event.name]) {
            uniqueFilters[event.name] = [];
          }
          uniqueFilters[event.name].push(eventSignature);
        });
        Object.keys(uniqueFilters).forEach((name2) => {
          const filters = uniqueFilters[name2];
          if (filters.length === 1) {
            defineReadOnly(this.filters, name2, this.filters[filters[0]]);
          } else {
            logger$i.warn(`Duplicate definition of ${name2} (${filters.join(", ")})`);
          }
        });
      }
      defineReadOnly(this, "_runningEvents", {});
      defineReadOnly(this, "_wrappedEmits", {});
      if (addressOrName == null) {
        logger$i.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
      }
      defineReadOnly(this, "address", addressOrName);
      if (this.provider) {
        defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
      } else {
        try {
          defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
        } catch (error) {
          logger$i.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new Contract" });
        }
      }
      const uniqueNames = {};
      const uniqueSignatures = {};
      Object.keys(this.interface.functions).forEach((signature2) => {
        const fragment = this.interface.functions[signature2];
        if (uniqueSignatures[signature2]) {
          logger$i.warn(`Duplicate ABI entry for ${JSON.stringify(name)}`);
          return;
        }
        uniqueSignatures[signature2] = true;
        {
          const name2 = fragment.name;
          if (!uniqueNames[name2]) {
            uniqueNames[name2] = [];
          }
          uniqueNames[name2].push(signature2);
        }
        if (this[signature2] == null) {
          defineReadOnly(this, signature2, buildDefault(this, fragment, true));
        }
        if (this.functions[signature2] == null) {
          defineReadOnly(this.functions, signature2, buildDefault(this, fragment, false));
        }
        if (this.callStatic[signature2] == null) {
          defineReadOnly(this.callStatic, signature2, buildCall(this, fragment, true));
        }
        if (this.populateTransaction[signature2] == null) {
          defineReadOnly(this.populateTransaction, signature2, buildPopulate(this, fragment));
        }
        if (this.estimateGas[signature2] == null) {
          defineReadOnly(this.estimateGas, signature2, buildEstimate(this, fragment));
        }
      });
      Object.keys(uniqueNames).forEach((name2) => {
        const signatures = uniqueNames[name2];
        if (signatures.length > 1) {
          return;
        }
        const signature2 = signatures[0];
        try {
          if (this[name2] == null) {
            defineReadOnly(this, name2, this[signature2]);
          }
        } catch (e) {
        }
        if (this.functions[name2] == null) {
          defineReadOnly(this.functions, name2, this.functions[signature2]);
        }
        if (this.callStatic[name2] == null) {
          defineReadOnly(this.callStatic, name2, this.callStatic[signature2]);
        }
        if (this.populateTransaction[name2] == null) {
          defineReadOnly(this.populateTransaction, name2, this.populateTransaction[signature2]);
        }
        if (this.estimateGas[name2] == null) {
          defineReadOnly(this.estimateGas, name2, this.estimateGas[signature2]);
        }
      });
    }
    static getContractAddress(transaction) {
      return getContractAddress(transaction);
    }
    static getInterface(contractInterface) {
      if (Interface.isInterface(contractInterface)) {
        return contractInterface;
      }
      return new Interface(contractInterface);
    }
    deployed() {
      return this._deployed();
    }
    _deployed(blockTag) {
      if (!this._deployedPromise) {
        if (this.deployTransaction) {
          this._deployedPromise = this.deployTransaction.wait().then(() => {
            return this;
          });
        } else {
          this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
            if (code === "0x") {
              logger$i.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, { contractAddress: this.address, operation: "getDeployed" });
            }
            return this;
          });
        }
      }
      return this._deployedPromise;
    }
    fallback(overrides) {
      if (!this.signer) {
        logger$i.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
      }
      const tx = shallowCopy(overrides || {});
      ["from", "to"].forEach(function(key2) {
        if (tx[key2] == null) {
          return;
        }
        logger$i.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
      });
      tx.to = this.resolvedAddress;
      return this.deployed().then(() => {
        return this.signer.sendTransaction(tx);
      });
    }
    connect(signerOrProvider) {
      if (typeof signerOrProvider === "string") {
        signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
      }
      const contract = new this.constructor(this.address, this.interface, signerOrProvider);
      if (this.deployTransaction) {
        defineReadOnly(contract, "deployTransaction", this.deployTransaction);
      }
      return contract;
    }
    attach(addressOrName) {
      return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
    }
    static isIndexed(value) {
      return Indexed.isIndexed(value);
    }
    _normalizeRunningEvent(runningEvent) {
      if (this._runningEvents[runningEvent.tag]) {
        return this._runningEvents[runningEvent.tag];
      }
      return runningEvent;
    }
    _getRunningEvent(eventName) {
      if (typeof eventName === "string") {
        if (eventName === "error") {
          return this._normalizeRunningEvent(new ErrorRunningEvent());
        }
        if (eventName === "event") {
          return this._normalizeRunningEvent(new RunningEvent("event", null));
        }
        if (eventName === "*") {
          return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
        }
        const fragment = this.interface.getEvent(eventName);
        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
      }
      if (eventName.topics && eventName.topics.length > 0) {
        try {
          const topic = eventName.topics[0];
          if (typeof topic !== "string") {
            throw new Error("invalid topic");
          }
          const fragment = this.interface.getEvent(topic);
          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
        } catch (error) {
        }
        const filter = { address: this.address, topics: eventName.topics };
        return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
      }
      return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
    }
    _checkRunningEvents(runningEvent) {
      if (runningEvent.listenerCount() === 0) {
        delete this._runningEvents[runningEvent.tag];
        const emit = this._wrappedEmits[runningEvent.tag];
        if (emit && runningEvent.filter) {
          this.provider.off(runningEvent.filter, emit);
          delete this._wrappedEmits[runningEvent.tag];
        }
      }
    }
    _wrapEvent(runningEvent, log, listener) {
      const event = deepCopy(log);
      event.removeListener = () => {
        if (!listener) {
          return;
        }
        runningEvent.removeListener(listener);
        this._checkRunningEvents(runningEvent);
      };
      event.getBlock = () => {
        return this.provider.getBlock(log.blockHash);
      };
      event.getTransaction = () => {
        return this.provider.getTransaction(log.transactionHash);
      };
      event.getTransactionReceipt = () => {
        return this.provider.getTransactionReceipt(log.transactionHash);
      };
      runningEvent.prepareEvent(event);
      return event;
    }
    _addEventListener(runningEvent, listener, once) {
      if (!this.provider) {
        logger$i.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
      }
      runningEvent.addListener(listener, once);
      this._runningEvents[runningEvent.tag] = runningEvent;
      if (!this._wrappedEmits[runningEvent.tag]) {
        const wrappedEmit = (log) => {
          let event = this._wrapEvent(runningEvent, log, listener);
          if (event.decodeError == null) {
            try {
              const args = runningEvent.getEmit(event);
              this.emit(runningEvent.filter, ...args);
            } catch (error) {
              event.decodeError = error.error;
            }
          }
          if (runningEvent.filter != null) {
            this.emit("event", event);
          }
          if (event.decodeError != null) {
            this.emit("error", event.decodeError, event);
          }
        };
        this._wrappedEmits[runningEvent.tag] = wrappedEmit;
        if (runningEvent.filter != null) {
          this.provider.on(runningEvent.filter, wrappedEmit);
        }
      }
    }
    queryFilter(event, fromBlockOrBlockhash, toBlock) {
      const runningEvent = this._getRunningEvent(event);
      const filter = shallowCopy(runningEvent.filter);
      if (typeof fromBlockOrBlockhash === "string" && isHexString(fromBlockOrBlockhash, 32)) {
        if (toBlock != null) {
          logger$i.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
        }
        filter.blockHash = fromBlockOrBlockhash;
      } else {
        filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
        filter.toBlock = toBlock != null ? toBlock : "latest";
      }
      return this.provider.getLogs(filter).then((logs) => {
        return logs.map((log) => this._wrapEvent(runningEvent, log, null));
      });
    }
    on(event, listener) {
      this._addEventListener(this._getRunningEvent(event), listener, false);
      return this;
    }
    once(event, listener) {
      this._addEventListener(this._getRunningEvent(event), listener, true);
      return this;
    }
    emit(eventName, ...args) {
      if (!this.provider) {
        return false;
      }
      const runningEvent = this._getRunningEvent(eventName);
      const result = runningEvent.run(args) > 0;
      this._checkRunningEvents(runningEvent);
      return result;
    }
    listenerCount(eventName) {
      if (!this.provider) {
        return 0;
      }
      if (eventName == null) {
        return Object.keys(this._runningEvents).reduce((accum, key2) => {
          return accum + this._runningEvents[key2].listenerCount();
        }, 0);
      }
      return this._getRunningEvent(eventName).listenerCount();
    }
    listeners(eventName) {
      if (!this.provider) {
        return [];
      }
      if (eventName == null) {
        const result = [];
        for (let tag in this._runningEvents) {
          this._runningEvents[tag].listeners().forEach((listener) => {
            result.push(listener);
          });
        }
        return result;
      }
      return this._getRunningEvent(eventName).listeners();
    }
    removeAllListeners(eventName) {
      if (!this.provider) {
        return this;
      }
      if (eventName == null) {
        for (const tag in this._runningEvents) {
          const runningEvent2 = this._runningEvents[tag];
          runningEvent2.removeAllListeners();
          this._checkRunningEvents(runningEvent2);
        }
        return this;
      }
      const runningEvent = this._getRunningEvent(eventName);
      runningEvent.removeAllListeners();
      this._checkRunningEvents(runningEvent);
      return this;
    }
    off(eventName, listener) {
      if (!this.provider) {
        return this;
      }
      const runningEvent = this._getRunningEvent(eventName);
      runningEvent.removeListener(listener);
      this._checkRunningEvents(runningEvent);
      return this;
    }
    removeListener(eventName, listener) {
      return this.off(eventName, listener);
    }
  };
  var Contract = class extends BaseContract {
  };
  var ContractFactory = class {
    constructor(contractInterface, bytecode, signer) {
      let bytecodeHex = null;
      if (typeof bytecode === "string") {
        bytecodeHex = bytecode;
      } else if (isBytes(bytecode)) {
        bytecodeHex = hexlify(bytecode);
      } else if (bytecode && typeof bytecode.object === "string") {
        bytecodeHex = bytecode.object;
      } else {
        bytecodeHex = "!";
      }
      if (bytecodeHex.substring(0, 2) !== "0x") {
        bytecodeHex = "0x" + bytecodeHex;
      }
      if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {
        logger$i.throwArgumentError("invalid bytecode", "bytecode", bytecode);
      }
      if (signer && !Signer.isSigner(signer)) {
        logger$i.throwArgumentError("invalid signer", "signer", signer);
      }
      defineReadOnly(this, "bytecode", bytecodeHex);
      defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
      defineReadOnly(this, "signer", signer || null);
    }
    getDeployTransaction(...args) {
      let tx = {};
      if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        tx = shallowCopy(args.pop());
        for (const key2 in tx) {
          if (!allowedTransactionKeys$2[key2]) {
            throw new Error("unknown transaction override " + key2);
          }
        }
      }
      ["data", "from", "to"].forEach((key2) => {
        if (tx[key2] == null) {
          return;
        }
        logger$i.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
      });
      logger$i.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
      tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));
      return tx;
    }
    deploy(...args) {
      return __awaiter$3(this, void 0, void 0, function* () {
        let overrides = {};
        if (args.length === this.interface.deploy.inputs.length + 1) {
          overrides = args.pop();
        }
        logger$i.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
        const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
        params.push(overrides);
        const unsignedTx = this.getDeployTransaction(...params);
        const tx = yield this.signer.sendTransaction(unsignedTx);
        const address = getStatic(this.constructor, "getContractAddress")(tx);
        const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
        defineReadOnly(contract, "deployTransaction", tx);
        return contract;
      });
    }
    attach(address) {
      return this.constructor.getContract(address, this.interface, this.signer);
    }
    connect(signer) {
      return new this.constructor(this.interface, this.bytecode, signer);
    }
    static fromSolidity(compilerOutput, signer) {
      if (compilerOutput == null) {
        logger$i.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
      }
      if (typeof compilerOutput === "string") {
        compilerOutput = JSON.parse(compilerOutput);
      }
      const abi = compilerOutput.abi;
      let bytecode = null;
      if (compilerOutput.bytecode) {
        bytecode = compilerOutput.bytecode;
      } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
        bytecode = compilerOutput.evm.bytecode;
      }
      return new this(abi, bytecode, signer);
    }
    static getInterface(contractInterface) {
      return Contract.getInterface(contractInterface);
    }
    static getContractAddress(tx) {
      return getContractAddress(tx);
    }
    static getContract(address, contractInterface, signer) {
      return new Contract(address, contractInterface, signer);
    }
  };
  var BaseX = class {
    constructor(alphabet) {
      defineReadOnly(this, "alphabet", alphabet);
      defineReadOnly(this, "base", alphabet.length);
      defineReadOnly(this, "_alphabetMap", {});
      defineReadOnly(this, "_leader", alphabet.charAt(0));
      for (let i = 0; i < alphabet.length; i++) {
        this._alphabetMap[alphabet.charAt(i)] = i;
      }
    }
    encode(value) {
      let source = arrayify(value);
      if (source.length === 0) {
        return "";
      }
      let digits = [0];
      for (let i = 0; i < source.length; ++i) {
        let carry = source[i];
        for (let j = 0; j < digits.length; ++j) {
          carry += digits[j] << 8;
          digits[j] = carry % this.base;
          carry = carry / this.base | 0;
        }
        while (carry > 0) {
          digits.push(carry % this.base);
          carry = carry / this.base | 0;
        }
      }
      let string = "";
      for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
        string += this._leader;
      }
      for (let q = digits.length - 1; q >= 0; --q) {
        string += this.alphabet[digits[q]];
      }
      return string;
    }
    decode(value) {
      if (typeof value !== "string") {
        throw new TypeError("Expected String");
      }
      let bytes = [];
      if (value.length === 0) {
        return new Uint8Array(bytes);
      }
      bytes.push(0);
      for (let i = 0; i < value.length; i++) {
        let byte = this._alphabetMap[value[i]];
        if (byte === void 0) {
          throw new Error("Non-base" + this.base + " character");
        }
        let carry = byte;
        for (let j = 0; j < bytes.length; ++j) {
          carry += bytes[j] * this.base;
          bytes[j] = carry & 255;
          carry >>= 8;
        }
        while (carry > 0) {
          bytes.push(carry & 255);
          carry >>= 8;
        }
      }
      for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
        bytes.push(0);
      }
      return arrayify(new Uint8Array(bytes.reverse()));
    }
  };
  var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
  var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  var SupportedAlgorithm;
  (function(SupportedAlgorithm2) {
    SupportedAlgorithm2["sha256"] = "sha256";
    SupportedAlgorithm2["sha512"] = "sha512";
  })(SupportedAlgorithm || (SupportedAlgorithm = {}));
  var version$e = "sha2/5.1.0";
  var logger$j = new Logger(version$e);
  function ripemd160$1(data2) {
    return "0x" + hash_1.ripemd160().update(arrayify(data2)).digest("hex");
  }
  function sha256$1(data2) {
    return "0x" + hash_1.sha256().update(arrayify(data2)).digest("hex");
  }
  function sha512$1(data2) {
    return "0x" + hash_1.sha512().update(arrayify(data2)).digest("hex");
  }
  function computeHmac(algorithm, key2, data2) {
    if (!SupportedAlgorithm[algorithm]) {
      logger$j.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, { operation: "hmac", algorithm });
    }
    return "0x" + hash_1.hmac(hash_1[algorithm], arrayify(key2)).update(arrayify(data2)).digest("hex");
  }
  function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
    password = arrayify(password);
    salt = arrayify(salt);
    let hLen;
    let l = 1;
    const DK = new Uint8Array(keylen);
    const block1 = new Uint8Array(salt.length + 4);
    block1.set(salt);
    let r2;
    let T;
    for (let i = 1; i <= l; i++) {
      block1[salt.length] = i >> 24 & 255;
      block1[salt.length + 1] = i >> 16 & 255;
      block1[salt.length + 2] = i >> 8 & 255;
      block1[salt.length + 3] = i & 255;
      let U = arrayify(computeHmac(hashAlgorithm, password, block1));
      if (!hLen) {
        hLen = U.length;
        T = new Uint8Array(hLen);
        l = Math.ceil(keylen / hLen);
        r2 = keylen - (l - 1) * hLen;
      }
      T.set(U);
      for (let j = 1; j < iterations; j++) {
        U = arrayify(computeHmac(hashAlgorithm, password, U));
        for (let k = 0; k < hLen; k++)
          T[k] ^= U[k];
      }
      const destPos = (i - 1) * hLen;
      const len = i === l ? r2 : hLen;
      DK.set(arrayify(T).slice(0, len), destPos);
    }
    return hexlify(DK);
  }
  var version$f = "wordlists/5.1.0";
  var exportWordlist = false;
  var logger$k = new Logger(version$f);
  var Wordlist = class {
    constructor(locale) {
      logger$k.checkAbstract(new.target, Wordlist);
      defineReadOnly(this, "locale", locale);
    }
    split(mnemonic) {
      return mnemonic.toLowerCase().split(/ +/g);
    }
    join(words2) {
      return words2.join(" ");
    }
    static check(wordlist2) {
      const words2 = [];
      for (let i = 0; i < 2048; i++) {
        const word = wordlist2.getWord(i);
        if (i !== wordlist2.getWordIndex(word)) {
          return "0x";
        }
        words2.push(word);
      }
      return id(words2.join("\n") + "\n");
    }
    static register(lang, name2) {
      if (!name2) {
        name2 = lang.locale;
      }
      if (exportWordlist) {
        try {
          const anyGlobal2 = window;
          if (anyGlobal2._ethers && anyGlobal2._ethers.wordlists) {
            if (!anyGlobal2._ethers.wordlists[name2]) {
              defineReadOnly(anyGlobal2._ethers.wordlists, name2, lang);
            }
          }
        } catch (error) {
        }
      }
    }
  };
  var words = "AbdikaceAbecedaAdresaAgreseAkceAktovkaAlejAlkoholAmputaceAnanasAndulkaAnekdotaAnketaAntikaAnulovatArchaAroganceAsfaltAsistentAspiraceAstmaAstronomAtlasAtletikaAtolAutobusAzylBabkaBachorBacilBaculkaBadatelBagetaBagrBahnoBakterieBaladaBaletkaBalkonBalonekBalvanBalzaBambusBankomatBarbarBaretBarmanBarokoBarvaBaterkaBatohBavlnaBazalkaBazilikaBazukaBednaBeranBesedaBestieBetonBezinkaBezmocBeztakBicyklBidloBiftekBikinyBilanceBiografBiologBitvaBizonBlahobytBlatouchBlechaBleduleBleskBlikatBliznaBlokovatBlouditBludBobekBobrBodlinaBodnoutBohatostBojkotBojovatBokorysBolestBorecBoroviceBotaBoubelBouchatBoudaBouleBouratBoxerBradavkaBramboraBrankaBratrBreptaBriketaBrkoBrlohBronzBroskevBrunetkaBrusinkaBrzdaBrzyBublinaBubnovatBuchtaBuditelBudkaBudovaBufetBujarostBukviceBuldokBulvaBundaBunkrBurzaButikBuvolBuzolaBydletBylinaBytovkaBzukotCapartCarevnaCedrCeduleCejchCejnCelaCelerCelkemCelniceCeninaCennostCenovkaCentrumCenzorCestopisCetkaChalupaChapadloCharitaChataChechtatChemieChichotChirurgChladChlebaChlubitChmelChmuraChobotChocholChodbaCholeraChomoutChopitChorobaChovChrapotChrlitChrtChrupChtivostChudinaChutnatChvatChvilkaChvostChybaChystatChytitCibuleCigaretaCihelnaCihlaCinkotCirkusCisternaCitaceCitrusCizinecCizostClonaCokolivCouvatCtitelCtnostCudnostCuketaCukrCupotCvaknoutCvalCvikCvrkotCyklistaDalekoDarebaDatelDatumDceraDebataDechovkaDecibelDeficitDeflaceDeklDekretDemokratDepreseDerbyDeskaDetektivDikobrazDiktovatDiodaDiplomDiskDisplejDivadloDivochDlahaDlouhoDluhopisDnesDobroDobytekDocentDochutitDodnesDohledDohodaDohraDojemDojniceDokladDokolaDoktorDokumentDolarDolevaDolinaDomaDominantDomluvitDomovDonutitDopadDopisDoplnitDoposudDoprovodDopustitDorazitDorostDortDosahDoslovDostatekDosudDosytaDotazDotekDotknoutDoufatDoutnatDovozceDozaduDoznatDozorceDrahotaDrakDramatikDravecDrazeDrdolDrobnostDrogerieDrozdDrsnostDrtitDrzostDubenDuchovnoDudekDuhaDuhovkaDusitDusnoDutostDvojiceDvorecDynamitEkologEkonomieElektronElipsaEmailEmiseEmoceEmpatieEpizodaEpochaEpopejEposEsejEsenceEskortaEskymoEtiketaEuforieEvoluceExekuceExkurzeExpediceExplozeExportExtraktFackaFajfkaFakultaFanatikFantazieFarmacieFavoritFazoleFederaceFejetonFenkaFialkaFigurantFilozofFiltrFinanceFintaFixaceFjordFlanelFlirtFlotilaFondFosforFotbalFotkaFotonFrakceFreskaFrontaFukarFunkceFyzikaGalejeGarantGenetikaGeologGilotinaGlazuraGlejtGolemGolfistaGotikaGrafGramofonGranuleGrepGrilGrogGroteskaGumaHadiceHadrHalaHalenkaHanbaHanopisHarfaHarpunaHavranHebkostHejkalHejnoHejtmanHektarHelmaHematomHerecHernaHesloHezkyHistorikHladovkaHlasivkyHlavaHledatHlenHlodavecHlohHloupostHltatHlubinaHluchotaHmatHmotaHmyzHnisHnojivoHnoutHoblinaHobojHochHodinyHodlatHodnotaHodovatHojnostHokejHolinkaHolkaHolubHomoleHonitbaHonoraceHoralHordaHorizontHorkoHorlivecHormonHorninaHoroskopHorstvoHospodaHostinaHotovostHoubaHoufHoupatHouskaHovorHradbaHraniceHravostHrazdaHrbolekHrdinaHrdloHrdostHrnekHrobkaHromadaHrotHroudaHrozenHrstkaHrubostHryzatHubenostHubnoutHudbaHukotHumrHusitaHustotaHvozdHybnostHydrantHygienaHymnaHysterikIdylkaIhnedIkonaIluzeImunitaInfekceInflaceInkasoInovaceInspekceInternetInvalidaInvestorInzerceIronieJablkoJachtaJahodaJakmileJakostJalovecJantarJarmarkJaroJasanJasnoJatkaJavorJazykJedinecJedleJednatelJehlanJekotJelenJelitoJemnostJenomJepiceJeseterJevitJezdecJezeroJinakJindyJinochJiskraJistotaJitrniceJizvaJmenovatJogurtJurtaKabaretKabelKabinetKachnaKadetKadidloKahanKajakKajutaKakaoKaktusKalamitaKalhotyKalibrKalnostKameraKamkolivKamnaKanibalKanoeKantorKapalinaKapelaKapitolaKapkaKapleKapotaKaprKapustaKapybaraKaramelKarotkaKartonKasaKatalogKatedraKauceKauzaKavalecKazajkaKazetaKazivostKdekolivKdesiKedlubenKempKeramikaKinoKlacekKladivoKlamKlapotKlasikaKlaunKlecKlenbaKlepatKlesnoutKlidKlimaKlisnaKloboukKlokanKlopaKloubKlubovnaKlusatKluzkostKmenKmitatKmotrKnihaKnotKoaliceKoberecKobkaKoblihaKobylaKocourKohoutKojenecKokosKoktejlKolapsKoledaKolizeKoloKomandoKometaKomikKomnataKomoraKompasKomunitaKonatKonceptKondiceKonecKonfeseKongresKoninaKonkursKontaktKonzervaKopanecKopieKopnoutKoprovkaKorbelKorektorKormidloKoroptevKorpusKorunaKorytoKorzetKosatecKostkaKotelKotletaKotoulKoukatKoupelnaKousekKouzloKovbojKozaKozorohKrabiceKrachKrajinaKralovatKrasopisKravataKreditKrejcarKresbaKrevetaKriketKritikKrizeKrkavecKrmelecKrmivoKrocanKrokKronikaKropitKroupaKrovkaKrtekKruhadloKrupiceKrutostKrvinkaKrychleKryptaKrystalKrytKudlankaKufrKujnostKuklaKulajdaKulichKulkaKulometKulturaKunaKupodivuKurtKurzorKutilKvalitaKvasinkaKvestorKynologKyselinaKytaraKyticeKytkaKytovecKyvadloLabradorLachtanLadnostLaikLakomecLamelaLampaLanovkaLasiceLasoLasturaLatinkaLavinaLebkaLeckdyLedenLedniceLedovkaLedvinaLegendaLegieLegraceLehceLehkostLehnoutLektvarLenochodLentilkaLepenkaLepidloLetadloLetecLetmoLetokruhLevhartLevitaceLevobokLibraLichotkaLidojedLidskostLihovinaLijavecLilekLimetkaLinieLinkaLinoleumListopadLitinaLitovatLobistaLodivodLogikaLogopedLokalitaLoketLomcovatLopataLopuchLordLososLotrLoudalLouhLoukaLouskatLovecLstivostLucernaLuciferLumpLuskLustraceLviceLyraLyrikaLysinaMadamMadloMagistrMahagonMajetekMajitelMajoritaMakakMakoviceMakrelaMalbaMalinaMalovatMalviceMaminkaMandleMankoMarnostMasakrMaskotMasopustMaticeMatrikaMaturitaMazanecMazivoMazlitMazurkaMdlobaMechanikMeditaceMedovinaMelasaMelounMentolkaMetlaMetodaMetrMezeraMigraceMihnoutMihuleMikinaMikrofonMilenecMilimetrMilostMimikaMincovnaMinibarMinometMinulostMiskaMistrMixovatMladostMlhaMlhovinaMlokMlsatMluvitMnichMnohemMobilMocnostModelkaModlitbaMohylaMokroMolekulaMomentkaMonarchaMonoklMonstrumMontovatMonzunMosazMoskytMostMotivaceMotorkaMotykaMouchaMoudrostMozaikaMozekMozolMramorMravenecMrkevMrtvolaMrzetMrzutostMstitelMudrcMuflonMulatMumieMuniceMusetMutaceMuzeumMuzikantMyslivecMzdaNabouratNachytatNadaceNadbytekNadhozNadobroNadpisNahlasNahnatNahodileNahraditNaivitaNajednouNajistoNajmoutNaklonitNakonecNakrmitNalevoNamazatNamluvitNanometrNaokoNaopakNaostroNapadatNapevnoNaplnitNapnoutNaposledNaprostoNaroditNarubyNarychloNasaditNasekatNaslepoNastatNatolikNavenekNavrchNavzdoryNazvatNebeNechatNeckyNedalekoNedbatNeduhNegaceNehetNehodaNejenNejprveNeklidNelibostNemilostNemocNeochotaNeonkaNepokojNerostNervNesmyslNesouladNetvorNeuronNevinaNezvykleNicotaNijakNikamNikdyNiklNikterakNitroNoclehNohaviceNominaceNoraNorekNositelNosnostNouzeNovinyNovotaNozdraNudaNudleNugetNutitNutnostNutrieNymfaObalObarvitObavaObdivObecObehnatObejmoutObezitaObhajobaObilniceObjasnitObjektObklopitOblastOblekOblibaOblohaObludaObnosObohatitObojekOboutObrazecObrnaObrubaObrysObsahObsluhaObstaratObuvObvazObvinitObvodObvykleObyvatelObzorOcasOcelOcenitOchladitOchotaOchranaOcitnoutOdbojOdbytOdchodOdcizitOdebratOdeslatOdevzdatOdezvaOdhadceOdhoditOdjetOdjinudOdkazOdkoupitOdlivOdlukaOdmlkaOdolnostOdpadOdpisOdploutOdporOdpustitOdpykatOdrazkaOdsouditOdstupOdsunOdtokOdtudOdvahaOdvetaOdvolatOdvracetOdznakOfinaOfsajdOhlasOhniskoOhradaOhrozitOhryzekOkapOkeniceOklikaOknoOkouzlitOkovyOkrasaOkresOkrsekOkruhOkupantOkurkaOkusitOlejninaOlizovatOmakOmeletaOmezitOmladinaOmlouvatOmluvaOmylOnehdyOpakovatOpasekOperaceOpiceOpilostOpisovatOporaOpoziceOpravduOprotiOrbitalOrchestrOrgieOrliceOrlojOrtelOsadaOschnoutOsikaOsivoOslavaOslepitOslnitOslovitOsnovaOsobaOsolitOspalecOstenOstrahaOstudaOstychOsvojitOteplitOtiskOtopOtrhatOtrlostOtrokOtrubyOtvorOvanoutOvarOvesOvlivnitOvoceOxidOzdobaPachatelPacientPadouchPahorekPaktPalandaPalecPalivoPalubaPamfletPamlsekPanenkaPanikaPannaPanovatPanstvoPantoflePaprikaParketaParodiePartaParukaParybaPasekaPasivitaPastelkaPatentPatronaPavoukPaznehtPazourekPeckaPedagogPejsekPekloPelotonPenaltaPendrekPenzePeriskopPeroPestrostPetardaPeticePetrolejPevninaPexesoPianistaPihaPijavicePiklePiknikPilinaPilnostPilulkaPinzetaPipetaPisatelPistolePitevnaPivnicePivovarPlacentaPlakatPlamenPlanetaPlastikaPlatitPlavidloPlazPlechPlemenoPlentaPlesPletivoPlevelPlivatPlnitPlnoPlochaPlodinaPlombaPloutPlukPlynPobavitPobytPochodPocitPoctivecPodatPodcenitPodepsatPodhledPodivitPodkladPodmanitPodnikPodobaPodporaPodrazPodstataPodvodPodzimPoeziePohankaPohnutkaPohovorPohromaPohybPointaPojistkaPojmoutPokazitPoklesPokojPokrokPokutaPokynPolednePolibekPolknoutPolohaPolynomPomaluPominoutPomlkaPomocPomstaPomysletPonechatPonorkaPonurostPopadatPopelPopisekPoplachPoprositPopsatPopudPoradcePorcePorodPoruchaPoryvPosaditPosedPosilaPoskokPoslanecPosouditPospoluPostavaPosudekPosypPotahPotkanPotleskPotomekPotravaPotupaPotvoraPoukazPoutoPouzdroPovahaPovidlaPovlakPovozPovrchPovstatPovykPovzdechPozdravPozemekPoznatekPozorPozvatPracovatPrahoryPraktikaPralesPraotecPraporekPrasePravdaPrincipPrknoProbuditProcentoProdejProfeseProhraProjektProlomitPromilePronikatPropadProrokProsbaProtonProutekProvazPrskavkaPrstenPrudkostPrutPrvekPrvohoryPsanecPsovodPstruhPtactvoPubertaPuchPudlPukavecPuklinaPukrlePultPumpaPuncPupenPusaPusinkaPustinaPutovatPutykaPyramidaPyskPytelRacekRachotRadiaceRadniceRadonRaftRagbyRaketaRakovinaRamenoRampouchRandeRarachRaritaRasovnaRastrRatolestRazanceRazidloReagovatReakceReceptRedaktorReferentReflexRejnokReklamaRekordRekrutRektorReputaceRevizeRevmaRevolverRezervaRiskovatRizikoRobotikaRodokmenRohovkaRokleRokokoRomanetoRopovodRopuchaRorejsRosolRostlinaRotmistrRotopedRotundaRoubenkaRouchoRoupRouraRovinaRovniceRozborRozchodRozdatRozeznatRozhodceRozinkaRozjezdRozkazRozlohaRozmarRozpadRozruchRozsahRoztokRozumRozvodRubrikaRuchadloRukaviceRukopisRybaRybolovRychlostRydloRypadloRytinaRyzostSadistaSahatSakoSamecSamizdatSamotaSanitkaSardinkaSasankaSatelitSazbaSazeniceSborSchovatSebrankaSeceseSedadloSedimentSedloSehnatSejmoutSekeraSektaSekundaSekvojeSemenoSenoServisSesaditSeshoraSeskokSeslatSestraSesuvSesypatSetbaSetinaSetkatSetnoutSetrvatSeverSeznamShodaShrnoutSifonSilniceSirkaSirotekSirupSituaceSkafandrSkaliskoSkanzenSkautSkeptikSkicaSkladbaSkleniceSkloSkluzSkobaSkokanSkoroSkriptaSkrzSkupinaSkvostSkvrnaSlabikaSladidloSlaninaSlastSlavnostSledovatSlepecSlevaSlezinaSlibSlinaSlizniceSlonSloupekSlovoSluchSluhaSlunceSlupkaSlzaSmaragdSmetanaSmilstvoSmlouvaSmogSmradSmrkSmrtkaSmutekSmyslSnadSnahaSnobSobotaSochaSodovkaSokolSopkaSotvaSoubojSoucitSoudceSouhlasSouladSoumrakSoupravaSousedSoutokSouvisetSpalovnaSpasitelSpisSplavSpodekSpojenecSpoluSponzorSpornostSpoustaSprchaSpustitSrandaSrazSrdceSrnaSrnecSrovnatSrpenSrstSrubStaniceStarostaStatikaStavbaStehnoStezkaStodolaStolekStopaStornoStoupatStrachStresStrhnoutStromStrunaStudnaStupniceStvolStykSubjektSubtropySucharSudostSuknoSundatSunoutSurikataSurovinaSvahSvalstvoSvetrSvatbaSvazekSvisleSvitekSvobodaSvodidloSvorkaSvrabSykavkaSykotSynekSynovecSypatSypkostSyrovostSyselSytostTabletkaTabuleTahounTajemnoTajfunTajgaTajitTajnostTaktikaTamhleTamponTancovatTanecTankerTapetaTaveninaTazatelTechnikaTehdyTekutinaTelefonTemnotaTendenceTenistaTenorTeplotaTepnaTeprveTerapieTermoskaTextilTichoTiskopisTitulekTkadlecTkaninaTlapkaTleskatTlukotTlupaTmelToaletaTopinkaTopolTorzoTouhaToulecTradiceTraktorTrampTrasaTraverzaTrefitTrestTrezorTrhavinaTrhlinaTrochuTrojiceTroskaTroubaTrpceTrpitelTrpkostTrubecTruchlitTruhliceTrusTrvatTudyTuhnoutTuhostTundraTuristaTurnajTuzemskoTvarohTvorbaTvrdostTvrzTygrTykevUbohostUbozeUbratUbrousekUbrusUbytovnaUchoUctivostUdivitUhraditUjednatUjistitUjmoutUkazatelUklidnitUklonitUkotvitUkrojitUliceUlitaUlovitUmyvadloUnavitUniformaUniknoutUpadnoutUplatnitUplynoutUpoutatUpravitUranUrazitUsednoutUsilovatUsmrtitUsnadnitUsnoutUsouditUstlatUstrnoutUtahovatUtkatUtlumitUtonoutUtopenecUtrousitUvalitUvolnitUvozovkaUzdravitUzelUzeninaUzlinaUznatVagonValchaValounVanaVandalVanilkaVaranVarhanyVarovatVcelkuVchodVdovaVedroVegetaceVejceVelbloudVeletrhVelitelVelmocVelrybaVenkovVerandaVerzeVeselkaVeskrzeVesniceVespoduVestaVeterinaVeverkaVibraceVichrVideohraVidinaVidleVilaViniceVisetVitalitaVizeVizitkaVjezdVkladVkusVlajkaVlakVlasecVlevoVlhkostVlivVlnovkaVloupatVnucovatVnukVodaVodivostVodoznakVodstvoVojenskyVojnaVojskoVolantVolbaVolitVolnoVoskovkaVozidloVozovnaVpravoVrabecVracetVrahVrataVrbaVrcholekVrhatVrstvaVrtuleVsaditVstoupitVstupVtipVybavitVybratVychovatVydatVydraVyfotitVyhledatVyhnoutVyhoditVyhraditVyhubitVyjasnitVyjetVyjmoutVyklopitVykonatVylekatVymazatVymezitVymizetVymysletVynechatVynikatVynutitVypadatVyplatitVypravitVypustitVyrazitVyrovnatVyrvatVyslovitVysokoVystavitVysunoutVysypatVytasitVytesatVytratitVyvinoutVyvolatVyvrhelVyzdobitVyznatVzaduVzbuditVzchopitVzdorVzduchVzdychatVzestupVzhledemVzkazVzlykatVznikVzorekVzpouraVztahVztekXylofonZabratZabydletZachovatZadarmoZadusitZafoukatZahltitZahoditZahradaZahynoutZajatecZajetZajistitZaklepatZakoupitZalepitZamezitZamotatZamysletZanechatZanikatZaplatitZapojitZapsatZarazitZastavitZasunoutZatajitZatemnitZatknoutZaujmoutZavalitZaveletZavinitZavolatZavrtatZazvonitZbavitZbrusuZbudovatZbytekZdalekaZdarmaZdatnostZdivoZdobitZdrojZdvihZdymadloZeleninaZemanZeminaZeptatZezaduZezdolaZhatitZhltnoutZhlubokaZhotovitZhrubaZimaZimniceZjemnitZklamatZkoumatZkratkaZkumavkaZlatoZlehkaZlobaZlomZlostZlozvykZmapovatZmarZmatekZmijeZmizetZmocnitZmodratZmrzlinaZmutovatZnakZnalostZnamenatZnovuZobrazitZotavitZoubekZoufaleZploditZpomalitZpravaZprostitZprudkaZprvuZradaZranitZrcadloZrnitostZrnoZrovnaZrychlitZrzavostZtichaZtratitZubovinaZubrZvednoutZvenkuZveselaZvonZvratZvukovodZvyk";
  var wordlist = null;
  function loadWords(lang) {
    if (wordlist != null) {
      return;
    }
    wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
    if (Wordlist.check(lang) !== "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a") {
      wordlist = null;
      throw new Error("BIP39 Wordlist for en (English) FAILED");
    }
  }
  var LangCz = class extends Wordlist {
    constructor() {
      super("cz");
    }
    getWord(index2) {
      loadWords(this);
      return wordlist[index2];
    }
    getWordIndex(word) {
      loadWords(this);
      return wordlist.indexOf(word);
    }
  };
  var langCz = new LangCz();
  Wordlist.register(langCz);
  var words$1 = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
  var wordlist$1 = null;
  function loadWords$1(lang) {
    if (wordlist$1 != null) {
      return;
    }
    wordlist$1 = words$1.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
    if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
      wordlist$1 = null;
      throw new Error("BIP39 Wordlist for en (English) FAILED");
    }
  }
  var LangEn = class extends Wordlist {
    constructor() {
      super("en");
    }
    getWord(index2) {
      loadWords$1(this);
      return wordlist$1[index2];
    }
    getWordIndex(word) {
      loadWords$1(this);
      return wordlist$1.indexOf(word);
    }
  };
  var langEn = new LangEn();
  Wordlist.register(langEn);
  var words$2 = "A/bacoAbdomenAbejaAbiertoAbogadoAbonoAbortoAbrazoAbrirAbueloAbusoAcabarAcademiaAccesoAccio/nAceiteAcelgaAcentoAceptarA/cidoAclararAcne/AcogerAcosoActivoActoActrizActuarAcudirAcuerdoAcusarAdictoAdmitirAdoptarAdornoAduanaAdultoAe/reoAfectarAficio/nAfinarAfirmarA/gilAgitarAgoni/aAgostoAgotarAgregarAgrioAguaAgudoA/guilaAgujaAhogoAhorroAireAislarAjedrezAjenoAjusteAlacra/nAlambreAlarmaAlbaA/lbumAlcaldeAldeaAlegreAlejarAlertaAletaAlfilerAlgaAlgodo/nAliadoAlientoAlivioAlmaAlmejaAlmi/barAltarAltezaAltivoAltoAlturaAlumnoAlzarAmableAmanteAmapolaAmargoAmasarA/mbarA/mbitoAmenoAmigoAmistadAmorAmparoAmplioAnchoAncianoAnclaAndarAnde/nAnemiaA/nguloAnilloA/nimoAni/sAnotarAntenaAntiguoAntojoAnualAnularAnuncioA~adirA~ejoA~oApagarAparatoApetitoApioAplicarApodoAporteApoyoAprenderAprobarApuestaApuroAradoAra~aArarA/rbitroA/rbolArbustoArchivoArcoArderArdillaArduoA/reaA/ridoAriesArmoni/aArne/sAromaArpaArpo/nArregloArrozArrugaArteArtistaAsaAsadoAsaltoAscensoAsegurarAseoAsesorAsientoAsiloAsistirAsnoAsombroA/speroAstillaAstroAstutoAsumirAsuntoAtajoAtaqueAtarAtentoAteoA/ticoAtletaA/tomoAtraerAtrozAtu/nAudazAudioAugeAulaAumentoAusenteAutorAvalAvanceAvaroAveAvellanaAvenaAvestruzAvio/nAvisoAyerAyudaAyunoAzafra/nAzarAzoteAzu/carAzufreAzulBabaBaborBacheBahi/aBaileBajarBalanzaBalco/nBaldeBambu/BancoBandaBa~oBarbaBarcoBarnizBarroBa/sculaBasto/nBasuraBatallaBateri/aBatirBatutaBau/lBazarBebe/BebidaBelloBesarBesoBestiaBichoBienBingoBlancoBloqueBlusaBoaBobinaBoboBocaBocinaBodaBodegaBoinaBolaBoleroBolsaBombaBondadBonitoBonoBonsa/iBordeBorrarBosqueBoteBoti/nBo/vedaBozalBravoBrazoBrechaBreveBrilloBrincoBrisaBrocaBromaBronceBroteBrujaBruscoBrutoBuceoBucleBuenoBueyBufandaBufo/nBu/hoBuitreBultoBurbujaBurlaBurroBuscarButacaBuzo/nCaballoCabezaCabinaCabraCacaoCada/verCadenaCaerCafe/Cai/daCaima/nCajaCajo/nCalCalamarCalcioCaldoCalidadCalleCalmaCalorCalvoCamaCambioCamelloCaminoCampoCa/ncerCandilCanelaCanguroCanicaCantoCa~aCa~o/nCaobaCaosCapazCapita/nCapoteCaptarCapuchaCaraCarbo/nCa/rcelCaretaCargaCari~oCarneCarpetaCarroCartaCasaCascoCaseroCaspaCastorCatorceCatreCaudalCausaCazoCebollaCederCedroCeldaCe/lebreCelosoCe/lulaCementoCenizaCentroCercaCerdoCerezaCeroCerrarCertezaCe/spedCetroChacalChalecoChampu/ChanclaChapaCharlaChicoChisteChivoChoqueChozaChuletaChuparCiclo/nCiegoCieloCienCiertoCifraCigarroCimaCincoCineCintaCipre/sCircoCiruelaCisneCitaCiudadClamorClanClaroClaseClaveClienteClimaCli/nicaCobreCoccio/nCochinoCocinaCocoCo/digoCodoCofreCogerCoheteCoji/nCojoColaColchaColegioColgarColinaCollarColmoColumnaCombateComerComidaCo/modoCompraCondeConejoCongaConocerConsejoContarCopaCopiaCorazo/nCorbataCorchoCordo/nCoronaCorrerCoserCosmosCostaCra/neoCra/terCrearCrecerCrei/doCremaCri/aCrimenCriptaCrisisCromoCro/nicaCroquetaCrudoCruzCuadroCuartoCuatroCuboCubrirCucharaCuelloCuentoCuerdaCuestaCuevaCuidarCulebraCulpaCultoCumbreCumplirCunaCunetaCuotaCupo/nCu/pulaCurarCuriosoCursoCurvaCutisDamaDanzaDarDardoDa/tilDeberDe/bilDe/cadaDecirDedoDefensaDefinirDejarDelfi/nDelgadoDelitoDemoraDensoDentalDeporteDerechoDerrotaDesayunoDeseoDesfileDesnudoDestinoDesvi/oDetalleDetenerDeudaDi/aDiabloDiademaDiamanteDianaDiarioDibujoDictarDienteDietaDiezDifi/cilDignoDilemaDiluirDineroDirectoDirigirDiscoDise~oDisfrazDivaDivinoDobleDoceDolorDomingoDonDonarDoradoDormirDorsoDosDosisDrago/nDrogaDuchaDudaDueloDue~oDulceDu/oDuqueDurarDurezaDuroE/banoEbrioEcharEcoEcuadorEdadEdicio/nEdificioEditorEducarEfectoEficazEjeEjemploElefanteElegirElementoElevarElipseE/liteElixirElogioEludirEmbudoEmitirEmocio/nEmpateEmpe~oEmpleoEmpresaEnanoEncargoEnchufeEnci/aEnemigoEneroEnfadoEnfermoEnga~oEnigmaEnlaceEnormeEnredoEnsayoEnse~arEnteroEntrarEnvaseEnvi/oE/pocaEquipoErizoEscalaEscenaEscolarEscribirEscudoEsenciaEsferaEsfuerzoEspadaEspejoEspi/aEsposaEspumaEsqui/EstarEsteEstiloEstufaEtapaEternoE/ticaEtniaEvadirEvaluarEventoEvitarExactoExamenExcesoExcusaExentoExigirExilioExistirE/xitoExpertoExplicarExponerExtremoFa/bricaFa/bulaFachadaFa/cilFactorFaenaFajaFaldaFalloFalsoFaltarFamaFamiliaFamosoFarao/nFarmaciaFarolFarsaFaseFatigaFaunaFavorFaxFebreroFechaFelizFeoFeriaFerozFe/rtilFervorFesti/nFiableFianzaFiarFibraFiccio/nFichaFideoFiebreFielFieraFiestaFiguraFijarFijoFilaFileteFilialFiltroFinFincaFingirFinitoFirmaFlacoFlautaFlechaFlorFlotaFluirFlujoFlu/orFobiaFocaFogataFogo/nFolioFolletoFondoFormaForroFortunaForzarFosaFotoFracasoFra/gilFranjaFraseFraudeFrei/rFrenoFresaFri/oFritoFrutaFuegoFuenteFuerzaFugaFumarFuncio/nFundaFurgo/nFuriaFusilFu/tbolFuturoGacelaGafasGaitaGajoGalaGaleri/aGalloGambaGanarGanchoGangaGansoGarajeGarzaGasolinaGastarGatoGavila/nGemeloGemirGenGe/neroGenioGenteGeranioGerenteGermenGestoGiganteGimnasioGirarGiroGlaciarGloboGloriaGolGolfoGolosoGolpeGomaGordoGorilaGorraGotaGoteoGozarGradaGra/ficoGranoGrasaGratisGraveGrietaGrilloGripeGrisGritoGrosorGru/aGruesoGrumoGrupoGuanteGuapoGuardiaGuerraGui/aGui~oGuionGuisoGuitarraGusanoGustarHaberHa/bilHablarHacerHachaHadaHallarHamacaHarinaHazHaza~aHebillaHebraHechoHeladoHelioHembraHerirHermanoHe/roeHervirHieloHierroHi/gadoHigieneHijoHimnoHistoriaHocicoHogarHogueraHojaHombreHongoHonorHonraHoraHormigaHornoHostilHoyoHuecoHuelgaHuertaHuesoHuevoHuidaHuirHumanoHu/medoHumildeHumoHundirHuraca/nHurtoIconoIdealIdiomaI/doloIglesiaIglu/IgualIlegalIlusio/nImagenIma/nImitarImparImperioImponerImpulsoIncapazI/ndiceInerteInfielInformeIngenioInicioInmensoInmuneInnatoInsectoInstanteIntere/sI/ntimoIntuirInu/tilInviernoIraIrisIroni/aIslaIsloteJabali/Jabo/nJamo/nJarabeJardi/nJarraJaulaJazmi/nJefeJeringaJineteJornadaJorobaJovenJoyaJuergaJuevesJuezJugadorJugoJugueteJuicioJuncoJunglaJunioJuntarJu/piterJurarJustoJuvenilJuzgarKiloKoalaLabioLacioLacraLadoLadro/nLagartoLa/grimaLagunaLaicoLamerLa/minaLa/mparaLanaLanchaLangostaLanzaLa/pizLargoLarvaLa/stimaLataLa/texLatirLaurelLavarLazoLealLeccio/nLecheLectorLeerLegio/nLegumbreLejanoLenguaLentoLe~aLeo/nLeopardoLesio/nLetalLetraLeveLeyendaLibertadLibroLicorLi/derLidiarLienzoLigaLigeroLimaLi/miteLimo/nLimpioLinceLindoLi/neaLingoteLinoLinternaLi/quidoLisoListaLiteraLitioLitroLlagaLlamaLlantoLlaveLlegarLlenarLlevarLlorarLloverLluviaLoboLocio/nLocoLocuraLo/gicaLogroLombrizLomoLonjaLoteLuchaLucirLugarLujoLunaLunesLupaLustroLutoLuzMacetaMachoMaderaMadreMaduroMaestroMafiaMagiaMagoMai/zMaldadMaletaMallaMaloMama/MamboMamutMancoMandoManejarMangaManiqui/ManjarManoMansoMantaMa~anaMapaMa/quinaMarMarcoMareaMarfilMargenMaridoMa/rmolMarro/nMartesMarzoMasaMa/scaraMasivoMatarMateriaMatizMatrizMa/ximoMayorMazorcaMechaMedallaMedioMe/dulaMejillaMejorMelenaMelo/nMemoriaMenorMensajeMenteMenu/MercadoMerengueMe/ritoMesMeso/nMetaMeterMe/todoMetroMezclaMiedoMielMiembroMigaMilMilagroMilitarMillo/nMimoMinaMineroMi/nimoMinutoMiopeMirarMisaMiseriaMisilMismoMitadMitoMochilaMocio/nModaModeloMohoMojarMoldeMolerMolinoMomentoMomiaMonarcaMonedaMonjaMontoMo~oMoradaMorderMorenoMorirMorroMorsaMortalMoscaMostrarMotivoMoverMo/vilMozoMuchoMudarMuebleMuelaMuerteMuestraMugreMujerMulaMuletaMultaMundoMu~ecaMuralMuroMu/sculoMuseoMusgoMu/sicaMusloNa/carNacio/nNadarNaipeNaranjaNarizNarrarNasalNatalNativoNaturalNa/useaNavalNaveNavidadNecioNe/ctarNegarNegocioNegroNeo/nNervioNetoNeutroNevarNeveraNichoNidoNieblaNietoNi~ezNi~oNi/tidoNivelNoblezaNocheNo/minaNoriaNormaNorteNotaNoticiaNovatoNovelaNovioNubeNucaNu/cleoNudilloNudoNueraNueveNuezNuloNu/meroNutriaOasisObesoObispoObjetoObraObreroObservarObtenerObvioOcaOcasoOce/anoOchentaOchoOcioOcreOctavoOctubreOcultoOcuparOcurrirOdiarOdioOdiseaOesteOfensaOfertaOficioOfrecerOgroOi/doOi/rOjoOlaOleadaOlfatoOlivoOllaOlmoOlorOlvidoOmbligoOndaOnzaOpacoOpcio/nO/peraOpinarOponerOptarO/pticaOpuestoOracio/nOradorOralO/rbitaOrcaOrdenOrejaO/rganoOrgi/aOrgulloOrienteOrigenOrillaOroOrquestaOrugaOsadi/aOscuroOseznoOsoOstraOto~oOtroOvejaO/vuloO/xidoOxi/genoOyenteOzonoPactoPadrePaellaPa/ginaPagoPai/sPa/jaroPalabraPalcoPaletaPa/lidoPalmaPalomaPalparPanPanalPa/nicoPanteraPa~ueloPapa/PapelPapillaPaquetePararParcelaParedParirParoPa/rpadoParquePa/rrafoPartePasarPaseoPasio/nPasoPastaPataPatioPatriaPausaPautaPavoPayasoPeato/nPecadoPeceraPechoPedalPedirPegarPeinePelarPelda~oPeleaPeligroPellejoPeloPelucaPenaPensarPe~o/nPeo/nPeorPepinoPeque~oPeraPerchaPerderPerezaPerfilPericoPerlaPermisoPerroPersonaPesaPescaPe/simoPesta~aPe/taloPetro/leoPezPezu~aPicarPicho/nPiePiedraPiernaPiezaPijamaPilarPilotoPimientaPinoPintorPinzaPi~aPiojoPipaPirataPisarPiscinaPisoPistaPito/nPizcaPlacaPlanPlataPlayaPlazaPleitoPlenoPlomoPlumaPluralPobrePocoPoderPodioPoemaPoesi/aPoetaPolenPolici/aPolloPolvoPomadaPomeloPomoPompaPonerPorcio/nPortalPosadaPoseerPosiblePostePotenciaPotroPozoPradoPrecozPreguntaPremioPrensaPresoPrevioPrimoPri/ncipePrisio/nPrivarProaProbarProcesoProductoProezaProfesorProgramaProlePromesaProntoPropioPro/ximoPruebaPu/blicoPucheroPudorPuebloPuertaPuestoPulgaPulirPulmo/nPulpoPulsoPumaPuntoPu~alPu~oPupaPupilaPure/QuedarQuejaQuemarQuererQuesoQuietoQui/micaQuinceQuitarRa/banoRabiaRaboRacio/nRadicalRai/zRamaRampaRanchoRangoRapazRa/pidoRaptoRasgoRaspaRatoRayoRazaRazo/nReaccio/nRealidadReba~oReboteRecaerRecetaRechazoRecogerRecreoRectoRecursoRedRedondoReducirReflejoReformaRefra/nRefugioRegaloRegirReglaRegresoRehe/nReinoRei/rRejaRelatoRelevoRelieveRellenoRelojRemarRemedioRemoRencorRendirRentaRepartoRepetirReposoReptilResRescateResinaRespetoRestoResumenRetiroRetornoRetratoReunirReve/sRevistaReyRezarRicoRiegoRiendaRiesgoRifaRi/gidoRigorRinco/nRi~o/nRi/oRiquezaRisaRitmoRitoRizoRobleRoceRociarRodarRodeoRodillaRoerRojizoRojoRomeroRomperRonRoncoRondaRopaRoperoRosaRoscaRostroRotarRubi/RuborRudoRuedaRugirRuidoRuinaRuletaRuloRumboRumorRupturaRutaRutinaSa/badoSaberSabioSableSacarSagazSagradoSalaSaldoSaleroSalirSalmo/nSalo/nSalsaSaltoSaludSalvarSambaSancio/nSandi/aSanearSangreSanidadSanoSantoSapoSaqueSardinaSarte/nSastreSata/nSaunaSaxofo/nSeccio/nSecoSecretoSectaSedSeguirSeisSelloSelvaSemanaSemillaSendaSensorSe~alSe~orSepararSepiaSequi/aSerSerieSermo/nServirSesentaSesio/nSetaSetentaSeveroSexoSextoSidraSiestaSieteSigloSignoSi/labaSilbarSilencioSillaSi/mboloSimioSirenaSistemaSitioSituarSobreSocioSodioSolSolapaSoldadoSoledadSo/lidoSoltarSolucio/nSombraSondeoSonidoSonoroSonrisaSopaSoplarSoporteSordoSorpresaSorteoSoste/nSo/tanoSuaveSubirSucesoSudorSuegraSueloSue~oSuerteSufrirSujetoSulta/nSumarSuperarSuplirSuponerSupremoSurSurcoSure~oSurgirSustoSutilTabacoTabiqueTablaTabu/TacoTactoTajoTalarTalcoTalentoTallaTalo/nTama~oTamborTangoTanqueTapaTapeteTapiaTapo/nTaquillaTardeTareaTarifaTarjetaTarotTarroTartaTatuajeTauroTazaTazo/nTeatroTechoTeclaTe/cnicaTejadoTejerTejidoTelaTele/fonoTemaTemorTemploTenazTenderTenerTenisTensoTeori/aTerapiaTercoTe/rminoTernuraTerrorTesisTesoroTestigoTeteraTextoTezTibioTiburo/nTiempoTiendaTierraTiesoTigreTijeraTildeTimbreTi/midoTimoTintaTi/oTi/picoTipoTiraTiro/nTita/nTi/tereTi/tuloTizaToallaTobilloTocarTocinoTodoTogaToldoTomarTonoTontoToparTopeToqueTo/raxToreroTormentaTorneoToroTorpedoTorreTorsoTortugaTosToscoToserTo/xicoTrabajoTractorTraerTra/ficoTragoTrajeTramoTranceTratoTraumaTrazarTre/bolTreguaTreintaTrenTreparTresTribuTrigoTripaTristeTriunfoTrofeoTrompaTroncoTropaTroteTrozoTrucoTruenoTrufaTuberi/aTuboTuertoTumbaTumorTu/nelTu/nicaTurbinaTurismoTurnoTutorUbicarU/lceraUmbralUnidadUnirUniversoUnoUntarU~aUrbanoUrbeUrgenteUrnaUsarUsuarioU/tilUtopi/aUvaVacaVaci/oVacunaVagarVagoVainaVajillaValeVa/lidoValleValorVa/lvulaVampiroVaraVariarVaro/nVasoVecinoVectorVehi/culoVeinteVejezVelaVeleroVelozVenaVencerVendaVenenoVengarVenirVentaVenusVerVeranoVerboVerdeVeredaVerjaVersoVerterVi/aViajeVibrarVicioVi/ctimaVidaVi/deoVidrioViejoViernesVigorVilVillaVinagreVinoVi~edoVioli/nViralVirgoVirtudVisorVi/speraVistaVitaminaViudoVivazViveroVivirVivoVolca/nVolumenVolverVorazVotarVotoVozVueloVulgarYacerYateYeguaYemaYernoYesoYodoYogaYogurZafiroZanjaZapatoZarzaZonaZorroZumoZurdo";
  var lookup = {};
  var wordlist$2 = null;
  function dropDiacritic(word) {
    logger$k.checkNormalize();
    return toUtf8String(Array.prototype.filter.call(toUtf8Bytes(word.normalize("NFD").toLowerCase()), (c) => {
      return c >= 65 && c <= 90 || c >= 97 && c <= 123;
    }));
  }
  function expand(word) {
    const output = [];
    Array.prototype.forEach.call(toUtf8Bytes(word), (c) => {
      if (c === 47) {
        output.push(204);
        output.push(129);
      } else if (c === 126) {
        output.push(110);
        output.push(204);
        output.push(131);
      } else {
        output.push(c);
      }
    });
    return toUtf8String(output);
  }
  function loadWords$2(lang) {
    if (wordlist$2 != null) {
      return;
    }
    wordlist$2 = words$2.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map((w) => expand(w));
    wordlist$2.forEach((word, index2) => {
      lookup[dropDiacritic(word)] = index2;
    });
    if (Wordlist.check(lang) !== "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300") {
      wordlist$2 = null;
      throw new Error("BIP39 Wordlist for es (Spanish) FAILED");
    }
  }
  var LangEs = class extends Wordlist {
    constructor() {
      super("es");
    }
    getWord(index2) {
      loadWords$2(this);
      return wordlist$2[index2];
    }
    getWordIndex(word) {
      loadWords$2(this);
      return lookup[dropDiacritic(word)];
    }
  };
  var langEs = new LangEs();
  Wordlist.register(langEs);
  var words$3 = "";
  var wordlist$3 = null;
  var lookup$1 = {};
  function dropDiacritic$1(word) {
    logger$k.checkNormalize();
    return toUtf8String(Array.prototype.filter.call(toUtf8Bytes(word.normalize("NFD").toLowerCase()), (c) => {
      return c >= 65 && c <= 90 || c >= 97 && c <= 123;
    }));
  }
  function expand$1(word) {
    const output = [];
    Array.prototype.forEach.call(toUtf8Bytes(word), (c) => {
      if (c === 47) {
        output.push(204);
        output.push(129);
      } else if (c === 45) {
        output.push(204);
        output.push(128);
      } else {
        output.push(c);
      }
    });
    return toUtf8String(output);
  }
  function loadWords$3(lang) {
    if (wordlist$3 != null) {
      return;
    }
    wordlist$3 = words$3.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map((w) => expand$1(w));
    wordlist$3.forEach((word, index2) => {
      lookup$1[dropDiacritic$1(word)] = index2;
    });
    if (Wordlist.check(lang) !== "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045") {
      wordlist$3 = null;
      throw new Error("BIP39 Wordlist for fr (French) FAILED");
    }
  }
  var LangFr = class extends Wordlist {
    constructor() {
      super("fr");
    }
    getWord(index2) {
      loadWords$3(this);
      return wordlist$3[index2];
    }
    getWordIndex(word) {
      loadWords$3(this);
      return lookup$1[dropDiacritic$1(word)];
    }
  };
  var langFr = new LangFr();
  Wordlist.register(langFr);
  var data = ["AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR", "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR", "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm", "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC", "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD", "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD", "IJBEJqXZJ"];
  var mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
  var wordlist$4 = null;
  function hex(word) {
    return hexlify(toUtf8Bytes(word));
  }
  var KiYoKu = "0xe3818de38284e3818f";
  var KyoKu = "0xe3818de38283e3818f";
  function loadWords$4(lang) {
    if (wordlist$4 !== null) {
      return;
    }
    wordlist$4 = [];
    const transform = {};
    transform[toUtf8String([227, 130, 154])] = false;
    transform[toUtf8String([227, 130, 153])] = false;
    transform[toUtf8String([227, 130, 133])] = toUtf8String([227, 130, 134]);
    transform[toUtf8String([227, 129, 163])] = toUtf8String([227, 129, 164]);
    transform[toUtf8String([227, 130, 131])] = toUtf8String([227, 130, 132]);
    transform[toUtf8String([227, 130, 135])] = toUtf8String([227, 130, 136]);
    function normalize(word) {
      let result = "";
      for (let i = 0; i < word.length; i++) {
        let kana = word[i];
        const target = transform[kana];
        if (target === false) {
          continue;
        }
        if (target) {
          kana = target;
        }
        result += kana;
      }
      return result;
    }
    function sortJapanese(a, b) {
      a = normalize(a);
      b = normalize(b);
      if (a < b) {
        return -1;
      }
      if (a > b) {
        return 1;
      }
      return 0;
    }
    for (let length = 3; length <= 9; length++) {
      const d = data[length - 3];
      for (let offset = 0; offset < d.length; offset += length) {
        const word = [];
        for (let i = 0; i < length; i++) {
          const k = mapping.indexOf(d[offset + i]);
          word.push(227);
          word.push(k & 64 ? 130 : 129);
          word.push((k & 63) + 128);
        }
        wordlist$4.push(toUtf8String(word));
      }
    }
    wordlist$4.sort(sortJapanese);
    if (hex(wordlist$4[442]) === KiYoKu && hex(wordlist$4[443]) === KyoKu) {
      const tmp = wordlist$4[442];
      wordlist$4[442] = wordlist$4[443];
      wordlist$4[443] = tmp;
    }
    if (Wordlist.check(lang) !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
      wordlist$4 = null;
      throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
    }
  }
  var LangJa = class extends Wordlist {
    constructor() {
      super("ja");
    }
    getWord(index2) {
      loadWords$4(this);
      return wordlist$4[index2];
    }
    getWordIndex(word) {
      loadWords$4(this);
      return wordlist$4.indexOf(word);
    }
    split(mnemonic) {
      logger$k.checkNormalize();
      return mnemonic.split(/(?:\u3000| )+/g);
    }
    join(words2) {
      return words2.join("\u3000");
    }
  };
  var langJa = new LangJa();
  Wordlist.register(langJa);
  var data$1 = ["OYAa", "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8", "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6", "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv", "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo", "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg", "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb", "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"];
  var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
  function getHangul(code) {
    if (code >= 40) {
      code = code + 168 - 40;
    } else if (code >= 19) {
      code = code + 97 - 19;
    }
    return toUtf8String([225, (code >> 6) + 132, (code & 63) + 128]);
  }
  var wordlist$5 = null;
  function loadWords$5(lang) {
    if (wordlist$5 != null) {
      return;
    }
    wordlist$5 = [];
    data$1.forEach((data2, length) => {
      length += 4;
      for (let i = 0; i < data2.length; i += length) {
        let word = "";
        for (let j = 0; j < length; j++) {
          word += getHangul(codes.indexOf(data2[i + j]));
        }
        wordlist$5.push(word);
      }
    });
    wordlist$5.sort();
    if (Wordlist.check(lang) !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
      wordlist$5 = null;
      throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
    }
  }
  var LangKo = class extends Wordlist {
    constructor() {
      super("ko");
    }
    getWord(index2) {
      loadWords$5(this);
      return wordlist$5[index2];
    }
    getWordIndex(word) {
      loadWords$5(this);
      return wordlist$5.indexOf(word);
    }
  };
  var langKo = new LangKo();
  Wordlist.register(langKo);
  var words$4 = "AbacoAbbaglioAbbinatoAbeteAbissoAbolireAbrasivoAbrogatoAccadereAccennoAccusatoAcetoneAchilleAcidoAcquaAcreAcrilicoAcrobataAcutoAdagioAddebitoAddomeAdeguatoAderireAdipeAdottareAdulareAffabileAffettoAffissoAffrantoAforismaAfosoAfricanoAgaveAgenteAgevoleAggancioAgireAgitareAgonismoAgricoloAgrumetoAguzzoAlabardaAlatoAlbatroAlberatoAlboAlbumeAlceAlcolicoAlettoneAlfaAlgebraAlianteAlibiAlimentoAllagatoAllegroAllievoAllodolaAllusivoAlmenoAlogenoAlpacaAlpestreAltalenaAlternoAlticcioAltroveAlunnoAlveoloAlzareAmalgamaAmanitaAmarenaAmbitoAmbratoAmebaAmericaAmetistaAmicoAmmassoAmmendaAmmirareAmmonitoAmoreAmpioAmpliareAmuletoAnacardoAnagrafeAnalistaAnarchiaAnatraAncaAncellaAncoraAndareAndreaAnelloAngeloAngolareAngustoAnimaAnnegareAnnidatoAnnoAnnuncioAnonimoAnticipoAnziApaticoAperturaApodeApparireAppetitoAppoggioApprodoAppuntoAprileArabicaArachideAragostaAraldicaArancioAraturaArazzoArbitroArchivioArditoArenileArgentoArgineArgutoAriaArmoniaArneseArredatoArringaArrostoArsenicoArsoArteficeArzilloAsciuttoAscoltoAsepsiAsetticoAsfaltoAsinoAsolaAspiratoAsproAssaggioAsseAssolutoAssurdoAstaAstenutoAsticeAstrattoAtavicoAteismoAtomicoAtonoAttesaAttivareAttornoAttritoAttualeAusilioAustriaAutistaAutonomoAutunnoAvanzatoAvereAvvenireAvvisoAvvolgereAzioneAzotoAzzimoAzzurroBabeleBaccanoBacinoBacoBadessaBadilataBagnatoBaitaBalconeBaldoBalenaBallataBalzanoBambinoBandireBaraondaBarbaroBarcaBaritonoBarlumeBaroccoBasilicoBassoBatostaBattutoBauleBavaBavosaBeccoBeffaBelgioBelvaBendaBenevoleBenignoBenzinaBereBerlinaBetaBibitaBiciBidoneBifidoBigaBilanciaBimboBinocoloBiologoBipedeBipolareBirbanteBirraBiscottoBisestoBisnonnoBisonteBisturiBizzarroBlandoBlattaBollitoBonificoBordoBoscoBotanicoBottinoBozzoloBraccioBradipoBramaBrancaBravuraBretellaBrevettoBrezzaBrigliaBrillanteBrindareBroccoloBrodoBronzinaBrulloBrunoBubboneBucaBudinoBuffoneBuioBulboBuonoBurloneBurrascaBussolaBustaCadettoCaducoCalamaroCalcoloCalesseCalibroCalmoCaloriaCambusaCamerataCamiciaCamminoCamolaCampaleCanapaCandelaCaneCaninoCanottoCantinaCapaceCapelloCapitoloCapogiroCapperoCapraCapsulaCarapaceCarcassaCardoCarismaCarovanaCarrettoCartolinaCasaccioCascataCasermaCasoCassoneCastelloCasualeCatastaCatenaCatrameCautoCavilloCedibileCedrataCefaloCelebreCellulareCenaCenoneCentesimoCeramicaCercareCertoCerumeCervelloCesoiaCespoCetoChelaChiaroChiccaChiedereChimeraChinaChirurgoChitarraCiaoCiclismoCifrareCignoCilindroCiottoloCircaCirrosiCitricoCittadinoCiuffoCivettaCivileClassicoClinicaCloroCoccoCodardoCodiceCoerenteCognomeCollareColmatoColoreColposoColtivatoColzaComaCometaCommandoComodoComputerComuneConcisoCondurreConfermaCongelareConiugeConnessoConoscereConsumoContinuoConvegnoCopertoCopioneCoppiaCopricapoCorazzaCordataCoricatoCorniceCorollaCorpoCorredoCorsiaCorteseCosmicoCostanteCotturaCovatoCratereCravattaCreatoCredereCremosoCrescitaCretaCricetoCrinaleCrisiCriticoCroceCronacaCrostataCrucialeCruscaCucireCuculoCuginoCullatoCupolaCuratoreCursoreCurvoCuscinoCustodeDadoDainoDalmataDamerinoDanielaDannosoDanzareDatatoDavantiDavveroDebuttoDecennioDecisoDeclinoDecolloDecretoDedicatoDefinitoDeformeDegnoDelegareDelfinoDelirioDeltaDemenzaDenotatoDentroDepositoDerapataDerivareDerogaDescrittoDesertoDesiderioDesumereDetersivoDevotoDiametroDicembreDiedroDifesoDiffusoDigerireDigitaleDiluvioDinamicoDinnanziDipintoDiplomaDipoloDiradareDireDirottoDirupoDisagioDiscretoDisfareDisgeloDispostoDistanzaDisumanoDitoDivanoDiveltoDividereDivoratoDobloneDocenteDoganaleDogmaDolceDomatoDomenicaDominareDondoloDonoDormireDoteDottoreDovutoDozzinaDragoDruidoDubbioDubitareDucaleDunaDuomoDupliceDuraturoEbanoEccessoEccoEclissiEconomiaEderaEdicolaEdileEditoriaEducareEgemoniaEgliEgoismoEgregioElaboratoElargireEleganteElencatoElettoElevareElficoElicaElmoElsaElusoEmanatoEmblemaEmessoEmiroEmotivoEmozioneEmpiricoEmuloEndemicoEnduroEnergiaEnfasiEnotecaEntrareEnzimaEpatiteEpilogoEpisodioEpocaleEppureEquatoreErarioErbaErbosoEredeEremitaErigereErmeticoEroeErosivoErranteEsagonoEsameEsanimeEsaudireEscaEsempioEsercitoEsibitoEsigenteEsistereEsitoEsofagoEsortatoEsosoEspansoEspressoEssenzaEssoEstesoEstimareEstoniaEstrosoEsultareEtilicoEtnicoEtruscoEttoEuclideoEuropaEvasoEvidenzaEvitatoEvolutoEvvivaFabbricaFaccendaFachiroFalcoFamigliaFanaleFanfaraFangoFantasmaFareFarfallaFarinosoFarmacoFasciaFastosoFasulloFaticareFatoFavolosoFebbreFecolaFedeFegatoFelpaFeltroFemminaFendereFenomenoFermentoFerroFertileFessuraFestivoFettaFeudoFiabaFiduciaFifaFiguratoFiloFinanzaFinestraFinireFioreFiscaleFisicoFiumeFlaconeFlamencoFleboFlemmaFloridoFluenteFluoroFobicoFocacciaFocosoFoderatoFoglioFolataFolcloreFolgoreFondenteFoneticoFoniaFontanaForbitoForchettaForestaFormicaFornaioForoFortezzaForzareFosfatoFossoFracassoFranaFrassinoFratelloFreccettaFrenataFrescoFrigoFrollinoFrondeFrugaleFruttaFucilataFucsiaFuggenteFulmineFulvoFumanteFumettoFumosoFuneFunzioneFuocoFurboFurgoneFuroreFusoFutileGabbianoGaffeGalateoGallinaGaloppoGamberoGammaGaranziaGarboGarofanoGarzoneGasdottoGasolioGastricoGattoGaudioGazeboGazzellaGecoGelatinaGelsoGemelloGemmatoGeneGenitoreGennaioGenotipoGergoGhepardoGhiaccioGhisaGialloGildaGineproGiocareGioielloGiornoGioveGiratoGironeGittataGiudizioGiuratoGiustoGlobuloGlutineGnomoGobbaGolfGomitoGommoneGonfioGonnaGovernoGracileGradoGraficoGrammoGrandeGrattareGravosoGraziaGrecaGreggeGrifoneGrigioGrinzaGrottaGruppoGuadagnoGuaioGuantoGuardareGufoGuidareIbernatoIconaIdenticoIdillioIdoloIdraIdricoIdrogenoIgieneIgnaroIgnoratoIlareIllesoIllogicoIlludereImballoImbevutoImboccoImbutoImmaneImmersoImmolatoImpaccoImpetoImpiegoImportoImprontaInalareInarcareInattivoIncantoIncendioInchinoIncisivoInclusoIncontroIncrocioIncuboIndagineIndiaIndoleIneditoInfattiInfilareInflittoIngaggioIngegnoIngleseIngordoIngrossoInnescoInodoreInoltrareInondatoInsanoInsettoInsiemeInsonniaInsulinaIntasatoInteroIntonacoIntuitoInumidireInvalidoInveceInvitoIperboleIpnoticoIpotesiIppicaIrideIrlandaIronicoIrrigatoIrrorareIsolatoIsotopoIstericoIstitutoIstriceItaliaIterareLabbroLabirintoLaccaLaceratoLacrimaLacunaLaddoveLagoLampoLancettaLanternaLardosoLargaLaringeLastraLatenzaLatinoLattugaLavagnaLavoroLegaleLeggeroLemboLentezzaLenzaLeoneLepreLesivoLessatoLestoLetteraleLevaLevigatoLiberoLidoLievitoLillaLimaturaLimitareLimpidoLineareLinguaLiquidoLiraLiricaLiscaLiteLitigioLivreaLocandaLodeLogicaLombareLondraLongevoLoquaceLorenzoLotoLotteriaLuceLucidatoLumacaLuminosoLungoLupoLuppoloLusingaLussoLuttoMacabroMacchinaMaceroMacinatoMadamaMagicoMagliaMagneteMagroMaiolicaMalafedeMalgradoMalintesoMalsanoMaltoMalumoreManaManciaMandorlaMangiareManifestoMannaroManovraMansardaMantideManubrioMappaMaratonaMarcireMarettaMarmoMarsupioMascheraMassaiaMastinoMaterassoMatricolaMattoneMaturoMazurcaMeandroMeccanicoMecenateMedesimoMeditareMegaMelassaMelisMelodiaMeningeMenoMensolaMercurioMerendaMerloMeschinoMeseMessereMestoloMetalloMetodoMettereMiagolareMicaMicelioMicheleMicroboMidolloMieleMiglioreMilanoMiliteMimosaMineraleMiniMinoreMirinoMirtilloMiscelaMissivaMistoMisurareMitezzaMitigareMitraMittenteMnemonicoModelloModificaModuloMoganoMogioMoleMolossoMonasteroMoncoMondinaMonetarioMonileMonotonoMonsoneMontatoMonvisoMoraMordereMorsicatoMostroMotivatoMotosegaMottoMovenzaMovimentoMozzoMuccaMucosaMuffaMughettoMugnaioMulattoMulinelloMultiploMummiaMuntoMuovereMuraleMusaMuscoloMusicaMutevoleMutoNababboNaftaNanometroNarcisoNariceNarratoNascereNastrareNaturaleNauticaNaviglioNebulosaNecrosiNegativoNegozioNemmenoNeofitaNerettoNervoNessunoNettunoNeutraleNeveNevroticoNicchiaNinfaNitidoNobileNocivoNodoNomeNominaNordicoNormaleNorvegeseNostranoNotareNotiziaNotturnoNovellaNucleoNullaNumeroNuovoNutrireNuvolaNuzialeOasiObbedireObbligoObeliscoOblioOboloObsoletoOccasioneOcchioOccidenteOccorrereOccultareOcraOculatoOdiernoOdorareOffertaOffrireOffuscatoOggettoOggiOgnunoOlandeseOlfattoOliatoOlivaOlogrammaOltreOmaggioOmbelicoOmbraOmegaOmissioneOndosoOnereOniceOnnivoroOnorevoleOntaOperatoOpinioneOppostoOracoloOrafoOrdineOrecchinoOreficeOrfanoOrganicoOrigineOrizzonteOrmaOrmeggioOrnativoOrologioOrrendoOrribileOrtensiaOrticaOrzataOrzoOsareOscurareOsmosiOspedaleOspiteOssaOssidareOstacoloOsteOtiteOtreOttagonoOttimoOttobreOvaleOvestOvinoOviparoOvocitoOvunqueOvviareOzioPacchettoPacePacificoPadellaPadronePaesePagaPaginaPalazzinaPalesarePallidoPaloPaludePandoroPannelloPaoloPaonazzoPapricaParabolaParcellaParerePargoloPariParlatoParolaPartireParvenzaParzialePassivoPasticcaPataccaPatologiaPattumePavonePeccatoPedalarePedonalePeggioPelosoPenarePendicePenisolaPennutoPenombraPensarePentolaPepePepitaPerbenePercorsoPerdonatoPerforarePergamenaPeriodoPermessoPernoPerplessoPersuasoPertugioPervasoPesatorePesistaPesoPestiferoPetaloPettinePetulantePezzoPiacerePiantaPiattinoPiccinoPicozzaPiegaPietraPifferoPigiamaPigolioPigroPilaPiliferoPillolaPilotaPimpantePinetaPinnaPinoloPioggiaPiomboPiramidePireticoPiritePirolisiPitonePizzicoPlaceboPlanarePlasmaPlatanoPlenarioPochezzaPoderosoPodismoPoesiaPoggiarePolentaPoligonoPollicePolmonitePolpettaPolsoPoltronaPolverePomicePomodoroPontePopolosoPorfidoPorosoPorporaPorrePortataPosaPositivoPossessoPostulatoPotassioPoterePranzoPrassiPraticaPreclusoPredicaPrefissoPregiatoPrelievoPremerePrenotarePreparatoPresenzaPretestoPrevalsoPrimaPrincipePrivatoProblemaProcuraProdurreProfumoProgettoProlungaPromessaPronomePropostaProrogaProtesoProvaPrudentePrugnaPruritoPsichePubblicoPudicaPugilatoPugnoPulcePulitoPulsantePuntarePupazzoPupillaPuroQuadroQualcosaQuasiQuerelaQuotaRaccoltoRaddoppioRadicaleRadunatoRafficaRagazzoRagioneRagnoRamarroRamingoRamoRandagioRantolareRapatoRapinaRappresoRasaturaRaschiatoRasenteRassegnaRastrelloRataRavvedutoRealeRecepireRecintoReclutaReconditoRecuperoRedditoRedimereRegalatoRegistroRegolaRegressoRelazioneRemareRemotoRennaReplicaReprimereReputareResaResidenteResponsoRestauroReteRetinaRetoricaRettificaRevocatoRiassuntoRibadireRibelleRibrezzoRicaricaRiccoRicevereRiciclatoRicordoRicredutoRidicoloRidurreRifasareRiflessoRiformaRifugioRigareRigettatoRighelloRilassatoRilevatoRimanereRimbalzoRimedioRimorchioRinascitaRincaroRinforzoRinnovoRinomatoRinsavitoRintoccoRinunciaRinvenireRiparatoRipetutoRipienoRiportareRipresaRipulireRisataRischioRiservaRisibileRisoRispettoRistoroRisultatoRisvoltoRitardoRitegnoRitmicoRitrovoRiunioneRivaRiversoRivincitaRivoltoRizomaRobaRoboticoRobustoRocciaRocoRodaggioRodereRoditoreRogitoRollioRomanticoRompereRonzioRosolareRospoRotanteRotondoRotulaRovescioRubizzoRubricaRugaRullinoRumineRumorosoRuoloRupeRussareRusticoSabatoSabbiareSabotatoSagomaSalassoSaldaturaSalgemmaSalivareSalmoneSaloneSaltareSalutoSalvoSapereSapidoSaporitoSaracenoSarcasmoSartoSassosoSatelliteSatiraSatolloSaturnoSavanaSavioSaziatoSbadiglioSbalzoSbancatoSbarraSbattereSbavareSbendareSbirciareSbloccatoSbocciatoSbrinareSbruffoneSbuffareScabrosoScadenzaScalaScambiareScandaloScapolaScarsoScatenareScavatoSceltoScenicoScettroSchedaSchienaSciarpaScienzaScindereScippoSciroppoScivoloSclerareScodellaScolpitoScompartoSconfortoScoprireScortaScossoneScozzeseScribaScrollareScrutinioScuderiaScultoreScuolaScuroScusareSdebitareSdoganareSeccaturaSecondoSedanoSeggiolaSegnalatoSegregatoSeguitoSelciatoSelettivoSellaSelvaggioSemaforoSembrareSemeSeminatoSempreSensoSentireSepoltoSequenzaSerataSerbatoSerenoSerioSerpenteSerraglioServireSestinaSetolaSettimanaSfaceloSfaldareSfamatoSfarzosoSfaticatoSferaSfidaSfilatoSfingeSfocatoSfoderareSfogoSfoltireSforzatoSfrattoSfruttatoSfuggitoSfumareSfusoSgabelloSgarbatoSgonfiareSgorbioSgrassatoSguardoSibiloSiccomeSierraSiglaSignoreSilenzioSillabaSimboloSimpaticoSimulatoSinfoniaSingoloSinistroSinoSintesiSinusoideSiparioSismaSistoleSituatoSlittaSlogaturaSlovenoSmarritoSmemoratoSmentitoSmeraldoSmilzoSmontareSmottatoSmussatoSnellireSnervatoSnodoSobbalzoSobrioSoccorsoSocialeSodaleSoffittoSognoSoldatoSolenneSolidoSollazzoSoloSolubileSolventeSomaticoSommaSondaSonettoSonniferoSopireSoppesoSopraSorgereSorpassoSorrisoSorsoSorteggioSorvolatoSospiroSostaSottileSpadaSpallaSpargereSpatolaSpaventoSpazzolaSpecieSpedireSpegnereSpelaturaSperanzaSpessoreSpettraleSpezzatoSpiaSpigolosoSpillatoSpinosoSpiraleSplendidoSportivoSposoSprangaSprecareSpronatoSpruzzoSpuntinoSquilloSradicareSrotolatoStabileStaccoStaffaStagnareStampatoStantioStarnutoStaseraStatutoSteloSteppaSterzoStilettoStimaStirpeStivaleStizzosoStonatoStoricoStrappoStregatoStriduloStrozzareStruttoStuccareStufoStupendoSubentroSuccosoSudoreSuggeritoSugoSultanoSuonareSuperboSupportoSurgelatoSurrogatoSussurroSuturaSvagareSvedeseSveglioSvelareSvenutoSveziaSviluppoSvistaSvizzeraSvoltaSvuotareTabaccoTabulatoTacciareTaciturnoTaleTalismanoTamponeTanninoTaraTardivoTargatoTariffaTarpareTartarugaTastoTatticoTavernaTavolataTazzaTecaTecnicoTelefonoTemerarioTempoTemutoTendoneTeneroTensioneTentacoloTeoremaTermeTerrazzoTerzettoTesiTesseratoTestatoTetroTettoiaTifareTigellaTimbroTintoTipicoTipografoTiraggioTiroTitanioTitoloTitubanteTizioTizzoneToccareTollerareToltoTombolaTomoTonfoTonsillaTopazioTopologiaToppaTorbaTornareTorroneTortoraToscanoTossireTostaturaTotanoTraboccoTracheaTrafilaTragediaTralcioTramontoTransitoTrapanoTrarreTraslocoTrattatoTraveTrecciaTremolioTrespoloTributoTrichecoTrifoglioTrilloTrinceaTrioTristezzaTrituratoTrivellaTrombaTronoTroppoTrottolaTrovareTruccatoTubaturaTuffatoTulipanoTumultoTunisiaTurbareTurchinoTutaTutelaUbicatoUccelloUccisoreUdireUditivoUffaUfficioUgualeUlisseUltimatoUmanoUmileUmorismoUncinettoUngereUnghereseUnicornoUnificatoUnisonoUnitarioUnteUovoUpupaUraganoUrgenzaUrloUsanzaUsatoUscitoUsignoloUsuraioUtensileUtilizzoUtopiaVacanteVaccinatoVagabondoVagliatoValangaValgoValicoVallettaValorosoValutareValvolaVampataVangareVanitosoVanoVantaggioVanveraVaporeVaranoVarcatoVarianteVascaVedettaVedovaVedutoVegetaleVeicoloVelcroVelinaVellutoVeloceVenatoVendemmiaVentoVeraceVerbaleVergognaVerificaVeroVerrucaVerticaleVescicaVessilloVestaleVeteranoVetrinaVetustoViandanteVibranteVicendaVichingoVicinanzaVidimareVigiliaVignetoVigoreVileVillanoViminiVincitoreViolaViperaVirgolaVirologoVirulentoViscosoVisioneVispoVissutoVisuraVitaVitelloVittimaVivandaVividoViziareVoceVogaVolatileVolereVolpeVoragineVulcanoZampognaZannaZappatoZatteraZavorraZefiroZelanteZeloZenzeroZerbinoZibettoZincoZirconeZittoZollaZoticoZuccheroZufoloZuluZuppa";
  var wordlist$6 = null;
  function loadWords$6(lang) {
    if (wordlist$6 != null) {
      return;
    }
    wordlist$6 = words$4.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
    if (Wordlist.check(lang) !== "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620") {
      wordlist$6 = null;
      throw new Error("BIP39 Wordlist for it (Italian) FAILED");
    }
  }
  var LangIt = class extends Wordlist {
    constructor() {
      super("it");
    }
    getWord(index2) {
      loadWords$6(this);
      return wordlist$6[index2];
    }
    getWordIndex(word) {
      loadWords$6(this);
      return wordlist$6.indexOf(word);
    }
  };
  var langIt = new LangIt();
  Wordlist.register(langIt);
  var data$2 = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
  var deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
  var wordlist$7 = { zh_cn: null, zh_tw: null };
  var Checks = { zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1", zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d" };
  var codes$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var style = "~!@#$%^&*_-=[]{}|;:,.()<>?";
  function loadWords$7(lang) {
    if (wordlist$7[lang.locale] !== null) {
      return;
    }
    wordlist$7[lang.locale] = [];
    let deltaOffset = 0;
    for (let i = 0; i < 2048; i++) {
      const s2 = style.indexOf(data$2[i * 3]);
      const bytes = [228 + (s2 >> 2), 128 + codes$1.indexOf(data$2[i * 3 + 1]), 128 + codes$1.indexOf(data$2[i * 3 + 2])];
      if (lang.locale === "zh_tw") {
        const common2 = s2 % 4;
        for (let i2 = common2; i2 < 3; i2++) {
          bytes[i2] = codes$1.indexOf(deltaData[deltaOffset++]) + (i2 == 0 ? 228 : 128);
        }
      }
      wordlist$7[lang.locale].push(toUtf8String(bytes));
    }
    if (Wordlist.check(lang) !== Checks[lang.locale]) {
      wordlist$7[lang.locale] = null;
      throw new Error("BIP39 Wordlist for " + lang.locale + " (Chinese) FAILED");
    }
  }
  var LangZh = class extends Wordlist {
    constructor(country) {
      super("zh_" + country);
    }
    getWord(index2) {
      loadWords$7(this);
      return wordlist$7[this.locale][index2];
    }
    getWordIndex(word) {
      loadWords$7(this);
      return wordlist$7[this.locale].indexOf(word);
    }
    split(mnemonic) {
      mnemonic = mnemonic.replace(/(?:\u3000| )+/g, "");
      return mnemonic.split("");
    }
  };
  var langZhCn = new LangZh("cn");
  Wordlist.register(langZhCn);
  Wordlist.register(langZhCn, "zh");
  var langZhTw = new LangZh("tw");
  Wordlist.register(langZhTw);
  var wordlists = { cz: langCz, en: langEn, es: langEs, fr: langFr, it: langIt, ja: langJa, ko: langKo, zh: langZhCn, zh_cn: langZhCn, zh_tw: langZhTw };
  var version$g = "hdnode/5.1.0";
  var logger$l = new Logger(version$g);
  var N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  var MasterSecret = toUtf8Bytes("Bitcoin seed");
  var HardenedBit = 2147483648;
  function getUpperMask(bits) {
    return (1 << bits) - 1 << 8 - bits;
  }
  function getLowerMask(bits) {
    return (1 << bits) - 1;
  }
  function bytes32(value) {
    return hexZeroPad(hexlify(value), 32);
  }
  function base58check(data2) {
    return Base58.encode(concat([data2, hexDataSlice(sha256$1(sha256$1(data2)), 0, 4)]));
  }
  function getWordlist(wordlist2) {
    if (wordlist2 == null) {
      return wordlists["en"];
    }
    if (typeof wordlist2 === "string") {
      const words2 = wordlists[wordlist2];
      if (words2 == null) {
        logger$l.throwArgumentError("unknown locale", "wordlist", wordlist2);
      }
      return words2;
    }
    return wordlist2;
  }
  var _constructorGuard$3 = {};
  var defaultPath = "m/44'/60'/0'/0/0";
  var HDNode = class {
    constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index2, depth, mnemonicOrPath) {
      logger$l.checkNew(new.target, HDNode);
      if (constructorGuard !== _constructorGuard$3) {
        throw new Error("HDNode constructor cannot be called directly");
      }
      if (privateKey) {
        const signingKey = new SigningKey(privateKey);
        defineReadOnly(this, "privateKey", signingKey.privateKey);
        defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
      } else {
        defineReadOnly(this, "privateKey", null);
        defineReadOnly(this, "publicKey", hexlify(publicKey));
      }
      defineReadOnly(this, "parentFingerprint", parentFingerprint);
      defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160$1(sha256$1(this.publicKey)), 0, 4));
      defineReadOnly(this, "address", computeAddress(this.publicKey));
      defineReadOnly(this, "chainCode", chainCode);
      defineReadOnly(this, "index", index2);
      defineReadOnly(this, "depth", depth);
      if (mnemonicOrPath == null) {
        defineReadOnly(this, "mnemonic", null);
        defineReadOnly(this, "path", null);
      } else if (typeof mnemonicOrPath === "string") {
        defineReadOnly(this, "mnemonic", null);
        defineReadOnly(this, "path", mnemonicOrPath);
      } else {
        defineReadOnly(this, "mnemonic", mnemonicOrPath);
        defineReadOnly(this, "path", mnemonicOrPath.path);
      }
    }
    get extendedKey() {
      if (this.depth >= 256) {
        throw new Error("Depth too large!");
      }
      return base58check(concat([this.privateKey != null ? "0x0488ADE4" : "0x0488B21E", hexlify(this.depth), this.parentFingerprint, hexZeroPad(hexlify(this.index), 4), this.chainCode, this.privateKey != null ? concat(["0x00", this.privateKey]) : this.publicKey]));
    }
    neuter() {
      return new HDNode(_constructorGuard$3, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
    }
    _derive(index2) {
      if (index2 > 4294967295) {
        throw new Error("invalid index - " + String(index2));
      }
      let path = this.path;
      if (path) {
        path += "/" + (index2 & ~HardenedBit);
      }
      const data2 = new Uint8Array(37);
      if (index2 & HardenedBit) {
        if (!this.privateKey) {
          throw new Error("cannot derive child of neutered node");
        }
        data2.set(arrayify(this.privateKey), 1);
        if (path) {
          path += "'";
        }
      } else {
        data2.set(arrayify(this.publicKey));
      }
      for (let i = 24; i >= 0; i -= 8) {
        data2[33 + (i >> 3)] = index2 >> 24 - i & 255;
      }
      const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data2));
      const IL = I.slice(0, 32);
      const IR = I.slice(32);
      let ki = null;
      let Ki = null;
      if (this.privateKey) {
        ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
      } else {
        const ek = new SigningKey(hexlify(IL));
        Ki = ek._addPoint(this.publicKey);
      }
      let mnemonicOrPath = path;
      const srcMnemonic = this.mnemonic;
      if (srcMnemonic) {
        mnemonicOrPath = Object.freeze({ phrase: srcMnemonic.phrase, path, locale: srcMnemonic.locale || "en" });
      }
      return new HDNode(_constructorGuard$3, ki, Ki, this.fingerprint, bytes32(IR), index2, this.depth + 1, mnemonicOrPath);
    }
    derivePath(path) {
      const components = path.split("/");
      if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
        throw new Error("invalid path - " + path);
      }
      if (components[0] === "m") {
        components.shift();
      }
      let result = this;
      for (let i = 0; i < components.length; i++) {
        const component = components[i];
        if (component.match(/^[0-9]+'$/)) {
          const index2 = parseInt(component.substring(0, component.length - 1));
          if (index2 >= HardenedBit) {
            throw new Error("invalid path index - " + component);
          }
          result = result._derive(HardenedBit + index2);
        } else if (component.match(/^[0-9]+$/)) {
          const index2 = parseInt(component);
          if (index2 >= HardenedBit) {
            throw new Error("invalid path index - " + component);
          }
          result = result._derive(index2);
        } else {
          throw new Error("invalid path component - " + component);
        }
      }
      return result;
    }
    static _fromSeed(seed, mnemonic) {
      const seedArray = arrayify(seed);
      if (seedArray.length < 16 || seedArray.length > 64) {
        throw new Error("invalid seed");
      }
      const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
      return new HDNode(_constructorGuard$3, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
    }
    static fromMnemonic(mnemonic, password, wordlist2) {
      wordlist2 = getWordlist(wordlist2);
      mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist2), wordlist2);
      return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), { phrase: mnemonic, path: "m", locale: wordlist2.locale });
    }
    static fromSeed(seed) {
      return HDNode._fromSeed(seed, null);
    }
    static fromExtendedKey(extendedKey) {
      const bytes = Base58.decode(extendedKey);
      if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
        logger$l.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
      }
      const depth = bytes[4];
      const parentFingerprint = hexlify(bytes.slice(5, 9));
      const index2 = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
      const chainCode = hexlify(bytes.slice(13, 45));
      const key2 = bytes.slice(45, 78);
      switch (hexlify(bytes.slice(0, 4))) {
        case "0x0488b21e":
        case "0x043587cf":
          return new HDNode(_constructorGuard$3, null, hexlify(key2), parentFingerprint, chainCode, index2, depth, null);
        case "0x0488ade4":
        case "0x04358394 ":
          if (key2[0] !== 0) {
            break;
          }
          return new HDNode(_constructorGuard$3, hexlify(key2.slice(1)), null, parentFingerprint, chainCode, index2, depth, null);
      }
      return logger$l.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
    }
  };
  function mnemonicToSeed(mnemonic, password) {
    if (!password) {
      password = "";
    }
    const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
  }
  function mnemonicToEntropy(mnemonic, wordlist2) {
    wordlist2 = getWordlist(wordlist2);
    logger$l.checkNormalize();
    const words2 = wordlist2.split(mnemonic);
    if (words2.length % 3 !== 0) {
      throw new Error("invalid mnemonic");
    }
    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words2.length / 8)));
    let offset = 0;
    for (let i = 0; i < words2.length; i++) {
      let index2 = wordlist2.getWordIndex(words2[i].normalize("NFKD"));
      if (index2 === -1) {
        throw new Error("invalid mnemonic");
      }
      for (let bit = 0; bit < 11; bit++) {
        if (index2 & 1 << 10 - bit) {
          entropy[offset >> 3] |= 1 << 7 - offset % 8;
        }
        offset++;
      }
    }
    const entropyBits = 32 * words2.length / 3;
    const checksumBits = words2.length / 3;
    const checksumMask = getUpperMask(checksumBits);
    const checksum = arrayify(sha256$1(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
      throw new Error("invalid checksum");
    }
    return hexlify(entropy.slice(0, entropyBits / 8));
  }
  function entropyToMnemonic(entropy, wordlist2) {
    wordlist2 = getWordlist(wordlist2);
    entropy = arrayify(entropy);
    if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
      throw new Error("invalid entropy");
    }
    const indices = [0];
    let remainingBits = 11;
    for (let i = 0; i < entropy.length; i++) {
      if (remainingBits > 8) {
        indices[indices.length - 1] <<= 8;
        indices[indices.length - 1] |= entropy[i];
        remainingBits -= 8;
      } else {
        indices[indices.length - 1] <<= remainingBits;
        indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
        indices.push(entropy[i] & getLowerMask(8 - remainingBits));
        remainingBits += 3;
      }
    }
    const checksumBits = entropy.length / 4;
    const checksum = arrayify(sha256$1(entropy))[0] & getUpperMask(checksumBits);
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= checksum >> 8 - checksumBits;
    return wordlist2.join(indices.map((index2) => wordlist2.getWord(index2)));
  }
  function isValidMnemonic(mnemonic, wordlist2) {
    try {
      mnemonicToEntropy(mnemonic, wordlist2);
      return true;
    } catch (error) {
    }
    return false;
  }
  var version$h = "random/5.1.0";
  var logger$m = new Logger(version$h);
  var anyGlobal = null;
  try {
    anyGlobal = window;
    if (anyGlobal == null) {
      throw new Error("try next");
    }
  } catch (error) {
    try {
      anyGlobal = global;
      if (anyGlobal == null) {
        throw new Error("try next");
      }
    } catch (error2) {
      anyGlobal = {};
    }
  }
  var crypto = anyGlobal.crypto || anyGlobal.msCrypto;
  if (!crypto || !crypto.getRandomValues) {
    logger$m.warn("WARNING: Missing strong random number source");
    crypto = { getRandomValues: function(buffer) {
      return logger$m.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, { operation: "crypto.getRandomValues" });
    } };
  }
  function randomBytes(length) {
    if (length <= 0 || length > 1024 || length % 1) {
      logger$m.throwArgumentError("invalid length", "length", length);
    }
    const result = new Uint8Array(length);
    crypto.getRandomValues(result);
    return arrayify(result);
  }
  function shuffled(array) {
    array = array.slice();
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      const tmp = array[i];
      array[i] = array[j];
      array[j] = tmp;
    }
    return array;
  }
  var aesJs = createCommonjsModule(function(module, exports) {
    "use strict";
    (function(root) {
      function checkInt(value) {
        return parseInt(value) === value;
      }
      function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) {
          return false;
        }
        for (var i = 0; i < arrayish.length; i++) {
          if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
            return false;
          }
        }
        return true;
      }
      function coerceArray(arg, copy) {
        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === "Uint8Array") {
          if (copy) {
            if (arg.slice) {
              arg = arg.slice();
            } else {
              arg = Array.prototype.slice.call(arg);
            }
          }
          return arg;
        }
        if (Array.isArray(arg)) {
          if (!checkInts(arg)) {
            throw new Error("Array contains invalid value: " + arg);
          }
          return new Uint8Array(arg);
        }
        if (checkInt(arg.length) && checkInts(arg)) {
          return new Uint8Array(arg);
        }
        throw new Error("unsupported array-like object");
      }
      function createArray(length) {
        return new Uint8Array(length);
      }
      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
          if (sourceArray.slice) {
            sourceArray = sourceArray.slice(sourceStart, sourceEnd);
          } else {
            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
          }
        }
        targetArray.set(sourceArray, targetStart);
      }
      var convertUtf8 = function() {
        function toBytes(text) {
          var result = [], i = 0;
          text = encodeURI(text);
          while (i < text.length) {
            var c = text.charCodeAt(i++);
            if (c === 37) {
              result.push(parseInt(text.substr(i, 2), 16));
              i += 2;
            } else {
              result.push(c);
            }
          }
          return coerceArray(result);
        }
        function fromBytes(bytes) {
          var result = [], i = 0;
          while (i < bytes.length) {
            var c = bytes[i];
            if (c < 128) {
              result.push(String.fromCharCode(c));
              i++;
            } else if (c > 191 && c < 224) {
              result.push(String.fromCharCode((c & 31) << 6 | bytes[i + 1] & 63));
              i += 2;
            } else {
              result.push(String.fromCharCode((c & 15) << 12 | (bytes[i + 1] & 63) << 6 | bytes[i + 2] & 63));
              i += 3;
            }
          }
          return result.join("");
        }
        return { toBytes, fromBytes };
      }();
      var convertHex = function() {
        function toBytes(text) {
          var result = [];
          for (var i = 0; i < text.length; i += 2) {
            result.push(parseInt(text.substr(i, 2), 16));
          }
          return result;
        }
        var Hex = "0123456789abcdef";
        function fromBytes(bytes) {
          var result = [];
          for (var i = 0; i < bytes.length; i++) {
            var v = bytes[i];
            result.push(Hex[(v & 240) >> 4] + Hex[v & 15]);
          }
          return result.join("");
        }
        return { toBytes, fromBytes };
      }();
      var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
      var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
      var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
      var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
      var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
      var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
      var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
      var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
      var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
      var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
      var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
      var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
      var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
      var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
      var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
      var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
      function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
          result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
        }
        return result;
      }
      var AES = function(key2) {
        if (!(this instanceof AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        Object.defineProperty(this, "key", { value: coerceArray(key2, true) });
        this._prepare();
      };
      AES.prototype._prepare = function() {
        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
        }
        this._Ke = [];
        this._Kd = [];
        for (var i = 0; i <= rounds; i++) {
          this._Ke.push([0, 0, 0, 0]);
          this._Kd.push([0, 0, 0, 0]);
        }
        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;
        var tk = convertToInt32(this.key);
        var index2;
        for (var i = 0; i < KC; i++) {
          index2 = i >> 2;
          this._Ke[index2][i % 4] = tk[i];
          this._Kd[rounds - index2][i % 4] = tk[i];
        }
        var rconpointer = 0;
        var t = KC, tt;
        while (t < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (var i = 1; i < KC; i++) {
              tk[i] ^= tk[i - 1];
            }
          } else {
            for (var i = 1; i < KC / 2; i++) {
              tk[i] ^= tk[i - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
            for (var i = KC / 2 + 1; i < KC; i++) {
              tk[i] ^= tk[i - 1];
            }
          }
          var i = 0, r2, c;
          while (i < KC && t < roundKeyCount) {
            r2 = t >> 2;
            c = t % 4;
            this._Ke[r2][c] = tk[i];
            this._Kd[rounds - r2][c] = tk[i++];
            t++;
          }
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var c = 0; c < 4; c++) {
            tt = this._Kd[r2][c];
            this._Kd[r2][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      };
      AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
          throw new Error("invalid plaintext size (must be 16 bytes)");
        }
        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
          t[i] ^= this._Ke[0][i];
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var i = 0; i < 4; i++) {
            a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ this._Ke[r2][i];
          }
          t = a.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Ke[rounds][i];
          result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
          throw new Error("invalid ciphertext size (must be 16 bytes)");
        }
        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
          t[i] ^= this._Kd[0][i];
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var i = 0; i < 4; i++) {
            a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ this._Kd[r2][i];
          }
          t = a.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Kd[rounds][i];
          result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      var ModeOfOperationECB = function(key2) {
        if (!(this instanceof ModeOfOperationECB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Electronic Code Block";
        this.name = "ecb";
        this._aes = new AES(key2);
      };
      ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          block = this._aes.encrypt(block);
          copyArray(block, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          copyArray(block, plaintext, i);
        }
        return plaintext;
      };
      var ModeOfOperationCBC = function(key2, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Block Chaining";
        this.name = "cbc";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastCipherblock = coerceArray(iv, true);
        this._aes = new AES(key2);
      };
      ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          for (var j = 0; j < 16; j++) {
            block[j] ^= this._lastCipherblock[j];
          }
          this._lastCipherblock = this._aes.encrypt(block);
          copyArray(this._lastCipherblock, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          for (var j = 0; j < 16; j++) {
            plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
          }
          copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }
        return plaintext;
      };
      var ModeOfOperationCFB = function(key2, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Feedback";
        this.name = "cfb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 size)");
        }
        if (!segmentSize) {
          segmentSize = 1;
        }
        this.segmentSize = segmentSize;
        this._shiftRegister = coerceArray(iv, true);
        this._aes = new AES(key2);
      };
      ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if (plaintext.length % this.segmentSize != 0) {
          throw new Error("invalid plaintext size (must be segmentSize bytes)");
        }
        var encrypted = coerceArray(plaintext, true);
        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j = 0; j < this.segmentSize; j++) {
            encrypted[i + j] ^= xorSegment[j];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return encrypted;
      };
      ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) {
          throw new Error("invalid ciphertext size (must be segmentSize bytes)");
        }
        var plaintext = coerceArray(ciphertext, true);
        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j = 0; j < this.segmentSize; j++) {
            plaintext[i + j] ^= xorSegment[j];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return plaintext;
      };
      var ModeOfOperationOFB = function(key2, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Output Feedback";
        this.name = "ofb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;
        this._aes = new AES(key2);
      };
      ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (this._lastPrecipherIndex === 16) {
            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
            this._lastPrecipherIndex = 0;
          }
          encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }
        return encrypted;
      };
      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
      var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
          throw Error("Counter must be instanitated with `new`");
        }
        if (initialValue !== 0 && !initialValue) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this._counter = createArray(16);
          this.setValue(initialValue);
        } else {
          this.setBytes(initialValue);
        }
      };
      Counter.prototype.setValue = function(value) {
        if (typeof value !== "number" || parseInt(value) != value) {
          throw new Error("invalid counter value (must be an integer)");
        }
        for (var index2 = 15; index2 >= 0; --index2) {
          this._counter[index2] = value % 256;
          value = value >> 8;
        }
      };
      Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);
        if (bytes.length != 16) {
          throw new Error("invalid counter bytes size (must be 16 bytes)");
        }
        this._counter = bytes;
      };
      Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
          if (this._counter[i] === 255) {
            this._counter[i] = 0;
          } else {
            this._counter[i]++;
            break;
          }
        }
      };
      var ModeOfOperationCTR = function(key2, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Counter";
        this.name = "ctr";
        if (!(counter instanceof Counter)) {
          counter = new Counter(counter);
        }
        this._counter = counter;
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._aes = new AES(key2);
      };
      ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (this._remainingCounterIndex === 16) {
            this._remainingCounter = this._aes.encrypt(this._counter._counter);
            this._remainingCounterIndex = 0;
            this._counter.increment();
          }
          encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
      };
      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
      function pkcs7pad(data2) {
        data2 = coerceArray(data2, true);
        var padder = 16 - data2.length % 16;
        var result = createArray(data2.length + padder);
        copyArray(data2, result);
        for (var i = data2.length; i < result.length; i++) {
          result[i] = padder;
        }
        return result;
      }
      function pkcs7strip(data2) {
        data2 = coerceArray(data2, true);
        if (data2.length < 16) {
          throw new Error("PKCS#7 invalid length");
        }
        var padder = data2[data2.length - 1];
        if (padder > 16) {
          throw new Error("PKCS#7 padding byte out of range");
        }
        var length = data2.length - padder;
        for (var i = 0; i < padder; i++) {
          if (data2[length + i] !== padder) {
            throw new Error("PKCS#7 invalid padding byte");
          }
        }
        var result = createArray(length);
        copyArray(data2, result, 0, 0, length);
        return result;
      }
      var aesjs = { AES, Counter, ModeOfOperation: { ecb: ModeOfOperationECB, cbc: ModeOfOperationCBC, cfb: ModeOfOperationCFB, ofb: ModeOfOperationOFB, ctr: ModeOfOperationCTR }, utils: { hex: convertHex, utf8: convertUtf8 }, padding: { pkcs7: { pad: pkcs7pad, strip: pkcs7strip } }, _arrayTest: { coerceArray, createArray, copyArray } };
      if (true) {
        module.exports = aesjs;
      } else if (false) {
        (void 0)(aesjs);
      } else {
        if (root.aesjs) {
          aesjs._aesjs = root.aesjs;
        }
        root.aesjs = aesjs;
      }
    })(commonjsGlobal);
  });
  var version$i = "json-wallets/5.1.0";
  function looseArrayify(hexString) {
    if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
      hexString = "0x" + hexString;
    }
    return arrayify(hexString);
  }
  function zpad(value, length) {
    value = String(value);
    while (value.length < length) {
      value = "0" + value;
    }
    return value;
  }
  function getPassword(password) {
    if (typeof password === "string") {
      return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
    }
    return arrayify(password);
  }
  function searchPath(object, path) {
    let currentChild = object;
    const comps = path.toLowerCase().split("/");
    for (let i = 0; i < comps.length; i++) {
      let matchingChild = null;
      for (const key2 in currentChild) {
        if (key2.toLowerCase() === comps[i]) {
          matchingChild = currentChild[key2];
          break;
        }
      }
      if (matchingChild === null) {
        return null;
      }
      currentChild = matchingChild;
    }
    return currentChild;
  }
  function uuidV4(randomBytes2) {
    const bytes = arrayify(randomBytes2);
    bytes[6] = bytes[6] & 15 | 64;
    bytes[8] = bytes[8] & 63 | 128;
    const value = hexlify(bytes);
    return [value.substring(2, 10), value.substring(10, 14), value.substring(14, 18), value.substring(18, 22), value.substring(22, 34)].join("-");
  }
  var logger$n = new Logger(version$i);
  var CrowdsaleAccount = class extends Description {
    isCrowdsaleAccount(value) {
      return !!(value && value._isCrowdsaleAccount);
    }
  };
  function decrypt(json, password) {
    const data2 = JSON.parse(json);
    password = getPassword(password);
    const ethaddr = getAddress(searchPath(data2, "ethaddr"));
    const encseed = looseArrayify(searchPath(data2, "encseed"));
    if (!encseed || encseed.length % 16 !== 0) {
      logger$n.throwArgumentError("invalid encseed", "json", json);
    }
    const key2 = arrayify(pbkdf2(password, password, 2e3, 32, "sha256")).slice(0, 16);
    const iv = encseed.slice(0, 16);
    const encryptedSeed = encseed.slice(16);
    const aesCbc = new aesJs.ModeOfOperation.cbc(key2, iv);
    const seed = aesJs.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
    let seedHex = "";
    for (let i = 0; i < seed.length; i++) {
      seedHex += String.fromCharCode(seed[i]);
    }
    const seedHexBytes = toUtf8Bytes(seedHex);
    const privateKey = keccak256(seedHexBytes);
    return new CrowdsaleAccount({ _isCrowdsaleAccount: true, address: ethaddr, privateKey });
  }
  function isCrowdsaleWallet(json) {
    let data2 = null;
    try {
      data2 = JSON.parse(json);
    } catch (error) {
      return false;
    }
    return data2.encseed && data2.ethaddr;
  }
  function isKeystoreWallet(json) {
    let data2 = null;
    try {
      data2 = JSON.parse(json);
    } catch (error) {
      return false;
    }
    if (!data2.version || parseInt(data2.version) !== data2.version || parseInt(data2.version) !== 3) {
      return false;
    }
    return true;
  }
  function getJsonWalletAddress(json) {
    if (isCrowdsaleWallet(json)) {
      try {
        return getAddress(JSON.parse(json).ethaddr);
      } catch (error) {
        return null;
      }
    }
    if (isKeystoreWallet(json)) {
      try {
        return getAddress(JSON.parse(json).address);
      } catch (error) {
        return null;
      }
    }
    return null;
  }
  var scrypt = createCommonjsModule(function(module, exports) {
    "use strict";
    (function(root) {
      const MAX_VALUE = 2147483647;
      function SHA2562(m) {
        const K2 = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
        let h0 = 1779033703, h1 = 3144134277, h2 = 1013904242, h3 = 2773480762;
        let h4 = 1359893119, h5 = 2600822924, h6 = 528734635, h7 = 1541459225;
        const w = new Uint32Array(64);
        function blocks(p2) {
          let off = 0, len = p2.length;
          while (len >= 64) {
            let a = h0, b = h1, c = h2, d = h3, e = h4, f2 = h5, g = h6, h = h7, u, i2, j, t1, t2;
            for (i2 = 0; i2 < 16; i2++) {
              j = off + i2 * 4;
              w[i2] = (p2[j] & 255) << 24 | (p2[j + 1] & 255) << 16 | (p2[j + 2] & 255) << 8 | p2[j + 3] & 255;
            }
            for (i2 = 16; i2 < 64; i2++) {
              u = w[i2 - 2];
              t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;
              u = w[i2 - 15];
              t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;
              w[i2] = (t1 + w[i2 - 7] | 0) + (t2 + w[i2 - 16] | 0) | 0;
            }
            for (i2 = 0; i2 < 64; i2++) {
              t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f2 ^ ~e & g) | 0) + (h + (K2[i2] + w[i2] | 0) | 0) | 0;
              t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;
              h = g;
              g = f2;
              f2 = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            h0 = h0 + a | 0;
            h1 = h1 + b | 0;
            h2 = h2 + c | 0;
            h3 = h3 + d | 0;
            h4 = h4 + e | 0;
            h5 = h5 + f2 | 0;
            h6 = h6 + g | 0;
            h7 = h7 + h | 0;
            off += 64;
            len -= 64;
          }
        }
        blocks(m);
        let i, bytesLeft = m.length % 64, bitLenHi = m.length / 536870912 | 0, bitLenLo = m.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p = m.slice(m.length - bytesLeft, m.length);
        p.push(128);
        for (i = bytesLeft + 1; i < numZeros; i++) {
          p.push(0);
        }
        p.push(bitLenHi >>> 24 & 255);
        p.push(bitLenHi >>> 16 & 255);
        p.push(bitLenHi >>> 8 & 255);
        p.push(bitLenHi >>> 0 & 255);
        p.push(bitLenLo >>> 24 & 255);
        p.push(bitLenLo >>> 16 & 255);
        p.push(bitLenLo >>> 8 & 255);
        p.push(bitLenLo >>> 0 & 255);
        blocks(p);
        return [h0 >>> 24 & 255, h0 >>> 16 & 255, h0 >>> 8 & 255, h0 >>> 0 & 255, h1 >>> 24 & 255, h1 >>> 16 & 255, h1 >>> 8 & 255, h1 >>> 0 & 255, h2 >>> 24 & 255, h2 >>> 16 & 255, h2 >>> 8 & 255, h2 >>> 0 & 255, h3 >>> 24 & 255, h3 >>> 16 & 255, h3 >>> 8 & 255, h3 >>> 0 & 255, h4 >>> 24 & 255, h4 >>> 16 & 255, h4 >>> 8 & 255, h4 >>> 0 & 255, h5 >>> 24 & 255, h5 >>> 16 & 255, h5 >>> 8 & 255, h5 >>> 0 & 255, h6 >>> 24 & 255, h6 >>> 16 & 255, h6 >>> 8 & 255, h6 >>> 0 & 255, h7 >>> 24 & 255, h7 >>> 16 & 255, h7 >>> 8 & 255, h7 >>> 0 & 255];
      }
      function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
        password = password.length <= 64 ? password : SHA2562(password);
        const innerLen = 64 + salt.length + 4;
        const inner = new Array(innerLen);
        const outerKey = new Array(64);
        let i;
        let dk = [];
        for (i = 0; i < 64; i++) {
          inner[i] = 54;
        }
        for (i = 0; i < password.length; i++) {
          inner[i] ^= password[i];
        }
        for (i = 0; i < salt.length; i++) {
          inner[64 + i] = salt[i];
        }
        for (i = innerLen - 4; i < innerLen; i++) {
          inner[i] = 0;
        }
        for (i = 0; i < 64; i++)
          outerKey[i] = 92;
        for (i = 0; i < password.length; i++)
          outerKey[i] ^= password[i];
        function incrementCounter() {
          for (let i2 = innerLen - 1; i2 >= innerLen - 4; i2--) {
            inner[i2]++;
            if (inner[i2] <= 255)
              return;
            inner[i2] = 0;
          }
        }
        while (dkLen >= 32) {
          incrementCounter();
          dk = dk.concat(SHA2562(outerKey.concat(SHA2562(inner))));
          dkLen -= 32;
        }
        if (dkLen > 0) {
          incrementCounter();
          dk = dk.concat(SHA2562(outerKey.concat(SHA2562(inner))).slice(0, dkLen));
        }
        return dk;
      }
      function blockmix_salsa8(BY, Yi, r2, x, _X) {
        let i;
        arraycopy(BY, (2 * r2 - 1) * 16, _X, 0, 16);
        for (i = 0; i < 2 * r2; i++) {
          blockxor(BY, i * 16, _X, 16);
          salsa20_8(_X, x);
          arraycopy(_X, 0, BY, Yi + i * 16, 16);
        }
        for (i = 0; i < r2; i++) {
          arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);
        }
        for (i = 0; i < r2; i++) {
          arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r2) * 16, 16);
        }
      }
      function R(a, b) {
        return a << b | a >>> 32 - b;
      }
      function salsa20_8(B, x) {
        arraycopy(B, 0, x, 0, 16);
        for (let i = 8; i > 0; i -= 2) {
          x[4] ^= R(x[0] + x[12], 7);
          x[8] ^= R(x[4] + x[0], 9);
          x[12] ^= R(x[8] + x[4], 13);
          x[0] ^= R(x[12] + x[8], 18);
          x[9] ^= R(x[5] + x[1], 7);
          x[13] ^= R(x[9] + x[5], 9);
          x[1] ^= R(x[13] + x[9], 13);
          x[5] ^= R(x[1] + x[13], 18);
          x[14] ^= R(x[10] + x[6], 7);
          x[2] ^= R(x[14] + x[10], 9);
          x[6] ^= R(x[2] + x[14], 13);
          x[10] ^= R(x[6] + x[2], 18);
          x[3] ^= R(x[15] + x[11], 7);
          x[7] ^= R(x[3] + x[15], 9);
          x[11] ^= R(x[7] + x[3], 13);
          x[15] ^= R(x[11] + x[7], 18);
          x[1] ^= R(x[0] + x[3], 7);
          x[2] ^= R(x[1] + x[0], 9);
          x[3] ^= R(x[2] + x[1], 13);
          x[0] ^= R(x[3] + x[2], 18);
          x[6] ^= R(x[5] + x[4], 7);
          x[7] ^= R(x[6] + x[5], 9);
          x[4] ^= R(x[7] + x[6], 13);
          x[5] ^= R(x[4] + x[7], 18);
          x[11] ^= R(x[10] + x[9], 7);
          x[8] ^= R(x[11] + x[10], 9);
          x[9] ^= R(x[8] + x[11], 13);
          x[10] ^= R(x[9] + x[8], 18);
          x[12] ^= R(x[15] + x[14], 7);
          x[13] ^= R(x[12] + x[15], 9);
          x[14] ^= R(x[13] + x[12], 13);
          x[15] ^= R(x[14] + x[13], 18);
        }
        for (let i = 0; i < 16; ++i) {
          B[i] += x[i];
        }
      }
      function blockxor(S, Si, D, len) {
        for (let i = 0; i < len; i++) {
          D[i] ^= S[Si + i];
        }
      }
      function arraycopy(src, srcPos, dest, destPos, length) {
        while (length--) {
          dest[destPos++] = src[srcPos++];
        }
      }
      function checkBufferish(o) {
        if (!o || typeof o.length !== "number") {
          return false;
        }
        for (let i = 0; i < o.length; i++) {
          const v = o[i];
          if (typeof v !== "number" || v % 1 || v < 0 || v >= 256) {
            return false;
          }
        }
        return true;
      }
      function ensureInteger(value, name2) {
        if (typeof value !== "number" || value % 1) {
          throw new Error("invalid " + name2);
        }
        return value;
      }
      function _scrypt(password, salt, N2, r2, p, dkLen, callback) {
        N2 = ensureInteger(N2, "N");
        r2 = ensureInteger(r2, "r");
        p = ensureInteger(p, "p");
        dkLen = ensureInteger(dkLen, "dkLen");
        if (N2 === 0 || (N2 & N2 - 1) !== 0) {
          throw new Error("N must be power of 2");
        }
        if (N2 > MAX_VALUE / 128 / r2) {
          throw new Error("N too large");
        }
        if (r2 > MAX_VALUE / 128 / p) {
          throw new Error("r too large");
        }
        if (!checkBufferish(password)) {
          throw new Error("password must be an array or buffer");
        }
        password = Array.prototype.slice.call(password);
        if (!checkBufferish(salt)) {
          throw new Error("salt must be an array or buffer");
        }
        salt = Array.prototype.slice.call(salt);
        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r2);
        const B = new Uint32Array(p * 32 * r2);
        for (let i = 0; i < B.length; i++) {
          const j = i * 4;
          B[i] = (b[j + 3] & 255) << 24 | (b[j + 2] & 255) << 16 | (b[j + 1] & 255) << 8 | (b[j + 0] & 255) << 0;
        }
        const XY = new Uint32Array(64 * r2);
        const V = new Uint32Array(32 * r2 * N2);
        const Yi = 32 * r2;
        const x = new Uint32Array(16);
        const _X = new Uint32Array(16);
        const totalOps = p * N2 * 2;
        let currentOp = 0;
        let lastPercent10 = null;
        let stop = false;
        let state = 0;
        let i0 = 0, i1;
        let Bi;
        const limit = callback ? parseInt(1e3 / r2) : 4294967295;
        const nextTick = typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
        const incrementalSMix = function() {
          if (stop) {
            return callback(new Error("cancelled"), currentOp / totalOps);
          }
          let steps;
          switch (state) {
            case 0:
              Bi = i0 * 32 * r2;
              arraycopy(B, Bi, XY, 0, Yi);
              state = 1;
              i1 = 0;
            case 1:
              steps = N2 - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i = 0; i < steps; i++) {
                arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);
                blockmix_salsa8(XY, Yi, r2, x, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N2) {
                break;
              }
              i1 = 0;
              state = 2;
            case 2:
              steps = N2 - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i = 0; i < steps; i++) {
                const offset = (2 * r2 - 1) * 16;
                const j = XY[offset] & N2 - 1;
                blockxor(V, j * Yi, XY, Yi);
                blockmix_salsa8(XY, Yi, r2, x, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N2) {
                break;
              }
              arraycopy(XY, 0, B, Bi, Yi);
              i0++;
              if (i0 < p) {
                state = 0;
                break;
              }
              b = [];
              for (let i = 0; i < B.length; i++) {
                b.push(B[i] >> 0 & 255);
                b.push(B[i] >> 8 & 255);
                b.push(B[i] >> 16 & 255);
                b.push(B[i] >> 24 & 255);
              }
              const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);
              if (callback) {
                callback(null, 1, derivedKey);
              }
              return derivedKey;
          }
          if (callback) {
            nextTick(incrementalSMix);
          }
        };
        if (!callback) {
          while (true) {
            const derivedKey = incrementalSMix();
            if (derivedKey != void 0) {
              return derivedKey;
            }
          }
        }
        incrementalSMix();
      }
      const lib = { scrypt: function(password, salt, N2, r2, p, dkLen, progressCallback) {
        return new Promise(function(resolve, reject) {
          let lastProgress = 0;
          if (progressCallback) {
            progressCallback(0);
          }
          _scrypt(password, salt, N2, r2, p, dkLen, function(error, progress, key2) {
            if (error) {
              reject(error);
            } else if (key2) {
              if (progressCallback && lastProgress !== 1) {
                progressCallback(1);
              }
              resolve(new Uint8Array(key2));
            } else if (progressCallback && progress !== lastProgress) {
              lastProgress = progress;
              return progressCallback(progress);
            }
          });
        });
      }, syncScrypt: function(password, salt, N2, r2, p, dkLen) {
        return new Uint8Array(_scrypt(password, salt, N2, r2, p, dkLen));
      } };
      if (true) {
        module.exports = lib;
      } else if (false) {
        (void 0)(lib);
      } else if (root) {
        if (root.scrypt) {
          root._scrypt = root.scrypt;
        }
        root.scrypt = lib;
      }
    })(commonjsGlobal);
  });
  var __awaiter$4 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$o = new Logger(version$i);
  function hasMnemonic(value) {
    return value != null && value.mnemonic && value.mnemonic.phrase;
  }
  var KeystoreAccount = class extends Description {
    isKeystoreAccount(value) {
      return !!(value && value._isKeystoreAccount);
    }
  };
  function _decrypt(data2, key2, ciphertext) {
    const cipher = searchPath(data2, "crypto/cipher");
    if (cipher === "aes-128-ctr") {
      const iv = looseArrayify(searchPath(data2, "crypto/cipherparams/iv"));
      const counter = new aesJs.Counter(iv);
      const aesCtr = new aesJs.ModeOfOperation.ctr(key2, counter);
      return arrayify(aesCtr.decrypt(ciphertext));
    }
    return null;
  }
  function _getAccount(data2, key2) {
    const ciphertext = looseArrayify(searchPath(data2, "crypto/ciphertext"));
    const computedMAC = hexlify(keccak256(concat([key2.slice(16, 32), ciphertext]))).substring(2);
    if (computedMAC !== searchPath(data2, "crypto/mac").toLowerCase()) {
      throw new Error("invalid password");
    }
    const privateKey = _decrypt(data2, key2.slice(0, 16), ciphertext);
    if (!privateKey) {
      logger$o.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, { operation: "decrypt" });
    }
    const mnemonicKey = key2.slice(32, 64);
    const address = computeAddress(privateKey);
    if (data2.address) {
      let check = data2.address.toLowerCase();
      if (check.substring(0, 2) !== "0x") {
        check = "0x" + check;
      }
      if (getAddress(check) !== address) {
        throw new Error("address mismatch");
      }
    }
    const account = { _isKeystoreAccount: true, address, privateKey: hexlify(privateKey) };
    if (searchPath(data2, "x-ethers/version") === "0.1") {
      const mnemonicCiphertext = looseArrayify(searchPath(data2, "x-ethers/mnemonicCiphertext"));
      const mnemonicIv = looseArrayify(searchPath(data2, "x-ethers/mnemonicCounter"));
      const mnemonicCounter = new aesJs.Counter(mnemonicIv);
      const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
      const path = searchPath(data2, "x-ethers/path") || defaultPath;
      const locale = searchPath(data2, "x-ethers/locale") || "en";
      const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
      try {
        const mnemonic = entropyToMnemonic(entropy, locale);
        const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
        if (node.privateKey != account.privateKey) {
          throw new Error("mnemonic mismatch");
        }
        account.mnemonic = node.mnemonic;
      } catch (error) {
        if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
          throw error;
        }
      }
    }
    return new KeystoreAccount(account);
  }
  function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
    return arrayify(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
  }
  function pbkdf2$1(passwordBytes, salt, count, dkLen, prfFunc) {
    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
  }
  function _computeKdfKey(data2, password, pbkdf2Func, scryptFunc, progressCallback) {
    const passwordBytes = getPassword(password);
    const kdf = searchPath(data2, "crypto/kdf");
    if (kdf && typeof kdf === "string") {
      const throwError = function(name2, value) {
        return logger$o.throwArgumentError("invalid key-derivation function parameters", name2, value);
      };
      if (kdf.toLowerCase() === "scrypt") {
        const salt = looseArrayify(searchPath(data2, "crypto/kdfparams/salt"));
        const N2 = parseInt(searchPath(data2, "crypto/kdfparams/n"));
        const r2 = parseInt(searchPath(data2, "crypto/kdfparams/r"));
        const p = parseInt(searchPath(data2, "crypto/kdfparams/p"));
        if (!N2 || !r2 || !p) {
          throwError("kdf", kdf);
        }
        if ((N2 & N2 - 1) !== 0) {
          throwError("N", N2);
        }
        const dkLen = parseInt(searchPath(data2, "crypto/kdfparams/dklen"));
        if (dkLen !== 32) {
          throwError("dklen", dkLen);
        }
        return scryptFunc(passwordBytes, salt, N2, r2, p, 64, progressCallback);
      } else if (kdf.toLowerCase() === "pbkdf2") {
        const salt = looseArrayify(searchPath(data2, "crypto/kdfparams/salt"));
        let prfFunc = null;
        const prf = searchPath(data2, "crypto/kdfparams/prf");
        if (prf === "hmac-sha256") {
          prfFunc = "sha256";
        } else if (prf === "hmac-sha512") {
          prfFunc = "sha512";
        } else {
          throwError("prf", prf);
        }
        const count = parseInt(searchPath(data2, "crypto/kdfparams/c"));
        const dkLen = parseInt(searchPath(data2, "crypto/kdfparams/dklen"));
        if (dkLen !== 32) {
          throwError("dklen", dkLen);
        }
        return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
      }
    }
    return logger$o.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
  }
  function decryptSync(json, password) {
    const data2 = JSON.parse(json);
    const key2 = _computeKdfKey(data2, password, pbkdf2Sync, scrypt.syncScrypt);
    return _getAccount(data2, key2);
  }
  function decrypt$1(json, password, progressCallback) {
    return __awaiter$4(this, void 0, void 0, function* () {
      const data2 = JSON.parse(json);
      const key2 = yield _computeKdfKey(data2, password, pbkdf2$1, scrypt.scrypt, progressCallback);
      return _getAccount(data2, key2);
    });
  }
  function encrypt(account, password, options, progressCallback) {
    try {
      if (getAddress(account.address) !== computeAddress(account.privateKey)) {
        throw new Error("address/privateKey mismatch");
      }
      if (hasMnemonic(account)) {
        const mnemonic = account.mnemonic;
        const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
        if (node.privateKey != account.privateKey) {
          throw new Error("mnemonic mismatch");
        }
      }
    } catch (e) {
      return Promise.reject(e);
    }
    if (typeof options === "function" && !progressCallback) {
      progressCallback = options;
      options = {};
    }
    if (!options) {
      options = {};
    }
    const privateKey = arrayify(account.privateKey);
    const passwordBytes = getPassword(password);
    let entropy = null;
    let path = null;
    let locale = null;
    if (hasMnemonic(account)) {
      const srcMnemonic = account.mnemonic;
      entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
      path = srcMnemonic.path || defaultPath;
      locale = srcMnemonic.locale || "en";
    }
    let client = options.client;
    if (!client) {
      client = "ethers.js";
    }
    let salt = null;
    if (options.salt) {
      salt = arrayify(options.salt);
    } else {
      salt = randomBytes(32);
    }
    let iv = null;
    if (options.iv) {
      iv = arrayify(options.iv);
      if (iv.length !== 16) {
        throw new Error("invalid iv");
      }
    } else {
      iv = randomBytes(16);
    }
    let uuidRandom = null;
    if (options.uuid) {
      uuidRandom = arrayify(options.uuid);
      if (uuidRandom.length !== 16) {
        throw new Error("invalid uuid");
      }
    } else {
      uuidRandom = randomBytes(16);
    }
    let N2 = 1 << 17, r2 = 8, p = 1;
    if (options.scrypt) {
      if (options.scrypt.N) {
        N2 = options.scrypt.N;
      }
      if (options.scrypt.r) {
        r2 = options.scrypt.r;
      }
      if (options.scrypt.p) {
        p = options.scrypt.p;
      }
    }
    return scrypt.scrypt(passwordBytes, salt, N2, r2, p, 64, progressCallback).then((key2) => {
      key2 = arrayify(key2);
      const derivedKey = key2.slice(0, 16);
      const macPrefix = key2.slice(16, 32);
      const mnemonicKey = key2.slice(32, 64);
      const counter = new aesJs.Counter(iv);
      const aesCtr = new aesJs.ModeOfOperation.ctr(derivedKey, counter);
      const ciphertext = arrayify(aesCtr.encrypt(privateKey));
      const mac = keccak256(concat([macPrefix, ciphertext]));
      const data2 = { address: account.address.substring(2).toLowerCase(), id: uuidV4(uuidRandom), version: 3, Crypto: { cipher: "aes-128-ctr", cipherparams: { iv: hexlify(iv).substring(2) }, ciphertext: hexlify(ciphertext).substring(2), kdf: "scrypt", kdfparams: { salt: hexlify(salt).substring(2), n: N2, dklen: 32, p, r: r2 }, mac: mac.substring(2) } };
      if (entropy) {
        const mnemonicIv = randomBytes(16);
        const mnemonicCounter = new aesJs.Counter(mnemonicIv);
        const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
        const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
        const now2 = new Date();
        const timestamp = now2.getUTCFullYear() + "-" + zpad(now2.getUTCMonth() + 1, 2) + "-" + zpad(now2.getUTCDate(), 2) + "T" + zpad(now2.getUTCHours(), 2) + "-" + zpad(now2.getUTCMinutes(), 2) + "-" + zpad(now2.getUTCSeconds(), 2) + ".0Z";
        data2["x-ethers"] = { client, gethFilename: "UTC--" + timestamp + "--" + data2.address, mnemonicCounter: hexlify(mnemonicIv).substring(2), mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2), path, locale, version: "0.1" };
      }
      return JSON.stringify(data2);
    });
  }
  function decryptJsonWallet(json, password, progressCallback) {
    if (isCrowdsaleWallet(json)) {
      if (progressCallback) {
        progressCallback(0);
      }
      const account = decrypt(json, password);
      if (progressCallback) {
        progressCallback(1);
      }
      return Promise.resolve(account);
    }
    if (isKeystoreWallet(json)) {
      return decrypt$1(json, password, progressCallback);
    }
    return Promise.reject(new Error("invalid JSON wallet"));
  }
  function decryptJsonWalletSync(json, password) {
    if (isCrowdsaleWallet(json)) {
      return decrypt(json, password);
    }
    if (isKeystoreWallet(json)) {
      return decryptSync(json, password);
    }
    throw new Error("invalid JSON wallet");
  }
  var version$j = "wallet/5.1.0";
  var __awaiter$5 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$p = new Logger(version$j);
  function isAccount(value) {
    return value != null && isHexString(value.privateKey, 32) && value.address != null;
  }
  function hasMnemonic$1(value) {
    const mnemonic = value.mnemonic;
    return mnemonic && mnemonic.phrase;
  }
  var Wallet = class extends Signer {
    constructor(privateKey, provider) {
      logger$p.checkNew(new.target, Wallet);
      super();
      if (isAccount(privateKey)) {
        const signingKey = new SigningKey(privateKey.privateKey);
        defineReadOnly(this, "_signingKey", () => signingKey);
        defineReadOnly(this, "address", computeAddress(this.publicKey));
        if (this.address !== getAddress(privateKey.address)) {
          logger$p.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
        }
        if (hasMnemonic$1(privateKey)) {
          const srcMnemonic = privateKey.mnemonic;
          defineReadOnly(this, "_mnemonic", () => ({ phrase: srcMnemonic.phrase, path: srcMnemonic.path || defaultPath, locale: srcMnemonic.locale || "en" }));
          const mnemonic = this.mnemonic;
          const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
          if (computeAddress(node.privateKey) !== this.address) {
            logger$p.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
          }
        } else {
          defineReadOnly(this, "_mnemonic", () => null);
        }
      } else {
        if (SigningKey.isSigningKey(privateKey)) {
          if (privateKey.curve !== "secp256k1") {
            logger$p.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
          }
          defineReadOnly(this, "_signingKey", () => privateKey);
        } else {
          if (typeof privateKey === "string") {
            if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
              privateKey = "0x" + privateKey;
            }
          }
          const signingKey = new SigningKey(privateKey);
          defineReadOnly(this, "_signingKey", () => signingKey);
        }
        defineReadOnly(this, "_mnemonic", () => null);
        defineReadOnly(this, "address", computeAddress(this.publicKey));
      }
      if (provider && !Provider.isProvider(provider)) {
        logger$p.throwArgumentError("invalid provider", "provider", provider);
      }
      defineReadOnly(this, "provider", provider || null);
    }
    get mnemonic() {
      return this._mnemonic();
    }
    get privateKey() {
      return this._signingKey().privateKey;
    }
    get publicKey() {
      return this._signingKey().publicKey;
    }
    getAddress() {
      return Promise.resolve(this.address);
    }
    connect(provider) {
      return new Wallet(this, provider);
    }
    signTransaction(transaction) {
      return resolveProperties(transaction).then((tx) => {
        if (tx.from != null) {
          if (getAddress(tx.from) !== this.address) {
            logger$p.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
          }
          delete tx.from;
        }
        const signature2 = this._signingKey().signDigest(keccak256(serialize(tx)));
        return serialize(tx, signature2);
      });
    }
    signMessage(message) {
      return __awaiter$5(this, void 0, void 0, function* () {
        return joinSignature(this._signingKey().signDigest(hashMessage(message)));
      });
    }
    _signTypedData(domain, types, value) {
      return __awaiter$5(this, void 0, void 0, function* () {
        const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name2) => {
          if (this.provider == null) {
            logger$p.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "resolveName", value: name2 });
          }
          return this.provider.resolveName(name2);
        });
        return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
      });
    }
    encrypt(password, options, progressCallback) {
      if (typeof options === "function" && !progressCallback) {
        progressCallback = options;
        options = {};
      }
      if (progressCallback && typeof progressCallback !== "function") {
        throw new Error("invalid callback");
      }
      if (!options) {
        options = {};
      }
      return encrypt(this, password, options, progressCallback);
    }
    static createRandom(options) {
      let entropy = randomBytes(16);
      if (!options) {
        options = {};
      }
      if (options.extraEntropy) {
        entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));
      }
      const mnemonic = entropyToMnemonic(entropy, options.locale);
      return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
    }
    static fromEncryptedJson(json, password, progressCallback) {
      return decryptJsonWallet(json, password, progressCallback).then((account) => {
        return new Wallet(account);
      });
    }
    static fromEncryptedJsonSync(json, password) {
      return new Wallet(decryptJsonWalletSync(json, password));
    }
    static fromMnemonic(mnemonic, path, wordlist2) {
      if (!path) {
        path = defaultPath;
      }
      return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist2).derivePath(path));
    }
  };
  function verifyMessage(message, signature2) {
    return recoverAddress(hashMessage(message), signature2);
  }
  function verifyTypedData(domain, types, value, signature2) {
    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature2);
  }
  var version$k = "networks/5.1.0";
  var logger$q = new Logger(version$k);
  function isRenetworkable(value) {
    return value && typeof value.renetwork === "function";
  }
  function ethDefaultProvider(network) {
    const func = function(providers, options) {
      if (options == null) {
        options = {};
      }
      const providerList = [];
      if (providers.InfuraProvider) {
        try {
          providerList.push(new providers.InfuraProvider(network, options.infura));
        } catch (error) {
        }
      }
      if (providers.EtherscanProvider) {
        try {
          providerList.push(new providers.EtherscanProvider(network, options.etherscan));
        } catch (error) {
        }
      }
      if (providers.AlchemyProvider) {
        const skip = ["goerli", "ropsten", "rinkeby"];
        try {
          const provider = new providers.AlchemyProvider(network, options.alchemy);
          if (provider.network && skip.indexOf(provider.network.name) === -1) {
            providerList.push(provider);
          }
        } catch (error) {
        }
      }
      if (providers.PocketProvider) {
        const skip = ["goerli", "ropsten", "rinkeby"];
        try {
          const provider = new providers.PocketProvider(network);
          if (provider.network && skip.indexOf(provider.network.name) === -1) {
            providerList.push(provider);
          }
        } catch (error) {
        }
      }
      if (providers.CloudflareProvider) {
        try {
          providerList.push(new providers.CloudflareProvider(network));
        } catch (error) {
        }
      }
      if (providerList.length === 0) {
        return null;
      }
      if (providers.FallbackProvider) {
        let quorum = 1;
        if (options.quorum != null) {
          quorum = options.quorum;
        } else if (network === "homestead") {
          quorum = 2;
        }
        return new providers.FallbackProvider(providerList, quorum);
      }
      return providerList[0];
    };
    func.renetwork = function(network2) {
      return ethDefaultProvider(network2);
    };
    return func;
  }
  function etcDefaultProvider(url, network) {
    const func = function(providers, options) {
      if (providers.JsonRpcProvider) {
        return new providers.JsonRpcProvider(url, network);
      }
      return null;
    };
    func.renetwork = function(network2) {
      return etcDefaultProvider(url, network2);
    };
    return func;
  }
  var homestead = { chainId: 1, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "homestead", _defaultProvider: ethDefaultProvider("homestead") };
  var ropsten = { chainId: 3, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "ropsten", _defaultProvider: ethDefaultProvider("ropsten") };
  var classicMordor = { chainId: 63, name: "classicMordor", _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor") };
  var networks = { unspecified: { chainId: 0, name: "unspecified" }, homestead, mainnet: homestead, morden: { chainId: 2, name: "morden" }, ropsten, testnet: ropsten, rinkeby: { chainId: 4, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "rinkeby", _defaultProvider: ethDefaultProvider("rinkeby") }, kovan: { chainId: 42, name: "kovan", _defaultProvider: ethDefaultProvider("kovan") }, goerli: { chainId: 5, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "goerli", _defaultProvider: ethDefaultProvider("goerli") }, classic: { chainId: 61, name: "classic", _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic") }, classicMorden: { chainId: 62, name: "classicMorden" }, classicMordor, classicTestnet: classicMordor, classicKotti: { chainId: 6, name: "classicKotti", _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti") } };
  function getNetwork(network) {
    if (network == null) {
      return null;
    }
    if (typeof network === "number") {
      for (const name2 in networks) {
        const standard2 = networks[name2];
        if (standard2.chainId === network) {
          return { name: standard2.name, chainId: standard2.chainId, ensAddress: standard2.ensAddress || null, _defaultProvider: standard2._defaultProvider || null };
        }
      }
      return { chainId: network, name: "unknown" };
    }
    if (typeof network === "string") {
      const standard2 = networks[network];
      if (standard2 == null) {
        return null;
      }
      return { name: standard2.name, chainId: standard2.chainId, ensAddress: standard2.ensAddress, _defaultProvider: standard2._defaultProvider || null };
    }
    const standard = networks[network.name];
    if (!standard) {
      if (typeof network.chainId !== "number") {
        logger$q.throwArgumentError("invalid network chainId", "network", network);
      }
      return network;
    }
    if (network.chainId !== 0 && network.chainId !== standard.chainId) {
      logger$q.throwArgumentError("network chainId mismatch", "network", network);
    }
    let defaultProvider = network._defaultProvider || null;
    if (defaultProvider == null && standard._defaultProvider) {
      if (isRenetworkable(standard._defaultProvider)) {
        defaultProvider = standard._defaultProvider.renetwork(network);
      } else {
        defaultProvider = standard._defaultProvider;
      }
    }
    return { name: network.name, chainId: standard.chainId, ensAddress: network.ensAddress || standard.ensAddress || null, _defaultProvider: defaultProvider };
  }
  function decode$1(textData) {
    textData = atob(textData);
    const data2 = [];
    for (let i = 0; i < textData.length; i++) {
      data2.push(textData.charCodeAt(i));
    }
    return arrayify(data2);
  }
  function encode$1(data2) {
    data2 = arrayify(data2);
    let textData = "";
    for (let i = 0; i < data2.length; i++) {
      textData += String.fromCharCode(data2[i]);
    }
    return btoa(textData);
  }
  var index$2 = Object.freeze({ __proto__: null, decode: decode$1, encode: encode$1 });
  var version$l = "web/5.1.0";
  var __awaiter$6 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function getUrl(href, options) {
    return __awaiter$6(this, void 0, void 0, function* () {
      if (options == null) {
        options = {};
      }
      const request = { method: options.method || "GET", headers: options.headers || {}, body: options.body || void 0, mode: "cors", cache: "no-cache", credentials: "same-origin", redirect: "follow", referrer: "client" };
      const response = yield fetch(href, request);
      const body = yield response.arrayBuffer();
      const headers = {};
      if (response.headers.forEach) {
        response.headers.forEach((value, key2) => {
          headers[key2.toLowerCase()] = value;
        });
      } else {
        response.headers.keys().forEach((key2) => {
          headers[key2.toLowerCase()] = response.headers.get(key2);
        });
      }
      return { headers, statusCode: response.status, statusMessage: response.statusText, body: arrayify(new Uint8Array(body)) };
    });
  }
  var __awaiter$7 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$r = new Logger(version$l);
  function staller(duration) {
    return new Promise((resolve) => {
      setTimeout(resolve, duration);
    });
  }
  function bodyify(value, type) {
    if (value == null) {
      return null;
    }
    if (typeof value === "string") {
      return value;
    }
    if (isBytesLike(value)) {
      if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
        try {
          return toUtf8String(value);
        } catch (error) {
        }
      }
      return hexlify(value);
    }
    return value;
  }
  function _fetchData(connection, body, processFunc) {
    const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
    logger$r.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
    const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
    const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
    logger$r.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
    const headers = {};
    let url = null;
    const options = { method: "GET" };
    let allow304 = false;
    let timeout = 2 * 60 * 1e3;
    if (typeof connection === "string") {
      url = connection;
    } else if (typeof connection === "object") {
      if (connection == null || connection.url == null) {
        logger$r.throwArgumentError("missing URL", "connection.url", connection);
      }
      url = connection.url;
      if (typeof connection.timeout === "number" && connection.timeout > 0) {
        timeout = connection.timeout;
      }
      if (connection.headers) {
        for (const key2 in connection.headers) {
          headers[key2.toLowerCase()] = { key: key2, value: String(connection.headers[key2]) };
          if (["if-none-match", "if-modified-since"].indexOf(key2.toLowerCase()) >= 0) {
            allow304 = true;
          }
        }
      }
      options.allowGzip = !!connection.allowGzip;
      if (connection.user != null && connection.password != null) {
        if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
          logger$r.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url, user: connection.user, password: "[REDACTED]" });
        }
        const authorization = connection.user + ":" + connection.password;
        headers["authorization"] = { key: "Authorization", value: "Basic " + encode$1(toUtf8Bytes(authorization)) };
      }
    }
    if (body) {
      options.method = "POST";
      options.body = body;
      if (headers["content-type"] == null) {
        headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
      }
      if (headers["content-length"] == null) {
        headers["content-length"] = { key: "Content-Length", value: String(body.length) };
      }
    }
    const flatHeaders = {};
    Object.keys(headers).forEach((key2) => {
      const header = headers[key2];
      flatHeaders[header.key] = header.value;
    });
    options.headers = flatHeaders;
    const runningTimeout = function() {
      let timer2 = null;
      const promise = new Promise(function(resolve, reject) {
        if (timeout) {
          timer2 = setTimeout(() => {
            if (timer2 == null) {
              return;
            }
            timer2 = null;
            reject(logger$r.makeError("timeout", Logger.errors.TIMEOUT, { requestBody: bodyify(options.body, flatHeaders["content-type"]), requestMethod: options.method, timeout, url }));
          }, timeout);
        }
      });
      const cancel = function() {
        if (timer2 == null) {
          return;
        }
        clearTimeout(timer2);
        timer2 = null;
      };
      return { promise, cancel };
    }();
    const runningFetch = function() {
      return __awaiter$7(this, void 0, void 0, function* () {
        for (let attempt = 0; attempt < attemptLimit; attempt++) {
          let response = null;
          try {
            response = yield getUrl(url, options);
            if (response.statusCode === 429 && attempt < attemptLimit) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                let stall2 = 0;
                const retryAfter = response.headers["retry-after"];
                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                  stall2 = parseInt(retryAfter) * 1e3;
                } else {
                  stall2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                }
                yield staller(stall2);
                continue;
              }
            }
          } catch (error) {
            response = error.response;
            if (response == null) {
              runningTimeout.cancel();
              logger$r.throwError("missing response", Logger.errors.SERVER_ERROR, { requestBody: bodyify(options.body, flatHeaders["content-type"]), requestMethod: options.method, serverError: error, url });
            }
          }
          let body2 = response.body;
          if (allow304 && response.statusCode === 304) {
            body2 = null;
          } else if (response.statusCode < 200 || response.statusCode >= 300) {
            runningTimeout.cancel();
            logger$r.throwError("bad response", Logger.errors.SERVER_ERROR, { status: response.statusCode, headers: response.headers, body: bodyify(body2, response.headers ? response.headers["content-type"] : null), requestBody: bodyify(options.body, flatHeaders["content-type"]), requestMethod: options.method, url });
          }
          if (processFunc) {
            try {
              const result = yield processFunc(body2, response);
              runningTimeout.cancel();
              return result;
            } catch (error) {
              if (error.throttleRetry && attempt < attemptLimit) {
                let tryAgain = true;
                if (throttleCallback) {
                  tryAgain = yield throttleCallback(attempt, url);
                }
                if (tryAgain) {
                  const timeout2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                  yield staller(timeout2);
                  continue;
                }
              }
              runningTimeout.cancel();
              logger$r.throwError("processing response error", Logger.errors.SERVER_ERROR, { body: bodyify(body2, response.headers ? response.headers["content-type"] : null), error, requestBody: bodyify(options.body, flatHeaders["content-type"]), requestMethod: options.method, url });
            }
          }
          runningTimeout.cancel();
          return body2;
        }
        return logger$r.throwError("failed response", Logger.errors.SERVER_ERROR, { requestBody: bodyify(options.body, flatHeaders["content-type"]), requestMethod: options.method, url });
      });
    }();
    return Promise.race([runningTimeout.promise, runningFetch]);
  }
  function fetchJson(connection, json, processFunc) {
    let processJsonFunc = (value, response) => {
      let result = null;
      if (value != null) {
        try {
          result = JSON.parse(toUtf8String(value));
        } catch (error) {
          logger$r.throwError("invalid JSON", Logger.errors.SERVER_ERROR, { body: value, error });
        }
      }
      if (processFunc) {
        result = processFunc(result, response);
      }
      return result;
    };
    let body = null;
    if (json != null) {
      body = toUtf8Bytes(json);
      const updated = typeof connection === "string" ? { url: connection } : shallowCopy(connection);
      if (updated.headers) {
        const hasContentType = Object.keys(updated.headers).filter((k) => k.toLowerCase() === "content-type").length !== 0;
        if (!hasContentType) {
          updated.headers = shallowCopy(updated.headers);
          updated.headers["content-type"] = "application/json";
        }
      } else {
        updated.headers = { "content-type": "application/json" };
      }
      connection = updated;
    }
    return _fetchData(connection, body, processJsonFunc);
  }
  function poll(func, options) {
    if (!options) {
      options = {};
    }
    options = shallowCopy(options);
    if (options.floor == null) {
      options.floor = 0;
    }
    if (options.ceiling == null) {
      options.ceiling = 1e4;
    }
    if (options.interval == null) {
      options.interval = 250;
    }
    return new Promise(function(resolve, reject) {
      let timer2 = null;
      let done = false;
      const cancel = () => {
        if (done) {
          return false;
        }
        done = true;
        if (timer2) {
          clearTimeout(timer2);
        }
        return true;
      };
      if (options.timeout) {
        timer2 = setTimeout(() => {
          if (cancel()) {
            reject(new Error("timeout"));
          }
        }, options.timeout);
      }
      const retryLimit = options.retryLimit;
      let attempt = 0;
      function check() {
        return func().then(function(result) {
          if (result !== void 0) {
            if (cancel()) {
              resolve(result);
            }
          } else if (options.oncePoll) {
            options.oncePoll.once("poll", check);
          } else if (options.onceBlock) {
            options.onceBlock.once("block", check);
          } else if (!done) {
            attempt++;
            if (attempt > retryLimit) {
              if (cancel()) {
                reject(new Error("retry limit reached"));
              }
              return;
            }
            let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
            if (timeout < options.floor) {
              timeout = options.floor;
            }
            if (timeout > options.ceiling) {
              timeout = options.ceiling;
            }
            setTimeout(check, timeout);
          }
          return null;
        }, function(error) {
          if (cancel()) {
            reject(error);
          }
        });
      }
      check();
    });
  }
  var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
  var ALPHABET_MAP = {};
  for (z = 0; z < ALPHABET.length; z++) {
    x = ALPHABET.charAt(z);
    if (ALPHABET_MAP[x] !== void 0)
      throw new TypeError(x + " is ambiguous");
    ALPHABET_MAP[x] = z;
  }
  var x;
  var z;
  function polymodStep(pre) {
    var b = pre >> 25;
    return (pre & 33554431) << 5 ^ -(b >> 0 & 1) & 996825010 ^ -(b >> 1 & 1) & 642813549 ^ -(b >> 2 & 1) & 513874426 ^ -(b >> 3 & 1) & 1027748829 ^ -(b >> 4 & 1) & 705979059;
  }
  function prefixChk(prefix) {
    var chk = 1;
    for (var i = 0; i < prefix.length; ++i) {
      var c = prefix.charCodeAt(i);
      if (c < 33 || c > 126)
        return "Invalid prefix (" + prefix + ")";
      chk = polymodStep(chk) ^ c >> 5;
    }
    chk = polymodStep(chk);
    for (i = 0; i < prefix.length; ++i) {
      var v = prefix.charCodeAt(i);
      chk = polymodStep(chk) ^ v & 31;
    }
    return chk;
  }
  function encode$2(prefix, words2, LIMIT) {
    LIMIT = LIMIT || 90;
    if (prefix.length + 7 + words2.length > LIMIT)
      throw new TypeError("Exceeds length limit");
    prefix = prefix.toLowerCase();
    var chk = prefixChk(prefix);
    if (typeof chk === "string")
      throw new Error(chk);
    var result = prefix + "1";
    for (var i = 0; i < words2.length; ++i) {
      var x = words2[i];
      if (x >> 5 !== 0)
        throw new Error("Non 5-bit word");
      chk = polymodStep(chk) ^ x;
      result += ALPHABET.charAt(x);
    }
    for (i = 0; i < 6; ++i) {
      chk = polymodStep(chk);
    }
    chk ^= 1;
    for (i = 0; i < 6; ++i) {
      var v = chk >> (5 - i) * 5 & 31;
      result += ALPHABET.charAt(v);
    }
    return result;
  }
  function __decode(str, LIMIT) {
    LIMIT = LIMIT || 90;
    if (str.length < 8)
      return str + " too short";
    if (str.length > LIMIT)
      return "Exceeds length limit";
    var lowered = str.toLowerCase();
    var uppered = str.toUpperCase();
    if (str !== lowered && str !== uppered)
      return "Mixed-case string " + str;
    str = lowered;
    var split = str.lastIndexOf("1");
    if (split === -1)
      return "No separator character for " + str;
    if (split === 0)
      return "Missing prefix for " + str;
    var prefix = str.slice(0, split);
    var wordChars = str.slice(split + 1);
    if (wordChars.length < 6)
      return "Data too short";
    var chk = prefixChk(prefix);
    if (typeof chk === "string")
      return chk;
    var words2 = [];
    for (var i = 0; i < wordChars.length; ++i) {
      var c = wordChars.charAt(i);
      var v = ALPHABET_MAP[c];
      if (v === void 0)
        return "Unknown character " + c;
      chk = polymodStep(chk) ^ v;
      if (i + 6 >= wordChars.length)
        continue;
      words2.push(v);
    }
    if (chk !== 1)
      return "Invalid checksum for " + str;
    return { prefix, words: words2 };
  }
  function decodeUnsafe() {
    var res = __decode.apply(null, arguments);
    if (typeof res === "object")
      return res;
  }
  function decode$2(str) {
    var res = __decode.apply(null, arguments);
    if (typeof res === "object")
      return res;
    throw new Error(res);
  }
  function convert(data2, inBits, outBits, pad2) {
    var value = 0;
    var bits = 0;
    var maxV = (1 << outBits) - 1;
    var result = [];
    for (var i = 0; i < data2.length; ++i) {
      value = value << inBits | data2[i];
      bits += inBits;
      while (bits >= outBits) {
        bits -= outBits;
        result.push(value >> bits & maxV);
      }
    }
    if (pad2) {
      if (bits > 0) {
        result.push(value << outBits - bits & maxV);
      }
    } else {
      if (bits >= inBits)
        return "Excess padding";
      if (value << outBits - bits & maxV)
        return "Non-zero padding";
    }
    return result;
  }
  function toWordsUnsafe(bytes) {
    var res = convert(bytes, 8, 5, true);
    if (Array.isArray(res))
      return res;
  }
  function toWords(bytes) {
    var res = convert(bytes, 8, 5, true);
    if (Array.isArray(res))
      return res;
    throw new Error(res);
  }
  function fromWordsUnsafe(words2) {
    var res = convert(words2, 5, 8, false);
    if (Array.isArray(res))
      return res;
  }
  function fromWords(words2) {
    var res = convert(words2, 5, 8, false);
    if (Array.isArray(res))
      return res;
    throw new Error(res);
  }
  var bech32 = { decodeUnsafe, decode: decode$2, encode: encode$2, toWordsUnsafe, toWords, fromWordsUnsafe, fromWords };
  var version$m = "providers/5.1.2";
  var logger$s = new Logger(version$m);
  var Formatter = class {
    constructor() {
      logger$s.checkNew(new.target, Formatter);
      this.formats = this.getDefaultFormats();
    }
    getDefaultFormats() {
      const formats = {};
      const address = this.address.bind(this);
      const bigNumber = this.bigNumber.bind(this);
      const blockTag = this.blockTag.bind(this);
      const data2 = this.data.bind(this);
      const hash = this.hash.bind(this);
      const hex2 = this.hex.bind(this);
      const number = this.number.bind(this);
      const strictData = (v) => {
        return this.data(v, true);
      };
      formats.transaction = { hash, type: Formatter.allowNull(number, null), accessList: Formatter.allowNull(this.accessList.bind(this), null), blockHash: Formatter.allowNull(hash, null), blockNumber: Formatter.allowNull(number, null), transactionIndex: Formatter.allowNull(number, null), confirmations: Formatter.allowNull(number, null), from: address, gasPrice: bigNumber, gasLimit: bigNumber, to: Formatter.allowNull(address, null), value: bigNumber, nonce: number, data: data2, r: Formatter.allowNull(this.uint256), s: Formatter.allowNull(this.uint256), v: Formatter.allowNull(number), creates: Formatter.allowNull(address, null), raw: Formatter.allowNull(data2) };
      formats.transactionRequest = { from: Formatter.allowNull(address), nonce: Formatter.allowNull(number), gasLimit: Formatter.allowNull(bigNumber), gasPrice: Formatter.allowNull(bigNumber), to: Formatter.allowNull(address), value: Formatter.allowNull(bigNumber), data: Formatter.allowNull(strictData), type: Formatter.allowNull(number), accessList: Formatter.allowNull(this.accessList.bind(this), null) };
      formats.receiptLog = { transactionIndex: number, blockNumber: number, transactionHash: hash, address, topics: Formatter.arrayOf(hash), data: data2, logIndex: number, blockHash: hash };
      formats.receipt = { to: Formatter.allowNull(this.address, null), from: Formatter.allowNull(this.address, null), contractAddress: Formatter.allowNull(address, null), transactionIndex: number, root: Formatter.allowNull(hex2), gasUsed: bigNumber, logsBloom: Formatter.allowNull(data2), blockHash: hash, transactionHash: hash, logs: Formatter.arrayOf(this.receiptLog.bind(this)), blockNumber: number, confirmations: Formatter.allowNull(number, null), cumulativeGasUsed: bigNumber, status: Formatter.allowNull(number) };
      formats.block = { hash, parentHash: hash, number, timestamp: number, nonce: Formatter.allowNull(hex2), difficulty: this.difficulty.bind(this), gasLimit: bigNumber, gasUsed: bigNumber, miner: address, extraData: data2, transactions: Formatter.allowNull(Formatter.arrayOf(hash)) };
      formats.blockWithTransactions = shallowCopy(formats.block);
      formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
      formats.filter = { fromBlock: Formatter.allowNull(blockTag, void 0), toBlock: Formatter.allowNull(blockTag, void 0), blockHash: Formatter.allowNull(hash, void 0), address: Formatter.allowNull(address, void 0), topics: Formatter.allowNull(this.topics.bind(this), void 0) };
      formats.filterLog = { blockNumber: Formatter.allowNull(number), blockHash: Formatter.allowNull(hash), transactionIndex: number, removed: Formatter.allowNull(this.boolean.bind(this)), address, data: Formatter.allowFalsish(data2, "0x"), topics: Formatter.arrayOf(hash), transactionHash: hash, logIndex: number };
      return formats;
    }
    accessList(accessList) {
      return accessListify(accessList || []);
    }
    number(number) {
      if (number === "0x") {
        return 0;
      }
      return BigNumber.from(number).toNumber();
    }
    bigNumber(value) {
      return BigNumber.from(value);
    }
    boolean(value) {
      if (typeof value === "boolean") {
        return value;
      }
      if (typeof value === "string") {
        value = value.toLowerCase();
        if (value === "true") {
          return true;
        }
        if (value === "false") {
          return false;
        }
      }
      throw new Error("invalid boolean - " + value);
    }
    hex(value, strict) {
      if (typeof value === "string") {
        if (!strict && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
        }
        if (isHexString(value)) {
          return value.toLowerCase();
        }
      }
      return logger$s.throwArgumentError("invalid hash", "value", value);
    }
    data(value, strict) {
      const result = this.hex(value, strict);
      if (result.length % 2 !== 0) {
        throw new Error("invalid data; odd-length - " + value);
      }
      return result;
    }
    address(value) {
      return getAddress(value);
    }
    callAddress(value) {
      if (!isHexString(value, 32)) {
        return null;
      }
      const address = getAddress(hexDataSlice(value, 12));
      return address === AddressZero ? null : address;
    }
    contractAddress(value) {
      return getContractAddress(value);
    }
    blockTag(blockTag) {
      if (blockTag == null) {
        return "latest";
      }
      if (blockTag === "earliest") {
        return "0x0";
      }
      if (blockTag === "latest" || blockTag === "pending") {
        return blockTag;
      }
      if (typeof blockTag === "number" || isHexString(blockTag)) {
        return hexValue(blockTag);
      }
      throw new Error("invalid blockTag");
    }
    hash(value, strict) {
      const result = this.hex(value, strict);
      if (hexDataLength(result) !== 32) {
        return logger$s.throwArgumentError("invalid hash", "value", value);
      }
      return result;
    }
    difficulty(value) {
      if (value == null) {
        return null;
      }
      const v = BigNumber.from(value);
      try {
        return v.toNumber();
      } catch (error) {
      }
      return null;
    }
    uint256(value) {
      if (!isHexString(value)) {
        throw new Error("invalid uint256");
      }
      return hexZeroPad(value, 32);
    }
    _block(value, format) {
      if (value.author != null && value.miner == null) {
        value.miner = value.author;
      }
      return Formatter.check(format, value);
    }
    block(value) {
      return this._block(value, this.formats.block);
    }
    blockWithTransactions(value) {
      return this._block(value, this.formats.blockWithTransactions);
    }
    transactionRequest(value) {
      return Formatter.check(this.formats.transactionRequest, value);
    }
    transactionResponse(transaction) {
      if (transaction.gas != null && transaction.gasLimit == null) {
        transaction.gasLimit = transaction.gas;
      }
      if (transaction.to && BigNumber.from(transaction.to).isZero()) {
        transaction.to = "0x0000000000000000000000000000000000000000";
      }
      if (transaction.input != null && transaction.data == null) {
        transaction.data = transaction.input;
      }
      if (transaction.to == null && transaction.creates == null) {
        transaction.creates = this.contractAddress(transaction);
      }
      if (transaction.type === 1 && transaction.accessList == null) {
        transaction.accessList = [];
      }
      const result = Formatter.check(this.formats.transaction, transaction);
      if (transaction.chainId != null) {
        let chainId = transaction.chainId;
        if (isHexString(chainId)) {
          chainId = BigNumber.from(chainId).toNumber();
        }
        result.chainId = chainId;
      } else {
        let chainId = transaction.networkId;
        if (chainId == null && result.v == null) {
          chainId = transaction.chainId;
        }
        if (isHexString(chainId)) {
          chainId = BigNumber.from(chainId).toNumber();
        }
        if (typeof chainId !== "number" && result.v != null) {
          chainId = (result.v - 35) / 2;
          if (chainId < 0) {
            chainId = 0;
          }
          chainId = parseInt(chainId);
        }
        if (typeof chainId !== "number") {
          chainId = 0;
        }
        result.chainId = chainId;
      }
      if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
        result.blockHash = null;
      }
      return result;
    }
    transaction(value) {
      return parse(value);
    }
    receiptLog(value) {
      return Formatter.check(this.formats.receiptLog, value);
    }
    receipt(value) {
      const result = Formatter.check(this.formats.receipt, value);
      if (result.root != null) {
        if (result.root.length <= 4) {
          const value2 = BigNumber.from(result.root).toNumber();
          if (value2 === 0 || value2 === 1) {
            if (result.status != null && result.status !== value2) {
              logger$s.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
            }
            result.status = value2;
            delete result.root;
          } else {
            logger$s.throwArgumentError("invalid alt-root-status", "value.root", result.root);
          }
        } else if (result.root.length !== 66) {
          logger$s.throwArgumentError("invalid root hash", "value.root", result.root);
        }
      }
      if (result.status != null) {
        result.byzantium = true;
      }
      return result;
    }
    topics(value) {
      if (Array.isArray(value)) {
        return value.map((v) => this.topics(v));
      } else if (value != null) {
        return this.hash(value, true);
      }
      return null;
    }
    filter(value) {
      return Formatter.check(this.formats.filter, value);
    }
    filterLog(value) {
      return Formatter.check(this.formats.filterLog, value);
    }
    static check(format, object) {
      const result = {};
      for (const key2 in format) {
        try {
          const value = format[key2](object[key2]);
          if (value !== void 0) {
            result[key2] = value;
          }
        } catch (error) {
          error.checkKey = key2;
          error.checkValue = object[key2];
          throw error;
        }
      }
      return result;
    }
    static allowNull(format, nullValue) {
      return function(value) {
        if (value == null) {
          return nullValue;
        }
        return format(value);
      };
    }
    static allowFalsish(format, replaceValue) {
      return function(value) {
        if (!value) {
          return replaceValue;
        }
        return format(value);
      };
    }
    static arrayOf(format) {
      return function(array) {
        if (!Array.isArray(array)) {
          throw new Error("not an array");
        }
        const result = [];
        array.forEach(function(value) {
          result.push(format(value));
        });
        return result;
      };
    }
  };
  function isCommunityResourcable(value) {
    return value && typeof value.isCommunityResource === "function";
  }
  function isCommunityResource(value) {
    return isCommunityResourcable(value) && value.isCommunityResource();
  }
  var throttleMessage = false;
  function showThrottleMessage() {
    if (throttleMessage) {
      return;
    }
    throttleMessage = true;
    console.log("========= NOTICE =========");
    console.log("Request-Rate Exceeded  (this message will not be repeated)");
    console.log("");
    console.log("The default API keys for each service are provided as a highly-throttled,");
    console.log("community resource for low-traffic projects and early prototyping.");
    console.log("");
    console.log("While your application will continue to function, we highly recommended");
    console.log("signing up for your own API keys to improve performance, increase your");
    console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
    console.log("");
    console.log("For more details: https://docs.ethers.io/api-keys/");
    console.log("==========================");
  }
  var __awaiter$8 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$t = new Logger(version$m);
  function checkTopic(topic) {
    if (topic == null) {
      return "null";
    }
    if (hexDataLength(topic) !== 32) {
      logger$t.throwArgumentError("invalid topic", "topic", topic);
    }
    return topic.toLowerCase();
  }
  function serializeTopics(topics) {
    topics = topics.slice();
    while (topics.length > 0 && topics[topics.length - 1] == null) {
      topics.pop();
    }
    return topics.map((topic) => {
      if (Array.isArray(topic)) {
        const unique = {};
        topic.forEach((topic2) => {
          unique[checkTopic(topic2)] = true;
        });
        const sorted = Object.keys(unique);
        sorted.sort();
        return sorted.join("|");
      } else {
        return checkTopic(topic);
      }
    }).join("&");
  }
  function deserializeTopics(data2) {
    if (data2 === "") {
      return [];
    }
    return data2.split(/&/g).map((topic) => {
      if (topic === "") {
        return [];
      }
      const comps = topic.split("|").map((topic2) => {
        return topic2 === "null" ? null : topic2;
      });
      return comps.length === 1 ? comps[0] : comps;
    });
  }
  function getEventTag$1(eventName) {
    if (typeof eventName === "string") {
      eventName = eventName.toLowerCase();
      if (hexDataLength(eventName) === 32) {
        return "tx:" + eventName;
      }
      if (eventName.indexOf(":") === -1) {
        return eventName;
      }
    } else if (Array.isArray(eventName)) {
      return "filter:*:" + serializeTopics(eventName);
    } else if (ForkEvent.isForkEvent(eventName)) {
      logger$t.warn("not implemented");
      throw new Error("not implemented");
    } else if (eventName && typeof eventName === "object") {
      return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
    }
    throw new Error("invalid event - " + eventName);
  }
  function getTime() {
    return new Date().getTime();
  }
  function stall(duration) {
    return new Promise((resolve) => {
      setTimeout(resolve, duration);
    });
  }
  var PollableEvents = ["block", "network", "pending", "poll"];
  var Event2 = class {
    constructor(tag, listener, once) {
      defineReadOnly(this, "tag", tag);
      defineReadOnly(this, "listener", listener);
      defineReadOnly(this, "once", once);
    }
    get event() {
      switch (this.type) {
        case "tx":
          return this.hash;
        case "filter":
          return this.filter;
      }
      return this.tag;
    }
    get type() {
      return this.tag.split(":")[0];
    }
    get hash() {
      const comps = this.tag.split(":");
      if (comps[0] !== "tx") {
        return null;
      }
      return comps[1];
    }
    get filter() {
      const comps = this.tag.split(":");
      if (comps[0] !== "filter") {
        return null;
      }
      const address = comps[1];
      const topics = deserializeTopics(comps[2]);
      const filter = {};
      if (topics.length > 0) {
        filter.topics = topics;
      }
      if (address && address !== "*") {
        filter.address = address;
      }
      return filter;
    }
    pollable() {
      return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
    }
  };
  var coinInfos = { 0: { symbol: "btc", p2pkh: 0, p2sh: 5, prefix: "bc" }, 2: { symbol: "ltc", p2pkh: 48, p2sh: 50, prefix: "ltc" }, 3: { symbol: "doge", p2pkh: 30, p2sh: 22 }, 60: { symbol: "eth", ilk: "eth" }, 61: { symbol: "etc", ilk: "eth" }, 700: { symbol: "xdai", ilk: "eth" } };
  function bytes32ify(value) {
    return hexZeroPad(BigNumber.from(value).toHexString(), 32);
  }
  function base58Encode(data2) {
    return Base58.encode(concat([data2, hexDataSlice(sha256$1(sha256$1(data2)), 0, 4)]));
  }
  var Resolver = class {
    constructor(provider, address, name2) {
      defineReadOnly(this, "provider", provider);
      defineReadOnly(this, "name", name2);
      defineReadOnly(this, "address", provider.formatter.address(address));
    }
    _fetchBytes(selector, parameters) {
      return __awaiter$8(this, void 0, void 0, function* () {
        const transaction = { to: this.address, data: hexConcat([selector, namehash(this.name), parameters || "0x"]) };
        const result = yield this.provider.call(transaction);
        if (result === "0x") {
          return null;
        }
        const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();
        const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
        return hexDataSlice(result, offset + 32, offset + 32 + length);
      });
    }
    _getAddress(coinType, hexBytes) {
      const coinInfo = coinInfos[String(coinType)];
      if (coinInfo == null) {
        logger$t.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, { operation: `getAddress(${coinType})` });
      }
      if (coinInfo.ilk === "eth") {
        return this.provider.formatter.address(hexBytes);
      }
      const bytes = arrayify(hexBytes);
      if (coinInfo.p2pkh != null) {
        const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
        if (p2pkh) {
          const length = parseInt(p2pkh[1], 16);
          if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
            return base58Encode(concat([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
          }
        }
      }
      if (coinInfo.p2sh != null) {
        const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
        if (p2sh) {
          const length = parseInt(p2sh[1], 16);
          if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
            return base58Encode(concat([[coinInfo.p2sh], "0x" + p2sh[2]]));
          }
        }
      }
      if (coinInfo.prefix != null) {
        const length = bytes[1];
        let version2 = bytes[0];
        if (version2 === 0) {
          if (length !== 20 && length !== 32) {
            version2 = -1;
          }
        } else {
          version2 = -1;
        }
        if (version2 >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
          const words2 = bech32.toWords(bytes.slice(2));
          words2.unshift(version2);
          return bech32.encode(coinInfo.prefix, words2);
        }
      }
      return null;
    }
    getAddress(coinType) {
      return __awaiter$8(this, void 0, void 0, function* () {
        if (coinType == null) {
          coinType = 60;
        }
        if (coinType === 60) {
          const transaction = { to: this.address, data: "0x3b3b57de" + namehash(this.name).substring(2) };
          const hexBytes2 = yield this.provider.call(transaction);
          if (hexBytes2 === "0x" || hexBytes2 === HashZero) {
            return null;
          }
          return this.provider.formatter.callAddress(hexBytes2);
        }
        const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
        if (hexBytes == null || hexBytes === "0x") {
          return null;
        }
        const address = this._getAddress(coinType, hexBytes);
        if (address == null) {
          logger$t.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, { operation: `getAddress(${coinType})`, coinType, data: hexBytes });
        }
        return address;
      });
    }
    getContentHash() {
      return __awaiter$8(this, void 0, void 0, function* () {
        const hexBytes = yield this._fetchBytes("0xbc1c58d1");
        if (hexBytes == null || hexBytes === "0x") {
          return null;
        }
        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
        if (ipfs) {
          const length = parseInt(ipfs[3], 16);
          if (ipfs[4].length === length * 2) {
            return "ipfs://" + Base58.encode("0x" + ipfs[1]);
          }
        }
        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
        if (swarm) {
          if (swarm[1].length === 32 * 2) {
            return "bzz://" + swarm[1];
          }
        }
        return logger$t.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, { operation: "getContentHash()", data: hexBytes });
      });
    }
    getText(key2) {
      return __awaiter$8(this, void 0, void 0, function* () {
        let keyBytes = toUtf8Bytes(key2);
        keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
        if (keyBytes.length % 32 !== 0) {
          keyBytes = concat([keyBytes, hexZeroPad("0x", 32 - key2.length % 32)]);
        }
        const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
        if (hexBytes == null || hexBytes === "0x") {
          return null;
        }
        return toUtf8String(hexBytes);
      });
    }
  };
  var defaultFormatter = null;
  var nextPollId = 1;
  var BaseProvider = class extends Provider {
    constructor(network) {
      logger$t.checkNew(new.target, Provider);
      super();
      this._events = [];
      this._emitted = { block: -2 };
      this.formatter = new.target.getFormatter();
      defineReadOnly(this, "anyNetwork", network === "any");
      if (this.anyNetwork) {
        network = this.detectNetwork();
      }
      if (network instanceof Promise) {
        this._networkPromise = network;
        network.catch((error) => {
        });
        this._ready().catch((error) => {
        });
      } else {
        const knownNetwork = getStatic(new.target, "getNetwork")(network);
        if (knownNetwork) {
          defineReadOnly(this, "_network", knownNetwork);
          this.emit("network", knownNetwork, null);
        } else {
          logger$t.throwArgumentError("invalid network", "network", network);
        }
      }
      this._maxInternalBlockNumber = -1024;
      this._lastBlockNumber = -2;
      this._pollingInterval = 4e3;
      this._fastQueryDate = 0;
    }
    _ready() {
      return __awaiter$8(this, void 0, void 0, function* () {
        if (this._network == null) {
          let network = null;
          if (this._networkPromise) {
            try {
              network = yield this._networkPromise;
            } catch (error) {
            }
          }
          if (network == null) {
            network = yield this.detectNetwork();
          }
          if (!network) {
            logger$t.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
          }
          if (this._network == null) {
            if (this.anyNetwork) {
              this._network = network;
            } else {
              defineReadOnly(this, "_network", network);
            }
            this.emit("network", network, null);
          }
        }
        return this._network;
      });
    }
    get ready() {
      return poll(() => {
        return this._ready().then((network) => {
          return network;
        }, (error) => {
          if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
            return void 0;
          }
          throw error;
        });
      });
    }
    static getFormatter() {
      if (defaultFormatter == null) {
        defaultFormatter = new Formatter();
      }
      return defaultFormatter;
    }
    static getNetwork(network) {
      return getNetwork(network == null ? "homestead" : network);
    }
    _getInternalBlockNumber(maxAge) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this._ready();
        if (maxAge > 0) {
          while (this._internalBlockNumber) {
            const internalBlockNumber = this._internalBlockNumber;
            try {
              const result = yield internalBlockNumber;
              if (getTime() - result.respTime <= maxAge) {
                return result.blockNumber;
              }
              break;
            } catch (error) {
              if (this._internalBlockNumber === internalBlockNumber) {
                break;
              }
            }
          }
        }
        const reqTime = getTime();
        const checkInternalBlockNumber = resolveProperties({ blockNumber: this.perform("getBlockNumber", {}), networkError: this.getNetwork().then((network) => null, (error) => error) }).then(({ blockNumber, networkError }) => {
          if (networkError) {
            if (this._internalBlockNumber === checkInternalBlockNumber) {
              this._internalBlockNumber = null;
            }
            throw networkError;
          }
          const respTime = getTime();
          blockNumber = BigNumber.from(blockNumber).toNumber();
          if (blockNumber < this._maxInternalBlockNumber) {
            blockNumber = this._maxInternalBlockNumber;
          }
          this._maxInternalBlockNumber = blockNumber;
          this._setFastBlockNumber(blockNumber);
          return { blockNumber, reqTime, respTime };
        });
        this._internalBlockNumber = checkInternalBlockNumber;
        checkInternalBlockNumber.catch((error) => {
          if (this._internalBlockNumber === checkInternalBlockNumber) {
            this._internalBlockNumber = null;
          }
        });
        return (yield checkInternalBlockNumber).blockNumber;
      });
    }
    poll() {
      return __awaiter$8(this, void 0, void 0, function* () {
        const pollId = nextPollId++;
        const runners = [];
        let blockNumber = null;
        try {
          blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
        } catch (error) {
          this.emit("error", error);
          return;
        }
        this._setFastBlockNumber(blockNumber);
        this.emit("poll", pollId, blockNumber);
        if (blockNumber === this._lastBlockNumber) {
          this.emit("didPoll", pollId);
          return;
        }
        if (this._emitted.block === -2) {
          this._emitted.block = blockNumber - 1;
        }
        if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
          logger$t.warn("network block skew detected; skipping block events");
          this.emit("error", logger$t.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, { blockNumber, event: "blockSkew", previousBlockNumber: this._emitted.block }));
          this.emit("block", blockNumber);
        } else {
          for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
            this.emit("block", i);
          }
        }
        if (this._emitted.block !== blockNumber) {
          this._emitted.block = blockNumber;
          Object.keys(this._emitted).forEach((key2) => {
            if (key2 === "block") {
              return;
            }
            const eventBlockNumber = this._emitted[key2];
            if (eventBlockNumber === "pending") {
              return;
            }
            if (blockNumber - eventBlockNumber > 12) {
              delete this._emitted[key2];
            }
          });
        }
        if (this._lastBlockNumber === -2) {
          this._lastBlockNumber = blockNumber - 1;
        }
        this._events.forEach((event) => {
          switch (event.type) {
            case "tx": {
              const hash = event.hash;
              let runner = this.getTransactionReceipt(hash).then((receipt) => {
                if (!receipt || receipt.blockNumber == null) {
                  return null;
                }
                this._emitted["t:" + hash] = receipt.blockNumber;
                this.emit(hash, receipt);
                return null;
              }).catch((error) => {
                this.emit("error", error);
              });
              runners.push(runner);
              break;
            }
            case "filter": {
              const filter = event.filter;
              filter.fromBlock = this._lastBlockNumber + 1;
              filter.toBlock = blockNumber;
              const runner = this.getLogs(filter).then((logs) => {
                if (logs.length === 0) {
                  return;
                }
                logs.forEach((log) => {
                  this._emitted["b:" + log.blockHash] = log.blockNumber;
                  this._emitted["t:" + log.transactionHash] = log.blockNumber;
                  this.emit(filter, log);
                });
              }).catch((error) => {
                this.emit("error", error);
              });
              runners.push(runner);
              break;
            }
          }
        });
        this._lastBlockNumber = blockNumber;
        Promise.all(runners).then(() => {
          this.emit("didPoll", pollId);
        }).catch((error) => {
          this.emit("error", error);
        });
        return;
      });
    }
    resetEventsBlock(blockNumber) {
      this._lastBlockNumber = blockNumber - 1;
      if (this.polling) {
        this.poll();
      }
    }
    get network() {
      return this._network;
    }
    detectNetwork() {
      return __awaiter$8(this, void 0, void 0, function* () {
        return logger$t.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, { operation: "provider.detectNetwork" });
      });
    }
    getNetwork() {
      return __awaiter$8(this, void 0, void 0, function* () {
        const network = yield this._ready();
        const currentNetwork = yield this.detectNetwork();
        if (network.chainId !== currentNetwork.chainId) {
          if (this.anyNetwork) {
            this._network = currentNetwork;
            this._lastBlockNumber = -2;
            this._fastBlockNumber = null;
            this._fastBlockNumberPromise = null;
            this._fastQueryDate = 0;
            this._emitted.block = -2;
            this._maxInternalBlockNumber = -1024;
            this._internalBlockNumber = null;
            this.emit("network", currentNetwork, network);
            yield stall(0);
            return this._network;
          }
          const error = logger$t.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, { event: "changed", network, detectedNetwork: currentNetwork });
          this.emit("error", error);
          throw error;
        }
        return network;
      });
    }
    get blockNumber() {
      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
        this._setFastBlockNumber(blockNumber);
      }, (error) => {
      });
      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
    }
    get polling() {
      return this._poller != null;
    }
    set polling(value) {
      if (value && !this._poller) {
        this._poller = setInterval(() => {
          this.poll();
        }, this.pollingInterval);
        if (!this._bootstrapPoll) {
          this._bootstrapPoll = setTimeout(() => {
            this.poll();
            this._bootstrapPoll = setTimeout(() => {
              if (!this._poller) {
                this.poll();
              }
              this._bootstrapPoll = null;
            }, this.pollingInterval);
          }, 0);
        }
      } else if (!value && this._poller) {
        clearInterval(this._poller);
        this._poller = null;
      }
    }
    get pollingInterval() {
      return this._pollingInterval;
    }
    set pollingInterval(value) {
      if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
        throw new Error("invalid polling interval");
      }
      this._pollingInterval = value;
      if (this._poller) {
        clearInterval(this._poller);
        this._poller = setInterval(() => {
          this.poll();
        }, this._pollingInterval);
      }
    }
    _getFastBlockNumber() {
      const now2 = getTime();
      if (now2 - this._fastQueryDate > 2 * this._pollingInterval) {
        this._fastQueryDate = now2;
        this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
          if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
            this._fastBlockNumber = blockNumber;
          }
          return this._fastBlockNumber;
        });
      }
      return this._fastBlockNumberPromise;
    }
    _setFastBlockNumber(blockNumber) {
      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
        return;
      }
      this._fastQueryDate = getTime();
      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
        this._fastBlockNumber = blockNumber;
        this._fastBlockNumberPromise = Promise.resolve(blockNumber);
      }
    }
    waitForTransaction(transactionHash, confirmations, timeout) {
      return __awaiter$8(this, void 0, void 0, function* () {
        if (confirmations == null) {
          confirmations = 1;
        }
        const receipt = yield this.getTransactionReceipt(transactionHash);
        if ((receipt ? receipt.confirmations : 0) >= confirmations) {
          return receipt;
        }
        return new Promise((resolve, reject) => {
          let timer2 = null;
          let done = false;
          const handler = (receipt2) => {
            if (receipt2.confirmations < confirmations) {
              return;
            }
            if (timer2) {
              clearTimeout(timer2);
            }
            if (done) {
              return;
            }
            done = true;
            this.removeListener(transactionHash, handler);
            resolve(receipt2);
          };
          this.on(transactionHash, handler);
          if (typeof timeout === "number" && timeout > 0) {
            timer2 = setTimeout(() => {
              if (done) {
                return;
              }
              timer2 = null;
              done = true;
              this.removeListener(transactionHash, handler);
              reject(logger$t.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout }));
            }, timeout);
            if (timer2.unref) {
              timer2.unref();
            }
          }
        });
      });
    }
    getBlockNumber() {
      return __awaiter$8(this, void 0, void 0, function* () {
        return this._getInternalBlockNumber(0);
      });
    }
    getGasPrice() {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const result = yield this.perform("getGasPrice", {});
        try {
          return BigNumber.from(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "getGasPrice", result, error });
        }
      });
    }
    getBalance(addressOrName, blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ address: this._getAddress(addressOrName), blockTag: this._getBlockTag(blockTag) });
        const result = yield this.perform("getBalance", params);
        try {
          return BigNumber.from(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "getBalance", params, result, error });
        }
      });
    }
    getTransactionCount(addressOrName, blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ address: this._getAddress(addressOrName), blockTag: this._getBlockTag(blockTag) });
        const result = yield this.perform("getTransactionCount", params);
        try {
          return BigNumber.from(result).toNumber();
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "getTransactionCount", params, result, error });
        }
      });
    }
    getCode(addressOrName, blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ address: this._getAddress(addressOrName), blockTag: this._getBlockTag(blockTag) });
        const result = yield this.perform("getCode", params);
        try {
          return hexlify(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "getCode", params, result, error });
        }
      });
    }
    getStorageAt(addressOrName, position, blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ address: this._getAddress(addressOrName), blockTag: this._getBlockTag(blockTag), position: Promise.resolve(position).then((p) => hexValue(p)) });
        const result = yield this.perform("getStorageAt", params);
        try {
          return hexlify(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "getStorageAt", params, result, error });
        }
      });
    }
    _wrapTransaction(tx, hash) {
      if (hash != null && hexDataLength(hash) !== 32) {
        throw new Error("invalid response - sendTransaction");
      }
      const result = tx;
      if (hash != null && tx.hash !== hash) {
        logger$t.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
      }
      result.wait = (confirmations) => __awaiter$8(this, void 0, void 0, function* () {
        if (confirmations !== 0) {
          this._emitted["t:" + tx.hash] = "pending";
        }
        const receipt = yield this.waitForTransaction(tx.hash, confirmations);
        if (receipt == null && confirmations === 0) {
          return null;
        }
        this._emitted["t:" + tx.hash] = receipt.blockNumber;
        if (receipt.status === 0) {
          logger$t.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, { transactionHash: tx.hash, transaction: tx, receipt });
        }
        return receipt;
      });
      return result;
    }
    sendTransaction(signedTransaction) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const hexTx = yield Promise.resolve(signedTransaction).then((t) => hexlify(t));
        const tx = this.formatter.transaction(signedTransaction);
        try {
          const hash = yield this.perform("sendTransaction", { signedTransaction: hexTx });
          return this._wrapTransaction(tx, hash);
        } catch (error) {
          error.transaction = tx;
          error.transactionHash = tx.hash;
          throw error;
        }
      });
    }
    _getTransactionRequest(transaction) {
      return __awaiter$8(this, void 0, void 0, function* () {
        const values = yield transaction;
        const tx = {};
        ["from", "to"].forEach((key2) => {
          if (values[key2] == null) {
            return;
          }
          tx[key2] = Promise.resolve(values[key2]).then((v) => v ? this._getAddress(v) : null);
        });
        ["gasLimit", "gasPrice", "value"].forEach((key2) => {
          if (values[key2] == null) {
            return;
          }
          tx[key2] = Promise.resolve(values[key2]).then((v) => v ? BigNumber.from(v) : null);
        });
        ["type"].forEach((key2) => {
          if (values[key2] == null) {
            return;
          }
          tx[key2] = Promise.resolve(values[key2]).then((v) => v != null ? v : null);
        });
        if (values.accessList) {
          tx.accessList = this.formatter.accessList(values.accessList);
        }
        ["data"].forEach((key2) => {
          if (values[key2] == null) {
            return;
          }
          tx[key2] = Promise.resolve(values[key2]).then((v) => v ? hexlify(v) : null);
        });
        return this.formatter.transactionRequest(yield resolveProperties(tx));
      });
    }
    _getFilter(filter) {
      return __awaiter$8(this, void 0, void 0, function* () {
        filter = yield filter;
        const result = {};
        if (filter.address != null) {
          result.address = this._getAddress(filter.address);
        }
        ["blockHash", "topics"].forEach((key2) => {
          if (filter[key2] == null) {
            return;
          }
          result[key2] = filter[key2];
        });
        ["fromBlock", "toBlock"].forEach((key2) => {
          if (filter[key2] == null) {
            return;
          }
          result[key2] = this._getBlockTag(filter[key2]);
        });
        return this.formatter.filter(yield resolveProperties(result));
      });
    }
    call(transaction, blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ transaction: this._getTransactionRequest(transaction), blockTag: this._getBlockTag(blockTag) });
        const result = yield this.perform("call", params);
        try {
          return hexlify(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "call", params, result, error });
        }
      });
    }
    estimateGas(transaction) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ transaction: this._getTransactionRequest(transaction) });
        const result = yield this.perform("estimateGas", params);
        try {
          return BigNumber.from(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "estimateGas", params, result, error });
        }
      });
    }
    _getAddress(addressOrName) {
      return __awaiter$8(this, void 0, void 0, function* () {
        const address = yield this.resolveName(addressOrName);
        if (address == null) {
          logger$t.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, { operation: `resolveName(${JSON.stringify(addressOrName)})` });
        }
        return address;
      });
    }
    _getBlock(blockHashOrBlockTag, includeTransactions) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        blockHashOrBlockTag = yield blockHashOrBlockTag;
        let blockNumber = -128;
        const params = { includeTransactions: !!includeTransactions };
        if (isHexString(blockHashOrBlockTag, 32)) {
          params.blockHash = blockHashOrBlockTag;
        } else {
          try {
            params.blockTag = this.formatter.blockTag(yield this._getBlockTag(blockHashOrBlockTag));
            if (isHexString(params.blockTag)) {
              blockNumber = parseInt(params.blockTag.substring(2), 16);
            }
          } catch (error) {
            logger$t.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
          }
        }
        return poll(() => __awaiter$8(this, void 0, void 0, function* () {
          const block = yield this.perform("getBlock", params);
          if (block == null) {
            if (params.blockHash != null) {
              if (this._emitted["b:" + params.blockHash] == null) {
                return null;
              }
            }
            if (params.blockTag != null) {
              if (blockNumber > this._emitted.block) {
                return null;
              }
            }
            return void 0;
          }
          if (includeTransactions) {
            let blockNumber2 = null;
            for (let i = 0; i < block.transactions.length; i++) {
              const tx = block.transactions[i];
              if (tx.blockNumber == null) {
                tx.confirmations = 0;
              } else if (tx.confirmations == null) {
                if (blockNumber2 == null) {
                  blockNumber2 = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                }
                let confirmations = blockNumber2 - tx.blockNumber + 1;
                if (confirmations <= 0) {
                  confirmations = 1;
                }
                tx.confirmations = confirmations;
              }
            }
            return this.formatter.blockWithTransactions(block);
          }
          return this.formatter.block(block);
        }), { oncePoll: this });
      });
    }
    getBlock(blockHashOrBlockTag) {
      return this._getBlock(blockHashOrBlockTag, false);
    }
    getBlockWithTransactions(blockHashOrBlockTag) {
      return this._getBlock(blockHashOrBlockTag, true);
    }
    getTransaction(transactionHash) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        transactionHash = yield transactionHash;
        const params = { transactionHash: this.formatter.hash(transactionHash, true) };
        return poll(() => __awaiter$8(this, void 0, void 0, function* () {
          const result = yield this.perform("getTransaction", params);
          if (result == null) {
            if (this._emitted["t:" + transactionHash] == null) {
              return null;
            }
            return void 0;
          }
          const tx = this.formatter.transactionResponse(result);
          if (tx.blockNumber == null) {
            tx.confirmations = 0;
          } else if (tx.confirmations == null) {
            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
            let confirmations = blockNumber - tx.blockNumber + 1;
            if (confirmations <= 0) {
              confirmations = 1;
            }
            tx.confirmations = confirmations;
          }
          return this._wrapTransaction(tx);
        }), { oncePoll: this });
      });
    }
    getTransactionReceipt(transactionHash) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        transactionHash = yield transactionHash;
        const params = { transactionHash: this.formatter.hash(transactionHash, true) };
        return poll(() => __awaiter$8(this, void 0, void 0, function* () {
          const result = yield this.perform("getTransactionReceipt", params);
          if (result == null) {
            if (this._emitted["t:" + transactionHash] == null) {
              return null;
            }
            return void 0;
          }
          if (result.blockHash == null) {
            return void 0;
          }
          const receipt = this.formatter.receipt(result);
          if (receipt.blockNumber == null) {
            receipt.confirmations = 0;
          } else if (receipt.confirmations == null) {
            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
            let confirmations = blockNumber - receipt.blockNumber + 1;
            if (confirmations <= 0) {
              confirmations = 1;
            }
            receipt.confirmations = confirmations;
          }
          return receipt;
        }), { oncePoll: this });
      });
    }
    getLogs(filter) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ filter: this._getFilter(filter) });
        const logs = yield this.perform("getLogs", params);
        logs.forEach((log) => {
          if (log.removed == null) {
            log.removed = false;
          }
        });
        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
      });
    }
    getEtherPrice() {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        return this.perform("getEtherPrice", {});
      });
    }
    _getBlockTag(blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        blockTag = yield blockTag;
        if (typeof blockTag === "number" && blockTag < 0) {
          if (blockTag % 1) {
            logger$t.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
          }
          let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
          blockNumber += blockTag;
          if (blockNumber < 0) {
            blockNumber = 0;
          }
          return this.formatter.blockTag(blockNumber);
        }
        return this.formatter.blockTag(blockTag);
      });
    }
    getResolver(name2) {
      return __awaiter$8(this, void 0, void 0, function* () {
        const address = yield this._getResolver(name2);
        if (address == null) {
          return null;
        }
        return new Resolver(this, address, name2);
      });
    }
    _getResolver(name2) {
      return __awaiter$8(this, void 0, void 0, function* () {
        const network = yield this.getNetwork();
        if (!network.ensAddress) {
          logger$t.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation: "ENS", network: network.name });
        }
        const transaction = { to: network.ensAddress, data: "0x0178b8bf" + namehash(name2).substring(2) };
        return this.formatter.callAddress(yield this.call(transaction));
      });
    }
    resolveName(name2) {
      return __awaiter$8(this, void 0, void 0, function* () {
        name2 = yield name2;
        try {
          return Promise.resolve(this.formatter.address(name2));
        } catch (error) {
          if (isHexString(name2)) {
            throw error;
          }
        }
        if (typeof name2 !== "string") {
          logger$t.throwArgumentError("invalid ENS name", "name", name2);
        }
        const resolver = yield this.getResolver(name2);
        if (!resolver) {
          return null;
        }
        return yield resolver.getAddress();
      });
    }
    lookupAddress(address) {
      return __awaiter$8(this, void 0, void 0, function* () {
        address = yield address;
        address = this.formatter.address(address);
        const reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
        const resolverAddress = yield this._getResolver(reverseName);
        if (!resolverAddress) {
          return null;
        }
        let bytes = arrayify(yield this.call({ to: resolverAddress, data: "0x691f3431" + namehash(reverseName).substring(2) }));
        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {
          return null;
        }
        bytes = bytes.slice(32);
        if (bytes.length < 32) {
          return null;
        }
        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();
        bytes = bytes.slice(32);
        if (length > bytes.length) {
          return null;
        }
        const name2 = toUtf8String(bytes.slice(0, length));
        const addr = yield this.resolveName(name2);
        if (addr != address) {
          return null;
        }
        return name2;
      });
    }
    perform(method, params) {
      return logger$t.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
    }
    _startEvent(event) {
      this.polling = this._events.filter((e) => e.pollable()).length > 0;
    }
    _stopEvent(event) {
      this.polling = this._events.filter((e) => e.pollable()).length > 0;
    }
    _addEventListener(eventName, listener, once) {
      const event = new Event2(getEventTag$1(eventName), listener, once);
      this._events.push(event);
      this._startEvent(event);
      return this;
    }
    on(eventName, listener) {
      return this._addEventListener(eventName, listener, false);
    }
    once(eventName, listener) {
      return this._addEventListener(eventName, listener, true);
    }
    emit(eventName, ...args) {
      let result = false;
      let stopped = [];
      let eventTag = getEventTag$1(eventName);
      this._events = this._events.filter((event) => {
        if (event.tag !== eventTag) {
          return true;
        }
        setTimeout(() => {
          event.listener.apply(this, args);
        }, 0);
        result = true;
        if (event.once) {
          stopped.push(event);
          return false;
        }
        return true;
      });
      stopped.forEach((event) => {
        this._stopEvent(event);
      });
      return result;
    }
    listenerCount(eventName) {
      if (!eventName) {
        return this._events.length;
      }
      let eventTag = getEventTag$1(eventName);
      return this._events.filter((event) => {
        return event.tag === eventTag;
      }).length;
    }
    listeners(eventName) {
      if (eventName == null) {
        return this._events.map((event) => event.listener);
      }
      let eventTag = getEventTag$1(eventName);
      return this._events.filter((event) => event.tag === eventTag).map((event) => event.listener);
    }
    off(eventName, listener) {
      if (listener == null) {
        return this.removeAllListeners(eventName);
      }
      const stopped = [];
      let found = false;
      let eventTag = getEventTag$1(eventName);
      this._events = this._events.filter((event) => {
        if (event.tag !== eventTag || event.listener != listener) {
          return true;
        }
        if (found) {
          return true;
        }
        found = true;
        stopped.push(event);
        return false;
      });
      stopped.forEach((event) => {
        this._stopEvent(event);
      });
      return this;
    }
    removeAllListeners(eventName) {
      let stopped = [];
      if (eventName == null) {
        stopped = this._events;
        this._events = [];
      } else {
        const eventTag = getEventTag$1(eventName);
        this._events = this._events.filter((event) => {
          if (event.tag !== eventTag) {
            return true;
          }
          stopped.push(event);
          return false;
        });
      }
      stopped.forEach((event) => {
        this._stopEvent(event);
      });
      return this;
    }
  };
  var __awaiter$9 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$u = new Logger(version$m);
  var errorGas = ["call", "estimateGas"];
  function checkError(method, error, params) {
    if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
      const e = error.error;
      if (e && e.message.match("reverted") && isHexString(e.data)) {
        return e.data;
      }
    }
    let message = error.message;
    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }
    message = (message || "").toLowerCase();
    const transaction = params.transaction || params.signedTransaction;
    if (message.match(/insufficient funds/)) {
      logger$u.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, { error, method, transaction });
    }
    if (message.match(/nonce too low/)) {
      logger$u.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, { error, method, transaction });
    }
    if (message.match(/replacement transaction underpriced/)) {
      logger$u.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, { error, method, transaction });
    }
    if (message.match(/only replay-protected/)) {
      logger$u.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, { error, method, transaction });
    }
    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
      logger$u.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, { error, method, transaction });
    }
    throw error;
  }
  function timer(timeout) {
    return new Promise(function(resolve) {
      setTimeout(resolve, timeout);
    });
  }
  function getResult(payload) {
    if (payload.error) {
      const error = new Error(payload.error.message);
      error.code = payload.error.code;
      error.data = payload.error.data;
      throw error;
    }
    return payload.result;
  }
  function getLowerCase(value) {
    if (value) {
      return value.toLowerCase();
    }
    return value;
  }
  var _constructorGuard$4 = {};
  var JsonRpcSigner = class extends Signer {
    constructor(constructorGuard, provider, addressOrIndex) {
      logger$u.checkNew(new.target, JsonRpcSigner);
      super();
      if (constructorGuard !== _constructorGuard$4) {
        throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
      }
      defineReadOnly(this, "provider", provider);
      if (addressOrIndex == null) {
        addressOrIndex = 0;
      }
      if (typeof addressOrIndex === "string") {
        defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
        defineReadOnly(this, "_index", null);
      } else if (typeof addressOrIndex === "number") {
        defineReadOnly(this, "_index", addressOrIndex);
        defineReadOnly(this, "_address", null);
      } else {
        logger$u.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
      }
    }
    connect(provider) {
      return logger$u.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, { operation: "connect" });
    }
    connectUnchecked() {
      return new UncheckedJsonRpcSigner(_constructorGuard$4, this.provider, this._address || this._index);
    }
    getAddress() {
      if (this._address) {
        return Promise.resolve(this._address);
      }
      return this.provider.send("eth_accounts", []).then((accounts) => {
        if (accounts.length <= this._index) {
          logger$u.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, { operation: "getAddress" });
        }
        return this.provider.formatter.address(accounts[this._index]);
      });
    }
    sendUncheckedTransaction(transaction) {
      transaction = shallowCopy(transaction);
      const fromAddress = this.getAddress().then((address) => {
        if (address) {
          address = address.toLowerCase();
        }
        return address;
      });
      if (transaction.gasLimit == null) {
        const estimate = shallowCopy(transaction);
        estimate.from = fromAddress;
        transaction.gasLimit = this.provider.estimateGas(estimate);
      }
      return resolveProperties({ tx: resolveProperties(transaction), sender: fromAddress }).then(({ tx, sender }) => {
        if (tx.from != null) {
          if (tx.from.toLowerCase() !== sender) {
            logger$u.throwArgumentError("from address mismatch", "transaction", transaction);
          }
        } else {
          tx.from = sender;
        }
        const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
        return this.provider.send("eth_sendTransaction", [hexTx]).then((hash) => {
          return hash;
        }, (error) => {
          return checkError("sendTransaction", error, hexTx);
        });
      });
    }
    signTransaction(transaction) {
      return logger$u.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, { operation: "signTransaction" });
    }
    sendTransaction(transaction) {
      return this.sendUncheckedTransaction(transaction).then((hash) => {
        return poll(() => {
          return this.provider.getTransaction(hash).then((tx) => {
            if (tx === null) {
              return void 0;
            }
            return this.provider._wrapTransaction(tx, hash);
          });
        }, { onceBlock: this.provider }).catch((error) => {
          error.transactionHash = hash;
          throw error;
        });
      });
    }
    signMessage(message) {
      return __awaiter$9(this, void 0, void 0, function* () {
        const data2 = typeof message === "string" ? toUtf8Bytes(message) : message;
        const address = yield this.getAddress();
        return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data2)]);
      });
    }
    _signTypedData(domain, types, value) {
      return __awaiter$9(this, void 0, void 0, function* () {
        const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name2) => {
          return this.provider.resolveName(name2);
        });
        const address = yield this.getAddress();
        return yield this.provider.send("eth_signTypedData_v4", [address.toLowerCase(), JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);
      });
    }
    unlock(password) {
      return __awaiter$9(this, void 0, void 0, function* () {
        const provider = this.provider;
        const address = yield this.getAddress();
        return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
      });
    }
  };
  var UncheckedJsonRpcSigner = class extends JsonRpcSigner {
    sendTransaction(transaction) {
      return this.sendUncheckedTransaction(transaction).then((hash) => {
        return { hash, nonce: null, gasLimit: null, gasPrice: null, data: null, value: null, chainId: null, confirmations: 0, from: null, wait: (confirmations) => {
          return this.provider.waitForTransaction(hash, confirmations);
        } };
      });
    }
  };
  var allowedTransactionKeys$3 = { chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true, type: true, accessList: true };
  var JsonRpcProvider = class extends BaseProvider {
    constructor(url, network) {
      logger$u.checkNew(new.target, JsonRpcProvider);
      let networkOrReady = network;
      if (networkOrReady == null) {
        networkOrReady = new Promise((resolve, reject) => {
          setTimeout(() => {
            this.detectNetwork().then((network2) => {
              resolve(network2);
            }, (error) => {
              reject(error);
            });
          }, 0);
        });
      }
      super(networkOrReady);
      if (!url) {
        url = getStatic(this.constructor, "defaultUrl")();
      }
      if (typeof url === "string") {
        defineReadOnly(this, "connection", Object.freeze({ url }));
      } else {
        defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
      }
      this._nextId = 42;
    }
    get _cache() {
      if (this._eventLoopCache == null) {
        this._eventLoopCache = {};
      }
      return this._eventLoopCache;
    }
    static defaultUrl() {
      return "http://localhost:8545";
    }
    detectNetwork() {
      if (!this._cache["detectNetwork"]) {
        this._cache["detectNetwork"] = this._uncachedDetectNetwork();
        setTimeout(() => {
          this._cache["detectNetwork"] = null;
        }, 0);
      }
      return this._cache["detectNetwork"];
    }
    _uncachedDetectNetwork() {
      return __awaiter$9(this, void 0, void 0, function* () {
        yield timer(0);
        let chainId = null;
        try {
          chainId = yield this.send("eth_chainId", []);
        } catch (error) {
          try {
            chainId = yield this.send("net_version", []);
          } catch (error2) {
          }
        }
        if (chainId != null) {
          const getNetwork2 = getStatic(this.constructor, "getNetwork");
          try {
            return getNetwork2(BigNumber.from(chainId).toNumber());
          } catch (error) {
            return logger$u.throwError("could not detect network", Logger.errors.NETWORK_ERROR, { chainId, event: "invalidNetwork", serverError: error });
          }
        }
        return logger$u.throwError("could not detect network", Logger.errors.NETWORK_ERROR, { event: "noNetwork" });
      });
    }
    getSigner(addressOrIndex) {
      return new JsonRpcSigner(_constructorGuard$4, this, addressOrIndex);
    }
    getUncheckedSigner(addressOrIndex) {
      return this.getSigner(addressOrIndex).connectUnchecked();
    }
    listAccounts() {
      return this.send("eth_accounts", []).then((accounts) => {
        return accounts.map((a) => this.formatter.address(a));
      });
    }
    send(method, params) {
      const request = { method, params, id: this._nextId++, jsonrpc: "2.0" };
      this.emit("debug", { action: "request", request: deepCopy(request), provider: this });
      const cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;
      if (cache && this._cache[method]) {
        return this._cache[method];
      }
      const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result2) => {
        this.emit("debug", { action: "response", request, response: result2, provider: this });
        return result2;
      }, (error) => {
        this.emit("debug", { action: "response", error, request, provider: this });
        throw error;
      });
      if (cache) {
        this._cache[method] = result;
        setTimeout(() => {
          this._cache[method] = null;
        }, 0);
      }
      return result;
    }
    prepareRequest(method, params) {
      switch (method) {
        case "getBlockNumber":
          return ["eth_blockNumber", []];
        case "getGasPrice":
          return ["eth_gasPrice", []];
        case "getBalance":
          return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
        case "getTransactionCount":
          return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
        case "getCode":
          return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
        case "getStorageAt":
          return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];
        case "sendTransaction":
          return ["eth_sendRawTransaction", [params.signedTransaction]];
        case "getBlock":
          if (params.blockTag) {
            return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
          } else if (params.blockHash) {
            return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
          }
          return null;
        case "getTransaction":
          return ["eth_getTransactionByHash", [params.transactionHash]];
        case "getTransactionReceipt":
          return ["eth_getTransactionReceipt", [params.transactionHash]];
        case "call": {
          const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
          return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
        }
        case "estimateGas": {
          const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
          return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
        }
        case "getLogs":
          if (params.filter && params.filter.address != null) {
            params.filter.address = getLowerCase(params.filter.address);
          }
          return ["eth_getLogs", [params.filter]];
        default:
          break;
      }
      return null;
    }
    perform(method, params) {
      return __awaiter$9(this, void 0, void 0, function* () {
        const args = this.prepareRequest(method, params);
        if (args == null) {
          logger$u.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
        }
        try {
          return yield this.send(args[0], args[1]);
        } catch (error) {
          return checkError(method, error, params);
        }
      });
    }
    _startEvent(event) {
      if (event.tag === "pending") {
        this._startPending();
      }
      super._startEvent(event);
    }
    _startPending() {
      if (this._pendingFilter != null) {
        return;
      }
      const self2 = this;
      const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
      this._pendingFilter = pendingFilter;
      pendingFilter.then(function(filterId) {
        function poll2() {
          self2.send("eth_getFilterChanges", [filterId]).then(function(hashes) {
            if (self2._pendingFilter != pendingFilter) {
              return null;
            }
            let seq = Promise.resolve();
            hashes.forEach(function(hash) {
              self2._emitted["t:" + hash.toLowerCase()] = "pending";
              seq = seq.then(function() {
                return self2.getTransaction(hash).then(function(tx) {
                  self2.emit("pending", tx);
                  return null;
                });
              });
            });
            return seq.then(function() {
              return timer(1e3);
            });
          }).then(function() {
            if (self2._pendingFilter != pendingFilter) {
              self2.send("eth_uninstallFilter", [filterId]);
              return;
            }
            setTimeout(function() {
              poll2();
            }, 0);
            return null;
          }).catch((error) => {
          });
        }
        poll2();
        return filterId;
      }).catch((error) => {
      });
    }
    _stopEvent(event) {
      if (event.tag === "pending" && this.listenerCount("pending") === 0) {
        this._pendingFilter = null;
      }
      super._stopEvent(event);
    }
    static hexlifyTransaction(transaction, allowExtra) {
      const allowed = shallowCopy(allowedTransactionKeys$3);
      if (allowExtra) {
        for (const key2 in allowExtra) {
          if (allowExtra[key2]) {
            allowed[key2] = true;
          }
        }
      }
      checkProperties(transaction, allowed);
      const result = {};
      ["gasLimit", "gasPrice", "type", "nonce", "value"].forEach(function(key2) {
        if (transaction[key2] == null) {
          return;
        }
        const value = hexValue(transaction[key2]);
        if (key2 === "gasLimit") {
          key2 = "gas";
        }
        result[key2] = value;
      });
      ["from", "to", "data"].forEach(function(key2) {
        if (transaction[key2] == null) {
          return;
        }
        result[key2] = hexlify(transaction[key2]);
      });
      if (transaction.accessList) {
        result["accessList"] = accessListify(transaction.accessList);
      }
      return result;
    }
  };
  var WS = null;
  try {
    WS = WebSocket;
    if (WS == null) {
      throw new Error("inject please");
    }
  } catch (error) {
    const logger2 = new Logger(version$m);
    WS = function() {
      logger2.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new WebSocket()" });
    };
  }
  var __awaiter$a = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$v = new Logger(version$m);
  var NextId = 1;
  var WebSocketProvider = class extends JsonRpcProvider {
    constructor(url, network) {
      if (network === "any") {
        logger$v.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, { operation: "network:any" });
      }
      super(url, network);
      this._pollingInterval = -1;
      this._wsReady = false;
      defineReadOnly(this, "_websocket", new WS(this.connection.url));
      defineReadOnly(this, "_requests", {});
      defineReadOnly(this, "_subs", {});
      defineReadOnly(this, "_subIds", {});
      defineReadOnly(this, "_detectNetwork", super.detectNetwork());
      this._websocket.onopen = () => {
        this._wsReady = true;
        Object.keys(this._requests).forEach((id2) => {
          this._websocket.send(this._requests[id2].payload);
        });
      };
      this._websocket.onmessage = (messageEvent) => {
        const data2 = messageEvent.data;
        const result = JSON.parse(data2);
        if (result.id != null) {
          const id2 = String(result.id);
          const request = this._requests[id2];
          delete this._requests[id2];
          if (result.result !== void 0) {
            request.callback(null, result.result);
            this.emit("debug", { action: "response", request: JSON.parse(request.payload), response: result.result, provider: this });
          } else {
            let error = null;
            if (result.error) {
              error = new Error(result.error.message || "unknown error");
              defineReadOnly(error, "code", result.error.code || null);
              defineReadOnly(error, "response", data2);
            } else {
              error = new Error("unknown error");
            }
            request.callback(error, void 0);
            this.emit("debug", { action: "response", error, request: JSON.parse(request.payload), provider: this });
          }
        } else if (result.method === "eth_subscription") {
          const sub = this._subs[result.params.subscription];
          if (sub) {
            sub.processFunc(result.params.result);
          }
        } else {
          console.warn("this should not happen");
        }
      };
      const fauxPoll = setInterval(() => {
        this.emit("poll");
      }, 1e3);
      if (fauxPoll.unref) {
        fauxPoll.unref();
      }
    }
    detectNetwork() {
      return this._detectNetwork;
    }
    get pollingInterval() {
      return 0;
    }
    resetEventsBlock(blockNumber) {
      logger$v.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "resetEventBlock" });
    }
    set pollingInterval(value) {
      logger$v.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "setPollingInterval" });
    }
    poll() {
      return __awaiter$a(this, void 0, void 0, function* () {
        return null;
      });
    }
    set polling(value) {
      if (!value) {
        return;
      }
      logger$v.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "setPolling" });
    }
    send(method, params) {
      const rid = NextId++;
      return new Promise((resolve, reject) => {
        function callback(error, result) {
          if (error) {
            return reject(error);
          }
          return resolve(result);
        }
        const payload = JSON.stringify({ method, params, id: rid, jsonrpc: "2.0" });
        this.emit("debug", { action: "request", request: JSON.parse(payload), provider: this });
        this._requests[String(rid)] = { callback, payload };
        if (this._wsReady) {
          this._websocket.send(payload);
        }
      });
    }
    static defaultUrl() {
      return "ws://localhost:8546";
    }
    _subscribe(tag, param, processFunc) {
      return __awaiter$a(this, void 0, void 0, function* () {
        let subIdPromise = this._subIds[tag];
        if (subIdPromise == null) {
          subIdPromise = Promise.all(param).then((param2) => {
            return this.send("eth_subscribe", param2);
          });
          this._subIds[tag] = subIdPromise;
        }
        const subId = yield subIdPromise;
        this._subs[subId] = { tag, processFunc };
      });
    }
    _startEvent(event) {
      switch (event.type) {
        case "block":
          this._subscribe("block", ["newHeads"], (result) => {
            const blockNumber = BigNumber.from(result.number).toNumber();
            this._emitted.block = blockNumber;
            this.emit("block", blockNumber);
          });
          break;
        case "pending":
          this._subscribe("pending", ["newPendingTransactions"], (result) => {
            this.emit("pending", result);
          });
          break;
        case "filter":
          this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
            if (result.removed == null) {
              result.removed = false;
            }
            this.emit(event.filter, this.formatter.filterLog(result));
          });
          break;
        case "tx": {
          const emitReceipt = (event2) => {
            const hash = event2.hash;
            this.getTransactionReceipt(hash).then((receipt) => {
              if (!receipt) {
                return;
              }
              this.emit(hash, receipt);
            });
          };
          emitReceipt(event);
          this._subscribe("tx", ["newHeads"], (result) => {
            this._events.filter((e) => e.type === "tx").forEach(emitReceipt);
          });
          break;
        }
        case "debug":
        case "poll":
        case "willPoll":
        case "didPoll":
        case "error":
          break;
        default:
          console.log("unhandled:", event);
          break;
      }
    }
    _stopEvent(event) {
      let tag = event.tag;
      if (event.type === "tx") {
        if (this._events.filter((e) => e.type === "tx").length) {
          return;
        }
        tag = "tx";
      } else if (this.listenerCount(event.event)) {
        return;
      }
      const subId = this._subIds[tag];
      if (!subId) {
        return;
      }
      delete this._subIds[tag];
      subId.then((subId2) => {
        if (!this._subs[subId2]) {
          return;
        }
        delete this._subs[subId2];
        this.send("eth_unsubscribe", [subId2]);
      });
    }
    destroy() {
      return __awaiter$a(this, void 0, void 0, function* () {
        if (this._websocket.readyState === WS.CONNECTING) {
          yield new Promise((resolve) => {
            this._websocket.onopen = function() {
              resolve(true);
            };
            this._websocket.onerror = function() {
              resolve(false);
            };
          });
        }
        this._websocket.close(1e3);
      });
    }
  };
  var __awaiter$b = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$w = new Logger(version$m);
  var StaticJsonRpcProvider = class extends JsonRpcProvider {
    detectNetwork() {
      const _super = Object.create(null, { detectNetwork: { get: () => super.detectNetwork } });
      return __awaiter$b(this, void 0, void 0, function* () {
        let network = this.network;
        if (network == null) {
          network = yield _super.detectNetwork.call(this);
          if (!network) {
            logger$w.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
          }
          if (this._network == null) {
            defineReadOnly(this, "_network", network);
            this.emit("network", network, null);
          }
        }
        return network;
      });
    }
  };
  var UrlJsonRpcProvider = class extends StaticJsonRpcProvider {
    constructor(network, apiKey) {
      logger$w.checkAbstract(new.target, UrlJsonRpcProvider);
      network = getStatic(new.target, "getNetwork")(network);
      apiKey = getStatic(new.target, "getApiKey")(apiKey);
      const connection = getStatic(new.target, "getUrl")(network, apiKey);
      super(connection, network);
      if (typeof apiKey === "string") {
        defineReadOnly(this, "apiKey", apiKey);
      } else if (apiKey != null) {
        Object.keys(apiKey).forEach((key2) => {
          defineReadOnly(this, key2, apiKey[key2]);
        });
      }
    }
    _startPending() {
      logger$w.warn("WARNING: API provider does not support pending filters");
    }
    isCommunityResource() {
      return false;
    }
    getSigner(address) {
      return logger$w.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
    }
    listAccounts() {
      return Promise.resolve([]);
    }
    static getApiKey(apiKey) {
      return apiKey;
    }
    static getUrl(network, apiKey) {
      return logger$w.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, { operation: "getUrl" });
    }
  };
  var logger$x = new Logger(version$m);
  var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
  var AlchemyWebSocketProvider = class extends WebSocketProvider {
    constructor(network, apiKey) {
      const provider = new AlchemyProvider(network, apiKey);
      const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
      super(url, provider.network);
      defineReadOnly(this, "apiKey", provider.apiKey);
    }
    isCommunityResource() {
      return this.apiKey === defaultApiKey;
    }
  };
  var AlchemyProvider = class extends UrlJsonRpcProvider {
    static getWebSocketProvider(network, apiKey) {
      return new AlchemyWebSocketProvider(network, apiKey);
    }
    static getApiKey(apiKey) {
      if (apiKey == null) {
        return defaultApiKey;
      }
      if (apiKey && typeof apiKey !== "string") {
        logger$x.throwArgumentError("invalid apiKey", "apiKey", apiKey);
      }
      return apiKey;
    }
    static getUrl(network, apiKey) {
      let host = null;
      switch (network.name) {
        case "homestead":
          host = "eth-mainnet.alchemyapi.io/v2/";
          break;
        case "ropsten":
          host = "eth-ropsten.alchemyapi.io/v2/";
          break;
        case "rinkeby":
          host = "eth-rinkeby.alchemyapi.io/v2/";
          break;
        case "goerli":
          host = "eth-goerli.alchemyapi.io/v2/";
          break;
        case "kovan":
          host = "eth-kovan.alchemyapi.io/v2/";
          break;
        default:
          logger$x.throwArgumentError("unsupported network", "network", arguments[0]);
      }
      return { allowGzip: true, url: "https://" + host + apiKey, throttleCallback: (attempt, url) => {
        if (apiKey === defaultApiKey) {
          showThrottleMessage();
        }
        return Promise.resolve(true);
      } };
    }
    isCommunityResource() {
      return this.apiKey === defaultApiKey;
    }
  };
  var __awaiter$c = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$y = new Logger(version$m);
  var CloudflareProvider = class extends UrlJsonRpcProvider {
    static getApiKey(apiKey) {
      if (apiKey != null) {
        logger$y.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
      }
      return null;
    }
    static getUrl(network, apiKey) {
      let host = null;
      switch (network.name) {
        case "homestead":
          host = "https://cloudflare-eth.com/";
          break;
        default:
          logger$y.throwArgumentError("unsupported network", "network", arguments[0]);
      }
      return host;
    }
    perform(method, params) {
      const _super = Object.create(null, { perform: { get: () => super.perform } });
      return __awaiter$c(this, void 0, void 0, function* () {
        if (method === "getBlockNumber") {
          const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
          return block.number;
        }
        return _super.perform.call(this, method, params);
      });
    }
  };
  var __awaiter$d = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$z = new Logger(version$m);
  function getTransactionPostData(transaction) {
    const result = {};
    for (let key2 in transaction) {
      if (transaction[key2] == null) {
        continue;
      }
      let value = transaction[key2];
      if ({ type: true, gasLimit: true, gasPrice: true, nonce: true, value: true }[key2]) {
        value = hexValue(hexlify(value));
      } else if (key2 === "accessList") {
        const sets = accessListify(value);
        value = "[" + sets.map((set) => {
          return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
        }).join(",") + "]";
      } else {
        value = hexlify(value);
      }
      result[key2] = value;
    }
    return result;
  }
  function getResult$1(result) {
    if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
      return result.result;
    }
    if (result.status != 1 || result.message != "OK") {
      const error = new Error("invalid response");
      error.result = JSON.stringify(result);
      if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
        error.throttleRetry = true;
      }
      throw error;
    }
    return result.result;
  }
  function getJsonResult(result) {
    if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
      const error = new Error("throttled response");
      error.result = JSON.stringify(result);
      error.throttleRetry = true;
      throw error;
    }
    if (result.jsonrpc != "2.0") {
      const error = new Error("invalid response");
      error.result = JSON.stringify(result);
      throw error;
    }
    if (result.error) {
      const error = new Error(result.error.message || "unknown error");
      if (result.error.code) {
        error.code = result.error.code;
      }
      if (result.error.data) {
        error.data = result.error.data;
      }
      throw error;
    }
    return result.result;
  }
  function checkLogTag(blockTag) {
    if (blockTag === "pending") {
      throw new Error("pending not supported");
    }
    if (blockTag === "latest") {
      return blockTag;
    }
    return parseInt(blockTag.substring(2), 16);
  }
  var defaultApiKey$1 = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
  function checkError$1(method, error, transaction) {
    if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
      const e = error.error;
      if (e && e.message.match("reverted") && isHexString(e.data)) {
        return e.data;
      }
    }
    let message = error.message;
    if (error.code === Logger.errors.SERVER_ERROR) {
      if (error.error && typeof error.error.message === "string") {
        message = error.error.message;
      } else if (typeof error.body === "string") {
        message = error.body;
      } else if (typeof error.responseText === "string") {
        message = error.responseText;
      }
    }
    message = (message || "").toLowerCase();
    if (message.match(/insufficient funds/)) {
      logger$z.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, { error, method, transaction });
    }
    if (message.match(/same hash was already imported|transaction nonce is too low/)) {
      logger$z.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, { error, method, transaction });
    }
    if (message.match(/another transaction with same nonce/)) {
      logger$z.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, { error, method, transaction });
    }
    if (message.match(/execution failed due to an exception/)) {
      logger$z.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, { error, method, transaction });
    }
    throw error;
  }
  var EtherscanProvider = class extends BaseProvider {
    constructor(network, apiKey) {
      logger$z.checkNew(new.target, EtherscanProvider);
      super(network);
      let name2 = "invalid";
      if (this.network) {
        name2 = this.network.name;
      }
      let baseUrl = null;
      switch (name2) {
        case "homestead":
          baseUrl = "https://api.etherscan.io";
          break;
        case "ropsten":
          baseUrl = "https://api-ropsten.etherscan.io";
          break;
        case "rinkeby":
          baseUrl = "https://api-rinkeby.etherscan.io";
          break;
        case "kovan":
          baseUrl = "https://api-kovan.etherscan.io";
          break;
        case "goerli":
          baseUrl = "https://api-goerli.etherscan.io";
          break;
        default:
          throw new Error("unsupported network");
      }
      defineReadOnly(this, "baseUrl", baseUrl);
      defineReadOnly(this, "apiKey", apiKey || defaultApiKey$1);
    }
    detectNetwork() {
      return __awaiter$d(this, void 0, void 0, function* () {
        return this.network;
      });
    }
    perform(method, params) {
      const _super = Object.create(null, { perform: { get: () => super.perform } });
      return __awaiter$d(this, void 0, void 0, function* () {
        let url = this.baseUrl + "/api";
        let apiKey = "";
        if (this.apiKey) {
          apiKey += "&apikey=" + this.apiKey;
        }
        const get = (url2, payload, procFunc) => __awaiter$d(this, void 0, void 0, function* () {
          this.emit("debug", { action: "request", request: url2, provider: this });
          const connection = { url: url2, throttleSlotInterval: 1e3, throttleCallback: (attempt, url3) => {
            if (this.isCommunityResource()) {
              showThrottleMessage();
            }
            return Promise.resolve(true);
          } };
          let payloadStr = null;
          if (payload) {
            connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
            payloadStr = Object.keys(payload).map((key2) => {
              return `${key2}=${payload[key2]}`;
            }).join("&");
          }
          const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
          this.emit("debug", { action: "response", request: url2, response: deepCopy(result), provider: this });
          return result;
        });
        switch (method) {
          case "getBlockNumber":
            url += "?module=proxy&action=eth_blockNumber" + apiKey;
            return get(url, null);
          case "getGasPrice":
            url += "?module=proxy&action=eth_gasPrice" + apiKey;
            return get(url, null);
          case "getBalance":
            url += "?module=account&action=balance&address=" + params.address;
            url += "&tag=" + params.blockTag + apiKey;
            return get(url, null, getResult$1);
          case "getTransactionCount":
            url += "?module=proxy&action=eth_getTransactionCount&address=" + params.address;
            url += "&tag=" + params.blockTag + apiKey;
            return get(url, null);
          case "getCode":
            url += "?module=proxy&action=eth_getCode&address=" + params.address;
            url += "&tag=" + params.blockTag + apiKey;
            return get(url, null);
          case "getStorageAt":
            url += "?module=proxy&action=eth_getStorageAt&address=" + params.address;
            url += "&position=" + params.position;
            url += "&tag=" + params.blockTag + apiKey;
            return get(url, null);
          case "sendTransaction":
            return get(url, { module: "proxy", action: "eth_sendRawTransaction", hex: params.signedTransaction, apikey: this.apiKey }).catch((error) => {
              return checkError$1("sendTransaction", error, params.signedTransaction);
            });
          case "getBlock":
            if (params.blockTag) {
              url += "?module=proxy&action=eth_getBlockByNumber&tag=" + params.blockTag;
              if (params.includeTransactions) {
                url += "&boolean=true";
              } else {
                url += "&boolean=false";
              }
              url += apiKey;
              return get(url, null);
            }
            throw new Error("getBlock by blockHash not implemented");
          case "getTransaction":
            url += "?module=proxy&action=eth_getTransactionByHash&txhash=" + params.transactionHash;
            url += apiKey;
            return get(url, null);
          case "getTransactionReceipt":
            url += "?module=proxy&action=eth_getTransactionReceipt&txhash=" + params.transactionHash;
            url += apiKey;
            return get(url, null);
          case "call": {
            if (params.blockTag !== "latest") {
              throw new Error("EtherscanProvider does not support blockTag for call");
            }
            const postData = getTransactionPostData(params.transaction);
            postData.module = "proxy";
            postData.action = "eth_call";
            postData.apikey = this.apiKey;
            try {
              return yield get(url, postData);
            } catch (error) {
              return checkError$1("call", error, params.transaction);
            }
          }
          case "estimateGas": {
            const postData = getTransactionPostData(params.transaction);
            postData.module = "proxy";
            postData.action = "eth_estimateGas";
            postData.apikey = this.apiKey;
            try {
              return yield get(url, postData);
            } catch (error) {
              return checkError$1("estimateGas", error, params.transaction);
            }
          }
          case "getLogs": {
            url += "?module=logs&action=getLogs";
            if (params.filter.fromBlock) {
              url += "&fromBlock=" + checkLogTag(params.filter.fromBlock);
            }
            if (params.filter.toBlock) {
              url += "&toBlock=" + checkLogTag(params.filter.toBlock);
            }
            if (params.filter.address) {
              url += "&address=" + params.filter.address;
            }
            if (params.filter.topics && params.filter.topics.length > 0) {
              if (params.filter.topics.length > 1) {
                logger$z.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
              }
              if (params.filter.topics.length === 1) {
                const topic0 = params.filter.topics[0];
                if (typeof topic0 !== "string" || topic0.length !== 66) {
                  logger$z.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, { topic0 });
                }
                url += "&topic0=" + topic0;
              }
            }
            url += apiKey;
            const logs = yield get(url, null, getResult$1);
            let blocks = {};
            for (let i = 0; i < logs.length; i++) {
              const log = logs[i];
              if (log.blockHash != null) {
                continue;
              }
              if (blocks[log.blockNumber] == null) {
                const block = yield this.getBlock(log.blockNumber);
                if (block) {
                  blocks[log.blockNumber] = block.hash;
                }
              }
              log.blockHash = blocks[log.blockNumber];
            }
            return logs;
          }
          case "getEtherPrice":
            if (this.network.name !== "homestead") {
              return 0;
            }
            url += "?module=stats&action=ethprice";
            url += apiKey;
            return parseFloat((yield get(url, null, getResult$1)).ethusd);
          default:
            break;
        }
        return _super.perform.call(this, method, params);
      });
    }
    getHistory(addressOrName, startBlock, endBlock) {
      let url = this.baseUrl;
      let apiKey = "";
      if (this.apiKey) {
        apiKey += "&apikey=" + this.apiKey;
      }
      if (startBlock == null) {
        startBlock = 0;
      }
      if (endBlock == null) {
        endBlock = 99999999;
      }
      return this.resolveName(addressOrName).then((address) => {
        url += "/api?module=account&action=txlist&address=" + address;
        url += "&startblock=" + startBlock;
        url += "&endblock=" + endBlock;
        url += "&sort=asc" + apiKey;
        this.emit("debug", { action: "request", request: url, provider: this });
        const connection = { url, throttleSlotInterval: 1e3, throttleCallback: (attempt, url2) => {
          if (this.apiKey === defaultApiKey$1) {
            showThrottleMessage();
          }
          return Promise.resolve(true);
        } };
        return fetchJson(connection, null, getResult$1).then((result) => {
          this.emit("debug", { action: "response", request: url, response: deepCopy(result), provider: this });
          let output = [];
          result.forEach((tx) => {
            ["contractAddress", "to"].forEach(function(key2) {
              if (tx[key2] == "") {
                delete tx[key2];
              }
            });
            if (tx.creates == null && tx.contractAddress != null) {
              tx.creates = tx.contractAddress;
            }
            let item = this.formatter.transactionResponse(tx);
            if (tx.timeStamp) {
              item.timestamp = parseInt(tx.timeStamp);
            }
            output.push(item);
          });
          return output;
        });
      });
    }
    isCommunityResource() {
      return this.apiKey === defaultApiKey$1;
    }
  };
  var __awaiter$e = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$A = new Logger(version$m);
  function now() {
    return new Date().getTime();
  }
  function checkNetworks(networks2) {
    let result = null;
    for (let i = 0; i < networks2.length; i++) {
      const network = networks2[i];
      if (network == null) {
        return null;
      }
      if (result) {
        if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
          logger$A.throwArgumentError("provider mismatch", "networks", networks2);
        }
      } else {
        result = network;
      }
    }
    return result;
  }
  function median(values, maxDelta) {
    values = values.slice().sort();
    const middle = Math.floor(values.length / 2);
    if (values.length % 2) {
      return values[middle];
    }
    const a = values[middle - 1], b = values[middle];
    if (maxDelta != null && Math.abs(a - b) > maxDelta) {
      return null;
    }
    return (a + b) / 2;
  }
  function serialize$1(value) {
    if (value === null) {
      return "null";
    } else if (typeof value === "number" || typeof value === "boolean") {
      return JSON.stringify(value);
    } else if (typeof value === "string") {
      return value;
    } else if (BigNumber.isBigNumber(value)) {
      return value.toString();
    } else if (Array.isArray(value)) {
      return JSON.stringify(value.map((i) => serialize$1(i)));
    } else if (typeof value === "object") {
      const keys = Object.keys(value);
      keys.sort();
      return "{" + keys.map((key2) => {
        let v = value[key2];
        if (typeof v === "function") {
          v = "[function]";
        } else {
          v = serialize$1(v);
        }
        return JSON.stringify(key2) + ":" + v;
      }).join(",") + "}";
    }
    throw new Error("unknown value type: " + typeof value);
  }
  var nextRid = 1;
  function stall$1(duration) {
    let cancel = null;
    let timer2 = null;
    let promise = new Promise((resolve) => {
      cancel = function() {
        if (timer2) {
          clearTimeout(timer2);
          timer2 = null;
        }
        resolve();
      };
      timer2 = setTimeout(cancel, duration);
    });
    const wait = (func) => {
      promise = promise.then(func);
      return promise;
    };
    function getPromise() {
      return promise;
    }
    return { cancel, getPromise, wait };
  }
  var ForwardErrors = [Logger.errors.CALL_EXCEPTION, Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED, Logger.errors.UNPREDICTABLE_GAS_LIMIT];
  var ForwardProperties = ["address", "args", "errorArgs", "errorSignature", "method", "transaction"];
  function exposeDebugConfig(config, now2) {
    const result = { weight: config.weight };
    Object.defineProperty(result, "provider", { get: () => config.provider });
    if (config.start) {
      result.start = config.start;
    }
    if (now2) {
      result.duration = now2 - config.start;
    }
    if (config.done) {
      if (config.error) {
        result.error = config.error;
      } else {
        result.result = config.result || null;
      }
    }
    return result;
  }
  function normalizedTally(normalize, quorum) {
    return function(configs) {
      const tally = {};
      configs.forEach((c) => {
        const value = normalize(c.result);
        if (!tally[value]) {
          tally[value] = { count: 0, result: c.result };
        }
        tally[value].count++;
      });
      const keys = Object.keys(tally);
      for (let i = 0; i < keys.length; i++) {
        const check = tally[keys[i]];
        if (check.count >= quorum) {
          return check.result;
        }
      }
      return void 0;
    };
  }
  function getProcessFunc(provider, method, params) {
    let normalize = serialize$1;
    switch (method) {
      case "getBlockNumber":
        return function(configs) {
          const values = configs.map((c) => c.result);
          let blockNumber = median(configs.map((c) => c.result), 2);
          if (blockNumber == null) {
            return void 0;
          }
          blockNumber = Math.ceil(blockNumber);
          if (values.indexOf(blockNumber + 1) >= 0) {
            blockNumber++;
          }
          if (blockNumber >= provider._highestBlockNumber) {
            provider._highestBlockNumber = blockNumber;
          }
          return provider._highestBlockNumber;
        };
      case "getGasPrice":
        return function(configs) {
          const values = configs.map((c) => c.result);
          values.sort();
          return values[Math.floor(values.length / 2)];
        };
      case "getEtherPrice":
        return function(configs) {
          return median(configs.map((c) => c.result));
        };
      case "getBalance":
      case "getTransactionCount":
      case "getCode":
      case "getStorageAt":
      case "call":
      case "estimateGas":
      case "getLogs":
        break;
      case "getTransaction":
      case "getTransactionReceipt":
        normalize = function(tx) {
          if (tx == null) {
            return null;
          }
          tx = shallowCopy(tx);
          tx.confirmations = -1;
          return serialize$1(tx);
        };
        break;
      case "getBlock":
        if (params.includeTransactions) {
          normalize = function(block) {
            if (block == null) {
              return null;
            }
            block = shallowCopy(block);
            block.transactions = block.transactions.map((tx) => {
              tx = shallowCopy(tx);
              tx.confirmations = -1;
              return tx;
            });
            return serialize$1(block);
          };
        } else {
          normalize = function(block) {
            if (block == null) {
              return null;
            }
            return serialize$1(block);
          };
        }
        break;
      default:
        throw new Error("unknown method: " + method);
    }
    return normalizedTally(normalize, provider.quorum);
  }
  function waitForSync(config, blockNumber) {
    return __awaiter$e(this, void 0, void 0, function* () {
      const provider = config.provider;
      if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
        return provider;
      }
      return poll(() => {
        return new Promise((resolve, reject) => {
          setTimeout(function() {
            if (provider.blockNumber >= blockNumber) {
              return resolve(provider);
            }
            if (config.cancelled) {
              return resolve(null);
            }
            return resolve(void 0);
          }, 0);
        });
      }, { oncePoll: provider });
    });
  }
  function getRunner(config, currentBlockNumber, method, params) {
    return __awaiter$e(this, void 0, void 0, function* () {
      let provider = config.provider;
      switch (method) {
        case "getBlockNumber":
        case "getGasPrice":
          return provider[method]();
        case "getEtherPrice":
          if (provider.getEtherPrice) {
            return provider.getEtherPrice();
          }
          break;
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
          if (params.blockTag && isHexString(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider[method](params.address, params.blockTag || "latest");
        case "getStorageAt":
          if (params.blockTag && isHexString(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
        case "getBlock":
          if (params.blockTag && isHexString(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);
        case "call":
        case "estimateGas":
          if (params.blockTag && isHexString(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider[method](params.transaction);
        case "getTransaction":
        case "getTransactionReceipt":
          return provider[method](params.transactionHash);
        case "getLogs": {
          let filter = params.filter;
          if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider.getLogs(filter);
        }
      }
      return logger$A.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, { method, params });
    });
  }
  var FallbackProvider = class extends BaseProvider {
    constructor(providers, quorum) {
      logger$A.checkNew(new.target, FallbackProvider);
      if (providers.length === 0) {
        logger$A.throwArgumentError("missing providers", "providers", providers);
      }
      const providerConfigs = providers.map((configOrProvider, index2) => {
        if (Provider.isProvider(configOrProvider)) {
          const stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
          const priority = 1;
          return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
        }
        const config = shallowCopy(configOrProvider);
        if (config.priority == null) {
          config.priority = 1;
        }
        if (config.stallTimeout == null) {
          config.stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
        }
        if (config.weight == null) {
          config.weight = 1;
        }
        const weight = config.weight;
        if (weight % 1 || weight > 512 || weight < 1) {
          logger$A.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index2}].weight`, weight);
        }
        return Object.freeze(config);
      });
      const total = providerConfigs.reduce((accum, c) => accum + c.weight, 0);
      if (quorum == null) {
        quorum = total / 2;
      } else if (quorum > total) {
        logger$A.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
      }
      let networkOrReady = checkNetworks(providerConfigs.map((c) => c.provider.network));
      if (networkOrReady == null) {
        networkOrReady = new Promise((resolve, reject) => {
          setTimeout(() => {
            this.detectNetwork().then(resolve, reject);
          }, 0);
        });
      }
      super(networkOrReady);
      defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
      defineReadOnly(this, "quorum", quorum);
      this._highestBlockNumber = -1;
    }
    detectNetwork() {
      return __awaiter$e(this, void 0, void 0, function* () {
        const networks2 = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));
        return checkNetworks(networks2);
      });
    }
    perform(method, params) {
      return __awaiter$e(this, void 0, void 0, function* () {
        if (method === "sendTransaction") {
          const results = yield Promise.all(this.providerConfigs.map((c) => {
            return c.provider.sendTransaction(params.signedTransaction).then((result) => {
              return result.hash;
            }, (error) => {
              return error;
            });
          }));
          for (let i2 = 0; i2 < results.length; i2++) {
            const result = results[i2];
            if (typeof result === "string") {
              return result;
            }
          }
          throw results[0];
        }
        if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
          yield this.getBlockNumber();
        }
        const processFunc = getProcessFunc(this, method, params);
        const configs = shuffled(this.providerConfigs.map(shallowCopy));
        configs.sort((a, b) => a.priority - b.priority);
        const currentBlockNumber = this._highestBlockNumber;
        let i = 0;
        let first = true;
        while (true) {
          const t0 = now();
          let inflightWeight = configs.filter((c) => c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c) => accum + c.weight, 0);
          while (inflightWeight < this.quorum && i < configs.length) {
            const config = configs[i++];
            const rid = nextRid++;
            config.start = now();
            config.staller = stall$1(config.stallTimeout);
            config.staller.wait(() => {
              config.staller = null;
            });
            config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
              config.done = true;
              config.result = result;
              if (this.listenerCount("debug")) {
                this.emit("debug", { action: "request", rid, backend: exposeDebugConfig(config, now()), request: { method, params: deepCopy(params) }, provider: this });
              }
            }, (error) => {
              config.done = true;
              config.error = error;
              if (this.listenerCount("debug")) {
                this.emit("debug", { action: "request", rid, backend: exposeDebugConfig(config, now()), request: { method, params: deepCopy(params) }, provider: this });
              }
            });
            if (this.listenerCount("debug")) {
              this.emit("debug", { action: "request", rid, backend: exposeDebugConfig(config, null), request: { method, params: deepCopy(params) }, provider: this });
            }
            inflightWeight += config.weight;
          }
          const waiting = [];
          configs.forEach((c) => {
            if (c.done || !c.runner) {
              return;
            }
            waiting.push(c.runner);
            if (c.staller) {
              waiting.push(c.staller.getPromise());
            }
          });
          if (waiting.length) {
            yield Promise.race(waiting);
          }
          const results = configs.filter((c) => c.done && c.error == null);
          if (results.length >= this.quorum) {
            const result = processFunc(results);
            if (result !== void 0) {
              configs.forEach((c) => {
                if (c.staller) {
                  c.staller.cancel();
                }
                c.cancelled = true;
              });
              return result;
            }
            if (!first) {
              yield stall$1(100).getPromise();
            }
            first = false;
          }
          const errors = configs.reduce((accum, c) => {
            if (!c.done || c.error == null) {
              return accum;
            }
            const code = c.error.code;
            if (ForwardErrors.indexOf(code) >= 0) {
              if (!accum[code]) {
                accum[code] = { error: c.error, weight: 0 };
              }
              accum[code].weight += c.weight;
            }
            return accum;
          }, {});
          Object.keys(errors).forEach((errorCode) => {
            const tally = errors[errorCode];
            if (tally.weight < this.quorum) {
              return;
            }
            configs.forEach((c) => {
              if (c.staller) {
                c.staller.cancel();
              }
              c.cancelled = true;
            });
            const e = tally.error;
            const props = {};
            ForwardProperties.forEach((name2) => {
              if (e[name2] == null) {
                return;
              }
              props[name2] = e[name2];
            });
            logger$A.throwError(e.reason || e.message, errorCode, props);
          });
          if (configs.filter((c) => !c.done).length === 0) {
            break;
          }
        }
        configs.forEach((c) => {
          if (c.staller) {
            c.staller.cancel();
          }
          c.cancelled = true;
        });
        return logger$A.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, { method, params, results: configs.map((c) => exposeDebugConfig(c)), provider: this });
      });
    }
  };
  var IpcProvider = null;
  var logger$B = new Logger(version$m);
  var defaultProjectId = "84842078b09946638c03157f83405213";
  var InfuraWebSocketProvider = class extends WebSocketProvider {
    constructor(network, apiKey) {
      const provider = new InfuraProvider(network, apiKey);
      const connection = provider.connection;
      if (connection.password) {
        logger$B.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, { operation: "InfuraProvider.getWebSocketProvider()" });
      }
      const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
      super(url, network);
      defineReadOnly(this, "apiKey", provider.projectId);
      defineReadOnly(this, "projectId", provider.projectId);
      defineReadOnly(this, "projectSecret", provider.projectSecret);
    }
    isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
  };
  var InfuraProvider = class extends UrlJsonRpcProvider {
    static getWebSocketProvider(network, apiKey) {
      return new InfuraWebSocketProvider(network, apiKey);
    }
    static getApiKey(apiKey) {
      const apiKeyObj = { apiKey: defaultProjectId, projectId: defaultProjectId, projectSecret: null };
      if (apiKey == null) {
        return apiKeyObj;
      }
      if (typeof apiKey === "string") {
        apiKeyObj.projectId = apiKey;
      } else if (apiKey.projectSecret != null) {
        logger$B.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
        logger$B.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
        apiKeyObj.projectId = apiKey.projectId;
        apiKeyObj.projectSecret = apiKey.projectSecret;
      } else if (apiKey.projectId) {
        apiKeyObj.projectId = apiKey.projectId;
      }
      apiKeyObj.apiKey = apiKeyObj.projectId;
      return apiKeyObj;
    }
    static getUrl(network, apiKey) {
      let host = null;
      switch (network ? network.name : "unknown") {
        case "homestead":
          host = "mainnet.infura.io";
          break;
        case "ropsten":
          host = "ropsten.infura.io";
          break;
        case "rinkeby":
          host = "rinkeby.infura.io";
          break;
        case "kovan":
          host = "kovan.infura.io";
          break;
        case "goerli":
          host = "goerli.infura.io";
          break;
        default:
          logger$B.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, { argument: "network", value: network });
      }
      const connection = { allowGzip: true, url: "https://" + host + "/v3/" + apiKey.projectId, throttleCallback: (attempt, url) => {
        if (apiKey.projectId === defaultProjectId) {
          showThrottleMessage();
        }
        return Promise.resolve(true);
      } };
      if (apiKey.projectSecret != null) {
        connection.user = "";
        connection.password = apiKey.projectSecret;
      }
      return connection;
    }
    isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
  };
  var JsonRpcBatchProvider = class extends JsonRpcProvider {
    send(method, params) {
      const request = { method, params, id: this._nextId++, jsonrpc: "2.0" };
      if (this._pendingBatch == null) {
        this._pendingBatch = [];
      }
      const inflightRequest = { request, resolve: null, reject: null };
      const promise = new Promise((resolve, reject) => {
        inflightRequest.resolve = resolve;
        inflightRequest.reject = reject;
      });
      this._pendingBatch.push(inflightRequest);
      if (!this._pendingBatchAggregator) {
        this._pendingBatchAggregator = setTimeout(() => {
          const batch = this._pendingBatch;
          this._pendingBatch = null;
          this._pendingBatchAggregator = null;
          const request2 = batch.map((inflight) => inflight.request);
          this.emit("debug", { action: "requestBatch", request: deepCopy(request2), provider: this });
          return fetchJson(this.connection, JSON.stringify(request2)).then((result) => {
            this.emit("debug", { action: "response", request: request2, response: result, provider: this });
            batch.forEach((inflightRequest2, index2) => {
              const payload = result[index2];
              if (payload.error) {
                const error = new Error(payload.error.message);
                error.code = payload.error.code;
                error.data = payload.error.data;
                inflightRequest2.reject(error);
              } else {
                inflightRequest2.resolve(payload.result);
              }
            });
          }, (error) => {
            this.emit("debug", { action: "response", error, request: request2, provider: this });
            batch.forEach((inflightRequest2) => {
              inflightRequest2.reject(error);
            });
          });
        }, 10);
      }
      return promise;
    }
  };
  var logger$C = new Logger(version$m);
  var defaultApiKey$2 = "ETHERS_JS_SHARED";
  var NodesmithProvider = class extends UrlJsonRpcProvider {
    static getApiKey(apiKey) {
      if (apiKey && typeof apiKey !== "string") {
        logger$C.throwArgumentError("invalid apiKey", "apiKey", apiKey);
      }
      return apiKey || defaultApiKey$2;
    }
    static getUrl(network, apiKey) {
      logger$C.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
      let host = null;
      switch (network.name) {
        case "homestead":
          host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
          break;
        case "ropsten":
          host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
          break;
        case "rinkeby":
          host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
          break;
        case "goerli":
          host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
          break;
        case "kovan":
          host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
          break;
        default:
          logger$C.throwArgumentError("unsupported network", "network", arguments[0]);
      }
      return host + "?apiKey=" + apiKey;
    }
  };
  var logger$D = new Logger(version$m);
  var defaultApplicationIds = { homestead: "6004bcd10040261633ade990", ropsten: "6004bd4d0040261633ade991", rinkeby: "6004bda20040261633ade994", goerli: "6004bd860040261633ade992" };
  var PocketProvider = class extends UrlJsonRpcProvider {
    constructor(network, apiKey) {
      if (apiKey == null) {
        const n = getStatic(new.target, "getNetwork")(network);
        if (n) {
          const applicationId = defaultApplicationIds[n.name];
          if (applicationId) {
            apiKey = { applicationId, loadBalancer: true };
          }
        }
        if (apiKey == null) {
          logger$D.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, { argument: "network", value: network });
        }
      }
      super(network, apiKey);
    }
    static getApiKey(apiKey) {
      if (apiKey == null) {
        logger$D.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
      }
      const apiKeyObj = { applicationId: null, loadBalancer: false, applicationSecretKey: null };
      if (typeof apiKey === "string") {
        apiKeyObj.applicationId = apiKey;
      } else if (apiKey.applicationSecretKey != null) {
        logger$D.assertArgument(typeof apiKey.applicationId === "string", "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
        logger$D.assertArgument(typeof apiKey.applicationSecretKey === "string", "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
        apiKeyObj.applicationId = apiKey.applicationId;
        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
      } else if (apiKey.applicationId) {
        logger$D.assertArgument(typeof apiKey.applicationId === "string", "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
        apiKeyObj.applicationId = apiKey.applicationId;
        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
      } else {
        logger$D.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
      }
      return apiKeyObj;
    }
    static getUrl(network, apiKey) {
      let host = null;
      switch (network ? network.name : "unknown") {
        case "homestead":
          host = "eth-mainnet.gateway.pokt.network";
          break;
        case "ropsten":
          host = "eth-ropsten.gateway.pokt.network";
          break;
        case "rinkeby":
          host = "eth-rinkeby.gateway.pokt.network";
          break;
        case "goerli":
          host = "eth-goerli.gateway.pokt.network";
          break;
        default:
          logger$D.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, { argument: "network", value: network });
      }
      let url = null;
      if (apiKey.loadBalancer) {
        url = `https://${host}/v1/lb/${apiKey.applicationId}`;
      } else {
        url = `https://${host}/v1/${apiKey.applicationId}`;
      }
      const connection = { url };
      connection.headers = {};
      if (apiKey.applicationSecretKey != null) {
        connection.user = "";
        connection.password = apiKey.applicationSecretKey;
      }
      return connection;
    }
    isCommunityResource() {
      return this.applicationId === defaultApplicationIds[this.network.name];
    }
  };
  var logger$E = new Logger(version$m);
  var _nextId = 1;
  function buildWeb3LegacyFetcher(provider, sendFunc) {
    return function(method, params) {
      if (method == "eth_sign" && (provider.isMetaMask || provider.isStatus)) {
        method = "personal_sign";
        params = [params[1], params[0]];
      }
      const request = { method, params, id: _nextId++, jsonrpc: "2.0" };
      return new Promise((resolve, reject) => {
        sendFunc(request, function(error, result) {
          if (error) {
            return reject(error);
          }
          if (result.error) {
            const error2 = new Error(result.error.message);
            error2.code = result.error.code;
            error2.data = result.error.data;
            return reject(error2);
          }
          resolve(result.result);
        });
      });
    };
  }
  function buildEip1193Fetcher(provider) {
    return function(method, params) {
      if (params == null) {
        params = [];
      }
      if (method == "eth_sign" && (provider.isMetaMask || provider.isStatus)) {
        method = "personal_sign";
        params = [params[1], params[0]];
      }
      return provider.request({ method, params });
    };
  }
  var Web3Provider = class extends JsonRpcProvider {
    constructor(provider, network) {
      logger$E.checkNew(new.target, Web3Provider);
      if (provider == null) {
        logger$E.throwArgumentError("missing provider", "provider", provider);
      }
      let path = null;
      let jsonRpcFetchFunc = null;
      let subprovider = null;
      if (typeof provider === "function") {
        path = "unknown:";
        jsonRpcFetchFunc = provider;
      } else {
        path = provider.host || provider.path || "";
        if (!path && provider.isMetaMask) {
          path = "metamask";
        }
        subprovider = provider;
        if (provider.request) {
          if (path === "") {
            path = "eip-1193:";
          }
          jsonRpcFetchFunc = buildEip1193Fetcher(provider);
        } else if (provider.sendAsync) {
          jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
        } else if (provider.send) {
          jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
        } else {
          logger$E.throwArgumentError("unsupported provider", "provider", provider);
        }
        if (!path) {
          path = "unknown:";
        }
      }
      super(path, network);
      defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
      defineReadOnly(this, "provider", subprovider);
    }
    send(method, params) {
      return this.jsonRpcFetchFunc(method, params);
    }
  };
  var logger$F = new Logger(version$m);
  function getDefaultProvider(network, options) {
    if (network == null) {
      network = "homestead";
    }
    if (typeof network === "string") {
      const match = network.match(/^(ws|http)s?:/i);
      if (match) {
        switch (match[1]) {
          case "http":
            return new JsonRpcProvider(network);
          case "ws":
            return new WebSocketProvider(network);
          default:
            logger$F.throwArgumentError("unsupported URL scheme", "network", network);
        }
      }
    }
    const n = getNetwork(network);
    if (!n || !n._defaultProvider) {
      logger$F.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, { operation: "getDefaultProvider", network });
    }
    return n._defaultProvider({ FallbackProvider, AlchemyProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, JsonRpcProvider, NodesmithProvider, PocketProvider, Web3Provider, IpcProvider }, options);
  }
  var index$3 = Object.freeze({ __proto__: null, Provider, BaseProvider, Resolver, UrlJsonRpcProvider, FallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, JsonRpcSigner, getDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage, Formatter });
  var regexBytes = new RegExp("^bytes([0-9]+)$");
  var regexNumber = new RegExp("^(u?int)([0-9]*)$");
  var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
  var Zeros$1 = "0000000000000000000000000000000000000000000000000000000000000000";
  function _pack(type, value, isArray) {
    switch (type) {
      case "address":
        if (isArray) {
          return zeroPad(value, 32);
        }
        return arrayify(value);
      case "string":
        return toUtf8Bytes(value);
      case "bytes":
        return arrayify(value);
      case "bool":
        value = value ? "0x01" : "0x00";
        if (isArray) {
          return zeroPad(value, 32);
        }
        return arrayify(value);
    }
    let match = type.match(regexNumber);
    if (match) {
      let size = parseInt(match[2] || "256");
      if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
        throw new Error("invalid number type - " + type);
      }
      if (isArray) {
        size = 256;
      }
      value = BigNumber.from(value).toTwos(size);
      return zeroPad(value, size / 8);
    }
    match = type.match(regexBytes);
    if (match) {
      const size = parseInt(match[1]);
      if (String(size) !== match[1] || size === 0 || size > 32) {
        throw new Error("invalid bytes type - " + type);
      }
      if (arrayify(value).byteLength !== size) {
        throw new Error("invalid value for " + type);
      }
      if (isArray) {
        return arrayify((value + Zeros$1).substring(0, 66));
      }
      return value;
    }
    match = type.match(regexArray);
    if (match && Array.isArray(value)) {
      const baseType = match[1];
      const count = parseInt(match[2] || String(value.length));
      if (count != value.length) {
        throw new Error("invalid value for " + type);
      }
      const result = [];
      value.forEach(function(value2) {
        result.push(_pack(baseType, value2, true));
      });
      return concat(result);
    }
    throw new Error("invalid type - " + type);
  }
  function pack$1(types, values) {
    if (types.length != values.length) {
      throw new Error("type/value count mismatch");
    }
    const tight = [];
    types.forEach(function(type, index2) {
      tight.push(_pack(type, values[index2]));
    });
    return hexlify(concat(tight));
  }
  function keccak256$1(types, values) {
    return keccak256(pack$1(types, values));
  }
  function sha256$2(types, values) {
    return sha256$1(pack$1(types, values));
  }
  var version$n = "units/5.1.0";
  var logger$G = new Logger(version$n);
  var names = ["wei", "kwei", "mwei", "gwei", "szabo", "finney", "ether"];
  function commify(value) {
    const comps = String(value).split(".");
    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
      logger$G.throwArgumentError("invalid value", "value", value);
    }
    let whole = comps[0];
    let negative = "";
    if (whole.substring(0, 1) === "-") {
      negative = "-";
      whole = whole.substring(1);
    }
    while (whole.substring(0, 1) === "0") {
      whole = whole.substring(1);
    }
    if (whole === "") {
      whole = "0";
    }
    let suffix = "";
    if (comps.length === 2) {
      suffix = "." + (comps[1] || "0");
    }
    while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
      suffix = suffix.substring(0, suffix.length - 1);
    }
    const formatted = [];
    while (whole.length) {
      if (whole.length <= 3) {
        formatted.unshift(whole);
        break;
      } else {
        const index2 = whole.length - 3;
        formatted.unshift(whole.substring(index2));
        whole = whole.substring(0, index2);
      }
    }
    return negative + formatted.join(",") + suffix;
  }
  function formatUnits(value, unitName) {
    if (typeof unitName === "string") {
      const index2 = names.indexOf(unitName);
      if (index2 !== -1) {
        unitName = 3 * index2;
      }
    }
    return formatFixed(value, unitName != null ? unitName : 18);
  }
  function parseUnits(value, unitName) {
    if (typeof value !== "string") {
      logger$G.throwArgumentError("value must be a string", "value", value);
    }
    if (typeof unitName === "string") {
      const index2 = names.indexOf(unitName);
      if (index2 !== -1) {
        unitName = 3 * index2;
      }
    }
    return parseFixed(value, unitName != null ? unitName : 18);
  }
  function formatEther(wei) {
    return formatUnits(wei, 18);
  }
  function parseEther(ether) {
    return parseUnits(ether, 18);
  }
  var utils$1 = Object.freeze({ __proto__: null, AbiCoder, defaultAbiCoder, Fragment, EventFragment, FunctionFragment, ParamType, FormatTypes, checkResultErrors, Logger, RLP: index, _fetchData, fetchJson, poll, checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy, arrayify, concat, stripZeros, zeroPad, isBytes, isBytesLike, defaultPath, HDNode, SigningKey, Interface, LogDescription, TransactionDescription, base58: Base58, base64: index$2, hexlify, isHexString, hexConcat, hexStripZeros, hexValue, hexZeroPad, hexDataLength, hexDataSlice, nameprep, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs, formatBytes32String, parseBytes32String, hashMessage, namehash, isValidName, id, _TypedDataEncoder: TypedDataEncoder, getAddress, getIcapAddress, getContractAddress, getCreate2Address, isAddress, formatEther, parseEther, formatUnits, parseUnits, commify, computeHmac, keccak256, ripemd160: ripemd160$1, sha256: sha256$1, sha512: sha512$1, randomBytes, shuffled, solidityPack: pack$1, solidityKeccak256: keccak256$1, soliditySha256: sha256$2, splitSignature, joinSignature, accessListify, parseTransaction: parse, serializeTransaction: serialize, getJsonWalletAddress, computeAddress, recoverAddress, computePublicKey, recoverPublicKey, verifyMessage, verifyTypedData, mnemonicToEntropy, entropyToMnemonic, isValidMnemonic, mnemonicToSeed, get SupportedAlgorithm() {
    return SupportedAlgorithm;
  }, get UnicodeNormalizationForm() {
    return UnicodeNormalizationForm;
  }, get Utf8ErrorReason() {
    return Utf8ErrorReason;
  }, Indexed });
  var version$o = "ethers/5.1.4";
  var logger$H = new Logger(version$o);
  var ethers = Object.freeze({ __proto__: null, Signer, Wallet, VoidSigner, getDefaultProvider, providers: index$3, BaseContract, Contract, ContractFactory, BigNumber, FixedNumber, constants: index$1, get errors() {
    return ErrorCode;
  }, logger: logger$H, utils: utils$1, wordlists, version: version$o, Wordlist });
  try {
    const anyGlobal2 = window;
    if (anyGlobal2._ethers == null) {
      anyGlobal2._ethers = ethers;
    }
  } catch (error) {
  }

  // js/hooks/metamask.js
  var web3Provider = new ethers.providers.Web3Provider(window.ethereum);
  var Metamask = {
    mounted() {
      let signer = web3Provider.getSigner();
      window.addEventListener("load", async () => {
        web3Provider.listAccounts().then((accounts) => {
          if (accounts.length > 0) {
            signer = web3Provider.getSigner();
            signer.getAddress().then((address) => {
              this.pushEvent("account-check", { connected: true, current_wallet_address: address });
            });
          } else {
            this.pushEvent("account-check", { connected: false, current_wallet_address: null });
          }
        });
      });
      window.addEventListener(`phx:get-current-wallet`, (e) => {
        signer.getAddress().then((address) => {
          const message = `You are signing this message to sign in with Dora. Nonce: ${e.detail.nonce}`;
          signer.signMessage(message).then((signature2) => {
            this.pushEvent("verify-signature", { public_address: address, signature: signature2 });
            return;
          });
        });
      });
      window.addEventListener(`phx:connect-metamask`, (e) => {
        web3Provider.provider.request({ method: "eth_requestAccounts" }).then((accounts) => {
          if (accounts.length > 0) {
            signer.getAddress().then((address) => {
              this.pushEvent("wallet-connected", { public_address: address });
            });
          }
        }, (error) => console.log(error));
      });
    }
  };

  // js/app.js
  var csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
  var Hooks2 = {};
  Hooks2.Metamask = Metamask;
  var liveSocket = new LiveSocket("/live", Socket, {
    params: { _csrf_token: csrfToken },
    hooks: Hooks2
  });
  import_topbar.default.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
  window.addEventListener("phx:page-loading-start", (_info) => import_topbar.default.show(300));
  window.addEventListener("phx:page-loading-stop", (_info) => import_topbar.default.hide());
  window.addEventListener("dora:clipcopy", (event) => {
    if ("clipboard" in navigator) {
      const text = event.target.textContent.trim();
      navigator.clipboard.writeText(text);
    } else {
      alert("Sorry, your browser does not support clipboard copy.");
    }
  });
  liveSocket.connect();
  window.liveSocket = liveSocket;
})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vYXNzZXRzL3ZlbmRvci90b3BiYXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2h0bWwvcHJpdi9zdGF0aWMvcGhvZW5peF9odG1sLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC91dGlscy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvY29uc3RhbnRzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9wdXNoLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC90aW1lci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvY2hhbm5lbC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvYWpheC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvbG9uZ3BvbGwuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3ByZXNlbmNlLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9zZXJpYWxpemVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9zb2NrZXQuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvY29uc3RhbnRzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2VudHJ5X3VwbG9hZGVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3V0aWxzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2Jyb3dzZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3VwbG9hZF9lbnRyeS5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9saXZlX3VwbG9hZGVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2FyaWEuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvaG9va3MuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tX3Bvc3RfbW9ycGhfcmVzdG9yZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvbm9kZV9tb2R1bGVzL21vcnBoZG9tL2Rpc3QvbW9ycGhkb20tZXNtLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2RvbV9wYXRjaC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9yZW5kZXJlZC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy92aWV3X2hvb2suanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvanMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvdmlldy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9saXZlX3NvY2tldC5qcyIsICIuLi8uLi8uLi9hc3NldHMvanMvYXBwLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy92ZW5kb3IvZXRoZXJzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9qcy9ob29rcy9tZXRhbWFzay5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyoqXG4gKiBAbGljZW5zZSBNSVRcbiAqIHRvcGJhciAyLjAuMCwgMjAyMy0wMi0wNFxuICogaHR0cHM6Ly9idXVuZ3V5ZW4uZ2l0aHViLmlvL3RvcGJhclxuICogQ29weXJpZ2h0IChjKSAyMDIxIEJ1dSBOZ3V5ZW5cbiAqL1xuKGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50KSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC8xNTc5NjcxXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxhc3RUaW1lID0gMDtcbiAgICB2YXIgdmVuZG9ycyA9IFtcIm1zXCIsIFwibW96XCIsIFwid2Via2l0XCIsIFwib1wiXTtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK3gpIHtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPVxuICAgICAgICB3aW5kb3dbdmVuZG9yc1t4XSArIFwiUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID1cbiAgICAgICAgd2luZG93W3ZlbmRvcnNbeF0gKyBcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdIHx8XG4gICAgICAgIHdpbmRvd1t2ZW5kb3JzW3hdICsgXCJDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG4gICAgfVxuICAgIGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSlcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHZhciB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpO1xuICAgICAgICB2YXIgaWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTtcbiAgICAgICAgfSwgdGltZVRvQ2FsbCk7XG4gICAgICAgIGxhc3RUaW1lID0gY3VyclRpbWUgKyB0aW1lVG9DYWxsO1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgICB9O1xuICAgIGlmICghd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKVxuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICB9O1xuICB9KSgpO1xuXG4gIHZhciBjYW52YXMsXG4gICAgY3VycmVudFByb2dyZXNzLFxuICAgIHNob3dpbmcsXG4gICAgcHJvZ3Jlc3NUaW1lcklkID0gbnVsbCxcbiAgICBmYWRlVGltZXJJZCA9IG51bGwsXG4gICAgZGVsYXlUaW1lcklkID0gbnVsbCxcbiAgICBhZGRFdmVudCA9IGZ1bmN0aW9uIChlbGVtLCB0eXBlLCBoYW5kbGVyKSB7XG4gICAgICBpZiAoZWxlbS5hZGRFdmVudExpc3RlbmVyKSBlbGVtLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgICAgZWxzZSBpZiAoZWxlbS5hdHRhY2hFdmVudCkgZWxlbS5hdHRhY2hFdmVudChcIm9uXCIgKyB0eXBlLCBoYW5kbGVyKTtcbiAgICAgIGVsc2UgZWxlbVtcIm9uXCIgKyB0eXBlXSA9IGhhbmRsZXI7XG4gICAgfSxcbiAgICBvcHRpb25zID0ge1xuICAgICAgYXV0b1J1bjogdHJ1ZSxcbiAgICAgIGJhclRoaWNrbmVzczogMyxcbiAgICAgIGJhckNvbG9yczoge1xuICAgICAgICAwOiBcInJnYmEoMjYsICAxODgsIDE1NiwgLjkpXCIsXG4gICAgICAgIFwiLjI1XCI6IFwicmdiYSg1MiwgIDE1MiwgMjE5LCAuOSlcIixcbiAgICAgICAgXCIuNTBcIjogXCJyZ2JhKDI0MSwgMTk2LCAxNSwgIC45KVwiLFxuICAgICAgICBcIi43NVwiOiBcInJnYmEoMjMwLCAxMjYsIDM0LCAgLjkpXCIsXG4gICAgICAgIFwiMS4wXCI6IFwicmdiYSgyMTEsIDg0LCAgMCwgICAuOSlcIixcbiAgICAgIH0sXG4gICAgICBzaGFkb3dCbHVyOiAxMCxcbiAgICAgIHNoYWRvd0NvbG9yOiBcInJnYmEoMCwgICAwLCAgIDAsICAgLjYpXCIsXG4gICAgICBjbGFzc05hbWU6IG51bGwsXG4gICAgfSxcbiAgICByZXBhaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gb3B0aW9ucy5iYXJUaGlja25lc3MgKiA1OyAvLyBuZWVkIHNwYWNlIGZvciBzaGFkb3dcblxuICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICBjdHguc2hhZG93Qmx1ciA9IG9wdGlvbnMuc2hhZG93Qmx1cjtcbiAgICAgIGN0eC5zaGFkb3dDb2xvciA9IG9wdGlvbnMuc2hhZG93Q29sb3I7XG5cbiAgICAgIHZhciBsaW5lR3JhZGllbnQgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgY2FudmFzLndpZHRoLCAwKTtcbiAgICAgIGZvciAodmFyIHN0b3AgaW4gb3B0aW9ucy5iYXJDb2xvcnMpXG4gICAgICAgIGxpbmVHcmFkaWVudC5hZGRDb2xvclN0b3Aoc3RvcCwgb3B0aW9ucy5iYXJDb2xvcnNbc3RvcF0pO1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbygwLCBvcHRpb25zLmJhclRoaWNrbmVzcyAvIDIpO1xuICAgICAgY3R4LmxpbmVUbyhcbiAgICAgICAgTWF0aC5jZWlsKGN1cnJlbnRQcm9ncmVzcyAqIGNhbnZhcy53aWR0aCksXG4gICAgICAgIG9wdGlvbnMuYmFyVGhpY2tuZXNzIC8gMlxuICAgICAgKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxpbmVHcmFkaWVudDtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9LFxuICAgIGNyZWF0ZUNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICB2YXIgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG4gICAgICBzdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICAgIHN0eWxlLnRvcCA9IHN0eWxlLmxlZnQgPSBzdHlsZS5yaWdodCA9IHN0eWxlLm1hcmdpbiA9IHN0eWxlLnBhZGRpbmcgPSAwO1xuICAgICAgc3R5bGUuekluZGV4ID0gMTAwMDAxO1xuICAgICAgc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgaWYgKG9wdGlvbnMuY2xhc3NOYW1lKSBjYW52YXMuY2xhc3NMaXN0LmFkZChvcHRpb25zLmNsYXNzTmFtZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICBhZGRFdmVudCh3aW5kb3csIFwicmVzaXplXCIsIHJlcGFpbnQpO1xuICAgIH0sXG4gICAgdG9wYmFyID0ge1xuICAgICAgY29uZmlnOiBmdW5jdGlvbiAob3B0cykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0cylcbiAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSBvcHRpb25zW2tleV0gPSBvcHRzW2tleV07XG4gICAgICB9LFxuICAgICAgc2hvdzogZnVuY3Rpb24gKGRlbGF5KSB7XG4gICAgICAgIGlmIChzaG93aW5nKSByZXR1cm47XG4gICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgIGlmIChkZWxheVRpbWVySWQpIHJldHVybjtcbiAgICAgICAgICBkZWxheVRpbWVySWQgPSBzZXRUaW1lb3V0KCgpID0+IHRvcGJhci5zaG93KCksIGRlbGF5KTtcbiAgICAgICAgfSBlbHNlICB7XG4gICAgICAgICAgc2hvd2luZyA9IHRydWU7XG4gICAgICAgICAgaWYgKGZhZGVUaW1lcklkICE9PSBudWxsKSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoZmFkZVRpbWVySWQpO1xuICAgICAgICAgIGlmICghY2FudmFzKSBjcmVhdGVDYW52YXMoKTtcbiAgICAgICAgICBjYW52YXMuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgICAgY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgdG9wYmFyLnByb2dyZXNzKDApO1xuICAgICAgICAgIGlmIChvcHRpb25zLmF1dG9SdW4pIHtcbiAgICAgICAgICAgIChmdW5jdGlvbiBsb29wKCkge1xuICAgICAgICAgICAgICBwcm9ncmVzc1RpbWVySWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICAgICAgICB0b3BiYXIucHJvZ3Jlc3MoXG4gICAgICAgICAgICAgICAgXCIrXCIgKyAwLjA1ICogTWF0aC5wb3coMSAtIE1hdGguc3FydChjdXJyZW50UHJvZ3Jlc3MpLCAyKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm9ncmVzczogZnVuY3Rpb24gKHRvKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBjdXJyZW50UHJvZ3Jlc3M7XG4gICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB0byA9XG4gICAgICAgICAgICAodG8uaW5kZXhPZihcIitcIikgPj0gMCB8fCB0by5pbmRleE9mKFwiLVwiKSA+PSAwXG4gICAgICAgICAgICAgID8gY3VycmVudFByb2dyZXNzXG4gICAgICAgICAgICAgIDogMCkgKyBwYXJzZUZsb2F0KHRvKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UHJvZ3Jlc3MgPSB0byA+IDEgPyAxIDogdG87XG4gICAgICAgIHJlcGFpbnQoKTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9ncmVzcztcbiAgICAgIH0sXG4gICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChkZWxheVRpbWVySWQpO1xuICAgICAgICBkZWxheVRpbWVySWQgPSBudWxsO1xuICAgICAgICBpZiAoIXNob3dpbmcpIHJldHVybjtcbiAgICAgICAgc2hvd2luZyA9IGZhbHNlO1xuICAgICAgICBpZiAocHJvZ3Jlc3NUaW1lcklkICE9IG51bGwpIHtcbiAgICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUocHJvZ3Jlc3NUaW1lcklkKTtcbiAgICAgICAgICBwcm9ncmVzc1RpbWVySWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIChmdW5jdGlvbiBsb29wKCkge1xuICAgICAgICAgIGlmICh0b3BiYXIucHJvZ3Jlc3MoXCIrLjFcIikgPj0gMSkge1xuICAgICAgICAgICAgY2FudmFzLnN0eWxlLm9wYWNpdHkgLT0gMC4wNTtcbiAgICAgICAgICAgIGlmIChjYW52YXMuc3R5bGUub3BhY2l0eSA8PSAwLjA1KSB7XG4gICAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgIGZhZGVUaW1lcklkID0gbnVsbDtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmYWRlVGltZXJJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgICAgIH0pKCk7XG4gICAgICB9LFxuICAgIH07XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB0b3BiYXI7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRvcGJhcjtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnRvcGJhciA9IHRvcGJhcjtcbiAgfVxufS5jYWxsKHRoaXMsIHdpbmRvdywgZG9jdW1lbnQpKTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgUG9seWZpbGxFdmVudCA9IGV2ZW50Q29uc3RydWN0b3IoKTtcblxuICBmdW5jdGlvbiBldmVudENvbnN0cnVjdG9yKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG4gICAgLy8gSUU8PTkgU3VwcG9ydFxuICAgIGZ1bmN0aW9uIEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7YnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IGZhbHNlLCBkZXRhaWw6IHVuZGVmaW5lZH07XG4gICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICAgICAgcmV0dXJuIGV2dDtcbiAgICB9XG4gICAgQ3VzdG9tRXZlbnQucHJvdG90eXBlID0gd2luZG93LkV2ZW50LnByb3RvdHlwZTtcbiAgICByZXR1cm4gQ3VzdG9tRXZlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEhpZGRlbklucHV0KG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGlucHV0LnR5cGUgPSBcImhpZGRlblwiO1xuICAgIGlucHV0Lm5hbWUgPSBuYW1lO1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZWxlbWVudCwgdGFyZ2V0TW9kaWZpZXJLZXkpIHtcbiAgICB2YXIgdG8gPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdG9cIiksXG4gICAgICAgIG1ldGhvZCA9IGJ1aWxkSGlkZGVuSW5wdXQoXCJfbWV0aG9kXCIsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikpLFxuICAgICAgICBjc3JmID0gYnVpbGRIaWRkZW5JbnB1dChcIl9jc3JmX3Rva2VuXCIsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3JmXCIpKSxcbiAgICAgICAgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLFxuICAgICAgICBzdWJtaXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksXG4gICAgICAgIHRhcmdldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpO1xuXG4gICAgZm9ybS5tZXRob2QgPSAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSA9PT0gXCJnZXRcIikgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gICAgZm9ybS5hY3Rpb24gPSB0bztcbiAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgIGlmICh0YXJnZXQpIGZvcm0udGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGVsc2UgaWYgKHRhcmdldE1vZGlmaWVyS2V5KSBmb3JtLnRhcmdldCA9IFwiX2JsYW5rXCI7XG5cbiAgICBmb3JtLmFwcGVuZENoaWxkKGNzcmYpO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQobWV0aG9kKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xuXG4gICAgLy8gSW5zZXJ0IGEgYnV0dG9uIGFuZCBjbGljayBpdCBpbnN0ZWFkIG9mIHVzaW5nIGBmb3JtLnN1Ym1pdGBcbiAgICAvLyBiZWNhdXNlIHRoZSBgc3VibWl0YCBmdW5jdGlvbiBkb2VzIG5vdCBlbWl0IGEgYHN1Ym1pdGAgZXZlbnQuXG4gICAgc3VibWl0LnR5cGUgPSBcInN1Ym1pdFwiO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoc3VibWl0KTtcbiAgICBzdWJtaXQuY2xpY2soKTtcbiAgfVxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuXG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgIHZhciBwaG9lbml4TGlua0V2ZW50ID0gbmV3IFBvbHlmaWxsRXZlbnQoJ3Bob2VuaXgubGluay5jbGljaycsIHtcbiAgICAgICAgXCJidWJibGVzXCI6IHRydWUsIFwiY2FuY2VsYWJsZVwiOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFlbGVtZW50LmRpc3BhdGNoRXZlbnQocGhvZW5peExpbmtFdmVudCkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpKSB7XG4gICAgICAgIGhhbmRsZUNsaWNrKGVsZW1lbnQsIGUubWV0YUtleSB8fCBlLnNoaWZ0S2V5KTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgfSwgZmFsc2UpO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwaG9lbml4LmxpbmsuY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBtZXNzYWdlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb25maXJtXCIpO1xuICAgIGlmKG1lc3NhZ2UgJiYgIXdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG59KSgpO1xuIiwgIi8vIHdyYXBzIHZhbHVlIGluIGNsb3N1cmUgb3IgcmV0dXJucyBjbG9zdXJlXG5leHBvcnQgbGV0IGNsb3N1cmUgPSAodmFsdWUpID0+IHtcbiAgaWYodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpe1xuICAgIHJldHVybiB2YWx1ZVxuICB9IGVsc2Uge1xuICAgIGxldCBjbG9zdXJlID0gZnVuY3Rpb24gKCl7IHJldHVybiB2YWx1ZSB9XG4gICAgcmV0dXJuIGNsb3N1cmVcbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBnbG9iYWxTZWxmID0gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogbnVsbFxuZXhwb3J0IGNvbnN0IHBoeFdpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBudWxsXG5leHBvcnQgY29uc3QgZ2xvYmFsID0gZ2xvYmFsU2VsZiB8fCBwaHhXaW5kb3cgfHwgZ2xvYmFsXG5leHBvcnQgY29uc3QgREVGQVVMVF9WU04gPSBcIjIuMC4wXCJcbmV4cG9ydCBjb25zdCBTT0NLRVRfU1RBVEVTID0ge2Nvbm5lY3Rpbmc6IDAsIG9wZW46IDEsIGNsb3Npbmc6IDIsIGNsb3NlZDogM31cbmV4cG9ydCBjb25zdCBERUZBVUxUX1RJTUVPVVQgPSAxMDAwMFxuZXhwb3J0IGNvbnN0IFdTX0NMT1NFX05PUk1BTCA9IDEwMDBcbmV4cG9ydCBjb25zdCBDSEFOTkVMX1NUQVRFUyA9IHtcbiAgY2xvc2VkOiBcImNsb3NlZFwiLFxuICBlcnJvcmVkOiBcImVycm9yZWRcIixcbiAgam9pbmVkOiBcImpvaW5lZFwiLFxuICBqb2luaW5nOiBcImpvaW5pbmdcIixcbiAgbGVhdmluZzogXCJsZWF2aW5nXCIsXG59XG5leHBvcnQgY29uc3QgQ0hBTk5FTF9FVkVOVFMgPSB7XG4gIGNsb3NlOiBcInBoeF9jbG9zZVwiLFxuICBlcnJvcjogXCJwaHhfZXJyb3JcIixcbiAgam9pbjogXCJwaHhfam9pblwiLFxuICByZXBseTogXCJwaHhfcmVwbHlcIixcbiAgbGVhdmU6IFwicGh4X2xlYXZlXCJcbn1cblxuZXhwb3J0IGNvbnN0IFRSQU5TUE9SVFMgPSB7XG4gIGxvbmdwb2xsOiBcImxvbmdwb2xsXCIsXG4gIHdlYnNvY2tldDogXCJ3ZWJzb2NrZXRcIlxufVxuZXhwb3J0IGNvbnN0IFhIUl9TVEFURVMgPSB7XG4gIGNvbXBsZXRlOiA0XG59XG4iLCAiLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgUHVzaFxuICogQHBhcmFtIHtDaGFubmVsfSBjaGFubmVsIC0gVGhlIENoYW5uZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCAtIFRoZSBldmVudCwgZm9yIGV4YW1wbGUgYFwicGh4X2pvaW5cImBcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkIC0gVGhlIHBheWxvYWQsIGZvciBleGFtcGxlIGB7dXNlcl9pZDogMTIzfWBcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IC0gVGhlIHB1c2ggdGltZW91dCBpbiBtaWxsaXNlY29uZHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHVzaCB7XG4gIGNvbnN0cnVjdG9yKGNoYW5uZWwsIGV2ZW50LCBwYXlsb2FkLCB0aW1lb3V0KXtcbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsXG4gICAgdGhpcy5ldmVudCA9IGV2ZW50XG4gICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZCB8fCBmdW5jdGlvbiAoKXsgcmV0dXJuIHt9IH1cbiAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IG51bGxcbiAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBudWxsXG4gICAgdGhpcy5yZWNIb29rcyA9IFtdXG4gICAgdGhpcy5zZW50ID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZW91dFxuICAgKi9cbiAgcmVzZW5kKHRpbWVvdXQpe1xuICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXRcbiAgICB0aGlzLnJlc2V0KClcbiAgICB0aGlzLnNlbmQoKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBzZW5kKCl7XG4gICAgaWYodGhpcy5oYXNSZWNlaXZlZChcInRpbWVvdXRcIikpeyByZXR1cm4gfVxuICAgIHRoaXMuc3RhcnRUaW1lb3V0KClcbiAgICB0aGlzLnNlbnQgPSB0cnVlXG4gICAgdGhpcy5jaGFubmVsLnNvY2tldC5wdXNoKHtcbiAgICAgIHRvcGljOiB0aGlzLmNoYW5uZWwudG9waWMsXG4gICAgICBldmVudDogdGhpcy5ldmVudCxcbiAgICAgIHBheWxvYWQ6IHRoaXMucGF5bG9hZCgpLFxuICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgIGpvaW5fcmVmOiB0aGlzLmNoYW5uZWwuam9pblJlZigpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHN0YXR1c1xuICAgKiBAcGFyYW0geyp9IGNhbGxiYWNrXG4gICAqL1xuICByZWNlaXZlKHN0YXR1cywgY2FsbGJhY2spe1xuICAgIGlmKHRoaXMuaGFzUmVjZWl2ZWQoc3RhdHVzKSl7XG4gICAgICBjYWxsYmFjayh0aGlzLnJlY2VpdmVkUmVzcC5yZXNwb25zZSlcbiAgICB9XG5cbiAgICB0aGlzLnJlY0hvb2tzLnB1c2goe3N0YXR1cywgY2FsbGJhY2t9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlc2V0KCl7XG4gICAgdGhpcy5jYW5jZWxSZWZFdmVudCgpXG4gICAgdGhpcy5yZWYgPSBudWxsXG4gICAgdGhpcy5yZWZFdmVudCA9IG51bGxcbiAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IG51bGxcbiAgICB0aGlzLnNlbnQgPSBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBtYXRjaFJlY2VpdmUoe3N0YXR1cywgcmVzcG9uc2UsIF9yZWZ9KXtcbiAgICB0aGlzLnJlY0hvb2tzLmZpbHRlcihoID0+IGguc3RhdHVzID09PSBzdGF0dXMpXG4gICAgICAuZm9yRWFjaChoID0+IGguY2FsbGJhY2socmVzcG9uc2UpKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYW5jZWxSZWZFdmVudCgpe1xuICAgIGlmKCF0aGlzLnJlZkV2ZW50KXsgcmV0dXJuIH1cbiAgICB0aGlzLmNoYW5uZWwub2ZmKHRoaXMucmVmRXZlbnQpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNhbmNlbFRpbWVvdXQoKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0VGltZXIpXG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXJ0VGltZW91dCgpe1xuICAgIGlmKHRoaXMudGltZW91dFRpbWVyKXsgdGhpcy5jYW5jZWxUaW1lb3V0KCkgfVxuICAgIHRoaXMucmVmID0gdGhpcy5jaGFubmVsLnNvY2tldC5tYWtlUmVmKClcbiAgICB0aGlzLnJlZkV2ZW50ID0gdGhpcy5jaGFubmVsLnJlcGx5RXZlbnROYW1lKHRoaXMucmVmKVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKHRoaXMucmVmRXZlbnQsIHBheWxvYWQgPT4ge1xuICAgICAgdGhpcy5jYW5jZWxSZWZFdmVudCgpXG4gICAgICB0aGlzLmNhbmNlbFRpbWVvdXQoKVxuICAgICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBwYXlsb2FkXG4gICAgICB0aGlzLm1hdGNoUmVjZWl2ZShwYXlsb2FkKVxuICAgIH0pXG5cbiAgICB0aGlzLnRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKFwidGltZW91dFwiLCB7fSlcbiAgICB9LCB0aGlzLnRpbWVvdXQpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhc1JlY2VpdmVkKHN0YXR1cyl7XG4gICAgcmV0dXJuIHRoaXMucmVjZWl2ZWRSZXNwICYmIHRoaXMucmVjZWl2ZWRSZXNwLnN0YXR1cyA9PT0gc3RhdHVzXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRyaWdnZXIoc3RhdHVzLCByZXNwb25zZSl7XG4gICAgdGhpcy5jaGFubmVsLnRyaWdnZXIodGhpcy5yZWZFdmVudCwge3N0YXR1cywgcmVzcG9uc2V9KVxuICB9XG59XG4iLCAiLyoqXG4gKlxuICogQ3JlYXRlcyBhIHRpbWVyIHRoYXQgYWNjZXB0cyBhIGB0aW1lckNhbGNgIGZ1bmN0aW9uIHRvIHBlcmZvcm1cbiAqIGNhbGN1bGF0ZWQgdGltZW91dCByZXRyaWVzLCBzdWNoIGFzIGV4cG9uZW50aWFsIGJhY2tvZmYuXG4gKlxuICogQGV4YW1wbGVcbiAqIGxldCByZWNvbm5lY3RUaW1lciA9IG5ldyBUaW1lcigoKSA9PiB0aGlzLmNvbm5lY3QoKSwgZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwMDAsIDUwMDAsIDEwMDAwXVt0cmllcyAtIDFdIHx8IDEwMDAwXG4gKiB9KVxuICogcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgMTAwMFxuICogcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgNTAwMFxuICogcmVjb25uZWN0VGltZXIucmVzZXQoKVxuICogcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgMTAwMFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0aW1lckNhbGNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIge1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjaywgdGltZXJDYWxjKXtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICB0aGlzLnRpbWVyQ2FsYyA9IHRpbWVyQ2FsY1xuICAgIHRoaXMudGltZXIgPSBudWxsXG4gICAgdGhpcy50cmllcyA9IDBcbiAgfVxuXG4gIHJlc2V0KCl7XG4gICAgdGhpcy50cmllcyA9IDBcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcilcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGFueSBwcmV2aW91cyBzY2hlZHVsZVRpbWVvdXQgYW5kIHNjaGVkdWxlcyBjYWxsYmFja1xuICAgKi9cbiAgc2NoZWR1bGVUaW1lb3V0KCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpXG5cbiAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnRyaWVzID0gdGhpcy50cmllcyArIDFcbiAgICAgIHRoaXMuY2FsbGJhY2soKVxuICAgIH0sIHRoaXMudGltZXJDYWxjKHRoaXMudHJpZXMgKyAxKSlcbiAgfVxufVxuIiwgImltcG9ydCB7Y2xvc3VyZX0gZnJvbSBcIi4vdXRpbHNcIlxuaW1wb3J0IHtcbiAgQ0hBTk5FTF9FVkVOVFMsXG4gIENIQU5ORUxfU1RBVEVTLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgUHVzaCBmcm9tIFwiLi9wdXNoXCJcbmltcG9ydCBUaW1lciBmcm9tIFwiLi90aW1lclwiXG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xuICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKX0gcGFyYW1zXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYW5uZWwge1xuICBjb25zdHJ1Y3Rvcih0b3BpYywgcGFyYW1zLCBzb2NrZXQpe1xuICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5jbG9zZWRcbiAgICB0aGlzLnRvcGljID0gdG9waWNcbiAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUocGFyYW1zIHx8IHt9KVxuICAgIHRoaXMuc29ja2V0ID0gc29ja2V0XG4gICAgdGhpcy5iaW5kaW5ncyA9IFtdXG4gICAgdGhpcy5iaW5kaW5nUmVmID0gMFxuICAgIHRoaXMudGltZW91dCA9IHRoaXMuc29ja2V0LnRpbWVvdXRcbiAgICB0aGlzLmpvaW5lZE9uY2UgPSBmYWxzZVxuICAgIHRoaXMuam9pblB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5qb2luLCB0aGlzLnBhcmFtcywgdGhpcy50aW1lb3V0KVxuICAgIHRoaXMucHVzaEJ1ZmZlciA9IFtdXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMgPSBbXVxuXG4gICAgdGhpcy5yZWpvaW5UaW1lciA9IG5ldyBUaW1lcigoKSA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW4oKSB9XG4gICAgfSwgdGhpcy5zb2NrZXQucmVqb2luQWZ0ZXJNcylcbiAgICB0aGlzLnN0YXRlQ2hhbmdlUmVmcy5wdXNoKHRoaXMuc29ja2V0Lm9uRXJyb3IoKCkgPT4gdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpKSlcbiAgICB0aGlzLnN0YXRlQ2hhbmdlUmVmcy5wdXNoKHRoaXMuc29ja2V0Lm9uT3BlbigoKSA9PiB7XG4gICAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICAgIGlmKHRoaXMuaXNFcnJvcmVkKCkpeyB0aGlzLnJlam9pbigpIH1cbiAgICB9KVxuICAgIClcbiAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoXCJva1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuam9pbmVkXG4gICAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICAgIHRoaXMucHVzaEJ1ZmZlci5mb3JFYWNoKHB1c2hFdmVudCA9PiBwdXNoRXZlbnQuc2VuZCgpKVxuICAgICAgdGhpcy5wdXNoQnVmZmVyID0gW11cbiAgICB9KVxuICAgIHRoaXMuam9pblB1c2gucmVjZWl2ZShcImVycm9yXCIsICgpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkXG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKSB9XG4gICAgfSlcbiAgICB0aGlzLm9uQ2xvc2UoKCkgPT4ge1xuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgY2xvc2UgJHt0aGlzLnRvcGljfSAke3RoaXMuam9pblJlZigpfWApXG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkXG4gICAgICB0aGlzLnNvY2tldC5yZW1vdmUodGhpcylcbiAgICB9KVxuICAgIHRoaXMub25FcnJvcihyZWFzb24gPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYGVycm9yICR7dGhpcy50b3BpY31gLCByZWFzb24pXG4gICAgICBpZih0aGlzLmlzSm9pbmluZygpKXsgdGhpcy5qb2luUHVzaC5yZXNldCgpIH1cbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkXG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKSB9XG4gICAgfSlcbiAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGB0aW1lb3V0ICR7dGhpcy50b3BpY30gKCR7dGhpcy5qb2luUmVmKCl9KWAsIHRoaXMuam9pblB1c2gudGltZW91dClcbiAgICAgIGxldCBsZWF2ZVB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5sZWF2ZSwgY2xvc3VyZSh7fSksIHRoaXMudGltZW91dClcbiAgICAgIGxlYXZlUHVzaC5zZW5kKClcbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkXG4gICAgICB0aGlzLmpvaW5QdXNoLnJlc2V0KClcbiAgICAgIGlmKHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLnJlam9pblRpbWVyLnNjaGVkdWxlVGltZW91dCgpIH1cbiAgICB9KVxuICAgIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMucmVwbHksIChwYXlsb2FkLCByZWYpID0+IHtcbiAgICAgIHRoaXMudHJpZ2dlcih0aGlzLnJlcGx5RXZlbnROYW1lKHJlZiksIHBheWxvYWQpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBKb2luIHRoZSBjaGFubmVsXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gdGltZW91dFxuICAgKiBAcmV0dXJucyB7UHVzaH1cbiAgICovXG4gIGpvaW4odGltZW91dCA9IHRoaXMudGltZW91dCl7XG4gICAgaWYodGhpcy5qb2luZWRPbmNlKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInRyaWVkIHRvIGpvaW4gbXVsdGlwbGUgdGltZXMuICdqb2luJyBjYW4gb25seSBiZSBjYWxsZWQgYSBzaW5nbGUgdGltZSBwZXIgY2hhbm5lbCBpbnN0YW5jZVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgICB0aGlzLmpvaW5lZE9uY2UgPSB0cnVlXG4gICAgICB0aGlzLnJlam9pbigpXG4gICAgICByZXR1cm4gdGhpcy5qb2luUHVzaFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIb29rIGludG8gY2hhbm5lbCBjbG9zZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZShjYWxsYmFjayl7XG4gICAgdGhpcy5vbihDSEFOTkVMX0VWRU5UUy5jbG9zZSwgY2FsbGJhY2spXG4gIH1cblxuICAvKipcbiAgICogSG9vayBpbnRvIGNoYW5uZWwgZXJyb3JzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkVycm9yKGNhbGxiYWNrKXtcbiAgICByZXR1cm4gdGhpcy5vbihDSEFOTkVMX0VWRU5UUy5lcnJvciwgcmVhc29uID0+IGNhbGxiYWNrKHJlYXNvbikpXG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlcyBvbiBjaGFubmVsIGV2ZW50c1xuICAgKlxuICAgKiBTdWJzY3JpcHRpb24gcmV0dXJucyBhIHJlZiBjb3VudGVyLCB3aGljaCBjYW4gYmUgdXNlZCBsYXRlciB0b1xuICAgKiB1bnN1YnNjcmliZSB0aGUgZXhhY3QgZXZlbnQgbGlzdGVuZXJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgcmVmMSA9IGNoYW5uZWwub24oXCJldmVudFwiLCBkb19zdHVmZilcbiAgICogY29uc3QgcmVmMiA9IGNoYW5uZWwub24oXCJldmVudFwiLCBkb19vdGhlcl9zdHVmZilcbiAgICogY2hhbm5lbC5vZmYoXCJldmVudFwiLCByZWYxKVxuICAgKiAvLyBTaW5jZSB1bnN1YnNjcmlwdGlvbiwgZG9fc3R1ZmYgd29uJ3QgZmlyZSxcbiAgICogLy8gd2hpbGUgZG9fb3RoZXJfc3R1ZmYgd2lsbCBrZWVwIGZpcmluZyBvbiB0aGUgXCJldmVudFwiXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB7aW50ZWdlcn0gcmVmXG4gICAqL1xuICBvbihldmVudCwgY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLmJpbmRpbmdSZWYrK1xuICAgIHRoaXMuYmluZGluZ3MucHVzaCh7ZXZlbnQsIHJlZiwgY2FsbGJhY2t9KVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZXMgb2ZmIG9mIGNoYW5uZWwgZXZlbnRzXG4gICAqXG4gICAqIFVzZSB0aGUgcmVmIHJldHVybmVkIGZyb20gYSBjaGFubmVsLm9uKCkgdG8gdW5zdWJzY3JpYmUgb25lXG4gICAqIGhhbmRsZXIsIG9yIHBhc3Mgbm90aGluZyBmb3IgdGhlIHJlZiB0byB1bnN1YnNjcmliZSBhbGxcbiAgICogaGFuZGxlcnMgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gVW5zdWJzY3JpYmUgdGhlIGRvX3N0dWZmIGhhbmRsZXJcbiAgICogY29uc3QgcmVmMSA9IGNoYW5uZWwub24oXCJldmVudFwiLCBkb19zdHVmZilcbiAgICogY2hhbm5lbC5vZmYoXCJldmVudFwiLCByZWYxKVxuICAgKlxuICAgKiAvLyBVbnN1YnNjcmliZSBhbGwgaGFuZGxlcnMgZnJvbSBldmVudFxuICAgKiBjaGFubmVsLm9mZihcImV2ZW50XCIpXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHJlZlxuICAgKi9cbiAgb2ZmKGV2ZW50LCByZWYpe1xuICAgIHRoaXMuYmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmZpbHRlcigoYmluZCkgPT4ge1xuICAgICAgcmV0dXJuICEoYmluZC5ldmVudCA9PT0gZXZlbnQgJiYgKHR5cGVvZiByZWYgPT09IFwidW5kZWZpbmVkXCIgfHwgcmVmID09PSBiaW5kLnJlZikpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FuUHVzaCgpeyByZXR1cm4gdGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSAmJiB0aGlzLmlzSm9pbmVkKCkgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIG1lc3NhZ2UgYGV2ZW50YCB0byBwaG9lbml4IHdpdGggdGhlIHBheWxvYWQgYHBheWxvYWRgLlxuICAgKiBQaG9lbml4IHJlY2VpdmVzIHRoaXMgaW4gdGhlIGBoYW5kbGVfaW4oZXZlbnQsIHBheWxvYWQsIHNvY2tldClgXG4gICAqIGZ1bmN0aW9uLiBpZiBwaG9lbml4IHJlcGxpZXMgb3IgaXQgdGltZXMgb3V0IChkZWZhdWx0IDEwMDAwbXMpLFxuICAgKiB0aGVuIG9wdGlvbmFsbHkgdGhlIHJlcGx5IGNhbiBiZSByZWNlaXZlZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY2hhbm5lbC5wdXNoKFwiZXZlbnRcIilcbiAgICogICAucmVjZWl2ZShcIm9rXCIsIHBheWxvYWQgPT4gY29uc29sZS5sb2coXCJwaG9lbml4IHJlcGxpZWQ6XCIsIHBheWxvYWQpKVxuICAgKiAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgZXJyID0+IGNvbnNvbGUubG9nKFwicGhvZW5peCBlcnJvcmVkXCIsIGVycikpXG4gICAqICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IGNvbnNvbGUubG9nKFwidGltZWQgb3V0IHB1c2hpbmdcIikpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3RpbWVvdXRdXG4gICAqIEByZXR1cm5zIHtQdXNofVxuICAgKi9cbiAgcHVzaChldmVudCwgcGF5bG9hZCwgdGltZW91dCA9IHRoaXMudGltZW91dCl7XG4gICAgcGF5bG9hZCA9IHBheWxvYWQgfHwge31cbiAgICBpZighdGhpcy5qb2luZWRPbmNlKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdHJpZWQgdG8gcHVzaCAnJHtldmVudH0nIHRvICcke3RoaXMudG9waWN9JyBiZWZvcmUgam9pbmluZy4gVXNlIGNoYW5uZWwuam9pbigpIGJlZm9yZSBwdXNoaW5nIGV2ZW50c2ApXG4gICAgfVxuICAgIGxldCBwdXNoRXZlbnQgPSBuZXcgUHVzaCh0aGlzLCBldmVudCwgZnVuY3Rpb24gKCl7IHJldHVybiBwYXlsb2FkIH0sIHRpbWVvdXQpXG4gICAgaWYodGhpcy5jYW5QdXNoKCkpe1xuICAgICAgcHVzaEV2ZW50LnNlbmQoKVxuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoRXZlbnQuc3RhcnRUaW1lb3V0KClcbiAgICAgIHRoaXMucHVzaEJ1ZmZlci5wdXNoKHB1c2hFdmVudClcbiAgICB9XG5cbiAgICByZXR1cm4gcHVzaEV2ZW50XG4gIH1cblxuICAvKiogTGVhdmVzIHRoZSBjaGFubmVsXG4gICAqXG4gICAqIFVuc3Vic2NyaWJlcyBmcm9tIHNlcnZlciBldmVudHMsIGFuZFxuICAgKiBpbnN0cnVjdHMgY2hhbm5lbCB0byB0ZXJtaW5hdGUgb24gc2VydmVyXG4gICAqXG4gICAqIFRyaWdnZXJzIG9uQ2xvc2UoKSBob29rc1xuICAgKlxuICAgKiBUbyByZWNlaXZlIGxlYXZlIGFja25vd2xlZGdlbWVudHMsIHVzZSB0aGUgYHJlY2VpdmVgXG4gICAqIGhvb2sgdG8gYmluZCB0byB0aGUgc2VydmVyIGFjaywgaWU6XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNoYW5uZWwubGVhdmUoKS5yZWNlaXZlKFwib2tcIiwgKCkgPT4gYWxlcnQoXCJsZWZ0IVwiKSApXG4gICAqXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gdGltZW91dFxuICAgKiBAcmV0dXJucyB7UHVzaH1cbiAgICovXG4gIGxlYXZlKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgIHRoaXMuam9pblB1c2guY2FuY2VsVGltZW91dCgpXG5cbiAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMubGVhdmluZ1xuICAgIGxldCBvbkNsb3NlID0gKCkgPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYGxlYXZlICR7dGhpcy50b3BpY31gKVxuICAgICAgdGhpcy50cmlnZ2VyKENIQU5ORUxfRVZFTlRTLmNsb3NlLCBcImxlYXZlXCIpXG4gICAgfVxuICAgIGxldCBsZWF2ZVB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5sZWF2ZSwgY2xvc3VyZSh7fSksIHRpbWVvdXQpXG4gICAgbGVhdmVQdXNoLnJlY2VpdmUoXCJva1wiLCAoKSA9PiBvbkNsb3NlKCkpXG4gICAgICAucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4gb25DbG9zZSgpKVxuICAgIGxlYXZlUHVzaC5zZW5kKClcbiAgICBpZighdGhpcy5jYW5QdXNoKCkpeyBsZWF2ZVB1c2gudHJpZ2dlcihcIm9rXCIsIHt9KSB9XG5cbiAgICByZXR1cm4gbGVhdmVQdXNoXG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGFibGUgbWVzc2FnZSBob29rXG4gICAqXG4gICAqIFJlY2VpdmVzIGFsbCBldmVudHMgZm9yIHNwZWNpYWxpemVkIG1lc3NhZ2UgaGFuZGxpbmdcbiAgICogYmVmb3JlIGRpc3BhdGNoaW5nIHRvIHRoZSBjaGFubmVsIGNhbGxiYWNrcy5cbiAgICpcbiAgICogTXVzdCByZXR1cm4gdGhlIHBheWxvYWQsIG1vZGlmaWVkIG9yIHVubW9kaWZpZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gcmVmXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBvbk1lc3NhZ2UoX2V2ZW50LCBwYXlsb2FkLCBfcmVmKXsgcmV0dXJuIHBheWxvYWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNNZW1iZXIodG9waWMsIGV2ZW50LCBwYXlsb2FkLCBqb2luUmVmKXtcbiAgICBpZih0aGlzLnRvcGljICE9PSB0b3BpYyl7IHJldHVybiBmYWxzZSB9XG5cbiAgICBpZihqb2luUmVmICYmIGpvaW5SZWYgIT09IHRoaXMuam9pblJlZigpKXtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIFwiZHJvcHBpbmcgb3V0ZGF0ZWQgbWVzc2FnZVwiLCB7dG9waWMsIGV2ZW50LCBwYXlsb2FkLCBqb2luUmVmfSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgam9pblJlZigpeyByZXR1cm4gdGhpcy5qb2luUHVzaC5yZWYgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVqb2luKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIGlmKHRoaXMuaXNMZWF2aW5nKCkpeyByZXR1cm4gfVxuICAgIHRoaXMuc29ja2V0LmxlYXZlT3BlblRvcGljKHRoaXMudG9waWMpXG4gICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmpvaW5pbmdcbiAgICB0aGlzLmpvaW5QdXNoLnJlc2VuZCh0aW1lb3V0KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyKGV2ZW50LCBwYXlsb2FkLCByZWYsIGpvaW5SZWYpe1xuICAgIGxldCBoYW5kbGVkUGF5bG9hZCA9IHRoaXMub25NZXNzYWdlKGV2ZW50LCBwYXlsb2FkLCByZWYsIGpvaW5SZWYpXG4gICAgaWYocGF5bG9hZCAmJiAhaGFuZGxlZFBheWxvYWQpeyB0aHJvdyBuZXcgRXJyb3IoXCJjaGFubmVsIG9uTWVzc2FnZSBjYWxsYmFja3MgbXVzdCByZXR1cm4gdGhlIHBheWxvYWQsIG1vZGlmaWVkIG9yIHVubW9kaWZpZWRcIikgfVxuXG4gICAgbGV0IGV2ZW50QmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmZpbHRlcihiaW5kID0+IGJpbmQuZXZlbnQgPT09IGV2ZW50KVxuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGV2ZW50QmluZGluZ3MubGVuZ3RoOyBpKyspe1xuICAgICAgbGV0IGJpbmQgPSBldmVudEJpbmRpbmdzW2ldXG4gICAgICBiaW5kLmNhbGxiYWNrKGhhbmRsZWRQYXlsb2FkLCByZWYsIGpvaW5SZWYgfHwgdGhpcy5qb2luUmVmKCkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZXBseUV2ZW50TmFtZShyZWYpeyByZXR1cm4gYGNoYW5fcmVwbHlfJHtyZWZ9YCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0Nsb3NlZCgpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzRXJyb3JlZCgpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0pvaW5lZCgpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuam9pbmVkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzSm9pbmluZygpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuam9pbmluZyB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0xlYXZpbmcoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmxlYXZpbmcgfVxufVxuIiwgImltcG9ydCB7XG4gIGdsb2JhbCxcbiAgWEhSX1NUQVRFU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBamF4IHtcblxuICBzdGF0aWMgcmVxdWVzdChtZXRob2QsIGVuZFBvaW50LCBhY2NlcHQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spe1xuICAgIGlmKGdsb2JhbC5YRG9tYWluUmVxdWVzdCl7XG4gICAgICBsZXQgcmVxID0gbmV3IGdsb2JhbC5YRG9tYWluUmVxdWVzdCgpIC8vIElFOCwgSUU5XG4gICAgICByZXR1cm4gdGhpcy54ZG9tYWluUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCByZXEgPSBuZXcgZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KCkgLy8gSUU3KywgRmlyZWZveCwgQ2hyb21lLCBPcGVyYSwgU2FmYXJpXG4gICAgICByZXR1cm4gdGhpcy54aHJSZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB4ZG9tYWluUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spe1xuICAgIHJlcS50aW1lb3V0ID0gdGltZW91dFxuICAgIHJlcS5vcGVuKG1ldGhvZCwgZW5kUG9pbnQpXG4gICAgcmVxLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGxldCByZXNwb25zZSA9IHRoaXMucGFyc2VKU09OKHJlcS5yZXNwb25zZVRleHQpXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwb25zZSlcbiAgICB9XG4gICAgaWYob250aW1lb3V0KXsgcmVxLm9udGltZW91dCA9IG9udGltZW91dCB9XG5cbiAgICAvLyBXb3JrIGFyb3VuZCBidWcgaW4gSUU5IHRoYXQgcmVxdWlyZXMgYW4gYXR0YWNoZWQgb25wcm9ncmVzcyBoYW5kbGVyXG4gICAgcmVxLm9ucHJvZ3Jlc3MgPSAoKSA9PiB7IH1cblxuICAgIHJlcS5zZW5kKGJvZHkpXG4gICAgcmV0dXJuIHJlcVxuICB9XG5cbiAgc3RhdGljIHhoclJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBhY2NlcHQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spe1xuICAgIHJlcS5vcGVuKG1ldGhvZCwgZW5kUG9pbnQsIHRydWUpXG4gICAgcmVxLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgYWNjZXB0KVxuICAgIHJlcS5vbmVycm9yID0gKCkgPT4gY2FsbGJhY2sgJiYgY2FsbGJhY2sobnVsbClcbiAgICByZXEub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgaWYocmVxLnJlYWR5U3RhdGUgPT09IFhIUl9TVEFURVMuY29tcGxldGUgJiYgY2FsbGJhY2spe1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSB0aGlzLnBhcnNlSlNPTihyZXEucmVzcG9uc2VUZXh0KVxuICAgICAgICBjYWxsYmFjayhyZXNwb25zZSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYob250aW1lb3V0KXsgcmVxLm9udGltZW91dCA9IG9udGltZW91dCB9XG5cbiAgICByZXEuc2VuZChib2R5KVxuICAgIHJldHVybiByZXFcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUpTT04ocmVzcCl7XG4gICAgaWYoIXJlc3AgfHwgcmVzcCA9PT0gXCJcIil7IHJldHVybiBudWxsIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwKVxuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgY29uc29sZSAmJiBjb25zb2xlLmxvZyhcImZhaWxlZCB0byBwYXJzZSBKU09OIHJlc3BvbnNlXCIsIHJlc3ApXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBzZXJpYWxpemUob2JqLCBwYXJlbnRLZXkpe1xuICAgIGxldCBxdWVyeVN0ciA9IFtdXG4gICAgZm9yKHZhciBrZXkgaW4gb2JqKXtcbiAgICAgIGlmKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKXsgY29udGludWUgfVxuICAgICAgbGV0IHBhcmFtS2V5ID0gcGFyZW50S2V5ID8gYCR7cGFyZW50S2V5fVske2tleX1dYCA6IGtleVxuICAgICAgbGV0IHBhcmFtVmFsID0gb2JqW2tleV1cbiAgICAgIGlmKHR5cGVvZiBwYXJhbVZhbCA9PT0gXCJvYmplY3RcIil7XG4gICAgICAgIHF1ZXJ5U3RyLnB1c2godGhpcy5zZXJpYWxpemUocGFyYW1WYWwsIHBhcmFtS2V5KSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXJ5U3RyLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtS2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtVmFsKSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHF1ZXJ5U3RyLmpvaW4oXCImXCIpXG4gIH1cblxuICBzdGF0aWMgYXBwZW5kUGFyYW1zKHVybCwgcGFyYW1zKXtcbiAgICBpZihPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCA9PT0gMCl7IHJldHVybiB1cmwgfVxuXG4gICAgbGV0IHByZWZpeCA9IHVybC5tYXRjaCgvXFw/LykgPyBcIiZcIiA6IFwiP1wiXG4gICAgcmV0dXJuIGAke3VybH0ke3ByZWZpeH0ke3RoaXMuc2VyaWFsaXplKHBhcmFtcyl9YFxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgU09DS0VUX1NUQVRFUyxcbiAgVFJBTlNQT1JUU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgQWpheCBmcm9tIFwiLi9hamF4XCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9uZ1BvbGwge1xuXG4gIGNvbnN0cnVjdG9yKGVuZFBvaW50KXtcbiAgICB0aGlzLmVuZFBvaW50ID0gbnVsbFxuICAgIHRoaXMudG9rZW4gPSBudWxsXG4gICAgdGhpcy5za2lwSGVhcnRiZWF0ID0gdHJ1ZVxuICAgIHRoaXMucmVxcyA9IG5ldyBTZXQoKVxuICAgIHRoaXMuYXdhaXRpbmdCYXRjaEFjayA9IGZhbHNlXG4gICAgdGhpcy5jdXJyZW50QmF0Y2ggPSBudWxsXG4gICAgdGhpcy5jdXJyZW50QmF0Y2hUaW1lciA9IG51bGxcbiAgICB0aGlzLmJhdGNoQnVmZmVyID0gW11cbiAgICB0aGlzLm9ub3BlbiA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICB0aGlzLm9uZXJyb3IgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbmNsb3NlID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMucG9sbEVuZHBvaW50ID0gdGhpcy5ub3JtYWxpemVFbmRwb2ludChlbmRQb2ludClcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmdcbiAgICB0aGlzLnBvbGwoKVxuICB9XG5cbiAgbm9ybWFsaXplRW5kcG9pbnQoZW5kUG9pbnQpe1xuICAgIHJldHVybiAoZW5kUG9pbnRcbiAgICAgIC5yZXBsYWNlKFwid3M6Ly9cIiwgXCJodHRwOi8vXCIpXG4gICAgICAucmVwbGFjZShcIndzczovL1wiLCBcImh0dHBzOi8vXCIpXG4gICAgICAucmVwbGFjZShuZXcgUmVnRXhwKFwiKC4qKVxcL1wiICsgVFJBTlNQT1JUUy53ZWJzb2NrZXQpLCBcIiQxL1wiICsgVFJBTlNQT1JUUy5sb25ncG9sbCkpXG4gIH1cblxuICBlbmRwb2ludFVSTCgpe1xuICAgIHJldHVybiBBamF4LmFwcGVuZFBhcmFtcyh0aGlzLnBvbGxFbmRwb2ludCwge3Rva2VuOiB0aGlzLnRva2VufSlcbiAgfVxuXG4gIGNsb3NlQW5kUmV0cnkoY29kZSwgcmVhc29uLCB3YXNDbGVhbil7XG4gICAgdGhpcy5jbG9zZShjb2RlLCByZWFzb24sIHdhc0NsZWFuKVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZ1xuICB9XG5cbiAgb250aW1lb3V0KCl7XG4gICAgdGhpcy5vbmVycm9yKFwidGltZW91dFwiKVxuICAgIHRoaXMuY2xvc2VBbmRSZXRyeSgxMDA1LCBcInRpbWVvdXRcIiwgZmFsc2UpXG4gIH1cblxuICBpc0FjdGl2ZSgpeyByZXR1cm4gdGhpcy5yZWFkeVN0YXRlID09PSBTT0NLRVRfU1RBVEVTLm9wZW4gfHwgdGhpcy5yZWFkeVN0YXRlID09PSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmcgfVxuXG4gIHBvbGwoKXtcbiAgICB0aGlzLmFqYXgoXCJHRVRcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIG51bGwsICgpID0+IHRoaXMub250aW1lb3V0KCksIHJlc3AgPT4ge1xuICAgICAgaWYocmVzcCl7XG4gICAgICAgIHZhciB7c3RhdHVzLCB0b2tlbiwgbWVzc2FnZXN9ID0gcmVzcFxuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXR1cyA9IDBcbiAgICAgIH1cblxuICAgICAgc3dpdGNoKHN0YXR1cyl7XG4gICAgICAgIGNhc2UgMjAwOlxuICAgICAgICAgIG1lc3NhZ2VzLmZvckVhY2gobXNnID0+IHtcbiAgICAgICAgICAgIC8vIFRhc2tzIGFyZSB3aGF0IHRoaW5ncyBsaWtlIGV2ZW50IGhhbmRsZXJzLCBzZXRUaW1lb3V0IGNhbGxiYWNrcyxcbiAgICAgICAgICAgIC8vIHByb21pc2UgcmVzb2x2ZXMgYW5kIG1vcmUgYXJlIHJ1biB3aXRoaW4uXG4gICAgICAgICAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMsIHRoZXJlIGFyZSB0d28gZGlmZmVyZW50IGtpbmRzIG9mIHRhc2tzLFxuICAgICAgICAgICAgLy8gbWljcm90YXNrcyBhbmQgbWFjcm90YXNrcy5cbiAgICAgICAgICAgIC8vIE1pY3JvdGFza3MgYXJlIG1haW5seSB1c2VkIGZvciBQcm9taXNlcywgd2hpbGUgbWFjcm90YXNrcyBhcmVcbiAgICAgICAgICAgIC8vIHVzZWQgZm9yIGV2ZXJ5dGhpbmcgZWxzZS5cbiAgICAgICAgICAgIC8vIE1pY3JvdGFza3MgYWx3YXlzIGhhdmUgcHJpb3JpdHkgb3ZlciBtYWNyb3Rhc2tzLiBJZiB0aGUgSlMgZW5naW5lXG4gICAgICAgICAgICAvLyBpcyBsb29raW5nIGZvciBhIHRhc2sgdG8gcnVuLCBpdCB3aWxsIGFsd2F5cyB0cnkgdG8gZW1wdHkgdGhlXG4gICAgICAgICAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcnVuIGFueXRoaW5nIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBtYWNyb3Rhc2sgcXVldWUuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gRm9yIHRoZSBXZWJTb2NrZXQgdHJhbnNwb3J0LCBtZXNzYWdlcyBhbHdheXMgYXJyaXZlIGluIHRoZWlyIG93blxuICAgICAgICAgICAgLy8gZXZlbnQuIFRoaXMgbWVhbnMgdGhhdCBpZiBhbnkgcHJvbWlzZXMgYXJlIHJlc29sdmVkIGZyb20gd2l0aGluLFxuICAgICAgICAgICAgLy8gdGhlaXIgY2FsbGJhY2tzIHdpbGwgYWx3YXlzIGZpbmlzaCBleGVjdXRpb24gYnkgdGhlIHRpbWUgdGhlXG4gICAgICAgICAgICAvLyBuZXh0IG1lc3NhZ2UgZXZlbnQgaGFuZGxlciBpcyBydW4uXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8gZW11bGF0ZSB0aGlzIGJlaGF2aW91ciwgd2UgbmVlZCB0byBtYWtlIHN1cmUgZWFjaFxuICAgICAgICAgICAgLy8gb25tZXNzYWdlIGhhbmRsZXIgaXMgcnVuIHdpdGhpbiBpdHMgb3duIG1hY3JvdGFzay5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5vbm1lc3NhZ2Uoe2RhdGE6IG1zZ30pLCAwKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5wb2xsKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDIwNDpcbiAgICAgICAgICB0aGlzLnBvbGwoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDEwOlxuICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNPQ0tFVF9TVEFURVMub3BlblxuICAgICAgICAgIHRoaXMub25vcGVuKHt9KVxuICAgICAgICAgIHRoaXMucG9sbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0MDM6XG4gICAgICAgICAgdGhpcy5vbmVycm9yKDQwMylcbiAgICAgICAgICB0aGlzLmNsb3NlKDEwMDgsIFwiZm9yYmlkZGVuXCIsIGZhbHNlKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSA1MDA6XG4gICAgICAgICAgdGhpcy5vbmVycm9yKDUwMClcbiAgICAgICAgICB0aGlzLmNsb3NlQW5kUmV0cnkoMTAxMSwgXCJpbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIiwgNTAwKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgdW5oYW5kbGVkIHBvbGwgc3RhdHVzICR7c3RhdHVzfWApXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHdlIGNvbGxlY3QgYWxsIHB1c2hlcyB3aXRoaW4gdGhlIGN1cnJlbnQgZXZlbnQgbG9vcCBieVxuICAvLyBzZXRUaW1lb3V0IDAsIHdoaWNoIG9wdGltaXplcyBiYWNrLXRvLWJhY2sgcHJvY2VkdXJhbFxuICAvLyBwdXNoZXMgYWdhaW5zdCBhbiBlbXB0eSBidWZmZXJcbiAgc2VuZChib2R5KXtcbiAgICBpZih0aGlzLmN1cnJlbnRCYXRjaCl7XG4gICAgICB0aGlzLmN1cnJlbnRCYXRjaC5wdXNoKGJvZHkpXG4gICAgfSBlbHNlIGlmKHRoaXMuYXdhaXRpbmdCYXRjaEFjayl7XG4gICAgICB0aGlzLmJhdGNoQnVmZmVyLnB1c2goYm9keSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJyZW50QmF0Y2ggPSBbYm9keV1cbiAgICAgIHRoaXMuY3VycmVudEJhdGNoVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5iYXRjaFNlbmQodGhpcy5jdXJyZW50QmF0Y2gpXG4gICAgICAgIHRoaXMuY3VycmVudEJhdGNoID0gbnVsbFxuICAgICAgfSwgMClcbiAgICB9XG4gIH1cblxuICBiYXRjaFNlbmQobWVzc2FnZXMpe1xuICAgIHRoaXMuYXdhaXRpbmdCYXRjaEFjayA9IHRydWVcbiAgICB0aGlzLmFqYXgoXCJQT1NUXCIsIFwiYXBwbGljYXRpb24veC1uZGpzb25cIiwgbWVzc2FnZXMuam9pbihcIlxcblwiKSwgKCkgPT4gdGhpcy5vbmVycm9yKFwidGltZW91dFwiKSwgcmVzcCA9PiB7XG4gICAgICB0aGlzLmF3YWl0aW5nQmF0Y2hBY2sgPSBmYWxzZVxuICAgICAgaWYoIXJlc3AgfHwgcmVzcC5zdGF0dXMgIT09IDIwMCl7XG4gICAgICAgIHRoaXMub25lcnJvcihyZXNwICYmIHJlc3Auc3RhdHVzKVxuICAgICAgICB0aGlzLmNsb3NlQW5kUmV0cnkoMTAxMSwgXCJpbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIiwgZmFsc2UpXG4gICAgICB9IGVsc2UgaWYodGhpcy5iYXRjaEJ1ZmZlci5sZW5ndGggPiAwKXtcbiAgICAgICAgdGhpcy5iYXRjaFNlbmQodGhpcy5iYXRjaEJ1ZmZlcilcbiAgICAgICAgdGhpcy5iYXRjaEJ1ZmZlciA9IFtdXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNsb3NlKGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4pe1xuICAgIGZvcihsZXQgcmVxIG9mIHRoaXMucmVxcyl7IHJlcS5hYm9ydCgpIH1cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNsb3NlZFxuICAgIGxldCBvcHRzID0gT2JqZWN0LmFzc2lnbih7Y29kZTogMTAwMCwgcmVhc29uOiB1bmRlZmluZWQsIHdhc0NsZWFuOiB0cnVlfSwge2NvZGUsIHJlYXNvbiwgd2FzQ2xlYW59KVxuICAgIHRoaXMuYmF0Y2hCdWZmZXIgPSBbXVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmN1cnJlbnRCYXRjaFRpbWVyKVxuICAgIHRoaXMuY3VycmVudEJhdGNoVGltZXIgPSBudWxsXG4gICAgaWYodHlwZW9mKENsb3NlRXZlbnQpICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgIHRoaXMub25jbG9zZShuZXcgQ2xvc2VFdmVudChcImNsb3NlXCIsIG9wdHMpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uY2xvc2Uob3B0cylcbiAgICB9XG4gIH1cblxuICBhamF4KG1ldGhvZCwgY29udGVudFR5cGUsIGJvZHksIG9uQ2FsbGVyVGltZW91dCwgY2FsbGJhY2spe1xuICAgIGxldCByZXFcbiAgICBsZXQgb250aW1lb3V0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZXFzLmRlbGV0ZShyZXEpXG4gICAgICBvbkNhbGxlclRpbWVvdXQoKVxuICAgIH1cbiAgICByZXEgPSBBamF4LnJlcXVlc3QobWV0aG9kLCB0aGlzLmVuZHBvaW50VVJMKCksIGNvbnRlbnRUeXBlLCBib2R5LCB0aGlzLnRpbWVvdXQsIG9udGltZW91dCwgcmVzcCA9PiB7XG4gICAgICB0aGlzLnJlcXMuZGVsZXRlKHJlcSlcbiAgICAgIGlmKHRoaXMuaXNBY3RpdmUoKSl7IGNhbGxiYWNrKHJlc3ApIH1cbiAgICB9KVxuICAgIHRoaXMucmVxcy5hZGQocmVxKVxuICB9XG59XG4iLCAiLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgUHJlc2VuY2VcbiAqIEBwYXJhbSB7Q2hhbm5lbH0gY2hhbm5lbCAtIFRoZSBDaGFubmVsXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIFRoZSBvcHRpb25zLFxuICogICAgICAgIGZvciBleGFtcGxlIGB7ZXZlbnRzOiB7c3RhdGU6IFwic3RhdGVcIiwgZGlmZjogXCJkaWZmXCJ9fWBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlc2VuY2Uge1xuXG4gIGNvbnN0cnVjdG9yKGNoYW5uZWwsIG9wdHMgPSB7fSl7XG4gICAgbGV0IGV2ZW50cyA9IG9wdHMuZXZlbnRzIHx8IHtzdGF0ZTogXCJwcmVzZW5jZV9zdGF0ZVwiLCBkaWZmOiBcInByZXNlbmNlX2RpZmZcIn1cbiAgICB0aGlzLnN0YXRlID0ge31cbiAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdXG4gICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbFxuICAgIHRoaXMuam9pblJlZiA9IG51bGxcbiAgICB0aGlzLmNhbGxlciA9IHtcbiAgICAgIG9uSm9pbjogZnVuY3Rpb24gKCl7IH0sXG4gICAgICBvbkxlYXZlOiBmdW5jdGlvbiAoKXsgfSxcbiAgICAgIG9uU3luYzogZnVuY3Rpb24gKCl7IH1cbiAgICB9XG5cbiAgICB0aGlzLmNoYW5uZWwub24oZXZlbnRzLnN0YXRlLCBuZXdTdGF0ZSA9PiB7XG4gICAgICBsZXQge29uSm9pbiwgb25MZWF2ZSwgb25TeW5jfSA9IHRoaXMuY2FsbGVyXG5cbiAgICAgIHRoaXMuam9pblJlZiA9IHRoaXMuY2hhbm5lbC5qb2luUmVmKClcbiAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jU3RhdGUodGhpcy5zdGF0ZSwgbmV3U3RhdGUsIG9uSm9pbiwgb25MZWF2ZSlcblxuICAgICAgdGhpcy5wZW5kaW5nRGlmZnMuZm9yRWFjaChkaWZmID0+IHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFByZXNlbmNlLnN5bmNEaWZmKHRoaXMuc3RhdGUsIGRpZmYsIG9uSm9pbiwgb25MZWF2ZSlcbiAgICAgIH0pXG4gICAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdXG4gICAgICBvblN5bmMoKVxuICAgIH0pXG5cbiAgICB0aGlzLmNoYW5uZWwub24oZXZlbnRzLmRpZmYsIGRpZmYgPT4ge1xuICAgICAgbGV0IHtvbkpvaW4sIG9uTGVhdmUsIG9uU3luY30gPSB0aGlzLmNhbGxlclxuXG4gICAgICBpZih0aGlzLmluUGVuZGluZ1N5bmNTdGF0ZSgpKXtcbiAgICAgICAgdGhpcy5wZW5kaW5nRGlmZnMucHVzaChkaWZmKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFByZXNlbmNlLnN5bmNEaWZmKHRoaXMuc3RhdGUsIGRpZmYsIG9uSm9pbiwgb25MZWF2ZSlcbiAgICAgICAgb25TeW5jKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgb25Kb2luKGNhbGxiYWNrKXsgdGhpcy5jYWxsZXIub25Kb2luID0gY2FsbGJhY2sgfVxuXG4gIG9uTGVhdmUoY2FsbGJhY2speyB0aGlzLmNhbGxlci5vbkxlYXZlID0gY2FsbGJhY2sgfVxuXG4gIG9uU3luYyhjYWxsYmFjayl7IHRoaXMuY2FsbGVyLm9uU3luYyA9IGNhbGxiYWNrIH1cblxuICBsaXN0KGJ5KXsgcmV0dXJuIFByZXNlbmNlLmxpc3QodGhpcy5zdGF0ZSwgYnkpIH1cblxuICBpblBlbmRpbmdTeW5jU3RhdGUoKXtcbiAgICByZXR1cm4gIXRoaXMuam9pblJlZiB8fCAodGhpcy5qb2luUmVmICE9PSB0aGlzLmNoYW5uZWwuam9pblJlZigpKVxuICB9XG5cbiAgLy8gbG93ZXItbGV2ZWwgcHVibGljIHN0YXRpYyBBUElcblxuICAvKipcbiAgICogVXNlZCB0byBzeW5jIHRoZSBsaXN0IG9mIHByZXNlbmNlcyBvbiB0aGUgc2VydmVyXG4gICAqIHdpdGggdGhlIGNsaWVudCdzIHN0YXRlLiBBbiBvcHRpb25hbCBgb25Kb2luYCBhbmQgYG9uTGVhdmVgIGNhbGxiYWNrIGNhblxuICAgKiBiZSBwcm92aWRlZCB0byByZWFjdCB0byBjaGFuZ2VzIGluIHRoZSBjbGllbnQncyBsb2NhbCBwcmVzZW5jZXMgYWNyb3NzXG4gICAqIGRpc2Nvbm5lY3RzIGFuZCByZWNvbm5lY3RzIHdpdGggdGhlIHNlcnZlci5cbiAgICpcbiAgICogQHJldHVybnMge1ByZXNlbmNlfVxuICAgKi9cbiAgc3RhdGljIHN5bmNTdGF0ZShjdXJyZW50U3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpe1xuICAgIGxldCBzdGF0ZSA9IHRoaXMuY2xvbmUoY3VycmVudFN0YXRlKVxuICAgIGxldCBqb2lucyA9IHt9XG4gICAgbGV0IGxlYXZlcyA9IHt9XG5cbiAgICB0aGlzLm1hcChzdGF0ZSwgKGtleSwgcHJlc2VuY2UpID0+IHtcbiAgICAgIGlmKCFuZXdTdGF0ZVtrZXldKXtcbiAgICAgICAgbGVhdmVzW2tleV0gPSBwcmVzZW5jZVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5tYXAobmV3U3RhdGUsIChrZXksIG5ld1ByZXNlbmNlKSA9PiB7XG4gICAgICBsZXQgY3VycmVudFByZXNlbmNlID0gc3RhdGVba2V5XVxuICAgICAgaWYoY3VycmVudFByZXNlbmNlKXtcbiAgICAgICAgbGV0IG5ld1JlZnMgPSBuZXdQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBjdXJSZWZzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLm1hcChtID0+IG0ucGh4X3JlZilcbiAgICAgICAgbGV0IGpvaW5lZE1ldGFzID0gbmV3UHJlc2VuY2UubWV0YXMuZmlsdGVyKG0gPT4gY3VyUmVmcy5pbmRleE9mKG0ucGh4X3JlZikgPCAwKVxuICAgICAgICBsZXQgbGVmdE1ldGFzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLmZpbHRlcihtID0+IG5ld1JlZnMuaW5kZXhPZihtLnBoeF9yZWYpIDwgMClcbiAgICAgICAgaWYoam9pbmVkTWV0YXMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgam9pbnNba2V5XSA9IG5ld1ByZXNlbmNlXG4gICAgICAgICAgam9pbnNba2V5XS5tZXRhcyA9IGpvaW5lZE1ldGFzXG4gICAgICAgIH1cbiAgICAgICAgaWYobGVmdE1ldGFzLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGxlYXZlc1trZXldID0gdGhpcy5jbG9uZShjdXJyZW50UHJlc2VuY2UpXG4gICAgICAgICAgbGVhdmVzW2tleV0ubWV0YXMgPSBsZWZ0TWV0YXNcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgam9pbnNba2V5XSA9IG5ld1ByZXNlbmNlXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy5zeW5jRGlmZihzdGF0ZSwge2pvaW5zOiBqb2lucywgbGVhdmVzOiBsZWF2ZXN9LCBvbkpvaW4sIG9uTGVhdmUpXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogVXNlZCB0byBzeW5jIGEgZGlmZiBvZiBwcmVzZW5jZSBqb2luIGFuZCBsZWF2ZVxuICAgKiBldmVudHMgZnJvbSB0aGUgc2VydmVyLCBhcyB0aGV5IGhhcHBlbi4gTGlrZSBgc3luY1N0YXRlYCwgYHN5bmNEaWZmYFxuICAgKiBhY2NlcHRzIG9wdGlvbmFsIGBvbkpvaW5gIGFuZCBgb25MZWF2ZWAgY2FsbGJhY2tzIHRvIHJlYWN0IHRvIGEgdXNlclxuICAgKiBqb2luaW5nIG9yIGxlYXZpbmcgZnJvbSBhIGRldmljZS5cbiAgICpcbiAgICogQHJldHVybnMge1ByZXNlbmNlfVxuICAgKi9cbiAgc3RhdGljIHN5bmNEaWZmKHN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpe1xuICAgIGxldCB7am9pbnMsIGxlYXZlc30gPSB0aGlzLmNsb25lKGRpZmYpXG4gICAgaWYoIW9uSm9pbil7IG9uSm9pbiA9IGZ1bmN0aW9uICgpeyB9IH1cbiAgICBpZighb25MZWF2ZSl7IG9uTGVhdmUgPSBmdW5jdGlvbiAoKXsgfSB9XG5cbiAgICB0aGlzLm1hcChqb2lucywgKGtleSwgbmV3UHJlc2VuY2UpID0+IHtcbiAgICAgIGxldCBjdXJyZW50UHJlc2VuY2UgPSBzdGF0ZVtrZXldXG4gICAgICBzdGF0ZVtrZXldID0gdGhpcy5jbG9uZShuZXdQcmVzZW5jZSlcbiAgICAgIGlmKGN1cnJlbnRQcmVzZW5jZSl7XG4gICAgICAgIGxldCBqb2luZWRSZWZzID0gc3RhdGVba2V5XS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBjdXJNZXRhcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5maWx0ZXIobSA9PiBqb2luZWRSZWZzLmluZGV4T2YobS5waHhfcmVmKSA8IDApXG4gICAgICAgIHN0YXRlW2tleV0ubWV0YXMudW5zaGlmdCguLi5jdXJNZXRhcylcbiAgICAgIH1cbiAgICAgIG9uSm9pbihrZXksIGN1cnJlbnRQcmVzZW5jZSwgbmV3UHJlc2VuY2UpXG4gICAgfSlcbiAgICB0aGlzLm1hcChsZWF2ZXMsIChrZXksIGxlZnRQcmVzZW5jZSkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRQcmVzZW5jZSA9IHN0YXRlW2tleV1cbiAgICAgIGlmKCFjdXJyZW50UHJlc2VuY2UpeyByZXR1cm4gfVxuICAgICAgbGV0IHJlZnNUb1JlbW92ZSA9IGxlZnRQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICBjdXJyZW50UHJlc2VuY2UubWV0YXMgPSBjdXJyZW50UHJlc2VuY2UubWV0YXMuZmlsdGVyKHAgPT4ge1xuICAgICAgICByZXR1cm4gcmVmc1RvUmVtb3ZlLmluZGV4T2YocC5waHhfcmVmKSA8IDBcbiAgICAgIH0pXG4gICAgICBvbkxlYXZlKGtleSwgY3VycmVudFByZXNlbmNlLCBsZWZ0UHJlc2VuY2UpXG4gICAgICBpZihjdXJyZW50UHJlc2VuY2UubWV0YXMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgZGVsZXRlIHN0YXRlW2tleV1cbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBzdGF0ZVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFycmF5IG9mIHByZXNlbmNlcywgd2l0aCBzZWxlY3RlZCBtZXRhZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHByZXNlbmNlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaG9vc2VyXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBsaXN0KHByZXNlbmNlcywgY2hvb3Nlcil7XG4gICAgaWYoIWNob29zZXIpeyBjaG9vc2VyID0gZnVuY3Rpb24gKGtleSwgcHJlcyl7IHJldHVybiBwcmVzIH0gfVxuXG4gICAgcmV0dXJuIHRoaXMubWFwKHByZXNlbmNlcywgKGtleSwgcHJlc2VuY2UpID0+IHtcbiAgICAgIHJldHVybiBjaG9vc2VyKGtleSwgcHJlc2VuY2UpXG4gICAgfSlcbiAgfVxuXG4gIC8vIHByaXZhdGVcblxuICBzdGF0aWMgbWFwKG9iaiwgZnVuYyl7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubWFwKGtleSA9PiBmdW5jKGtleSwgb2JqW2tleV0pKVxuICB9XG5cbiAgc3RhdGljIGNsb25lKG9iail7IHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpIH1cbn1cbiIsICIvKiBUaGUgZGVmYXVsdCBzZXJpYWxpemVyIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgbWVzc2FnZXMgKi9cbmltcG9ydCB7XG4gIENIQU5ORUxfRVZFTlRTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgSEVBREVSX0xFTkdUSDogMSxcbiAgTUVUQV9MRU5HVEg6IDQsXG4gIEtJTkRTOiB7cHVzaDogMCwgcmVwbHk6IDEsIGJyb2FkY2FzdDogMn0sXG5cbiAgZW5jb2RlKG1zZywgY2FsbGJhY2spe1xuICAgIGlmKG1zZy5wYXlsb2FkLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcil7XG4gICAgICByZXR1cm4gY2FsbGJhY2sodGhpcy5iaW5hcnlFbmNvZGUobXNnKSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBheWxvYWQgPSBbbXNnLmpvaW5fcmVmLCBtc2cucmVmLCBtc2cudG9waWMsIG1zZy5ldmVudCwgbXNnLnBheWxvYWRdXG4gICAgICByZXR1cm4gY2FsbGJhY2soSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpXG4gICAgfVxuICB9LFxuXG4gIGRlY29kZShyYXdQYXlsb2FkLCBjYWxsYmFjayl7XG4gICAgaWYocmF3UGF5bG9hZC5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXIpe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuYmluYXJ5RGVjb2RlKHJhd1BheWxvYWQpKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgW2pvaW5fcmVmLCByZWYsIHRvcGljLCBldmVudCwgcGF5bG9hZF0gPSBKU09OLnBhcnNlKHJhd1BheWxvYWQpXG4gICAgICByZXR1cm4gY2FsbGJhY2soe2pvaW5fcmVmLCByZWYsIHRvcGljLCBldmVudCwgcGF5bG9hZH0pXG4gICAgfVxuICB9LFxuXG4gIC8vIHByaXZhdGVcblxuICBiaW5hcnlFbmNvZGUobWVzc2FnZSl7XG4gICAgbGV0IHtqb2luX3JlZiwgcmVmLCBldmVudCwgdG9waWMsIHBheWxvYWR9ID0gbWVzc2FnZVxuICAgIGxldCBtZXRhTGVuZ3RoID0gdGhpcy5NRVRBX0xFTkdUSCArIGpvaW5fcmVmLmxlbmd0aCArIHJlZi5sZW5ndGggKyB0b3BpYy5sZW5ndGggKyBldmVudC5sZW5ndGhcbiAgICBsZXQgaGVhZGVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuSEVBREVSX0xFTkdUSCArIG1ldGFMZW5ndGgpXG4gICAgbGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcoaGVhZGVyKVxuICAgIGxldCBvZmZzZXQgPSAwXG5cbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCB0aGlzLktJTkRTLnB1c2gpIC8vIGtpbmRcbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBqb2luX3JlZi5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgcmVmLmxlbmd0aClcbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCB0b3BpYy5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgZXZlbnQubGVuZ3RoKVxuICAgIEFycmF5LmZyb20oam9pbl9yZWYsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKHJlZiwgY2hhciA9PiB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjaGFyLmNoYXJDb2RlQXQoMCkpKVxuICAgIEFycmF5LmZyb20odG9waWMsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKGV2ZW50LCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG5cbiAgICB2YXIgY29tYmluZWQgPSBuZXcgVWludDhBcnJheShoZWFkZXIuYnl0ZUxlbmd0aCArIHBheWxvYWQuYnl0ZUxlbmd0aClcbiAgICBjb21iaW5lZC5zZXQobmV3IFVpbnQ4QXJyYXkoaGVhZGVyKSwgMClcbiAgICBjb21iaW5lZC5zZXQobmV3IFVpbnQ4QXJyYXkocGF5bG9hZCksIGhlYWRlci5ieXRlTGVuZ3RoKVxuXG4gICAgcmV0dXJuIGNvbWJpbmVkLmJ1ZmZlclxuICB9LFxuXG4gIGJpbmFyeURlY29kZShidWZmZXIpe1xuICAgIGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICBsZXQga2luZCA9IHZpZXcuZ2V0VWludDgoMClcbiAgICBsZXQgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpXG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSB0aGlzLktJTkRTLnB1c2g6IHJldHVybiB0aGlzLmRlY29kZVB1c2goYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgICAgY2FzZSB0aGlzLktJTkRTLnJlcGx5OiByZXR1cm4gdGhpcy5kZWNvZGVSZXBseShidWZmZXIsIHZpZXcsIGRlY29kZXIpXG4gICAgICBjYXNlIHRoaXMuS0lORFMuYnJvYWRjYXN0OiByZXR1cm4gdGhpcy5kZWNvZGVCcm9hZGNhc3QoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgIH1cbiAgfSxcblxuICBkZWNvZGVQdXNoKGJ1ZmZlciwgdmlldywgZGVjb2Rlcil7XG4gICAgbGV0IGpvaW5SZWZTaXplID0gdmlldy5nZXRVaW50OCgxKVxuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDIpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoMylcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgdGhpcy5NRVRBX0xFTkdUSCAtIDEgLy8gcHVzaGVzIGhhdmUgbm8gcmVmXG4gICAgbGV0IGpvaW5SZWYgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBqb2luUmVmU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgam9pblJlZlNpemVcbiAgICBsZXQgdG9waWMgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyB0b3BpY1NpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIHRvcGljU2l6ZVxuICAgIGxldCBldmVudCA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGV2ZW50U2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgZXZlbnRTaXplXG4gICAgbGV0IGRhdGEgPSBidWZmZXIuc2xpY2Uob2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aClcbiAgICByZXR1cm4ge2pvaW5fcmVmOiBqb2luUmVmLCByZWY6IG51bGwsIHRvcGljOiB0b3BpYywgZXZlbnQ6IGV2ZW50LCBwYXlsb2FkOiBkYXRhfVxuICB9LFxuXG4gIGRlY29kZVJlcGx5KGJ1ZmZlciwgdmlldywgZGVjb2Rlcil7XG4gICAgbGV0IGpvaW5SZWZTaXplID0gdmlldy5nZXRVaW50OCgxKVxuICAgIGxldCByZWZTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDMpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoNClcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgdGhpcy5NRVRBX0xFTkdUSFxuICAgIGxldCBqb2luUmVmID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgam9pblJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGpvaW5SZWZTaXplXG4gICAgbGV0IHJlZiA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIHJlZlNpemVcbiAgICBsZXQgdG9waWMgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyB0b3BpY1NpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIHRvcGljU2l6ZVxuICAgIGxldCBldmVudCA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGV2ZW50U2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgZXZlbnRTaXplXG4gICAgbGV0IGRhdGEgPSBidWZmZXIuc2xpY2Uob2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aClcbiAgICBsZXQgcGF5bG9hZCA9IHtzdGF0dXM6IGV2ZW50LCByZXNwb25zZTogZGF0YX1cbiAgICByZXR1cm4ge2pvaW5fcmVmOiBqb2luUmVmLCByZWY6IHJlZiwgdG9waWM6IHRvcGljLCBldmVudDogQ0hBTk5FTF9FVkVOVFMucmVwbHksIHBheWxvYWQ6IHBheWxvYWR9XG4gIH0sXG5cbiAgZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2Rlcil7XG4gICAgbGV0IHRvcGljU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgZXZlbnRTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCBvZmZzZXQgPSB0aGlzLkhFQURFUl9MRU5HVEggKyAyXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG5cbiAgICByZXR1cm4ge2pvaW5fcmVmOiBudWxsLCByZWY6IG51bGwsIHRvcGljOiB0b3BpYywgZXZlbnQ6IGV2ZW50LCBwYXlsb2FkOiBkYXRhfVxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgZ2xvYmFsLFxuICBwaHhXaW5kb3csXG4gIENIQU5ORUxfRVZFTlRTLFxuICBERUZBVUxUX1RJTUVPVVQsXG4gIERFRkFVTFRfVlNOLFxuICBTT0NLRVRfU1RBVEVTLFxuICBUUkFOU1BPUlRTLFxuICBXU19DTE9TRV9OT1JNQUxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgY2xvc3VyZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBBamF4IGZyb20gXCIuL2FqYXhcIlxuaW1wb3J0IENoYW5uZWwgZnJvbSBcIi4vY2hhbm5lbFwiXG5pbXBvcnQgTG9uZ1BvbGwgZnJvbSBcIi4vbG9uZ3BvbGxcIlxuaW1wb3J0IFNlcmlhbGl6ZXIgZnJvbSBcIi4vc2VyaWFsaXplclwiXG5pbXBvcnQgVGltZXIgZnJvbSBcIi4vdGltZXJcIlxuXG4vKiogSW5pdGlhbGl6ZXMgdGhlIFNvY2tldCAqXG4gKlxuICogRm9yIElFOCBzdXBwb3J0IHVzZSBhbiBFUzUtc2hpbSAoaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmRQb2ludCAtIFRoZSBzdHJpbmcgV2ViU29ja2V0IGVuZHBvaW50LCBpZSwgYFwid3M6Ly9leGFtcGxlLmNvbS9zb2NrZXRcImAsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwid3NzOi8vZXhhbXBsZS5jb21cImBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXCIvc29ja2V0XCJgIChpbmhlcml0ZWQgaG9zdCAmIHByb3RvY29sKVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnRyYW5zcG9ydF0gLSBUaGUgV2Vic29ja2V0IFRyYW5zcG9ydCwgZm9yIGV4YW1wbGUgV2ViU29ja2V0IG9yIFBob2VuaXguTG9uZ1BvbGwuXG4gKlxuICogRGVmYXVsdHMgdG8gV2ViU29ja2V0IHdpdGggYXV0b21hdGljIExvbmdQb2xsIGZhbGxiYWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMuZW5jb2RlXSAtIFRoZSBmdW5jdGlvbiB0byBlbmNvZGUgb3V0Z29pbmcgbWVzc2FnZXMuXG4gKlxuICogRGVmYXVsdHMgdG8gSlNPTiBlbmNvZGVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmRlY29kZV0gLSBUaGUgZnVuY3Rpb24gdG8gZGVjb2RlIGluY29taW5nIG1lc3NhZ2VzLlxuICpcbiAqIERlZmF1bHRzIHRvIEpTT046XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogKHBheWxvYWQsIGNhbGxiYWNrKSA9PiBjYWxsYmFjayhKU09OLnBhcnNlKHBheWxvYWQpKVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVvdXRdIC0gVGhlIGRlZmF1bHQgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gdHJpZ2dlciBwdXNoIHRpbWVvdXRzLlxuICpcbiAqIERlZmF1bHRzIGBERUZBVUxUX1RJTUVPVVRgXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMuaGVhcnRiZWF0SW50ZXJ2YWxNc10gLSBUaGUgbWlsbGlzZWMgaW50ZXJ2YWwgdG8gc2VuZCBhIGhlYXJ0YmVhdCBtZXNzYWdlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMucmVjb25uZWN0QWZ0ZXJNc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtaWxsaXNlY1xuICogc29ja2V0IHJlY29ubmVjdCBpbnRlcnZhbC5cbiAqXG4gKiBEZWZhdWx0cyB0byBzdGVwcGVkIGJhY2tvZmYgb2Y6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwLCA1MCwgMTAwLCAxNTAsIDIwMCwgMjUwLCA1MDAsIDEwMDAsIDIwMDBdW3RyaWVzIC0gMV0gfHwgNTAwMFxuICogfVxuICogYGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5yZWpvaW5BZnRlck1zXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1pbGxpc2VjXG4gKiByZWpvaW4gaW50ZXJ2YWwgZm9yIGluZGl2aWR1YWwgY2hhbm5lbHMuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwMDAsIDIwMDAsIDUwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcbiAqIH1cbiAqIGBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5sb2dnZXJdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIGZvciBzcGVjaWFsaXplZCBsb2dnaW5nLCBpZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBmdW5jdGlvbihraW5kLCBtc2csIGRhdGEpIHtcbiAqICAgY29uc29sZS5sb2coYCR7a2luZH06ICR7bXNnfWAsIGRhdGEpXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMubG9uZ3BvbGxlclRpbWVvdXRdIC0gVGhlIG1heGltdW0gdGltZW91dCBvZiBhIGxvbmcgcG9sbCBBSkFYIHJlcXVlc3QuXG4gKlxuICogRGVmYXVsdHMgdG8gMjBzIChkb3VibGUgdGhlIHNlcnZlciBsb25nIHBvbGwgdGltZXIpLlxuICpcbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbil9IFtvcHRzLnBhcmFtc10gLSBUaGUgb3B0aW9uYWwgcGFyYW1zIHRvIHBhc3Mgd2hlbiBjb25uZWN0aW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYmluYXJ5VHlwZV0gLSBUaGUgYmluYXJ5IHR5cGUgdG8gdXNlIGZvciBiaW5hcnkgV2ViU29ja2V0IGZyYW1lcy5cbiAqXG4gKiBEZWZhdWx0cyB0byBcImFycmF5YnVmZmVyXCJcbiAqXG4gKiBAcGFyYW0ge3Zzbn0gW29wdHMudnNuXSAtIFRoZSBzZXJpYWxpemVyJ3MgcHJvdG9jb2wgdmVyc2lvbiB0byBzZW5kIG9uIGNvbm5lY3QuXG4gKlxuICogRGVmYXVsdHMgdG8gREVGQVVMVF9WU04uXG4qL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29ja2V0IHtcbiAgY29uc3RydWN0b3IoZW5kUG9pbnQsIG9wdHMgPSB7fSl7XG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcyA9IHtvcGVuOiBbXSwgY2xvc2U6IFtdLCBlcnJvcjogW10sIG1lc3NhZ2U6IFtdfVxuICAgIHRoaXMuY2hhbm5lbHMgPSBbXVxuICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdXG4gICAgdGhpcy5yZWYgPSAwXG4gICAgdGhpcy50aW1lb3V0ID0gb3B0cy50aW1lb3V0IHx8IERFRkFVTFRfVElNRU9VVFxuICAgIHRoaXMudHJhbnNwb3J0ID0gb3B0cy50cmFuc3BvcnQgfHwgZ2xvYmFsLldlYlNvY2tldCB8fCBMb25nUG9sbFxuICAgIHRoaXMuZXN0YWJsaXNoZWRDb25uZWN0aW9ucyA9IDBcbiAgICB0aGlzLmRlZmF1bHRFbmNvZGVyID0gU2VyaWFsaXplci5lbmNvZGUuYmluZChTZXJpYWxpemVyKVxuICAgIHRoaXMuZGVmYXVsdERlY29kZXIgPSBTZXJpYWxpemVyLmRlY29kZS5iaW5kKFNlcmlhbGl6ZXIpXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICB0aGlzLmJpbmFyeVR5cGUgPSBvcHRzLmJpbmFyeVR5cGUgfHwgXCJhcnJheWJ1ZmZlclwiXG4gICAgdGhpcy5jb25uZWN0Q2xvY2sgPSAxXG4gICAgaWYodGhpcy50cmFuc3BvcnQgIT09IExvbmdQb2xsKXtcbiAgICAgIHRoaXMuZW5jb2RlID0gb3B0cy5lbmNvZGUgfHwgdGhpcy5kZWZhdWx0RW5jb2RlclxuICAgICAgdGhpcy5kZWNvZGUgPSBvcHRzLmRlY29kZSB8fCB0aGlzLmRlZmF1bHREZWNvZGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW5jb2RlID0gdGhpcy5kZWZhdWx0RW5jb2RlclxuICAgICAgdGhpcy5kZWNvZGUgPSB0aGlzLmRlZmF1bHREZWNvZGVyXG4gICAgfVxuICAgIGxldCBhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID0gbnVsbFxuICAgIGlmKHBoeFdpbmRvdyAmJiBwaHhXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcil7XG4gICAgICBwaHhXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9lID0+IHtcbiAgICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICAgICAgICAgIGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPSB0aGlzLmNvbm5lY3RDbG9ja1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgcGh4V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlc2hvd1wiLCBfZSA9PiB7XG4gICAgICAgIGlmKGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPT09IHRoaXMuY29ubmVjdENsb2NrKXtcbiAgICAgICAgICBhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID0gbnVsbFxuICAgICAgICAgIHRoaXMuY29ubmVjdCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcyA9IG9wdHMuaGVhcnRiZWF0SW50ZXJ2YWxNcyB8fCAzMDAwMFxuICAgIHRoaXMucmVqb2luQWZ0ZXJNcyA9ICh0cmllcykgPT4ge1xuICAgICAgaWYob3B0cy5yZWpvaW5BZnRlck1zKXtcbiAgICAgICAgcmV0dXJuIG9wdHMucmVqb2luQWZ0ZXJNcyh0cmllcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbMTAwMCwgMjAwMCwgNTAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlY29ubmVjdEFmdGVyTXMgPSAodHJpZXMpID0+IHtcbiAgICAgIGlmKG9wdHMucmVjb25uZWN0QWZ0ZXJNcyl7XG4gICAgICAgIHJldHVybiBvcHRzLnJlY29ubmVjdEFmdGVyTXModHJpZXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWzEwLCA1MCwgMTAwLCAxNTAsIDIwMCwgMjUwLCA1MDAsIDEwMDAsIDIwMDBdW3RyaWVzIC0gMV0gfHwgNTAwMFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxvZ2dlciA9IG9wdHMubG9nZ2VyIHx8IG51bGxcbiAgICB0aGlzLmxvbmdwb2xsZXJUaW1lb3V0ID0gb3B0cy5sb25ncG9sbGVyVGltZW91dCB8fCAyMDAwMFxuICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShvcHRzLnBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLmVuZFBvaW50ID0gYCR7ZW5kUG9pbnR9LyR7VFJBTlNQT1JUUy53ZWJzb2NrZXR9YFxuICAgIHRoaXMudnNuID0gb3B0cy52c24gfHwgREVGQVVMVF9WU05cbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lciA9IG51bGxcbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gbnVsbFxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICB0aGlzLnJlY29ubmVjdFRpbWVyID0gbmV3IFRpbWVyKCgpID0+IHtcbiAgICAgIHRoaXMudGVhcmRvd24oKCkgPT4gdGhpcy5jb25uZWN0KCkpXG4gICAgfSwgdGhpcy5yZWNvbm5lY3RBZnRlck1zKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIExvbmdQb2xsIHRyYW5zcG9ydCByZWZlcmVuY2VcbiAgICovXG4gIGdldExvbmdQb2xsVHJhbnNwb3J0KCl7IHJldHVybiBMb25nUG9sbCB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3RzIGFuZCByZXBsYWNlcyB0aGUgYWN0aXZlIHRyYW5zcG9ydFxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXdUcmFuc3BvcnQgLSBUaGUgbmV3IHRyYW5zcG9ydCBjbGFzcyB0byBpbnN0YW50aWF0ZVxuICAgKlxuICAgKi9cbiAgcmVwbGFjZVRyYW5zcG9ydChuZXdUcmFuc3BvcnQpe1xuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSB0cnVlXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gICAgdGhpcy5zZW5kQnVmZmVyID0gW11cbiAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgdGhpcy5jb25uLmNsb3NlKClcbiAgICAgIHRoaXMuY29ubiA9IG51bGxcbiAgICB9XG4gICAgdGhpcy50cmFuc3BvcnQgPSBuZXdUcmFuc3BvcnRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzb2NrZXQgcHJvdG9jb2xcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHByb3RvY29sKCl7IHJldHVybiBsb2NhdGlvbi5wcm90b2NvbC5tYXRjaCgvXmh0dHBzLykgPyBcIndzc1wiIDogXCJ3c1wiIH1cblxuICAvKipcbiAgICogVGhlIGZ1bGx5IHF1YWxpZmllZCBzb2NrZXQgdXJsXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBlbmRQb2ludFVSTCgpe1xuICAgIGxldCB1cmkgPSBBamF4LmFwcGVuZFBhcmFtcyhcbiAgICAgIEFqYXguYXBwZW5kUGFyYW1zKHRoaXMuZW5kUG9pbnQsIHRoaXMucGFyYW1zKCkpLCB7dnNuOiB0aGlzLnZzbn0pXG4gICAgaWYodXJpLmNoYXJBdCgwKSAhPT0gXCIvXCIpeyByZXR1cm4gdXJpIH1cbiAgICBpZih1cmkuY2hhckF0KDEpID09PSBcIi9cIil7IHJldHVybiBgJHt0aGlzLnByb3RvY29sKCl9OiR7dXJpfWAgfVxuXG4gICAgcmV0dXJuIGAke3RoaXMucHJvdG9jb2woKX06Ly8ke2xvY2F0aW9uLmhvc3R9JHt1cml9YFxuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXRcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50I1N0YXR1c19jb2RlcyBmb3IgdmFsaWQgc3RhdHVzIGNvZGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIE9wdGlvbmFsIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBzb2NrZXQgaXMgZGlzY29ubmVjdGVkLlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IGNvZGUgLSBBIHN0YXR1cyBjb2RlIGZvciBkaXNjb25uZWN0aW9uIChPcHRpb25hbCkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBBIHRleHR1YWwgZGVzY3JpcHRpb24gb2YgdGhlIHJlYXNvbiB0byBkaXNjb25uZWN0LiAoT3B0aW9uYWwpXG4gICAqL1xuICBkaXNjb25uZWN0KGNhbGxiYWNrLCBjb2RlLCByZWFzb24pe1xuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSB0cnVlXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gICAgdGhpcy50ZWFyZG93bihjYWxsYmFjaywgY29kZSwgcmVhc29uKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBUaGUgcGFyYW1zIHRvIHNlbmQgd2hlbiBjb25uZWN0aW5nLCBmb3IgZXhhbXBsZSBge3VzZXJfaWQ6IHVzZXJUb2tlbn1gXG4gICAqXG4gICAqIFBhc3NpbmcgcGFyYW1zIHRvIGNvbm5lY3QgaXMgZGVwcmVjYXRlZDsgcGFzcyB0aGVtIGluIHRoZSBTb2NrZXQgY29uc3RydWN0b3IgaW5zdGVhZDpcbiAgICogYG5ldyBTb2NrZXQoXCIvc29ja2V0XCIsIHtwYXJhbXM6IHt1c2VyX2lkOiB1c2VyVG9rZW59fSlgLlxuICAgKi9cbiAgY29ubmVjdChwYXJhbXMpe1xuICAgIGlmKHBhcmFtcyl7XG4gICAgICBjb25zb2xlICYmIGNvbnNvbGUubG9nKFwicGFzc2luZyBwYXJhbXMgdG8gY29ubmVjdCBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkIHBhc3MgOnBhcmFtcyB0byB0aGUgU29ja2V0IGNvbnN0cnVjdG9yXCIpXG4gICAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUocGFyYW1zKVxuICAgIH1cbiAgICBpZih0aGlzLmNvbm4peyByZXR1cm4gfVxuXG4gICAgdGhpcy5jb25uZWN0Q2xvY2srK1xuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgdGhpcy5jb25uID0gbmV3IHRoaXMudHJhbnNwb3J0KHRoaXMuZW5kUG9pbnRVUkwoKSlcbiAgICB0aGlzLmNvbm4uYmluYXJ5VHlwZSA9IHRoaXMuYmluYXJ5VHlwZVxuICAgIHRoaXMuY29ubi50aW1lb3V0ID0gdGhpcy5sb25ncG9sbGVyVGltZW91dFxuICAgIHRoaXMuY29ubi5vbm9wZW4gPSAoKSA9PiB0aGlzLm9uQ29ubk9wZW4oKVxuICAgIHRoaXMuY29ubi5vbmVycm9yID0gZXJyb3IgPT4gdGhpcy5vbkNvbm5FcnJvcihlcnJvcilcbiAgICB0aGlzLmNvbm4ub25tZXNzYWdlID0gZXZlbnQgPT4gdGhpcy5vbkNvbm5NZXNzYWdlKGV2ZW50KVxuICAgIHRoaXMuY29ubi5vbmNsb3NlID0gZXZlbnQgPT4gdGhpcy5vbkNvbm5DbG9zZShldmVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIHRoZSBtZXNzYWdlLiBPdmVycmlkZSBgdGhpcy5sb2dnZXJgIGZvciBzcGVjaWFsaXplZCBsb2dnaW5nLiBub29wcyBieSBkZWZhdWx0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBraW5kXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtc2dcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICovXG4gIGxvZyhraW5kLCBtc2csIGRhdGEpeyB0aGlzLmxvZ2dlcihraW5kLCBtc2csIGRhdGEpIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGEgbG9nZ2VyIGhhcyBiZWVuIHNldCBvbiB0aGlzIHNvY2tldC5cbiAgICovXG4gIGhhc0xvZ2dlcigpeyByZXR1cm4gdGhpcy5sb2dnZXIgIT09IG51bGwgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIG9wZW4gZXZlbnRzXG4gICAqXG4gICAqIEBleGFtcGxlIHNvY2tldC5vbk9wZW4oZnVuY3Rpb24oKXsgY29uc29sZS5pbmZvKFwidGhlIHNvY2tldCB3YXMgb3BlbmVkXCIpIH0pXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbk9wZW4oY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mub3Blbi5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBjbG9zZSBldmVudHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2UoY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuY2xvc2UucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gZXJyb3IgZXZlbnRzXG4gICAqXG4gICAqIEBleGFtcGxlIHNvY2tldC5vbkVycm9yKGZ1bmN0aW9uKGVycm9yKXsgYWxlcnQoXCJBbiBlcnJvciBvY2N1cnJlZFwiKSB9KVxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25FcnJvcihjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5lcnJvci5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBtZXNzYWdlIGV2ZW50c1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25NZXNzYWdlKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2UucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFBpbmdzIHRoZSBzZXJ2ZXIgYW5kIGludm9rZXMgdGhlIGNhbGxiYWNrIHdpdGggdGhlIFJUVCBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwaW5nIHdhcyBwdXNoZWQgb3IgZmFsc2UgaWYgdW5hYmxlIHRvIGJlIHB1c2hlZC5cbiAgICovXG4gIHBpbmcoY2FsbGJhY2spe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gZmFsc2UgfVxuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIGxldCBzdGFydFRpbWUgPSBEYXRlLm5vdygpXG4gICAgdGhpcy5wdXNoKHt0b3BpYzogXCJwaG9lbml4XCIsIGV2ZW50OiBcImhlYXJ0YmVhdFwiLCBwYXlsb2FkOiB7fSwgcmVmOiByZWZ9KVxuICAgIGxldCBvbk1zZ1JlZiA9IHRoaXMub25NZXNzYWdlKG1zZyA9PiB7XG4gICAgICBpZihtc2cucmVmID09PSByZWYpe1xuICAgICAgICB0aGlzLm9mZihbb25Nc2dSZWZdKVxuICAgICAgICBjYWxsYmFjayhEYXRlLm5vdygpIC0gc3RhcnRUaW1lKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICBjbGVhckhlYXJ0YmVhdHMoKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5oZWFydGJlYXRUaW1lcilcbiAgICBjbGVhclRpbWVvdXQodGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIpXG4gIH1cblxuICBvbkNvbm5PcGVuKCl7XG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgYGNvbm5lY3RlZCB0byAke3RoaXMuZW5kUG9pbnRVUkwoKX1gKVxuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgdGhpcy5lc3RhYmxpc2hlZENvbm5lY3Rpb25zKytcbiAgICB0aGlzLmZsdXNoU2VuZEJ1ZmZlcigpXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gICAgdGhpcy5yZXNldEhlYXJ0YmVhdCgpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5vcGVuLmZvckVhY2goKFssIGNhbGxiYWNrXSkgPT4gY2FsbGJhY2soKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICBoZWFydGJlYXRUaW1lb3V0KCl7XG4gICAgaWYodGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmKXtcbiAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpeyB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImhlYXJ0YmVhdCB0aW1lb3V0LiBBdHRlbXB0aW5nIHRvIHJlLWVzdGFibGlzaCBjb25uZWN0aW9uXCIpIH1cbiAgICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgICAgdGhpcy50ZWFyZG93bigoKSA9PiB0aGlzLnJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpLCBXU19DTE9TRV9OT1JNQUwsIFwiaGVhcnRiZWF0IHRpbWVvdXRcIilcbiAgICB9XG4gIH1cblxuICByZXNldEhlYXJ0YmVhdCgpe1xuICAgIGlmKHRoaXMuY29ubiAmJiB0aGlzLmNvbm4uc2tpcEhlYXJ0YmVhdCl7IHJldHVybiB9XG4gICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgIHRoaXMuY2xlYXJIZWFydGJlYXRzKClcbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnNlbmRIZWFydGJlYXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICB9XG5cbiAgdGVhcmRvd24oY2FsbGJhY2ssIGNvZGUsIHJlYXNvbil7XG4gICAgaWYoIXRoaXMuY29ubil7XG4gICAgICByZXR1cm4gY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH1cblxuICAgIHRoaXMud2FpdEZvckJ1ZmZlckRvbmUoKCkgPT4ge1xuICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgaWYoY29kZSl7IHRoaXMuY29ubi5jbG9zZShjb2RlLCByZWFzb24gfHwgXCJcIikgfSBlbHNlIHsgdGhpcy5jb25uLmNsb3NlKCkgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLndhaXRGb3JTb2NrZXRDbG9zZWQoKCkgPT4ge1xuICAgICAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgICAgIHRoaXMuY29ubi5vbm9wZW4gPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9uZXJyb3IgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4ub25jbG9zZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4gPSBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICB3YWl0Rm9yQnVmZmVyRG9uZShjYWxsYmFjaywgdHJpZXMgPSAxKXtcbiAgICBpZih0cmllcyA9PT0gNSB8fCAhdGhpcy5jb25uIHx8ICF0aGlzLmNvbm4uYnVmZmVyZWRBbW91bnQpe1xuICAgICAgY2FsbGJhY2soKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLndhaXRGb3JCdWZmZXJEb25lKGNhbGxiYWNrLCB0cmllcyArIDEpXG4gICAgfSwgMTUwICogdHJpZXMpXG4gIH1cblxuICB3YWl0Rm9yU29ja2V0Q2xvc2VkKGNhbGxiYWNrLCB0cmllcyA9IDEpe1xuICAgIGlmKHRyaWVzID09PSA1IHx8ICF0aGlzLmNvbm4gfHwgdGhpcy5jb25uLnJlYWR5U3RhdGUgPT09IFNPQ0tFVF9TVEFURVMuY2xvc2VkKXtcbiAgICAgIGNhbGxiYWNrKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy53YWl0Rm9yU29ja2V0Q2xvc2VkKGNhbGxiYWNrLCB0cmllcyArIDEpXG4gICAgfSwgMTUwICogdHJpZXMpXG4gIH1cblxuICBvbkNvbm5DbG9zZShldmVudCl7XG4gICAgbGV0IGNsb3NlQ29kZSA9IGV2ZW50ICYmIGV2ZW50LmNvZGVcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImNsb3NlXCIsIGV2ZW50KVxuICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgdGhpcy5jbGVhckhlYXJ0YmVhdHMoKVxuICAgIGlmKCF0aGlzLmNsb3NlV2FzQ2xlYW4gJiYgY2xvc2VDb2RlICE9PSAxMDAwKXtcbiAgICAgIHRoaXMucmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KClcbiAgICB9XG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5jbG9zZS5mb3JFYWNoKChbLCBjYWxsYmFja10pID0+IGNhbGxiYWNrKGV2ZW50KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Db25uRXJyb3IoZXJyb3Ipe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGVycm9yKVxuICAgIGxldCB0cmFuc3BvcnRCZWZvcmUgPSB0aGlzLnRyYW5zcG9ydFxuICAgIGxldCBlc3RhYmxpc2hlZEJlZm9yZSA9IHRoaXMuZXN0YWJsaXNoZWRDb25uZWN0aW9uc1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuZXJyb3IuZm9yRWFjaCgoWywgY2FsbGJhY2tdKSA9PiB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgdHJhbnNwb3J0QmVmb3JlLCBlc3RhYmxpc2hlZEJlZm9yZSlcbiAgICB9KVxuICAgIGlmKHRyYW5zcG9ydEJlZm9yZSA9PT0gdGhpcy50cmFuc3BvcnQgfHwgZXN0YWJsaXNoZWRCZWZvcmUgPiAwKXtcbiAgICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyQ2hhbkVycm9yKCl7XG4gICAgdGhpcy5jaGFubmVscy5mb3JFYWNoKGNoYW5uZWwgPT4ge1xuICAgICAgaWYoIShjaGFubmVsLmlzRXJyb3JlZCgpIHx8IGNoYW5uZWwuaXNMZWF2aW5nKCkgfHwgY2hhbm5lbC5pc0Nsb3NlZCgpKSl7XG4gICAgICAgIGNoYW5uZWwudHJpZ2dlcihDSEFOTkVMX0VWRU5UUy5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBjb25uZWN0aW9uU3RhdGUoKXtcbiAgICBzd2l0Y2godGhpcy5jb25uICYmIHRoaXMuY29ubi5yZWFkeVN0YXRlKXtcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nOiByZXR1cm4gXCJjb25uZWN0aW5nXCJcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5vcGVuOiByZXR1cm4gXCJvcGVuXCJcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5jbG9zaW5nOiByZXR1cm4gXCJjbG9zaW5nXCJcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcImNsb3NlZFwiXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNDb25uZWN0ZWQoKXsgcmV0dXJuIHRoaXMuY29ubmVjdGlvblN0YXRlKCkgPT09IFwib3BlblwiIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQHBhcmFtIHtDaGFubmVsfVxuICAgKi9cbiAgcmVtb3ZlKGNoYW5uZWwpe1xuICAgIHRoaXMub2ZmKGNoYW5uZWwuc3RhdGVDaGFuZ2VSZWZzKVxuICAgIHRoaXMuY2hhbm5lbHMgPSB0aGlzLmNoYW5uZWxzLmZpbHRlcihjID0+IGMuam9pblJlZigpICE9PSBjaGFubmVsLmpvaW5SZWYoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGBvbk9wZW5gLCBgb25DbG9zZWAsIGBvbkVycm9yLGAgYW5kIGBvbk1lc3NhZ2VgIHJlZ2lzdHJhdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7cmVmc30gLSBsaXN0IG9mIHJlZnMgcmV0dXJuZWQgYnkgY2FsbHMgdG9cbiAgICogICAgICAgICAgICAgICAgIGBvbk9wZW5gLCBgb25DbG9zZWAsIGBvbkVycm9yLGAgYW5kIGBvbk1lc3NhZ2VgXG4gICAqL1xuICBvZmYocmVmcyl7XG4gICAgZm9yKGxldCBrZXkgaW4gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcyl7XG4gICAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzW2tleV0gPSB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzW2tleV0uZmlsdGVyKChbcmVmXSkgPT4ge1xuICAgICAgICByZXR1cm4gcmVmcy5pbmRleE9mKHJlZikgPT09IC0xXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWF0ZXMgYSBuZXcgY2hhbm5lbCBmb3IgdGhlIGdpdmVuIHRvcGljXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gY2hhblBhcmFtcyAtIFBhcmFtZXRlcnMgZm9yIHRoZSBjaGFubmVsXG4gICAqIEByZXR1cm5zIHtDaGFubmVsfVxuICAgKi9cbiAgY2hhbm5lbCh0b3BpYywgY2hhblBhcmFtcyA9IHt9KXtcbiAgICBsZXQgY2hhbiA9IG5ldyBDaGFubmVsKHRvcGljLCBjaGFuUGFyYW1zLCB0aGlzKVxuICAgIHRoaXMuY2hhbm5lbHMucHVzaChjaGFuKVxuICAgIHJldHVybiBjaGFuXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICovXG4gIHB1c2goZGF0YSl7XG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSl7XG4gICAgICBsZXQge3RvcGljLCBldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luX3JlZn0gPSBkYXRhXG4gICAgICB0aGlzLmxvZyhcInB1c2hcIiwgYCR7dG9waWN9ICR7ZXZlbnR9ICgke2pvaW5fcmVmfSwgJHtyZWZ9KWAsIHBheWxvYWQpXG4gICAgfVxuXG4gICAgaWYodGhpcy5pc0Nvbm5lY3RlZCgpKXtcbiAgICAgIHRoaXMuZW5jb2RlKGRhdGEsIHJlc3VsdCA9PiB0aGlzLmNvbm4uc2VuZChyZXN1bHQpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbmRCdWZmZXIucHVzaCgoKSA9PiB0aGlzLmVuY29kZShkYXRhLCByZXN1bHQgPT4gdGhpcy5jb25uLnNlbmQocmVzdWx0KSkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmV4dCBtZXNzYWdlIHJlZiwgYWNjb3VudGluZyBmb3Igb3ZlcmZsb3dzXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBtYWtlUmVmKCl7XG4gICAgbGV0IG5ld1JlZiA9IHRoaXMucmVmICsgMVxuICAgIGlmKG5ld1JlZiA9PT0gdGhpcy5yZWYpeyB0aGlzLnJlZiA9IDAgfSBlbHNlIHsgdGhpcy5yZWYgPSBuZXdSZWYgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVmLnRvU3RyaW5nKClcbiAgfVxuXG4gIHNlbmRIZWFydGJlYXQoKXtcbiAgICBpZih0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgJiYgIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiB9XG4gICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnB1c2goe3RvcGljOiBcInBob2VuaXhcIiwgZXZlbnQ6IFwiaGVhcnRiZWF0XCIsIHBheWxvYWQ6IHt9LCByZWY6IHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZn0pXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaGVhcnRiZWF0VGltZW91dCgpLCB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMpXG4gIH1cblxuICBmbHVzaFNlbmRCdWZmZXIoKXtcbiAgICBpZih0aGlzLmlzQ29ubmVjdGVkKCkgJiYgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aCA+IDApe1xuICAgICAgdGhpcy5zZW5kQnVmZmVyLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSlcbiAgICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdXG4gICAgfVxuICB9XG5cbiAgb25Db25uTWVzc2FnZShyYXdNZXNzYWdlKXtcbiAgICB0aGlzLmRlY29kZShyYXdNZXNzYWdlLmRhdGEsIG1zZyA9PiB7XG4gICAgICBsZXQge3RvcGljLCBldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luX3JlZn0gPSBtc2dcbiAgICAgIGlmKHJlZiAmJiByZWYgPT09IHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZil7XG4gICAgICAgIHRoaXMuY2xlYXJIZWFydGJlYXRzKClcbiAgICAgICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgICAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnNlbmRIZWFydGJlYXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICAgICAgfVxuXG4gICAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInJlY2VpdmVcIiwgYCR7cGF5bG9hZC5zdGF0dXMgfHwgXCJcIn0gJHt0b3BpY30gJHtldmVudH0gJHtyZWYgJiYgXCIoXCIgKyByZWYgKyBcIilcIiB8fCBcIlwifWAsIHBheWxvYWQpXG5cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmNoYW5uZWxzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHNbaV1cbiAgICAgICAgaWYoIWNoYW5uZWwuaXNNZW1iZXIodG9waWMsIGV2ZW50LCBwYXlsb2FkLCBqb2luX3JlZikpeyBjb250aW51ZSB9XG4gICAgICAgIGNoYW5uZWwudHJpZ2dlcihldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luX3JlZilcbiAgICAgIH1cblxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MubWVzc2FnZS5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGxldCBbLCBjYWxsYmFja10gPSB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2VbaV1cbiAgICAgICAgY2FsbGJhY2sobXNnKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBsZWF2ZU9wZW5Ub3BpYyh0b3BpYyl7XG4gICAgbGV0IGR1cENoYW5uZWwgPSB0aGlzLmNoYW5uZWxzLmZpbmQoYyA9PiBjLnRvcGljID09PSB0b3BpYyAmJiAoYy5pc0pvaW5lZCgpIHx8IGMuaXNKb2luaW5nKCkpKVxuICAgIGlmKGR1cENoYW5uZWwpe1xuICAgICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgYGxlYXZpbmcgZHVwbGljYXRlIHRvcGljIFwiJHt0b3BpY31cImApXG4gICAgICBkdXBDaGFubmVsLmxlYXZlKClcbiAgICB9XG4gIH1cbn1cbiIsICJleHBvcnQgY29uc3QgQ09OU0VDVVRJVkVfUkVMT0FEUyA9IFwiY29uc2VjdXRpdmUtcmVsb2Fkc1wiXG5leHBvcnQgY29uc3QgTUFYX1JFTE9BRFMgPSAxMFxuZXhwb3J0IGNvbnN0IFJFTE9BRF9KSVRURVJfTUlOID0gNTAwMFxuZXhwb3J0IGNvbnN0IFJFTE9BRF9KSVRURVJfTUFYID0gMTAwMDBcbmV4cG9ydCBjb25zdCBGQUlMU0FGRV9KSVRURVIgPSAzMDAwMFxuZXhwb3J0IGNvbnN0IFBIWF9FVkVOVF9DTEFTU0VTID0gW1xuICBcInBoeC1jbGljay1sb2FkaW5nXCIsIFwicGh4LWNoYW5nZS1sb2FkaW5nXCIsIFwicGh4LXN1Ym1pdC1sb2FkaW5nXCIsXG4gIFwicGh4LWtleWRvd24tbG9hZGluZ1wiLCBcInBoeC1rZXl1cC1sb2FkaW5nXCIsIFwicGh4LWJsdXItbG9hZGluZ1wiLCBcInBoeC1mb2N1cy1sb2FkaW5nXCJcbl1cbmV4cG9ydCBjb25zdCBQSFhfQ09NUE9ORU5UID0gXCJkYXRhLXBoeC1jb21wb25lbnRcIlxuZXhwb3J0IGNvbnN0IFBIWF9MSVZFX0xJTksgPSBcImRhdGEtcGh4LWxpbmtcIlxuZXhwb3J0IGNvbnN0IFBIWF9UUkFDS19TVEFUSUMgPSBcInRyYWNrLXN0YXRpY1wiXG5leHBvcnQgY29uc3QgUEhYX0xJTktfU1RBVEUgPSBcImRhdGEtcGh4LWxpbmstc3RhdGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUYgPSBcImRhdGEtcGh4LXJlZlwiXG5leHBvcnQgY29uc3QgUEhYX1JFRl9TUkMgPSBcImRhdGEtcGh4LXJlZi1zcmNcIlxuZXhwb3J0IGNvbnN0IFBIWF9UUkFDS19VUExPQURTID0gXCJ0cmFjay11cGxvYWRzXCJcbmV4cG9ydCBjb25zdCBQSFhfVVBMT0FEX1JFRiA9IFwiZGF0YS1waHgtdXBsb2FkLXJlZlwiXG5leHBvcnQgY29uc3QgUEhYX1BSRUZMSUdIVEVEX1JFRlMgPSBcImRhdGEtcGh4LXByZWZsaWdodGVkLXJlZnNcIlxuZXhwb3J0IGNvbnN0IFBIWF9ET05FX1JFRlMgPSBcImRhdGEtcGh4LWRvbmUtcmVmc1wiXG5leHBvcnQgY29uc3QgUEhYX0RST1BfVEFSR0VUID0gXCJkcm9wLXRhcmdldFwiXG5leHBvcnQgY29uc3QgUEhYX0FDVElWRV9FTlRSWV9SRUZTID0gXCJkYXRhLXBoeC1hY3RpdmUtcmVmc1wiXG5leHBvcnQgY29uc3QgUEhYX0xJVkVfRklMRV9VUERBVEVEID0gXCJwaHg6bGl2ZS1maWxlOnVwZGF0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9TS0lQID0gXCJkYXRhLXBoeC1za2lwXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJVTkUgPSBcImRhdGEtcGh4LXBydW5lXCJcbmV4cG9ydCBjb25zdCBQSFhfUEFHRV9MT0FESU5HID0gXCJwYWdlLWxvYWRpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9DT05ORUNURURfQ0xBU1MgPSBcInBoeC1jb25uZWN0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNDT05ORUNURURfQ0xBU1MgPSBcInBoeC1sb2FkaW5nXCJcbmV4cG9ydCBjb25zdCBQSFhfTk9fRkVFREJBQ0tfQ0xBU1MgPSBcInBoeC1uby1mZWVkYmFja1wiXG5leHBvcnQgY29uc3QgUEhYX0VSUk9SX0NMQVNTID0gXCJwaHgtZXJyb3JcIlxuZXhwb3J0IGNvbnN0IFBIWF9QQVJFTlRfSUQgPSBcImRhdGEtcGh4LXBhcmVudC1pZFwiXG5leHBvcnQgY29uc3QgUEhYX01BSU4gPSBcImRhdGEtcGh4LW1haW5cIlxuZXhwb3J0IGNvbnN0IFBIWF9ST09UX0lEID0gXCJkYXRhLXBoeC1yb290LWlkXCJcbmV4cG9ydCBjb25zdCBQSFhfVFJJR0dFUl9BQ1RJT04gPSBcInRyaWdnZXItYWN0aW9uXCJcbmV4cG9ydCBjb25zdCBQSFhfRkVFREJBQ0tfRk9SID0gXCJmZWVkYmFjay1mb3JcIlxuZXhwb3J0IGNvbnN0IFBIWF9IQVNfRk9DVVNFRCA9IFwicGh4LWhhcy1mb2N1c2VkXCJcbmV4cG9ydCBjb25zdCBGT0NVU0FCTEVfSU5QVVRTID0gW1widGV4dFwiLCBcInRleHRhcmVhXCIsIFwibnVtYmVyXCIsIFwiZW1haWxcIiwgXCJwYXNzd29yZFwiLCBcInNlYXJjaFwiLCBcInRlbFwiLCBcInVybFwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwiZGF0ZXRpbWUtbG9jYWxcIiwgXCJjb2xvclwiLCBcInJhbmdlXCJdXG5leHBvcnQgY29uc3QgQ0hFQ0tBQkxFX0lOUFVUUyA9IFtcImNoZWNrYm94XCIsIFwicmFkaW9cIl1cbmV4cG9ydCBjb25zdCBQSFhfSEFTX1NVQk1JVFRFRCA9IFwicGh4LWhhcy1zdWJtaXR0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9TRVNTSU9OID0gXCJkYXRhLXBoeC1zZXNzaW9uXCJcbmV4cG9ydCBjb25zdCBQSFhfVklFV19TRUxFQ1RPUiA9IGBbJHtQSFhfU0VTU0lPTn1dYFxuZXhwb3J0IGNvbnN0IFBIWF9TVElDS1kgPSBcImRhdGEtcGh4LXN0aWNreVwiXG5leHBvcnQgY29uc3QgUEhYX1NUQVRJQyA9IFwiZGF0YS1waHgtc3RhdGljXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVBRE9OTFkgPSBcImRhdGEtcGh4LXJlYWRvbmx5XCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRUQgPSBcImRhdGEtcGh4LWRpc2FibGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRV9XSVRIID0gXCJkaXNhYmxlLXdpdGhcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSA9IFwiZGF0YS1waHgtZGlzYWJsZS13aXRoLXJlc3RvcmVcIlxuZXhwb3J0IGNvbnN0IFBIWF9IT09LID0gXCJob29rXCJcbmV4cG9ydCBjb25zdCBQSFhfREVCT1VOQ0UgPSBcImRlYm91bmNlXCJcbmV4cG9ydCBjb25zdCBQSFhfVEhST1RUTEUgPSBcInRocm90dGxlXCJcbmV4cG9ydCBjb25zdCBQSFhfVVBEQVRFID0gXCJ1cGRhdGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9TVFJFQU0gPSBcInN0cmVhbVwiXG5leHBvcnQgY29uc3QgUEhYX0tFWSA9IFwia2V5XCJcbmV4cG9ydCBjb25zdCBQSFhfUFJJVkFURSA9IFwicGh4UHJpdmF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX0FVVE9fUkVDT1ZFUiA9IFwiYXV0by1yZWNvdmVyXCJcbmV4cG9ydCBjb25zdCBQSFhfTFZfREVCVUcgPSBcInBoeDpsaXZlLXNvY2tldDpkZWJ1Z1wiXG5leHBvcnQgY29uc3QgUEhYX0xWX1BST0ZJTEUgPSBcInBoeDpsaXZlLXNvY2tldDpwcm9maWxpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9MVl9MQVRFTkNZX1NJTSA9IFwicGh4OmxpdmUtc29ja2V0OmxhdGVuY3ktc2ltXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJPR1JFU1MgPSBcInByb2dyZXNzXCJcbmV4cG9ydCBjb25zdCBQSFhfTU9VTlRFRCA9IFwibW91bnRlZFwiXG5leHBvcnQgY29uc3QgTE9BREVSX1RJTUVPVVQgPSAxXG5leHBvcnQgY29uc3QgQkVGT1JFX1VOTE9BRF9MT0FERVJfVElNRU9VVCA9IDIwMFxuZXhwb3J0IGNvbnN0IEJJTkRJTkdfUFJFRklYID0gXCJwaHgtXCJcbmV4cG9ydCBjb25zdCBQVVNIX1RJTUVPVVQgPSAzMDAwMFxuZXhwb3J0IGNvbnN0IExJTktfSEVBREVSID0gXCJ4LXJlcXVlc3RlZC13aXRoXCJcbmV4cG9ydCBjb25zdCBSRVNQT05TRV9VUkxfSEVBREVSID0gXCJ4LXJlc3BvbnNlLXVybFwiXG5leHBvcnQgY29uc3QgREVCT1VOQ0VfVFJJR0dFUiA9IFwiZGVib3VuY2UtdHJpZ2dlclwiXG5leHBvcnQgY29uc3QgVEhST1RUTEVEID0gXCJ0aHJvdHRsZWRcIlxuZXhwb3J0IGNvbnN0IERFQk9VTkNFX1BSRVZfS0VZID0gXCJkZWJvdW5jZS1wcmV2LWtleVwiXG5leHBvcnQgY29uc3QgREVGQVVMVFMgPSB7XG4gIGRlYm91bmNlOiAzMDAsXG4gIHRocm90dGxlOiAzMDBcbn1cblxuLy8gUmVuZGVyZWRcbmV4cG9ydCBjb25zdCBEWU5BTUlDUyA9IFwiZFwiXG5leHBvcnQgY29uc3QgU1RBVElDID0gXCJzXCJcbmV4cG9ydCBjb25zdCBDT01QT05FTlRTID0gXCJjXCJcbmV4cG9ydCBjb25zdCBFVkVOVFMgPSBcImVcIlxuZXhwb3J0IGNvbnN0IFJFUExZID0gXCJyXCJcbmV4cG9ydCBjb25zdCBUSVRMRSA9IFwidFwiXG5leHBvcnQgY29uc3QgVEVNUExBVEVTID0gXCJwXCJcbmV4cG9ydCBjb25zdCBTVFJFQU0gPSBcInN0cmVhbVwiXG4iLCAiaW1wb3J0IHtcbiAgbG9nRXJyb3Jcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnRyeVVwbG9hZGVyIHtcbiAgY29uc3RydWN0b3IoZW50cnksIGNodW5rU2l6ZSwgbGl2ZVNvY2tldCl7XG4gICAgdGhpcy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuICAgIHRoaXMuZW50cnkgPSBlbnRyeVxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHRoaXMuY2h1bmtTaXplID0gY2h1bmtTaXplXG4gICAgdGhpcy5jaHVua1RpbWVyID0gbnVsbFxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbCA9IGxpdmVTb2NrZXQuY2hhbm5lbChgbHZ1OiR7ZW50cnkucmVmfWAsIHt0b2tlbjogZW50cnkubWV0YWRhdGEoKX0pXG4gIH1cblxuICBlcnJvcihyZWFzb24pe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmNodW5rVGltZXIpXG4gICAgdGhpcy51cGxvYWRDaGFubmVsLmxlYXZlKClcbiAgICB0aGlzLmVudHJ5LmVycm9yKHJlYXNvbilcbiAgfVxuXG4gIHVwbG9hZCgpe1xuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5vbkVycm9yKHJlYXNvbiA9PiB0aGlzLmVycm9yKHJlYXNvbikpXG4gICAgdGhpcy51cGxvYWRDaGFubmVsLmpvaW4oKVxuICAgICAgLnJlY2VpdmUoXCJva1wiLCBfZGF0YSA9PiB0aGlzLnJlYWROZXh0Q2h1bmsoKSlcbiAgICAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgcmVhc29uID0+IHRoaXMuZXJyb3IocmVhc29uKSlcbiAgfVxuXG4gIGlzRG9uZSgpeyByZXR1cm4gdGhpcy5vZmZzZXQgPj0gdGhpcy5lbnRyeS5maWxlLnNpemUgfVxuXG4gIHJlYWROZXh0Q2h1bmsoKXtcbiAgICBsZXQgcmVhZGVyID0gbmV3IHdpbmRvdy5GaWxlUmVhZGVyKClcbiAgICBsZXQgYmxvYiA9IHRoaXMuZW50cnkuZmlsZS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5jaHVua1NpemUgKyB0aGlzLm9mZnNldClcbiAgICByZWFkZXIub25sb2FkID0gKGUpID0+IHtcbiAgICAgIGlmKGUudGFyZ2V0LmVycm9yID09PSBudWxsKXtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gZS50YXJnZXQucmVzdWx0LmJ5dGVMZW5ndGhcbiAgICAgICAgdGhpcy5wdXNoQ2h1bmsoZS50YXJnZXQucmVzdWx0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvZ0Vycm9yKFwiUmVhZCBlcnJvcjogXCIgKyBlLnRhcmdldC5lcnJvcilcbiAgICAgIH1cbiAgICB9XG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIH1cblxuICBwdXNoQ2h1bmsoY2h1bmspe1xuICAgIGlmKCF0aGlzLnVwbG9hZENoYW5uZWwuaXNKb2luZWQoKSl7IHJldHVybiB9XG4gICAgdGhpcy51cGxvYWRDaGFubmVsLnB1c2goXCJjaHVua1wiLCBjaHVuaylcbiAgICAgIC5yZWNlaXZlKFwib2tcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLmVudHJ5LnByb2dyZXNzKCh0aGlzLm9mZnNldCAvIHRoaXMuZW50cnkuZmlsZS5zaXplKSAqIDEwMClcbiAgICAgICAgaWYoIXRoaXMuaXNEb25lKCkpe1xuICAgICAgICAgIHRoaXMuY2h1bmtUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWFkTmV4dENodW5rKCksIHRoaXMubGl2ZVNvY2tldC5nZXRMYXRlbmN5U2ltKCkgfHwgMClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFBIWF9WSUVXX1NFTEVDVE9SXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBFbnRyeVVwbG9hZGVyIGZyb20gXCIuL2VudHJ5X3VwbG9hZGVyXCJcblxuZXhwb3J0IGxldCBsb2dFcnJvciA9IChtc2csIG9iaikgPT4gY29uc29sZS5lcnJvciAmJiBjb25zb2xlLmVycm9yKG1zZywgb2JqKVxuXG5leHBvcnQgbGV0IGlzQ2lkID0gKGNpZCkgPT4ge1xuICBsZXQgdHlwZSA9IHR5cGVvZihjaWQpXG4gIHJldHVybiB0eXBlID09PSBcIm51bWJlclwiIHx8ICh0eXBlID09PSBcInN0cmluZ1wiICYmIC9eKDB8WzEtOV1cXGQqKSQvLnRlc3QoY2lkKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdER1cGxpY2F0ZUlkcygpe1xuICBsZXQgaWRzID0gbmV3IFNldCgpXG4gIGxldCBlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqW2lkXVwiKVxuICBmb3IobGV0IGkgPSAwLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgaWYoaWRzLmhhcyhlbGVtc1tpXS5pZCkpe1xuICAgICAgY29uc29sZS5lcnJvcihgTXVsdGlwbGUgSURzIGRldGVjdGVkOiAke2VsZW1zW2ldLmlkfS4gRW5zdXJlIHVuaXF1ZSBlbGVtZW50IGlkcy5gKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZHMuYWRkKGVsZW1zW2ldLmlkKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgbGV0IGRlYnVnID0gKHZpZXcsIGtpbmQsIG1zZywgb2JqKSA9PiB7XG4gIGlmKHZpZXcubGl2ZVNvY2tldC5pc0RlYnVnRW5hYmxlZCgpKXtcbiAgICBjb25zb2xlLmxvZyhgJHt2aWV3LmlkfSAke2tpbmR9OiAke21zZ30gLSBgLCBvYmopXG4gIH1cbn1cblxuLy8gd3JhcHMgdmFsdWUgaW4gY2xvc3VyZSBvciByZXR1cm5zIGNsb3N1cmVcbmV4cG9ydCBsZXQgY2xvc3VyZSA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIiA/IHZhbCA6IGZ1bmN0aW9uICgpeyByZXR1cm4gdmFsIH1cblxuZXhwb3J0IGxldCBjbG9uZSA9IChvYmopID0+IHsgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSkgfVxuXG5leHBvcnQgbGV0IGNsb3Nlc3RQaHhCaW5kaW5nID0gKGVsLCBiaW5kaW5nLCBib3JkZXJFbCkgPT4ge1xuICBkbyB7XG4gICAgaWYoZWwubWF0Y2hlcyhgWyR7YmluZGluZ31dYCkgJiYgIWVsLmRpc2FibGVkKXsgcmV0dXJuIGVsIH1cbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQgfHwgZWwucGFyZW50Tm9kZVxuICB9IHdoaWxlKGVsICE9PSBudWxsICYmIGVsLm5vZGVUeXBlID09PSAxICYmICEoKGJvcmRlckVsICYmIGJvcmRlckVsLmlzU2FtZU5vZGUoZWwpKSB8fCBlbC5tYXRjaGVzKFBIWF9WSUVXX1NFTEVDVE9SKSkpXG4gIHJldHVybiBudWxsXG59XG5cbmV4cG9ydCBsZXQgaXNPYmplY3QgPSAob2JqKSA9PiB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiAhKG9iaiBpbnN0YW5jZW9mIEFycmF5KVxufVxuXG5leHBvcnQgbGV0IGlzRXF1YWxPYmogPSAob2JqMSwgb2JqMikgPT4gSlNPTi5zdHJpbmdpZnkob2JqMSkgPT09IEpTT04uc3RyaW5naWZ5KG9iajIpXG5cbmV4cG9ydCBsZXQgaXNFbXB0eSA9IChvYmopID0+IHtcbiAgZm9yKGxldCB4IGluIG9iail7IHJldHVybiBmYWxzZSB9XG4gIHJldHVybiB0cnVlXG59XG5cbmV4cG9ydCBsZXQgbWF5YmUgPSAoZWwsIGNhbGxiYWNrKSA9PiBlbCAmJiBjYWxsYmFjayhlbClcblxuZXhwb3J0IGxldCBjaGFubmVsVXBsb2FkZXIgPSBmdW5jdGlvbiAoZW50cmllcywgb25FcnJvciwgcmVzcCwgbGl2ZVNvY2tldCl7XG4gIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgbGV0IGVudHJ5VXBsb2FkZXIgPSBuZXcgRW50cnlVcGxvYWRlcihlbnRyeSwgcmVzcC5jb25maWcuY2h1bmtfc2l6ZSwgbGl2ZVNvY2tldClcbiAgICBlbnRyeVVwbG9hZGVyLnVwbG9hZCgpXG4gIH0pXG59XG4iLCAibGV0IEJyb3dzZXIgPSB7XG4gIGNhblB1c2hTdGF0ZSgpeyByZXR1cm4gKHR5cGVvZiAoaGlzdG9yeS5wdXNoU3RhdGUpICE9PSBcInVuZGVmaW5lZFwiKSB9LFxuXG4gIGRyb3BMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5KXtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5sb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSkpXG4gIH0sXG5cbiAgdXBkYXRlTG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSwgaW5pdGlhbCwgZnVuYyl7XG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLmdldExvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXkpXG4gICAgbGV0IGtleSA9IHRoaXMubG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpXG4gICAgbGV0IG5ld1ZhbCA9IGN1cnJlbnQgPT09IG51bGwgPyBpbml0aWFsIDogZnVuYyhjdXJyZW50KVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkobmV3VmFsKSlcbiAgICByZXR1cm4gbmV3VmFsXG4gIH0sXG5cbiAgZ2V0TG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSl7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5sb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSkpKVxuICB9LFxuXG4gIHVwZGF0ZUN1cnJlbnRTdGF0ZShjYWxsYmFjayl7XG4gICAgaWYoIXRoaXMuY2FuUHVzaFN0YXRlKCkpeyByZXR1cm4gfVxuICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKGNhbGxiYWNrKGhpc3Rvcnkuc3RhdGUgfHwge30pLCBcIlwiLCB3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgfSxcblxuICBwdXNoU3RhdGUoa2luZCwgbWV0YSwgdG8pe1xuICAgIGlmKHRoaXMuY2FuUHVzaFN0YXRlKCkpe1xuICAgICAgaWYodG8gIT09IHdpbmRvdy5sb2NhdGlvbi5ocmVmKXtcbiAgICAgICAgaWYobWV0YS50eXBlID09IFwicmVkaXJlY3RcIiAmJiBtZXRhLnNjcm9sbCl7XG4gICAgICAgICAgLy8gSWYgd2UncmUgcmVkaXJlY3Rpbmcgc3RvcmUgdGhlIGN1cnJlbnQgc2Nyb2xsWSBmb3IgdGhlIGN1cnJlbnQgaGlzdG9yeSBzdGF0ZS5cbiAgICAgICAgICBsZXQgY3VycmVudFN0YXRlID0gaGlzdG9yeS5zdGF0ZSB8fCB7fVxuICAgICAgICAgIGN1cnJlbnRTdGF0ZS5zY3JvbGwgPSBtZXRhLnNjcm9sbFxuICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKGN1cnJlbnRTdGF0ZSwgXCJcIiwgd2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgbWV0YS5zY3JvbGwgLy8gT25seSBzdG9yZSB0aGUgc2Nyb2xsIGluIHRoZSByZWRpcmVjdCBjYXNlLlxuICAgICAgICBoaXN0b3J5W2tpbmQgKyBcIlN0YXRlXCJdKG1ldGEsIFwiXCIsIHRvIHx8IG51bGwpIC8vIElFIHdpbGwgY29lcmNlIHVuZGVmaW5lZCB0byBzdHJpbmdcbiAgICAgICAgbGV0IGhhc2hFbCA9IHRoaXMuZ2V0SGFzaFRhcmdldEVsKHdpbmRvdy5sb2NhdGlvbi5oYXNoKVxuXG4gICAgICAgIGlmKGhhc2hFbCl7XG4gICAgICAgICAgaGFzaEVsLnNjcm9sbEludG9WaWV3KClcbiAgICAgICAgfSBlbHNlIGlmKG1ldGEudHlwZSA9PT0gXCJyZWRpcmVjdFwiKXtcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsKDAsIDApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWRpcmVjdCh0bylcbiAgICB9XG4gIH0sXG5cbiAgc2V0Q29va2llKG5hbWUsIHZhbHVlKXtcbiAgICBkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lfT0ke3ZhbHVlfWBcbiAgfSxcblxuICBnZXRDb29raWUobmFtZSl7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKG5ldyBSZWdFeHAoYCg/Oig/Ol58Lio7XFxzKikke25hbWV9XFxzKlxcPVxccyooW147XSopLiokKXxeLiokYCksIFwiJDFcIilcbiAgfSxcblxuICByZWRpcmVjdCh0b1VSTCwgZmxhc2gpe1xuICAgIGlmKGZsYXNoKXsgQnJvd3Nlci5zZXRDb29raWUoXCJfX3Bob2VuaXhfZmxhc2hfX1wiLCBmbGFzaCArIFwiOyBtYXgtYWdlPTYwMDAwOyBwYXRoPS9cIikgfVxuICAgIHdpbmRvdy5sb2NhdGlvbiA9IHRvVVJMXG4gIH0sXG5cbiAgbG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpeyByZXR1cm4gYCR7bmFtZXNwYWNlfS0ke3N1YmtleX1gIH0sXG5cbiAgZ2V0SGFzaFRhcmdldEVsKG1heWJlSGFzaCl7XG4gICAgbGV0IGhhc2ggPSBtYXliZUhhc2gudG9TdHJpbmcoKS5zdWJzdHJpbmcoMSlcbiAgICBpZihoYXNoID09PSBcIlwiKXsgcmV0dXJuIH1cbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaCkgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtuYW1lPVwiJHtoYXNofVwiXWApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclxuIiwgImltcG9ydCB7XG4gIENIRUNLQUJMRV9JTlBVVFMsXG4gIERFQk9VTkNFX1BSRVZfS0VZLFxuICBERUJPVU5DRV9UUklHR0VSLFxuICBGT0NVU0FCTEVfSU5QVVRTLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfRVZFTlRfQ0xBU1NFUyxcbiAgUEhYX0hBU19GT0NVU0VELFxuICBQSFhfSEFTX1NVQk1JVFRFRCxcbiAgUEhYX01BSU4sXG4gIFBIWF9OT19GRUVEQkFDS19DTEFTUyxcbiAgUEhYX1BBUkVOVF9JRCxcbiAgUEhYX1BSSVZBVEUsXG4gIFBIWF9SRUYsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9VUExPQURfUkVGLFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX1NUSUNLWSxcbiAgVEhST1RUTEVEXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxubGV0IERPTSA9IHtcbiAgYnlJZChpZCl7IHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgfHwgbG9nRXJyb3IoYG5vIGlkIGZvdW5kIGZvciAke2lkfWApIH0sXG5cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSl7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpXG4gICAgaWYoZWwuY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMCl7IGVsLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpIH1cbiAgfSxcblxuICBhbGwobm9kZSwgcXVlcnksIGNhbGxiYWNrKXtcbiAgICBpZighbm9kZSl7IHJldHVybiBbXSB9XG4gICAgbGV0IGFycmF5ID0gQXJyYXkuZnJvbShub2RlLnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpKVxuICAgIHJldHVybiBjYWxsYmFjayA/IGFycmF5LmZvckVhY2goY2FsbGJhY2spIDogYXJyYXlcbiAgfSxcblxuICBjaGlsZE5vZGVMZW5ndGgoaHRtbCl7XG4gICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpXG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbFxuICAgIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmNoaWxkRWxlbWVudENvdW50XG4gIH0sXG5cbiAgaXNVcGxvYWRJbnB1dChlbCl7IHJldHVybiBlbC50eXBlID09PSBcImZpbGVcIiAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpICE9PSBudWxsIH0sXG5cbiAgZmluZFVwbG9hZElucHV0cyhub2RlKXsgcmV0dXJuIHRoaXMuYWxsKG5vZGUsIGBpbnB1dFt0eXBlPVwiZmlsZVwiXVske1BIWF9VUExPQURfUkVGfV1gKSB9LFxuXG4gIGZpbmRDb21wb25lbnROb2RlTGlzdChub2RlLCBjaWQpe1xuICAgIHJldHVybiB0aGlzLmZpbHRlcldpdGhpblNhbWVMaXZlVmlldyh0aGlzLmFsbChub2RlLCBgWyR7UEhYX0NPTVBPTkVOVH09XCIke2NpZH1cIl1gKSwgbm9kZSlcbiAgfSxcblxuICBpc1BoeERlc3Ryb3llZChub2RlKXtcbiAgICByZXR1cm4gbm9kZS5pZCAmJiBET00ucHJpdmF0ZShub2RlLCBcImRlc3Ryb3llZFwiKSA/IHRydWUgOiBmYWxzZVxuICB9LFxuXG4gIHdhbnRzTmV3VGFiKGUpe1xuICAgIGxldCB3YW50c05ld1RhYiA9IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5IHx8IGUubWV0YUtleSB8fCAoZS5idXR0b24gJiYgZS5idXR0b24gPT09IDEpXG4gICAgcmV0dXJuIHdhbnRzTmV3VGFiIHx8IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcInRhcmdldFwiKSA9PT0gXCJfYmxhbmtcIlxuICB9LFxuXG4gIGlzVW5sb2FkYWJsZUZvcm1TdWJtaXQoZSl7XG4gICAgcmV0dXJuICFlLmRlZmF1bHRQcmV2ZW50ZWQgJiYgIXRoaXMud2FudHNOZXdUYWIoZSlcbiAgfSxcblxuICBpc05ld1BhZ2VIcmVmKGhyZWYsIGN1cnJlbnRMb2NhdGlvbil7XG4gICAgbGV0IHVybFxuICAgIHRyeSB7XG4gICAgICB1cmwgPSBuZXcgVVJMKGhyZWYpXG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB1cmwgPSBuZXcgVVJMKGhyZWYsIGN1cnJlbnRMb2NhdGlvbilcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAvLyBiYWQgVVJMLCBmYWxsYmFjayB0byBsZXQgYnJvd3NlciB0cnkgaXQgYXMgZXh0ZXJuYWxcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih1cmwuaG9zdCA9PT0gY3VycmVudExvY2F0aW9uLmhvc3QgJiYgdXJsLnByb3RvY29sID09PSBjdXJyZW50TG9jYXRpb24ucHJvdG9jb2wpe1xuICAgICAgaWYodXJsLnBhdGhuYW1lID09PSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUgJiYgdXJsLnNlYXJjaCA9PT0gY3VycmVudExvY2F0aW9uLnNlYXJjaCl7XG4gICAgICAgIHJldHVybiB1cmwuaGFzaCA9PT0gXCJcIiAmJiAhdXJsLmhyZWYuZW5kc1dpdGgoXCIjXCIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH0sXG5cbiAgbWFya1BoeENoaWxkRGVzdHJveWVkKGVsKXtcbiAgICBpZih0aGlzLmlzUGh4Q2hpbGQoZWwpKXsgZWwuc2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OLCBcIlwiKSB9XG4gICAgdGhpcy5wdXRQcml2YXRlKGVsLCBcImRlc3Ryb3llZFwiLCB0cnVlKVxuICB9LFxuXG4gIGZpbmRQaHhDaGlsZHJlbkluRnJhZ21lbnQoaHRtbCwgcGFyZW50SWQpe1xuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcbiAgICByZXR1cm4gdGhpcy5maW5kUGh4Q2hpbGRyZW4odGVtcGxhdGUuY29udGVudCwgcGFyZW50SWQpXG4gIH0sXG5cbiAgaXNJZ25vcmVkKGVsLCBwaHhVcGRhdGUpe1xuICAgIHJldHVybiAoZWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkgfHwgZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtdXBkYXRlXCIpKSA9PT0gXCJpZ25vcmVcIlxuICB9LFxuXG4gIGlzUGh4VXBkYXRlKGVsLCBwaHhVcGRhdGUsIHVwZGF0ZVR5cGVzKXtcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlICYmIHVwZGF0ZVR5cGVzLmluZGV4T2YoZWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkpID49IDBcbiAgfSxcblxuICBmaW5kUGh4U3RpY2t5KGVsKXsgcmV0dXJuIHRoaXMuYWxsKGVsLCBgWyR7UEhYX1NUSUNLWX1dYCkgfSxcblxuICBmaW5kUGh4Q2hpbGRyZW4oZWwsIHBhcmVudElkKXtcbiAgICByZXR1cm4gdGhpcy5hbGwoZWwsIGAke1BIWF9WSUVXX1NFTEVDVE9SfVske1BIWF9QQVJFTlRfSUR9PVwiJHtwYXJlbnRJZH1cIl1gKVxuICB9LFxuXG4gIGZpbmRQYXJlbnRDSURzKG5vZGUsIGNpZHMpe1xuICAgIGxldCBpbml0aWFsID0gbmV3IFNldChjaWRzKVxuICAgIGxldCBwYXJlbnRDaWRzID1cbiAgICAgIGNpZHMucmVkdWNlKChhY2MsIGNpZCkgPT4ge1xuICAgICAgICBsZXQgc2VsZWN0b3IgPSBgWyR7UEhYX0NPTVBPTkVOVH09XCIke2NpZH1cIl0gWyR7UEhYX0NPTVBPTkVOVH1dYFxuXG4gICAgICAgIHRoaXMuZmlsdGVyV2l0aGluU2FtZUxpdmVWaWV3KHRoaXMuYWxsKG5vZGUsIHNlbGVjdG9yKSwgbm9kZSlcbiAgICAgICAgICAubWFwKGVsID0+IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKSkpXG4gICAgICAgICAgLmZvckVhY2goY2hpbGRDSUQgPT4gYWNjLmRlbGV0ZShjaGlsZENJRCkpXG5cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwgaW5pdGlhbClcblxuICAgIHJldHVybiBwYXJlbnRDaWRzLnNpemUgPT09IDAgPyBuZXcgU2V0KGNpZHMpIDogcGFyZW50Q2lkc1xuICB9LFxuXG4gIGZpbHRlcldpdGhpblNhbWVMaXZlVmlldyhub2RlcywgcGFyZW50KXtcbiAgICBpZihwYXJlbnQucXVlcnlTZWxlY3RvcihQSFhfVklFV19TRUxFQ1RPUikpe1xuICAgICAgcmV0dXJuIG5vZGVzLmZpbHRlcihlbCA9PiB0aGlzLndpdGhpblNhbWVMaXZlVmlldyhlbCwgcGFyZW50KSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGVzXG4gICAgfVxuICB9LFxuXG4gIHdpdGhpblNhbWVMaXZlVmlldyhub2RlLCBwYXJlbnQpe1xuICAgIHdoaWxlKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpe1xuICAgICAgaWYobm9kZS5pc1NhbWVOb2RlKHBhcmVudCkpeyByZXR1cm4gdHJ1ZSB9XG4gICAgICBpZihub2RlLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgIT09IG51bGwpeyByZXR1cm4gZmFsc2UgfVxuICAgIH1cbiAgfSxcblxuICBwcml2YXRlKGVsLCBrZXkpeyByZXR1cm4gZWxbUEhYX1BSSVZBVEVdICYmIGVsW1BIWF9QUklWQVRFXVtrZXldIH0sXG5cbiAgZGVsZXRlUHJpdmF0ZShlbCwga2V5KXsgZWxbUEhYX1BSSVZBVEVdICYmIGRlbGV0ZSAoZWxbUEhYX1BSSVZBVEVdW2tleV0pIH0sXG5cbiAgcHV0UHJpdmF0ZShlbCwga2V5LCB2YWx1ZSl7XG4gICAgaWYoIWVsW1BIWF9QUklWQVRFXSl7IGVsW1BIWF9QUklWQVRFXSA9IHt9IH1cbiAgICBlbFtQSFhfUFJJVkFURV1ba2V5XSA9IHZhbHVlXG4gIH0sXG5cbiAgdXBkYXRlUHJpdmF0ZShlbCwga2V5LCBkZWZhdWx0VmFsLCB1cGRhdGVGdW5jKXtcbiAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLnByaXZhdGUoZWwsIGtleSlcbiAgICBpZihleGlzdGluZyA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCB1cGRhdGVGdW5jKGRlZmF1bHRWYWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgdXBkYXRlRnVuYyhleGlzdGluZykpXG4gICAgfVxuICB9LFxuXG4gIGNvcHlQcml2YXRlcyh0YXJnZXQsIHNvdXJjZSl7XG4gICAgaWYoc291cmNlW1BIWF9QUklWQVRFXSl7XG4gICAgICB0YXJnZXRbUEhYX1BSSVZBVEVdID0gc291cmNlW1BIWF9QUklWQVRFXVxuICAgIH1cbiAgfSxcblxuICBwdXRUaXRsZShzdHIpe1xuICAgIGxldCB0aXRsZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInRpdGxlXCIpXG4gICAgaWYodGl0bGVFbCl7XG4gICAgICBsZXQge3ByZWZpeCwgc3VmZml4fSA9IHRpdGxlRWwuZGF0YXNldFxuICAgICAgZG9jdW1lbnQudGl0bGUgPSBgJHtwcmVmaXggfHwgXCJcIn0ke3N0cn0ke3N1ZmZpeCB8fCBcIlwifWBcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQudGl0bGUgPSBzdHJcbiAgICB9XG4gIH0sXG5cbiAgZGVib3VuY2UoZWwsIGV2ZW50LCBwaHhEZWJvdW5jZSwgZGVmYXVsdERlYm91bmNlLCBwaHhUaHJvdHRsZSwgZGVmYXVsdFRocm90dGxlLCBhc3luY0ZpbHRlciwgY2FsbGJhY2spe1xuICAgIGxldCBkZWJvdW5jZSA9IGVsLmdldEF0dHJpYnV0ZShwaHhEZWJvdW5jZSlcbiAgICBsZXQgdGhyb3R0bGUgPSBlbC5nZXRBdHRyaWJ1dGUocGh4VGhyb3R0bGUpXG4gICAgaWYoZGVib3VuY2UgPT09IFwiXCIpeyBkZWJvdW5jZSA9IGRlZmF1bHREZWJvdW5jZSB9XG4gICAgaWYodGhyb3R0bGUgPT09IFwiXCIpeyB0aHJvdHRsZSA9IGRlZmF1bHRUaHJvdHRsZSB9XG4gICAgbGV0IHZhbHVlID0gZGVib3VuY2UgfHwgdGhyb3R0bGVcbiAgICBzd2l0Y2godmFsdWUpe1xuICAgICAgY2FzZSBudWxsOiByZXR1cm4gY2FsbGJhY2soKVxuXG4gICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiZGVib3VuY2UtYmx1clwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4gY2FsbGJhY2soKSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGV0IHRpbWVvdXQgPSBwYXJzZUludCh2YWx1ZSlcbiAgICAgICAgbGV0IHRyaWdnZXIgPSAoKSA9PiB0aHJvdHRsZSA/IHRoaXMuZGVsZXRlUHJpdmF0ZShlbCwgVEhST1RUTEVEKSA6IGNhbGxiYWNrKClcbiAgICAgICAgbGV0IGN1cnJlbnRDeWNsZSA9IHRoaXMuaW5jQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIsIHRyaWdnZXIpXG4gICAgICAgIGlmKGlzTmFOKHRpbWVvdXQpKXsgcmV0dXJuIGxvZ0Vycm9yKGBpbnZhbGlkIHRocm90dGxlL2RlYm91bmNlIHZhbHVlOiAke3ZhbHVlfWApIH1cbiAgICAgICAgaWYodGhyb3R0bGUpe1xuICAgICAgICAgIGxldCBuZXdLZXlEb3duID0gZmFsc2VcbiAgICAgICAgICBpZihldmVudC50eXBlID09PSBcImtleWRvd25cIil7XG4gICAgICAgICAgICBsZXQgcHJldktleSA9IHRoaXMucHJpdmF0ZShlbCwgREVCT1VOQ0VfUFJFVl9LRVkpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIERFQk9VTkNFX1BSRVZfS0VZLCBldmVudC5rZXkpXG4gICAgICAgICAgICBuZXdLZXlEb3duID0gcHJldktleSAhPT0gZXZlbnQua2V5XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoIW5ld0tleURvd24gJiYgdGhpcy5wcml2YXRlKGVsLCBUSFJPVFRMRUQpKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIFRIUk9UVExFRCwgdHJ1ZSlcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBpZihhc3luY0ZpbHRlcigpKXsgdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIpIH1cbiAgICAgICAgICAgIH0sIHRpbWVvdXQpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYoYXN5bmNGaWx0ZXIoKSl7IHRoaXMudHJpZ2dlckN5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSLCBjdXJyZW50Q3ljbGUpIH1cbiAgICAgICAgICB9LCB0aW1lb3V0KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZvcm0gPSBlbC5mb3JtXG4gICAgICAgIGlmKGZvcm0gJiYgdGhpcy5vbmNlKGZvcm0sIFwiYmluZC1kZWJvdW5jZVwiKSl7XG4gICAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsICgpID0+IHtcbiAgICAgICAgICAgIEFycmF5LmZyb20oKG5ldyBGb3JtRGF0YShmb3JtKSkuZW50cmllcygpLCAoW25hbWVdKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBpbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke25hbWV9XCJdYClcbiAgICAgICAgICAgICAgdGhpcy5pbmNDeWNsZShpbnB1dCwgREVCT1VOQ0VfVFJJR0dFUilcbiAgICAgICAgICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBUSFJPVFRMRUQpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5vbmNlKGVsLCBcImJpbmQtZGVib3VuY2VcIikpe1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsICgpID0+IHRoaXMudHJpZ2dlckN5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSKSlcbiAgICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB0cmlnZ2VyQ3ljbGUoZWwsIGtleSwgY3VycmVudEN5Y2xlKXtcbiAgICBsZXQgW2N5Y2xlLCB0cmlnZ2VyXSA9IHRoaXMucHJpdmF0ZShlbCwga2V5KVxuICAgIGlmKCFjdXJyZW50Q3ljbGUpeyBjdXJyZW50Q3ljbGUgPSBjeWNsZSB9XG4gICAgaWYoY3VycmVudEN5Y2xlID09PSBjeWNsZSl7XG4gICAgICB0aGlzLmluY0N5Y2xlKGVsLCBrZXkpXG4gICAgICB0cmlnZ2VyKClcbiAgICB9XG4gIH0sXG5cbiAgb25jZShlbCwga2V5KXtcbiAgICBpZih0aGlzLnByaXZhdGUoZWwsIGtleSkgPT09IHRydWUpeyByZXR1cm4gZmFsc2UgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCB0cnVlKVxuICAgIHJldHVybiB0cnVlXG4gIH0sXG5cbiAgaW5jQ3ljbGUoZWwsIGtleSwgdHJpZ2dlciA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICBsZXQgW2N1cnJlbnRDeWNsZV0gPSB0aGlzLnByaXZhdGUoZWwsIGtleSkgfHwgWzAsIHRyaWdnZXJdXG4gICAgY3VycmVudEN5Y2xlKytcbiAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgW2N1cnJlbnRDeWNsZSwgdHJpZ2dlcl0pXG4gICAgcmV0dXJuIGN1cnJlbnRDeWNsZVxuICB9LFxuXG4gIGRpc2NhcmRFcnJvcihjb250YWluZXIsIGVsLCBwaHhGZWVkYmFja0Zvcil7XG4gICAgbGV0IGZpZWxkID0gZWwuZ2V0QXR0cmlidXRlICYmIGVsLmdldEF0dHJpYnV0ZShwaHhGZWVkYmFja0ZvcilcbiAgICAvLyBUT0RPOiBSZW1vdmUgaWQgbG9va3VwIGFmdGVyIHdlIHVwZGF0ZSBQaG9lbml4IHRvIHVzZSBpbnB1dF9uYW1lIGluc3RlYWQgb2YgaW5wdXRfaWRcbiAgICBsZXQgaW5wdXQgPSBmaWVsZCAmJiBjb250YWluZXIucXVlcnlTZWxlY3RvcihgW2lkPVwiJHtmaWVsZH1cIl0sIFtuYW1lPVwiJHtmaWVsZH1cIl0sIFtuYW1lPVwiJHtmaWVsZH1bXVwiXWApXG4gICAgaWYoIWlucHV0KXsgcmV0dXJuIH1cblxuICAgIGlmKCEodGhpcy5wcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQpIHx8IHRoaXMucHJpdmF0ZShpbnB1dCwgUEhYX0hBU19TVUJNSVRURUQpKSl7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKFBIWF9OT19GRUVEQkFDS19DTEFTUylcbiAgICB9XG4gIH0sXG5cbiAgcmVzZXRGb3JtKGZvcm0sIHBoeEZlZWRiYWNrRm9yKXtcbiAgICBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgbGV0IHF1ZXJ5ID0gYFske3BoeEZlZWRiYWNrRm9yfT1cIiR7aW5wdXQuaWR9XCJdLFxuICAgICAgICAgICAgICAgICAgIFske3BoeEZlZWRiYWNrRm9yfT1cIiR7aW5wdXQubmFtZX1cIl0sXG4gICAgICAgICAgICAgICAgICAgWyR7cGh4RmVlZGJhY2tGb3J9PVwiJHtpbnB1dC5uYW1lLnJlcGxhY2UoL1xcW1xcXSQvLCBcIlwiKX1cIl1gXG5cbiAgICAgIHRoaXMuZGVsZXRlUHJpdmF0ZShpbnB1dCwgUEhYX0hBU19GT0NVU0VEKVxuICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBQSFhfSEFTX1NVQk1JVFRFRClcbiAgICAgIHRoaXMuYWxsKGRvY3VtZW50LCBxdWVyeSwgZmVlZGJhY2tFbCA9PiB7XG4gICAgICAgIGZlZWRiYWNrRWwuY2xhc3NMaXN0LmFkZChQSFhfTk9fRkVFREJBQ0tfQ0xBU1MpXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgc2hvd0Vycm9yKGlucHV0RWwsIHBoeEZlZWRiYWNrRm9yKXtcbiAgICBpZihpbnB1dEVsLmlkIHx8IGlucHV0RWwubmFtZSl7XG4gICAgICB0aGlzLmFsbChpbnB1dEVsLmZvcm0sIGBbJHtwaHhGZWVkYmFja0Zvcn09XCIke2lucHV0RWwuaWR9XCJdLCBbJHtwaHhGZWVkYmFja0Zvcn09XCIke2lucHV0RWwubmFtZX1cIl1gLCAoZWwpID0+IHtcbiAgICAgICAgdGhpcy5yZW1vdmVDbGFzcyhlbCwgUEhYX05PX0ZFRURCQUNLX0NMQVNTKVxuICAgICAgfSlcbiAgICB9XG4gIH0sXG5cbiAgaXNQaHhDaGlsZChub2RlKXtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRClcbiAgfSxcblxuICBpc1BoeFN0aWNreShub2RlKXtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1NUSUNLWSkgIT09IG51bGxcbiAgfSxcblxuICBmaXJzdFBoeENoaWxkKGVsKXtcbiAgICByZXR1cm4gdGhpcy5pc1BoeENoaWxkKGVsKSA/IGVsIDogdGhpcy5hbGwoZWwsIGBbJHtQSFhfUEFSRU5UX0lEfV1gKVswXVxuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQodGFyZ2V0LCBuYW1lLCBvcHRzID0ge30pe1xuICAgIGxldCBidWJibGVzID0gb3B0cy5idWJibGVzID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRzLmJ1YmJsZXNcbiAgICBsZXQgZXZlbnRPcHRzID0ge2J1YmJsZXM6IGJ1YmJsZXMsIGNhbmNlbGFibGU6IHRydWUsIGRldGFpbDogb3B0cy5kZXRhaWwgfHwge319XG4gICAgbGV0IGV2ZW50ID0gbmFtZSA9PT0gXCJjbGlja1wiID8gbmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiLCBldmVudE9wdHMpIDogbmV3IEN1c3RvbUV2ZW50KG5hbWUsIGV2ZW50T3B0cylcbiAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudClcbiAgfSxcblxuICBjbG9uZU5vZGUobm9kZSwgaHRtbCl7XG4gICAgaWYodHlwZW9mIChodG1sKSA9PT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICByZXR1cm4gbm9kZS5jbG9uZU5vZGUodHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGNsb25lZCA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKVxuICAgICAgY2xvbmVkLmlubmVySFRNTCA9IGh0bWxcbiAgICAgIHJldHVybiBjbG9uZWRcbiAgICB9XG4gIH0sXG5cbiAgbWVyZ2VBdHRycyh0YXJnZXQsIHNvdXJjZSwgb3B0cyA9IHt9KXtcbiAgICBsZXQgZXhjbHVkZSA9IG9wdHMuZXhjbHVkZSB8fCBbXVxuICAgIGxldCBpc0lnbm9yZWQgPSBvcHRzLmlzSWdub3JlZFxuICAgIGxldCBzb3VyY2VBdHRycyA9IHNvdXJjZS5hdHRyaWJ1dGVzXG4gICAgZm9yKGxldCBpID0gc291cmNlQXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgbGV0IG5hbWUgPSBzb3VyY2VBdHRyc1tpXS5uYW1lXG4gICAgICBpZihleGNsdWRlLmluZGV4T2YobmFtZSkgPCAwKXsgdGFyZ2V0LnNldEF0dHJpYnV0ZShuYW1lLCBzb3VyY2UuZ2V0QXR0cmlidXRlKG5hbWUpKSB9XG4gICAgfVxuXG4gICAgbGV0IHRhcmdldEF0dHJzID0gdGFyZ2V0LmF0dHJpYnV0ZXNcbiAgICBmb3IobGV0IGkgPSB0YXJnZXRBdHRycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG4gICAgICBsZXQgbmFtZSA9IHRhcmdldEF0dHJzW2ldLm5hbWVcbiAgICAgIGlmKGlzSWdub3JlZCl7XG4gICAgICAgIGlmKG5hbWUuc3RhcnRzV2l0aChcImRhdGEtXCIpICYmICFzb3VyY2UuaGFzQXR0cmlidXRlKG5hbWUpKXsgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShuYW1lKSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZighc291cmNlLmhhc0F0dHJpYnV0ZShuYW1lKSl7IHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUobmFtZSkgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBtZXJnZUZvY3VzZWRJbnB1dCh0YXJnZXQsIHNvdXJjZSl7XG4gICAgLy8gc2tpcCBzZWxlY3RzIGJlY2F1c2UgRkYgd2lsbCByZXNldCBoaWdobGlnaHRlZCBpbmRleCBmb3IgYW55IHNldEF0dHJpYnV0ZVxuICAgIGlmKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpKXsgRE9NLm1lcmdlQXR0cnModGFyZ2V0LCBzb3VyY2UsIHtleGNsdWRlOiBbXCJ2YWx1ZVwiXX0pIH1cbiAgICBpZihzb3VyY2UucmVhZE9ubHkpe1xuICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInJlYWRvbmx5XCIsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJyZWFkb25seVwiKVxuICAgIH1cbiAgfSxcblxuICBoYXNTZWxlY3Rpb25SYW5nZShlbCl7XG4gICAgcmV0dXJuIGVsLnNldFNlbGVjdGlvblJhbmdlICYmIChlbC50eXBlID09PSBcInRleHRcIiB8fCBlbC50eXBlID09PSBcInRleHRhcmVhXCIpXG4gIH0sXG5cbiAgcmVzdG9yZUZvY3VzKGZvY3VzZWQsIHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpe1xuICAgIGlmKCFET00uaXNUZXh0dWFsSW5wdXQoZm9jdXNlZCkpeyByZXR1cm4gfVxuICAgIGxldCB3YXNGb2N1c2VkID0gZm9jdXNlZC5tYXRjaGVzKFwiOmZvY3VzXCIpXG4gICAgaWYoZm9jdXNlZC5yZWFkT25seSl7IGZvY3VzZWQuYmx1cigpIH1cbiAgICBpZighd2FzRm9jdXNlZCl7IGZvY3VzZWQuZm9jdXMoKSB9XG4gICAgaWYodGhpcy5oYXNTZWxlY3Rpb25SYW5nZShmb2N1c2VkKSl7XG4gICAgICBmb2N1c2VkLnNldFNlbGVjdGlvblJhbmdlKHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpXG4gICAgfVxuICB9LFxuXG4gIGlzRm9ybUlucHV0KGVsKXsgcmV0dXJuIC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhKSQvaS50ZXN0KGVsLnRhZ05hbWUpICYmIGVsLnR5cGUgIT09IFwiYnV0dG9uXCIgfSxcblxuICBzeW5jQXR0cnNUb1Byb3BzKGVsKXtcbiAgICBpZihlbCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgQ0hFQ0tBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKSkgPj0gMCl7XG4gICAgICBlbC5jaGVja2VkID0gZWwuZ2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiKSAhPT0gbnVsbFxuICAgIH1cbiAgfSxcblxuICBpc1RleHR1YWxJbnB1dChlbCl7IHJldHVybiBGT0NVU0FCTEVfSU5QVVRTLmluZGV4T2YoZWwudHlwZSkgPj0gMCB9LFxuXG4gIGlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChlbCwgcGh4VHJpZ2dlckV4dGVybmFsKXtcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlICYmIGVsLmdldEF0dHJpYnV0ZShwaHhUcmlnZ2VyRXh0ZXJuYWwpICE9PSBudWxsXG4gIH0sXG5cbiAgc3luY1BlbmRpbmdSZWYoZnJvbUVsLCB0b0VsLCBkaXNhYmxlV2l0aCl7XG4gICAgbGV0IHJlZiA9IGZyb21FbC5nZXRBdHRyaWJ1dGUoUEhYX1JFRilcbiAgICBpZihyZWYgPT09IG51bGwpeyByZXR1cm4gdHJ1ZSB9XG4gICAgbGV0IHJlZlNyYyA9IGZyb21FbC5nZXRBdHRyaWJ1dGUoUEhYX1JFRl9TUkMpXG5cbiAgICBpZihET00uaXNGb3JtSW5wdXQoZnJvbUVsKSB8fCBmcm9tRWwuZ2V0QXR0cmlidXRlKGRpc2FibGVXaXRoKSAhPT0gbnVsbCl7XG4gICAgICBpZihET00uaXNVcGxvYWRJbnB1dChmcm9tRWwpKXsgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7aXNJZ25vcmVkOiB0cnVlfSkgfVxuICAgICAgRE9NLnB1dFByaXZhdGUoZnJvbUVsLCBQSFhfUkVGLCB0b0VsKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIFBIWF9FVkVOVF9DTEFTU0VTLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgICAgZnJvbUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpICYmIHRvRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpXG4gICAgICB9KVxuICAgICAgdG9FbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRiwgcmVmKVxuICAgICAgdG9FbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9TUkMsIHJlZlNyYylcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9LFxuXG4gIGNsZWFuQ2hpbGROb2Rlcyhjb250YWluZXIsIHBoeFVwZGF0ZSl7XG4gICAgaWYoRE9NLmlzUGh4VXBkYXRlKGNvbnRhaW5lciwgcGh4VXBkYXRlLCBbXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICBsZXQgdG9SZW1vdmUgPSBbXVxuICAgICAgY29udGFpbmVyLmNoaWxkTm9kZXMuZm9yRWFjaChjaGlsZE5vZGUgPT4ge1xuICAgICAgICBpZighY2hpbGROb2RlLmlkKXtcbiAgICAgICAgICAvLyBTa2lwIHdhcm5pbmcgaWYgaXQncyBhbiBlbXB0eSB0ZXh0IG5vZGUgKGUuZy4gYSBuZXctbGluZSlcbiAgICAgICAgICBsZXQgaXNFbXB0eVRleHROb2RlID0gY2hpbGROb2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBjaGlsZE5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gXCJcIlxuICAgICAgICAgIGlmKCFpc0VtcHR5VGV4dE5vZGUpe1xuICAgICAgICAgICAgbG9nRXJyb3IoXCJvbmx5IEhUTUwgZWxlbWVudCB0YWdzIHdpdGggYW4gaWQgYXJlIGFsbG93ZWQgaW5zaWRlIGNvbnRhaW5lcnMgd2l0aCBwaHgtdXBkYXRlLlxcblxcblwiICtcbiAgICAgICAgICAgICAgYHJlbW92aW5nIGlsbGVnYWwgbm9kZTogXCIkeyhjaGlsZE5vZGUub3V0ZXJIVE1MIHx8IGNoaWxkTm9kZS5ub2RlVmFsdWUpLnRyaW0oKX1cIlxcblxcbmApXG4gICAgICAgICAgfVxuICAgICAgICAgIHRvUmVtb3ZlLnB1c2goY2hpbGROb2RlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgdG9SZW1vdmUuZm9yRWFjaChjaGlsZE5vZGUgPT4gY2hpbGROb2RlLnJlbW92ZSgpKVxuICAgIH1cbiAgfSxcblxuICByZXBsYWNlUm9vdENvbnRhaW5lcihjb250YWluZXIsIHRhZ05hbWUsIGF0dHJzKXtcbiAgICBsZXQgcmV0YWluZWRBdHRycyA9IG5ldyBTZXQoW1wiaWRcIiwgUEhYX1NFU1NJT04sIFBIWF9TVEFUSUMsIFBIWF9NQUlOLCBQSFhfUk9PVF9JRF0pXG4gICAgaWYoY29udGFpbmVyLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpKXtcbiAgICAgIEFycmF5LmZyb20oY29udGFpbmVyLmF0dHJpYnV0ZXMpXG4gICAgICAgIC5maWx0ZXIoYXR0ciA9PiAhcmV0YWluZWRBdHRycy5oYXMoYXR0ci5uYW1lLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICAuZm9yRWFjaChhdHRyID0+IGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5uYW1lKSlcblxuICAgICAgT2JqZWN0LmtleXMoYXR0cnMpXG4gICAgICAgIC5maWx0ZXIobmFtZSA9PiAhcmV0YWluZWRBdHRycy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKSlcbiAgICAgICAgLmZvckVhY2goYXR0ciA9PiBjb250YWluZXIuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKSlcblxuICAgICAgcmV0dXJuIGNvbnRhaW5lclxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBuZXdDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpXG4gICAgICBPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChhdHRyID0+IG5ld0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pKVxuICAgICAgcmV0YWluZWRBdHRycy5mb3JFYWNoKGF0dHIgPT4gbmV3Q29udGFpbmVyLnNldEF0dHJpYnV0ZShhdHRyLCBjb250YWluZXIuZ2V0QXR0cmlidXRlKGF0dHIpKSlcbiAgICAgIG5ld0NvbnRhaW5lci5pbm5lckhUTUwgPSBjb250YWluZXIuaW5uZXJIVE1MXG4gICAgICBjb250YWluZXIucmVwbGFjZVdpdGgobmV3Q29udGFpbmVyKVxuICAgICAgcmV0dXJuIG5ld0NvbnRhaW5lclxuICAgIH1cbiAgfSxcblxuICBnZXRTdGlja3koZWwsIG5hbWUsIGRlZmF1bHRWYWwpe1xuICAgIGxldCBvcCA9IChET00ucHJpdmF0ZShlbCwgXCJzdGlja3lcIikgfHwgW10pLmZpbmQoKFtleGlzdGluZ05hbWUsIF0pID0+IG5hbWUgPT09IGV4aXN0aW5nTmFtZSlcbiAgICBpZihvcCl7XG4gICAgICBsZXQgW19uYW1lLCBfb3AsIHN0YXNoZWRSZXN1bHRdID0gb3BcbiAgICAgIHJldHVybiBzdGFzaGVkUmVzdWx0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0eXBlb2YoZGVmYXVsdFZhbCkgPT09IFwiZnVuY3Rpb25cIiA/IGRlZmF1bHRWYWwoKSA6IGRlZmF1bHRWYWxcbiAgICB9XG4gIH0sXG5cbiAgZGVsZXRlU3RpY2t5KGVsLCBuYW1lKXtcbiAgICB0aGlzLnVwZGF0ZVByaXZhdGUoZWwsIFwic3RpY2t5XCIsIFtdLCBvcHMgPT4ge1xuICAgICAgcmV0dXJuIG9wcy5maWx0ZXIoKFtleGlzdGluZ05hbWUsIF9dKSA9PiBleGlzdGluZ05hbWUgIT09IG5hbWUpXG4gICAgfSlcbiAgfSxcblxuICBwdXRTdGlja3koZWwsIG5hbWUsIG9wKXtcbiAgICBsZXQgc3Rhc2hlZFJlc3VsdCA9IG9wKGVsKVxuICAgIHRoaXMudXBkYXRlUHJpdmF0ZShlbCwgXCJzdGlja3lcIiwgW10sIG9wcyA9PiB7XG4gICAgICBsZXQgZXhpc3RpbmdJbmRleCA9IG9wcy5maW5kSW5kZXgoKFtleGlzdGluZ05hbWUsIF0pID0+IG5hbWUgPT09IGV4aXN0aW5nTmFtZSlcbiAgICAgIGlmKGV4aXN0aW5nSW5kZXggPj0gMCl7XG4gICAgICAgIG9wc1tleGlzdGluZ0luZGV4XSA9IFtuYW1lLCBvcCwgc3Rhc2hlZFJlc3VsdF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wcy5wdXNoKFtuYW1lLCBvcCwgc3Rhc2hlZFJlc3VsdF0pXG4gICAgICB9XG4gICAgICByZXR1cm4gb3BzXG4gICAgfSlcbiAgfSxcblxuICBhcHBseVN0aWNreU9wZXJhdGlvbnMoZWwpe1xuICAgIGxldCBvcHMgPSBET00ucHJpdmF0ZShlbCwgXCJzdGlja3lcIilcbiAgICBpZighb3BzKXsgcmV0dXJuIH1cblxuICAgIG9wcy5mb3JFYWNoKChbbmFtZSwgb3AsIF9zdGFzaGVkXSkgPT4gdGhpcy5wdXRTdGlja3koZWwsIG5hbWUsIG9wKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBET00iLCAiaW1wb3J0IHtcbiAgUEhYX0FDVElWRV9FTlRSWV9SRUZTLFxuICBQSFhfTElWRV9GSUxFX1VQREFURUQsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNoYW5uZWxVcGxvYWRlcixcbiAgbG9nRXJyb3Jcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVcGxvYWRFbnRyeSB7XG4gIHN0YXRpYyBpc0FjdGl2ZShmaWxlRWwsIGZpbGUpe1xuICAgIGxldCBpc05ldyA9IGZpbGUuX3BoeFJlZiA9PT0gdW5kZWZpbmVkXG4gICAgbGV0IGFjdGl2ZVJlZnMgPSBmaWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9BQ1RJVkVfRU5UUllfUkVGUykuc3BsaXQoXCIsXCIpXG4gICAgbGV0IGlzQWN0aXZlID0gYWN0aXZlUmVmcy5pbmRleE9mKExpdmVVcGxvYWRlci5nZW5GaWxlUmVmKGZpbGUpKSA+PSAwXG4gICAgcmV0dXJuIGZpbGUuc2l6ZSA+IDAgJiYgKGlzTmV3IHx8IGlzQWN0aXZlKVxuICB9XG5cbiAgc3RhdGljIGlzUHJlZmxpZ2h0ZWQoZmlsZUVsLCBmaWxlKXtcbiAgICBsZXQgcHJlZmxpZ2h0ZWRSZWZzID0gZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykuc3BsaXQoXCIsXCIpXG4gICAgbGV0IGlzUHJlZmxpZ2h0ZWQgPSBwcmVmbGlnaHRlZFJlZnMuaW5kZXhPZihMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKSkgPj0gMFxuICAgIHJldHVybiBpc1ByZWZsaWdodGVkICYmIHRoaXMuaXNBY3RpdmUoZmlsZUVsLCBmaWxlKVxuICB9XG5cbiAgY29uc3RydWN0b3IoZmlsZUVsLCBmaWxlLCB2aWV3KXtcbiAgICB0aGlzLnJlZiA9IExpdmVVcGxvYWRlci5nZW5GaWxlUmVmKGZpbGUpXG4gICAgdGhpcy5maWxlRWwgPSBmaWxlRWxcbiAgICB0aGlzLmZpbGUgPSBmaWxlXG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMubWV0YSA9IG51bGxcbiAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IGZhbHNlXG4gICAgdGhpcy5faXNEb25lID0gZmFsc2VcbiAgICB0aGlzLl9wcm9ncmVzcyA9IDBcbiAgICB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50ID0gLTFcbiAgICB0aGlzLl9vbkRvbmUgPSBmdW5jdGlvbiAoKXsgfVxuICAgIHRoaXMuX29uRWxVcGRhdGVkID0gdGhpcy5vbkVsVXBkYXRlZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5maWxlRWwuYWRkRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICB9XG5cbiAgbWV0YWRhdGEoKXsgcmV0dXJuIHRoaXMubWV0YSB9XG5cbiAgcHJvZ3Jlc3MocHJvZ3Jlc3Mpe1xuICAgIHRoaXMuX3Byb2dyZXNzID0gTWF0aC5mbG9vcihwcm9ncmVzcylcbiAgICBpZih0aGlzLl9wcm9ncmVzcyA+IHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQpe1xuICAgICAgaWYodGhpcy5fcHJvZ3Jlc3MgPj0gMTAwKXtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSAxMDBcbiAgICAgICAgdGhpcy5fbGFzdFByb2dyZXNzU2VudCA9IDEwMFxuICAgICAgICB0aGlzLl9pc0RvbmUgPSB0cnVlXG4gICAgICAgIHRoaXMudmlldy5wdXNoRmlsZVByb2dyZXNzKHRoaXMuZmlsZUVsLCB0aGlzLnJlZiwgMTAwLCAoKSA9PiB7XG4gICAgICAgICAgTGl2ZVVwbG9hZGVyLnVudHJhY2tGaWxlKHRoaXMuZmlsZUVsLCB0aGlzLmZpbGUpXG4gICAgICAgICAgdGhpcy5fb25Eb25lKClcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQgPSB0aGlzLl9wcm9ncmVzc1xuICAgICAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIHRoaXMuX3Byb2dyZXNzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNhbmNlbCgpe1xuICAgIHRoaXMuX2lzQ2FuY2VsbGVkID0gdHJ1ZVxuICAgIHRoaXMuX2lzRG9uZSA9IHRydWVcbiAgICB0aGlzLl9vbkRvbmUoKVxuICB9XG5cbiAgaXNEb25lKCl7IHJldHVybiB0aGlzLl9pc0RvbmUgfVxuXG4gIGVycm9yKHJlYXNvbiA9IFwiZmFpbGVkXCIpe1xuICAgIHRoaXMuZmlsZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoUEhYX0xJVkVfRklMRV9VUERBVEVELCB0aGlzLl9vbkVsVXBkYXRlZClcbiAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIHtlcnJvcjogcmVhc29ufSlcbiAgICBMaXZlVXBsb2FkZXIuY2xlYXJGaWxlcyh0aGlzLmZpbGVFbClcbiAgfVxuXG4gIC8vcHJpdmF0ZVxuXG4gIG9uRG9uZShjYWxsYmFjayl7XG4gICAgdGhpcy5fb25Eb25lID0gKCkgPT4ge1xuICAgICAgdGhpcy5maWxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIG9uRWxVcGRhdGVkKCl7XG4gICAgbGV0IGFjdGl2ZVJlZnMgPSB0aGlzLmZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKS5zcGxpdChcIixcIilcbiAgICBpZihhY3RpdmVSZWZzLmluZGV4T2YodGhpcy5yZWYpID09PSAtMSl7IHRoaXMuY2FuY2VsKCkgfVxuICB9XG5cbiAgdG9QcmVmbGlnaHRQYXlsb2FkKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhc3RfbW9kaWZpZWQ6IHRoaXMuZmlsZS5sYXN0TW9kaWZpZWQsXG4gICAgICBuYW1lOiB0aGlzLmZpbGUubmFtZSxcbiAgICAgIHJlbGF0aXZlX3BhdGg6IHRoaXMuZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGgsXG4gICAgICBzaXplOiB0aGlzLmZpbGUuc2l6ZSxcbiAgICAgIHR5cGU6IHRoaXMuZmlsZS50eXBlLFxuICAgICAgcmVmOiB0aGlzLnJlZlxuICAgIH1cbiAgfVxuXG4gIHVwbG9hZGVyKHVwbG9hZGVycyl7XG4gICAgaWYodGhpcy5tZXRhLnVwbG9hZGVyKXtcbiAgICAgIGxldCBjYWxsYmFjayA9IHVwbG9hZGVyc1t0aGlzLm1ldGEudXBsb2FkZXJdIHx8IGxvZ0Vycm9yKGBubyB1cGxvYWRlciBjb25maWd1cmVkIGZvciAke3RoaXMubWV0YS51cGxvYWRlcn1gKVxuICAgICAgcmV0dXJuIHtuYW1lOiB0aGlzLm1ldGEudXBsb2FkZXIsIGNhbGxiYWNrOiBjYWxsYmFja31cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtuYW1lOiBcImNoYW5uZWxcIiwgY2FsbGJhY2s6IGNoYW5uZWxVcGxvYWRlcn1cbiAgICB9XG4gIH1cblxuICB6aXBQb3N0RmxpZ2h0KHJlc3Ape1xuICAgIHRoaXMubWV0YSA9IHJlc3AuZW50cmllc1t0aGlzLnJlZl1cbiAgICBpZighdGhpcy5tZXRhKXsgbG9nRXJyb3IoYG5vIHByZWZsaWdodCB1cGxvYWQgcmVzcG9uc2UgcmV0dXJuZWQgd2l0aCByZWYgJHt0aGlzLnJlZn1gLCB7aW5wdXQ6IHRoaXMuZmlsZUVsLCByZXNwb25zZTogcmVzcH0pIH1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFBIWF9ET05FX1JFRlMsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTLFxuICBQSFhfVVBMT0FEX1JFRlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBVcGxvYWRFbnRyeSBmcm9tIFwiLi91cGxvYWRfZW50cnlcIlxuXG5sZXQgbGl2ZVVwbG9hZGVyRmlsZVJlZiA9IDBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGl2ZVVwbG9hZGVyIHtcbiAgc3RhdGljIGdlbkZpbGVSZWYoZmlsZSl7XG4gICAgbGV0IHJlZiA9IGZpbGUuX3BoeFJlZlxuICAgIGlmKHJlZiAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIHJldHVybiByZWZcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsZS5fcGh4UmVmID0gKGxpdmVVcGxvYWRlckZpbGVSZWYrKykudG9TdHJpbmcoKVxuICAgICAgcmV0dXJuIGZpbGUuX3BoeFJlZlxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRFbnRyeURhdGFVUkwoaW5wdXRFbCwgcmVmLCBjYWxsYmFjayl7XG4gICAgbGV0IGZpbGUgPSB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0RWwpLmZpbmQoZmlsZSA9PiB0aGlzLmdlbkZpbGVSZWYoZmlsZSkgPT09IHJlZilcbiAgICBjYWxsYmFjayhVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpKVxuICB9XG5cbiAgc3RhdGljIGhhc1VwbG9hZHNJblByb2dyZXNzKGZvcm1FbCl7XG4gICAgbGV0IGFjdGl2ZSA9IDBcbiAgICBET00uZmluZFVwbG9hZElucHV0cyhmb3JtRWwpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgaWYoaW5wdXQuZ2V0QXR0cmlidXRlKFBIWF9QUkVGTElHSFRFRF9SRUZTKSAhPT0gaW5wdXQuZ2V0QXR0cmlidXRlKFBIWF9ET05FX1JFRlMpKXtcbiAgICAgICAgYWN0aXZlKytcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBhY3RpdmUgPiAwXG4gIH1cblxuICBzdGF0aWMgc2VyaWFsaXplVXBsb2FkcyhpbnB1dEVsKXtcbiAgICBsZXQgZmlsZXMgPSB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0RWwpXG4gICAgbGV0IGZpbGVEYXRhID0ge31cbiAgICBmaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgbGV0IGVudHJ5ID0ge3BhdGg6IGlucHV0RWwubmFtZX1cbiAgICAgIGxldCB1cGxvYWRSZWYgPSBpbnB1dEVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRilcbiAgICAgIGZpbGVEYXRhW3VwbG9hZFJlZl0gPSBmaWxlRGF0YVt1cGxvYWRSZWZdIHx8IFtdXG4gICAgICBlbnRyeS5yZWYgPSB0aGlzLmdlbkZpbGVSZWYoZmlsZSlcbiAgICAgIGVudHJ5Lmxhc3RfbW9kaWZpZWQgPSBmaWxlLmxhc3RNb2RpZmllZFxuICAgICAgZW50cnkubmFtZSA9IGZpbGUubmFtZSB8fCBlbnRyeS5yZWZcbiAgICAgIGVudHJ5LnJlbGF0aXZlX3BhdGggPSBmaWxlLndlYmtpdFJlbGF0aXZlUGF0aFxuICAgICAgZW50cnkudHlwZSA9IGZpbGUudHlwZVxuICAgICAgZW50cnkuc2l6ZSA9IGZpbGUuc2l6ZVxuICAgICAgZmlsZURhdGFbdXBsb2FkUmVmXS5wdXNoKGVudHJ5KVxuICAgIH0pXG4gICAgcmV0dXJuIGZpbGVEYXRhXG4gIH1cblxuICBzdGF0aWMgY2xlYXJGaWxlcyhpbnB1dEVsKXtcbiAgICBpbnB1dEVsLnZhbHVlID0gbnVsbFxuICAgIGlucHV0RWwucmVtb3ZlQXR0cmlidXRlKFBIWF9VUExPQURfUkVGKVxuICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgW10pXG4gIH1cblxuICBzdGF0aWMgdW50cmFja0ZpbGUoaW5wdXRFbCwgZmlsZSl7XG4gICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBET00ucHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIpLmZpbHRlcihmID0+ICFPYmplY3QuaXMoZiwgZmlsZSkpKVxuICB9XG5cbiAgc3RhdGljIHRyYWNrRmlsZXMoaW5wdXRFbCwgZmlsZXMsIGRhdGFUcmFuc2Zlcil7XG4gICAgaWYoaW5wdXRFbC5nZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiKSAhPT0gbnVsbCl7XG4gICAgICBsZXQgbmV3RmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiAhdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5maW5kKGYgPT4gT2JqZWN0LmlzKGYsIGZpbGUpKSlcbiAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5jb25jYXQobmV3RmlsZXMpKVxuICAgICAgaW5wdXRFbC52YWx1ZSA9IG51bGxcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzZXQgaW5wdXRFbCBmaWxlcyB0byBhbGlnbiBvdXRwdXQgd2l0aCBwcm9ncmFtbWF0aWMgY2hhbmdlcyAoaS5lLiBkcmFnIGFuZCBkcm9wKVxuICAgICAgaWYoZGF0YVRyYW5zZmVyICYmIGRhdGFUcmFuc2Zlci5maWxlcy5sZW5ndGggPiAwKXsgaW5wdXRFbC5maWxlcyA9IGRhdGFUcmFuc2Zlci5maWxlcyB9XG4gICAgICBET00ucHV0UHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIsIGZpbGVzKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhY3RpdmVGaWxlSW5wdXRzKGZvcm1FbCl7XG4gICAgbGV0IGZpbGVJbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyhmb3JtRWwpXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZmlsZUlucHV0cykuZmlsdGVyKGVsID0+IGVsLmZpbGVzICYmIHRoaXMuYWN0aXZlRmlsZXMoZWwpLmxlbmd0aCA+IDApXG4gIH1cblxuICBzdGF0aWMgYWN0aXZlRmlsZXMoaW5wdXQpe1xuICAgIHJldHVybiAoRE9NLnByaXZhdGUoaW5wdXQsIFwiZmlsZXNcIikgfHwgW10pLmZpbHRlcihmID0+IFVwbG9hZEVudHJ5LmlzQWN0aXZlKGlucHV0LCBmKSlcbiAgfVxuXG4gIHN0YXRpYyBpbnB1dHNBd2FpdGluZ1ByZWZsaWdodChmb3JtRWwpe1xuICAgIGxldCBmaWxlSW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKVxuICAgIHJldHVybiBBcnJheS5mcm9tKGZpbGVJbnB1dHMpLmZpbHRlcihpbnB1dCA9PiB0aGlzLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXQpLmxlbmd0aCA+IDApXG4gIH1cblxuICBzdGF0aWMgZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dCl7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlRmlsZXMoaW5wdXQpLmZpbHRlcihmID0+ICFVcGxvYWRFbnRyeS5pc1ByZWZsaWdodGVkKGlucHV0LCBmKSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGlucHV0RWwsIHZpZXcsIG9uQ29tcGxldGUpe1xuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgdGhpcy5fZW50cmllcyA9XG4gICAgICBBcnJheS5mcm9tKExpdmVVcGxvYWRlci5maWxlc0F3YWl0aW5nUHJlZmxpZ2h0KGlucHV0RWwpIHx8IFtdKVxuICAgICAgICAubWFwKGZpbGUgPT4gbmV3IFVwbG9hZEVudHJ5KGlucHV0RWwsIGZpbGUsIHZpZXcpKVxuXG4gICAgdGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcyA9IHRoaXMuX2VudHJpZXMubGVuZ3RoXG4gIH1cblxuICBlbnRyaWVzKCl7IHJldHVybiB0aGlzLl9lbnRyaWVzIH1cblxuICBpbml0QWRhcHRlclVwbG9hZChyZXNwLCBvbkVycm9yLCBsaXZlU29ja2V0KXtcbiAgICB0aGlzLl9lbnRyaWVzID1cbiAgICAgIHRoaXMuX2VudHJpZXMubWFwKGVudHJ5ID0+IHtcbiAgICAgICAgZW50cnkuemlwUG9zdEZsaWdodChyZXNwKVxuICAgICAgICBlbnRyeS5vbkRvbmUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MtLVxuICAgICAgICAgIGlmKHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MgPT09IDApeyB0aGlzLm9uQ29tcGxldGUoKSB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBlbnRyeVxuICAgICAgfSlcblxuICAgIGxldCBncm91cGVkRW50cmllcyA9IHRoaXMuX2VudHJpZXMucmVkdWNlKChhY2MsIGVudHJ5KSA9PiB7XG4gICAgICBsZXQge25hbWUsIGNhbGxiYWNrfSA9IGVudHJ5LnVwbG9hZGVyKGxpdmVTb2NrZXQudXBsb2FkZXJzKVxuICAgICAgYWNjW25hbWVdID0gYWNjW25hbWVdIHx8IHtjYWxsYmFjazogY2FsbGJhY2ssIGVudHJpZXM6IFtdfVxuICAgICAgYWNjW25hbWVdLmVudHJpZXMucHVzaChlbnRyeSlcbiAgICAgIHJldHVybiBhY2NcbiAgICB9LCB7fSlcblxuICAgIGZvcihsZXQgbmFtZSBpbiBncm91cGVkRW50cmllcyl7XG4gICAgICBsZXQge2NhbGxiYWNrLCBlbnRyaWVzfSA9IGdyb3VwZWRFbnRyaWVzW25hbWVdXG4gICAgICBjYWxsYmFjayhlbnRyaWVzLCBvbkVycm9yLCByZXNwLCBsaXZlU29ja2V0KVxuICAgIH1cbiAgfVxufVxuIiwgImxldCBBUklBID0ge1xuICBmb2N1c01haW4oKXtcbiAgICBsZXQgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW4gaDEsIG1haW4sIGgxXCIpXG4gICAgaWYodGFyZ2V0KXtcbiAgICAgIGxldCBvcmlnVGFiSW5kZXggPSB0YXJnZXQudGFiSW5kZXhcbiAgICAgIHRhcmdldC50YWJJbmRleCA9IC0xXG4gICAgICB0YXJnZXQuZm9jdXMoKVxuICAgICAgdGFyZ2V0LnRhYkluZGV4ID0gb3JpZ1RhYkluZGV4XG4gICAgfVxuICB9LFxuXG4gIGFueU9mKGluc3RhbmNlLCBjbGFzc2VzKXsgcmV0dXJuIGNsYXNzZXMuZmluZChuYW1lID0+IGluc3RhbmNlIGluc3RhbmNlb2YgbmFtZSkgfSxcblxuICBpc0ZvY3VzYWJsZShlbCwgaW50ZXJhY3RpdmVPbmx5KXtcbiAgICByZXR1cm4oXG4gICAgICAoZWwgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCAmJiBlbC5yZWwgIT09IFwiaWdub3JlXCIpIHx8XG4gICAgICAoZWwgaW5zdGFuY2VvZiBIVE1MQXJlYUVsZW1lbnQgJiYgZWwuaHJlZiAhPT0gdW5kZWZpbmVkKSB8fFxuICAgICAgKCFlbC5kaXNhYmxlZCAmJiAodGhpcy5hbnlPZihlbCwgW0hUTUxJbnB1dEVsZW1lbnQsIEhUTUxTZWxlY3RFbGVtZW50LCBIVE1MVGV4dEFyZWFFbGVtZW50LCBIVE1MQnV0dG9uRWxlbWVudF0pKSkgfHxcbiAgICAgIChlbCBpbnN0YW5jZW9mIEhUTUxJRnJhbWVFbGVtZW50KSB8fFxuICAgICAgKGVsLnRhYkluZGV4ID4gMCB8fCAoIWludGVyYWN0aXZlT25seSAmJiBlbC50YWJJbmRleCA9PT0gMCAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSAhPT0gbnVsbCAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKSAhPT0gXCJ0cnVlXCIpKVxuICAgIClcbiAgfSxcblxuICBhdHRlbXB0Rm9jdXMoZWwsIGludGVyYWN0aXZlT25seSl7XG4gICAgaWYodGhpcy5pc0ZvY3VzYWJsZShlbCwgaW50ZXJhY3RpdmVPbmx5KSl7IHRyeXsgZWwuZm9jdXMoKSB9IGNhdGNoKGUpe30gfVxuICAgIHJldHVybiAhIWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5pc1NhbWVOb2RlKGVsKVxuICB9LFxuXG4gIGZvY3VzRmlyc3RJbnRlcmFjdGl2ZShlbCl7XG4gICAgbGV0IGNoaWxkID0gZWwuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICB3aGlsZShjaGlsZCl7XG4gICAgICBpZih0aGlzLmF0dGVtcHRGb2N1cyhjaGlsZCwgdHJ1ZSkgfHwgdGhpcy5mb2N1c0ZpcnN0SW50ZXJhY3RpdmUoY2hpbGQsIHRydWUpKXtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgfVxuICB9LFxuXG4gIGZvY3VzRmlyc3QoZWwpe1xuICAgIGxldCBjaGlsZCA9IGVsLmZpcnN0RWxlbWVudENoaWxkXG4gICAgd2hpbGUoY2hpbGQpe1xuICAgICAgaWYodGhpcy5hdHRlbXB0Rm9jdXMoY2hpbGQpIHx8IHRoaXMuZm9jdXNGaXJzdChjaGlsZCkpe1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICB9XG4gIH0sXG5cbiAgZm9jdXNMYXN0KGVsKXtcbiAgICBsZXQgY2hpbGQgPSBlbC5sYXN0RWxlbWVudENoaWxkXG4gICAgd2hpbGUoY2hpbGQpe1xuICAgICAgaWYodGhpcy5hdHRlbXB0Rm9jdXMoY2hpbGQpIHx8IHRoaXMuZm9jdXNMYXN0KGNoaWxkKSl7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEFSSUEiLCAiaW1wb3J0IHtcbiAgUEhYX0FDVElWRV9FTlRSWV9SRUZTLFxuICBQSFhfTElWRV9GSUxFX1VQREFURUQsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTLFxuICBQSFhfVVBMT0FEX1JFRlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuaW1wb3J0IEFSSUEgZnJvbSBcIi4vYXJpYVwiXG5cbmxldCBIb29rcyA9IHtcbiAgTGl2ZUZpbGVVcGxvYWQ6IHtcbiAgICBhY3RpdmVSZWZzKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfQUNUSVZFX0VOVFJZX1JFRlMpIH0sXG5cbiAgICBwcmVmbGlnaHRlZFJlZnMoKXsgcmV0dXJuIHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9QUkVGTElHSFRFRF9SRUZTKSB9LFxuXG4gICAgbW91bnRlZCgpeyB0aGlzLnByZWZsaWdodGVkV2FzID0gdGhpcy5wcmVmbGlnaHRlZFJlZnMoKSB9LFxuXG4gICAgdXBkYXRlZCgpe1xuICAgICAgbGV0IG5ld1ByZWZsaWdodHMgPSB0aGlzLnByZWZsaWdodGVkUmVmcygpXG4gICAgICBpZih0aGlzLnByZWZsaWdodGVkV2FzICE9PSBuZXdQcmVmbGlnaHRzKXtcbiAgICAgICAgdGhpcy5wcmVmbGlnaHRlZFdhcyA9IG5ld1ByZWZsaWdodHNcbiAgICAgICAgaWYobmV3UHJlZmxpZ2h0cyA9PT0gXCJcIil7XG4gICAgICAgICAgdGhpcy5fX3ZpZXcuY2FuY2VsU3VibWl0KHRoaXMuZWwuZm9ybSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZih0aGlzLmFjdGl2ZVJlZnMoKSA9PT0gXCJcIil7IHRoaXMuZWwudmFsdWUgPSBudWxsIH1cbiAgICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUEhYX0xJVkVfRklMRV9VUERBVEVEKSlcbiAgICB9XG4gIH0sXG5cbiAgTGl2ZUltZ1ByZXZpZXc6IHtcbiAgICBtb3VudGVkKCl7XG4gICAgICB0aGlzLnJlZiA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtZW50cnktcmVmXCIpXG4gICAgICB0aGlzLmlucHV0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRikpXG4gICAgICBMaXZlVXBsb2FkZXIuZ2V0RW50cnlEYXRhVVJMKHRoaXMuaW5wdXRFbCwgdGhpcy5yZWYsIHVybCA9PiB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsXG4gICAgICAgIHRoaXMuZWwuc3JjID0gdXJsXG4gICAgICB9KVxuICAgIH0sXG4gICAgZGVzdHJveWVkKCl7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMudXJsKVxuICAgIH1cbiAgfSxcbiAgRm9jdXNXcmFwOiB7XG4gICAgbW91bnRlZCgpe1xuICAgICAgdGhpcy5mb2N1c1N0YXJ0ID0gdGhpcy5lbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgICAgdGhpcy5mb2N1c0VuZCA9IHRoaXMuZWwubGFzdEVsZW1lbnRDaGlsZFxuICAgICAgdGhpcy5mb2N1c1N0YXJ0LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiBBUklBLmZvY3VzTGFzdCh0aGlzLmVsKSlcbiAgICAgIHRoaXMuZm9jdXNFbmQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsICgpID0+IEFSSUEuZm9jdXNGaXJzdCh0aGlzLmVsKSlcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpzaG93LWVuZFwiLCAoKSA9PiB0aGlzLmVsLmZvY3VzKCkpXG4gICAgICBpZih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsKS5kaXNwbGF5ICE9PSBcIm5vbmVcIil7XG4gICAgICAgIEFSSUEuZm9jdXNGaXJzdCh0aGlzLmVsKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb29rc1xuIiwgImltcG9ydCB7XG4gIG1heWJlXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBET01Qb3N0TW9ycGhSZXN0b3JlciB7XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lckJlZm9yZSwgY29udGFpbmVyQWZ0ZXIsIHVwZGF0ZVR5cGUpe1xuICAgIGxldCBpZHNCZWZvcmUgPSBuZXcgU2V0KClcbiAgICBsZXQgaWRzQWZ0ZXIgPSBuZXcgU2V0KFsuLi5jb250YWluZXJBZnRlci5jaGlsZHJlbl0ubWFwKGNoaWxkID0+IGNoaWxkLmlkKSlcblxuICAgIGxldCBlbGVtZW50c1RvTW9kaWZ5ID0gW11cblxuICAgIEFycmF5LmZyb20oY29udGFpbmVyQmVmb3JlLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGlmKGNoaWxkLmlkKXsgLy8gYWxsIG9mIG91ciBjaGlsZHJlbiBzaG91bGQgYmUgZWxlbWVudHMgd2l0aCBpZHNcbiAgICAgICAgaWRzQmVmb3JlLmFkZChjaGlsZC5pZClcbiAgICAgICAgaWYoaWRzQWZ0ZXIuaGFzKGNoaWxkLmlkKSl7XG4gICAgICAgICAgbGV0IHByZXZpb3VzRWxlbWVudElkID0gY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBjaGlsZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlkXG4gICAgICAgICAgZWxlbWVudHNUb01vZGlmeS5wdXNoKHtlbGVtZW50SWQ6IGNoaWxkLmlkLCBwcmV2aW91c0VsZW1lbnRJZDogcHJldmlvdXNFbGVtZW50SWR9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuY29udGFpbmVySWQgPSBjb250YWluZXJBZnRlci5pZFxuICAgIHRoaXMudXBkYXRlVHlwZSA9IHVwZGF0ZVR5cGVcbiAgICB0aGlzLmVsZW1lbnRzVG9Nb2RpZnkgPSBlbGVtZW50c1RvTW9kaWZ5XG4gICAgdGhpcy5lbGVtZW50SWRzVG9BZGQgPSBbLi4uaWRzQWZ0ZXJdLmZpbHRlcihpZCA9PiAhaWRzQmVmb3JlLmhhcyhpZCkpXG4gIH1cblxuICAvLyBXZSBkbyB0aGUgZm9sbG93aW5nIHRvIG9wdGltaXplIGFwcGVuZC9wcmVwZW5kIG9wZXJhdGlvbnM6XG4gIC8vICAgMSkgVHJhY2sgaWRzIG9mIG1vZGlmaWVkIGVsZW1lbnRzICYgb2YgbmV3IGVsZW1lbnRzXG4gIC8vICAgMikgQWxsIHRoZSBtb2RpZmllZCBlbGVtZW50cyBhcmUgcHV0IGJhY2sgaW4gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIERPTSB0cmVlXG4gIC8vICAgICAgYnkgc3RvcmluZyB0aGUgaWQgb2YgdGhlaXIgcHJldmlvdXMgc2libGluZ1xuICAvLyAgIDMpIE5ldyBlbGVtZW50cyBhcmUgZ29pbmcgdG8gYmUgcHV0IGluIHRoZSByaWdodCBwbGFjZSBieSBtb3JwaGRvbSBkdXJpbmcgYXBwZW5kLlxuICAvLyAgICAgIEZvciBwcmVwZW5kLCB3ZSBtb3ZlIHRoZW0gdG8gdGhlIGZpcnN0IHBvc2l0aW9uIGluIHRoZSBjb250YWluZXJcbiAgcGVyZm9ybSgpe1xuICAgIGxldCBjb250YWluZXIgPSBET00uYnlJZCh0aGlzLmNvbnRhaW5lcklkKVxuICAgIHRoaXMuZWxlbWVudHNUb01vZGlmeS5mb3JFYWNoKGVsZW1lbnRUb01vZGlmeSA9PiB7XG4gICAgICBpZihlbGVtZW50VG9Nb2RpZnkucHJldmlvdXNFbGVtZW50SWQpe1xuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkucHJldmlvdXNFbGVtZW50SWQpLCBwcmV2aW91c0VsZW0gPT4ge1xuICAgICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRUb01vZGlmeS5lbGVtZW50SWQpLCBlbGVtID0+IHtcbiAgICAgICAgICAgIGxldCBpc0luUmlnaHRQbGFjZSA9IGVsZW0ucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuaWQgPT0gcHJldmlvdXNFbGVtLmlkXG4gICAgICAgICAgICBpZighaXNJblJpZ2h0UGxhY2Upe1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW0uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJlbmRcIiwgZWxlbSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgY29udGFpbmVyXG4gICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRUb01vZGlmeS5lbGVtZW50SWQpLCBlbGVtID0+IHtcbiAgICAgICAgICBsZXQgaXNJblJpZ2h0UGxhY2UgPSBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgPT0gbnVsbFxuICAgICAgICAgIGlmKCFpc0luUmlnaHRQbGFjZSl7XG4gICAgICAgICAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBlbGVtKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYodGhpcy51cGRhdGVUeXBlID09IFwicHJlcGVuZFwiKXtcbiAgICAgIHRoaXMuZWxlbWVudElkc1RvQWRkLnJldmVyc2UoKS5mb3JFYWNoKGVsZW1JZCA9PiB7XG4gICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1JZCksIGVsZW0gPT4gY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgZWxlbSkpXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIiwgInZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFID0gMTE7XG5cbmZ1bmN0aW9uIG1vcnBoQXR0cnMoZnJvbU5vZGUsIHRvTm9kZSkge1xuICAgIHZhciB0b05vZGVBdHRycyA9IHRvTm9kZS5hdHRyaWJ1dGVzO1xuICAgIHZhciBhdHRyO1xuICAgIHZhciBhdHRyTmFtZTtcbiAgICB2YXIgYXR0ck5hbWVzcGFjZVVSSTtcbiAgICB2YXIgYXR0clZhbHVlO1xuICAgIHZhciBmcm9tVmFsdWU7XG5cbiAgICAvLyBkb2N1bWVudC1mcmFnbWVudHMgZG9udCBoYXZlIGF0dHJpYnV0ZXMgc28gbGV0cyBub3QgZG8gYW55dGhpbmdcbiAgICBpZiAodG9Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFIHx8IGZyb21Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGF0dHJpYnV0ZXMgb24gb3JpZ2luYWwgRE9NIGVsZW1lbnRcbiAgICBmb3IgKHZhciBpID0gdG9Ob2RlQXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgYXR0ciA9IHRvTm9kZUF0dHJzW2ldO1xuICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuICAgICAgICBhdHRyVmFsdWUgPSBhdHRyLnZhbHVlO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZXNwYWNlVVJJKSB7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubG9jYWxOYW1lIHx8IGF0dHJOYW1lO1xuICAgICAgICAgICAgZnJvbVZhbHVlID0gZnJvbU5vZGUuZ2V0QXR0cmlidXRlTlMoYXR0ck5hbWVzcGFjZVVSSSwgYXR0ck5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoZnJvbVZhbHVlICE9PSBhdHRyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0ci5wcmVmaXggPT09ICd4bWxucycpe1xuICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTsgLy8gSXQncyBub3QgYWxsb3dlZCB0byBzZXQgYW4gYXR0cmlidXRlIHdpdGggdGhlIFhNTE5TIG5hbWVzcGFjZSB3aXRob3V0IHNwZWNpZnlpbmcgdGhlIGB4bWxuc2AgcHJlZml4XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnNldEF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJvbVZhbHVlID0gZnJvbU5vZGUuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyb21WYWx1ZSAhPT0gYXR0clZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZnJvbU5vZGUuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFueSBleHRyYSBhdHRyaWJ1dGVzIGZvdW5kIG9uIHRoZSBvcmlnaW5hbCBET00gZWxlbWVudCB0aGF0XG4gICAgLy8gd2VyZW4ndCBmb3VuZCBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAgdmFyIGZyb21Ob2RlQXR0cnMgPSBmcm9tTm9kZS5hdHRyaWJ1dGVzO1xuXG4gICAgZm9yICh2YXIgZCA9IGZyb21Ob2RlQXR0cnMubGVuZ3RoIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgICAgYXR0ciA9IGZyb21Ob2RlQXR0cnNbZF07XG4gICAgICAgIGF0dHJOYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICBhdHRyTmFtZXNwYWNlVVJJID0gYXR0ci5uYW1lc3BhY2VVUkk7XG5cbiAgICAgICAgaWYgKGF0dHJOYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0ci5sb2NhbE5hbWUgfHwgYXR0ck5hbWU7XG5cbiAgICAgICAgICAgIGlmICghdG9Ob2RlLmhhc0F0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdG9Ob2RlLmhhc0F0dHJpYnV0ZShhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgcmFuZ2U7IC8vIENyZWF0ZSBhIHJhbmdlIG9iamVjdCBmb3IgZWZmaWNlbnRseSByZW5kZXJpbmcgc3RyaW5ncyB0byBlbGVtZW50cy5cbnZhciBOU19YSFRNTCA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJztcblxudmFyIGRvYyA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBkb2N1bWVudDtcbnZhciBIQVNfVEVNUExBVEVfU1VQUE9SVCA9ICEhZG9jICYmICdjb250ZW50JyBpbiBkb2MuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbnZhciBIQVNfUkFOR0VfU1VQUE9SVCA9ICEhZG9jICYmIGRvYy5jcmVhdGVSYW5nZSAmJiAnY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50JyBpbiBkb2MuY3JlYXRlUmFuZ2UoKTtcblxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUoc3RyKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gc3RyO1xuICAgIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlKHN0cikge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgcmFuZ2UgPSBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShkb2MuYm9keSk7XG4gICAgfVxuXG4gICAgdmFyIGZyYWdtZW50ID0gcmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHN0cik7XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVdyYXAoc3RyKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcbiAgICBmcmFnbWVudC5pbm5lckhUTUwgPSBzdHI7XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbi8qKlxuICogVGhpcyBpcyBhYm91dCB0aGUgc2FtZVxuICogdmFyIGh0bWwgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHN0ciwgJ3RleHQvaHRtbCcpO1xuICogcmV0dXJuIGh0bWwuYm9keS5maXJzdENoaWxkO1xuICpcbiAqIEBtZXRob2QgdG9FbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKi9cbmZ1bmN0aW9uIHRvRWxlbWVudChzdHIpIHtcbiAgICBzdHIgPSBzdHIudHJpbSgpO1xuICAgIGlmIChIQVNfVEVNUExBVEVfU1VQUE9SVCkge1xuICAgICAgLy8gYXZvaWQgcmVzdHJpY3Rpb25zIG9uIGNvbnRlbnQgZm9yIHRoaW5ncyBsaWtlIGA8dHI+PHRoPkhpPC90aD48L3RyPmAgd2hpY2hcbiAgICAgIC8vIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCBkb2Vzbid0IHN1cHBvcnRcbiAgICAgIC8vIDx0ZW1wbGF0ZT4gc3VwcG9ydCBub3QgYXZhaWxhYmxlIGluIElFXG4gICAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUoc3RyKTtcbiAgICB9IGVsc2UgaWYgKEhBU19SQU5HRV9TVVBQT1JUKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tUmFuZ2Uoc3RyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tV3JhcChzdHIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0d28gbm9kZSdzIG5hbWVzIGFyZSB0aGUgc2FtZS5cbiAqXG4gKiBOT1RFOiBXZSBkb24ndCBib3RoZXIgY2hlY2tpbmcgYG5hbWVzcGFjZVVSSWAgYmVjYXVzZSB5b3Ugd2lsbCBuZXZlciBmaW5kIHR3byBIVE1MIGVsZW1lbnRzIHdpdGggdGhlIHNhbWVcbiAqICAgICAgIG5vZGVOYW1lIGFuZCBkaWZmZXJlbnQgbmFtZXNwYWNlIFVSSXMuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGIgVGhlIHRhcmdldCBlbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjb21wYXJlTm9kZU5hbWVzKGZyb21FbCwgdG9FbCkge1xuICAgIHZhciBmcm9tTm9kZU5hbWUgPSBmcm9tRWwubm9kZU5hbWU7XG4gICAgdmFyIHRvTm9kZU5hbWUgPSB0b0VsLm5vZGVOYW1lO1xuICAgIHZhciBmcm9tQ29kZVN0YXJ0LCB0b0NvZGVTdGFydDtcblxuICAgIGlmIChmcm9tTm9kZU5hbWUgPT09IHRvTm9kZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnJvbUNvZGVTdGFydCA9IGZyb21Ob2RlTmFtZS5jaGFyQ29kZUF0KDApO1xuICAgIHRvQ29kZVN0YXJ0ID0gdG9Ob2RlTmFtZS5jaGFyQ29kZUF0KDApO1xuXG4gICAgLy8gSWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIGEgdmlydHVhbCBET00gbm9kZSBvciBTVkcgbm9kZSB0aGVuIHdlIG1heVxuICAgIC8vIG5lZWQgdG8gbm9ybWFsaXplIHRoZSB0YWcgbmFtZSBiZWZvcmUgY29tcGFyaW5nLiBOb3JtYWwgSFRNTCBlbGVtZW50cyB0aGF0IGFyZVxuICAgIC8vIGluIHRoZSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIlxuICAgIC8vIGFyZSBjb252ZXJ0ZWQgdG8gdXBwZXIgY2FzZVxuICAgIGlmIChmcm9tQ29kZVN0YXJ0IDw9IDkwICYmIHRvQ29kZVN0YXJ0ID49IDk3KSB7IC8vIGZyb20gaXMgdXBwZXIgYW5kIHRvIGlzIGxvd2VyXG4gICAgICAgIHJldHVybiBmcm9tTm9kZU5hbWUgPT09IHRvTm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9IGVsc2UgaWYgKHRvQ29kZVN0YXJ0IDw9IDkwICYmIGZyb21Db2RlU3RhcnQgPj0gOTcpIHsgLy8gdG8gaXMgdXBwZXIgYW5kIGZyb20gaXMgbG93ZXJcbiAgICAgICAgcmV0dXJuIHRvTm9kZU5hbWUgPT09IGZyb21Ob2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGVsZW1lbnQsIG9wdGlvbmFsbHkgd2l0aCBhIGtub3duIG5hbWVzcGFjZSBVUkkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIGVsZW1lbnQgbmFtZSwgZS5nLiAnZGl2JyBvciAnc3ZnJ1xuICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lc3BhY2VVUkldIHRoZSBlbGVtZW50J3MgbmFtZXNwYWNlIFVSSSwgaS5lLiB0aGUgdmFsdWUgb2ZcbiAqIGl0cyBgeG1sbnNgIGF0dHJpYnV0ZSBvciBpdHMgaW5mZXJyZWQgbmFtZXNwYWNlLlxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyhuYW1lLCBuYW1lc3BhY2VVUkkpIHtcbiAgICByZXR1cm4gIW5hbWVzcGFjZVVSSSB8fCBuYW1lc3BhY2VVUkkgPT09IE5TX1hIVE1MID9cbiAgICAgICAgZG9jLmNyZWF0ZUVsZW1lbnQobmFtZSkgOlxuICAgICAgICBkb2MuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgbmFtZSk7XG59XG5cbi8qKlxuICogQ29waWVzIHRoZSBjaGlsZHJlbiBvZiBvbmUgRE9NIGVsZW1lbnQgdG8gYW5vdGhlciBET00gZWxlbWVudFxuICovXG5mdW5jdGlvbiBtb3ZlQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKSB7XG4gICAgdmFyIGN1ckNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGN1ckNoaWxkKSB7XG4gICAgICAgIHZhciBuZXh0Q2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgdG9FbC5hcHBlbmRDaGlsZChjdXJDaGlsZCk7XG4gICAgICAgIGN1ckNoaWxkID0gbmV4dENoaWxkO1xuICAgIH1cbiAgICByZXR1cm4gdG9FbDtcbn1cblxuZnVuY3Rpb24gc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsIG5hbWUpIHtcbiAgICBpZiAoZnJvbUVsW25hbWVdICE9PSB0b0VsW25hbWVdKSB7XG4gICAgICAgIGZyb21FbFtuYW1lXSA9IHRvRWxbbmFtZV07XG4gICAgICAgIGlmIChmcm9tRWxbbmFtZV0pIHtcbiAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUobmFtZSwgJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIHNwZWNpYWxFbEhhbmRsZXJzID0ge1xuICAgIE9QVElPTjogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gZnJvbUVsLnBhcmVudE5vZGU7XG4gICAgICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50TmFtZSA9IHBhcmVudE5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnROYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBwYXJlbnROYW1lID0gcGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyZW50TmFtZSA9PT0gJ1NFTEVDVCcgJiYgIXBhcmVudE5vZGUuaGFzQXR0cmlidXRlKCdtdWx0aXBsZScpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZyb21FbC5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykgJiYgIXRvRWwuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgTVMgRWRnZSBidWcgd2hlcmUgdGhlICdzZWxlY3RlZCcgYXR0cmlidXRlIGNhbiBvbmx5IGJlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZWQgaWYgc2V0IHRvIGEgbm9uLWVtcHR5IHZhbHVlOlxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMjA4NzY3OS9cbiAgICAgICAgICAgICAgICAgICAgZnJvbUVsLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byByZXNldCBzZWxlY3QgZWxlbWVudCdzIHNlbGVjdGVkSW5kZXggdG8gLTEsIG90aGVyd2lzZSBzZXR0aW5nXG4gICAgICAgICAgICAgICAgLy8gZnJvbUVsLnNlbGVjdGVkIHVzaW5nIHRoZSBzeW5jQm9vbGVhbkF0dHJQcm9wIGJlbG93IGhhcyBubyBlZmZlY3QuXG4gICAgICAgICAgICAgICAgLy8gVGhlIGNvcnJlY3Qgc2VsZWN0ZWRJbmRleCB3aWxsIGJlIHNldCBpbiB0aGUgU0VMRUNUIHNwZWNpYWwgaGFuZGxlciBiZWxvdy5cbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ3NlbGVjdGVkJyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUaGUgXCJ2YWx1ZVwiIGF0dHJpYnV0ZSBpcyBzcGVjaWFsIGZvciB0aGUgPGlucHV0PiBlbGVtZW50IHNpbmNlIGl0IHNldHNcbiAgICAgKiB0aGUgaW5pdGlhbCB2YWx1ZS4gQ2hhbmdpbmcgdGhlIFwidmFsdWVcIiBhdHRyaWJ1dGUgd2l0aG91dCBjaGFuZ2luZyB0aGVcbiAgICAgKiBcInZhbHVlXCIgcHJvcGVydHkgd2lsbCBoYXZlIG5vIGVmZmVjdCBzaW5jZSBpdCBpcyBvbmx5IHVzZWQgdG8gdGhlIHNldCB0aGVcbiAgICAgKiBpbml0aWFsIHZhbHVlLiAgU2ltaWxhciBmb3IgdGhlIFwiY2hlY2tlZFwiIGF0dHJpYnV0ZSwgYW5kIFwiZGlzYWJsZWRcIi5cbiAgICAgKi9cbiAgICBJTlBVVDogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCAnY2hlY2tlZCcpO1xuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPT0gdG9FbC52YWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gdG9FbC52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdG9FbC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgVEVYVEFSRUE6IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSB0b0VsLnZhbHVlO1xuICAgICAgICBpZiAoZnJvbUVsLnZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgICBpZiAoZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgLy8gTmVlZGVkIGZvciBJRS4gQXBwYXJlbnRseSBJRSBzZXRzIHRoZSBwbGFjZWhvbGRlciBhcyB0aGVcbiAgICAgICAgICAgIC8vIG5vZGUgdmFsdWUgYW5kIHZpc2UgdmVyc2EuIFRoaXMgaWdub3JlcyBhbiBlbXB0eSB1cGRhdGUuXG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSBmaXJzdENoaWxkLm5vZGVWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09IG5ld1ZhbHVlIHx8ICghbmV3VmFsdWUgJiYgb2xkVmFsdWUgPT0gZnJvbUVsLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgU0VMRUNUOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgaWYgKCF0b0VsLmhhc0F0dHJpYnV0ZSgnbXVsdGlwbGUnKSkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gbG9vcCB0aHJvdWdoIGNoaWxkcmVuIG9mIGZyb21FbCwgbm90IHRvRWwgc2luY2Ugbm9kZXMgY2FuIGJlIG1vdmVkXG4gICAgICAgICAgICAvLyBmcm9tIHRvRWwgdG8gZnJvbUVsIGRpcmVjdGx5IHdoZW4gbW9ycGhpbmcuXG4gICAgICAgICAgICAvLyBBdCB0aGUgdGltZSB0aGlzIHNwZWNpYWwgaGFuZGxlciBpcyBpbnZva2VkLCBhbGwgY2hpbGRyZW4gaGF2ZSBhbHJlYWR5IGJlZW4gbW9ycGhlZFxuICAgICAgICAgICAgLy8gYW5kIGFwcGVuZGVkIHRvIC8gcmVtb3ZlZCBmcm9tIGZyb21FbCwgc28gdXNpbmcgZnJvbUVsIGhlcmUgaXMgc2FmZSBhbmQgY29ycmVjdC5cbiAgICAgICAgICAgIHZhciBjdXJDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgICAgICAgdmFyIG9wdGdyb3VwO1xuICAgICAgICAgICAgdmFyIG5vZGVOYW1lO1xuICAgICAgICAgICAgd2hpbGUoY3VyQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICBub2RlTmFtZSA9IGN1ckNoaWxkLm5vZGVOYW1lICYmIGN1ckNoaWxkLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwID0gY3VyQ2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gb3B0Z3JvdXAuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZU5hbWUgPT09ICdPUFRJT04nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ2hpbGQuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJDaGlsZCAmJiBvcHRncm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBvcHRncm91cC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnJvbUVsLnNlbGVjdGVkSW5kZXggPSBzZWxlY3RlZEluZGV4O1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIEVMRU1FTlRfTk9ERSA9IDE7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSQxID0gMTE7XG52YXIgVEVYVF9OT0RFID0gMztcbnZhciBDT01NRU5UX05PREUgPSA4O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZGVmYXVsdEdldE5vZGVLZXkobm9kZSkge1xuICBpZiAobm9kZSkge1xuICAgIHJldHVybiAobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykpIHx8IG5vZGUuaWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW9ycGhkb21GYWN0b3J5KG1vcnBoQXR0cnMpIHtcblxuICByZXR1cm4gZnVuY3Rpb24gbW9ycGhkb20oZnJvbU5vZGUsIHRvTm9kZSwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdG9Ob2RlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGZyb21Ob2RlLm5vZGVOYW1lID09PSAnI2RvY3VtZW50JyB8fCBmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGZyb21Ob2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgdmFyIHRvTm9kZUh0bWwgPSB0b05vZGU7XG4gICAgICAgIHRvTm9kZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdodG1sJyk7XG4gICAgICAgIHRvTm9kZS5pbm5lckhUTUwgPSB0b05vZGVIdG1sO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9Ob2RlID0gdG9FbGVtZW50KHRvTm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0b05vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSkge1xuICAgICAgdG9Ob2RlID0gdG9Ob2RlLmZpcnN0RWxlbWVudENoaWxkO1xuICAgIH1cblxuICAgIHZhciBnZXROb2RlS2V5ID0gb3B0aW9ucy5nZXROb2RlS2V5IHx8IGRlZmF1bHRHZXROb2RlS2V5O1xuICAgIHZhciBvbkJlZm9yZU5vZGVBZGRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlQWRkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25Ob2RlQWRkZWQgPSBvcHRpb25zLm9uTm9kZUFkZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlRWxVcGRhdGVkID0gb3B0aW9ucy5vbkJlZm9yZUVsVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBvbkVsVXBkYXRlZCA9IG9wdGlvbnMub25FbFVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVOb2RlRGlzY2FyZGVkID0gb3B0aW9ucy5vbkJlZm9yZU5vZGVEaXNjYXJkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25Ob2RlRGlzY2FyZGVkID0gb3B0aW9ucy5vbk5vZGVEaXNjYXJkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCA9IG9wdGlvbnMub25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBza2lwRnJvbUNoaWxkcmVuID0gb3B0aW9ucy5za2lwRnJvbUNoaWxkcmVuIHx8IG5vb3A7XG4gICAgdmFyIGFkZENoaWxkID0gb3B0aW9ucy5hZGRDaGlsZCB8fCBmdW5jdGlvbihwYXJlbnQsIGNoaWxkKXsgcmV0dXJuIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7IH07XG4gICAgdmFyIGNoaWxkcmVuT25seSA9IG9wdGlvbnMuY2hpbGRyZW5Pbmx5ID09PSB0cnVlO1xuXG4gICAgLy8gVGhpcyBvYmplY3QgaXMgdXNlZCBhcyBhIGxvb2t1cCB0byBxdWlja2x5IGZpbmQgYWxsIGtleWVkIGVsZW1lbnRzIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS5cbiAgICB2YXIgZnJvbU5vZGVzTG9va3VwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5ZWRSZW1vdmFsTGlzdCA9IFtdO1xuXG4gICAgZnVuY3Rpb24gYWRkS2V5ZWRSZW1vdmFsKGtleSkge1xuICAgICAga2V5ZWRSZW1vdmFsTGlzdC5wdXNoKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSwgc2tpcEtleWVkTm9kZXMpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgdmFyIGN1ckNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcblxuICAgICAgICAgIHZhciBrZXkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoc2tpcEtleWVkTm9kZXMgJiYgKGtleSA9IGdldE5vZGVLZXkoY3VyQ2hpbGQpKSkge1xuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIHNraXBwaW5nIGtleWVkIG5vZGVzIHRoZW4gd2UgYWRkIHRoZSBrZXlcbiAgICAgICAgICAgIC8vIHRvIGEgbGlzdCBzbyB0aGF0IGl0IGNhbiBiZSBoYW5kbGVkIGF0IHRoZSB2ZXJ5IGVuZC5cbiAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPbmx5IHJlcG9ydCB0aGUgbm9kZSBhcyBkaXNjYXJkZWQgaWYgaXQgaXMgbm90IGtleWVkLiBXZSBkbyB0aGlzIGJlY2F1c2VcbiAgICAgICAgICAgIC8vIGF0IHRoZSBlbmQgd2UgbG9vcCB0aHJvdWdoIGFsbCBrZXllZCBlbGVtZW50cyB0aGF0IHdlcmUgdW5tYXRjaGVkXG4gICAgICAgICAgICAvLyBhbmQgdGhlbiBkaXNjYXJkIHRoZW0gaW4gb25lIGZpbmFsIHBhc3MuXG4gICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQoY3VyQ2hpbGQpO1xuICAgICAgICAgICAgaWYgKGN1ckNoaWxkLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMoY3VyQ2hpbGQsIHNraXBLZXllZE5vZGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZW1vdmVzIGEgRE9NIG5vZGUgb3V0IG9mIHRoZSBvcmlnaW5hbCBET01cbiAgICAqXG4gICAgKiBAcGFyYW0gIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIHJlbW92ZVxuICAgICogQHBhcmFtICB7Tm9kZX0gcGFyZW50Tm9kZSBUaGUgbm9kZXMgcGFyZW50XG4gICAgKiBAcGFyYW0gIHtCb29sZWFufSBza2lwS2V5ZWROb2RlcyBJZiB0cnVlIHRoZW4gZWxlbWVudHMgd2l0aCBrZXlzIHdpbGwgYmUgc2tpcHBlZCBhbmQgbm90IGRpc2NhcmRlZC5cbiAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSwgcGFyZW50Tm9kZSwgc2tpcEtleWVkTm9kZXMpIHtcbiAgICAgIGlmIChvbkJlZm9yZU5vZGVEaXNjYXJkZWQobm9kZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH1cblxuICAgICAgb25Ob2RlRGlzY2FyZGVkKG5vZGUpO1xuICAgICAgd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSwgc2tpcEtleWVkTm9kZXMpO1xuICAgIH1cblxuICAgIC8vIC8vIFRyZWVXYWxrZXIgaW1wbGVtZW50YXRpb24gaXMgbm8gZmFzdGVyLCBidXQga2VlcGluZyB0aGlzIGFyb3VuZCBpbiBjYXNlIHRoaXMgY2hhbmdlcyBpbiB0aGUgZnV0dXJlXG4gICAgLy8gZnVuY3Rpb24gaW5kZXhUcmVlKHJvb3QpIHtcbiAgICAvLyAgICAgdmFyIHRyZWVXYWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKFxuICAgIC8vICAgICAgICAgcm9vdCxcbiAgICAvLyAgICAgICAgIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5UKTtcbiAgICAvL1xuICAgIC8vICAgICB2YXIgZWw7XG4gICAgLy8gICAgIHdoaWxlKChlbCA9IHRyZWVXYWxrZXIubmV4dE5vZGUoKSkpIHtcbiAgICAvLyAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGVsKTtcbiAgICAvLyAgICAgICAgIGlmIChrZXkpIHtcbiAgICAvLyAgICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGVsO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgLy8gLy8gTm9kZUl0ZXJhdG9yIGltcGxlbWVudGF0aW9uIGlzIG5vIGZhc3RlciwgYnV0IGtlZXBpbmcgdGhpcyBhcm91bmQgaW4gY2FzZSB0aGlzIGNoYW5nZXMgaW4gdGhlIGZ1dHVyZVxuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gaW5kZXhUcmVlKG5vZGUpIHtcbiAgICAvLyAgICAgdmFyIG5vZGVJdGVyYXRvciA9IGRvY3VtZW50LmNyZWF0ZU5vZGVJdGVyYXRvcihub2RlLCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCk7XG4gICAgLy8gICAgIHZhciBlbDtcbiAgICAvLyAgICAgd2hpbGUoKGVsID0gbm9kZUl0ZXJhdG9yLm5leHROb2RlKCkpKSB7XG4gICAgLy8gICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShlbCk7XG4gICAgLy8gICAgICAgICBpZiAoa2V5KSB7XG4gICAgLy8gICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBlbDtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIGZ1bmN0aW9uIGluZGV4VHJlZShub2RlKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSkge1xuICAgICAgICB2YXIgY3VyQ2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKTtcbiAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGN1ckNoaWxkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFdhbGsgcmVjdXJzaXZlbHlcbiAgICAgICAgICBpbmRleFRyZWUoY3VyQ2hpbGQpO1xuXG4gICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGluZGV4VHJlZShmcm9tTm9kZSk7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVOb2RlQWRkZWQoZWwpIHtcbiAgICAgIG9uTm9kZUFkZGVkKGVsKTtcblxuICAgICAgdmFyIGN1ckNoaWxkID0gZWwuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBjdXJDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCk7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICB2YXIgdW5tYXRjaGVkRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2tleV07XG4gICAgICAgICAgLy8gaWYgd2UgZmluZCBhIGR1cGxpY2F0ZSAjaWQgbm9kZSBpbiBjYWNoZSwgcmVwbGFjZSBgZWxgIHdpdGggY2FjaGUgdmFsdWVcbiAgICAgICAgICAvLyBhbmQgbW9ycGggaXQgdG8gdGhlIGNoaWxkIG5vZGUuXG4gICAgICAgICAgaWYgKHVubWF0Y2hlZEZyb21FbCAmJiBjb21wYXJlTm9kZU5hbWVzKGN1ckNoaWxkLCB1bm1hdGNoZWRGcm9tRWwpKSB7XG4gICAgICAgICAgICBjdXJDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh1bm1hdGNoZWRGcm9tRWwsIGN1ckNoaWxkKTtcbiAgICAgICAgICAgIG1vcnBoRWwodW5tYXRjaGVkRnJvbUVsLCBjdXJDaGlsZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNhbGwgZm9yIGN1ckNoaWxkIGFuZCBpdCdzIGNoaWxkcmVuIHRvIHNlZSBpZiB3ZSBmaW5kIHNvbWV0aGluZyBpblxuICAgICAgICAgIC8vIGZyb21Ob2Rlc0xvb2t1cFxuICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJDaGlsZCA9IG5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBGcm9tRWwoZnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkLCBjdXJGcm9tTm9kZUtleSkge1xuICAgICAgLy8gV2UgaGF2ZSBwcm9jZXNzZWQgYWxsIG9mIHRoZSBcInRvIG5vZGVzXCIuIElmIGN1ckZyb21Ob2RlQ2hpbGQgaXNcbiAgICAgIC8vIG5vbi1udWxsIHRoZW4gd2Ugc3RpbGwgaGF2ZSBzb21lIGZyb20gbm9kZXMgbGVmdCBvdmVyIHRoYXQgbmVlZFxuICAgICAgLy8gdG8gYmUgcmVtb3ZlZFxuICAgICAgd2hpbGUgKGN1ckZyb21Ob2RlQ2hpbGQpIHtcbiAgICAgICAgdmFyIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIGlmICgoY3VyRnJvbU5vZGVLZXkgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpKSkge1xuICAgICAgICAgIC8vIFNpbmNlIHRoZSBub2RlIGlzIGtleWVkIGl0IG1pZ2h0IGJlIG1hdGNoZWQgdXAgbGF0ZXIgc28gd2UgZGVmZXJcbiAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgcmVtb3ZlTm9kZShjdXJGcm9tTm9kZUNoaWxkLCBmcm9tRWwsIHRydWUgLyogc2tpcCBrZXllZCBub2RlcyAqLyk7XG4gICAgICAgIH1cbiAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3JwaEVsKGZyb21FbCwgdG9FbCwgY2hpbGRyZW5Pbmx5KSB7XG4gICAgICB2YXIgdG9FbEtleSA9IGdldE5vZGVLZXkodG9FbCk7XG5cbiAgICAgIGlmICh0b0VsS2V5KSB7XG4gICAgICAgIC8vIElmIGFuIGVsZW1lbnQgd2l0aCBhbiBJRCBpcyBiZWluZyBtb3JwaGVkIHRoZW4gaXQgd2lsbCBiZSBpbiB0aGUgZmluYWxcbiAgICAgICAgLy8gRE9NIHNvIGNsZWFyIGl0IG91dCBvZiB0aGUgc2F2ZWQgZWxlbWVudHMgY29sbGVjdGlvblxuICAgICAgICBkZWxldGUgZnJvbU5vZGVzTG9va3VwW3RvRWxLZXldO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNoaWxkcmVuT25seSkge1xuICAgICAgICAvLyBvcHRpb25hbFxuICAgICAgICBpZiAob25CZWZvcmVFbFVwZGF0ZWQoZnJvbUVsLCB0b0VsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgYXR0cmlidXRlcyBvbiBvcmlnaW5hbCBET00gZWxlbWVudCBmaXJzdFxuICAgICAgICBtb3JwaEF0dHJzKGZyb21FbCwgdG9FbCk7XG4gICAgICAgIC8vIG9wdGlvbmFsXG4gICAgICAgIG9uRWxVcGRhdGVkKGZyb21FbCk7XG5cbiAgICAgICAgaWYgKG9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQoZnJvbUVsLCB0b0VsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZyb21FbC5ub2RlTmFtZSAhPT0gJ1RFWFRBUkVBJykge1xuICAgICAgICBtb3JwaENoaWxkcmVuKGZyb21FbCwgdG9FbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGVjaWFsRWxIYW5kbGVycy5URVhUQVJFQShmcm9tRWwsIHRvRWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vcnBoQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKSB7XG4gICAgICB2YXIgc2tpcEZyb20gPSBza2lwRnJvbUNoaWxkcmVuKGZyb21FbCk7XG4gICAgICB2YXIgY3VyVG9Ob2RlQ2hpbGQgPSB0b0VsLmZpcnN0Q2hpbGQ7XG4gICAgICB2YXIgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgdmFyIGN1clRvTm9kZUtleTtcbiAgICAgIHZhciBjdXJGcm9tTm9kZUtleTtcblxuICAgICAgdmFyIGZyb21OZXh0U2libGluZztcbiAgICAgIHZhciB0b05leHRTaWJsaW5nO1xuICAgICAgdmFyIG1hdGNoaW5nRnJvbUVsO1xuXG4gICAgICAvLyB3YWxrIHRoZSBjaGlsZHJlblxuICAgICAgb3V0ZXI6IHdoaWxlIChjdXJUb05vZGVDaGlsZCkge1xuICAgICAgICB0b05leHRTaWJsaW5nID0gY3VyVG9Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIGN1clRvTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyVG9Ob2RlQ2hpbGQpO1xuXG4gICAgICAgIC8vIHdhbGsgdGhlIGZyb21Ob2RlIGNoaWxkcmVuIGFsbCB0aGUgd2F5IHRocm91Z2hcbiAgICAgICAgd2hpbGUgKCFza2lwRnJvbSAmJiBjdXJGcm9tTm9kZUNoaWxkKSB7XG4gICAgICAgICAgZnJvbU5leHRTaWJsaW5nID0gY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICAgIGlmIChjdXJUb05vZGVDaGlsZC5pc1NhbWVOb2RlICYmIGN1clRvTm9kZUNoaWxkLmlzU2FtZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCkpIHtcbiAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZztcbiAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJGcm9tTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyRnJvbU5vZGVDaGlsZCk7XG5cbiAgICAgICAgICB2YXIgY3VyRnJvbU5vZGVUeXBlID0gY3VyRnJvbU5vZGVDaGlsZC5ub2RlVHlwZTtcblxuICAgICAgICAgIC8vIHRoaXMgbWVhbnMgaWYgdGhlIGN1ckZyb21Ob2RlQ2hpbGQgZG9lc250IGhhdmUgYSBtYXRjaCB3aXRoIHRoZSBjdXJUb05vZGVDaGlsZFxuICAgICAgICAgIHZhciBpc0NvbXBhdGlibGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBjdXJUb05vZGVDaGlsZC5ub2RlVHlwZSkge1xuICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgIC8vIEJvdGggbm9kZXMgYmVpbmcgY29tcGFyZWQgYXJlIEVsZW1lbnQgbm9kZXNcblxuICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHRhcmdldCBub2RlIGhhcyBhIGtleSBzbyB3ZSB3YW50IHRvIG1hdGNoIGl0IHVwIHdpdGggdGhlIGNvcnJlY3QgZWxlbWVudFxuICAgICAgICAgICAgICAgIC8vIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZVxuICAgICAgICAgICAgICAgIGlmIChjdXJUb05vZGVLZXkgIT09IGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBvcmlnaW5hbCBET00gdHJlZSBkb2VzIG5vdCBoYXZlIGEgbWF0Y2hpbmcga2V5IHNvXG4gICAgICAgICAgICAgICAgICAvLyBsZXQncyBjaGVjayBvdXIgbG9va3VwIHRvIHNlZSBpZiB0aGVyZSBpcyBhIG1hdGNoaW5nIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAvLyBET00gdHJlZVxuICAgICAgICAgICAgICAgICAgaWYgKChtYXRjaGluZ0Zyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtjdXJUb05vZGVLZXldKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbU5leHRTaWJsaW5nID09PSBtYXRjaGluZ0Zyb21FbCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3Igc2luZ2xlIGVsZW1lbnQgcmVtb3ZhbHMuIFRvIGF2b2lkIHJlbW92aW5nIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgICAgIC8vIERPTSBub2RlIG91dCBvZiB0aGUgdHJlZSAoc2luY2UgdGhhdCBjYW4gYnJlYWsgQ1NTIHRyYW5zaXRpb25zLCBldGMuKSxcbiAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSB3aWxsIGluc3RlYWQgZGlzY2FyZCB0aGUgY3VycmVudCBub2RlIGFuZCB3YWl0IHVudGlsIHRoZSBuZXh0XG4gICAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0aW9uIHRvIHByb3Blcmx5IG1hdGNoIHVwIHRoZSBrZXllZCB0YXJnZXQgZWxlbWVudCB3aXRoIGl0cyBtYXRjaGluZ1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBmb3VuZCBhIG1hdGNoaW5nIGtleWVkIGVsZW1lbnQgc29tZXdoZXJlIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBMZXQncyBtb3ZlIHRoZSBvcmlnaW5hbCBET00gbm9kZSBpbnRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIGFuZCBtb3JwaFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGl0LlxuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogV2UgdXNlIGluc2VydEJlZm9yZSBpbnN0ZWFkIG9mIHJlcGxhY2VDaGlsZCBiZWNhdXNlIHdlIHdhbnQgdG8gZ28gdGhyb3VnaFxuICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBgcmVtb3ZlTm9kZSgpYCBmdW5jdGlvbiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBiZWluZyBkaXNjYXJkZWQgc28gdGhhdFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGFsbCBsaWZlY3ljbGUgaG9va3MgYXJlIGNvcnJlY3RseSBpbnZva2VkXG4gICAgICAgICAgICAgICAgICAgICAgZnJvbUVsLmluc2VydEJlZm9yZShtYXRjaGluZ0Zyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgc3RpbGwgYSBjaGFuY2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgdXAgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBtYXRjaGluZ0Zyb21FbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG5vZGVzIGFyZSBub3QgY29tcGF0aWJsZSBzaW5jZSB0aGUgXCJ0b1wiIG5vZGUgaGFzIGEga2V5IGFuZCB0aGVyZVxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBubyBtYXRjaGluZyBrZXllZCBub2RlIGluIHRoZSBzb3VyY2UgdHJlZVxuICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgb3JpZ2luYWwgaGFzIGEga2V5XG4gICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBpc0NvbXBhdGlibGUgIT09IGZhbHNlICYmIGNvbXBhcmVOb2RlTmFtZXMoY3VyRnJvbU5vZGVDaGlsZCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICBpZiAoaXNDb21wYXRpYmxlKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgY29tcGF0aWJsZSBET00gZWxlbWVudHMgc28gdHJhbnNmb3JtXG4gICAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgXCJmcm9tXCIgbm9kZSB0byBtYXRjaCB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIHRhcmdldCBET00gbm9kZS5cbiAgICAgICAgICAgICAgICAvLyBNT1JQSFxuICAgICAgICAgICAgICAgIG1vcnBoRWwoY3VyRnJvbU5vZGVDaGlsZCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBURVhUX05PREUgfHwgY3VyRnJvbU5vZGVUeXBlID09IENPTU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAvLyBCb3RoIG5vZGVzIGJlaW5nIGNvbXBhcmVkIGFyZSBUZXh0IG9yIENvbW1lbnQgbm9kZXNcbiAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgLy8gU2ltcGx5IHVwZGF0ZSBub2RlVmFsdWUgb24gdGhlIG9yaWdpbmFsIG5vZGUgdG9cbiAgICAgICAgICAgICAgLy8gY2hhbmdlIHRoZSB0ZXh0IHZhbHVlXG4gICAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUNoaWxkLm5vZGVWYWx1ZSAhPT0gY3VyVG9Ob2RlQ2hpbGQubm9kZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZC5ub2RlVmFsdWUgPSBjdXJUb05vZGVDaGlsZC5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0NvbXBhdGlibGUpIHtcbiAgICAgICAgICAgIC8vIEFkdmFuY2UgYm90aCB0aGUgXCJ0b1wiIGNoaWxkIGFuZCB0aGUgXCJmcm9tXCIgY2hpbGQgc2luY2Ugd2UgZm91bmQgYSBtYXRjaFxuICAgICAgICAgICAgLy8gTm90aGluZyBlbHNlIHRvIGRvIGFzIHdlIGFscmVhZHkgcmVjdXJzaXZlbHkgY2FsbGVkIG1vcnBoQ2hpbGRyZW4gYWJvdmVcbiAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZztcbiAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBObyBjb21wYXRpYmxlIG1hdGNoIHNvIHJlbW92ZSB0aGUgb2xkIG5vZGUgZnJvbSB0aGUgRE9NIGFuZCBjb250aW51ZSB0cnlpbmcgdG8gZmluZCBhXG4gICAgICAgICAgLy8gbWF0Y2ggaW4gdGhlIG9yaWdpbmFsIERPTS4gSG93ZXZlciwgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSBmcm9tIG5vZGUgaXMgbm90IGtleWVkXG4gICAgICAgICAgLy8gc2luY2UgaXQgaXMgcG9zc2libGUgdGhhdCBhIGtleWVkIG5vZGUgbWlnaHQgbWF0Y2ggdXAgd2l0aCBhIG5vZGUgc29tZXdoZXJlIGVsc2UgaW4gdGhlXG4gICAgICAgICAgLy8gdGFyZ2V0IHRyZWUgYW5kIHdlIGRvbid0IHdhbnQgdG8gZGlzY2FyZCBpdCBqdXN0IHlldCBzaW5jZSBpdCBzdGlsbCBtaWdodCBmaW5kIGFcbiAgICAgICAgICAvLyBob21lIGluIHRoZSBmaW5hbCBET00gdHJlZS4gQWZ0ZXIgZXZlcnl0aGluZyBpcyBkb25lIHdlIHdpbGwgcmVtb3ZlIGFueSBrZXllZCBub2Rlc1xuICAgICAgICAgIC8vIHRoYXQgZGlkbid0IGZpbmQgYSBob21lXG4gICAgICAgICAgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgICAgLy8gICAgICAgc3RpbGwgYSBjaGFuY2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgdXAgbGF0ZXJcbiAgICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgIH0gLy8gRU5EOiB3aGlsZShjdXJGcm9tTm9kZUNoaWxkKSB7fVxuXG4gICAgICAgIC8vIElmIHdlIGdvdCB0aGlzIGZhciB0aGVuIHdlIGRpZCBub3QgZmluZCBhIGNhbmRpZGF0ZSBtYXRjaCBmb3JcbiAgICAgICAgLy8gb3VyIFwidG8gbm9kZVwiIGFuZCB3ZSBleGhhdXN0ZWQgYWxsIG9mIHRoZSBjaGlsZHJlbiBcImZyb21cIlxuICAgICAgICAvLyBub2Rlcy4gVGhlcmVmb3JlLCB3ZSB3aWxsIGp1c3QgYXBwZW5kIHRoZSBjdXJyZW50IFwidG9cIiBub2RlXG4gICAgICAgIC8vIHRvIHRoZSBlbmRcbiAgICAgICAgaWYgKGN1clRvTm9kZUtleSAmJiAobWF0Y2hpbmdGcm9tRWwgPSBmcm9tTm9kZXNMb29rdXBbY3VyVG9Ob2RlS2V5XSkgJiYgY29tcGFyZU5vZGVOYW1lcyhtYXRjaGluZ0Zyb21FbCwgY3VyVG9Ob2RlQ2hpbGQpKSB7XG4gICAgICAgICAgLy8gTU9SUEhcbiAgICAgICAgICBpZighc2tpcEZyb20peyBhZGRDaGlsZChmcm9tRWwsIG1hdGNoaW5nRnJvbUVsKTsgfVxuICAgICAgICAgIG1vcnBoRWwobWF0Y2hpbmdGcm9tRWwsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb25CZWZvcmVOb2RlQWRkZWRSZXN1bHQgPSBvbkJlZm9yZU5vZGVBZGRlZChjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgaWYgKG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0KSB7XG4gICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gb25CZWZvcmVOb2RlQWRkZWRSZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJUb05vZGVDaGlsZC5hY3R1YWxpemUpIHtcbiAgICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSBjdXJUb05vZGVDaGlsZC5hY3R1YWxpemUoZnJvbUVsLm93bmVyRG9jdW1lbnQgfHwgZG9jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZENoaWxkKGZyb21FbCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgaGFuZGxlTm9kZUFkZGVkKGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICB9XG5cbiAgICAgIGNsZWFudXBGcm9tRWwoZnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkLCBjdXJGcm9tTm9kZUtleSk7XG5cbiAgICAgIHZhciBzcGVjaWFsRWxIYW5kbGVyID0gc3BlY2lhbEVsSGFuZGxlcnNbZnJvbUVsLm5vZGVOYW1lXTtcbiAgICAgIGlmIChzcGVjaWFsRWxIYW5kbGVyKSB7XG4gICAgICAgIHNwZWNpYWxFbEhhbmRsZXIoZnJvbUVsLCB0b0VsKTtcbiAgICAgIH1cbiAgICB9IC8vIEVORDogbW9ycGhDaGlsZHJlbiguLi4pXG5cbiAgICB2YXIgbW9ycGhlZE5vZGUgPSBmcm9tTm9kZTtcbiAgICB2YXIgbW9ycGhlZE5vZGVUeXBlID0gbW9ycGhlZE5vZGUubm9kZVR5cGU7XG4gICAgdmFyIHRvTm9kZVR5cGUgPSB0b05vZGUubm9kZVR5cGU7XG5cbiAgICBpZiAoIWNoaWxkcmVuT25seSkge1xuICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIHdlIGFyZSBnaXZlbiB0d28gRE9NIG5vZGVzIHRoYXQgYXJlIG5vdFxuICAgICAgLy8gY29tcGF0aWJsZSAoZS5nLiA8ZGl2PiAtLT4gPHNwYW4+IG9yIDxkaXY+IC0tPiBURVhUKVxuICAgICAgaWYgKG1vcnBoZWROb2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIGlmICh0b05vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICBpZiAoIWNvbXBhcmVOb2RlTmFtZXMoZnJvbU5vZGUsIHRvTm9kZSkpIHtcbiAgICAgICAgICAgIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7XG4gICAgICAgICAgICBtb3JwaGVkTm9kZSA9IG1vdmVDaGlsZHJlbihmcm9tTm9kZSwgY3JlYXRlRWxlbWVudE5TKHRvTm9kZS5ub2RlTmFtZSwgdG9Ob2RlLm5hbWVzcGFjZVVSSSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBHb2luZyBmcm9tIGFuIGVsZW1lbnQgbm9kZSB0byBhIHRleHQgbm9kZVxuICAgICAgICAgIG1vcnBoZWROb2RlID0gdG9Ob2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG1vcnBoZWROb2RlVHlwZSA9PT0gVEVYVF9OT0RFIHx8IG1vcnBoZWROb2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7IC8vIFRleHQgb3IgY29tbWVudCBub2RlXG4gICAgICAgIGlmICh0b05vZGVUeXBlID09PSBtb3JwaGVkTm9kZVR5cGUpIHtcbiAgICAgICAgICBpZiAobW9ycGhlZE5vZGUubm9kZVZhbHVlICE9PSB0b05vZGUubm9kZVZhbHVlKSB7XG4gICAgICAgICAgICBtb3JwaGVkTm9kZS5ub2RlVmFsdWUgPSB0b05vZGUubm9kZVZhbHVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBtb3JwaGVkTm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUZXh0IG5vZGUgdG8gc29tZXRoaW5nIGVsc2VcbiAgICAgICAgICBtb3JwaGVkTm9kZSA9IHRvTm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb3JwaGVkTm9kZSA9PT0gdG9Ob2RlKSB7XG4gICAgICAvLyBUaGUgXCJ0byBub2RlXCIgd2FzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIFwiZnJvbSBub2RlXCIgc28gd2UgaGFkIHRvXG4gICAgICAvLyB0b3NzIG91dCB0aGUgXCJmcm9tIG5vZGVcIiBhbmQgdXNlIHRoZSBcInRvIG5vZGVcIlxuICAgICAgb25Ob2RlRGlzY2FyZGVkKGZyb21Ob2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRvTm9kZS5pc1NhbWVOb2RlICYmIHRvTm9kZS5pc1NhbWVOb2RlKG1vcnBoZWROb2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1vcnBoRWwobW9ycGhlZE5vZGUsIHRvTm9kZSwgY2hpbGRyZW5Pbmx5KTtcblxuICAgICAgLy8gV2Ugbm93IG5lZWQgdG8gbG9vcCBvdmVyIGFueSBrZXllZCBub2RlcyB0aGF0IG1pZ2h0IG5lZWQgdG8gYmVcbiAgICAgIC8vIHJlbW92ZWQuIFdlIG9ubHkgZG8gdGhlIHJlbW92YWwgaWYgd2Uga25vdyB0aGF0IHRoZSBrZXllZCBub2RlXG4gICAgICAvLyBuZXZlciBmb3VuZCBhIG1hdGNoLiBXaGVuIGEga2V5ZWQgbm9kZSBpcyBtYXRjaGVkIHVwIHdlIHJlbW92ZVxuICAgICAgLy8gaXQgb3V0IG9mIGZyb21Ob2Rlc0xvb2t1cCBhbmQgd2UgdXNlIGZyb21Ob2Rlc0xvb2t1cCB0byBkZXRlcm1pbmVcbiAgICAgIC8vIGlmIGEga2V5ZWQgbm9kZSBoYXMgYmVlbiBtYXRjaGVkIHVwIG9yIG5vdFxuICAgICAgaWYgKGtleWVkUmVtb3ZhbExpc3QpIHtcbiAgICAgICAgZm9yICh2YXIgaT0wLCBsZW49a2V5ZWRSZW1vdmFsTGlzdC5sZW5ndGg7IGk8bGVuOyBpKyspIHtcbiAgICAgICAgICB2YXIgZWxUb1JlbW92ZSA9IGZyb21Ob2Rlc0xvb2t1cFtrZXllZFJlbW92YWxMaXN0W2ldXTtcbiAgICAgICAgICBpZiAoZWxUb1JlbW92ZSkge1xuICAgICAgICAgICAgcmVtb3ZlTm9kZShlbFRvUmVtb3ZlLCBlbFRvUmVtb3ZlLnBhcmVudE5vZGUsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoaWxkcmVuT25seSAmJiBtb3JwaGVkTm9kZSAhPT0gZnJvbU5vZGUgJiYgZnJvbU5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgaWYgKG1vcnBoZWROb2RlLmFjdHVhbGl6ZSkge1xuICAgICAgICBtb3JwaGVkTm9kZSA9IG1vcnBoZWROb2RlLmFjdHVhbGl6ZShmcm9tTm9kZS5vd25lckRvY3VtZW50IHx8IGRvYyk7XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSBoYWQgdG8gc3dhcCBvdXQgdGhlIGZyb20gbm9kZSB3aXRoIGEgbmV3IG5vZGUgYmVjYXVzZSB0aGUgb2xkXG4gICAgICAvLyBub2RlIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSB0YXJnZXQgbm9kZSB0aGVuIHdlIG5lZWQgdG9cbiAgICAgIC8vIHJlcGxhY2UgdGhlIG9sZCBET00gbm9kZSBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuIFRoaXMgaXMgb25seVxuICAgICAgLy8gcG9zc2libGUgaWYgdGhlIG9yaWdpbmFsIERPTSBub2RlIHdhcyBwYXJ0IG9mIGEgRE9NIHRyZWUgd2hpY2hcbiAgICAgIC8vIHdlIGtub3cgaXMgdGhlIGNhc2UgaWYgaXQgaGFzIGEgcGFyZW50IG5vZGUuXG4gICAgICBmcm9tTm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChtb3JwaGVkTm9kZSwgZnJvbU5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBtb3JwaGVkTm9kZTtcbiAgfTtcbn1cblxudmFyIG1vcnBoZG9tID0gbW9ycGhkb21GYWN0b3J5KG1vcnBoQXR0cnMpO1xuXG5leHBvcnQgZGVmYXVsdCBtb3JwaGRvbTtcbiIsICJpbXBvcnQge1xuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfRElTQUJMRV9XSVRILFxuICBQSFhfRkVFREJBQ0tfRk9SLFxuICBQSFhfUFJVTkUsXG4gIFBIWF9ST09UX0lELFxuICBQSFhfU0VTU0lPTixcbiAgUEhYX1NLSVAsXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9UUklHR0VSX0FDVElPTixcbiAgUEhYX1VQREFURSxcbiAgUEhYX1NUUkVBTSxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgZGV0ZWN0RHVwbGljYXRlSWRzLFxuICBpc0NpZFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBET01Qb3N0TW9ycGhSZXN0b3JlciBmcm9tIFwiLi9kb21fcG9zdF9tb3JwaF9yZXN0b3JlclwiXG5pbXBvcnQgbW9ycGhkb20gZnJvbSBcIm1vcnBoZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRE9NUGF0Y2gge1xuICBzdGF0aWMgcGF0Y2hFbChmcm9tRWwsIHRvRWwsIGFjdGl2ZUVsZW1lbnQpe1xuICAgIG1vcnBoZG9tKGZyb21FbCwgdG9FbCwge1xuICAgICAgY2hpbGRyZW5Pbmx5OiBmYWxzZSxcbiAgICAgIG9uQmVmb3JlRWxVcGRhdGVkOiAoZnJvbUVsLCB0b0VsKSA9PiB7XG4gICAgICAgIGlmKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC5pc1NhbWVOb2RlKGZyb21FbCkgJiYgRE9NLmlzRm9ybUlucHV0KGZyb21FbCkpe1xuICAgICAgICAgIERPTS5tZXJnZUZvY3VzZWRJbnB1dChmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgY29uc3RydWN0b3IodmlldywgY29udGFpbmVyLCBpZCwgaHRtbCwgc3RyZWFtcywgdGFyZ2V0Q0lEKXtcbiAgICB0aGlzLnZpZXcgPSB2aWV3XG4gICAgdGhpcy5saXZlU29ja2V0ID0gdmlldy5saXZlU29ja2V0XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXJcbiAgICB0aGlzLmlkID0gaWRcbiAgICB0aGlzLnJvb3RJRCA9IHZpZXcucm9vdC5pZFxuICAgIHRoaXMuaHRtbCA9IGh0bWxcbiAgICB0aGlzLnN0cmVhbXMgPSBzdHJlYW1zXG4gICAgdGhpcy5zdHJlYW1JbnNlcnRzID0ge31cbiAgICB0aGlzLnRhcmdldENJRCA9IHRhcmdldENJRFxuICAgIHRoaXMuY2lkUGF0Y2ggPSBpc0NpZCh0aGlzLnRhcmdldENJRClcbiAgICB0aGlzLnBlbmRpbmdSZW1vdmVzID0gW11cbiAgICB0aGlzLnBoeFJlbW92ZSA9IHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFwicmVtb3ZlXCIpXG4gICAgdGhpcy5jYWxsYmFja3MgPSB7XG4gICAgICBiZWZvcmVhZGRlZDogW10sIGJlZm9yZXVwZGF0ZWQ6IFtdLCBiZWZvcmVwaHhDaGlsZEFkZGVkOiBbXSxcbiAgICAgIGFmdGVyYWRkZWQ6IFtdLCBhZnRlcnVwZGF0ZWQ6IFtdLCBhZnRlcmRpc2NhcmRlZDogW10sIGFmdGVycGh4Q2hpbGRBZGRlZDogW10sXG4gICAgICBhZnRlcnRyYW5zaXRpb25zRGlzY2FyZGVkOiBbXVxuICAgIH1cbiAgfVxuXG4gIGJlZm9yZShraW5kLCBjYWxsYmFjayl7IHRoaXMuY2FsbGJhY2tzW2BiZWZvcmUke2tpbmR9YF0ucHVzaChjYWxsYmFjaykgfVxuICBhZnRlcihraW5kLCBjYWxsYmFjayl7IHRoaXMuY2FsbGJhY2tzW2BhZnRlciR7a2luZH1gXS5wdXNoKGNhbGxiYWNrKSB9XG5cbiAgdHJhY2tCZWZvcmUoa2luZCwgLi4uYXJncyl7XG4gICAgdGhpcy5jYWxsYmFja3NbYGJlZm9yZSR7a2luZH1gXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKC4uLmFyZ3MpKVxuICB9XG5cbiAgdHJhY2tBZnRlcihraW5kLCAuLi5hcmdzKXtcbiAgICB0aGlzLmNhbGxiYWNrc1tgYWZ0ZXIke2tpbmR9YF0uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayguLi5hcmdzKSlcbiAgfVxuXG4gIG1hcmtQcnVuYWJsZUNvbnRlbnRGb3JSZW1vdmFsKCl7XG4gICAgbGV0IHBoeFVwZGF0ZSA9IHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9VUERBVEUpXG4gICAgRE9NLmFsbCh0aGlzLmNvbnRhaW5lciwgYFske3BoeFVwZGF0ZX09JHtQSFhfU1RSRUFNfV1gLCBlbCA9PiBlbC5pbm5lckhUTUwgPSBcIlwiKVxuICAgIERPTS5hbGwodGhpcy5jb250YWluZXIsIGBbJHtwaHhVcGRhdGV9PWFwcGVuZF0gPiAqLCBbJHtwaHhVcGRhdGV9PXByZXBlbmRdID4gKmAsIGVsID0+IHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfUFJVTkUsIFwiXCIpXG4gICAgfSlcbiAgfVxuXG4gIHBlcmZvcm0oKXtcbiAgICBsZXQge3ZpZXcsIGxpdmVTb2NrZXQsIGNvbnRhaW5lciwgaHRtbH0gPSB0aGlzXG4gICAgbGV0IHRhcmdldENvbnRhaW5lciA9IHRoaXMuaXNDSURQYXRjaCgpID8gdGhpcy50YXJnZXRDSURDb250YWluZXIoaHRtbCkgOiBjb250YWluZXJcbiAgICBpZih0aGlzLmlzQ0lEUGF0Y2goKSAmJiAhdGFyZ2V0Q29udGFpbmVyKXsgcmV0dXJuIH1cblxuICAgIGxldCBmb2N1c2VkID0gbGl2ZVNvY2tldC5nZXRBY3RpdmVFbGVtZW50KClcbiAgICBsZXQge3NlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmR9ID0gZm9jdXNlZCAmJiBET00uaGFzU2VsZWN0aW9uUmFuZ2UoZm9jdXNlZCkgPyBmb2N1c2VkIDoge31cbiAgICBsZXQgcGh4VXBkYXRlID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9VUERBVEUpXG4gICAgbGV0IHBoeEZlZWRiYWNrRm9yID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9GRUVEQkFDS19GT1IpXG4gICAgbGV0IGRpc2FibGVXaXRoID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9ESVNBQkxFX1dJVEgpXG4gICAgbGV0IHBoeFRyaWdnZXJFeHRlcm5hbCA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVFJJR0dFUl9BQ1RJT04pXG4gICAgbGV0IGFkZGVkID0gW11cbiAgICBsZXQgdXBkYXRlcyA9IFtdXG4gICAgbGV0IGFwcGVuZFByZXBlbmRVcGRhdGVzID0gW11cblxuICAgIGxldCBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBudWxsXG5cbiAgICBsZXQgZGlmZkhUTUwgPSBsaXZlU29ja2V0LnRpbWUoXCJwcmVtb3JwaCBjb250YWluZXIgcHJlcFwiLCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZERpZmZIVE1MKGNvbnRhaW5lciwgaHRtbCwgcGh4VXBkYXRlLCB0YXJnZXRDb250YWluZXIpXG4gICAgfSlcblxuICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBjb250YWluZXIpXG4gICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgY29udGFpbmVyLCBjb250YWluZXIpXG5cbiAgICBsaXZlU29ja2V0LnRpbWUoXCJtb3JwaGRvbVwiLCAoKSA9PiB7XG5cbiAgICAgIHRoaXMuc3RyZWFtcy5mb3JFYWNoKChbaW5zZXJ0cywgZGVsZXRlSWRzXSkgPT4ge1xuICAgICAgICB0aGlzLnN0cmVhbUluc2VydHMgPSBPYmplY3QuYXNzaWduKHRoaXMuc3RyZWFtSW5zZXJ0cywgaW5zZXJ0cylcbiAgICAgICAgZGVsZXRlSWRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgIGxldCBjaGlsZCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGBbaWQ9XCIke2lkfVwiXWApXG4gICAgICAgICAgaWYoY2hpbGQpe1xuICAgICAgICAgICAgaWYoIXRoaXMubWF5YmVQZW5kaW5nUmVtb3ZlKGNoaWxkKSl7XG4gICAgICAgICAgICAgIGNoaWxkLnJlbW92ZSgpXG4gICAgICAgICAgICAgIHRoaXMub25Ob2RlRGlzY2FyZGVkKGNoaWxkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG5cbiAgICAgIG1vcnBoZG9tKHRhcmdldENvbnRhaW5lciwgZGlmZkhUTUwsIHtcbiAgICAgICAgY2hpbGRyZW5Pbmx5OiB0YXJnZXRDb250YWluZXIuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpID09PSBudWxsLFxuICAgICAgICBnZXROb2RlS2V5OiAobm9kZSkgPT4ge1xuICAgICAgICAgIHJldHVybiBET00uaXNQaHhEZXN0cm95ZWQobm9kZSkgPyBudWxsIDogbm9kZS5pZFxuICAgICAgICB9LFxuICAgICAgICAvLyBza2lwIGluZGV4aW5nIGZyb20gY2hpbGRyZW4gd2hlbiBjb250YWluZXIgaXMgc3RyZWFtXG4gICAgICAgIHNraXBGcm9tQ2hpbGRyZW46IChmcm9tKSA9PiB7IHJldHVybiBmcm9tLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpID09PSBQSFhfU1RSRUFNIH0sXG4gICAgICAgIC8vIHRlbGwgbW9ycGhkb20gaG93IHRvIGFkZCBhIGNoaWxkXG4gICAgICAgIGFkZENoaWxkOiAocGFyZW50LCBjaGlsZCkgPT4ge1xuICAgICAgICAgIGxldCBzdHJlYW1BdCA9IGNoaWxkLmlkID8gdGhpcy5zdHJlYW1JbnNlcnRzW2NoaWxkLmlkXSA6IHVuZGVmaW5lZFxuICAgICAgICAgIGlmKHN0cmVhbUF0ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCkgfVxuXG4gICAgICAgICAgLy9zdHJlYW1pbmdcbiAgICAgICAgICBET00ucHV0UHJpdmF0ZShjaGlsZCwgUEhYX1NUUkVBTSwgdHJ1ZSlcbiAgICAgICAgICBpZihzdHJlYW1BdCA9PT0gMCl7XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBjaGlsZClcbiAgICAgICAgICB9IGVsc2UgaWYoc3RyZWFtQXQgPT09IC0xKXtcbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZClcbiAgICAgICAgICB9IGVsc2UgaWYoc3RyZWFtQXQgPiAwKXtcbiAgICAgICAgICAgIGxldCBzaWJsaW5nID0gQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pW3N0cmVhbUF0XVxuICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgc2libGluZylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uQmVmb3JlTm9kZUFkZGVkOiAoZWwpID0+IHtcbiAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwiYWRkZWRcIiwgZWwpXG4gICAgICAgICAgcmV0dXJuIGVsXG4gICAgICAgIH0sXG4gICAgICAgIG9uTm9kZUFkZGVkOiAoZWwpID0+IHtcbiAgICAgICAgICAvLyBoYWNrIHRvIGZpeCBTYWZhcmkgaGFuZGxpbmcgb2YgaW1nIHNyY3NldCBhbmQgdmlkZW8gdGFnc1xuICAgICAgICAgIGlmKGVsIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCAmJiBlbC5zcmNzZXQpe1xuICAgICAgICAgICAgZWwuc3Jjc2V0ID0gZWwuc3Jjc2V0XG4gICAgICAgICAgfSBlbHNlIGlmKGVsIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCAmJiBlbC5hdXRvcGxheSl7XG4gICAgICAgICAgICBlbC5wbGF5KClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoRE9NLmlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChlbCwgcGh4VHJpZ2dlckV4dGVybmFsKSl7XG4gICAgICAgICAgICBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBlbFxuICAgICAgICAgIH1cbiAgICAgICAgICAvL2lucHV0IGhhbmRsaW5nXG4gICAgICAgICAgRE9NLmRpc2NhcmRFcnJvcih0YXJnZXRDb250YWluZXIsIGVsLCBwaHhGZWVkYmFja0ZvcilcbiAgICAgICAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgICAgICAgIGlmKChET00uaXNQaHhDaGlsZChlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbCkpIHx8IERPTS5pc1BoeFN0aWNreShlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbC5wYXJlbnROb2RlKSl7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJwaHhDaGlsZEFkZGVkXCIsIGVsKVxuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRlZC5wdXNoKGVsKVxuICAgICAgICB9LFxuICAgICAgICBvbk5vZGVEaXNjYXJkZWQ6IChlbCkgPT4gdGhpcy5vbk5vZGVEaXNjYXJkZWQoZWwpLFxuICAgICAgICBvbkJlZm9yZU5vZGVEaXNjYXJkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BSVU5FKSAhPT0gbnVsbCl7IHJldHVybiB0cnVlIH1cbiAgICAgICAgICBpZihET00ucHJpdmF0ZShlbCwgUEhYX1NUUkVBTSkpeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICAgIGlmKGVsLnBhcmVudEVsZW1lbnQgIT09IG51bGwgJiYgRE9NLmlzUGh4VXBkYXRlKGVsLnBhcmVudEVsZW1lbnQsIHBoeFVwZGF0ZSwgW1wiYXBwZW5kXCIsIFwicHJlcGVuZFwiXSkgJiYgZWwuaWQpeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICAgIGlmKHRoaXMubWF5YmVQZW5kaW5nUmVtb3ZlKGVsKSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgICAgaWYodGhpcy5za2lwQ0lEU2libGluZyhlbCkpeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIG9uRWxVcGRhdGVkOiAoZWwpID0+IHtcbiAgICAgICAgICBpZihET00uaXNOb3dUcmlnZ2VyRm9ybUV4dGVybmFsKGVsLCBwaHhUcmlnZ2VyRXh0ZXJuYWwpKXtcbiAgICAgICAgICAgIGV4dGVybmFsRm9ybVRyaWdnZXJlZCA9IGVsXG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZXMucHVzaChlbClcbiAgICAgICAgICB0aGlzLm1heWJlUmVPcmRlclN0cmVhbShlbClcbiAgICAgICAgfSxcbiAgICAgICAgb25CZWZvcmVFbFVwZGF0ZWQ6IChmcm9tRWwsIHRvRWwpID0+IHtcbiAgICAgICAgICBET00uY2xlYW5DaGlsZE5vZGVzKHRvRWwsIHBoeFVwZGF0ZSlcbiAgICAgICAgICBpZih0aGlzLnNraXBDSURTaWJsaW5nKHRvRWwpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZihET00uaXNQaHhTdGlja3koZnJvbUVsKSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgICAgaWYoRE9NLmlzSWdub3JlZChmcm9tRWwsIHBoeFVwZGF0ZSkgfHwgKGZyb21FbC5mb3JtICYmIGZyb21FbC5mb3JtLmlzU2FtZU5vZGUoZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkKSkpe1xuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7aXNJZ25vcmVkOiB0cnVlfSlcbiAgICAgICAgICAgIHVwZGF0ZXMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihmcm9tRWwudHlwZSA9PT0gXCJudW1iZXJcIiAmJiAoZnJvbUVsLnZhbGlkaXR5ICYmIGZyb21FbC52YWxpZGl0eS5iYWRJbnB1dCkpeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICAgIGlmKCFET00uc3luY1BlbmRpbmdSZWYoZnJvbUVsLCB0b0VsLCBkaXNhYmxlV2l0aCkpe1xuICAgICAgICAgICAgaWYoRE9NLmlzVXBsb2FkSW5wdXQoZnJvbUVsKSl7XG4gICAgICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGZyb21FbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbmVzdGVkIHZpZXcgaGFuZGxpbmdcbiAgICAgICAgICBpZihET00uaXNQaHhDaGlsZCh0b0VsKSl7XG4gICAgICAgICAgICBsZXQgcHJldlNlc3Npb24gPSBmcm9tRWwuZ2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OKVxuICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7ZXhjbHVkZTogW1BIWF9TVEFUSUNdfSlcbiAgICAgICAgICAgIGlmKHByZXZTZXNzaW9uICE9PSBcIlwiKXsgZnJvbUVsLnNldEF0dHJpYnV0ZShQSFhfU0VTU0lPTiwgcHJldlNlc3Npb24pIH1cbiAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQsIHRoaXMucm9vdElEKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpbnB1dCBoYW5kbGluZ1xuICAgICAgICAgIERPTS5jb3B5UHJpdmF0ZXModG9FbCwgZnJvbUVsKVxuICAgICAgICAgIERPTS5kaXNjYXJkRXJyb3IodGFyZ2V0Q29udGFpbmVyLCB0b0VsLCBwaHhGZWVkYmFja0ZvcilcblxuICAgICAgICAgIGxldCBpc0ZvY3VzZWRGb3JtRWwgPSBmb2N1c2VkICYmIGZyb21FbC5pc1NhbWVOb2RlKGZvY3VzZWQpICYmIERPTS5pc0Zvcm1JbnB1dChmcm9tRWwpXG4gICAgICAgICAgaWYoaXNGb2N1c2VkRm9ybUVsICYmIGZyb21FbC50eXBlICE9PSBcImhpZGRlblwiKXtcbiAgICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIERPTS5tZXJnZUZvY3VzZWRJbnB1dChmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgICBET00uc3luY0F0dHJzVG9Qcm9wcyhmcm9tRWwpXG4gICAgICAgICAgICB1cGRhdGVzLnB1c2goZnJvbUVsKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYoRE9NLmlzUGh4VXBkYXRlKHRvRWwsIHBoeFVwZGF0ZSwgW1wiYXBwZW5kXCIsIFwicHJlcGVuZFwiXSkpe1xuICAgICAgICAgICAgICBhcHBlbmRQcmVwZW5kVXBkYXRlcy5wdXNoKG5ldyBET01Qb3N0TW9ycGhSZXN0b3Jlcihmcm9tRWwsIHRvRWwsIHRvRWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRE9NLnN5bmNBdHRyc1RvUHJvcHModG9FbClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnModG9FbClcbiAgICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpZihsaXZlU29ja2V0LmlzRGVidWdFbmFibGVkKCkpeyBkZXRlY3REdXBsaWNhdGVJZHMoKSB9XG5cbiAgICBpZihhcHBlbmRQcmVwZW5kVXBkYXRlcy5sZW5ndGggPiAwKXtcbiAgICAgIGxpdmVTb2NrZXQudGltZShcInBvc3QtbW9ycGggYXBwZW5kL3ByZXBlbmQgcmVzdG9yYXRpb25cIiwgKCkgPT4ge1xuICAgICAgICBhcHBlbmRQcmVwZW5kVXBkYXRlcy5mb3JFYWNoKHVwZGF0ZSA9PiB1cGRhdGUucGVyZm9ybSgpKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBsaXZlU29ja2V0LnNpbGVuY2VFdmVudHMoKCkgPT4gRE9NLnJlc3RvcmVGb2N1cyhmb2N1c2VkLCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKSlcbiAgICBET00uZGlzcGF0Y2hFdmVudChkb2N1bWVudCwgXCJwaHg6dXBkYXRlXCIpXG4gICAgYWRkZWQuZm9yRWFjaChlbCA9PiB0aGlzLnRyYWNrQWZ0ZXIoXCJhZGRlZFwiLCBlbCkpXG4gICAgdXBkYXRlcy5mb3JFYWNoKGVsID0+IHRoaXMudHJhY2tBZnRlcihcInVwZGF0ZWRcIiwgZWwpKVxuXG4gICAgdGhpcy50cmFuc2l0aW9uUGVuZGluZ1JlbW92ZXMoKVxuXG4gICAgaWYoZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkKXtcbiAgICAgIGxpdmVTb2NrZXQudW5sb2FkKClcbiAgICAgIGV4dGVybmFsRm9ybVRyaWdnZXJlZC5zdWJtaXQoKVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgb25Ob2RlRGlzY2FyZGVkKGVsKXtcbiAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgIGlmKERPTS5pc1BoeENoaWxkKGVsKSB8fCBET00uaXNQaHhTdGlja3koZWwpKXsgdGhpcy5saXZlU29ja2V0LmRlc3Ryb3lWaWV3QnlFbChlbCkgfVxuICAgIHRoaXMudHJhY2tBZnRlcihcImRpc2NhcmRlZFwiLCBlbClcbiAgfVxuXG4gIG1heWJlUGVuZGluZ1JlbW92ZShub2RlKXtcbiAgICBpZihub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSh0aGlzLnBoeFJlbW92ZSkgIT09IG51bGwpe1xuICAgICAgdGhpcy5wZW5kaW5nUmVtb3Zlcy5wdXNoKG5vZGUpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBtYXliZVJlT3JkZXJTdHJlYW0oZWwpe1xuICAgIGxldCBzdHJlYW1BdCA9IGVsLmlkID8gdGhpcy5zdHJlYW1JbnNlcnRzW2VsLmlkXSA6IHVuZGVmaW5lZFxuICAgIGlmKHN0cmVhbUF0ID09PSB1bmRlZmluZWQpeyByZXR1cm4gfVxuXG4gICAgRE9NLnB1dFByaXZhdGUoZWwsIFBIWF9TVFJFQU0sIHRydWUpXG4gICAgaWYoc3RyZWFtQXQgPT09IDApe1xuICAgICAgZWwucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWwsIGVsLnBhcmVudEVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpXG4gICAgfSBlbHNlIGlmKHN0cmVhbUF0ID4gMCl7XG4gICAgICBsZXQgY2hpbGRyZW4gPSBBcnJheS5mcm9tKGVsLnBhcmVudEVsZW1lbnQuY2hpbGRyZW4pXG4gICAgICBsZXQgb2xkSW5kZXggPSBjaGlsZHJlbi5pbmRleE9mKGVsKVxuICAgICAgaWYoc3RyZWFtQXQgPj0gY2hpbGRyZW4ubGVuZ3RoIC0gMSl7XG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZWwpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgc2libGluZyA9IGNoaWxkcmVuW3N0cmVhbUF0XVxuICAgICAgICBpZihvbGRJbmRleCA+IHN0cmVhbUF0KXtcbiAgICAgICAgICBlbC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShlbCwgc2libGluZylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShlbCwgc2libGluZy5uZXh0RWxlbWVudFNpYmxpbmcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0cmFuc2l0aW9uUGVuZGluZ1JlbW92ZXMoKXtcbiAgICBsZXQge3BlbmRpbmdSZW1vdmVzLCBsaXZlU29ja2V0fSA9IHRoaXNcbiAgICBpZihwZW5kaW5nUmVtb3Zlcy5sZW5ndGggPiAwKXtcbiAgICAgIGxpdmVTb2NrZXQudHJhbnNpdGlvblJlbW92ZXMocGVuZGluZ1JlbW92ZXMpXG4gICAgICBsaXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBwZW5kaW5nUmVtb3Zlcy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBsZXQgY2hpbGQgPSBET00uZmlyc3RQaHhDaGlsZChlbClcbiAgICAgICAgICBpZihjaGlsZCl7IGxpdmVTb2NrZXQuZGVzdHJveVZpZXdCeUVsKGNoaWxkKSB9XG4gICAgICAgICAgZWwucmVtb3ZlKClcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy50cmFja0FmdGVyKFwidHJhbnNpdGlvbnNEaXNjYXJkZWRcIiwgcGVuZGluZ1JlbW92ZXMpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGlzQ0lEUGF0Y2goKXsgcmV0dXJuIHRoaXMuY2lkUGF0Y2ggfVxuXG4gIHNraXBDSURTaWJsaW5nKGVsKXtcbiAgICByZXR1cm4gZWwubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmIGVsLmdldEF0dHJpYnV0ZShQSFhfU0tJUCkgIT09IG51bGxcbiAgfVxuXG4gIHRhcmdldENJRENvbnRhaW5lcihodG1sKXtcbiAgICBpZighdGhpcy5pc0NJRFBhdGNoKCkpeyByZXR1cm4gfVxuICAgIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmNvbnRhaW5lciwgdGhpcy50YXJnZXRDSUQpXG4gICAgaWYocmVzdC5sZW5ndGggPT09IDAgJiYgRE9NLmNoaWxkTm9kZUxlbmd0aChodG1sKSA9PT0gMSl7XG4gICAgICByZXR1cm4gZmlyc3RcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpcnN0ICYmIGZpcnN0LnBhcmVudE5vZGVcbiAgICB9XG4gIH1cblxuICAvLyBidWlsZHMgSFRNTCBmb3IgbW9ycGhkb20gcGF0Y2hcbiAgLy8gLSBmb3IgZnVsbCBwYXRjaGVzIG9mIExpdmVWaWV3IG9yIGEgY29tcG9uZW50IHdpdGggYSBzaW5nbGVcbiAgLy8gICByb290IG5vZGUsIHNpbXBseSByZXR1cm5zIHRoZSBIVE1MXG4gIC8vIC0gZm9yIHBhdGNoZXMgb2YgYSBjb21wb25lbnQgd2l0aCBtdWx0aXBsZSByb290IG5vZGVzLCB0aGVcbiAgLy8gICBwYXJlbnQgbm9kZSBiZWNvbWVzIHRoZSB0YXJnZXQgY29udGFpbmVyIGFuZCBub24tY29tcG9uZW50XG4gIC8vICAgc2libGluZ3MgYXJlIG1hcmtlZCBhcyBza2lwLlxuICBidWlsZERpZmZIVE1MKGNvbnRhaW5lciwgaHRtbCwgcGh4VXBkYXRlLCB0YXJnZXRDb250YWluZXIpe1xuICAgIGxldCBpc0NJRFBhdGNoID0gdGhpcy5pc0NJRFBhdGNoKClcbiAgICBsZXQgaXNDSURXaXRoU2luZ2xlUm9vdCA9IGlzQ0lEUGF0Y2ggJiYgdGFyZ2V0Q29udGFpbmVyLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKSA9PT0gdGhpcy50YXJnZXRDSUQudG9TdHJpbmcoKVxuICAgIGlmKCFpc0NJRFBhdGNoIHx8IGlzQ0lEV2l0aFNpbmdsZVJvb3Qpe1xuICAgICAgcmV0dXJuIGh0bWxcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY29tcG9uZW50IHBhdGNoIHdpdGggbXVsdGlwbGUgQ0lEIHJvb3RzXG4gICAgICBsZXQgZGlmZkNvbnRhaW5lciA9IG51bGxcbiAgICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgICAgZGlmZkNvbnRhaW5lciA9IERPTS5jbG9uZU5vZGUodGFyZ2V0Q29udGFpbmVyKVxuICAgICAgbGV0IFtmaXJzdENvbXBvbmVudCwgLi4ucmVzdF0gPSBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KGRpZmZDb250YWluZXIsIHRoaXMudGFyZ2V0Q0lEKVxuICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbFxuICAgICAgcmVzdC5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZSgpKVxuICAgICAgQXJyYXkuZnJvbShkaWZmQ29udGFpbmVyLmNoaWxkTm9kZXMpLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAvLyB3ZSBjYW4gb25seSBza2lwIHRyYWNrYWJsZSBub2RlcyB3aXRoIGFuIElEXG4gICAgICAgIGlmKGNoaWxkLmlkICYmIGNoaWxkLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBjaGlsZC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkgIT09IHRoaXMudGFyZ2V0Q0lELnRvU3RyaW5nKCkpe1xuICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShQSFhfU0tJUCwgXCJcIilcbiAgICAgICAgICBjaGlsZC5pbm5lckhUTUwgPSBcIlwiXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBBcnJheS5mcm9tKHRlbXBsYXRlLmNvbnRlbnQuY2hpbGROb2RlcykuZm9yRWFjaChlbCA9PiBkaWZmQ29udGFpbmVyLmluc2VydEJlZm9yZShlbCwgZmlyc3RDb21wb25lbnQpKVxuICAgICAgZmlyc3RDb21wb25lbnQucmVtb3ZlKClcbiAgICAgIHJldHVybiBkaWZmQ29udGFpbmVyLm91dGVySFRNTFxuICAgIH1cbiAgfVxuXG4gIGluZGV4T2YocGFyZW50LCBjaGlsZCl7IHJldHVybiBBcnJheS5mcm9tKHBhcmVudC5jaGlsZHJlbikuaW5kZXhPZihjaGlsZCkgfVxufVxuIiwgImltcG9ydCB7XG4gIENPTVBPTkVOVFMsXG4gIERZTkFNSUNTLFxuICBURU1QTEFURVMsXG4gIEVWRU5UUyxcbiAgUEhYX0NPTVBPTkVOVCxcbiAgUEhYX1NLSVAsXG4gIFJFUExZLFxuICBTVEFUSUMsXG4gIFRJVExFLFxuICBTVFJFQU0sXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGlzT2JqZWN0LFxuICBsb2dFcnJvcixcbiAgaXNDaWQsXG59IGZyb20gXCIuL3V0aWxzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyZWQge1xuICBzdGF0aWMgZXh0cmFjdChkaWZmKXtcbiAgICBsZXQge1tSRVBMWV06IHJlcGx5LCBbRVZFTlRTXTogZXZlbnRzLCBbVElUTEVdOiB0aXRsZX0gPSBkaWZmXG4gICAgZGVsZXRlIGRpZmZbUkVQTFldXG4gICAgZGVsZXRlIGRpZmZbRVZFTlRTXVxuICAgIGRlbGV0ZSBkaWZmW1RJVExFXVxuICAgIHJldHVybiB7ZGlmZiwgdGl0bGUsIHJlcGx5OiByZXBseSB8fCBudWxsLCBldmVudHM6IGV2ZW50cyB8fCBbXX1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXdJZCwgcmVuZGVyZWQpe1xuICAgIHRoaXMudmlld0lkID0gdmlld0lkXG4gICAgdGhpcy5yZW5kZXJlZCA9IHt9XG4gICAgdGhpcy5tZXJnZURpZmYocmVuZGVyZWQpXG4gIH1cblxuICBwYXJlbnRWaWV3SWQoKXsgcmV0dXJuIHRoaXMudmlld0lkIH1cblxuICB0b1N0cmluZyhvbmx5Q2lkcyl7XG4gICAgbGV0IFtzdHIsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVUb1N0cmluZyh0aGlzLnJlbmRlcmVkLCB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdLCBvbmx5Q2lkcylcbiAgICByZXR1cm4gW3N0ciwgc3RyZWFtc11cbiAgfVxuXG4gIHJlY3Vyc2l2ZVRvU3RyaW5nKHJlbmRlcmVkLCBjb21wb25lbnRzID0gcmVuZGVyZWRbQ09NUE9ORU5UU10sIG9ubHlDaWRzKXtcbiAgICBvbmx5Q2lkcyA9IG9ubHlDaWRzID8gbmV3IFNldChvbmx5Q2lkcykgOiBudWxsXG4gICAgbGV0IG91dHB1dCA9IHtidWZmZXI6IFwiXCIsIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsIG9ubHlDaWRzOiBvbmx5Q2lkcywgc3RyZWFtczogbmV3IFNldCgpfVxuICAgIHRoaXMudG9PdXRwdXRCdWZmZXIocmVuZGVyZWQsIG51bGwsIG91dHB1dClcbiAgICByZXR1cm4gW291dHB1dC5idWZmZXIsIG91dHB1dC5zdHJlYW1zXVxuICB9XG5cbiAgY29tcG9uZW50Q0lEcyhkaWZmKXsgcmV0dXJuIE9iamVjdC5rZXlzKGRpZmZbQ09NUE9ORU5UU10gfHwge30pLm1hcChpID0+IHBhcnNlSW50KGkpKSB9XG5cbiAgaXNDb21wb25lbnRPbmx5RGlmZihkaWZmKXtcbiAgICBpZighZGlmZltDT01QT05FTlRTXSl7IHJldHVybiBmYWxzZSB9XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGRpZmYpLmxlbmd0aCA9PT0gMVxuICB9XG5cbiAgZ2V0Q29tcG9uZW50KGRpZmYsIGNpZCl7IHJldHVybiBkaWZmW0NPTVBPTkVOVFNdW2NpZF0gfVxuXG4gIG1lcmdlRGlmZihkaWZmKXtcbiAgICBsZXQgbmV3YyA9IGRpZmZbQ09NUE9ORU5UU11cbiAgICBsZXQgY2FjaGUgPSB7fVxuICAgIGRlbGV0ZSBkaWZmW0NPTVBPTkVOVFNdXG4gICAgdGhpcy5yZW5kZXJlZCA9IHRoaXMubXV0YWJsZU1lcmdlKHRoaXMucmVuZGVyZWQsIGRpZmYpXG4gICAgdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSA9IHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10gfHwge31cblxuICAgIGlmKG5ld2Mpe1xuICAgICAgbGV0IG9sZGMgPSB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdXG5cbiAgICAgIGZvcihsZXQgY2lkIGluIG5ld2Mpe1xuICAgICAgICBuZXdjW2NpZF0gPSB0aGlzLmNhY2hlZEZpbmRDb21wb25lbnQoY2lkLCBuZXdjW2NpZF0sIG9sZGMsIG5ld2MsIGNhY2hlKVxuICAgICAgfVxuXG4gICAgICBmb3IobGV0IGNpZCBpbiBuZXdjKXsgb2xkY1tjaWRdID0gbmV3Y1tjaWRdIH1cbiAgICAgIGRpZmZbQ09NUE9ORU5UU10gPSBuZXdjXG4gICAgfVxuICB9XG5cbiAgY2FjaGVkRmluZENvbXBvbmVudChjaWQsIGNkaWZmLCBvbGRjLCBuZXdjLCBjYWNoZSl7XG4gICAgaWYoY2FjaGVbY2lkXSl7XG4gICAgICByZXR1cm4gY2FjaGVbY2lkXVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmRpZmYsIHN0YXQsIHNjaWQgPSBjZGlmZltTVEFUSUNdXG5cbiAgICAgIGlmKGlzQ2lkKHNjaWQpKXtcbiAgICAgICAgbGV0IHRkaWZmXG5cbiAgICAgICAgaWYoc2NpZCA+IDApe1xuICAgICAgICAgIHRkaWZmID0gdGhpcy5jYWNoZWRGaW5kQ29tcG9uZW50KHNjaWQsIG5ld2Nbc2NpZF0sIG9sZGMsIG5ld2MsIGNhY2hlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRkaWZmID0gb2xkY1stc2NpZF1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXQgPSB0ZGlmZltTVEFUSUNdXG4gICAgICAgIG5kaWZmID0gdGhpcy5jbG9uZU1lcmdlKHRkaWZmLCBjZGlmZilcbiAgICAgICAgbmRpZmZbU1RBVElDXSA9IHN0YXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5kaWZmID0gY2RpZmZbU1RBVElDXSAhPT0gdW5kZWZpbmVkID8gY2RpZmYgOiB0aGlzLmNsb25lTWVyZ2Uob2xkY1tjaWRdIHx8IHt9LCBjZGlmZilcbiAgICAgIH1cblxuICAgICAgY2FjaGVbY2lkXSA9IG5kaWZmXG4gICAgICByZXR1cm4gbmRpZmZcbiAgICB9XG4gIH1cblxuICBtdXRhYmxlTWVyZ2UodGFyZ2V0LCBzb3VyY2Upe1xuICAgIGlmKHNvdXJjZVtTVEFUSUNdICE9PSB1bmRlZmluZWQpe1xuICAgICAgcmV0dXJuIHNvdXJjZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvTXV0YWJsZU1lcmdlKHRhcmdldCwgc291cmNlKVxuICAgICAgcmV0dXJuIHRhcmdldFxuICAgIH1cbiAgfVxuXG4gIGRvTXV0YWJsZU1lcmdlKHRhcmdldCwgc291cmNlKXtcbiAgICBmb3IobGV0IGtleSBpbiBzb3VyY2Upe1xuICAgICAgbGV0IHZhbCA9IHNvdXJjZVtrZXldXG4gICAgICBsZXQgdGFyZ2V0VmFsID0gdGFyZ2V0W2tleV1cbiAgICAgIGxldCBpc09ialZhbCA9IGlzT2JqZWN0KHZhbClcbiAgICAgIGlmKGlzT2JqVmFsICYmIHZhbFtTVEFUSUNdID09PSB1bmRlZmluZWQgJiYgaXNPYmplY3QodGFyZ2V0VmFsKSl7XG4gICAgICAgIHRoaXMuZG9NdXRhYmxlTWVyZ2UodGFyZ2V0VmFsLCB2YWwpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNsb25lTWVyZ2UodGFyZ2V0LCBzb3VyY2Upe1xuICAgIGxldCBtZXJnZWQgPSB7Li4udGFyZ2V0LCAuLi5zb3VyY2V9XG4gICAgZm9yKGxldCBrZXkgaW4gbWVyZ2VkKXtcbiAgICAgIGxldCB2YWwgPSBzb3VyY2Vba2V5XVxuICAgICAgbGV0IHRhcmdldFZhbCA9IHRhcmdldFtrZXldXG4gICAgICBpZihpc09iamVjdCh2YWwpICYmIHZhbFtTVEFUSUNdID09PSB1bmRlZmluZWQgJiYgaXNPYmplY3QodGFyZ2V0VmFsKSl7XG4gICAgICAgIG1lcmdlZFtrZXldID0gdGhpcy5jbG9uZU1lcmdlKHRhcmdldFZhbCwgdmFsKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkXG4gIH1cblxuICBjb21wb25lbnRUb1N0cmluZyhjaWQpe1xuICAgIGxldCBbc3RyLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlQ0lEVG9TdHJpbmcodGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSwgY2lkKVxuICAgIHJldHVybiBbc3RyLCBzdHJlYW1zXVxuICB9XG5cbiAgcHJ1bmVDSURzKGNpZHMpe1xuICAgIGNpZHMuZm9yRWFjaChjaWQgPT4gZGVsZXRlIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU11bY2lkXSlcbiAgfVxuXG4gIC8vIHByaXZhdGVcblxuICBnZXQoKXsgcmV0dXJuIHRoaXMucmVuZGVyZWQgfVxuXG4gIGlzTmV3RmluZ2VycHJpbnQoZGlmZiA9IHt9KXsgcmV0dXJuICEhZGlmZltTVEFUSUNdIH1cblxuICB0ZW1wbGF0ZVN0YXRpYyhwYXJ0LCB0ZW1wbGF0ZXMpe1xuICAgIGlmKHR5cGVvZiAocGFydCkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZXNbcGFydF1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnRcbiAgICB9XG4gIH1cblxuICB0b091dHB1dEJ1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQpe1xuICAgIGlmKHJlbmRlcmVkW0RZTkFNSUNTXSl7IHJldHVybiB0aGlzLmNvbXByZWhlbnNpb25Ub0J1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQpIH1cbiAgICBsZXQge1tTVEFUSUNdOiBzdGF0aWNzfSA9IHJlbmRlcmVkXG4gICAgc3RhdGljcyA9IHRoaXMudGVtcGxhdGVTdGF0aWMoc3RhdGljcywgdGVtcGxhdGVzKVxuXG4gICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzWzBdXG4gICAgZm9yKGxldCBpID0gMTsgaSA8IHN0YXRpY3MubGVuZ3RoOyBpKyspe1xuICAgICAgdGhpcy5keW5hbWljVG9CdWZmZXIocmVuZGVyZWRbaSAtIDFdLCB0ZW1wbGF0ZXMsIG91dHB1dClcbiAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1tpXVxuICAgIH1cbiAgfVxuXG4gIGNvbXByZWhlbnNpb25Ub0J1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQpe1xuICAgIGxldCB7W0RZTkFNSUNTXTogZHluYW1pY3MsIFtTVEFUSUNdOiBzdGF0aWNzLCBbU1RSRUFNXTogc3RyZWFtfSA9IHJlbmRlcmVkXG4gICAgbGV0IFtfaW5zZXJ0cywgZGVsZXRlSWRzXSA9IHN0cmVhbSB8fCBbe30sIFtdXVxuICAgIHN0YXRpY3MgPSB0aGlzLnRlbXBsYXRlU3RhdGljKHN0YXRpY3MsIHRlbXBsYXRlcylcbiAgICBsZXQgY29tcFRlbXBsYXRlcyA9IHRlbXBsYXRlcyB8fCByZW5kZXJlZFtURU1QTEFURVNdXG4gICAgZm9yKGxldCBkID0gMDsgZCA8IGR5bmFtaWNzLmxlbmd0aDsgZCsrKXtcbiAgICAgIGxldCBkeW5hbWljID0gZHluYW1pY3NbZF1cbiAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1swXVxuICAgICAgZm9yKGxldCBpID0gMTsgaSA8IHN0YXRpY3MubGVuZ3RoOyBpKyspe1xuICAgICAgICB0aGlzLmR5bmFtaWNUb0J1ZmZlcihkeW5hbWljW2kgLSAxXSwgY29tcFRlbXBsYXRlcywgb3V0cHV0KVxuICAgICAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbaV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZihzdHJlYW0gIT09IHVuZGVmaW5lZCAmJiAocmVuZGVyZWRbRFlOQU1JQ1NdLmxlbmd0aCA+IDAgfHwgZGVsZXRlSWRzLmxlbmd0aCA+IDApKXtcbiAgICAgIHJlbmRlcmVkW0RZTkFNSUNTXSA9IFtdXG4gICAgICBvdXRwdXQuc3RyZWFtcy5hZGQoc3RyZWFtKVxuICAgIH1cbiAgfVxuXG4gIGR5bmFtaWNUb0J1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQpe1xuICAgIGlmKHR5cGVvZiAocmVuZGVyZWQpID09PSBcIm51bWJlclwiKXtcbiAgICAgIGxldCBbc3RyLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlQ0lEVG9TdHJpbmcob3V0cHV0LmNvbXBvbmVudHMsIHJlbmRlcmVkLCBvdXRwdXQub25seUNpZHMpXG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHN0clxuICAgICAgb3V0cHV0LnN0cmVhbXMgPSBuZXcgU2V0KFsuLi5vdXRwdXQuc3RyZWFtcywgLi4uc3RyZWFtc10pXG4gICAgfSBlbHNlIGlmKGlzT2JqZWN0KHJlbmRlcmVkKSl7XG4gICAgICB0aGlzLnRvT3V0cHV0QnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dClcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LmJ1ZmZlciArPSByZW5kZXJlZFxuICAgIH1cbiAgfVxuXG4gIHJlY3Vyc2l2ZUNJRFRvU3RyaW5nKGNvbXBvbmVudHMsIGNpZCwgb25seUNpZHMpe1xuICAgIGxldCBjb21wb25lbnQgPSBjb21wb25lbnRzW2NpZF0gfHwgbG9nRXJyb3IoYG5vIGNvbXBvbmVudCBmb3IgQ0lEICR7Y2lkfWAsIGNvbXBvbmVudHMpXG4gICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpXG4gICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlVG9TdHJpbmcoY29tcG9uZW50LCBjb21wb25lbnRzLCBvbmx5Q2lkcylcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgbGV0IGNvbnRhaW5lciA9IHRlbXBsYXRlLmNvbnRlbnRcbiAgICBsZXQgc2tpcCA9IG9ubHlDaWRzICYmICFvbmx5Q2lkcy5oYXMoY2lkKVxuXG4gICAgbGV0IFtoYXNDaGlsZE5vZGVzLCBoYXNDaGlsZENvbXBvbmVudHNdID1cbiAgICAgIEFycmF5LmZyb20oY29udGFpbmVyLmNoaWxkTm9kZXMpLnJlZHVjZSgoW2hhc05vZGVzLCBoYXNDb21wb25lbnRzXSwgY2hpbGQsIGkpID0+IHtcbiAgICAgICAgaWYoY2hpbGQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKXtcbiAgICAgICAgICBpZihjaGlsZC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkpe1xuICAgICAgICAgICAgcmV0dXJuIFtoYXNOb2RlcywgdHJ1ZV1cbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGQuc2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQsIGNpZClcbiAgICAgICAgICBpZighY2hpbGQuaWQpeyBjaGlsZC5pZCA9IGAke3RoaXMucGFyZW50Vmlld0lkKCl9LSR7Y2lkfS0ke2l9YCB9XG4gICAgICAgICAgaWYoc2tpcCl7XG4gICAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoUEhYX1NLSVAsIFwiXCIpXG4gICAgICAgICAgICBjaGlsZC5pbm5lckhUTUwgPSBcIlwiXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbdHJ1ZSwgaGFzQ29tcG9uZW50c11cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZihjaGlsZC5ub2RlVmFsdWUudHJpbSgpICE9PSBcIlwiKXtcbiAgICAgICAgICAgIGxvZ0Vycm9yKFwib25seSBIVE1MIGVsZW1lbnQgdGFncyBhcmUgYWxsb3dlZCBhdCB0aGUgcm9vdCBvZiBjb21wb25lbnRzLlxcblxcblwiICtcbiAgICAgICAgICAgICAgYGdvdDogXCIke2NoaWxkLm5vZGVWYWx1ZS50cmltKCl9XCJcXG5cXG5gICtcbiAgICAgICAgICAgICAgXCJ3aXRoaW46XFxuXCIsIHRlbXBsYXRlLmlubmVySFRNTC50cmltKCkpXG4gICAgICAgICAgICBjaGlsZC5yZXBsYWNlV2l0aCh0aGlzLmNyZWF0ZVNwYW4oY2hpbGQubm9kZVZhbHVlLCBjaWQpKVxuICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBoYXNDb21wb25lbnRzXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGlsZC5yZW1vdmUoKVxuICAgICAgICAgICAgcmV0dXJuIFtoYXNOb2RlcywgaGFzQ29tcG9uZW50c11cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIFtmYWxzZSwgZmFsc2VdKVxuXG4gICAgaWYoIWhhc0NoaWxkTm9kZXMgJiYgIWhhc0NoaWxkQ29tcG9uZW50cyl7XG4gICAgICBsb2dFcnJvcihcImV4cGVjdGVkIGF0IGxlYXN0IG9uZSBIVE1MIGVsZW1lbnQgdGFnIGluc2lkZSBhIGNvbXBvbmVudCwgYnV0IHRoZSBjb21wb25lbnQgaXMgZW1wdHk6XFxuXCIsXG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTC50cmltKCkpXG4gICAgICByZXR1cm4gW3RoaXMuY3JlYXRlU3BhbihcIlwiLCBjaWQpLm91dGVySFRNTCwgc3RyZWFtc11cbiAgICB9IGVsc2UgaWYoIWhhc0NoaWxkTm9kZXMgJiYgaGFzQ2hpbGRDb21wb25lbnRzKXtcbiAgICAgIGxvZ0Vycm9yKFwiZXhwZWN0ZWQgYXQgbGVhc3Qgb25lIEhUTUwgZWxlbWVudCB0YWcgZGlyZWN0bHkgaW5zaWRlIGEgY29tcG9uZW50LCBidXQgb25seSBzdWJjb21wb25lbnRzIHdlcmUgZm91bmQuIEEgY29tcG9uZW50IG11c3QgcmVuZGVyIGF0IGxlYXN0IG9uZSBIVE1MIHRhZyBkaXJlY3RseSBpbnNpZGUgaXRzZWxmLlwiLFxuICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwudHJpbSgpKVxuICAgICAgcmV0dXJuIFt0ZW1wbGF0ZS5pbm5lckhUTUwsIHN0cmVhbXNdXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbdGVtcGxhdGUuaW5uZXJIVE1MLCBzdHJlYW1zXVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZVNwYW4odGV4dCwgY2lkKXtcbiAgICBsZXQgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpXG4gICAgc3Bhbi5pbm5lclRleHQgPSB0ZXh0XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCwgY2lkKVxuICAgIHJldHVybiBzcGFuXG4gIH1cbn1cbiIsICJsZXQgdmlld0hvb2tJRCA9IDFcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdIb29rIHtcbiAgc3RhdGljIG1ha2VJRCgpeyByZXR1cm4gdmlld0hvb2tJRCsrIH1cbiAgc3RhdGljIGVsZW1lbnRJRChlbCl7IHJldHVybiBlbC5waHhIb29rSWQgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGVsLCBjYWxsYmFja3Mpe1xuICAgIHRoaXMuX192aWV3ID0gdmlld1xuICAgIHRoaXMubGl2ZVNvY2tldCA9IHZpZXcubGl2ZVNvY2tldFxuICAgIHRoaXMuX19jYWxsYmFja3MgPSBjYWxsYmFja3NcbiAgICB0aGlzLl9fbGlzdGVuZXJzID0gbmV3IFNldCgpXG4gICAgdGhpcy5fX2lzRGlzY29ubmVjdGVkID0gZmFsc2VcbiAgICB0aGlzLmVsID0gZWxcbiAgICB0aGlzLmVsLnBoeEhvb2tJZCA9IHRoaXMuY29uc3RydWN0b3IubWFrZUlEKClcbiAgICBmb3IobGV0IGtleSBpbiB0aGlzLl9fY2FsbGJhY2tzKXsgdGhpc1trZXldID0gdGhpcy5fX2NhbGxiYWNrc1trZXldIH1cbiAgfVxuXG4gIF9fbW91bnRlZCgpeyB0aGlzLm1vdW50ZWQgJiYgdGhpcy5tb3VudGVkKCkgfVxuICBfX3VwZGF0ZWQoKXsgdGhpcy51cGRhdGVkICYmIHRoaXMudXBkYXRlZCgpIH1cbiAgX19iZWZvcmVVcGRhdGUoKXsgdGhpcy5iZWZvcmVVcGRhdGUgJiYgdGhpcy5iZWZvcmVVcGRhdGUoKSB9XG4gIF9fZGVzdHJveWVkKCl7IHRoaXMuZGVzdHJveWVkICYmIHRoaXMuZGVzdHJveWVkKCkgfVxuICBfX3JlY29ubmVjdGVkKCl7XG4gICAgaWYodGhpcy5fX2lzRGlzY29ubmVjdGVkKXtcbiAgICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgICB0aGlzLnJlY29ubmVjdGVkICYmIHRoaXMucmVjb25uZWN0ZWQoKVxuICAgIH1cbiAgfVxuICBfX2Rpc2Nvbm5lY3RlZCgpe1xuICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IHRydWVcbiAgICB0aGlzLmRpc2Nvbm5lY3RlZCAmJiB0aGlzLmRpc2Nvbm5lY3RlZCgpXG4gIH1cblxuICBwdXNoRXZlbnQoZXZlbnQsIHBheWxvYWQgPSB7fSwgb25SZXBseSA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcucHVzaEhvb2tFdmVudChudWxsLCBldmVudCwgcGF5bG9hZCwgb25SZXBseSlcbiAgfVxuXG4gIHB1c2hFdmVudFRvKHBoeFRhcmdldCwgZXZlbnQsIHBheWxvYWQgPSB7fSwgb25SZXBseSA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIHJldHVybiB2aWV3LnB1c2hIb29rRXZlbnQodGFyZ2V0Q3R4LCBldmVudCwgcGF5bG9hZCwgb25SZXBseSlcbiAgICB9KVxuICB9XG5cbiAgaGFuZGxlRXZlbnQoZXZlbnQsIGNhbGxiYWNrKXtcbiAgICBsZXQgY2FsbGJhY2tSZWYgPSAoY3VzdG9tRXZlbnQsIGJ5cGFzcykgPT4gYnlwYXNzID8gZXZlbnQgOiBjYWxsYmFjayhjdXN0b21FdmVudC5kZXRhaWwpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoYHBoeDoke2V2ZW50fWAsIGNhbGxiYWNrUmVmKVxuICAgIHRoaXMuX19saXN0ZW5lcnMuYWRkKGNhbGxiYWNrUmVmKVxuICAgIHJldHVybiBjYWxsYmFja1JlZlxuICB9XG5cbiAgcmVtb3ZlSGFuZGxlRXZlbnQoY2FsbGJhY2tSZWYpe1xuICAgIGxldCBldmVudCA9IGNhbGxiYWNrUmVmKG51bGwsIHRydWUpXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoYHBoeDoke2V2ZW50fWAsIGNhbGxiYWNrUmVmKVxuICAgIHRoaXMuX19saXN0ZW5lcnMuZGVsZXRlKGNhbGxiYWNrUmVmKVxuICB9XG5cbiAgdXBsb2FkKG5hbWUsIGZpbGVzKXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcuZGlzcGF0Y2hVcGxvYWRzKG5hbWUsIGZpbGVzKVxuICB9XG5cbiAgdXBsb2FkVG8ocGh4VGFyZ2V0LCBuYW1lLCBmaWxlcyl7XG4gICAgcmV0dXJuIHRoaXMuX192aWV3LndpdGhpblRhcmdldHMocGh4VGFyZ2V0LCB2aWV3ID0+IHZpZXcuZGlzcGF0Y2hVcGxvYWRzKG5hbWUsIGZpbGVzKSlcbiAgfVxuXG4gIF9fY2xlYW51cF9fKCl7XG4gICAgdGhpcy5fX2xpc3RlbmVycy5mb3JFYWNoKGNhbGxiYWNrUmVmID0+IHRoaXMucmVtb3ZlSGFuZGxlRXZlbnQoY2FsbGJhY2tSZWYpKVxuICB9XG59XG4iLCAiaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuaW1wb3J0IEFSSUEgZnJvbSBcIi4vYXJpYVwiXG5cbmxldCBmb2N1c1N0YWNrID0gbnVsbFxuXG5sZXQgSlMgPSB7XG4gIGV4ZWMoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGRlZmF1bHRzKXtcbiAgICBsZXQgW2RlZmF1bHRLaW5kLCBkZWZhdWx0QXJnc10gPSBkZWZhdWx0cyB8fCBbbnVsbCwge31dXG4gICAgbGV0IGNvbW1hbmRzID0gcGh4RXZlbnQuY2hhckF0KDApID09PSBcIltcIiA/XG4gICAgICBKU09OLnBhcnNlKHBoeEV2ZW50KSA6IFtbZGVmYXVsdEtpbmQsIGRlZmF1bHRBcmdzXV1cblxuICAgIGNvbW1hbmRzLmZvckVhY2goKFtraW5kLCBhcmdzXSkgPT4ge1xuICAgICAgaWYoa2luZCA9PT0gZGVmYXVsdEtpbmQgJiYgZGVmYXVsdEFyZ3MuZGF0YSl7XG4gICAgICAgIGFyZ3MuZGF0YSA9IE9iamVjdC5hc3NpZ24oYXJncy5kYXRhIHx8IHt9LCBkZWZhdWx0QXJncy5kYXRhKVxuICAgICAgfVxuICAgICAgdGhpcy5maWx0ZXJUb0Vscyhzb3VyY2VFbCwgYXJncykuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIHRoaXNbYGV4ZWNfJHtraW5kfWBdKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwgYXJncylcbiAgICAgIH0pXG4gICAgfSlcbiAgfSxcblxuICBpc1Zpc2libGUoZWwpe1xuICAgIHJldHVybiAhIShlbC5vZmZzZXRXaWR0aCB8fCBlbC5vZmZzZXRIZWlnaHQgfHwgZWwuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggPiAwKVxuICB9LFxuXG4gIC8vIHByaXZhdGVcblxuICAvLyBjb21tYW5kc1xuXG4gIGV4ZWNfZGlzcGF0Y2goZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7dG8sIGV2ZW50LCBkZXRhaWwsIGJ1YmJsZXN9KXtcbiAgICBkZXRhaWwgPSBkZXRhaWwgfHwge31cbiAgICBkZXRhaWwuZGlzcGF0Y2hlciA9IHNvdXJjZUVsXG4gICAgRE9NLmRpc3BhdGNoRXZlbnQoZWwsIGV2ZW50LCB7ZGV0YWlsLCBidWJibGVzfSlcbiAgfSxcblxuICBleGVjX3B1c2goZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBhcmdzKXtcbiAgICBpZighdmlldy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cblxuICAgIGxldCB7ZXZlbnQsIGRhdGEsIHRhcmdldCwgcGFnZV9sb2FkaW5nLCBsb2FkaW5nLCB2YWx1ZSwgZGlzcGF0Y2hlcn0gPSBhcmdzXG4gICAgbGV0IHB1c2hPcHRzID0ge2xvYWRpbmcsIHZhbHVlLCB0YXJnZXQsIHBhZ2VfbG9hZGluZzogISFwYWdlX2xvYWRpbmd9XG4gICAgbGV0IHRhcmdldFNyYyA9IGV2ZW50VHlwZSA9PT0gXCJjaGFuZ2VcIiAmJiBkaXNwYXRjaGVyID8gZGlzcGF0Y2hlciA6IHNvdXJjZUVsXG4gICAgbGV0IHBoeFRhcmdldCA9IHRhcmdldCB8fCB0YXJnZXRTcmMuZ2V0QXR0cmlidXRlKHZpZXcuYmluZGluZyhcInRhcmdldFwiKSkgfHwgdGFyZ2V0U3JjXG4gICAgdmlldy53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgKHRhcmdldFZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgaWYoZXZlbnRUeXBlID09PSBcImNoYW5nZVwiKXtcbiAgICAgICAgbGV0IHtuZXdDaWQsIF90YXJnZXQsIGNhbGxiYWNrfSA9IGFyZ3NcbiAgICAgICAgX3RhcmdldCA9IF90YXJnZXQgfHwgKERPTS5pc0Zvcm1JbnB1dChzb3VyY2VFbCkgPyBzb3VyY2VFbC5uYW1lIDogdW5kZWZpbmVkKVxuICAgICAgICBpZihfdGFyZ2V0KXsgcHVzaE9wdHMuX3RhcmdldCA9IF90YXJnZXQgfVxuICAgICAgICB0YXJnZXRWaWV3LnB1c2hJbnB1dChzb3VyY2VFbCwgdGFyZ2V0Q3R4LCBuZXdDaWQsIGV2ZW50IHx8IHBoeEV2ZW50LCBwdXNoT3B0cywgY2FsbGJhY2spXG4gICAgICB9IGVsc2UgaWYoZXZlbnRUeXBlID09PSBcInN1Ym1pdFwiKXtcbiAgICAgICAgdGFyZ2V0Vmlldy5zdWJtaXRGb3JtKHNvdXJjZUVsLCB0YXJnZXRDdHgsIGV2ZW50IHx8IHBoeEV2ZW50LCBwdXNoT3B0cylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFZpZXcucHVzaEV2ZW50KGV2ZW50VHlwZSwgc291cmNlRWwsIHRhcmdldEN0eCwgZXZlbnQgfHwgcGh4RXZlbnQsIGRhdGEsIHB1c2hPcHRzKVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgZXhlY19uYXZpZ2F0ZShldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtocmVmLCByZXBsYWNlfSl7XG4gICAgdmlldy5saXZlU29ja2V0Lmhpc3RvcnlSZWRpcmVjdChocmVmLCByZXBsYWNlID8gXCJyZXBsYWNlXCIgOiBcInB1c2hcIilcbiAgfSxcblxuICBleGVjX3BhdGNoKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2hyZWYsIHJlcGxhY2V9KXtcbiAgICB2aWV3LmxpdmVTb2NrZXQucHVzaEhpc3RvcnlQYXRjaChocmVmLCByZXBsYWNlID8gXCJyZXBsYWNlXCIgOiBcInB1c2hcIiwgc291cmNlRWwpXG4gIH0sXG5cbiAgZXhlY19mb2N1cyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gQVJJQS5hdHRlbXB0Rm9jdXMoZWwpKVxuICB9LFxuXG4gIGV4ZWNfZm9jdXNfZmlyc3QoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IEFSSUEuZm9jdXNGaXJzdEludGVyYWN0aXZlKGVsKSB8fCBBUklBLmZvY3VzRmlyc3QoZWwpKVxuICB9LFxuXG4gIGV4ZWNfcHVzaF9mb2N1cyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gZm9jdXNTdGFjayA9IGVsIHx8IHNvdXJjZUVsKVxuICB9LFxuXG4gIGV4ZWNfcG9wX2ZvY3VzKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBpZihmb2N1c1N0YWNrKXsgZm9jdXNTdGFjay5mb2N1cygpIH1cbiAgICAgIGZvY3VzU3RhY2sgPSBudWxsXG4gICAgfSlcbiAgfSxcblxuICBleGVjX2FkZF9jbGFzcyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtuYW1lcywgdHJhbnNpdGlvbiwgdGltZX0pe1xuICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBuYW1lcywgW10sIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcpXG4gIH0sXG5cbiAgZXhlY19yZW1vdmVfY2xhc3MoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7bmFtZXMsIHRyYW5zaXRpb24sIHRpbWV9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIG5hbWVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3KVxuICB9LFxuXG4gIGV4ZWNfdHJhbnNpdGlvbihldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHt0aW1lLCB0cmFuc2l0aW9ufSl7XG4gICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBbXSwgdHJhbnNpdGlvbiwgdGltZSwgdmlldylcbiAgfSxcblxuICBleGVjX3RvZ2dsZShldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWV9KXtcbiAgICB0aGlzLnRvZ2dsZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWUpXG4gIH0sXG5cbiAgZXhlY19zaG93KGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2Rpc3BsYXksIHRyYW5zaXRpb24sIHRpbWV9KXtcbiAgICB0aGlzLnNob3coZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSlcbiAgfSxcblxuICBleGVjX2hpZGUoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7ZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZX0pe1xuICAgIHRoaXMuaGlkZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lKVxuICB9LFxuXG4gIGV4ZWNfc2V0X2F0dHIoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7YXR0cjogW2F0dHIsIHZhbF19KXtcbiAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsXV0sIFtdKVxuICB9LFxuXG4gIGV4ZWNfcmVtb3ZlX2F0dHIoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7YXR0cn0pe1xuICAgIHRoaXMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW10sIFthdHRyXSlcbiAgfSxcblxuICAvLyB1dGlscyBmb3IgY29tbWFuZHNcblxuICBzaG93KGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUpe1xuICAgIGlmKCF0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgbnVsbCwgdGltZSlcbiAgICB9XG4gIH0sXG5cbiAgaGlkZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lKXtcbiAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgbnVsbCwgdHJhbnNpdGlvbiwgdGltZSlcbiAgICB9XG4gIH0sXG5cbiAgdG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIGlucywgb3V0cywgdGltZSl7XG4gICAgbGV0IFtpbkNsYXNzZXMsIGluU3RhcnRDbGFzc2VzLCBpbkVuZENsYXNzZXNdID0gaW5zIHx8IFtbXSwgW10sIFtdXVxuICAgIGxldCBbb3V0Q2xhc3Nlcywgb3V0U3RhcnRDbGFzc2VzLCBvdXRFbmRDbGFzc2VzXSA9IG91dHMgfHwgW1tdLCBbXSwgW11dXG4gICAgaWYoaW5DbGFzc2VzLmxlbmd0aCA+IDAgfHwgb3V0Q2xhc3Nlcy5sZW5ndGggPiAwKXtcbiAgICAgIGlmKHRoaXMuaXNWaXNpYmxlKGVsKSl7XG4gICAgICAgIGxldCBvblN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBvdXRTdGFydENsYXNzZXMsIGluQ2xhc3Nlcy5jb25jYXQoaW5TdGFydENsYXNzZXMpLmNvbmNhdChpbkVuZENsYXNzZXMpKVxuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG91dENsYXNzZXMsIFtdKVxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgb3V0RW5kQ2xhc3Nlcywgb3V0U3RhcnRDbGFzc2VzKSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OmhpZGUtc3RhcnRcIikpXG4gICAgICAgIHZpZXcudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBvdXRDbGFzc2VzLmNvbmNhdChvdXRFbmRDbGFzc2VzKSlcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIilcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKGV2ZW50VHlwZSA9PT0gXCJyZW1vdmVcIil7IHJldHVybiB9XG4gICAgICAgIGxldCBvblN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBpblN0YXJ0Q2xhc3Nlcywgb3V0Q2xhc3Nlcy5jb25jYXQob3V0U3RhcnRDbGFzc2VzKS5jb25jYXQob3V0RW5kQ2xhc3NlcykpXG4gICAgICAgICAgbGV0IHN0aWNreURpc3BsYXkgPSBkaXNwbGF5IHx8IHRoaXMuZGVmYXVsdERpc3BsYXkoZWwpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gc3RpY2t5RGlzcGxheSlcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBpbkNsYXNzZXMsIFtdKVxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5FbmRDbGFzc2VzLCBpblN0YXJ0Q2xhc3NlcykpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LXN0YXJ0XCIpKVxuICAgICAgICB2aWV3LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgaW5DbGFzc2VzLmNvbmNhdChpbkVuZENsYXNzZXMpKVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctZW5kXCIpKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLXN0YXJ0XCIpKVxuICAgICAgICAgIERPTS5wdXRTdGlja3koZWwsIFwidG9nZ2xlXCIsIGN1cnJlbnRFbCA9PiBjdXJyZW50RWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiKVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OmhpZGUtZW5kXCIpKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6c2hvdy1zdGFydFwiKSlcbiAgICAgICAgICBsZXQgc3RpY2t5RGlzcGxheSA9IGRpc3BsYXkgfHwgdGhpcy5kZWZhdWx0RGlzcGxheShlbClcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBzdGlja3lEaXNwbGF5KVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctZW5kXCIpKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBhZGRPclJlbW92ZUNsYXNzZXMoZWwsIGFkZHMsIHJlbW92ZXMsIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcpe1xuICAgIGxldCBbdHJhbnNpdGlvbl9ydW4sIHRyYW5zaXRpb25fc3RhcnQsIHRyYW5zaXRpb25fZW5kXSA9IHRyYW5zaXRpb24gfHwgW1tdLCBbXSwgW11dXG4gICAgaWYodHJhbnNpdGlvbl9ydW4ubGVuZ3RoID4gMCl7XG4gICAgICBsZXQgb25TdGFydCA9ICgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCB0cmFuc2l0aW9uX3N0YXJ0LmNvbmNhdCh0cmFuc2l0aW9uX3J1biksIFtdKVxuICAgICAgbGV0IG9uRG9uZSA9ICgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBhZGRzLmNvbmNhdCh0cmFuc2l0aW9uX2VuZCksIHJlbW92ZXMuY29uY2F0KHRyYW5zaXRpb25fcnVuKS5jb25jYXQodHJhbnNpdGlvbl9zdGFydCkpXG4gICAgICByZXR1cm4gdmlldy50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSlcbiAgICB9XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBsZXQgW3ByZXZBZGRzLCBwcmV2UmVtb3Zlc10gPSBET00uZ2V0U3RpY2t5KGVsLCBcImNsYXNzZXNcIiwgW1tdLCBbXV0pXG4gICAgICBsZXQga2VlcEFkZHMgPSBhZGRzLmZpbHRlcihuYW1lID0+IHByZXZBZGRzLmluZGV4T2YobmFtZSkgPCAwICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpXG4gICAgICBsZXQga2VlcFJlbW92ZXMgPSByZW1vdmVzLmZpbHRlcihuYW1lID0+IHByZXZSZW1vdmVzLmluZGV4T2YobmFtZSkgPCAwICYmIGVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSlcbiAgICAgIGxldCBuZXdBZGRzID0gcHJldkFkZHMuZmlsdGVyKG5hbWUgPT4gcmVtb3Zlcy5pbmRleE9mKG5hbWUpIDwgMCkuY29uY2F0KGtlZXBBZGRzKVxuICAgICAgbGV0IG5ld1JlbW92ZXMgPSBwcmV2UmVtb3Zlcy5maWx0ZXIobmFtZSA9PiBhZGRzLmluZGV4T2YobmFtZSkgPCAwKS5jb25jYXQoa2VlcFJlbW92ZXMpXG5cbiAgICAgIERPTS5wdXRTdGlja3koZWwsIFwiY2xhc3Nlc1wiLCBjdXJyZW50RWwgPT4ge1xuICAgICAgICBjdXJyZW50RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5uZXdSZW1vdmVzKVxuICAgICAgICBjdXJyZW50RWwuY2xhc3NMaXN0LmFkZCguLi5uZXdBZGRzKVxuICAgICAgICByZXR1cm4gW25ld0FkZHMsIG5ld1JlbW92ZXNdXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgc2V0T3JSZW1vdmVBdHRycyhlbCwgc2V0cywgcmVtb3Zlcyl7XG4gICAgbGV0IFtwcmV2U2V0cywgcHJldlJlbW92ZXNdID0gRE9NLmdldFN0aWNreShlbCwgXCJhdHRyc1wiLCBbW10sIFtdXSlcblxuICAgIGxldCBhbHRlcmVkQXR0cnMgPSBzZXRzLm1hcCgoW2F0dHIsIF92YWxdKSA9PiBhdHRyKS5jb25jYXQocmVtb3Zlcyk7XG4gICAgbGV0IG5ld1NldHMgPSBwcmV2U2V0cy5maWx0ZXIoKFthdHRyLCBfdmFsXSkgPT4gIWFsdGVyZWRBdHRycy5pbmNsdWRlcyhhdHRyKSkuY29uY2F0KHNldHMpO1xuICAgIGxldCBuZXdSZW1vdmVzID0gcHJldlJlbW92ZXMuZmlsdGVyKChhdHRyKSA9PiAhYWx0ZXJlZEF0dHJzLmluY2x1ZGVzKGF0dHIpKS5jb25jYXQocmVtb3Zlcyk7XG5cbiAgICBET00ucHV0U3RpY2t5KGVsLCBcImF0dHJzXCIsIGN1cnJlbnRFbCA9PiB7XG4gICAgICBuZXdSZW1vdmVzLmZvckVhY2goYXR0ciA9PiBjdXJyZW50RWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpKVxuICAgICAgbmV3U2V0cy5mb3JFYWNoKChbYXR0ciwgdmFsXSkgPT4gY3VycmVudEVsLnNldEF0dHJpYnV0ZShhdHRyLCB2YWwpKVxuICAgICAgcmV0dXJuIFtuZXdTZXRzLCBuZXdSZW1vdmVzXVxuICAgIH0pXG4gIH0sXG5cbiAgaGFzQWxsQ2xhc3NlcyhlbCwgY2xhc3Nlcyl7IHJldHVybiBjbGFzc2VzLmV2ZXJ5KG5hbWUgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKSB9LFxuXG4gIGlzVG9nZ2xlZE91dChlbCwgb3V0Q2xhc3Nlcyl7XG4gICAgcmV0dXJuICF0aGlzLmlzVmlzaWJsZShlbCkgfHwgdGhpcy5oYXNBbGxDbGFzc2VzKGVsLCBvdXRDbGFzc2VzKVxuICB9LFxuXG4gIGZpbHRlclRvRWxzKHNvdXJjZUVsLCB7dG99KXtcbiAgICByZXR1cm4gdG8gPyBET00uYWxsKGRvY3VtZW50LCB0bykgOiBbc291cmNlRWxdXG4gIH0sXG5cbiAgZGVmYXVsdERpc3BsYXkoZWwpe1xuICAgIHJldHVybiB7dHI6IFwidGFibGUtcm93XCIsIHRkOiBcInRhYmxlLWNlbGxcIn1bZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpXSB8fCBcImJsb2NrXCJcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBKU1xuIiwgImltcG9ydCB7XG4gIEJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQsXG4gIENIRUNLQUJMRV9JTlBVVFMsXG4gIENPTlNFQ1VUSVZFX1JFTE9BRFMsXG4gIFBIWF9BVVRPX1JFQ09WRVIsXG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9DT05ORUNURURfQ0xBU1MsXG4gIFBIWF9ESVNBQkxFX1dJVEgsXG4gIFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSxcbiAgUEhYX0RJU0FCTEVELFxuICBQSFhfRElTQ09OTkVDVEVEX0NMQVNTLFxuICBQSFhfRVZFTlRfQ0xBU1NFUyxcbiAgUEhYX0VSUk9SX0NMQVNTLFxuICBQSFhfRkVFREJBQ0tfRk9SLFxuICBQSFhfSEFTX1NVQk1JVFRFRCxcbiAgUEhYX0hPT0ssXG4gIFBIWF9QQUdFX0xPQURJTkcsXG4gIFBIWF9QQVJFTlRfSUQsXG4gIFBIWF9QUk9HUkVTUyxcbiAgUEhYX1JFQURPTkxZLFxuICBQSFhfUkVGLFxuICBQSFhfUkVGX1NSQyxcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9TRVNTSU9OLFxuICBQSFhfU1RBVElDLFxuICBQSFhfVFJBQ0tfU1RBVElDLFxuICBQSFhfVFJBQ0tfVVBMT0FEUyxcbiAgUEhYX1VQREFURSxcbiAgUEhYX1VQTE9BRF9SRUYsXG4gIFBIWF9WSUVXX1NFTEVDVE9SLFxuICBQSFhfTUFJTixcbiAgUEhYX01PVU5URUQsXG4gIFBVU0hfVElNRU9VVCxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgY2xvbmUsXG4gIGNsb3Nlc3RQaHhCaW5kaW5nLFxuICBpc0VtcHR5LFxuICBpc0VxdWFsT2JqLFxuICBsb2dFcnJvcixcbiAgbWF5YmUsXG4gIGlzQ2lkLFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBCcm93c2VyIGZyb20gXCIuL2Jyb3dzZXJcIlxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuaW1wb3J0IERPTVBhdGNoIGZyb20gXCIuL2RvbV9wYXRjaFwiXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuaW1wb3J0IFJlbmRlcmVkIGZyb20gXCIuL3JlbmRlcmVkXCJcbmltcG9ydCBWaWV3SG9vayBmcm9tIFwiLi92aWV3X2hvb2tcIlxuaW1wb3J0IEpTIGZyb20gXCIuL2pzXCJcblxubGV0IHNlcmlhbGl6ZUZvcm0gPSAoZm9ybSwgbWV0YSwgb25seU5hbWVzID0gW10pID0+IHtcbiAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pXG4gIGxldCB0b1JlbW92ZSA9IFtdXG5cbiAgZm9ybURhdGEuZm9yRWFjaCgodmFsLCBrZXksIF9pbmRleCkgPT4ge1xuICAgIGlmKHZhbCBpbnN0YW5jZW9mIEZpbGUpeyB0b1JlbW92ZS5wdXNoKGtleSkgfVxuICB9KVxuXG4gIC8vIENsZWFudXAgYWZ0ZXIgYnVpbGRpbmcgZmlsZURhdGFcbiAgdG9SZW1vdmUuZm9yRWFjaChrZXkgPT4gZm9ybURhdGEuZGVsZXRlKGtleSkpXG5cbiAgbGV0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKVxuICBmb3IobGV0IFtrZXksIHZhbF0gb2YgZm9ybURhdGEuZW50cmllcygpKXtcbiAgICBpZihvbmx5TmFtZXMubGVuZ3RoID09PSAwIHx8IG9ubHlOYW1lcy5pbmRleE9mKGtleSkgPj0gMCl7XG4gICAgICBwYXJhbXMuYXBwZW5kKGtleSwgdmFsKVxuICAgIH1cbiAgfVxuICBmb3IobGV0IG1ldGFLZXkgaW4gbWV0YSl7IHBhcmFtcy5hcHBlbmQobWV0YUtleSwgbWV0YVttZXRhS2V5XSkgfVxuXG4gIHJldHVybiBwYXJhbXMudG9TdHJpbmcoKVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3IHtcbiAgY29uc3RydWN0b3IoZWwsIGxpdmVTb2NrZXQsIHBhcmVudFZpZXcsIGZsYXNoLCBsaXZlUmVmZXJlcil7XG4gICAgdGhpcy5pc0RlYWQgPSBmYWxzZVxuICAgIHRoaXMubGl2ZVNvY2tldCA9IGxpdmVTb2NrZXRcbiAgICB0aGlzLmZsYXNoID0gZmxhc2hcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudFZpZXdcbiAgICB0aGlzLnJvb3QgPSBwYXJlbnRWaWV3ID8gcGFyZW50Vmlldy5yb290IDogdGhpc1xuICAgIHRoaXMuZWwgPSBlbFxuICAgIHRoaXMuaWQgPSB0aGlzLmVsLmlkXG4gICAgdGhpcy5yZWYgPSAwXG4gICAgdGhpcy5jaGlsZEpvaW5zID0gMFxuICAgIHRoaXMubG9hZGVyVGltZXIgPSBudWxsXG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMucHJ1bmluZ0NJRHMgPSBbXVxuICAgIHRoaXMucmVkaXJlY3QgPSBmYWxzZVxuICAgIHRoaXMuaHJlZiA9IG51bGxcbiAgICB0aGlzLmpvaW5Db3VudCA9IHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuam9pbkNvdW50IC0gMSA6IDBcbiAgICB0aGlzLmpvaW5QZW5kaW5nID0gdHJ1ZVxuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2VcbiAgICB0aGlzLmpvaW5DYWxsYmFjayA9IGZ1bmN0aW9uKG9uRG9uZSl7IG9uRG9uZSAmJiBvbkRvbmUoKSB9XG4gICAgdGhpcy5zdG9wQ2FsbGJhY2sgPSBmdW5jdGlvbigpeyB9XG4gICAgdGhpcy5wZW5kaW5nSm9pbk9wcyA9IHRoaXMucGFyZW50ID8gbnVsbCA6IFtdXG4gICAgdGhpcy52aWV3SG9va3MgPSB7fVxuICAgIHRoaXMudXBsb2FkZXJzID0ge31cbiAgICB0aGlzLmZvcm1TdWJtaXRzID0gW11cbiAgICB0aGlzLmNoaWxkcmVuID0gdGhpcy5wYXJlbnQgPyBudWxsIDoge31cbiAgICB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5pZF0gPSB7fVxuICAgIHRoaXMuY2hhbm5lbCA9IHRoaXMubGl2ZVNvY2tldC5jaGFubmVsKGBsdjoke3RoaXMuaWR9YCwgKCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVkaXJlY3Q6IHRoaXMucmVkaXJlY3QgPyB0aGlzLmhyZWYgOiB1bmRlZmluZWQsXG4gICAgICAgIHVybDogdGhpcy5yZWRpcmVjdCA/IHVuZGVmaW5lZCA6IHRoaXMuaHJlZiB8fCB1bmRlZmluZWQsXG4gICAgICAgIHBhcmFtczogdGhpcy5jb25uZWN0UGFyYW1zKGxpdmVSZWZlcmVyKSxcbiAgICAgICAgc2Vzc2lvbjogdGhpcy5nZXRTZXNzaW9uKCksXG4gICAgICAgIHN0YXRpYzogdGhpcy5nZXRTdGF0aWMoKSxcbiAgICAgICAgZmxhc2g6IHRoaXMuZmxhc2gsXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHNldEhyZWYoaHJlZil7IHRoaXMuaHJlZiA9IGhyZWYgfVxuXG4gIHNldFJlZGlyZWN0KGhyZWYpe1xuICAgIHRoaXMucmVkaXJlY3QgPSB0cnVlXG4gICAgdGhpcy5ocmVmID0gaHJlZlxuICB9XG5cbiAgaXNNYWluKCl7IHJldHVybiB0aGlzLmVsLmhhc0F0dHJpYnV0ZShQSFhfTUFJTikgfVxuXG4gIGNvbm5lY3RQYXJhbXMobGl2ZVJlZmVyZXIpe1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLmxpdmVTb2NrZXQucGFyYW1zKHRoaXMuZWwpXG4gICAgbGV0IG1hbmlmZXN0ID1cbiAgICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX1RSQUNLX1NUQVRJQyl9XWApXG4gICAgICAgIC5tYXAobm9kZSA9PiBub2RlLnNyYyB8fCBub2RlLmhyZWYpLmZpbHRlcih1cmwgPT4gdHlwZW9mICh1cmwpID09PSBcInN0cmluZ1wiKVxuXG4gICAgaWYobWFuaWZlc3QubGVuZ3RoID4gMCl7IHBhcmFtc1tcIl90cmFja19zdGF0aWNcIl0gPSBtYW5pZmVzdCB9XG4gICAgcGFyYW1zW1wiX21vdW50c1wiXSA9IHRoaXMuam9pbkNvdW50XG4gICAgcGFyYW1zW1wiX2xpdmVfcmVmZXJlclwiXSA9IGxpdmVSZWZlcmVyXG5cbiAgICByZXR1cm4gcGFyYW1zXG4gIH1cblxuICBpc0Nvbm5lY3RlZCgpeyByZXR1cm4gdGhpcy5jaGFubmVsLmNhblB1c2goKSB9XG5cbiAgZ2V0U2Vzc2lvbigpeyByZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pIH1cblxuICBnZXRTdGF0aWMoKXtcbiAgICBsZXQgdmFsID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQylcbiAgICByZXR1cm4gdmFsID09PSBcIlwiID8gbnVsbCA6IHZhbFxuICB9XG5cbiAgZGVzdHJveShjYWxsYmFjayA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICB0aGlzLmRlc3Ryb3lBbGxDaGlsZHJlbigpXG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlXG4gICAgZGVsZXRlIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVxuICAgIGlmKHRoaXMucGFyZW50KXsgZGVsZXRlIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLnBhcmVudC5pZF1bdGhpcy5pZF0gfVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIGxldCBvbkZpbmlzaGVkID0gKCkgPT4ge1xuICAgICAgY2FsbGJhY2soKVxuICAgICAgZm9yKGxldCBpZCBpbiB0aGlzLnZpZXdIb29rcyl7XG4gICAgICAgIHRoaXMuZGVzdHJveUhvb2sodGhpcy52aWV3SG9va3NbaWRdKVxuICAgICAgfVxuICAgIH1cblxuICAgIERPTS5tYXJrUGh4Q2hpbGREZXN0cm95ZWQodGhpcy5lbClcblxuICAgIHRoaXMubG9nKFwiZGVzdHJveWVkXCIsICgpID0+IFtcInRoZSBjaGlsZCBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIHBhcmVudFwiXSlcbiAgICB0aGlzLmNoYW5uZWwubGVhdmUoKVxuICAgICAgLnJlY2VpdmUoXCJva1wiLCBvbkZpbmlzaGVkKVxuICAgICAgLnJlY2VpdmUoXCJlcnJvclwiLCBvbkZpbmlzaGVkKVxuICAgICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsIG9uRmluaXNoZWQpXG4gIH1cblxuICBzZXRDb250YWluZXJDbGFzc2VzKC4uLmNsYXNzZXMpe1xuICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgIFBIWF9DT05ORUNURURfQ0xBU1MsXG4gICAgICBQSFhfRElTQ09OTkVDVEVEX0NMQVNTLFxuICAgICAgUEhYX0VSUk9SX0NMQVNTXG4gICAgKVxuICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc2VzKVxuICB9XG5cbiAgc2hvd0xvYWRlcih0aW1lb3V0KXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5sb2FkZXJUaW1lcilcbiAgICBpZih0aW1lb3V0KXtcbiAgICAgIHRoaXMubG9hZGVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2hvd0xvYWRlcigpLCB0aW1lb3V0KVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXsgdGhpcy52aWV3SG9va3NbaWRdLl9fZGlzY29ubmVjdGVkKCkgfVxuICAgICAgdGhpcy5zZXRDb250YWluZXJDbGFzc2VzKFBIWF9ESVNDT05ORUNURURfQ0xBU1MpXG4gICAgfVxuICB9XG5cbiAgZXhlY0FsbChiaW5kaW5nKXtcbiAgICBET00uYWxsKHRoaXMuZWwsIGBbJHtiaW5kaW5nfV1gLCBlbCA9PiB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTKGVsLCBlbC5nZXRBdHRyaWJ1dGUoYmluZGluZykpKVxuICB9XG5cbiAgaGlkZUxvYWRlcigpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIHRoaXMuc2V0Q29udGFpbmVyQ2xhc3NlcyhQSFhfQ09OTkVDVEVEX0NMQVNTKVxuICAgIHRoaXMuZXhlY0FsbCh0aGlzLmJpbmRpbmcoXCJjb25uZWN0ZWRcIikpXG4gIH1cblxuICB0cmlnZ2VyUmVjb25uZWN0ZWQoKXtcbiAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXsgdGhpcy52aWV3SG9va3NbaWRdLl9fcmVjb25uZWN0ZWQoKSB9XG4gIH1cblxuICBsb2coa2luZCwgbXNnQ2FsbGJhY2spe1xuICAgIHRoaXMubGl2ZVNvY2tldC5sb2codGhpcywga2luZCwgbXNnQ2FsbGJhY2spXG4gIH1cblxuICB0cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSA9IGZ1bmN0aW9uKCl7fSl7XG4gICAgdGhpcy5saXZlU29ja2V0LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKVxuICB9XG5cbiAgd2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsIGNhbGxiYWNrKXtcbiAgICBpZihwaHhUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fCBwaHhUYXJnZXQgaW5zdGFuY2VvZiBTVkdFbGVtZW50KXtcbiAgICAgIHJldHVybiB0aGlzLmxpdmVTb2NrZXQub3duZXIocGh4VGFyZ2V0LCB2aWV3ID0+IGNhbGxiYWNrKHZpZXcsIHBoeFRhcmdldCkpXG4gICAgfVxuXG4gICAgaWYoaXNDaWQocGh4VGFyZ2V0KSl7XG4gICAgICBsZXQgdGFyZ2V0cyA9IERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgcGh4VGFyZ2V0KVxuICAgICAgaWYodGFyZ2V0cy5sZW5ndGggPT09IDApe1xuICAgICAgICBsb2dFcnJvcihgbm8gY29tcG9uZW50IGZvdW5kIG1hdGNoaW5nIHBoeC10YXJnZXQgb2YgJHtwaHhUYXJnZXR9YClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMsIHBhcnNlSW50KHBoeFRhcmdldCkpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB0YXJnZXRzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBoeFRhcmdldCkpXG4gICAgICBpZih0YXJnZXRzLmxlbmd0aCA9PT0gMCl7IGxvZ0Vycm9yKGBub3RoaW5nIGZvdW5kIG1hdGNoaW5nIHRoZSBwaHgtdGFyZ2V0IHNlbGVjdG9yIFwiJHtwaHhUYXJnZXR9XCJgKSB9XG4gICAgICB0YXJnZXRzLmZvckVhY2godGFyZ2V0ID0+IHRoaXMubGl2ZVNvY2tldC5vd25lcih0YXJnZXQsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgdGFyZ2V0KSkpXG4gICAgfVxuICB9XG5cbiAgYXBwbHlEaWZmKHR5cGUsIHJhd0RpZmYsIGNhbGxiYWNrKXtcbiAgICB0aGlzLmxvZyh0eXBlLCAoKSA9PiBbXCJcIiwgY2xvbmUocmF3RGlmZildKVxuICAgIGxldCB7ZGlmZiwgcmVwbHksIGV2ZW50cywgdGl0bGV9ID0gUmVuZGVyZWQuZXh0cmFjdChyYXdEaWZmKVxuICAgIGNhbGxiYWNrKHtkaWZmLCByZXBseSwgZXZlbnRzfSlcbiAgICBpZih0aXRsZSl7IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gRE9NLnB1dFRpdGxlKHRpdGxlKSkgfVxuICB9XG5cbiAgb25Kb2luKHJlc3Ape1xuICAgIGxldCB7cmVuZGVyZWQsIGNvbnRhaW5lcn0gPSByZXNwXG4gICAgaWYoY29udGFpbmVyKXtcbiAgICAgIGxldCBbdGFnLCBhdHRyc10gPSBjb250YWluZXJcbiAgICAgIHRoaXMuZWwgPSBET00ucmVwbGFjZVJvb3RDb250YWluZXIodGhpcy5lbCwgdGFnLCBhdHRycylcbiAgICB9XG4gICAgdGhpcy5jaGlsZEpvaW5zID0gMFxuICAgIHRoaXMuam9pblBlbmRpbmcgPSB0cnVlXG4gICAgdGhpcy5mbGFzaCA9IG51bGxcblxuICAgIEJyb3dzZXIuZHJvcExvY2FsKHRoaXMubGl2ZVNvY2tldC5sb2NhbFN0b3JhZ2UsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSwgQ09OU0VDVVRJVkVfUkVMT0FEUylcbiAgICB0aGlzLmFwcGx5RGlmZihcIm1vdW50XCIsIHJlbmRlcmVkLCAoe2RpZmYsIGV2ZW50c30pID0+IHtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSBuZXcgUmVuZGVyZWQodGhpcy5pZCwgZGlmZilcbiAgICAgIGxldCBbaHRtbCwgc3RyZWFtc10gPSB0aGlzLnJlbmRlckNvbnRhaW5lcihudWxsLCBcImpvaW5cIilcbiAgICAgIHRoaXMuZHJvcFBlbmRpbmdSZWZzKClcbiAgICAgIGxldCBmb3JtcyA9IHRoaXMuZm9ybXNGb3JSZWNvdmVyeShodG1sKVxuICAgICAgdGhpcy5qb2luQ291bnQrK1xuXG4gICAgICBpZihmb3Jtcy5sZW5ndGggPiAwKXtcbiAgICAgICAgZm9ybXMuZm9yRWFjaCgoW2Zvcm0sIG5ld0Zvcm0sIG5ld0NpZF0sIGkpID0+IHtcbiAgICAgICAgICB0aGlzLnB1c2hGb3JtUmVjb3ZlcnkoZm9ybSwgbmV3Q2lkLCByZXNwID0+IHtcbiAgICAgICAgICAgIGlmKGkgPT09IGZvcm1zLmxlbmd0aCAtIDEpe1xuICAgICAgICAgICAgICB0aGlzLm9uSm9pbkNvbXBsZXRlKHJlc3AsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbkpvaW5Db21wbGV0ZShyZXNwLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGRyb3BQZW5kaW5nUmVmcygpe1xuICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHtQSFhfUkVGX1NSQ309XCIke3RoaXMuaWR9XCJdWyR7UEhYX1JFRn1dYCwgZWwgPT4ge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUYpXG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRl9TUkMpXG4gICAgfSlcbiAgfVxuXG4gIG9uSm9pbkNvbXBsZXRlKHtsaXZlX3BhdGNofSwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKXtcbiAgICAvLyBJbiBvcmRlciB0byBwcm92aWRlIGEgYmV0dGVyIGV4cGVyaWVuY2UsIHdlIHdhbnQgdG8gam9pblxuICAgIC8vIGFsbCBMaXZlVmlld3MgZmlyc3QgYW5kIG9ubHkgdGhlbiBhcHBseSB0aGVpciBwYXRjaGVzLlxuICAgIGlmKHRoaXMuam9pbkNvdW50ID4gMSB8fCAodGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50LmlzSm9pblBlbmRpbmcoKSkpe1xuICAgICAgcmV0dXJuIHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgIH1cblxuICAgIC8vIE9uZSBkb3duc2lkZSBvZiB0aGlzIGFwcHJvYWNoIGlzIHRoYXQgd2UgbmVlZCB0byBmaW5kIHBoeENoaWxkcmVuXG4gICAgLy8gaW4gdGhlIGh0bWwgZnJhZ21lbnQsIGluc3RlYWQgb2YgZGlyZWN0bHkgb24gdGhlIERPTS4gVGhlIGZyYWdtZW50XG4gICAgLy8gYWxzbyBkb2VzIG5vdCBpbmNsdWRlIFBIWF9TVEFUSUMsIHNvIHdlIG5lZWQgdG8gY29weSBpdCBvdmVyIGZyb21cbiAgICAvLyB0aGUgRE9NLlxuICAgIGxldCBuZXdDaGlsZHJlbiA9IERPTS5maW5kUGh4Q2hpbGRyZW5JbkZyYWdtZW50KGh0bWwsIHRoaXMuaWQpLmZpbHRlcih0b0VsID0+IHtcbiAgICAgIGxldCBmcm9tRWwgPSB0b0VsLmlkICYmIHRoaXMuZWwucXVlcnlTZWxlY3RvcihgW2lkPVwiJHt0b0VsLmlkfVwiXWApXG4gICAgICBsZXQgcGh4U3RhdGljID0gZnJvbUVsICYmIGZyb21FbC5nZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQylcbiAgICAgIGlmKHBoeFN0YXRpYyl7IHRvRWwuc2V0QXR0cmlidXRlKFBIWF9TVEFUSUMsIHBoeFN0YXRpYykgfVxuICAgICAgcmV0dXJuIHRoaXMuam9pbkNoaWxkKHRvRWwpXG4gICAgfSlcblxuICAgIGlmKG5ld0NoaWxkcmVuLmxlbmd0aCA9PT0gMCl7XG4gICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgICAgIHRoaXMucm9vdC5wZW5kaW5nSm9pbk9wcy5wdXNoKFt0aGlzLCAoKSA9PiB0aGlzLmFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cyldKVxuICAgICAgICB0aGlzLnBhcmVudC5hY2tKb2luKHRoaXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKClcbiAgICAgICAgdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wZW5kaW5nSm9pbk9wcy5wdXNoKFt0aGlzLCAoKSA9PiB0aGlzLmFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cyldKVxuICAgIH1cbiAgfVxuXG4gIGF0dGFjaFRydWVEb2NFbCgpe1xuICAgIHRoaXMuZWwgPSBET00uYnlJZCh0aGlzLmlkKVxuICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKFBIWF9ST09UX0lELCB0aGlzLnJvb3QuaWQpXG4gIH1cblxuICBleGVjTmV3TW91bnRlZCgpe1xuICAgIERPTS5hbGwodGhpcy5lbCwgYFske3RoaXMuYmluZGluZyhQSFhfSE9PSyl9XSwgW2RhdGEtcGh4LSR7UEhYX0hPT0t9XWAsIGhvb2tFbCA9PiB7XG4gICAgICB0aGlzLm1heWJlQWRkTmV3SG9vayhob29rRWwpXG4gICAgfSlcbiAgICBET00uYWxsKHRoaXMuZWwsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX01PVU5URUQpfV1gLCBlbCA9PiB0aGlzLm1heWJlTW91bnRlZChlbCkpXG4gIH1cblxuICBhcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpe1xuICAgIHRoaXMuYXR0YWNoVHJ1ZURvY0VsKClcbiAgICBsZXQgcGF0Y2ggPSBuZXcgRE9NUGF0Y2godGhpcywgdGhpcy5lbCwgdGhpcy5pZCwgaHRtbCwgc3RyZWFtcywgbnVsbClcbiAgICBwYXRjaC5tYXJrUHJ1bmFibGVDb250ZW50Rm9yUmVtb3ZhbCgpXG4gICAgdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIGZhbHNlKVxuICAgIHRoaXMuam9pbk5ld0NoaWxkcmVuKClcbiAgICB0aGlzLmV4ZWNOZXdNb3VudGVkKClcblxuICAgIHRoaXMuam9pblBlbmRpbmcgPSBmYWxzZVxuICAgIHRoaXMubGl2ZVNvY2tldC5kaXNwYXRjaEV2ZW50cyhldmVudHMpXG4gICAgdGhpcy5hcHBseVBlbmRpbmdVcGRhdGVzKClcblxuICAgIGlmKGxpdmVfcGF0Y2gpe1xuICAgICAgbGV0IHtraW5kLCB0b30gPSBsaXZlX3BhdGNoXG4gICAgICB0aGlzLmxpdmVTb2NrZXQuaGlzdG9yeVBhdGNoKHRvLCBraW5kKVxuICAgIH1cbiAgICB0aGlzLmhpZGVMb2FkZXIoKVxuICAgIGlmKHRoaXMuam9pbkNvdW50ID4gMSl7IHRoaXMudHJpZ2dlclJlY29ubmVjdGVkKCkgfVxuICAgIHRoaXMuc3RvcENhbGxiYWNrKClcbiAgfVxuXG4gIHRyaWdnZXJCZWZvcmVVcGRhdGVIb29rKGZyb21FbCwgdG9FbCl7XG4gICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvbkJlZm9yZUVsVXBkYXRlZFwiLCBbZnJvbUVsLCB0b0VsXSlcbiAgICBsZXQgaG9vayA9IHRoaXMuZ2V0SG9vayhmcm9tRWwpXG4gICAgbGV0IGlzSWdub3JlZCA9IGhvb2sgJiYgRE9NLmlzSWdub3JlZChmcm9tRWwsIHRoaXMuYmluZGluZyhQSFhfVVBEQVRFKSlcbiAgICBpZihob29rICYmICFmcm9tRWwuaXNFcXVhbE5vZGUodG9FbCkgJiYgIShpc0lnbm9yZWQgJiYgaXNFcXVhbE9iaihmcm9tRWwuZGF0YXNldCwgdG9FbC5kYXRhc2V0KSkpe1xuICAgICAgaG9vay5fX2JlZm9yZVVwZGF0ZSgpXG4gICAgICByZXR1cm4gaG9va1xuICAgIH1cbiAgfVxuXG4gIG1heWJlTW91bnRlZChlbCl7XG4gICAgbGV0IHBoeE1vdW50ZWQgPSBlbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9NT1VOVEVEKSlcbiAgICBsZXQgaGFzQmVlbkludm9rZWQgPSBwaHhNb3VudGVkICYmIERPTS5wcml2YXRlKGVsLCBcIm1vdW50ZWRcIilcbiAgICBpZihwaHhNb3VudGVkICYmICFoYXNCZWVuSW52b2tlZCl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQuZXhlY0pTKGVsLCBwaHhNb3VudGVkKVxuICAgICAgRE9NLnB1dFByaXZhdGUoZWwsIFwibW91bnRlZFwiLCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIG1heWJlQWRkTmV3SG9vayhlbCwgZm9yY2Upe1xuICAgIGxldCBuZXdIb29rID0gdGhpcy5hZGRIb29rKGVsKVxuICAgIGlmKG5ld0hvb2speyBuZXdIb29rLl9fbW91bnRlZCgpIH1cbiAgfVxuXG4gIHBlcmZvcm1QYXRjaChwYXRjaCwgcHJ1bmVDaWRzKXtcbiAgICBsZXQgcmVtb3ZlZEVscyA9IFtdXG4gICAgbGV0IHBoeENoaWxkcmVuQWRkZWQgPSBmYWxzZVxuICAgIGxldCB1cGRhdGVkSG9va0lkcyA9IG5ldyBTZXQoKVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJhZGRlZFwiLCBlbCA9PiB7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQudHJpZ2dlckRPTShcIm9uTm9kZUFkZGVkXCIsIFtlbF0pXG4gICAgICB0aGlzLm1heWJlQWRkTmV3SG9vayhlbClcbiAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSl7IHRoaXMubWF5YmVNb3VudGVkKGVsKSB9XG4gICAgfSlcblxuICAgIHBhdGNoLmFmdGVyKFwicGh4Q2hpbGRBZGRlZFwiLCBlbCA9PiB7XG4gICAgICBpZihET00uaXNQaHhTdGlja3koZWwpKXtcbiAgICAgICAgdGhpcy5saXZlU29ja2V0LmpvaW5Sb290Vmlld3MoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGh4Q2hpbGRyZW5BZGRlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYmVmb3JlKFwidXBkYXRlZFwiLCAoZnJvbUVsLCB0b0VsKSA9PiB7XG4gICAgICBsZXQgaG9vayA9IHRoaXMudHJpZ2dlckJlZm9yZVVwZGF0ZUhvb2soZnJvbUVsLCB0b0VsKVxuICAgICAgaWYoaG9vayl7IHVwZGF0ZWRIb29rSWRzLmFkZChmcm9tRWwuaWQpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJ1cGRhdGVkXCIsIGVsID0+IHtcbiAgICAgIGlmKHVwZGF0ZWRIb29rSWRzLmhhcyhlbC5pZCkpeyB0aGlzLmdldEhvb2soZWwpLl9fdXBkYXRlZCgpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJkaXNjYXJkZWRcIiwgKGVsKSA9PiB7XG4gICAgICBpZihlbC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpeyByZW1vdmVkRWxzLnB1c2goZWwpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJ0cmFuc2l0aW9uc0Rpc2NhcmRlZFwiLCBlbHMgPT4gdGhpcy5hZnRlckVsZW1lbnRzUmVtb3ZlZChlbHMsIHBydW5lQ2lkcykpXG4gICAgcGF0Y2gucGVyZm9ybSgpXG4gICAgdGhpcy5hZnRlckVsZW1lbnRzUmVtb3ZlZChyZW1vdmVkRWxzLCBwcnVuZUNpZHMpXG5cbiAgICByZXR1cm4gcGh4Q2hpbGRyZW5BZGRlZFxuICB9XG5cbiAgYWZ0ZXJFbGVtZW50c1JlbW92ZWQoZWxlbWVudHMsIHBydW5lQ2lkcyl7XG4gICAgbGV0IGRlc3Ryb3llZENJRHMgPSBbXVxuICAgIGVsZW1lbnRzLmZvckVhY2gocGFyZW50ID0+IHtcbiAgICAgIGxldCBjb21wb25lbnRzID0gRE9NLmFsbChwYXJlbnQsIGBbJHtQSFhfQ09NUE9ORU5UfV1gKVxuICAgICAgbGV0IGhvb2tzID0gRE9NLmFsbChwYXJlbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX0hPT0spfV1gKVxuICAgICAgY29tcG9uZW50cy5jb25jYXQocGFyZW50KS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgbGV0IGNpZCA9IHRoaXMuY29tcG9uZW50SUQoZWwpXG4gICAgICAgIGlmKGlzQ2lkKGNpZCkgJiYgZGVzdHJveWVkQ0lEcy5pbmRleE9mKGNpZCkgPT09IC0xKXsgZGVzdHJveWVkQ0lEcy5wdXNoKGNpZCkgfVxuICAgICAgfSlcbiAgICAgIGhvb2tzLmNvbmNhdChwYXJlbnQpLmZvckVhY2goaG9va0VsID0+IHtcbiAgICAgICAgbGV0IGhvb2sgPSB0aGlzLmdldEhvb2soaG9va0VsKVxuICAgICAgICBob29rICYmIHRoaXMuZGVzdHJveUhvb2soaG9vaylcbiAgICAgIH0pXG4gICAgfSlcbiAgICAvLyBXZSBzaG91bGQgbm90IHBydW5lQ2lkcyBvbiBqb2lucy4gT3RoZXJ3aXNlLCBpbiBjYXNlIG9mXG4gICAgLy8gcmVqb2lucywgd2UgbWF5IG5vdGlmeSBjaWRzIHRoYXQgbm8gbG9uZ2VyIGJlbG9uZyB0byB0aGVcbiAgICAvLyBjdXJyZW50IExpdmVWaWV3IHRvIGJlIHJlbW92ZWQuXG4gICAgaWYocHJ1bmVDaWRzKXtcbiAgICAgIHRoaXMubWF5YmVQdXNoQ29tcG9uZW50c0Rlc3Ryb3llZChkZXN0cm95ZWRDSURzKVxuICAgIH1cbiAgfVxuXG4gIGpvaW5OZXdDaGlsZHJlbigpe1xuICAgIERPTS5maW5kUGh4Q2hpbGRyZW4odGhpcy5lbCwgdGhpcy5pZCkuZm9yRWFjaChlbCA9PiB0aGlzLmpvaW5DaGlsZChlbCkpXG4gIH1cblxuICBnZXRDaGlsZEJ5SWQoaWQpeyByZXR1cm4gdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdW2lkXSB9XG5cbiAgZ2V0RGVzY2VuZGVudEJ5RWwoZWwpe1xuICAgIGlmKGVsLmlkID09PSB0aGlzLmlkKXtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuW2VsLmdldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lEKV1bZWwuaWRdXG4gICAgfVxuICB9XG5cbiAgZGVzdHJveURlc2NlbmRlbnQoaWQpe1xuICAgIGZvcihsZXQgcGFyZW50SWQgaW4gdGhpcy5yb290LmNoaWxkcmVuKXtcbiAgICAgIGZvcihsZXQgY2hpbGRJZCBpbiB0aGlzLnJvb3QuY2hpbGRyZW5bcGFyZW50SWRdKXtcbiAgICAgICAgaWYoY2hpbGRJZCA9PT0gaWQpeyByZXR1cm4gdGhpcy5yb290LmNoaWxkcmVuW3BhcmVudElkXVtjaGlsZElkXS5kZXN0cm95KCkgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGpvaW5DaGlsZChlbCl7XG4gICAgbGV0IGNoaWxkID0gdGhpcy5nZXRDaGlsZEJ5SWQoZWwuaWQpXG4gICAgaWYoIWNoaWxkKXtcbiAgICAgIGxldCB2aWV3ID0gbmV3IFZpZXcoZWwsIHRoaXMubGl2ZVNvY2tldCwgdGhpcylcbiAgICAgIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVt2aWV3LmlkXSA9IHZpZXdcbiAgICAgIHZpZXcuam9pbigpXG4gICAgICB0aGlzLmNoaWxkSm9pbnMrK1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBpc0pvaW5QZW5kaW5nKCl7IHJldHVybiB0aGlzLmpvaW5QZW5kaW5nIH1cblxuICBhY2tKb2luKF9jaGlsZCl7XG4gICAgdGhpcy5jaGlsZEpvaW5zLS1cblxuICAgIGlmKHRoaXMuY2hpbGRKb2lucyA9PT0gMCl7XG4gICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgICAgIHRoaXMucGFyZW50LmFja0pvaW4odGhpcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25BbGxDaGlsZEpvaW5zQ29tcGxldGUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKCl7XG4gICAgdGhpcy5qb2luQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5wZW5kaW5nSm9pbk9wcy5mb3JFYWNoKChbdmlldywgb3BdKSA9PiB7XG4gICAgICAgIGlmKCF2aWV3LmlzRGVzdHJveWVkKCkpeyBvcCgpIH1cbiAgICAgIH0pXG4gICAgICB0aGlzLnBlbmRpbmdKb2luT3BzID0gW11cbiAgICB9KVxuICB9XG5cbiAgdXBkYXRlKGRpZmYsIGV2ZW50cyl7XG4gICAgaWYodGhpcy5pc0pvaW5QZW5kaW5nKCkgfHwgKHRoaXMubGl2ZVNvY2tldC5oYXNQZW5kaW5nTGluaygpICYmIHRoaXMucm9vdC5pc01haW4oKSkpe1xuICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goe2RpZmYsIGV2ZW50c30pXG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlZC5tZXJnZURpZmYoZGlmZilcbiAgICBsZXQgcGh4Q2hpbGRyZW5BZGRlZCA9IGZhbHNlXG5cbiAgICAvLyBXaGVuIHRoZSBkaWZmIG9ubHkgY29udGFpbnMgY29tcG9uZW50IGRpZmZzLCB0aGVuIHdhbGsgY29tcG9uZW50c1xuICAgIC8vIGFuZCBwYXRjaCBvbmx5IHRoZSBwYXJlbnQgY29tcG9uZW50IGNvbnRhaW5lcnMgZm91bmQgaW4gdGhlIGRpZmYuXG4gICAgLy8gT3RoZXJ3aXNlLCBwYXRjaCBlbnRpcmUgTFYgY29udGFpbmVyLlxuICAgIGlmKHRoaXMucmVuZGVyZWQuaXNDb21wb25lbnRPbmx5RGlmZihkaWZmKSl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQudGltZShcImNvbXBvbmVudCBwYXRjaCBjb21wbGV0ZVwiLCAoKSA9PiB7XG4gICAgICAgIGxldCBwYXJlbnRDaWRzID0gRE9NLmZpbmRQYXJlbnRDSURzKHRoaXMuZWwsIHRoaXMucmVuZGVyZWQuY29tcG9uZW50Q0lEcyhkaWZmKSlcbiAgICAgICAgcGFyZW50Q2lkcy5mb3JFYWNoKHBhcmVudENJRCA9PiB7XG4gICAgICAgICAgaWYodGhpcy5jb21wb25lbnRQYXRjaCh0aGlzLnJlbmRlcmVkLmdldENvbXBvbmVudChkaWZmLCBwYXJlbnRDSUQpLCBwYXJlbnRDSUQpKXsgcGh4Q2hpbGRyZW5BZGRlZCA9IHRydWUgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYoIWlzRW1wdHkoZGlmZikpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRpbWUoXCJmdWxsIHBhdGNoIGNvbXBsZXRlXCIsICgpID0+IHtcbiAgICAgICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyQ29udGFpbmVyKGRpZmYsIFwidXBkYXRlXCIpXG4gICAgICAgIGxldCBwYXRjaCA9IG5ldyBET01QYXRjaCh0aGlzLCB0aGlzLmVsLCB0aGlzLmlkLCBodG1sLCBzdHJlYW1zLCBudWxsKVxuICAgICAgICBwaHhDaGlsZHJlbkFkZGVkID0gdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIHRydWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMubGl2ZVNvY2tldC5kaXNwYXRjaEV2ZW50cyhldmVudHMpXG4gICAgaWYocGh4Q2hpbGRyZW5BZGRlZCl7IHRoaXMuam9pbk5ld0NoaWxkcmVuKCkgfVxuICB9XG5cbiAgcmVuZGVyQ29udGFpbmVyKGRpZmYsIGtpbmQpe1xuICAgIHJldHVybiB0aGlzLmxpdmVTb2NrZXQudGltZShgdG9TdHJpbmcgZGlmZiAoJHtraW5kfSlgLCAoKSA9PiB7XG4gICAgICBsZXQgdGFnID0gdGhpcy5lbC50YWdOYW1lXG4gICAgICAvLyBEb24ndCBza2lwIGFueSBjb21wb25lbnQgaW4gdGhlIGRpZmYgbm9yIGFueSBtYXJrZWQgYXMgcHJ1bmVkXG4gICAgICAvLyAoYXMgdGhleSBtYXkgaGF2ZSBiZWVuIGFkZGVkIGJhY2spXG4gICAgICBsZXQgY2lkcyA9IGRpZmYgPyB0aGlzLnJlbmRlcmVkLmNvbXBvbmVudENJRHMoZGlmZikuY29uY2F0KHRoaXMucHJ1bmluZ0NJRHMpIDogbnVsbFxuICAgICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyZWQudG9TdHJpbmcoY2lkcylcbiAgICAgIHJldHVybiBbYDwke3RhZ30+JHtodG1sfTwvJHt0YWd9PmAsIHN0cmVhbXNdXG4gICAgfSlcbiAgfVxuXG4gIGNvbXBvbmVudFBhdGNoKGRpZmYsIGNpZCl7XG4gICAgaWYoaXNFbXB0eShkaWZmKSkgcmV0dXJuIGZhbHNlXG4gICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyZWQuY29tcG9uZW50VG9TdHJpbmcoY2lkKVxuICAgIGxldCBwYXRjaCA9IG5ldyBET01QYXRjaCh0aGlzLCB0aGlzLmVsLCB0aGlzLmlkLCBodG1sLCBzdHJlYW1zLCBjaWQpXG4gICAgbGV0IGNoaWxkcmVuQWRkZWQgPSB0aGlzLnBlcmZvcm1QYXRjaChwYXRjaCwgdHJ1ZSlcbiAgICByZXR1cm4gY2hpbGRyZW5BZGRlZFxuICB9XG5cbiAgZ2V0SG9vayhlbCl7IHJldHVybiB0aGlzLnZpZXdIb29rc1tWaWV3SG9vay5lbGVtZW50SUQoZWwpXSB9XG5cbiAgYWRkSG9vayhlbCl7XG4gICAgaWYoVmlld0hvb2suZWxlbWVudElEKGVsKSB8fCAhZWwuZ2V0QXR0cmlidXRlKXsgcmV0dXJuIH1cbiAgICBsZXQgaG9va05hbWUgPSBlbC5nZXRBdHRyaWJ1dGUoYGRhdGEtcGh4LSR7UEhYX0hPT0t9YCkgfHwgZWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfSE9PSykpXG4gICAgaWYoaG9va05hbWUgJiYgIXRoaXMub3duc0VsZW1lbnQoZWwpKXsgcmV0dXJuIH1cbiAgICBsZXQgY2FsbGJhY2tzID0gdGhpcy5saXZlU29ja2V0LmdldEhvb2tDYWxsYmFja3MoaG9va05hbWUpXG5cbiAgICBpZihjYWxsYmFja3Mpe1xuICAgICAgaWYoIWVsLmlkKXsgbG9nRXJyb3IoYG5vIERPTSBJRCBmb3IgaG9vayBcIiR7aG9va05hbWV9XCIuIEhvb2tzIHJlcXVpcmUgYSB1bmlxdWUgSUQgb24gZWFjaCBlbGVtZW50LmAsIGVsKSB9XG4gICAgICBsZXQgaG9vayA9IG5ldyBWaWV3SG9vayh0aGlzLCBlbCwgY2FsbGJhY2tzKVxuICAgICAgdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGhvb2suZWwpXSA9IGhvb2tcbiAgICAgIHJldHVybiBob29rXG4gICAgfSBlbHNlIGlmKGhvb2tOYW1lICE9PSBudWxsKXtcbiAgICAgIGxvZ0Vycm9yKGB1bmtub3duIGhvb2sgZm91bmQgZm9yIFwiJHtob29rTmFtZX1cImAsIGVsKVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lIb29rKGhvb2spe1xuICAgIGhvb2suX19kZXN0cm95ZWQoKVxuICAgIGhvb2suX19jbGVhbnVwX18oKVxuICAgIGRlbGV0ZSB0aGlzLnZpZXdIb29rc1tWaWV3SG9vay5lbGVtZW50SUQoaG9vay5lbCldXG4gIH1cblxuICBhcHBseVBlbmRpbmdVcGRhdGVzKCl7XG4gICAgdGhpcy5wZW5kaW5nRGlmZnMuZm9yRWFjaCgoe2RpZmYsIGV2ZW50c30pID0+IHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cykpXG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMuZWFjaENoaWxkKGNoaWxkID0+IGNoaWxkLmFwcGx5UGVuZGluZ1VwZGF0ZXMoKSlcbiAgfVxuXG4gIGVhY2hDaGlsZChjYWxsYmFjayl7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdIHx8IHt9XG4gICAgZm9yKGxldCBpZCBpbiBjaGlsZHJlbil7IGNhbGxiYWNrKHRoaXMuZ2V0Q2hpbGRCeUlkKGlkKSkgfVxuICB9XG5cbiAgb25DaGFubmVsKGV2ZW50LCBjYil7XG4gICAgdGhpcy5saXZlU29ja2V0Lm9uQ2hhbm5lbCh0aGlzLmNoYW5uZWwsIGV2ZW50LCByZXNwID0+IHtcbiAgICAgIGlmKHRoaXMuaXNKb2luUGVuZGluZygpKXtcbiAgICAgICAgdGhpcy5yb290LnBlbmRpbmdKb2luT3BzLnB1c2goW3RoaXMsICgpID0+IGNiKHJlc3ApXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IGNiKHJlc3ApKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBiaW5kQ2hhbm5lbCgpe1xuICAgIC8vIFRoZSBkaWZmIGV2ZW50IHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSByZWd1bGFyIHVwZGF0ZSBvcGVyYXRpb25zLlxuICAgIC8vIEFsbCBvdGhlciBvcGVyYXRpb25zIGFyZSBxdWV1ZWQgdG8gYmUgYXBwbGllZCBvbmx5IGFmdGVyIGpvaW4uXG4gICAgdGhpcy5saXZlU29ja2V0Lm9uQ2hhbm5lbCh0aGlzLmNoYW5uZWwsIFwiZGlmZlwiLCAocmF3RGlmZikgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcGx5RGlmZihcInVwZGF0ZVwiLCByYXdEaWZmLCAoe2RpZmYsIGV2ZW50c30pID0+IHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cykpXG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJyZWRpcmVjdFwiLCAoe3RvLCBmbGFzaH0pID0+IHRoaXMub25SZWRpcmVjdCh7dG8sIGZsYXNofSkpXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJsaXZlX3BhdGNoXCIsIChyZWRpcikgPT4gdGhpcy5vbkxpdmVQYXRjaChyZWRpcikpXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJsaXZlX3JlZGlyZWN0XCIsIChyZWRpcikgPT4gdGhpcy5vbkxpdmVSZWRpcmVjdChyZWRpcikpXG4gICAgdGhpcy5jaGFubmVsLm9uRXJyb3IocmVhc29uID0+IHRoaXMub25FcnJvcihyZWFzb24pKVxuICAgIHRoaXMuY2hhbm5lbC5vbkNsb3NlKHJlYXNvbiA9PiB0aGlzLm9uQ2xvc2UocmVhc29uKSlcbiAgfVxuXG4gIGRlc3Ryb3lBbGxDaGlsZHJlbigpeyB0aGlzLmVhY2hDaGlsZChjaGlsZCA9PiBjaGlsZC5kZXN0cm95KCkpIH1cblxuICBvbkxpdmVSZWRpcmVjdChyZWRpcil7XG4gICAgbGV0IHt0bywga2luZCwgZmxhc2h9ID0gcmVkaXJcbiAgICBsZXQgdXJsID0gdGhpcy5leHBhbmRVUkwodG8pXG4gICAgdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlSZWRpcmVjdCh1cmwsIGtpbmQsIGZsYXNoKVxuICB9XG5cbiAgb25MaXZlUGF0Y2gocmVkaXIpe1xuICAgIGxldCB7dG8sIGtpbmR9ID0gcmVkaXJcbiAgICB0aGlzLmhyZWYgPSB0aGlzLmV4cGFuZFVSTCh0bylcbiAgICB0aGlzLmxpdmVTb2NrZXQuaGlzdG9yeVBhdGNoKHRvLCBraW5kKVxuICB9XG5cbiAgZXhwYW5kVVJMKHRvKXtcbiAgICByZXR1cm4gdG8uc3RhcnRzV2l0aChcIi9cIikgPyBgJHt3aW5kb3cubG9jYXRpb24ucHJvdG9jb2x9Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0fSR7dG99YCA6IHRvXG4gIH1cblxuICBvblJlZGlyZWN0KHt0bywgZmxhc2h9KXsgdGhpcy5saXZlU29ja2V0LnJlZGlyZWN0KHRvLCBmbGFzaCkgfVxuXG4gIGlzRGVzdHJveWVkKCl7IHJldHVybiB0aGlzLmRlc3Ryb3llZCB9XG5cbiAgam9pbkRlYWQoKXsgdGhpcy5pc0RlYWQgPSB0cnVlIH1cblxuICBqb2luKGNhbGxiYWNrKXtcbiAgICB0aGlzLnNob3dMb2FkZXIodGhpcy5saXZlU29ja2V0LmxvYWRlclRpbWVvdXQpXG4gICAgdGhpcy5iaW5kQ2hhbm5lbCgpXG4gICAgaWYodGhpcy5pc01haW4oKSl7XG4gICAgICB0aGlzLnN0b3BDYWxsYmFjayA9IHRoaXMubGl2ZVNvY2tldC53aXRoUGFnZUxvYWRpbmcoe3RvOiB0aGlzLmhyZWYsIGtpbmQ6IFwiaW5pdGlhbFwifSlcbiAgICB9XG4gICAgdGhpcy5qb2luQ2FsbGJhY2sgPSAob25Eb25lKSA9PiB7XG4gICAgICBvbkRvbmUgPSBvbkRvbmUgfHwgZnVuY3Rpb24oKXt9XG4gICAgICBjYWxsYmFjayA/IGNhbGxiYWNrKHRoaXMuam9pbkNvdW50LCBvbkRvbmUpIDogb25Eb25lKClcbiAgICB9XG4gICAgdGhpcy5saXZlU29ja2V0LndyYXBQdXNoKHRoaXMsIHt0aW1lb3V0OiBmYWxzZX0sICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNoYW5uZWwuam9pbigpXG4gICAgICAgIC5yZWNlaXZlKFwib2tcIiwgZGF0YSA9PiB7XG4gICAgICAgICAgaWYoIXRoaXMuaXNEZXN0cm95ZWQoKSl7XG4gICAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB0aGlzLm9uSm9pbihkYXRhKSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgcmVzcCA9PiAhdGhpcy5pc0Rlc3Ryb3llZCgpICYmIHRoaXMub25Kb2luRXJyb3IocmVzcCkpXG4gICAgICAgIC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiAhdGhpcy5pc0Rlc3Ryb3llZCgpICYmIHRoaXMub25Kb2luRXJyb3Ioe3JlYXNvbjogXCJ0aW1lb3V0XCJ9KSlcbiAgICB9KVxuICB9XG5cbiAgb25Kb2luRXJyb3IocmVzcCl7XG4gICAgaWYocmVzcC5yZWFzb24gPT09IFwicmVsb2FkXCIpe1xuICAgICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbYGZhaWxlZCBtb3VudCB3aXRoICR7cmVzcC5zdGF0dXN9LiBGYWxsaW5nIGJhY2sgdG8gcGFnZSByZXF1ZXN0YCwgcmVzcF0pXG4gICAgICByZXR1cm4gdGhpcy5vblJlZGlyZWN0KHt0bzogdGhpcy5ocmVmfSlcbiAgICB9IGVsc2UgaWYocmVzcC5yZWFzb24gPT09IFwidW5hdXRob3JpemVkXCIgfHwgcmVzcC5yZWFzb24gPT09IFwic3RhbGVcIil7XG4gICAgICB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtcInVuYXV0aG9yaXplZCBsaXZlX3JlZGlyZWN0LiBGYWxsaW5nIGJhY2sgdG8gcGFnZSByZXF1ZXN0XCIsIHJlc3BdKVxuICAgICAgcmV0dXJuIHRoaXMub25SZWRpcmVjdCh7dG86IHRoaXMuaHJlZn0pXG4gICAgfVxuICAgIGlmKHJlc3AucmVkaXJlY3QgfHwgcmVzcC5saXZlX3JlZGlyZWN0KXtcbiAgICAgIHRoaXMuam9pblBlbmRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy5jaGFubmVsLmxlYXZlKClcbiAgICB9XG4gICAgaWYocmVzcC5yZWRpcmVjdCl7IHJldHVybiB0aGlzLm9uUmVkaXJlY3QocmVzcC5yZWRpcmVjdCkgfVxuICAgIGlmKHJlc3AubGl2ZV9yZWRpcmVjdCl7IHJldHVybiB0aGlzLm9uTGl2ZVJlZGlyZWN0KHJlc3AubGl2ZV9yZWRpcmVjdCkgfVxuICAgIHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW1widW5hYmxlIHRvIGpvaW5cIiwgcmVzcF0pXG4gICAgaWYodGhpcy5saXZlU29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLmxpdmVTb2NrZXQucmVsb2FkV2l0aEppdHRlcih0aGlzKSB9XG4gIH1cblxuICBvbkNsb3NlKHJlYXNvbil7XG4gICAgaWYodGhpcy5pc0Rlc3Ryb3llZCgpKXsgcmV0dXJuIH1cbiAgICBpZih0aGlzLmxpdmVTb2NrZXQuaGFzUGVuZGluZ0xpbmsoKSAmJiByZWFzb24gIT09IFwibGVhdmVcIil7XG4gICAgICByZXR1cm4gdGhpcy5saXZlU29ja2V0LnJlbG9hZFdpdGhKaXR0ZXIodGhpcylcbiAgICB9XG4gICAgdGhpcy5kZXN0cm95QWxsQ2hpbGRyZW4oKVxuICAgIHRoaXMubGl2ZVNvY2tldC5kcm9wQWN0aXZlRWxlbWVudCh0aGlzKVxuICAgIC8vIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIGJlIG51bGwgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTFcbiAgICBpZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KXsgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCkgfVxuICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc1VubG9hZGVkKCkpe1xuICAgICAgdGhpcy5zaG93TG9hZGVyKEJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQpXG4gICAgfVxuICB9XG5cbiAgb25FcnJvcihyZWFzb24pe1xuICAgIHRoaXMub25DbG9zZShyZWFzb24pXG4gICAgaWYodGhpcy5saXZlU29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtcInZpZXcgY3Jhc2hlZFwiLCByZWFzb25dKSB9XG4gICAgaWYoIXRoaXMubGl2ZVNvY2tldC5pc1VubG9hZGVkKCkpeyB0aGlzLmRpc3BsYXlFcnJvcigpIH1cbiAgfVxuXG4gIGRpc3BsYXlFcnJvcigpe1xuICAgIGlmKHRoaXMuaXNNYWluKCkpeyBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLCB7ZGV0YWlsOiB7dG86IHRoaXMuaHJlZiwga2luZDogXCJlcnJvclwifX0pIH1cbiAgICB0aGlzLnNob3dMb2FkZXIoKVxuICAgIHRoaXMuc2V0Q29udGFpbmVyQ2xhc3NlcyhQSFhfRElTQ09OTkVDVEVEX0NMQVNTLCBQSFhfRVJST1JfQ0xBU1MpXG4gICAgdGhpcy5leGVjQWxsKHRoaXMuYmluZGluZyhcImRpc2Nvbm5lY3RlZFwiKSlcbiAgfVxuXG4gIHB1c2hXaXRoUmVwbHkocmVmR2VuZXJhdG9yLCBldmVudCwgcGF5bG9hZCwgb25SZXBseSA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cblxuICAgIGxldCBbcmVmLCBbZWxdLCBvcHRzXSA9IHJlZkdlbmVyYXRvciA/IHJlZkdlbmVyYXRvcigpIDogW251bGwsIFtdLCB7fV1cbiAgICBsZXQgb25Mb2FkaW5nRG9uZSA9IGZ1bmN0aW9uKCl7IH1cbiAgICBpZihvcHRzLnBhZ2VfbG9hZGluZyB8fCAoZWwgJiYgKGVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX1BBR0VfTE9BRElORykpICE9PSBudWxsKSkpe1xuICAgICAgb25Mb2FkaW5nRG9uZSA9IHRoaXMubGl2ZVNvY2tldC53aXRoUGFnZUxvYWRpbmcoe2tpbmQ6IFwiZWxlbWVudFwiLCB0YXJnZXQ6IGVsfSlcbiAgICB9XG5cbiAgICBpZih0eXBlb2YgKHBheWxvYWQuY2lkKSAhPT0gXCJudW1iZXJcIil7IGRlbGV0ZSBwYXlsb2FkLmNpZCB9XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMubGl2ZVNvY2tldC53cmFwUHVzaCh0aGlzLCB7dGltZW91dDogdHJ1ZX0sICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbC5wdXNoKGV2ZW50LCBwYXlsb2FkLCBQVVNIX1RJTUVPVVQpLnJlY2VpdmUoXCJva1wiLCByZXNwID0+IHtcbiAgICAgICAgICBsZXQgZmluaXNoID0gKGhvb2tSZXBseSkgPT4ge1xuICAgICAgICAgICAgaWYocmVzcC5yZWRpcmVjdCl7IHRoaXMub25SZWRpcmVjdChyZXNwLnJlZGlyZWN0KSB9XG4gICAgICAgICAgICBpZihyZXNwLmxpdmVfcGF0Y2gpeyB0aGlzLm9uTGl2ZVBhdGNoKHJlc3AubGl2ZV9wYXRjaCkgfVxuICAgICAgICAgICAgaWYocmVzcC5saXZlX3JlZGlyZWN0KXsgdGhpcy5vbkxpdmVSZWRpcmVjdChyZXNwLmxpdmVfcmVkaXJlY3QpIH1cbiAgICAgICAgICAgIGlmKHJlZiAhPT0gbnVsbCl7IHRoaXMudW5kb1JlZnMocmVmKSB9XG4gICAgICAgICAgICBvbkxvYWRpbmdEb25lKClcbiAgICAgICAgICAgIG9uUmVwbHkocmVzcCwgaG9va1JlcGx5KVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihyZXNwLmRpZmYpe1xuICAgICAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmFwcGx5RGlmZihcInVwZGF0ZVwiLCByZXNwLmRpZmYsICh7ZGlmZiwgcmVwbHksIGV2ZW50c30pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShkaWZmLCBldmVudHMpXG4gICAgICAgICAgICAgICAgZmluaXNoKHJlcGx5KVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmluaXNoKG51bGwpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICApXG4gIH1cblxuICB1bmRvUmVmcyhyZWYpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfSAvLyBleGl0IGlmIGV4dGVybmFsIGZvcm0gdHJpZ2dlcmVkXG5cbiAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7UEhYX1JFRl9TUkN9PVwiJHt0aGlzLmlkfVwiXVske1BIWF9SRUZ9PVwiJHtyZWZ9XCJdYCwgZWwgPT4ge1xuICAgICAgbGV0IGRpc2FibGVkVmFsID0gZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFRClcbiAgICAgIC8vIHJlbW92ZSByZWZzXG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRilcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX1NSQylcbiAgICAgIC8vIHJlc3RvcmUgaW5wdXRzXG4gICAgICBpZihlbC5nZXRBdHRyaWJ1dGUoUEhYX1JFQURPTkxZKSAhPT0gbnVsbCl7XG4gICAgICAgIGVsLnJlYWRPbmx5ID0gZmFsc2VcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUFET05MWSlcbiAgICAgIH1cbiAgICAgIGlmKGRpc2FibGVkVmFsICE9PSBudWxsKXtcbiAgICAgICAgZWwuZGlzYWJsZWQgPSBkaXNhYmxlZFZhbCA9PT0gXCJ0cnVlXCIgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9ESVNBQkxFRClcbiAgICAgIH1cbiAgICAgIC8vIHJlbW92ZSBjbGFzc2VzXG4gICAgICBQSFhfRVZFTlRfQ0xBU1NFUy5mb3JFYWNoKGNsYXNzTmFtZSA9PiBET00ucmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkpXG4gICAgICAvLyByZXN0b3JlIGRpc2FibGVzXG4gICAgICBsZXQgZGlzYWJsZVJlc3RvcmUgPSBlbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFKVxuICAgICAgaWYoZGlzYWJsZVJlc3RvcmUgIT09IG51bGwpe1xuICAgICAgICBlbC5pbm5lclRleHQgPSBkaXNhYmxlUmVzdG9yZVxuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFKVxuICAgICAgfVxuICAgICAgbGV0IHRvRWwgPSBET00ucHJpdmF0ZShlbCwgUEhYX1JFRilcbiAgICAgIGlmKHRvRWwpe1xuICAgICAgICBsZXQgaG9vayA9IHRoaXMudHJpZ2dlckJlZm9yZVVwZGF0ZUhvb2soZWwsIHRvRWwpXG4gICAgICAgIERPTVBhdGNoLnBhdGNoRWwoZWwsIHRvRWwsIHRoaXMubGl2ZVNvY2tldC5nZXRBY3RpdmVFbGVtZW50KCkpXG4gICAgICAgIGlmKGhvb2speyBob29rLl9fdXBkYXRlZCgpIH1cbiAgICAgICAgRE9NLmRlbGV0ZVByaXZhdGUoZWwsIFBIWF9SRUYpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHB1dFJlZihlbGVtZW50cywgZXZlbnQsIG9wdHMgPSB7fSl7XG4gICAgbGV0IG5ld1JlZiA9IHRoaXMucmVmKytcbiAgICBsZXQgZGlzYWJsZVdpdGggPSB0aGlzLmJpbmRpbmcoUEhYX0RJU0FCTEVfV0lUSClcbiAgICBpZihvcHRzLmxvYWRpbmcpeyBlbGVtZW50cyA9IGVsZW1lbnRzLmNvbmNhdChET00uYWxsKGRvY3VtZW50LCBvcHRzLmxvYWRpbmcpKX1cblxuICAgIGVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChgcGh4LSR7ZXZlbnR9LWxvYWRpbmdgKVxuICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9SRUYsIG5ld1JlZilcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfUkVGX1NSQywgdGhpcy5lbC5pZClcbiAgICAgIGxldCBkaXNhYmxlVGV4dCA9IGVsLmdldEF0dHJpYnV0ZShkaXNhYmxlV2l0aClcbiAgICAgIGlmKGRpc2FibGVUZXh0ICE9PSBudWxsKXtcbiAgICAgICAgaWYoIWVsLmdldEF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUpKXtcbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFLCBlbC5pbm5lclRleHQpXG4gICAgICAgIH1cbiAgICAgICAgaWYoZGlzYWJsZVRleHQgIT09IFwiXCIpeyBlbC5pbm5lclRleHQgPSBkaXNhYmxlVGV4dCB9XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiXCIpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gW25ld1JlZiwgZWxlbWVudHMsIG9wdHNdXG4gIH1cblxuICBjb21wb25lbnRJRChlbCl7XG4gICAgbGV0IGNpZCA9IGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVClcbiAgICByZXR1cm4gY2lkID8gcGFyc2VJbnQoY2lkKSA6IG51bGxcbiAgfVxuXG4gIHRhcmdldENvbXBvbmVudElEKHRhcmdldCwgdGFyZ2V0Q3R4LCBvcHRzID0ge30pe1xuICAgIGlmKGlzQ2lkKHRhcmdldEN0eCkpeyByZXR1cm4gdGFyZ2V0Q3R4IH1cblxuICAgIGxldCBjaWRPclNlbGVjdG9yID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJ0YXJnZXRcIikpXG4gICAgaWYoaXNDaWQoY2lkT3JTZWxlY3Rvcikpe1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGNpZE9yU2VsZWN0b3IpXG4gICAgfSBlbHNlIGlmKHRhcmdldEN0eCAmJiAoY2lkT3JTZWxlY3RvciAhPT0gbnVsbCB8fCBvcHRzLnRhcmdldCkpe1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBjbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KXtcbiAgICBpZihpc0NpZCh0YXJnZXRDdHgpKXtcbiAgICAgIHJldHVybiB0YXJnZXRDdHhcbiAgICB9IGVsc2UgaWYodGFyZ2V0Q3R4KXtcbiAgICAgIHJldHVybiBtYXliZSh0YXJnZXRDdHguY2xvc2VzdChgWyR7UEhYX0NPTVBPTkVOVH1dYCksIGVsID0+IHRoaXMub3duc0VsZW1lbnQoZWwpICYmIHRoaXMuY29tcG9uZW50SUQoZWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHB1c2hIb29rRXZlbnQodGFyZ2V0Q3R4LCBldmVudCwgcGF5bG9hZCwgb25SZXBseSl7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7XG4gICAgICB0aGlzLmxvZyhcImhvb2tcIiwgKCkgPT4gW1widW5hYmxlIHRvIHB1c2ggaG9vayBldmVudC4gTGl2ZVZpZXcgbm90IGNvbm5lY3RlZFwiLCBldmVudCwgcGF5bG9hZF0pXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgbGV0IFtyZWYsIGVscywgb3B0c10gPSB0aGlzLnB1dFJlZihbXSwgXCJob29rXCIpXG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KCgpID0+IFtyZWYsIGVscywgb3B0c10sIFwiZXZlbnRcIiwge1xuICAgICAgdHlwZTogXCJob29rXCIsXG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICB2YWx1ZTogcGF5bG9hZCxcbiAgICAgIGNpZDogdGhpcy5jbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KVxuICAgIH0sIChyZXNwLCByZXBseSkgPT4gb25SZXBseShyZXBseSwgcmVmKSlcblxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIGV4dHJhY3RNZXRhKGVsLCBtZXRhLCB2YWx1ZSl7XG4gICAgbGV0IHByZWZpeCA9IHRoaXMuYmluZGluZyhcInZhbHVlLVwiKVxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBlbC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGlmKCFtZXRhKXsgbWV0YSA9IHt9IH1cbiAgICAgIGxldCBuYW1lID0gZWwuYXR0cmlidXRlc1tpXS5uYW1lXG4gICAgICBpZihuYW1lLnN0YXJ0c1dpdGgocHJlZml4KSl7IG1ldGFbbmFtZS5yZXBsYWNlKHByZWZpeCwgXCJcIildID0gZWwuZ2V0QXR0cmlidXRlKG5hbWUpIH1cbiAgICB9XG4gICAgaWYoZWwudmFsdWUgIT09IHVuZGVmaW5lZCl7XG4gICAgICBpZighbWV0YSl7IG1ldGEgPSB7fSB9XG4gICAgICBtZXRhLnZhbHVlID0gZWwudmFsdWVcblxuICAgICAgaWYoZWwudGFnTmFtZSA9PT0gXCJJTlBVVFwiICYmIENIRUNLQUJMRV9JTlBVVFMuaW5kZXhPZihlbC50eXBlKSA+PSAwICYmICFlbC5jaGVja2VkKXtcbiAgICAgICAgZGVsZXRlIG1ldGEudmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYodmFsdWUpe1xuICAgICAgaWYoIW1ldGEpeyBtZXRhID0ge30gfVxuICAgICAgZm9yKGxldCBrZXkgaW4gdmFsdWUpeyBtZXRhW2tleV0gPSB2YWx1ZVtrZXldIH1cbiAgICB9XG4gICAgcmV0dXJuIG1ldGFcbiAgfVxuXG4gIHB1c2hFdmVudCh0eXBlLCBlbCwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgbWV0YSwgb3B0cyA9IHt9KXtcbiAgICB0aGlzLnB1c2hXaXRoUmVwbHkoKCkgPT4gdGhpcy5wdXRSZWYoW2VsXSwgdHlwZSwgb3B0cyksIFwiZXZlbnRcIiwge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGV2ZW50OiBwaHhFdmVudCxcbiAgICAgIHZhbHVlOiB0aGlzLmV4dHJhY3RNZXRhKGVsLCBtZXRhLCBvcHRzLnZhbHVlKSxcbiAgICAgIGNpZDogdGhpcy50YXJnZXRDb21wb25lbnRJRChlbCwgdGFyZ2V0Q3R4LCBvcHRzKVxuICAgIH0pXG4gIH1cblxuICBwdXNoRmlsZVByb2dyZXNzKGZpbGVFbCwgZW50cnlSZWYsIHByb2dyZXNzLCBvblJlcGx5ID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHRoaXMubGl2ZVNvY2tldC53aXRoaW5Pd25lcnMoZmlsZUVsLmZvcm0sICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIHZpZXcucHVzaFdpdGhSZXBseShudWxsLCBcInByb2dyZXNzXCIsIHtcbiAgICAgICAgZXZlbnQ6IGZpbGVFbC5nZXRBdHRyaWJ1dGUodmlldy5iaW5kaW5nKFBIWF9QUk9HUkVTUykpLFxuICAgICAgICByZWY6IGZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpLFxuICAgICAgICBlbnRyeV9yZWY6IGVudHJ5UmVmLFxuICAgICAgICBwcm9ncmVzczogcHJvZ3Jlc3MsXG4gICAgICAgIGNpZDogdmlldy50YXJnZXRDb21wb25lbnRJRChmaWxlRWwuZm9ybSwgdGFyZ2V0Q3R4KVxuICAgICAgfSwgb25SZXBseSlcbiAgICB9KVxuICB9XG5cbiAgcHVzaElucHV0KGlucHV0RWwsIHRhcmdldEN0eCwgZm9yY2VDaWQsIHBoeEV2ZW50LCBvcHRzLCBjYWxsYmFjayl7XG4gICAgbGV0IHVwbG9hZHNcbiAgICBsZXQgY2lkID0gaXNDaWQoZm9yY2VDaWQpID8gZm9yY2VDaWQgOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGlucHV0RWwuZm9ybSwgdGFyZ2V0Q3R4KVxuICAgIGxldCByZWZHZW5lcmF0b3IgPSAoKSA9PiB0aGlzLnB1dFJlZihbaW5wdXRFbCwgaW5wdXRFbC5mb3JtXSwgXCJjaGFuZ2VcIiwgb3B0cylcbiAgICBsZXQgZm9ybURhdGFcbiAgICBpZihpbnB1dEVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpKXtcbiAgICAgIGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShpbnB1dEVsLmZvcm0sIHtfdGFyZ2V0OiBvcHRzLl90YXJnZXR9LCBbaW5wdXRFbC5uYW1lXSlcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEgPSBzZXJpYWxpemVGb3JtKGlucHV0RWwuZm9ybSwge190YXJnZXQ6IG9wdHMuX3RhcmdldH0pXG4gICAgfVxuICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGlucHV0RWwpICYmIGlucHV0RWwuZmlsZXMgJiYgaW5wdXRFbC5maWxlcy5sZW5ndGggPiAwKXtcbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKGlucHV0RWwsIEFycmF5LmZyb20oaW5wdXRFbC5maWxlcykpXG4gICAgfVxuICAgIHVwbG9hZHMgPSBMaXZlVXBsb2FkZXIuc2VyaWFsaXplVXBsb2FkcyhpbnB1dEVsKVxuICAgIGxldCBldmVudCA9IHtcbiAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgdmFsdWU6IGZvcm1EYXRhLFxuICAgICAgdXBsb2FkczogdXBsb2FkcyxcbiAgICAgIGNpZDogY2lkXG4gICAgfVxuICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIFwiZXZlbnRcIiwgZXZlbnQsIHJlc3AgPT4ge1xuICAgICAgRE9NLnNob3dFcnJvcihpbnB1dEVsLCB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhQSFhfRkVFREJBQ0tfRk9SKSlcbiAgICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGlucHV0RWwpICYmIGlucHV0RWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtYXV0by11cGxvYWRcIikgIT09IG51bGwpe1xuICAgICAgICBpZihMaXZlVXBsb2FkZXIuZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dEVsKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICBsZXQgW3JlZiwgX2Vsc10gPSByZWZHZW5lcmF0b3IoKVxuICAgICAgICAgIHRoaXMudXBsb2FkRmlsZXMoaW5wdXRFbC5mb3JtLCB0YXJnZXRDdHgsIHJlZiwgY2lkLCAoX3VwbG9hZHMpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3ApXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJBd2FpdGluZ1N1Ym1pdChpbnB1dEVsLmZvcm0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdHJpZ2dlckF3YWl0aW5nU3VibWl0KGZvcm1FbCl7XG4gICAgbGV0IGF3YWl0aW5nU3VibWl0ID0gdGhpcy5nZXRTY2hlZHVsZWRTdWJtaXQoZm9ybUVsKVxuICAgIGlmKGF3YWl0aW5nU3VibWl0KXtcbiAgICAgIGxldCBbX2VsLCBfcmVmLCBfb3B0cywgY2FsbGJhY2tdID0gYXdhaXRpbmdTdWJtaXRcbiAgICAgIHRoaXMuY2FuY2VsU3VibWl0KGZvcm1FbClcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICBnZXRTY2hlZHVsZWRTdWJtaXQoZm9ybUVsKXtcbiAgICByZXR1cm4gdGhpcy5mb3JtU3VibWl0cy5maW5kKChbZWwsIF9yZWYsIF9vcHRzLCBfY2FsbGJhY2tdKSA9PiBlbC5pc1NhbWVOb2RlKGZvcm1FbCkpXG4gIH1cblxuICBzY2hlZHVsZVN1Ym1pdChmb3JtRWwsIHJlZiwgb3B0cywgY2FsbGJhY2spe1xuICAgIGlmKHRoaXMuZ2V0U2NoZWR1bGVkU3VibWl0KGZvcm1FbCkpeyByZXR1cm4gdHJ1ZSB9XG4gICAgdGhpcy5mb3JtU3VibWl0cy5wdXNoKFtmb3JtRWwsIHJlZiwgb3B0cywgY2FsbGJhY2tdKVxuICB9XG5cbiAgY2FuY2VsU3VibWl0KGZvcm1FbCl7XG4gICAgdGhpcy5mb3JtU3VibWl0cyA9IHRoaXMuZm9ybVN1Ym1pdHMuZmlsdGVyKChbZWwsIHJlZiwgX2NhbGxiYWNrXSkgPT4ge1xuICAgICAgaWYoZWwuaXNTYW1lTm9kZShmb3JtRWwpKXtcbiAgICAgICAgdGhpcy51bmRvUmVmcyhyZWYpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZGlzYWJsZUZvcm0oZm9ybUVsLCBvcHRzID0ge30pe1xuICAgIGxldCBmaWx0ZXJJZ25vcmVkID0gZWwgPT4ge1xuICAgICAgbGV0IHVzZXJJZ25vcmVkID0gY2xvc2VzdFBoeEJpbmRpbmcoZWwsIGAke3RoaXMuYmluZGluZyhQSFhfVVBEQVRFKX09aWdub3JlYCwgZWwuZm9ybSlcbiAgICAgIHJldHVybiAhKHVzZXJJZ25vcmVkIHx8IGNsb3Nlc3RQaHhCaW5kaW5nKGVsLCBcImRhdGEtcGh4LXVwZGF0ZT1pZ25vcmVcIiwgZWwuZm9ybSkpXG4gICAgfVxuICAgIGxldCBmaWx0ZXJEaXNhYmxlcyA9IGVsID0+IHtcbiAgICAgIHJldHVybiBlbC5oYXNBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9ESVNBQkxFX1dJVEgpKVxuICAgIH1cbiAgICBsZXQgZmlsdGVyQnV0dG9uID0gZWwgPT4gZWwudGFnTmFtZSA9PSBcIkJVVFRPTlwiXG5cbiAgICBsZXQgZmlsdGVySW5wdXQgPSBlbCA9PiBbXCJJTlBVVFwiLCBcIlRFWFRBUkVBXCIsIFwiU0VMRUNUXCJdLmluY2x1ZGVzKGVsLnRhZ05hbWUpXG5cbiAgICBsZXQgZm9ybUVsZW1lbnRzID0gQXJyYXkuZnJvbShmb3JtRWwuZWxlbWVudHMpXG4gICAgbGV0IGRpc2FibGVzID0gZm9ybUVsZW1lbnRzLmZpbHRlcihmaWx0ZXJEaXNhYmxlcylcbiAgICBsZXQgYnV0dG9ucyA9IGZvcm1FbGVtZW50cy5maWx0ZXIoZmlsdGVyQnV0dG9uKS5maWx0ZXIoZmlsdGVySWdub3JlZClcbiAgICBsZXQgaW5wdXRzID0gZm9ybUVsZW1lbnRzLmZpbHRlcihmaWx0ZXJJbnB1dCkuZmlsdGVyKGZpbHRlcklnbm9yZWQpXG5cbiAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVELCBidXR0b24uZGlzYWJsZWQpXG4gICAgICBidXR0b24uZGlzYWJsZWQgPSB0cnVlXG4gICAgfSlcbiAgICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoUEhYX1JFQURPTkxZLCBpbnB1dC5yZWFkT25seSlcbiAgICAgIGlucHV0LnJlYWRPbmx5ID0gdHJ1ZVxuICAgICAgaWYoaW5wdXQuZmlsZXMpe1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVELCBpbnB1dC5kaXNhYmxlZClcbiAgICAgICAgaW5wdXQuZGlzYWJsZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgICBmb3JtRWwuc2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfUEFHRV9MT0FESU5HKSwgXCJcIilcbiAgICByZXR1cm4gdGhpcy5wdXRSZWYoW2Zvcm1FbF0uY29uY2F0KGRpc2FibGVzKS5jb25jYXQoYnV0dG9ucykuY29uY2F0KGlucHV0cyksIFwic3VibWl0XCIsIG9wdHMpXG4gIH1cblxuICBwdXNoRm9ybVN1Ym1pdChmb3JtRWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIG9wdHMsIG9uUmVwbHkpe1xuICAgIGxldCByZWZHZW5lcmF0b3IgPSAoKSA9PiB0aGlzLmRpc2FibGVGb3JtKGZvcm1FbCwgb3B0cylcbiAgICBsZXQgY2lkID0gdGhpcy50YXJnZXRDb21wb25lbnRJRChmb3JtRWwsIHRhcmdldEN0eClcbiAgICBpZihMaXZlVXBsb2FkZXIuaGFzVXBsb2Fkc0luUHJvZ3Jlc3MoZm9ybUVsKSl7XG4gICAgICBsZXQgW3JlZiwgX2Vsc10gPSByZWZHZW5lcmF0b3IoKVxuICAgICAgbGV0IHB1c2ggPSAoKSA9PiB0aGlzLnB1c2hGb3JtU3VibWl0KGZvcm1FbCwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgb3B0cywgb25SZXBseSlcbiAgICAgIHJldHVybiB0aGlzLnNjaGVkdWxlU3VibWl0KGZvcm1FbCwgcmVmLCBvcHRzLCBwdXNoKVxuICAgIH0gZWxzZSBpZihMaXZlVXBsb2FkZXIuaW5wdXRzQXdhaXRpbmdQcmVmbGlnaHQoZm9ybUVsKS5sZW5ndGggPiAwKXtcbiAgICAgIGxldCBbcmVmLCBlbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgIGxldCBwcm94eVJlZkdlbiA9ICgpID0+IFtyZWYsIGVscywgb3B0c11cbiAgICAgIHRoaXMudXBsb2FkRmlsZXMoZm9ybUVsLCB0YXJnZXRDdHgsIHJlZiwgY2lkLCAoX3VwbG9hZHMpID0+IHtcbiAgICAgICAgbGV0IGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShmb3JtRWwsIHt9KVxuICAgICAgICB0aGlzLnB1c2hXaXRoUmVwbHkocHJveHlSZWZHZW4sIFwiZXZlbnRcIiwge1xuICAgICAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgICAgIGV2ZW50OiBwaHhFdmVudCxcbiAgICAgICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICAgICAgY2lkOiBjaWRcbiAgICAgICAgfSwgb25SZXBseSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBmb3JtRGF0YSA9IHNlcmlhbGl6ZUZvcm0oZm9ybUVsLCB7fSlcbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIFwiZXZlbnRcIiwge1xuICAgICAgICB0eXBlOiBcImZvcm1cIixcbiAgICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICAgIGNpZDogY2lkXG4gICAgICB9LCBvblJlcGx5KVxuICAgIH1cbiAgfVxuXG4gIHVwbG9hZEZpbGVzKGZvcm1FbCwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgb25Db21wbGV0ZSl7XG4gICAgbGV0IGpvaW5Db3VudEF0VXBsb2FkID0gdGhpcy5qb2luQ291bnRcbiAgICBsZXQgaW5wdXRFbHMgPSBMaXZlVXBsb2FkZXIuYWN0aXZlRmlsZUlucHV0cyhmb3JtRWwpXG4gICAgbGV0IG51bUZpbGVJbnB1dHNJblByb2dyZXNzID0gaW5wdXRFbHMubGVuZ3RoXG5cbiAgICAvLyBnZXQgZWFjaCBmaWxlIGlucHV0XG4gICAgaW5wdXRFbHMuZm9yRWFjaChpbnB1dEVsID0+IHtcbiAgICAgIGxldCB1cGxvYWRlciA9IG5ldyBMaXZlVXBsb2FkZXIoaW5wdXRFbCwgdGhpcywgKCkgPT4ge1xuICAgICAgICBudW1GaWxlSW5wdXRzSW5Qcm9ncmVzcy0tXG4gICAgICAgIGlmKG51bUZpbGVJbnB1dHNJblByb2dyZXNzID09PSAwKXsgb25Db21wbGV0ZSgpIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnVwbG9hZGVyc1tpbnB1dEVsXSA9IHVwbG9hZGVyXG4gICAgICBsZXQgZW50cmllcyA9IHVwbG9hZGVyLmVudHJpZXMoKS5tYXAoZW50cnkgPT4gZW50cnkudG9QcmVmbGlnaHRQYXlsb2FkKCkpXG5cbiAgICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICByZWY6IGlucHV0RWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSxcbiAgICAgICAgZW50cmllczogZW50cmllcyxcbiAgICAgICAgY2lkOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGlucHV0RWwuZm9ybSwgdGFyZ2V0Q3R4KVxuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZyhcInVwbG9hZFwiLCAoKSA9PiBbXCJzZW5kaW5nIHByZWZsaWdodCByZXF1ZXN0XCIsIHBheWxvYWRdKVxuXG4gICAgICB0aGlzLnB1c2hXaXRoUmVwbHkobnVsbCwgXCJhbGxvd191cGxvYWRcIiwgcGF5bG9hZCwgcmVzcCA9PiB7XG4gICAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtcImdvdCBwcmVmbGlnaHQgcmVzcG9uc2VcIiwgcmVzcF0pXG4gICAgICAgIGlmKHJlc3AuZXJyb3Ipe1xuICAgICAgICAgIHRoaXMudW5kb1JlZnMocmVmKVxuICAgICAgICAgIGxldCBbZW50cnlfcmVmLCByZWFzb25dID0gcmVzcC5lcnJvclxuICAgICAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtgZXJyb3IgZm9yIGVudHJ5ICR7ZW50cnlfcmVmfWAsIHJlYXNvbl0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IG9uRXJyb3IgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5vbkVycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgaWYodGhpcy5qb2luQ291bnQgPT09IGpvaW5Db3VudEF0VXBsb2FkKXsgY2FsbGJhY2soKSB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGxvYWRlci5pbml0QWRhcHRlclVwbG9hZChyZXNwLCBvbkVycm9yLCB0aGlzLmxpdmVTb2NrZXQpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGRpc3BhdGNoVXBsb2FkcyhuYW1lLCBmaWxlc09yQmxvYnMpe1xuICAgIGxldCBpbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyh0aGlzLmVsKS5maWx0ZXIoZWwgPT4gZWwubmFtZSA9PT0gbmFtZSlcbiAgICBpZihpbnB1dHMubGVuZ3RoID09PSAwKXsgbG9nRXJyb3IoYG5vIGxpdmUgZmlsZSBpbnB1dHMgZm91bmQgbWF0Y2hpbmcgdGhlIG5hbWUgXCIke25hbWV9XCJgKSB9XG4gICAgZWxzZSBpZihpbnB1dHMubGVuZ3RoID4gMSl7IGxvZ0Vycm9yKGBkdXBsaWNhdGUgbGl2ZSBmaWxlIGlucHV0cyBmb3VuZCBtYXRjaGluZyB0aGUgbmFtZSBcIiR7bmFtZX1cImApIH1cbiAgICBlbHNlIHsgRE9NLmRpc3BhdGNoRXZlbnQoaW5wdXRzWzBdLCBQSFhfVFJBQ0tfVVBMT0FEUywge2RldGFpbDoge2ZpbGVzOiBmaWxlc09yQmxvYnN9fSkgfVxuICB9XG5cbiAgcHVzaEZvcm1SZWNvdmVyeShmb3JtLCBuZXdDaWQsIGNhbGxiYWNrKXtcbiAgICB0aGlzLmxpdmVTb2NrZXQud2l0aGluT3duZXJzKGZvcm0sICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIGxldCBpbnB1dCA9IEFycmF5LmZyb20oZm9ybS5lbGVtZW50cykuZmluZChlbCA9PiB7XG4gICAgICAgIHJldHVybiBET00uaXNGb3JtSW5wdXQoZWwpICYmIGVsLnR5cGUgIT09IFwiaGlkZGVuXCIgJiYgIWVsLmhhc0F0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpXG4gICAgICB9KVxuICAgICAgbGV0IHBoeEV2ZW50ID0gZm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9BVVRPX1JFQ09WRVIpKSB8fCBmb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpXG5cbiAgICAgIEpTLmV4ZWMoXCJjaGFuZ2VcIiwgcGh4RXZlbnQsIHZpZXcsIGlucHV0LCBbXCJwdXNoXCIsIHtfdGFyZ2V0OiBpbnB1dC5uYW1lLCBuZXdDaWQ6IG5ld0NpZCwgY2FsbGJhY2s6IGNhbGxiYWNrfV0pXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hMaW5rUGF0Y2goaHJlZiwgdGFyZ2V0RWwsIGNhbGxiYWNrKXtcbiAgICBsZXQgbGlua1JlZiA9IHRoaXMubGl2ZVNvY2tldC5zZXRQZW5kaW5nTGluayhocmVmKVxuICAgIGxldCByZWZHZW4gPSB0YXJnZXRFbCA/ICgpID0+IHRoaXMucHV0UmVmKFt0YXJnZXRFbF0sIFwiY2xpY2tcIikgOiBudWxsXG4gICAgbGV0IGZhbGxiYWNrID0gKCkgPT4gdGhpcy5saXZlU29ja2V0LnJlZGlyZWN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuXG4gICAgbGV0IHB1c2ggPSB0aGlzLnB1c2hXaXRoUmVwbHkocmVmR2VuLCBcImxpdmVfcGF0Y2hcIiwge3VybDogaHJlZn0sIHJlc3AgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBpZihyZXNwLmxpbmtfcmVkaXJlY3Qpe1xuICAgICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXBsYWNlTWFpbihocmVmLCBudWxsLCBjYWxsYmFjaywgbGlua1JlZilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZih0aGlzLmxpdmVTb2NrZXQuY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZikpe1xuICAgICAgICAgICAgdGhpcy5ocmVmID0gaHJlZlxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmFwcGx5UGVuZGluZ1VwZGF0ZXMoKVxuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGxpbmtSZWYpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGlmKHB1c2gpe1xuICAgICAgcHVzaC5yZWNlaXZlKFwidGltZW91dFwiLCBmYWxsYmFjaylcbiAgICB9IGVsc2Uge1xuICAgICAgZmFsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIGZvcm1zRm9yUmVjb3ZlcnkoaHRtbCl7XG4gICAgaWYodGhpcy5qb2luQ291bnQgPT09IDApeyByZXR1cm4gW10gfVxuXG4gICAgbGV0IHBoeENoYW5nZSA9IHRoaXMuYmluZGluZyhcImNoYW5nZVwiKVxuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcblxuICAgIHJldHVybiAoXG4gICAgICBET00uYWxsKHRoaXMuZWwsIGBmb3JtWyR7cGh4Q2hhbmdlfV1gKVxuICAgICAgICAuZmlsdGVyKGZvcm0gPT4gZm9ybS5pZCAmJiB0aGlzLm93bnNFbGVtZW50KGZvcm0pKVxuICAgICAgICAuZmlsdGVyKGZvcm0gPT4gZm9ybS5lbGVtZW50cy5sZW5ndGggPiAwKVxuICAgICAgICAuZmlsdGVyKGZvcm0gPT4gZm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9BVVRPX1JFQ09WRVIpKSAhPT0gXCJpZ25vcmVcIilcbiAgICAgICAgLm1hcChmb3JtID0+IHtcbiAgICAgICAgICBsZXQgbmV3Rm9ybSA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvcihgZm9ybVtpZD1cIiR7Zm9ybS5pZH1cIl1bJHtwaHhDaGFuZ2V9PVwiJHtmb3JtLmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpfVwiXWApXG4gICAgICAgICAgaWYobmV3Rm9ybSl7XG4gICAgICAgICAgICByZXR1cm4gW2Zvcm0sIG5ld0Zvcm0sIHRoaXMudGFyZ2V0Q29tcG9uZW50SUQobmV3Rm9ybSldXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybSwgbnVsbCwgbnVsbF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5maWx0ZXIoKFtmb3JtLCBuZXdGb3JtLCBuZXdDaWRdKSA9PiBuZXdGb3JtKVxuICAgIClcbiAgfVxuXG4gIG1heWJlUHVzaENvbXBvbmVudHNEZXN0cm95ZWQoZGVzdHJveWVkQ0lEcyl7XG4gICAgbGV0IHdpbGxEZXN0cm95Q0lEcyA9IGRlc3Ryb3llZENJRHMuZmlsdGVyKGNpZCA9PiB7XG4gICAgICByZXR1cm4gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmVsLCBjaWQpLmxlbmd0aCA9PT0gMFxuICAgIH0pXG4gICAgaWYod2lsbERlc3Ryb3lDSURzLmxlbmd0aCA+IDApe1xuICAgICAgdGhpcy5wcnVuaW5nQ0lEcy5wdXNoKC4uLndpbGxEZXN0cm95Q0lEcylcblxuICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KG51bGwsIFwiY2lkc193aWxsX2Rlc3Ryb3lcIiwge2NpZHM6IHdpbGxEZXN0cm95Q0lEc30sICgpID0+IHtcbiAgICAgICAgLy8gVGhlIGNpZHMgYXJlIGVpdGhlciBiYWNrIG9uIHRoZSBwYWdlIG9yIHRoZXkgd2lsbCBiZSBmdWxseSByZW1vdmVkLFxuICAgICAgICAvLyBzbyB3ZSBjYW4gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgcHJ1bmluZ0NJRHMuXG4gICAgICAgIHRoaXMucHJ1bmluZ0NJRHMgPSB0aGlzLnBydW5pbmdDSURzLmZpbHRlcihjaWQgPT4gd2lsbERlc3Ryb3lDSURzLmluZGV4T2YoY2lkKSAhPT0gLTEpXG5cbiAgICAgICAgLy8gU2VlIGlmIGFueSBvZiB0aGUgY2lkcyB3ZSB3YW50ZWQgdG8gZGVzdHJveSB3ZXJlIGFkZGVkIGJhY2ssXG4gICAgICAgIC8vIGlmIHRoZXkgd2VyZSBhZGRlZCBiYWNrLCB3ZSBkb24ndCBhY3R1YWxseSBkZXN0cm95IHRoZW0uXG4gICAgICAgIGxldCBjb21wbGV0ZWx5RGVzdHJveUNJRHMgPSB3aWxsRGVzdHJveUNJRHMuZmlsdGVyKGNpZCA9PiB7XG4gICAgICAgICAgcmV0dXJuIERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgY2lkKS5sZW5ndGggPT09IDBcbiAgICAgICAgfSlcblxuICAgICAgICBpZihjb21wbGV0ZWx5RGVzdHJveUNJRHMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KG51bGwsIFwiY2lkc19kZXN0cm95ZWRcIiwge2NpZHM6IGNvbXBsZXRlbHlEZXN0cm95Q0lEc30sIChyZXNwKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkLnBydW5lQ0lEcyhyZXNwLmNpZHMpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBvd25zRWxlbWVudChlbCl7XG4gICAgbGV0IHBhcmVudFZpZXdFbCA9IGVsLmNsb3Nlc3QoUEhYX1ZJRVdfU0VMRUNUT1IpXG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lEKSA9PT0gdGhpcy5pZCB8fFxuICAgICAgKHBhcmVudFZpZXdFbCAmJiBwYXJlbnRWaWV3RWwuaWQgPT09IHRoaXMuaWQpIHx8XG4gICAgICAoIXBhcmVudFZpZXdFbCAmJiB0aGlzLmlzRGVhZClcbiAgfVxuXG4gIHN1Ym1pdEZvcm0oZm9ybSwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgb3B0cyA9IHt9KXtcbiAgICBET00ucHV0UHJpdmF0ZShmb3JtLCBQSFhfSEFTX1NVQk1JVFRFRCwgdHJ1ZSlcbiAgICBsZXQgcGh4RmVlZGJhY2sgPSB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhQSFhfRkVFREJBQ0tfRk9SKVxuICAgIGxldCBpbnB1dHMgPSBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpXG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4gRE9NLnB1dFByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVELCB0cnVlKSlcbiAgICB0aGlzLmxpdmVTb2NrZXQuYmx1ckFjdGl2ZUVsZW1lbnQodGhpcylcbiAgICB0aGlzLnB1c2hGb3JtU3VibWl0KGZvcm0sIHRhcmdldEN0eCwgcGh4RXZlbnQsIG9wdHMsICgpID0+IHtcbiAgICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IERPTS5zaG93RXJyb3IoaW5wdXQsIHBoeEZlZWRiYWNrKSlcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXN0b3JlUHJldmlvdXNseUFjdGl2ZUZvY3VzKClcbiAgICB9KVxuICB9XG5cbiAgYmluZGluZyhraW5kKXsgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKGtpbmQpIH1cbn1cbiIsICIvKiogSW5pdGlhbGl6ZXMgdGhlIExpdmVTb2NrZXRcbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGVuZFBvaW50IC0gVGhlIHN0cmluZyBXZWJTb2NrZXQgZW5kcG9pbnQsIGllLCBgXCJ3c3M6Ly9leGFtcGxlLmNvbS9saXZlXCJgLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcIi9saXZlXCJgIChpbmhlcml0ZWQgaG9zdCAmIHByb3RvY29sKVxuICogQHBhcmFtIHtQaG9lbml4LlNvY2tldH0gc29ja2V0IC0gdGhlIHJlcXVpcmVkIFBob2VuaXggU29ja2V0IGNsYXNzIGltcG9ydGVkIGZyb20gXCJwaG9lbml4XCIuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICBpbXBvcnQge1NvY2tldH0gZnJvbSBcInBob2VuaXhcIlxuICogICAgIGltcG9ydCB7TGl2ZVNvY2tldH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcbiAqICAgICBsZXQgbGl2ZVNvY2tldCA9IG5ldyBMaXZlU29ja2V0KFwiL2xpdmVcIiwgU29ja2V0LCB7Li4ufSlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHNdIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbi4gT3V0c2lkZSBvZiBrZXlzIGxpc3RlZCBiZWxvdywgYWxsXG4gKiBjb25maWd1cmF0aW9uIGlzIHBhc3NlZCBkaXJlY3RseSB0byB0aGUgUGhvZW5peCBTb2NrZXQgY29uc3RydWN0b3IuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMuZGVmYXVsdHNdIC0gVGhlIG9wdGlvbmFsIGRlZmF1bHRzIHRvIHVzZSBmb3IgdmFyaW91cyBiaW5kaW5ncyxcbiAqIHN1Y2ggYXMgYHBoeC1kZWJvdW5jZWAuIFN1cHBvcnRzIHRoZSBmb2xsb3dpbmcga2V5czpcbiAqXG4gKiAgIC0gZGVib3VuY2UgLSB0aGUgbWlsbGlzZWNvbmQgcGh4LWRlYm91bmNlIHRpbWUuIERlZmF1bHRzIDMwMFxuICogICAtIHRocm90dGxlIC0gdGhlIG1pbGxpc2Vjb25kIHBoeC10aHJvdHRsZSB0aW1lLiBEZWZhdWx0cyAzMDBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5wYXJhbXNdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIGZvciBwYXNzaW5nIGNvbm5lY3QgcGFyYW1zLlxuICogVGhlIGZ1bmN0aW9uIHJlY2VpdmVzIHRoZSBlbGVtZW50IGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIExpdmVWaWV3LiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgKGVsKSA9PiB7dmlldzogZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1teS12aWV3LW5hbWVcIiwgdG9rZW46IHdpbmRvdy5teVRva2VufVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5iaW5kaW5nUHJlZml4XSAtIFRoZSBvcHRpb25hbCBwcmVmaXggdG8gdXNlIGZvciBhbGwgcGh4IERPTSBhbm5vdGF0aW9ucy5cbiAqIERlZmF1bHRzIHRvIFwicGh4LVwiLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLmhvb2tzXSAtIFRoZSBvcHRpb25hbCBvYmplY3QgZm9yIHJlZmVyZW5jaW5nIExpdmVWaWV3IGhvb2sgY2FsbGJhY2tzLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLnVwbG9hZGVyc10gLSBUaGUgb3B0aW9uYWwgb2JqZWN0IGZvciByZWZlcmVuY2luZyBMaXZlVmlldyB1cGxvYWRlciBjYWxsYmFja3MuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLmxvYWRlclRpbWVvdXRdIC0gVGhlIG9wdGlvbmFsIGRlbGF5IGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBhcHBseVxuICogbG9hZGluZyBzdGF0ZXMuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLm1heFJlbG9hZHNdIC0gVGhlIG1heGltdW0gcmVsb2FkcyBiZWZvcmUgZW50ZXJpbmcgZmFpbHNhZmUgbW9kZS5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMucmVsb2FkSml0dGVyTWluXSAtIFRoZSBtaW5pbXVtIHRpbWUgYmV0d2VlbiBub3JtYWwgcmVsb2FkIGF0dGVtcHRzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5yZWxvYWRKaXR0ZXJNYXhdIC0gVGhlIG1heGltdW0gdGltZSBiZXR3ZWVuIG5vcm1hbCByZWxvYWQgYXR0ZW1wdHMuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLmZhaWxzYWZlSml0dGVyXSAtIFRoZSB0aW1lIGJldHdlZW4gcmVsb2FkIGF0dGVtcHRzIGluIGZhaWxzYWZlIG1vZGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy52aWV3TG9nZ2VyXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiB0byBsb2cgZGVidWcgaW5mb3JtYXRpb24uIEZvciBleGFtcGxlOlxuICpcbiAqICAgICAodmlldywga2luZCwgbXNnLCBvYmopID0+IGNvbnNvbGUubG9nKGAke3ZpZXcuaWR9ICR7a2luZH06ICR7bXNnfSAtIGAsIG9iailcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMubWV0YWRhdGFdIC0gVGhlIG9wdGlvbmFsIG9iamVjdCBtYXBwaW5nIGV2ZW50IG5hbWVzIHRvIGZ1bmN0aW9ucyBmb3JcbiAqIHBvcHVsYXRpbmcgZXZlbnQgbWV0YWRhdGEuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICBtZXRhZGF0YToge1xuICogICAgICAgY2xpY2s6IChlLCBlbCkgPT4ge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIGN0cmxLZXk6IGUuY3RybEtleSxcbiAqICAgICAgICAgICBtZXRhS2V5OiBlLm1ldGFLZXksXG4gKiAgICAgICAgICAgZGV0YWlsOiBlLmRldGFpbCB8fCAxLFxuICogICAgICAgICB9XG4gKiAgICAgICB9LFxuICogICAgICAga2V5ZG93bjogKGUsIGVsKSA9PiB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAga2V5OiBlLmtleSxcbiAqICAgICAgICAgICBjdHJsS2V5OiBlLmN0cmxLZXksXG4gKiAgICAgICAgICAgbWV0YUtleTogZS5tZXRhS2V5LFxuICogICAgICAgICAgIHNoaWZ0S2V5OiBlLnNoaWZ0S2V5XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMuc2Vzc2lvblN0b3JhZ2VdIC0gQW4gb3B0aW9uYWwgU3RvcmFnZSBjb21wYXRpYmxlIG9iamVjdFxuICogVXNlZnVsIHdoZW4gTGl2ZVZpZXcgd29uJ3QgaGF2ZSBhY2Nlc3MgdG8gYHNlc3Npb25TdG9yYWdlYC4gIEZvciBleGFtcGxlLCBUaGlzIGNvdWxkXG4gKiBoYXBwZW4gaWYgYSBzaXRlIGxvYWRzIGEgY3Jvc3MtZG9tYWluIExpdmVWaWV3IGluIGFuIGlmcmFtZS4gIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogICAgIGNsYXNzIEluTWVtb3J5U3RvcmFnZSB7XG4gKiAgICAgICBjb25zdHJ1Y3RvcigpIHsgdGhpcy5zdG9yYWdlID0ge30gfVxuICogICAgICAgZ2V0SXRlbShrZXlOYW1lKSB7IHJldHVybiB0aGlzLnN0b3JhZ2Vba2V5TmFtZV0gfHwgbnVsbCB9XG4gKiAgICAgICByZW1vdmVJdGVtKGtleU5hbWUpIHsgZGVsZXRlIHRoaXMuc3RvcmFnZVtrZXlOYW1lXSB9XG4gKiAgICAgICBzZXRJdGVtKGtleU5hbWUsIGtleVZhbHVlKSB7IHRoaXMuc3RvcmFnZVtrZXlOYW1lXSA9IGtleVZhbHVlIH1cbiAqICAgICB9XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLmxvY2FsU3RvcmFnZV0gLSBBbiBvcHRpb25hbCBTdG9yYWdlIGNvbXBhdGlibGUgb2JqZWN0XG4gKiBVc2VmdWwgZm9yIHdoZW4gTGl2ZVZpZXcgd29uJ3QgaGF2ZSBhY2Nlc3MgdG8gYGxvY2FsU3RvcmFnZWAuXG4gKiBTZWUgYG9wdHMuc2Vzc2lvblN0b3JhZ2VgIGZvciBleGFtcGxlcy5cbiovXG5cbmltcG9ydCB7XG4gIEJJTkRJTkdfUFJFRklYLFxuICBDT05TRUNVVElWRV9SRUxPQURTLFxuICBERUZBVUxUUyxcbiAgRkFJTFNBRkVfSklUVEVSLFxuICBMT0FERVJfVElNRU9VVCxcbiAgTUFYX1JFTE9BRFMsXG4gIFBIWF9ERUJPVU5DRSxcbiAgUEhYX0RST1BfVEFSR0VULFxuICBQSFhfSEFTX0ZPQ1VTRUQsXG4gIFBIWF9LRVksXG4gIFBIWF9MSU5LX1NUQVRFLFxuICBQSFhfTElWRV9MSU5LLFxuICBQSFhfTFZfREVCVUcsXG4gIFBIWF9MVl9MQVRFTkNZX1NJTSxcbiAgUEhYX0xWX1BST0ZJTEUsXG4gIFBIWF9NQUlOLFxuICBQSFhfUEFSRU5UX0lELFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9USFJPVFRMRSxcbiAgUEhYX1RSQUNLX1VQTE9BRFMsXG4gIFBIWF9TRVNTSU9OLFxuICBQSFhfRkVFREJBQ0tfRk9SLFxuICBSRUxPQURfSklUVEVSX01JTixcbiAgUkVMT0FEX0pJVFRFUl9NQVgsXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb25lLFxuICBjbG9zZXN0UGh4QmluZGluZyxcbiAgY2xvc3VyZSxcbiAgZGVidWcsXG4gIGlzT2JqZWN0LFxuICBtYXliZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBCcm93c2VyIGZyb20gXCIuL2Jyb3dzZXJcIlxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuaW1wb3J0IEhvb2tzIGZyb20gXCIuL2hvb2tzXCJcbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5pbXBvcnQgVmlldyBmcm9tIFwiLi92aWV3XCJcbmltcG9ydCBKUyBmcm9tIFwiLi9qc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpdmVTb2NrZXQge1xuICBjb25zdHJ1Y3Rvcih1cmwsIHBoeFNvY2tldCwgb3B0cyA9IHt9KXtcbiAgICB0aGlzLnVubG9hZGVkID0gZmFsc2VcbiAgICBpZighcGh4U29ja2V0IHx8IHBoeFNvY2tldC5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIk9iamVjdFwiKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXG4gICAgICBhIHBob2VuaXggU29ja2V0IG11c3QgYmUgcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byB0aGUgTGl2ZVNvY2tldCBjb25zdHJ1Y3Rvci4gRm9yIGV4YW1wbGU6XG5cbiAgICAgICAgICBpbXBvcnQge1NvY2tldH0gZnJvbSBcInBob2VuaXhcIlxuICAgICAgICAgIGltcG9ydCB7TGl2ZVNvY2tldH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcbiAgICAgICAgICBsZXQgbGl2ZVNvY2tldCA9IG5ldyBMaXZlU29ja2V0KFwiL2xpdmVcIiwgU29ja2V0LCB7Li4ufSlcbiAgICAgIGApXG4gICAgfVxuICAgIHRoaXMuc29ja2V0ID0gbmV3IHBoeFNvY2tldCh1cmwsIG9wdHMpXG4gICAgdGhpcy5iaW5kaW5nUHJlZml4ID0gb3B0cy5iaW5kaW5nUHJlZml4IHx8IEJJTkRJTkdfUFJFRklYXG4gICAgdGhpcy5vcHRzID0gb3B0c1xuICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShvcHRzLnBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLnZpZXdMb2dnZXIgPSBvcHRzLnZpZXdMb2dnZXJcbiAgICB0aGlzLm1ldGFkYXRhQ2FsbGJhY2tzID0gb3B0cy5tZXRhZGF0YSB8fCB7fVxuICAgIHRoaXMuZGVmYXVsdHMgPSBPYmplY3QuYXNzaWduKGNsb25lKERFRkFVTFRTKSwgb3B0cy5kZWZhdWx0cyB8fCB7fSlcbiAgICB0aGlzLmFjdGl2ZUVsZW1lbnQgPSBudWxsXG4gICAgdGhpcy5wcmV2QWN0aXZlID0gbnVsbFxuICAgIHRoaXMuc2lsZW5jZWQgPSBmYWxzZVxuICAgIHRoaXMubWFpbiA9IG51bGxcbiAgICB0aGlzLm91dGdvaW5nTWFpbkVsID0gbnVsbFxuICAgIHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBudWxsXG4gICAgdGhpcy5saW5rUmVmID0gMVxuICAgIHRoaXMucm9vdHMgPSB7fVxuICAgIHRoaXMuaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgdGhpcy5wZW5kaW5nTGluayA9IG51bGxcbiAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGNsb25lKHdpbmRvdy5sb2NhdGlvbilcbiAgICB0aGlzLmhvb2tzID0gb3B0cy5ob29rcyB8fCB7fVxuICAgIHRoaXMudXBsb2FkZXJzID0gb3B0cy51cGxvYWRlcnMgfHwge31cbiAgICB0aGlzLmxvYWRlclRpbWVvdXQgPSBvcHRzLmxvYWRlclRpbWVvdXQgfHwgTE9BREVSX1RJTUVPVVRcbiAgICB0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lciA9IG51bGxcbiAgICB0aGlzLm1heFJlbG9hZHMgPSBvcHRzLm1heFJlbG9hZHMgfHwgTUFYX1JFTE9BRFNcbiAgICB0aGlzLnJlbG9hZEppdHRlck1pbiA9IG9wdHMucmVsb2FkSml0dGVyTWluIHx8IFJFTE9BRF9KSVRURVJfTUlOXG4gICAgdGhpcy5yZWxvYWRKaXR0ZXJNYXggPSBvcHRzLnJlbG9hZEppdHRlck1heCB8fCBSRUxPQURfSklUVEVSX01BWFxuICAgIHRoaXMuZmFpbHNhZmVKaXR0ZXIgPSBvcHRzLmZhaWxzYWZlSml0dGVyIHx8IEZBSUxTQUZFX0pJVFRFUlxuICAgIHRoaXMubG9jYWxTdG9yYWdlID0gb3B0cy5sb2NhbFN0b3JhZ2UgfHwgd2luZG93LmxvY2FsU3RvcmFnZVxuICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2UgPSBvcHRzLnNlc3Npb25TdG9yYWdlIHx8IHdpbmRvdy5zZXNzaW9uU3RvcmFnZVxuICAgIHRoaXMuYm91bmRUb3BMZXZlbEV2ZW50cyA9IGZhbHNlXG4gICAgdGhpcy5kb21DYWxsYmFja3MgPSBPYmplY3QuYXNzaWduKHtvbk5vZGVBZGRlZDogY2xvc3VyZSgpLCBvbkJlZm9yZUVsVXBkYXRlZDogY2xvc3VyZSgpfSwgb3B0cy5kb20gfHwge30pXG4gICAgdGhpcy50cmFuc2l0aW9ucyA9IG5ldyBUcmFuc2l0aW9uU2V0KClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9lID0+IHtcbiAgICAgIHRoaXMudW5sb2FkZWQgPSB0cnVlXG4gICAgfSlcbiAgICB0aGlzLnNvY2tldC5vbk9wZW4oKCkgPT4ge1xuICAgICAgaWYodGhpcy5pc1VubG9hZGVkKCkpe1xuICAgICAgICAvLyByZWxvYWQgcGFnZSBpZiBiZWluZyByZXN0b3JlZCBmcm9tIGJhY2svZm9yd2FyZCBjYWNoZSBhbmQgYnJvd3NlciBkb2VzIG5vdCBlbWl0IFwicGFnZXNob3dcIlxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gcHVibGljXG5cbiAgaXNQcm9maWxlRW5hYmxlZCgpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9QUk9GSUxFKSA9PT0gXCJ0cnVlXCIgfVxuXG4gIGlzRGVidWdFbmFibGVkKCl7IHJldHVybiB0aGlzLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX0RFQlVHKSA9PT0gXCJ0cnVlXCIgfVxuXG4gIGlzRGVidWdEaXNhYmxlZCgpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9ERUJVRykgPT09IFwiZmFsc2VcIiB9XG5cbiAgZW5hYmxlRGVidWcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9ERUJVRywgXCJ0cnVlXCIpIH1cblxuICBlbmFibGVQcm9maWxpbmcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9QUk9GSUxFLCBcInRydWVcIikgfVxuXG4gIGRpc2FibGVEZWJ1ZygpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX0RFQlVHLCBcImZhbHNlXCIpIH1cblxuICBkaXNhYmxlUHJvZmlsaW5nKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShQSFhfTFZfUFJPRklMRSkgfVxuXG4gIGVuYWJsZUxhdGVuY3lTaW0odXBwZXJCb3VuZE1zKXtcbiAgICB0aGlzLmVuYWJsZURlYnVnKClcbiAgICBjb25zb2xlLmxvZyhcImxhdGVuY3kgc2ltdWxhdG9yIGVuYWJsZWQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGlzIGJyb3dzZXIgc2Vzc2lvbi4gQ2FsbCBkaXNhYmxlTGF0ZW5jeVNpbSgpIHRvIGRpc2FibGVcIilcbiAgICB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX0xBVEVOQ1lfU0lNLCB1cHBlckJvdW5kTXMpXG4gIH1cblxuICBkaXNhYmxlTGF0ZW5jeVNpbSgpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oUEhYX0xWX0xBVEVOQ1lfU0lNKSB9XG5cbiAgZ2V0TGF0ZW5jeVNpbSgpe1xuICAgIGxldCBzdHIgPSB0aGlzLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX0xBVEVOQ1lfU0lNKVxuICAgIHJldHVybiBzdHIgPyBwYXJzZUludChzdHIpIDogbnVsbFxuICB9XG5cbiAgZ2V0U29ja2V0KCl7IHJldHVybiB0aGlzLnNvY2tldCB9XG5cbiAgY29ubmVjdCgpe1xuICAgIC8vIGVuYWJsZSBkZWJ1ZyBieSBkZWZhdWx0IGlmIG9uIGxvY2FsaG9zdCBhbmQgbm90IGV4cGxpY2l0bHkgZGlzYWJsZWRcbiAgICBpZih3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09IFwibG9jYWxob3N0XCIgJiYgIXRoaXMuaXNEZWJ1Z0Rpc2FibGVkKCkpeyB0aGlzLmVuYWJsZURlYnVnKCkgfVxuICAgIGxldCBkb0Nvbm5lY3QgPSAoKSA9PiB7XG4gICAgICBpZih0aGlzLmpvaW5Sb290Vmlld3MoKSl7XG4gICAgICAgIHRoaXMuYmluZFRvcExldmVsRXZlbnRzKClcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpXG4gICAgICB9IGVsc2UgaWYodGhpcy5tYWluKXtcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJpbmRUb3BMZXZlbEV2ZW50cyh7ZGVhZDogdHJ1ZX0pXG4gICAgICB9XG4gICAgICB0aGlzLmpvaW5EZWFkVmlldygpXG4gICAgfVxuICAgIGlmKFtcImNvbXBsZXRlXCIsIFwibG9hZGVkXCIsIFwiaW50ZXJhY3RpdmVcIl0uaW5kZXhPZihkb2N1bWVudC5yZWFkeVN0YXRlKSA+PSAwKXtcbiAgICAgIGRvQ29ubmVjdCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IGRvQ29ubmVjdCgpKVxuICAgIH1cbiAgfVxuXG4gIGRpc2Nvbm5lY3QoY2FsbGJhY2spe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KGNhbGxiYWNrKVxuICB9XG5cbiAgcmVwbGFjZVRyYW5zcG9ydCh0cmFuc3BvcnQpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLnNvY2tldC5yZXBsYWNlVHJhbnNwb3J0KHRyYW5zcG9ydClcbiAgICB0aGlzLmNvbm5lY3QoKVxuICB9XG5cbiAgZXhlY0pTKGVsLCBlbmNvZGVkSlMsIGV2ZW50VHlwZSA9IG51bGwpe1xuICAgIHRoaXMub3duZXIoZWwsIHZpZXcgPT4gSlMuZXhlYyhldmVudFR5cGUsIGVuY29kZWRKUywgdmlldywgZWwpKVxuICB9XG5cbiAgLy8gcHJpdmF0ZVxuXG4gIHVubG9hZCgpe1xuICAgIGlmKHRoaXMudW5sb2FkZWQpeyByZXR1cm4gfVxuICAgIGlmKHRoaXMubWFpbiAmJiB0aGlzLmlzQ29ubmVjdGVkKCkpeyB0aGlzLmxvZyh0aGlzLm1haW4sIFwic29ja2V0XCIsICgpID0+IFtcImRpc2Nvbm5lY3QgZm9yIHBhZ2UgbmF2XCJdKSB9XG4gICAgdGhpcy51bmxvYWRlZCA9IHRydWVcbiAgICB0aGlzLmRlc3Ryb3lBbGxWaWV3cygpXG4gICAgdGhpcy5kaXNjb25uZWN0KClcbiAgfVxuXG4gIHRyaWdnZXJET00oa2luZCwgYXJncyl7IHRoaXMuZG9tQ2FsbGJhY2tzW2tpbmRdKC4uLmFyZ3MpIH1cblxuICB0aW1lKG5hbWUsIGZ1bmMpe1xuICAgIGlmKCF0aGlzLmlzUHJvZmlsZUVuYWJsZWQoKSB8fCAhY29uc29sZS50aW1lKXsgcmV0dXJuIGZ1bmMoKSB9XG4gICAgY29uc29sZS50aW1lKG5hbWUpXG4gICAgbGV0IHJlc3VsdCA9IGZ1bmMoKVxuICAgIGNvbnNvbGUudGltZUVuZChuYW1lKVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGxvZyh2aWV3LCBraW5kLCBtc2dDYWxsYmFjayl7XG4gICAgaWYodGhpcy52aWV3TG9nZ2VyKXtcbiAgICAgIGxldCBbbXNnLCBvYmpdID0gbXNnQ2FsbGJhY2soKVxuICAgICAgdGhpcy52aWV3TG9nZ2VyKHZpZXcsIGtpbmQsIG1zZywgb2JqKVxuICAgIH0gZWxzZSBpZih0aGlzLmlzRGVidWdFbmFibGVkKCkpe1xuICAgICAgbGV0IFttc2csIG9ial0gPSBtc2dDYWxsYmFjaygpXG4gICAgICBkZWJ1Zyh2aWV3LCBraW5kLCBtc2csIG9iailcbiAgICB9XG4gIH1cblxuICByZXF1ZXN0RE9NVXBkYXRlKGNhbGxiYWNrKXtcbiAgICB0aGlzLnRyYW5zaXRpb25zLmFmdGVyKGNhbGxiYWNrKVxuICB9XG5cbiAgdHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUgPSBmdW5jdGlvbigpe30pe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuYWRkVHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpXG4gIH1cblxuICBvbkNoYW5uZWwoY2hhbm5lbCwgZXZlbnQsIGNiKXtcbiAgICBjaGFubmVsLm9uKGV2ZW50LCBkYXRhID0+IHtcbiAgICAgIGxldCBsYXRlbmN5ID0gdGhpcy5nZXRMYXRlbmN5U2ltKClcbiAgICAgIGlmKCFsYXRlbmN5KXtcbiAgICAgICAgY2IoZGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gY2IoZGF0YSksIGxhdGVuY3kpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHdyYXBQdXNoKHZpZXcsIG9wdHMsIHB1c2gpe1xuICAgIGxldCBsYXRlbmN5ID0gdGhpcy5nZXRMYXRlbmN5U2ltKClcbiAgICBsZXQgb2xkSm9pbkNvdW50ID0gdmlldy5qb2luQ291bnRcbiAgICBpZighbGF0ZW5jeSl7XG4gICAgICBpZih0aGlzLmlzQ29ubmVjdGVkKCkgJiYgb3B0cy50aW1lb3V0KXtcbiAgICAgICAgcmV0dXJuIHB1c2goKS5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiB7XG4gICAgICAgICAgaWYodmlldy5qb2luQ291bnQgPT09IG9sZEpvaW5Db3VudCAmJiAhdmlldy5pc0Rlc3Ryb3llZCgpKXtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkV2l0aEppdHRlcih2aWV3LCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMubG9nKHZpZXcsIFwidGltZW91dFwiLCAoKSA9PiBbXCJyZWNlaXZlZCB0aW1lb3V0IHdoaWxlIGNvbW11bmljYXRpbmcgd2l0aCBzZXJ2ZXIuIEZhbGxpbmcgYmFjayB0byBoYXJkIHJlZnJlc2ggZm9yIHJlY292ZXJ5XCJdKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcHVzaCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGZha2VQdXNoID0ge1xuICAgICAgcmVjZWl2ZXM6IFtdLFxuICAgICAgcmVjZWl2ZShraW5kLCBjYil7IHRoaXMucmVjZWl2ZXMucHVzaChba2luZCwgY2JdKSB9XG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYodmlldy5pc0Rlc3Ryb3llZCgpKXsgcmV0dXJuIH1cbiAgICAgIGZha2VQdXNoLnJlY2VpdmVzLnJlZHVjZSgoYWNjLCBba2luZCwgY2JdKSA9PiBhY2MucmVjZWl2ZShraW5kLCBjYiksIHB1c2goKSlcbiAgICB9LCBsYXRlbmN5KVxuICAgIHJldHVybiBmYWtlUHVzaFxuICB9XG5cbiAgcmVsb2FkV2l0aEppdHRlcih2aWV3LCBsb2cpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICAgIGxldCBtaW5NcyA9IHRoaXMucmVsb2FkSml0dGVyTWluXG4gICAgbGV0IG1heE1zID0gdGhpcy5yZWxvYWRKaXR0ZXJNYXhcbiAgICBsZXQgYWZ0ZXJNcyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXhNcyAtIG1pbk1zICsgMSkpICsgbWluTXNcbiAgICBsZXQgdHJpZXMgPSBCcm93c2VyLnVwZGF0ZUxvY2FsKHRoaXMubG9jYWxTdG9yYWdlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIENPTlNFQ1VUSVZFX1JFTE9BRFMsIDAsIGNvdW50ID0+IGNvdW50ICsgMSlcbiAgICBpZih0cmllcyA+IHRoaXMubWF4UmVsb2Fkcyl7XG4gICAgICBhZnRlck1zID0gdGhpcy5mYWlsc2FmZUppdHRlclxuICAgIH1cbiAgICB0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gaWYgdmlldyBoYXMgcmVjb3ZlcmVkLCBzdWNoIGFzIHRyYW5zcG9ydCByZXBsYWNlZCwgdGhlbiBjYW5jZWxcbiAgICAgIGlmKHZpZXcuaXNEZXN0cm95ZWQoKSB8fCB2aWV3LmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfVxuICAgICAgdmlldy5kZXN0cm95KClcbiAgICAgIGxvZyA/IGxvZygpIDogdGhpcy5sb2codmlldywgXCJqb2luXCIsICgpID0+IFtgZW5jb3VudGVyZWQgJHt0cmllc30gY29uc2VjdXRpdmUgcmVsb2Fkc2BdKVxuICAgICAgaWYodHJpZXMgPiB0aGlzLm1heFJlbG9hZHMpe1xuICAgICAgICB0aGlzLmxvZyh2aWV3LCBcImpvaW5cIiwgKCkgPT4gW2BleGNlZWRlZCAke3RoaXMubWF4UmVsb2Fkc30gY29uc2VjdXRpdmUgcmVsb2Fkcy4gRW50ZXJpbmcgZmFpbHNhZmUgbW9kZWBdKVxuICAgICAgfVxuICAgICAgaWYodGhpcy5oYXNQZW5kaW5nTGluaygpKXtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gdGhpcy5wZW5kaW5nTGlua1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICB9XG4gICAgfSwgYWZ0ZXJNcylcbiAgfVxuXG4gIGdldEhvb2tDYWxsYmFja3MobmFtZSl7XG4gICAgcmV0dXJuIG5hbWUgJiYgbmFtZS5zdGFydHNXaXRoKFwiUGhvZW5peC5cIikgPyBIb29rc1tuYW1lLnNwbGl0KFwiLlwiKVsxXV0gOiB0aGlzLmhvb2tzW25hbWVdXG4gIH1cblxuICBpc1VubG9hZGVkKCl7IHJldHVybiB0aGlzLnVubG9hZGVkIH1cblxuICBpc0Nvbm5lY3RlZCgpeyByZXR1cm4gdGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSB9XG5cbiAgZ2V0QmluZGluZ1ByZWZpeCgpeyByZXR1cm4gdGhpcy5iaW5kaW5nUHJlZml4IH1cblxuICBiaW5kaW5nKGtpbmQpeyByZXR1cm4gYCR7dGhpcy5nZXRCaW5kaW5nUHJlZml4KCl9JHtraW5kfWAgfVxuXG4gIGNoYW5uZWwodG9waWMsIHBhcmFtcyl7IHJldHVybiB0aGlzLnNvY2tldC5jaGFubmVsKHRvcGljLCBwYXJhbXMpIH1cblxuICBqb2luRGVhZFZpZXcoKXtcbiAgICBsZXQgYm9keSA9IGRvY3VtZW50LmJvZHlcbiAgICBpZihib2R5ICYmICF0aGlzLmlzUGh4Vmlldyhib2R5KSAmJiAhdGhpcy5pc1BoeFZpZXcoZG9jdW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpKXtcbiAgICAgIGxldCB2aWV3ID0gdGhpcy5uZXdSb290Vmlldyhib2R5KVxuICAgICAgdmlldy5zZXRIcmVmKHRoaXMuZ2V0SHJlZigpKVxuICAgICAgdmlldy5qb2luRGVhZCgpXG4gICAgICBpZighdGhpcy5tYWluKXsgdGhpcy5tYWluID0gdmlldyB9XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHZpZXcuZXhlY05ld01vdW50ZWQoKSlcbiAgICB9XG4gIH1cblxuICBqb2luUm9vdFZpZXdzKCl7XG4gICAgbGV0IHJvb3RzRm91bmQgPSBmYWxzZVxuICAgIERPTS5hbGwoZG9jdW1lbnQsIGAke1BIWF9WSUVXX1NFTEVDVE9SfTpub3QoWyR7UEhYX1BBUkVOVF9JRH1dKWAsIHJvb3RFbCA9PiB7XG4gICAgICBpZighdGhpcy5nZXRSb290QnlJZChyb290RWwuaWQpKXtcbiAgICAgICAgbGV0IHZpZXcgPSB0aGlzLm5ld1Jvb3RWaWV3KHJvb3RFbClcbiAgICAgICAgdmlldy5zZXRIcmVmKHRoaXMuZ2V0SHJlZigpKVxuICAgICAgICB2aWV3LmpvaW4oKVxuICAgICAgICBpZihyb290RWwuaGFzQXR0cmlidXRlKFBIWF9NQUlOKSl7IHRoaXMubWFpbiA9IHZpZXcgfVxuICAgICAgfVxuICAgICAgcm9vdHNGb3VuZCA9IHRydWVcbiAgICB9KVxuICAgIHJldHVybiByb290c0ZvdW5kXG4gIH1cblxuICByZWRpcmVjdCh0bywgZmxhc2gpe1xuICAgIHRoaXMudW5sb2FkKClcbiAgICBCcm93c2VyLnJlZGlyZWN0KHRvLCBmbGFzaClcbiAgfVxuXG4gIHJlcGxhY2VNYWluKGhyZWYsIGZsYXNoLCBjYWxsYmFjayA9IG51bGwsIGxpbmtSZWYgPSB0aGlzLnNldFBlbmRpbmdMaW5rKGhyZWYpKXtcbiAgICBsZXQgbGl2ZVJlZmVyZXIgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbi5ocmVmXG4gICAgdGhpcy5vdXRnb2luZ01haW5FbCA9IHRoaXMub3V0Z29pbmdNYWluRWwgfHwgdGhpcy5tYWluLmVsXG4gICAgbGV0IG5ld01haW5FbCA9IERPTS5jbG9uZU5vZGUodGhpcy5vdXRnb2luZ01haW5FbCwgXCJcIilcbiAgICB0aGlzLm1haW4uc2hvd0xvYWRlcih0aGlzLmxvYWRlclRpbWVvdXQpXG4gICAgdGhpcy5tYWluLmRlc3Ryb3koKVxuXG4gICAgdGhpcy5tYWluID0gdGhpcy5uZXdSb290VmlldyhuZXdNYWluRWwsIGZsYXNoLCBsaXZlUmVmZXJlcilcbiAgICB0aGlzLm1haW4uc2V0UmVkaXJlY3QoaHJlZilcbiAgICB0aGlzLnRyYW5zaXRpb25SZW1vdmVzKClcbiAgICB0aGlzLm1haW4uam9pbigoam9pbkNvdW50LCBvbkRvbmUpID0+IHtcbiAgICAgIGlmKGpvaW5Db3VudCA9PT0gMSAmJiB0aGlzLmNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpKXtcbiAgICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgICBET00uZmluZFBoeFN0aWNreShkb2N1bWVudCkuZm9yRWFjaChlbCA9PiBuZXdNYWluRWwuYXBwZW5kQ2hpbGQoZWwpKVxuICAgICAgICAgIHRoaXMub3V0Z29pbmdNYWluRWwucmVwbGFjZVdpdGgobmV3TWFpbkVsKVxuICAgICAgICAgIHRoaXMub3V0Z29pbmdNYWluRWwgPSBudWxsXG4gICAgICAgICAgY2FsbGJhY2sgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKVxuICAgICAgICAgIG9uRG9uZSgpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRyYW5zaXRpb25SZW1vdmVzKGVsZW1lbnRzKXtcbiAgICBsZXQgcmVtb3ZlQXR0ciA9IHRoaXMuYmluZGluZyhcInJlbW92ZVwiKVxuICAgIGVsZW1lbnRzID0gZWxlbWVudHMgfHwgRE9NLmFsbChkb2N1bWVudCwgYFske3JlbW92ZUF0dHJ9XWApXG4gICAgZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBpZihkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKSl7IC8vIHNraXAgY2hpbGRyZW4gYWxyZWFkeSByZW1vdmVkXG4gICAgICAgIHRoaXMuZXhlY0pTKGVsLCBlbC5nZXRBdHRyaWJ1dGUocmVtb3ZlQXR0ciksIFwicmVtb3ZlXCIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGlzUGh4VmlldyhlbCl7IHJldHVybiBlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OKSAhPT0gbnVsbCB9XG5cbiAgbmV3Um9vdFZpZXcoZWwsIGZsYXNoLCBsaXZlUmVmZXJlcil7XG4gICAgbGV0IHZpZXcgPSBuZXcgVmlldyhlbCwgdGhpcywgbnVsbCwgZmxhc2gsIGxpdmVSZWZlcmVyKVxuICAgIHRoaXMucm9vdHNbdmlldy5pZF0gPSB2aWV3XG4gICAgcmV0dXJuIHZpZXdcbiAgfVxuXG4gIG93bmVyKGNoaWxkRWwsIGNhbGxiYWNrKXtcbiAgICBsZXQgdmlldyA9IG1heWJlKGNoaWxkRWwuY2xvc2VzdChQSFhfVklFV19TRUxFQ1RPUiksIGVsID0+IHRoaXMuZ2V0Vmlld0J5RWwoZWwpKSB8fCB0aGlzLm1haW5cbiAgICBpZih2aWV3KXsgY2FsbGJhY2sodmlldykgfVxuICB9XG5cbiAgd2l0aGluT3duZXJzKGNoaWxkRWwsIGNhbGxiYWNrKXtcbiAgICB0aGlzLm93bmVyKGNoaWxkRWwsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgY2hpbGRFbCkpXG4gIH1cblxuICBnZXRWaWV3QnlFbChlbCl7XG4gICAgbGV0IHJvb3RJZCA9IGVsLmdldEF0dHJpYnV0ZShQSFhfUk9PVF9JRClcbiAgICByZXR1cm4gbWF5YmUodGhpcy5nZXRSb290QnlJZChyb290SWQpLCByb290ID0+IHJvb3QuZ2V0RGVzY2VuZGVudEJ5RWwoZWwpKVxuICB9XG5cbiAgZ2V0Um9vdEJ5SWQoaWQpeyByZXR1cm4gdGhpcy5yb290c1tpZF0gfVxuXG4gIGRlc3Ryb3lBbGxWaWV3cygpe1xuICAgIGZvcihsZXQgaWQgaW4gdGhpcy5yb290cyl7XG4gICAgICB0aGlzLnJvb3RzW2lkXS5kZXN0cm95KClcbiAgICAgIGRlbGV0ZSB0aGlzLnJvb3RzW2lkXVxuICAgIH1cbiAgICB0aGlzLm1haW4gPSBudWxsXG4gIH1cblxuICBkZXN0cm95Vmlld0J5RWwoZWwpe1xuICAgIGxldCByb290ID0gdGhpcy5nZXRSb290QnlJZChlbC5nZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQpKVxuICAgIGlmKHJvb3QgJiYgcm9vdC5pZCA9PT0gZWwuaWQpe1xuICAgICAgcm9vdC5kZXN0cm95KClcbiAgICAgIGRlbGV0ZSB0aGlzLnJvb3RzW3Jvb3QuaWRdXG4gICAgfSBlbHNlIGlmKHJvb3Qpe1xuICAgICAgcm9vdC5kZXN0cm95RGVzY2VuZGVudChlbC5pZClcbiAgICB9XG4gIH1cblxuICBzZXRBY3RpdmVFbGVtZW50KHRhcmdldCl7XG4gICAgaWYodGhpcy5hY3RpdmVFbGVtZW50ID09PSB0YXJnZXQpeyByZXR1cm4gfVxuICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IHRhcmdldFxuICAgIGxldCBjYW5jZWwgPSAoKSA9PiB7XG4gICAgICBpZih0YXJnZXQgPT09IHRoaXMuYWN0aXZlRWxlbWVudCl7IHRoaXMuYWN0aXZlRWxlbWVudCA9IG51bGwgfVxuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMpXG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRoaXMpXG4gICAgfVxuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBjYW5jZWwpXG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBjYW5jZWwpXG4gIH1cblxuICBnZXRBY3RpdmVFbGVtZW50KCl7XG4gICAgaWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSl7XG4gICAgICByZXR1cm4gdGhpcy5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gYmUgbnVsbCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMVxuICAgICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keVxuICAgIH1cbiAgfVxuXG4gIGRyb3BBY3RpdmVFbGVtZW50KHZpZXcpe1xuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAmJiB2aWV3Lm93bnNFbGVtZW50KHRoaXMucHJldkFjdGl2ZSkpe1xuICAgICAgdGhpcy5wcmV2QWN0aXZlID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHJlc3RvcmVQcmV2aW91c2x5QWN0aXZlRm9jdXMoKXtcbiAgICBpZih0aGlzLnByZXZBY3RpdmUgJiYgdGhpcy5wcmV2QWN0aXZlICE9PSBkb2N1bWVudC5ib2R5KXtcbiAgICAgIHRoaXMucHJldkFjdGl2ZS5mb2N1cygpXG4gICAgfVxuICB9XG5cbiAgYmx1ckFjdGl2ZUVsZW1lbnQoKXtcbiAgICB0aGlzLnByZXZBY3RpdmUgPSB0aGlzLmdldEFjdGl2ZUVsZW1lbnQoKVxuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAhPT0gZG9jdW1lbnQuYm9keSl7IHRoaXMucHJldkFjdGl2ZS5ibHVyKCkgfVxuICB9XG5cbiAgYmluZFRvcExldmVsRXZlbnRzKHtkZWFkfSA9IHt9KXtcbiAgICBpZih0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHMpeyByZXR1cm4gfVxuXG4gICAgdGhpcy5ib3VuZFRvcExldmVsRXZlbnRzID0gdHJ1ZVxuICAgIC8vIGVudGVyIGZhaWxzYWZlIHJlbG9hZCBpZiBzZXJ2ZXIgaGFzIGdvbmUgYXdheSBpbnRlbnRpb25hbGx5LCBzdWNoIGFzIFwiZGlzY29ubmVjdFwiIGJyb2FkY2FzdFxuICAgIHRoaXMuc29ja2V0Lm9uQ2xvc2UoZXZlbnQgPT4ge1xuICAgICAgLy8gdW5sb2FkIHdoZW4gbmF2aWdhdGluZyBocmVmIG9yIGZvcm0gc3VibWl0IChzdWNoIGFzIGZvciBmaXJlZm94KVxuICAgICAgaWYoZXZlbnQgJiYgZXZlbnQuY29kZSA9PT0gMTAwMSl7IHJldHVybiB0aGlzLnVubG9hZCgpIH1cbiAgICAgIC8vIGZhaWxzYWZlIHJlbG9hZCBpZiBub3JtYWwgY2xvc3VyZSBhbmQgd2Ugc3RpbGwgaGF2ZSBhIG1haW4gTFZcbiAgICAgIGlmKGV2ZW50ICYmIGV2ZW50LmNvZGUgPT09IDEwMDAgJiYgdGhpcy5tYWluKXsgcmV0dXJuIHRoaXMucmVsb2FkV2l0aEppdHRlcih0aGlzLm1haW4pIH1cbiAgICB9KVxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpeyB9KSAvLyBlbnN1cmUgYWxsIGNsaWNrIGV2ZW50cyBidWJibGUgZm9yIG1vYmlsZSBTYWZhcmlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VzaG93XCIsIGUgPT4ge1xuICAgICAgaWYoZS5wZXJzaXN0ZWQpeyAvLyByZWxvYWQgcGFnZSBpZiBiZWluZyByZXN0b3JlZCBmcm9tIGJhY2svZm9yd2FyZCBjYWNoZVxuICAgICAgICB0aGlzLmdldFNvY2tldCgpLmRpc2Nvbm5lY3QoKVxuICAgICAgICB0aGlzLndpdGhQYWdlTG9hZGluZyh7dG86IHdpbmRvdy5sb2NhdGlvbi5ocmVmLCBraW5kOiBcInJlZGlyZWN0XCJ9KVxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9LCB0cnVlKVxuICAgIGlmKCFkZWFkKXsgdGhpcy5iaW5kTmF2KCkgfVxuICAgIHRoaXMuYmluZENsaWNrcygpXG4gICAgaWYoIWRlYWQpeyB0aGlzLmJpbmRGb3JtcygpIH1cbiAgICB0aGlzLmJpbmQoe2tleXVwOiBcImtleXVwXCIsIGtleWRvd246IFwia2V5ZG93blwifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgZXZlbnRUYXJnZXQpID0+IHtcbiAgICAgIGxldCBtYXRjaEtleSA9IHRhcmdldEVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0tFWSkpXG4gICAgICBsZXQgcHJlc3NlZEtleSA9IGUua2V5ICYmIGUua2V5LnRvTG93ZXJDYXNlKCkgLy8gY2hyb21lIGNsaWNrZWQgYXV0b2NvbXBsZXRlcyBzZW5kIGEga2V5ZG93biB3aXRob3V0IGtleVxuICAgICAgaWYobWF0Y2hLZXkgJiYgbWF0Y2hLZXkudG9Mb3dlckNhc2UoKSAhPT0gcHJlc3NlZEtleSl7IHJldHVybiB9XG5cbiAgICAgIGxldCBkYXRhID0ge2tleTogZS5rZXksIC4uLnRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKX1cbiAgICAgIEpTLmV4ZWModHlwZSwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldEVsLCBbXCJwdXNoXCIsIHtkYXRhfV0pXG4gICAgfSlcbiAgICB0aGlzLmJpbmQoe2JsdXI6IFwiZm9jdXNvdXRcIiwgZm9jdXM6IFwiZm9jdXNpblwifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgZXZlbnRUYXJnZXQpID0+IHtcbiAgICAgIGlmKCFldmVudFRhcmdldCl7XG4gICAgICAgIGxldCBkYXRhID0ge2tleTogZS5rZXksIC4uLnRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKX1cbiAgICAgICAgSlMuZXhlYyh0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuYmluZCh7Ymx1cjogXCJibHVyXCIsIGZvY3VzOiBcImZvY3VzXCJ9LCAoZSwgdHlwZSwgdmlldywgdGFyZ2V0RWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIHBoeFRhcmdldCkgPT4ge1xuICAgICAgLy8gYmx1ciBhbmQgZm9jdXMgYXJlIHRyaWdnZXJlZCBvbiBkb2N1bWVudCBhbmQgd2luZG93LiBEaXNjYXJkIG9uZSB0byBhdm9pZCBkdXBzXG4gICAgICBpZihwaHhUYXJnZXQgPT09IFwid2luZG93XCIpe1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKVxuICAgICAgICBKUy5leGVjKHR5cGUsIHBoeEV2ZW50LCB2aWV3LCB0YXJnZXRFbCwgW1wicHVzaFwiLCB7ZGF0YX1dKVxuICAgICAgfVxuICAgIH0pXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCBlID0+IGUucHJldmVudERlZmF1bHQoKSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGxldCBkcm9wVGFyZ2V0SWQgPSBtYXliZShjbG9zZXN0UGh4QmluZGluZyhlLnRhcmdldCwgdGhpcy5iaW5kaW5nKFBIWF9EUk9QX1RBUkdFVCkpLCB0cnVlVGFyZ2V0ID0+IHtcbiAgICAgICAgcmV0dXJuIHRydWVUYXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfRFJPUF9UQVJHRVQpKVxuICAgICAgfSlcbiAgICAgIGxldCBkcm9wVGFyZ2V0ID0gZHJvcFRhcmdldElkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRyb3BUYXJnZXRJZClcbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20oZS5kYXRhVHJhbnNmZXIuZmlsZXMgfHwgW10pXG4gICAgICBpZighZHJvcFRhcmdldCB8fCBkcm9wVGFyZ2V0LmRpc2FibGVkIHx8IGZpbGVzLmxlbmd0aCA9PT0gMCB8fCAhKGRyb3BUYXJnZXQuZmlsZXMgaW5zdGFuY2VvZiBGaWxlTGlzdCkpeyByZXR1cm4gfVxuXG4gICAgICBMaXZlVXBsb2FkZXIudHJhY2tGaWxlcyhkcm9wVGFyZ2V0LCBmaWxlcywgZS5kYXRhVHJhbnNmZXIpXG4gICAgICBkcm9wVGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIiwge2J1YmJsZXM6IHRydWV9KSlcbiAgICB9KVxuICAgIHRoaXMub24oUEhYX1RSQUNLX1VQTE9BRFMsIGUgPT4ge1xuICAgICAgbGV0IHVwbG9hZFRhcmdldCA9IGUudGFyZ2V0XG4gICAgICBpZighRE9NLmlzVXBsb2FkSW5wdXQodXBsb2FkVGFyZ2V0KSl7IHJldHVybiB9XG4gICAgICBsZXQgZmlsZXMgPSBBcnJheS5mcm9tKGUuZGV0YWlsLmZpbGVzIHx8IFtdKS5maWx0ZXIoZiA9PiBmIGluc3RhbmNlb2YgRmlsZSB8fCBmIGluc3RhbmNlb2YgQmxvYilcbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKHVwbG9hZFRhcmdldCwgZmlsZXMpXG4gICAgICB1cGxvYWRUYXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZX0pKVxuICAgIH0pXG4gIH1cblxuICBldmVudE1ldGEoZXZlbnROYW1lLCBlLCB0YXJnZXRFbCl7XG4gICAgbGV0IGNhbGxiYWNrID0gdGhpcy5tZXRhZGF0YUNhbGxiYWNrc1tldmVudE5hbWVdXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gY2FsbGJhY2soZSwgdGFyZ2V0RWwpIDoge31cbiAgfVxuXG4gIHNldFBlbmRpbmdMaW5rKGhyZWYpe1xuICAgIHRoaXMubGlua1JlZisrXG4gICAgdGhpcy5wZW5kaW5nTGluayA9IGhyZWZcbiAgICByZXR1cm4gdGhpcy5saW5rUmVmXG4gIH1cblxuICBjb21taXRQZW5kaW5nTGluayhsaW5rUmVmKXtcbiAgICBpZih0aGlzLmxpbmtSZWYgIT09IGxpbmtSZWYpe1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaHJlZiA9IHRoaXMucGVuZGluZ0xpbmtcbiAgICAgIHRoaXMucGVuZGluZ0xpbmsgPSBudWxsXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGdldEhyZWYoKXsgcmV0dXJuIHRoaXMuaHJlZiB9XG5cbiAgaGFzUGVuZGluZ0xpbmsoKXsgcmV0dXJuICEhdGhpcy5wZW5kaW5nTGluayB9XG5cbiAgYmluZChldmVudHMsIGNhbGxiYWNrKXtcbiAgICBmb3IobGV0IGV2ZW50IGluIGV2ZW50cyl7XG4gICAgICBsZXQgYnJvd3NlckV2ZW50TmFtZSA9IGV2ZW50c1tldmVudF1cblxuICAgICAgdGhpcy5vbihicm93c2VyRXZlbnROYW1lLCBlID0+IHtcbiAgICAgICAgbGV0IGJpbmRpbmcgPSB0aGlzLmJpbmRpbmcoZXZlbnQpXG4gICAgICAgIGxldCB3aW5kb3dCaW5kaW5nID0gdGhpcy5iaW5kaW5nKGB3aW5kb3ctJHtldmVudH1gKVxuICAgICAgICBsZXQgdGFyZ2V0UGh4RXZlbnQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgZS50YXJnZXQuZ2V0QXR0cmlidXRlKGJpbmRpbmcpXG4gICAgICAgIGlmKHRhcmdldFBoeEV2ZW50KXtcbiAgICAgICAgICB0aGlzLmRlYm91bmNlKGUudGFyZ2V0LCBlLCBicm93c2VyRXZlbnROYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGUsIGV2ZW50LCB2aWV3LCBlLnRhcmdldCwgdGFyZ2V0UGh4RXZlbnQsIG51bGwpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgRE9NLmFsbChkb2N1bWVudCwgYFske3dpbmRvd0JpbmRpbmd9XWAsIGVsID0+IHtcbiAgICAgICAgICAgIGxldCBwaHhFdmVudCA9IGVsLmdldEF0dHJpYnV0ZSh3aW5kb3dCaW5kaW5nKVxuICAgICAgICAgICAgdGhpcy5kZWJvdW5jZShlbCwgZSwgYnJvd3NlckV2ZW50TmFtZSwgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlbCwgdmlldyA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZSwgZXZlbnQsIHZpZXcsIGVsLCBwaHhFdmVudCwgXCJ3aW5kb3dcIilcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBiaW5kQ2xpY2tzKCl7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlID0+IHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBlLnRhcmdldClcbiAgICB0aGlzLmJpbmRDbGljayhcImNsaWNrXCIsIFwiY2xpY2tcIiwgZmFsc2UpXG4gICAgdGhpcy5iaW5kQ2xpY2soXCJtb3VzZWRvd25cIiwgXCJjYXB0dXJlLWNsaWNrXCIsIHRydWUpXG4gIH1cblxuICBiaW5kQ2xpY2soZXZlbnROYW1lLCBiaW5kaW5nTmFtZSwgY2FwdHVyZSl7XG4gICAgbGV0IGNsaWNrID0gdGhpcy5iaW5kaW5nKGJpbmRpbmdOYW1lKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZSA9PiB7XG4gICAgICBsZXQgdGFyZ2V0ID0gbnVsbFxuICAgICAgaWYoY2FwdHVyZSl7XG4gICAgICAgIHRhcmdldCA9IGUudGFyZ2V0Lm1hdGNoZXMoYFske2NsaWNrfV1gKSA/IGUudGFyZ2V0IDogZS50YXJnZXQucXVlcnlTZWxlY3RvcihgWyR7Y2xpY2t9XWApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgY2xpY2tTdGFydGVkQXRUYXJnZXQgPSB0aGlzLmNsaWNrU3RhcnRlZEF0VGFyZ2V0IHx8IGUudGFyZ2V0XG4gICAgICAgIHRhcmdldCA9IGNsb3Nlc3RQaHhCaW5kaW5nKGNsaWNrU3RhcnRlZEF0VGFyZ2V0LCBjbGljaylcbiAgICAgICAgdGhpcy5kaXNwYXRjaENsaWNrQXdheShlLCBjbGlja1N0YXJ0ZWRBdFRhcmdldClcbiAgICAgICAgdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCA9IG51bGxcbiAgICAgIH1cbiAgICAgIGxldCBwaHhFdmVudCA9IHRhcmdldCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKGNsaWNrKVxuICAgICAgaWYoIXBoeEV2ZW50KXtcbiAgICAgICAgbGV0IGhyZWYgPSBlLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxBbmNob3JFbGVtZW50ID8gZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA6IG51bGxcbiAgICAgICAgaWYoIWNhcHR1cmUgJiYgaHJlZiAhPT0gbnVsbCAmJiAhRE9NLndhbnRzTmV3VGFiKGUpICYmIERPTS5pc05ld1BhZ2VIcmVmKGhyZWYsIHdpbmRvdy5sb2NhdGlvbikpe1xuICAgICAgICAgIHRoaXMudW5sb2FkKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIil7IGUucHJldmVudERlZmF1bHQoKSB9XG5cbiAgICAgIHRoaXMuZGVib3VuY2UodGFyZ2V0LCBlLCBcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnModGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICBKUy5leGVjKFwiY2xpY2tcIiwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldCwgW1wicHVzaFwiLCB7ZGF0YTogdGhpcy5ldmVudE1ldGEoXCJjbGlja1wiLCBlLCB0YXJnZXQpfV0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sIGNhcHR1cmUpXG4gIH1cblxuICBkaXNwYXRjaENsaWNrQXdheShlLCBjbGlja1N0YXJ0ZWRBdCl7XG4gICAgbGV0IHBoeENsaWNrQXdheSA9IHRoaXMuYmluZGluZyhcImNsaWNrLWF3YXlcIilcbiAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7cGh4Q2xpY2tBd2F5fV1gLCBlbCA9PiB7XG4gICAgICBpZighKGVsLmlzU2FtZU5vZGUoY2xpY2tTdGFydGVkQXQpIHx8IGVsLmNvbnRhaW5zKGNsaWNrU3RhcnRlZEF0KSkpe1xuICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgbGV0IHBoeEV2ZW50ID0gZWwuZ2V0QXR0cmlidXRlKHBoeENsaWNrQXdheSlcbiAgICAgICAgICBpZihKUy5pc1Zpc2libGUoZWwpKXtcbiAgICAgICAgICAgIEpTLmV4ZWMoXCJjbGlja1wiLCBwaHhFdmVudCwgdmlldywgZWwsIFtcInB1c2hcIiwge2RhdGE6IHRoaXMuZXZlbnRNZXRhKFwiY2xpY2tcIiwgZSwgZS50YXJnZXQpfV0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBiaW5kTmF2KCl7XG4gICAgaWYoIUJyb3dzZXIuY2FuUHVzaFN0YXRlKCkpeyByZXR1cm4gfVxuICAgIGlmKGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24peyBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIiB9XG4gICAgbGV0IHNjcm9sbFRpbWVyID0gbnVsbFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIF9lID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChzY3JvbGxUaW1lcilcbiAgICAgIHNjcm9sbFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIEJyb3dzZXIudXBkYXRlQ3VycmVudFN0YXRlKHN0YXRlID0+IE9iamVjdC5hc3NpZ24oc3RhdGUsIHtzY3JvbGw6IHdpbmRvdy5zY3JvbGxZfSkpXG4gICAgICB9LCAxMDApXG4gICAgfSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGV2ZW50ID0+IHtcbiAgICAgIGlmKCF0aGlzLnJlZ2lzdGVyTmV3TG9jYXRpb24od2luZG93LmxvY2F0aW9uKSl7IHJldHVybiB9XG4gICAgICBsZXQge3R5cGUsIGlkLCByb290LCBzY3JvbGx9ID0gZXZlbnQuc3RhdGUgfHwge31cbiAgICAgIGxldCBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWZcblxuICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgaWYodGhpcy5tYWluLmlzQ29ubmVjdGVkKCkgJiYgKHR5cGUgPT09IFwicGF0Y2hcIiAmJiBpZCA9PT0gdGhpcy5tYWluLmlkKSl7XG4gICAgICAgICAgdGhpcy5tYWluLnB1c2hMaW5rUGF0Y2goaHJlZiwgbnVsbCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tYXliZVNjcm9sbChzY3JvbGwpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlcGxhY2VNYWluKGhyZWYsIG51bGwsICgpID0+IHtcbiAgICAgICAgICAgIGlmKHJvb3QpeyB0aGlzLnJlcGxhY2VSb290SGlzdG9yeSgpIH1cbiAgICAgICAgICAgIHRoaXMubWF5YmVTY3JvbGwoc2Nyb2xsKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSwgZmFsc2UpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlID0+IHtcbiAgICAgIGxldCB0YXJnZXQgPSBjbG9zZXN0UGh4QmluZGluZyhlLnRhcmdldCwgUEhYX0xJVkVfTElOSylcbiAgICAgIGxldCB0eXBlID0gdGFyZ2V0ICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoUEhYX0xJVkVfTElOSylcbiAgICAgIGlmKCF0eXBlIHx8ICF0aGlzLmlzQ29ubmVjdGVkKCkgfHwgIXRoaXMubWFpbiB8fCBET00ud2FudHNOZXdUYWIoZSkpeyByZXR1cm4gfVxuXG4gICAgICBsZXQgaHJlZiA9IHRhcmdldC5ocmVmXG4gICAgICBsZXQgbGlua1N0YXRlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShQSFhfTElOS19TVEFURSlcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSAvLyBkbyBub3QgYnViYmxlIGNsaWNrIHRvIHJlZ3VsYXIgcGh4LWNsaWNrIGJpbmRpbmdzXG4gICAgICBpZih0aGlzLnBlbmRpbmdMaW5rID09PSBocmVmKXsgcmV0dXJuIH1cblxuICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgaWYodHlwZSA9PT0gXCJwYXRjaFwiKXtcbiAgICAgICAgICB0aGlzLnB1c2hIaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCB0YXJnZXQpXG4gICAgICAgIH0gZWxzZSBpZih0eXBlID09PSBcInJlZGlyZWN0XCIpe1xuICAgICAgICAgIHRoaXMuaGlzdG9yeVJlZGlyZWN0KGhyZWYsIGxpbmtTdGF0ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkICR7UEhYX0xJVkVfTElOS30gdG8gYmUgXCJwYXRjaFwiIG9yIFwicmVkaXJlY3RcIiwgZ290OiAke3R5cGV9YClcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGh4Q2xpY2sgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNsaWNrXCIpKVxuICAgICAgICBpZihwaHhDbGljayl7XG4gICAgICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHRoaXMuZXhlY0pTKHRhcmdldCwgcGh4Q2xpY2ssIFwiY2xpY2tcIikpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSwgZmFsc2UpXG4gIH1cblxuICBtYXliZVNjcm9sbChzY3JvbGwpIHtcbiAgICBpZih0eXBlb2Yoc2Nyb2xsKSA9PT0gXCJudW1iZXJcIil7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgc2Nyb2xsKVxuICAgICAgfSkgLy8gdGhlIGJvZHkgbmVlZHMgdG8gcmVuZGVyIGJlZm9yZSB3ZSBzY3JvbGwuXG4gICAgfVxuICB9XG5cbiAgZGlzcGF0Y2hFdmVudChldmVudCwgcGF5bG9hZCA9IHt9KXtcbiAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIGBwaHg6JHtldmVudH1gLCB7ZGV0YWlsOiBwYXlsb2FkfSlcbiAgfVxuXG4gIGRpc3BhdGNoRXZlbnRzKGV2ZW50cyl7XG4gICAgZXZlbnRzLmZvckVhY2goKFtldmVudCwgcGF5bG9hZF0pID0+IHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCwgcGF5bG9hZCkpXG4gIH1cblxuICB3aXRoUGFnZUxvYWRpbmcoaW5mbywgY2FsbGJhY2spe1xuICAgIERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0YXJ0XCIsIHtkZXRhaWw6IGluZm99KVxuICAgIGxldCBkb25lID0gKCkgPT4gRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpwYWdlLWxvYWRpbmctc3RvcFwiLCB7ZGV0YWlsOiBpbmZvfSlcbiAgICByZXR1cm4gY2FsbGJhY2sgPyBjYWxsYmFjayhkb25lKSA6IGRvbmVcbiAgfVxuXG4gIHB1c2hIaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCB0YXJnZXRFbCl7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiBCcm93c2VyLnJlZGlyZWN0KGhyZWYpIH1cblxuICAgIHRoaXMud2l0aFBhZ2VMb2FkaW5nKHt0bzogaHJlZiwga2luZDogXCJwYXRjaFwifSwgZG9uZSA9PiB7XG4gICAgICB0aGlzLm1haW4ucHVzaExpbmtQYXRjaChocmVmLCB0YXJnZXRFbCwgbGlua1JlZiA9PiB7XG4gICAgICAgIHRoaXMuaGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgbGlua1JlZilcbiAgICAgICAgZG9uZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBoaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCBsaW5rUmVmID0gdGhpcy5zZXRQZW5kaW5nTGluayhocmVmKSl7XG4gICAgaWYoIXRoaXMuY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZikpeyByZXR1cm4gfVxuXG4gICAgQnJvd3Nlci5wdXNoU3RhdGUobGlua1N0YXRlLCB7dHlwZTogXCJwYXRjaFwiLCBpZDogdGhpcy5tYWluLmlkfSwgaHJlZilcbiAgICB0aGlzLnJlZ2lzdGVyTmV3TG9jYXRpb24od2luZG93LmxvY2F0aW9uKVxuICB9XG5cbiAgaGlzdG9yeVJlZGlyZWN0KGhyZWYsIGxpbmtTdGF0ZSwgZmxhc2gpe1xuICAgIC8vIGNvbnZlcnQgdG8gZnVsbCBocmVmIGlmIG9ubHkgcGF0aCBwcmVmaXhcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIEJyb3dzZXIucmVkaXJlY3QoaHJlZiwgZmxhc2gpIH1cbiAgICBpZigvXlxcLyR8XlxcL1teXFwvXSsuKiQvLnRlc3QoaHJlZikpe1xuICAgICAgbGV0IHtwcm90b2NvbCwgaG9zdH0gPSB3aW5kb3cubG9jYXRpb25cbiAgICAgIGhyZWYgPSBgJHtwcm90b2NvbH0vLyR7aG9zdH0ke2hyZWZ9YFxuICAgIH1cbiAgICBsZXQgc2Nyb2xsID0gd2luZG93LnNjcm9sbFlcbiAgICB0aGlzLndpdGhQYWdlTG9hZGluZyh7dG86IGhyZWYsIGtpbmQ6IFwicmVkaXJlY3RcIn0sIGRvbmUgPT4ge1xuICAgICAgdGhpcy5yZXBsYWNlTWFpbihocmVmLCBmbGFzaCwgKCkgPT4ge1xuICAgICAgICBCcm93c2VyLnB1c2hTdGF0ZShsaW5rU3RhdGUsIHt0eXBlOiBcInJlZGlyZWN0XCIsIGlkOiB0aGlzLm1haW4uaWQsIHNjcm9sbDogc2Nyb2xsfSwgaHJlZilcbiAgICAgICAgdGhpcy5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbilcbiAgICAgICAgZG9uZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICByZXBsYWNlUm9vdEhpc3RvcnkoKXtcbiAgICBCcm93c2VyLnB1c2hTdGF0ZShcInJlcGxhY2VcIiwge3Jvb3Q6IHRydWUsIHR5cGU6IFwicGF0Y2hcIiwgaWQ6IHRoaXMubWFpbi5pZH0pXG4gIH1cblxuICByZWdpc3Rlck5ld0xvY2F0aW9uKG5ld0xvY2F0aW9uKXtcbiAgICBsZXQge3BhdGhuYW1lLCBzZWFyY2h9ID0gdGhpcy5jdXJyZW50TG9jYXRpb25cbiAgICBpZihwYXRobmFtZSArIHNlYXJjaCA9PT0gbmV3TG9jYXRpb24ucGF0aG5hbWUgKyBuZXdMb2NhdGlvbi5zZWFyY2gpe1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gY2xvbmUobmV3TG9jYXRpb24pXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGJpbmRGb3Jtcygpe1xuICAgIGxldCBpdGVyYXRpb25zID0gMFxuICAgIGxldCBleHRlcm5hbEZvcm1TdWJtaXR0ZWQgPSBmYWxzZVxuXG4gICAgLy8gZGlzYWJsZSBmb3JtcyBvbiBzdWJtaXQgdGhhdCB0cmFjayBwaHgtY2hhbmdlIGJ1dCBwZXJmb3JtIGV4dGVybmFsIHN1Ym1pdFxuICAgIHRoaXMub24oXCJzdWJtaXRcIiwgZSA9PiB7XG4gICAgICBsZXQgcGh4U3VibWl0ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcInN1Ym1pdFwiKSlcbiAgICAgIGxldCBwaHhDaGFuZ2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpKVxuICAgICAgaWYoIWV4dGVybmFsRm9ybVN1Ym1pdHRlZCAmJiBwaHhDaGFuZ2UgJiYgIXBoeFN1Ym1pdCl7XG4gICAgICAgIGV4dGVybmFsRm9ybVN1Ym1pdHRlZCA9IHRydWVcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICB2aWV3LmRpc2FibGVGb3JtKGUudGFyZ2V0KVxuICAgICAgICAgIC8vIHNhZmFyaSBuZWVkcyBuZXh0IHRpY2tcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIGlmKERPTS5pc1VubG9hZGFibGVGb3JtU3VibWl0KGUpKXsgdGhpcy51bmxvYWQoKSB9XG4gICAgICAgICAgICBlLnRhcmdldC5zdWJtaXQoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSwgdHJ1ZSlcblxuICAgIHRoaXMub24oXCJzdWJtaXRcIiwgZSA9PiB7XG4gICAgICBsZXQgcGh4RXZlbnQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwic3VibWl0XCIpKVxuICAgICAgaWYoIXBoeEV2ZW50KXtcbiAgICAgICAgaWYoRE9NLmlzVW5sb2FkYWJsZUZvcm1TdWJtaXQoZSkpeyB0aGlzLnVubG9hZCgpIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUudGFyZ2V0LmRpc2FibGVkID0gdHJ1ZVxuICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZS50YXJnZXQsIHZpZXcgPT4ge1xuICAgICAgICBKUy5leGVjKFwic3VibWl0XCIsIHBoeEV2ZW50LCB2aWV3LCBlLnRhcmdldCwgW1wicHVzaFwiLCB7fV0pXG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuXG4gICAgZm9yKGxldCB0eXBlIG9mIFtcImNoYW5nZVwiLCBcImlucHV0XCJdKXtcbiAgICAgIHRoaXMub24odHlwZSwgZSA9PiB7XG4gICAgICAgIGxldCBwaHhDaGFuZ2UgPSB0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIilcbiAgICAgICAgbGV0IGlucHV0ID0gZS50YXJnZXRcbiAgICAgICAgbGV0IGlucHV0RXZlbnQgPSBpbnB1dC5nZXRBdHRyaWJ1dGUocGh4Q2hhbmdlKVxuICAgICAgICBsZXQgZm9ybUV2ZW50ID0gaW5wdXQuZm9ybSAmJiBpbnB1dC5mb3JtLmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpXG4gICAgICAgIGxldCBwaHhFdmVudCA9IGlucHV0RXZlbnQgfHwgZm9ybUV2ZW50XG4gICAgICAgIGlmKCFwaHhFdmVudCl7IHJldHVybiB9XG4gICAgICAgIGlmKGlucHV0LnR5cGUgPT09IFwibnVtYmVyXCIgJiYgaW5wdXQudmFsaWRpdHkgJiYgaW5wdXQudmFsaWRpdHkuYmFkSW5wdXQpeyByZXR1cm4gfVxuXG4gICAgICAgIGxldCBkaXNwYXRjaGVyID0gaW5wdXRFdmVudCA/IGlucHV0IDogaW5wdXQuZm9ybVxuICAgICAgICBsZXQgY3VycmVudEl0ZXJhdGlvbnMgPSBpdGVyYXRpb25zXG4gICAgICAgIGl0ZXJhdGlvbnMrK1xuICAgICAgICBsZXQge2F0OiBhdCwgdHlwZTogbGFzdFR5cGV9ID0gRE9NLnByaXZhdGUoaW5wdXQsIFwicHJldi1pdGVyYXRpb25cIikgfHwge31cbiAgICAgICAgLy8gZGV0ZWN0IGR1cCBiZWNhdXNlIHNvbWUgYnJvd3NlcnMgZGlzcGF0Y2ggYm90aCBcImlucHV0XCIgYW5kIFwiY2hhbmdlXCJcbiAgICAgICAgaWYoYXQgPT09IGN1cnJlbnRJdGVyYXRpb25zIC0gMSAmJiB0eXBlICE9PSBsYXN0VHlwZSl7IHJldHVybiB9XG5cbiAgICAgICAgRE9NLnB1dFByaXZhdGUoaW5wdXQsIFwicHJldi1pdGVyYXRpb25cIiwge2F0OiBjdXJyZW50SXRlcmF0aW9ucywgdHlwZTogdHlwZX0pXG5cbiAgICAgICAgdGhpcy5kZWJvdW5jZShpbnB1dCwgZSwgdHlwZSwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMud2l0aGluT3duZXJzKGRpc3BhdGNoZXIsIHZpZXcgPT4ge1xuICAgICAgICAgICAgRE9NLnB1dFByaXZhdGUoaW5wdXQsIFBIWF9IQVNfRk9DVVNFRCwgdHJ1ZSlcbiAgICAgICAgICAgIGlmKCFET00uaXNUZXh0dWFsSW5wdXQoaW5wdXQpKXtcbiAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVFbGVtZW50KGlucHV0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSlMuZXhlYyhcImNoYW5nZVwiLCBwaHhFdmVudCwgdmlldywgaW5wdXQsIFtcInB1c2hcIiwge190YXJnZXQ6IGUudGFyZ2V0Lm5hbWUsIGRpc3BhdGNoZXI6IGRpc3BhdGNoZXJ9XSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSwgZmFsc2UpXG4gICAgfVxuICAgIHRoaXMub24oXCJyZXNldFwiLCAoZSkgPT4ge1xuICAgICAgbGV0IGZvcm0gPSBlLnRhcmdldFxuICAgICAgRE9NLnJlc2V0Rm9ybShmb3JtLCB0aGlzLmJpbmRpbmcoUEhYX0ZFRURCQUNLX0ZPUikpXG4gICAgICBsZXQgaW5wdXQgPSBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpLmZpbmQoZWwgPT4gZWwudHlwZSA9PT0gXCJyZXNldFwiKVxuICAgICAgLy8gd2FpdCB1bnRpbCBuZXh0IHRpY2sgdG8gZ2V0IHVwZGF0ZWQgaW5wdXQgdmFsdWVcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBpbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIsIHtidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiBmYWxzZX0pKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZGVib3VuY2UoZWwsIGV2ZW50LCBldmVudFR5cGUsIGNhbGxiYWNrKXtcbiAgICBpZihldmVudFR5cGUgPT09IFwiYmx1clwiIHx8IGV2ZW50VHlwZSA9PT0gXCJmb2N1c291dFwiKXsgcmV0dXJuIGNhbGxiYWNrKCkgfVxuXG4gICAgbGV0IHBoeERlYm91bmNlID0gdGhpcy5iaW5kaW5nKFBIWF9ERUJPVU5DRSlcbiAgICBsZXQgcGh4VGhyb3R0bGUgPSB0aGlzLmJpbmRpbmcoUEhYX1RIUk9UVExFKVxuICAgIGxldCBkZWZhdWx0RGVib3VuY2UgPSB0aGlzLmRlZmF1bHRzLmRlYm91bmNlLnRvU3RyaW5nKClcbiAgICBsZXQgZGVmYXVsdFRocm90dGxlID0gdGhpcy5kZWZhdWx0cy50aHJvdHRsZS50b1N0cmluZygpXG5cbiAgICB0aGlzLndpdGhpbk93bmVycyhlbCwgdmlldyA9PiB7XG4gICAgICBsZXQgYXN5bmNGaWx0ZXIgPSAoKSA9PiAhdmlldy5pc0Rlc3Ryb3llZCgpICYmIGRvY3VtZW50LmJvZHkuY29udGFpbnMoZWwpXG4gICAgICBET00uZGVib3VuY2UoZWwsIGV2ZW50LCBwaHhEZWJvdW5jZSwgZGVmYXVsdERlYm91bmNlLCBwaHhUaHJvdHRsZSwgZGVmYXVsdFRocm90dGxlLCBhc3luY0ZpbHRlciwgKCkgPT4ge1xuICAgICAgICBjYWxsYmFjaygpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBzaWxlbmNlRXZlbnRzKGNhbGxiYWNrKXtcbiAgICB0aGlzLnNpbGVuY2VkID0gdHJ1ZVxuICAgIGNhbGxiYWNrKClcbiAgICB0aGlzLnNpbGVuY2VkID0gZmFsc2VcbiAgfVxuXG4gIG9uKGV2ZW50LCBjYWxsYmFjayl7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGUgPT4ge1xuICAgICAgaWYoIXRoaXMuc2lsZW5jZWQpeyBjYWxsYmFjayhlKSB9XG4gICAgfSlcbiAgfVxufVxuXG5jbGFzcyBUcmFuc2l0aW9uU2V0IHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICB0aGlzLnRyYW5zaXRpb25zID0gbmV3IFNldCgpXG4gICAgdGhpcy5wZW5kaW5nT3BzID0gW11cbiAgfVxuXG4gIHJlc2V0KCl7XG4gICAgdGhpcy50cmFuc2l0aW9ucy5mb3JFYWNoKHRpbWVyID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICAgIHRoaXMudHJhbnNpdGlvbnMuZGVsZXRlKHRpbWVyKVxuICAgIH0pXG4gICAgdGhpcy5mbHVzaFBlbmRpbmdPcHMoKVxuICB9XG5cbiAgYWZ0ZXIoY2FsbGJhY2spe1xuICAgIGlmKHRoaXMuc2l6ZSgpID09PSAwKXtcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoUGVuZGluZ09wKGNhbGxiYWNrKVxuICAgIH1cbiAgfVxuXG4gIGFkZFRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKXtcbiAgICBvblN0YXJ0KClcbiAgICBsZXQgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbnMuZGVsZXRlKHRpbWVyKVxuICAgICAgb25Eb25lKClcbiAgICAgIHRoaXMuZmx1c2hQZW5kaW5nT3BzKClcbiAgICB9LCB0aW1lKVxuICAgIHRoaXMudHJhbnNpdGlvbnMuYWRkKHRpbWVyKVxuICB9XG5cbiAgcHVzaFBlbmRpbmdPcChvcCl7IHRoaXMucGVuZGluZ09wcy5wdXNoKG9wKSB9XG5cbiAgc2l6ZSgpeyByZXR1cm4gdGhpcy50cmFuc2l0aW9ucy5zaXplIH1cblxuICBmbHVzaFBlbmRpbmdPcHMoKXtcbiAgICBpZih0aGlzLnNpemUoKSA+IDApeyByZXR1cm4gfVxuICAgIGxldCBvcCA9IHRoaXMucGVuZGluZ09wcy5zaGlmdCgpXG4gICAgaWYob3Ape1xuICAgICAgb3AoKVxuICAgICAgdGhpcy5mbHVzaFBlbmRpbmdPcHMoKVxuICAgIH1cbiAgfVxufVxuIiwgIi8vIElmIHlvdSB3YW50IHRvIHVzZSBQaG9lbml4IGNoYW5uZWxzLCBydW4gYG1peCBoZWxwIHBoeC5nZW4uY2hhbm5lbGBcbi8vIHRvIGdldCBzdGFydGVkIGFuZCB0aGVuIHVuY29tbWVudCB0aGUgbGluZSBiZWxvdy5cbi8vIGltcG9ydCBcIi4vdXNlcl9zb2NrZXQuanNcIlxuXG4vLyBZb3UgY2FuIGluY2x1ZGUgZGVwZW5kZW5jaWVzIGluIHR3byB3YXlzLlxuLy9cbi8vIFRoZSBzaW1wbGVzdCBvcHRpb24gaXMgdG8gcHV0IHRoZW0gaW4gYXNzZXRzL3ZlbmRvciBhbmRcbi8vIGltcG9ydCB0aGVtIHVzaW5nIHJlbGF0aXZlIHBhdGhzOlxuLy9cbi8vICAgICBpbXBvcnQgXCIuLi92ZW5kb3Ivc29tZS1wYWNrYWdlLmpzXCJcbi8vXG4vLyBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIGBucG0gaW5zdGFsbCBzb21lLXBhY2thZ2UgLS1wcmVmaXggYXNzZXRzYCBhbmQgaW1wb3J0XG4vLyB0aGVtIHVzaW5nIGEgcGF0aCBzdGFydGluZyB3aXRoIHRoZSBwYWNrYWdlIG5hbWU6XG4vL1xuLy8gICAgIGltcG9ydCBcInNvbWUtcGFja2FnZVwiXG4vL1xuXG4vLyBJbmNsdWRlIHBob2VuaXhfaHRtbCB0byBoYW5kbGUgbWV0aG9kPVBVVC9ERUxFVEUgaW4gZm9ybXMgYW5kIGJ1dHRvbnMuXG5pbXBvcnQgXCJwaG9lbml4X2h0bWxcIlxuLy8gRXN0YWJsaXNoIFBob2VuaXggU29ja2V0IGFuZCBMaXZlVmlldyBjb25maWd1cmF0aW9uLlxuaW1wb3J0IHtTb2NrZXR9IGZyb20gXCJwaG9lbml4XCJcbmltcG9ydCB7TGl2ZVNvY2tldH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcbmltcG9ydCB0b3BiYXIgZnJvbSBcIi4uL3ZlbmRvci90b3BiYXJcIlxuaW1wb3J0IHtNZXRhbWFza30gZnJvbSBcIi4vaG9va3MvbWV0YW1hc2tcIlxuXG5sZXQgY3NyZlRva2VuID0gZG9jdW1lbnRcbiAgLnF1ZXJ5U2VsZWN0b3IoXCJtZXRhW25hbWU9J2NzcmYtdG9rZW4nXVwiKVxuICAuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKTtcblxubGV0IEhvb2tzID0ge31cbkhvb2tzLk1ldGFtYXNrID0gTWV0YW1hc2tcblxubGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwge1xuICBwYXJhbXM6IHsgX2NzcmZfdG9rZW46IGNzcmZUb2tlbiB9LFxuICBob29rczogSG9va3Ncbn0pO1xuXG4vLyBTaG93IHByb2dyZXNzIGJhciBvbiBsaXZlIG5hdmlnYXRpb24gYW5kIGZvcm0gc3VibWl0c1xudG9wYmFyLmNvbmZpZyh7YmFyQ29sb3JzOiB7MDogXCIjMjlkXCJ9LCBzaGFkb3dDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIC4zKVwifSlcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLCBfaW5mbyA9PiB0b3BiYXIuc2hvdygzMDApKVxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwaHg6cGFnZS1sb2FkaW5nLXN0b3BcIiwgX2luZm8gPT4gdG9wYmFyLmhpZGUoKSlcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJkb3JhOmNsaXBjb3B5XCIsIChldmVudCkgPT4ge1xuICBpZiAoXCJjbGlwYm9hcmRcIiBpbiBuYXZpZ2F0b3IpIHtcbiAgICBjb25zdCB0ZXh0ID0gZXZlbnQudGFyZ2V0LnRleHRDb250ZW50LnRyaW0oKTtcbiAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICBhbGVydChcIlNvcnJ5LCB5b3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBjbGlwYm9hcmQgY29weS5cIik7XG4gIH1cbn0pO1xuXG4vLyBjb25uZWN0IGlmIHRoZXJlIGFyZSBhbnkgTGl2ZVZpZXdzIG9uIHRoZSBwYWdlXG5saXZlU29ja2V0LmNvbm5lY3QoKVxuXG4vLyBleHBvc2UgbGl2ZVNvY2tldCBvbiB3aW5kb3cgZm9yIHdlYiBjb25zb2xlIGRlYnVnIGxvZ3MgYW5kIGxhdGVuY3kgc2ltdWxhdGlvbjpcbi8vID4+IGxpdmVTb2NrZXQuZW5hYmxlRGVidWcoKVxuLy8gPj4gbGl2ZVNvY2tldC5lbmFibGVMYXRlbmN5U2ltKDEwMDApICAvLyBlbmFibGVkIGZvciBkdXJhdGlvbiBvZiBicm93c2VyIHNlc3Npb25cbi8vID4+IGxpdmVTb2NrZXQuZGlzYWJsZUxhdGVuY3lTaW0oKVxud2luZG93LmxpdmVTb2NrZXQgPSBsaXZlU29ja2V0XG4iLCAidmFyIGNvbW1vbmpzR2xvYmFsPXR5cGVvZiBnbG9iYWxUaGlzIT09XCJ1bmRlZmluZWRcIj9nbG9iYWxUaGlzOnR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiP3dpbmRvdzp0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIj9nbG9iYWw6dHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiP3NlbGY6e307ZnVuY3Rpb24gZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMoeCl7cmV0dXJuIHgmJnguX19lc01vZHVsZSYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsXCJkZWZhdWx0XCIpP3hbXCJkZWZhdWx0XCJdOnh9ZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sYmFzZWRpcixtb2R1bGUpe3JldHVybiBtb2R1bGU9e3BhdGg6YmFzZWRpcixleHBvcnRzOnt9LHJlcXVpcmU6ZnVuY3Rpb24ocGF0aCxiYXNlKXtyZXR1cm4gY29tbW9uanNSZXF1aXJlKHBhdGgsYmFzZT09PXVuZGVmaW5lZHx8YmFzZT09PW51bGw/bW9kdWxlLnBhdGg6YmFzZSl9fSxmbihtb2R1bGUsbW9kdWxlLmV4cG9ydHMpLG1vZHVsZS5leHBvcnRzfWZ1bmN0aW9uIGdldERlZmF1bHRFeHBvcnRGcm9tTmFtZXNwYWNlSWZQcmVzZW50KG4pe3JldHVybiBuJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixcImRlZmF1bHRcIik/bltcImRlZmF1bHRcIl06bn1mdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbU5hbWVzcGFjZUlmTm90TmFtZWQobil7cmV0dXJuIG4mJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLFwiZGVmYXVsdFwiKSYmT2JqZWN0LmtleXMobikubGVuZ3RoPT09MT9uW1wiZGVmYXVsdFwiXTpufWZ1bmN0aW9uIGdldEF1Z21lbnRlZE5hbWVzcGFjZShuKXtpZihuLl9fZXNNb2R1bGUpcmV0dXJuIG47dmFyIGE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7T2JqZWN0LmtleXMobikuZm9yRWFjaChmdW5jdGlvbihrKXt2YXIgZD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sayk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsayxkLmdldD9kOntlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG5ba119fSl9KTtyZXR1cm4gYX1mdW5jdGlvbiBjb21tb25qc1JlcXVpcmUoKXt0aHJvdyBuZXcgRXJyb3IoXCJEeW5hbWljIHJlcXVpcmVzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBieSBAcm9sbHVwL3BsdWdpbi1jb21tb25qc1wiKX12YXIgYm49Y3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24obW9kdWxlKXsoZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGFzc2VydCh2YWwsbXNnKXtpZighdmFsKXRocm93IG5ldyBFcnJvcihtc2d8fFwiQXNzZXJ0aW9uIGZhaWxlZFwiKX1mdW5jdGlvbiBpbmhlcml0cyhjdG9yLHN1cGVyQ3Rvcil7Y3Rvci5zdXBlcl89c3VwZXJDdG9yO3ZhciBUZW1wQ3Rvcj1mdW5jdGlvbigpe307VGVtcEN0b3IucHJvdG90eXBlPXN1cGVyQ3Rvci5wcm90b3R5cGU7Y3Rvci5wcm90b3R5cGU9bmV3IFRlbXBDdG9yO2N0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yPWN0b3J9ZnVuY3Rpb24gQk4obnVtYmVyLGJhc2UsZW5kaWFuKXtpZihCTi5pc0JOKG51bWJlcikpe3JldHVybiBudW1iZXJ9dGhpcy5uZWdhdGl2ZT0wO3RoaXMud29yZHM9bnVsbDt0aGlzLmxlbmd0aD0wO3RoaXMucmVkPW51bGw7aWYobnVtYmVyIT09bnVsbCl7aWYoYmFzZT09PVwibGVcInx8YmFzZT09PVwiYmVcIil7ZW5kaWFuPWJhc2U7YmFzZT0xMH10aGlzLl9pbml0KG51bWJlcnx8MCxiYXNlfHwxMCxlbmRpYW58fFwiYmVcIil9fWlmKHR5cGVvZiBtb2R1bGU9PT1cIm9iamVjdFwiKXttb2R1bGUuZXhwb3J0cz1CTn1lbHNle2V4cG9ydHMuQk49Qk59Qk4uQk49Qk47Qk4ud29yZFNpemU9MjY7dmFyIEJ1ZmZlcjt0cnl7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCImJnR5cGVvZiB3aW5kb3cuQnVmZmVyIT09XCJ1bmRlZmluZWRcIil7QnVmZmVyPXdpbmRvdy5CdWZmZXJ9ZWxzZXtCdWZmZXI9bnVsbC5CdWZmZXJ9fWNhdGNoKGUpe31CTi5pc0JOPWZ1bmN0aW9uIGlzQk4obnVtKXtpZihudW0gaW5zdGFuY2VvZiBCTil7cmV0dXJuIHRydWV9cmV0dXJuIG51bSE9PW51bGwmJnR5cGVvZiBudW09PT1cIm9iamVjdFwiJiZudW0uY29uc3RydWN0b3Iud29yZFNpemU9PT1CTi53b3JkU2l6ZSYmQXJyYXkuaXNBcnJheShudW0ud29yZHMpfTtCTi5tYXg9ZnVuY3Rpb24gbWF4KGxlZnQscmlnaHQpe2lmKGxlZnQuY21wKHJpZ2h0KT4wKXJldHVybiBsZWZ0O3JldHVybiByaWdodH07Qk4ubWluPWZ1bmN0aW9uIG1pbihsZWZ0LHJpZ2h0KXtpZihsZWZ0LmNtcChyaWdodCk8MClyZXR1cm4gbGVmdDtyZXR1cm4gcmlnaHR9O0JOLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbiBpbml0KG51bWJlcixiYXNlLGVuZGlhbil7aWYodHlwZW9mIG51bWJlcj09PVwibnVtYmVyXCIpe3JldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlcixiYXNlLGVuZGlhbil9aWYodHlwZW9mIG51bWJlcj09PVwib2JqZWN0XCIpe3JldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLGJhc2UsZW5kaWFuKX1pZihiYXNlPT09XCJoZXhcIil7YmFzZT0xNn1hc3NlcnQoYmFzZT09PShiYXNlfDApJiZiYXNlPj0yJiZiYXNlPD0zNik7bnVtYmVyPW51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZyxcIlwiKTt2YXIgc3RhcnQ9MDtpZihudW1iZXJbMF09PT1cIi1cIil7c3RhcnQrKzt0aGlzLm5lZ2F0aXZlPTF9aWYoc3RhcnQ8bnVtYmVyLmxlbmd0aCl7aWYoYmFzZT09PTE2KXt0aGlzLl9wYXJzZUhleChudW1iZXIsc3RhcnQsZW5kaWFuKX1lbHNle3RoaXMuX3BhcnNlQmFzZShudW1iZXIsYmFzZSxzdGFydCk7aWYoZW5kaWFuPT09XCJsZVwiKXt0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksYmFzZSxlbmRpYW4pfX19fTtCTi5wcm90b3R5cGUuX2luaXROdW1iZXI9ZnVuY3Rpb24gX2luaXROdW1iZXIobnVtYmVyLGJhc2UsZW5kaWFuKXtpZihudW1iZXI8MCl7dGhpcy5uZWdhdGl2ZT0xO251bWJlcj0tbnVtYmVyfWlmKG51bWJlcjw2NzEwODg2NCl7dGhpcy53b3Jkcz1bbnVtYmVyJjY3MTA4ODYzXTt0aGlzLmxlbmd0aD0xfWVsc2UgaWYobnVtYmVyPDQ1MDM1OTk2MjczNzA0OTYpe3RoaXMud29yZHM9W251bWJlciY2NzEwODg2MyxudW1iZXIvNjcxMDg4NjQmNjcxMDg4NjNdO3RoaXMubGVuZ3RoPTJ9ZWxzZXthc3NlcnQobnVtYmVyPDkwMDcxOTkyNTQ3NDA5OTIpO3RoaXMud29yZHM9W251bWJlciY2NzEwODg2MyxudW1iZXIvNjcxMDg4NjQmNjcxMDg4NjMsMV07dGhpcy5sZW5ndGg9M31pZihlbmRpYW4hPT1cImxlXCIpcmV0dXJuO3RoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSxiYXNlLGVuZGlhbil9O0JOLnByb3RvdHlwZS5faW5pdEFycmF5PWZ1bmN0aW9uIF9pbml0QXJyYXkobnVtYmVyLGJhc2UsZW5kaWFuKXthc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGg9PT1cIm51bWJlclwiKTtpZihudW1iZXIubGVuZ3RoPD0wKXt0aGlzLndvcmRzPVswXTt0aGlzLmxlbmd0aD0xO3JldHVybiB0aGlzfXRoaXMubGVuZ3RoPU1hdGguY2VpbChudW1iZXIubGVuZ3RoLzMpO3RoaXMud29yZHM9bmV3IEFycmF5KHRoaXMubGVuZ3RoKTtmb3IodmFyIGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7dGhpcy53b3Jkc1tpXT0wfXZhciBqLHc7dmFyIG9mZj0wO2lmKGVuZGlhbj09PVwiYmVcIil7Zm9yKGk9bnVtYmVyLmxlbmd0aC0xLGo9MDtpPj0wO2ktPTMpe3c9bnVtYmVyW2ldfG51bWJlcltpLTFdPDw4fG51bWJlcltpLTJdPDwxNjt0aGlzLndvcmRzW2pdfD13PDxvZmYmNjcxMDg4NjM7dGhpcy53b3Jkc1tqKzFdPXc+Pj4yNi1vZmYmNjcxMDg4NjM7b2ZmKz0yNDtpZihvZmY+PTI2KXtvZmYtPTI2O2orK319fWVsc2UgaWYoZW5kaWFuPT09XCJsZVwiKXtmb3IoaT0wLGo9MDtpPG51bWJlci5sZW5ndGg7aSs9Myl7dz1udW1iZXJbaV18bnVtYmVyW2krMV08PDh8bnVtYmVyW2krMl08PDE2O3RoaXMud29yZHNbal18PXc8PG9mZiY2NzEwODg2Mzt0aGlzLndvcmRzW2orMV09dz4+PjI2LW9mZiY2NzEwODg2MztvZmYrPTI0O2lmKG9mZj49MjYpe29mZi09MjY7aisrfX19cmV0dXJuIHRoaXMuc3RyaXAoKX07ZnVuY3Rpb24gcGFyc2VIZXg0Qml0cyhzdHJpbmcsaW5kZXgpe3ZhciBjPXN0cmluZy5jaGFyQ29kZUF0KGluZGV4KTtpZihjPj02NSYmYzw9NzApe3JldHVybiBjLTU1fWVsc2UgaWYoYz49OTcmJmM8PTEwMil7cmV0dXJuIGMtODd9ZWxzZXtyZXR1cm4gYy00OCYxNX19ZnVuY3Rpb24gcGFyc2VIZXhCeXRlKHN0cmluZyxsb3dlckJvdW5kLGluZGV4KXt2YXIgcj1wYXJzZUhleDRCaXRzKHN0cmluZyxpbmRleCk7aWYoaW5kZXgtMT49bG93ZXJCb3VuZCl7cnw9cGFyc2VIZXg0Qml0cyhzdHJpbmcsaW5kZXgtMSk8PDR9cmV0dXJuIHJ9Qk4ucHJvdG90eXBlLl9wYXJzZUhleD1mdW5jdGlvbiBfcGFyc2VIZXgobnVtYmVyLHN0YXJ0LGVuZGlhbil7dGhpcy5sZW5ndGg9TWF0aC5jZWlsKChudW1iZXIubGVuZ3RoLXN0YXJ0KS82KTt0aGlzLndvcmRzPW5ldyBBcnJheSh0aGlzLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3RoaXMud29yZHNbaV09MH12YXIgb2ZmPTA7dmFyIGo9MDt2YXIgdztpZihlbmRpYW49PT1cImJlXCIpe2ZvcihpPW51bWJlci5sZW5ndGgtMTtpPj1zdGFydDtpLT0yKXt3PXBhcnNlSGV4Qnl0ZShudW1iZXIsc3RhcnQsaSk8PG9mZjt0aGlzLndvcmRzW2pdfD13JjY3MTA4ODYzO2lmKG9mZj49MTgpe29mZi09MTg7ais9MTt0aGlzLndvcmRzW2pdfD13Pj4+MjZ9ZWxzZXtvZmYrPTh9fX1lbHNle3ZhciBwYXJzZUxlbmd0aD1udW1iZXIubGVuZ3RoLXN0YXJ0O2ZvcihpPXBhcnNlTGVuZ3RoJTI9PT0wP3N0YXJ0KzE6c3RhcnQ7aTxudW1iZXIubGVuZ3RoO2krPTIpe3c9cGFyc2VIZXhCeXRlKG51bWJlcixzdGFydCxpKTw8b2ZmO3RoaXMud29yZHNbal18PXcmNjcxMDg4NjM7aWYob2ZmPj0xOCl7b2ZmLT0xODtqKz0xO3RoaXMud29yZHNbal18PXc+Pj4yNn1lbHNle29mZis9OH19fXRoaXMuc3RyaXAoKX07ZnVuY3Rpb24gcGFyc2VCYXNlKHN0cixzdGFydCxlbmQsbXVsKXt2YXIgcj0wO3ZhciBsZW49TWF0aC5taW4oc3RyLmxlbmd0aCxlbmQpO2Zvcih2YXIgaT1zdGFydDtpPGxlbjtpKyspe3ZhciBjPXN0ci5jaGFyQ29kZUF0KGkpLTQ4O3IqPW11bDtpZihjPj00OSl7cis9Yy00OSsxMH1lbHNlIGlmKGM+PTE3KXtyKz1jLTE3KzEwfWVsc2V7cis9Y319cmV0dXJuIHJ9Qk4ucHJvdG90eXBlLl9wYXJzZUJhc2U9ZnVuY3Rpb24gX3BhcnNlQmFzZShudW1iZXIsYmFzZSxzdGFydCl7dGhpcy53b3Jkcz1bMF07dGhpcy5sZW5ndGg9MTtmb3IodmFyIGxpbWJMZW49MCxsaW1iUG93PTE7bGltYlBvdzw9NjcxMDg4NjM7bGltYlBvdyo9YmFzZSl7bGltYkxlbisrfWxpbWJMZW4tLTtsaW1iUG93PWxpbWJQb3cvYmFzZXwwO3ZhciB0b3RhbD1udW1iZXIubGVuZ3RoLXN0YXJ0O3ZhciBtb2Q9dG90YWwlbGltYkxlbjt2YXIgZW5kPU1hdGgubWluKHRvdGFsLHRvdGFsLW1vZCkrc3RhcnQ7dmFyIHdvcmQ9MDtmb3IodmFyIGk9c3RhcnQ7aTxlbmQ7aSs9bGltYkxlbil7d29yZD1wYXJzZUJhc2UobnVtYmVyLGksaStsaW1iTGVuLGJhc2UpO3RoaXMuaW11bG4obGltYlBvdyk7aWYodGhpcy53b3Jkc1swXSt3b3JkPDY3MTA4ODY0KXt0aGlzLndvcmRzWzBdKz13b3JkfWVsc2V7dGhpcy5faWFkZG4od29yZCl9fWlmKG1vZCE9PTApe3ZhciBwb3c9MTt3b3JkPXBhcnNlQmFzZShudW1iZXIsaSxudW1iZXIubGVuZ3RoLGJhc2UpO2ZvcihpPTA7aTxtb2Q7aSsrKXtwb3cqPWJhc2V9dGhpcy5pbXVsbihwb3cpO2lmKHRoaXMud29yZHNbMF0rd29yZDw2NzEwODg2NCl7dGhpcy53b3Jkc1swXSs9d29yZH1lbHNle3RoaXMuX2lhZGRuKHdvcmQpfX10aGlzLnN0cmlwKCl9O0JOLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uIGNvcHkoZGVzdCl7ZGVzdC53b3Jkcz1uZXcgQXJyYXkodGhpcy5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8dGhpcy5sZW5ndGg7aSsrKXtkZXN0LndvcmRzW2ldPXRoaXMud29yZHNbaV19ZGVzdC5sZW5ndGg9dGhpcy5sZW5ndGg7ZGVzdC5uZWdhdGl2ZT10aGlzLm5lZ2F0aXZlO2Rlc3QucmVkPXRoaXMucmVkfTtCTi5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24gY2xvbmUoKXt2YXIgcj1uZXcgQk4obnVsbCk7dGhpcy5jb3B5KHIpO3JldHVybiByfTtCTi5wcm90b3R5cGUuX2V4cGFuZD1mdW5jdGlvbiBfZXhwYW5kKHNpemUpe3doaWxlKHRoaXMubGVuZ3RoPHNpemUpe3RoaXMud29yZHNbdGhpcy5sZW5ndGgrK109MH1yZXR1cm4gdGhpc307Qk4ucHJvdG90eXBlLnN0cmlwPWZ1bmN0aW9uIHN0cmlwKCl7d2hpbGUodGhpcy5sZW5ndGg+MSYmdGhpcy53b3Jkc1t0aGlzLmxlbmd0aC0xXT09PTApe3RoaXMubGVuZ3RoLS19cmV0dXJuIHRoaXMuX25vcm1TaWduKCl9O0JOLnByb3RvdHlwZS5fbm9ybVNpZ249ZnVuY3Rpb24gX25vcm1TaWduKCl7aWYodGhpcy5sZW5ndGg9PT0xJiZ0aGlzLndvcmRzWzBdPT09MCl7dGhpcy5uZWdhdGl2ZT0wfXJldHVybiB0aGlzfTtCTi5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbiBpbnNwZWN0KCl7cmV0dXJuKHRoaXMucmVkP1wiPEJOLVI6IFwiOlwiPEJOOiBcIikrdGhpcy50b1N0cmluZygxNikrXCI+XCJ9O3ZhciB6ZXJvcz1bXCJcIixcIjBcIixcIjAwXCIsXCIwMDBcIixcIjAwMDBcIixcIjAwMDAwXCIsXCIwMDAwMDBcIixcIjAwMDAwMDBcIixcIjAwMDAwMDAwXCIsXCIwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIl07dmFyIGdyb3VwU2l6ZXM9WzAsMCwyNSwxNiwxMiwxMSwxMCw5LDgsOCw3LDcsNyw3LDYsNiw2LDYsNiw2LDYsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNV07dmFyIGdyb3VwQmFzZXM9WzAsMCwzMzU1NDQzMiw0MzA0NjcyMSwxNjc3NzIxNiw0ODgyODEyNSw2MDQ2NjE3Niw0MDM1MzYwNywxNjc3NzIxNiw0MzA0NjcyMSwxZTcsMTk0ODcxNzEsMzU4MzE4MDgsNjI3NDg1MTcsNzUyOTUzNiwxMTM5MDYyNSwxNjc3NzIxNiwyNDEzNzU2OSwzNDAxMjIyNCw0NzA0NTg4MSw2NGU2LDQwODQxMDEsNTE1MzYzMiw2NDM2MzQzLDc5NjI2MjQsOTc2NTYyNSwxMTg4MTM3NiwxNDM0ODkwNywxNzIxMDM2OCwyMDUxMTE0OSwyNDNlNSwyODYyOTE1MSwzMzU1NDQzMiwzOTEzNTM5Myw0NTQzNTQyNCw1MjUyMTg3NSw2MDQ2NjE3Nl07Qk4ucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uIHRvU3RyaW5nKGJhc2UscGFkZGluZyl7YmFzZT1iYXNlfHwxMDtwYWRkaW5nPXBhZGRpbmd8MHx8MTt2YXIgb3V0O2lmKGJhc2U9PT0xNnx8YmFzZT09PVwiaGV4XCIpe291dD1cIlwiO3ZhciBvZmY9MDt2YXIgY2Fycnk9MDtmb3IodmFyIGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7dmFyIHc9dGhpcy53b3Jkc1tpXTt2YXIgd29yZD0oKHc8PG9mZnxjYXJyeSkmMTY3NzcyMTUpLnRvU3RyaW5nKDE2KTtjYXJyeT13Pj4+MjQtb2ZmJjE2Nzc3MjE1O2lmKGNhcnJ5IT09MHx8aSE9PXRoaXMubGVuZ3RoLTEpe291dD16ZXJvc1s2LXdvcmQubGVuZ3RoXSt3b3JkK291dH1lbHNle291dD13b3JkK291dH1vZmYrPTI7aWYob2ZmPj0yNil7b2ZmLT0yNjtpLS19fWlmKGNhcnJ5IT09MCl7b3V0PWNhcnJ5LnRvU3RyaW5nKDE2KStvdXR9d2hpbGUob3V0Lmxlbmd0aCVwYWRkaW5nIT09MCl7b3V0PVwiMFwiK291dH1pZih0aGlzLm5lZ2F0aXZlIT09MCl7b3V0PVwiLVwiK291dH1yZXR1cm4gb3V0fWlmKGJhc2U9PT0oYmFzZXwwKSYmYmFzZT49MiYmYmFzZTw9MzYpe3ZhciBncm91cFNpemU9Z3JvdXBTaXplc1tiYXNlXTt2YXIgZ3JvdXBCYXNlPWdyb3VwQmFzZXNbYmFzZV07b3V0PVwiXCI7dmFyIGM9dGhpcy5jbG9uZSgpO2MubmVnYXRpdmU9MDt3aGlsZSghYy5pc1plcm8oKSl7dmFyIHI9Yy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7Yz1jLmlkaXZuKGdyb3VwQmFzZSk7aWYoIWMuaXNaZXJvKCkpe291dD16ZXJvc1tncm91cFNpemUtci5sZW5ndGhdK3Irb3V0fWVsc2V7b3V0PXIrb3V0fX1pZih0aGlzLmlzWmVybygpKXtvdXQ9XCIwXCIrb3V0fXdoaWxlKG91dC5sZW5ndGglcGFkZGluZyE9PTApe291dD1cIjBcIitvdXR9aWYodGhpcy5uZWdhdGl2ZSE9PTApe291dD1cIi1cIitvdXR9cmV0dXJuIG91dH1hc3NlcnQoZmFsc2UsXCJCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2XCIpfTtCTi5wcm90b3R5cGUudG9OdW1iZXI9ZnVuY3Rpb24gdG9OdW1iZXIoKXt2YXIgcmV0PXRoaXMud29yZHNbMF07aWYodGhpcy5sZW5ndGg9PT0yKXtyZXQrPXRoaXMud29yZHNbMV0qNjcxMDg4NjR9ZWxzZSBpZih0aGlzLmxlbmd0aD09PTMmJnRoaXMud29yZHNbMl09PT0xKXtyZXQrPTQ1MDM1OTk2MjczNzA0OTYrdGhpcy53b3Jkc1sxXSo2NzEwODg2NH1lbHNlIGlmKHRoaXMubGVuZ3RoPjIpe2Fzc2VydChmYWxzZSxcIk51bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0c1wiKX1yZXR1cm4gdGhpcy5uZWdhdGl2ZSE9PTA/LXJldDpyZXR9O0JOLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24gdG9KU09OKCl7cmV0dXJuIHRoaXMudG9TdHJpbmcoMTYpfTtCTi5wcm90b3R5cGUudG9CdWZmZXI9ZnVuY3Rpb24gdG9CdWZmZXIoZW5kaWFuLGxlbmd0aCl7YXNzZXJ0KHR5cGVvZiBCdWZmZXIhPT1cInVuZGVmaW5lZFwiKTtyZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsZW5kaWFuLGxlbmd0aCl9O0JOLnByb3RvdHlwZS50b0FycmF5PWZ1bmN0aW9uIHRvQXJyYXkoZW5kaWFuLGxlbmd0aCl7cmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksZW5kaWFuLGxlbmd0aCl9O0JOLnByb3RvdHlwZS50b0FycmF5TGlrZT1mdW5jdGlvbiB0b0FycmF5TGlrZShBcnJheVR5cGUsZW5kaWFuLGxlbmd0aCl7dmFyIGJ5dGVMZW5ndGg9dGhpcy5ieXRlTGVuZ3RoKCk7dmFyIHJlcUxlbmd0aD1sZW5ndGh8fE1hdGgubWF4KDEsYnl0ZUxlbmd0aCk7YXNzZXJ0KGJ5dGVMZW5ndGg8PXJlcUxlbmd0aCxcImJ5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGhcIik7YXNzZXJ0KHJlcUxlbmd0aD4wLFwiUmVxdWVzdGVkIGFycmF5IGxlbmd0aCA8PSAwXCIpO3RoaXMuc3RyaXAoKTt2YXIgbGl0dGxlRW5kaWFuPWVuZGlhbj09PVwibGVcIjt2YXIgcmVzPW5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTt2YXIgYixpO3ZhciBxPXRoaXMuY2xvbmUoKTtpZighbGl0dGxlRW5kaWFuKXtmb3IoaT0wO2k8cmVxTGVuZ3RoLWJ5dGVMZW5ndGg7aSsrKXtyZXNbaV09MH1mb3IoaT0wOyFxLmlzWmVybygpO2krKyl7Yj1xLmFuZGxuKDI1NSk7cS5pdXNocm4oOCk7cmVzW3JlcUxlbmd0aC1pLTFdPWJ9fWVsc2V7Zm9yKGk9MDshcS5pc1plcm8oKTtpKyspe2I9cS5hbmRsbigyNTUpO3EuaXVzaHJuKDgpO3Jlc1tpXT1ifWZvcig7aTxyZXFMZW5ndGg7aSsrKXtyZXNbaV09MH19cmV0dXJuIHJlc307aWYoTWF0aC5jbHozMil7Qk4ucHJvdG90eXBlLl9jb3VudEJpdHM9ZnVuY3Rpb24gX2NvdW50Qml0cyh3KXtyZXR1cm4gMzItTWF0aC5jbHozMih3KX19ZWxzZXtCTi5wcm90b3R5cGUuX2NvdW50Qml0cz1mdW5jdGlvbiBfY291bnRCaXRzKHcpe3ZhciB0PXc7dmFyIHI9MDtpZih0Pj00MDk2KXtyKz0xMzt0Pj4+PTEzfWlmKHQ+PTY0KXtyKz03O3Q+Pj49N31pZih0Pj04KXtyKz00O3Q+Pj49NH1pZih0Pj0yKXtyKz0yO3Q+Pj49Mn1yZXR1cm4gcit0fX1CTi5wcm90b3R5cGUuX3plcm9CaXRzPWZ1bmN0aW9uIF96ZXJvQml0cyh3KXtpZih3PT09MClyZXR1cm4gMjY7dmFyIHQ9dzt2YXIgcj0wO2lmKCh0JjgxOTEpPT09MCl7cis9MTM7dD4+Pj0xM31pZigodCYxMjcpPT09MCl7cis9Nzt0Pj4+PTd9aWYoKHQmMTUpPT09MCl7cis9NDt0Pj4+PTR9aWYoKHQmMyk9PT0wKXtyKz0yO3Q+Pj49Mn1pZigodCYxKT09PTApe3IrK31yZXR1cm4gcn07Qk4ucHJvdG90eXBlLmJpdExlbmd0aD1mdW5jdGlvbiBiaXRMZW5ndGgoKXt2YXIgdz10aGlzLndvcmRzW3RoaXMubGVuZ3RoLTFdO3ZhciBoaT10aGlzLl9jb3VudEJpdHModyk7cmV0dXJuKHRoaXMubGVuZ3RoLTEpKjI2K2hpfTtmdW5jdGlvbiB0b0JpdEFycmF5KG51bSl7dmFyIHc9bmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7Zm9yKHZhciBiaXQ9MDtiaXQ8dy5sZW5ndGg7Yml0Kyspe3ZhciBvZmY9Yml0LzI2fDA7dmFyIHdiaXQ9Yml0JTI2O3dbYml0XT0obnVtLndvcmRzW29mZl0mMTw8d2JpdCk+Pj53Yml0fXJldHVybiB3fUJOLnByb3RvdHlwZS56ZXJvQml0cz1mdW5jdGlvbiB6ZXJvQml0cygpe2lmKHRoaXMuaXNaZXJvKCkpcmV0dXJuIDA7dmFyIHI9MDtmb3IodmFyIGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7dmFyIGI9dGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7cis9YjtpZihiIT09MjYpYnJlYWt9cmV0dXJuIHJ9O0JOLnByb3RvdHlwZS5ieXRlTGVuZ3RoPWZ1bmN0aW9uIGJ5dGVMZW5ndGgoKXtyZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkvOCl9O0JOLnByb3RvdHlwZS50b1R3b3M9ZnVuY3Rpb24gdG9Ud29zKHdpZHRoKXtpZih0aGlzLm5lZ2F0aXZlIT09MCl7cmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpfXJldHVybiB0aGlzLmNsb25lKCl9O0JOLnByb3RvdHlwZS5mcm9tVHdvcz1mdW5jdGlvbiBmcm9tVHdvcyh3aWR0aCl7aWYodGhpcy50ZXN0bih3aWR0aC0xKSl7cmV0dXJuIHRoaXMubm90bih3aWR0aCkuaWFkZG4oMSkuaW5lZygpfXJldHVybiB0aGlzLmNsb25lKCl9O0JOLnByb3RvdHlwZS5pc05lZz1mdW5jdGlvbiBpc05lZygpe3JldHVybiB0aGlzLm5lZ2F0aXZlIT09MH07Qk4ucHJvdG90eXBlLm5lZz1mdW5jdGlvbiBuZWcoKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKX07Qk4ucHJvdG90eXBlLmluZWc9ZnVuY3Rpb24gaW5lZygpe2lmKCF0aGlzLmlzWmVybygpKXt0aGlzLm5lZ2F0aXZlXj0xfXJldHVybiB0aGlzfTtCTi5wcm90b3R5cGUuaXVvcj1mdW5jdGlvbiBpdW9yKG51bSl7d2hpbGUodGhpcy5sZW5ndGg8bnVtLmxlbmd0aCl7dGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXT0wfWZvcih2YXIgaT0wO2k8bnVtLmxlbmd0aDtpKyspe3RoaXMud29yZHNbaV09dGhpcy53b3Jkc1tpXXxudW0ud29yZHNbaV19cmV0dXJuIHRoaXMuc3RyaXAoKX07Qk4ucHJvdG90eXBlLmlvcj1mdW5jdGlvbiBpb3IobnVtKXthc3NlcnQoKHRoaXMubmVnYXRpdmV8bnVtLm5lZ2F0aXZlKT09PTApO3JldHVybiB0aGlzLml1b3IobnVtKX07Qk4ucHJvdG90eXBlLm9yPWZ1bmN0aW9uIG9yKG51bSl7aWYodGhpcy5sZW5ndGg+bnVtLmxlbmd0aClyZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO3JldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyl9O0JOLnByb3RvdHlwZS51b3I9ZnVuY3Rpb24gdW9yKG51bSl7aWYodGhpcy5sZW5ndGg+bnVtLmxlbmd0aClyZXR1cm4gdGhpcy5jbG9uZSgpLml1b3IobnVtKTtyZXR1cm4gbnVtLmNsb25lKCkuaXVvcih0aGlzKX07Qk4ucHJvdG90eXBlLml1YW5kPWZ1bmN0aW9uIGl1YW5kKG51bSl7dmFyIGI7aWYodGhpcy5sZW5ndGg+bnVtLmxlbmd0aCl7Yj1udW19ZWxzZXtiPXRoaXN9Zm9yKHZhciBpPTA7aTxiLmxlbmd0aDtpKyspe3RoaXMud29yZHNbaV09dGhpcy53b3Jkc1tpXSZudW0ud29yZHNbaV19dGhpcy5sZW5ndGg9Yi5sZW5ndGg7cmV0dXJuIHRoaXMuc3RyaXAoKX07Qk4ucHJvdG90eXBlLmlhbmQ9ZnVuY3Rpb24gaWFuZChudW0pe2Fzc2VydCgodGhpcy5uZWdhdGl2ZXxudW0ubmVnYXRpdmUpPT09MCk7cmV0dXJuIHRoaXMuaXVhbmQobnVtKX07Qk4ucHJvdG90eXBlLmFuZD1mdW5jdGlvbiBhbmQobnVtKXtpZih0aGlzLmxlbmd0aD5udW0ubGVuZ3RoKXJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO3JldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpfTtCTi5wcm90b3R5cGUudWFuZD1mdW5jdGlvbiB1YW5kKG51bSl7aWYodGhpcy5sZW5ndGg+bnVtLmxlbmd0aClyZXR1cm4gdGhpcy5jbG9uZSgpLml1YW5kKG51bSk7cmV0dXJuIG51bS5jbG9uZSgpLml1YW5kKHRoaXMpfTtCTi5wcm90b3R5cGUuaXV4b3I9ZnVuY3Rpb24gaXV4b3IobnVtKXt2YXIgYTt2YXIgYjtpZih0aGlzLmxlbmd0aD5udW0ubGVuZ3RoKXthPXRoaXM7Yj1udW19ZWxzZXthPW51bTtiPXRoaXN9Zm9yKHZhciBpPTA7aTxiLmxlbmd0aDtpKyspe3RoaXMud29yZHNbaV09YS53b3Jkc1tpXV5iLndvcmRzW2ldfWlmKHRoaXMhPT1hKXtmb3IoO2k8YS5sZW5ndGg7aSsrKXt0aGlzLndvcmRzW2ldPWEud29yZHNbaV19fXRoaXMubGVuZ3RoPWEubGVuZ3RoO3JldHVybiB0aGlzLnN0cmlwKCl9O0JOLnByb3RvdHlwZS5peG9yPWZ1bmN0aW9uIGl4b3IobnVtKXthc3NlcnQoKHRoaXMubmVnYXRpdmV8bnVtLm5lZ2F0aXZlKT09PTApO3JldHVybiB0aGlzLml1eG9yKG51bSl9O0JOLnByb3RvdHlwZS54b3I9ZnVuY3Rpb24geG9yKG51bSl7aWYodGhpcy5sZW5ndGg+bnVtLmxlbmd0aClyZXR1cm4gdGhpcy5jbG9uZSgpLml4b3IobnVtKTtyZXR1cm4gbnVtLmNsb25lKCkuaXhvcih0aGlzKX07Qk4ucHJvdG90eXBlLnV4b3I9ZnVuY3Rpb24gdXhvcihudW0pe2lmKHRoaXMubGVuZ3RoPm51bS5sZW5ndGgpcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO3JldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKX07Qk4ucHJvdG90eXBlLmlub3RuPWZ1bmN0aW9uIGlub3RuKHdpZHRoKXthc3NlcnQodHlwZW9mIHdpZHRoPT09XCJudW1iZXJcIiYmd2lkdGg+PTApO3ZhciBieXRlc05lZWRlZD1NYXRoLmNlaWwod2lkdGgvMjYpfDA7dmFyIGJpdHNMZWZ0PXdpZHRoJTI2O3RoaXMuX2V4cGFuZChieXRlc05lZWRlZCk7aWYoYml0c0xlZnQ+MCl7Ynl0ZXNOZWVkZWQtLX1mb3IodmFyIGk9MDtpPGJ5dGVzTmVlZGVkO2krKyl7dGhpcy53b3Jkc1tpXT1+dGhpcy53b3Jkc1tpXSY2NzEwODg2M31pZihiaXRzTGVmdD4wKXt0aGlzLndvcmRzW2ldPX50aGlzLndvcmRzW2ldJjY3MTA4ODYzPj4yNi1iaXRzTGVmdH1yZXR1cm4gdGhpcy5zdHJpcCgpfTtCTi5wcm90b3R5cGUubm90bj1mdW5jdGlvbiBub3RuKHdpZHRoKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKX07Qk4ucHJvdG90eXBlLnNldG49ZnVuY3Rpb24gc2V0bihiaXQsdmFsKXthc3NlcnQodHlwZW9mIGJpdD09PVwibnVtYmVyXCImJmJpdD49MCk7dmFyIG9mZj1iaXQvMjZ8MDt2YXIgd2JpdD1iaXQlMjY7dGhpcy5fZXhwYW5kKG9mZisxKTtpZih2YWwpe3RoaXMud29yZHNbb2ZmXT10aGlzLndvcmRzW29mZl18MTw8d2JpdH1lbHNle3RoaXMud29yZHNbb2ZmXT10aGlzLndvcmRzW29mZl0mfigxPDx3Yml0KX1yZXR1cm4gdGhpcy5zdHJpcCgpfTtCTi5wcm90b3R5cGUuaWFkZD1mdW5jdGlvbiBpYWRkKG51bSl7dmFyIHI7aWYodGhpcy5uZWdhdGl2ZSE9PTAmJm51bS5uZWdhdGl2ZT09PTApe3RoaXMubmVnYXRpdmU9MDtyPXRoaXMuaXN1YihudW0pO3RoaXMubmVnYXRpdmVePTE7cmV0dXJuIHRoaXMuX25vcm1TaWduKCl9ZWxzZSBpZih0aGlzLm5lZ2F0aXZlPT09MCYmbnVtLm5lZ2F0aXZlIT09MCl7bnVtLm5lZ2F0aXZlPTA7cj10aGlzLmlzdWIobnVtKTtudW0ubmVnYXRpdmU9MTtyZXR1cm4gci5fbm9ybVNpZ24oKX12YXIgYSxiO2lmKHRoaXMubGVuZ3RoPm51bS5sZW5ndGgpe2E9dGhpcztiPW51bX1lbHNle2E9bnVtO2I9dGhpc312YXIgY2Fycnk9MDtmb3IodmFyIGk9MDtpPGIubGVuZ3RoO2krKyl7cj0oYS53b3Jkc1tpXXwwKSsoYi53b3Jkc1tpXXwwKStjYXJyeTt0aGlzLndvcmRzW2ldPXImNjcxMDg4NjM7Y2Fycnk9cj4+PjI2fWZvcig7Y2FycnkhPT0wJiZpPGEubGVuZ3RoO2krKyl7cj0oYS53b3Jkc1tpXXwwKStjYXJyeTt0aGlzLndvcmRzW2ldPXImNjcxMDg4NjM7Y2Fycnk9cj4+PjI2fXRoaXMubGVuZ3RoPWEubGVuZ3RoO2lmKGNhcnJ5IT09MCl7dGhpcy53b3Jkc1t0aGlzLmxlbmd0aF09Y2Fycnk7dGhpcy5sZW5ndGgrK31lbHNlIGlmKGEhPT10aGlzKXtmb3IoO2k8YS5sZW5ndGg7aSsrKXt0aGlzLndvcmRzW2ldPWEud29yZHNbaV19fXJldHVybiB0aGlzfTtCTi5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uIGFkZChudW0pe3ZhciByZXM7aWYobnVtLm5lZ2F0aXZlIT09MCYmdGhpcy5uZWdhdGl2ZT09PTApe251bS5uZWdhdGl2ZT0wO3Jlcz10aGlzLnN1YihudW0pO251bS5uZWdhdGl2ZV49MTtyZXR1cm4gcmVzfWVsc2UgaWYobnVtLm5lZ2F0aXZlPT09MCYmdGhpcy5uZWdhdGl2ZSE9PTApe3RoaXMubmVnYXRpdmU9MDtyZXM9bnVtLnN1Yih0aGlzKTt0aGlzLm5lZ2F0aXZlPTE7cmV0dXJuIHJlc31pZih0aGlzLmxlbmd0aD5udW0ubGVuZ3RoKXJldHVybiB0aGlzLmNsb25lKCkuaWFkZChudW0pO3JldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpfTtCTi5wcm90b3R5cGUuaXN1Yj1mdW5jdGlvbiBpc3ViKG51bSl7aWYobnVtLm5lZ2F0aXZlIT09MCl7bnVtLm5lZ2F0aXZlPTA7dmFyIHI9dGhpcy5pYWRkKG51bSk7bnVtLm5lZ2F0aXZlPTE7cmV0dXJuIHIuX25vcm1TaWduKCl9ZWxzZSBpZih0aGlzLm5lZ2F0aXZlIT09MCl7dGhpcy5uZWdhdGl2ZT0wO3RoaXMuaWFkZChudW0pO3RoaXMubmVnYXRpdmU9MTtyZXR1cm4gdGhpcy5fbm9ybVNpZ24oKX12YXIgY21wPXRoaXMuY21wKG51bSk7aWYoY21wPT09MCl7dGhpcy5uZWdhdGl2ZT0wO3RoaXMubGVuZ3RoPTE7dGhpcy53b3Jkc1swXT0wO3JldHVybiB0aGlzfXZhciBhLGI7aWYoY21wPjApe2E9dGhpcztiPW51bX1lbHNle2E9bnVtO2I9dGhpc312YXIgY2Fycnk9MDtmb3IodmFyIGk9MDtpPGIubGVuZ3RoO2krKyl7cj0oYS53b3Jkc1tpXXwwKS0oYi53b3Jkc1tpXXwwKStjYXJyeTtjYXJyeT1yPj4yNjt0aGlzLndvcmRzW2ldPXImNjcxMDg4NjN9Zm9yKDtjYXJyeSE9PTAmJmk8YS5sZW5ndGg7aSsrKXtyPShhLndvcmRzW2ldfDApK2NhcnJ5O2NhcnJ5PXI+PjI2O3RoaXMud29yZHNbaV09ciY2NzEwODg2M31pZihjYXJyeT09PTAmJmk8YS5sZW5ndGgmJmEhPT10aGlzKXtmb3IoO2k8YS5sZW5ndGg7aSsrKXt0aGlzLndvcmRzW2ldPWEud29yZHNbaV19fXRoaXMubGVuZ3RoPU1hdGgubWF4KHRoaXMubGVuZ3RoLGkpO2lmKGEhPT10aGlzKXt0aGlzLm5lZ2F0aXZlPTF9cmV0dXJuIHRoaXMuc3RyaXAoKX07Qk4ucHJvdG90eXBlLnN1Yj1mdW5jdGlvbiBzdWIobnVtKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKX07ZnVuY3Rpb24gc21hbGxNdWxUbyhzZWxmLG51bSxvdXQpe291dC5uZWdhdGl2ZT1udW0ubmVnYXRpdmVec2VsZi5uZWdhdGl2ZTt2YXIgbGVuPXNlbGYubGVuZ3RoK251bS5sZW5ndGh8MDtvdXQubGVuZ3RoPWxlbjtsZW49bGVuLTF8MDt2YXIgYT1zZWxmLndvcmRzWzBdfDA7dmFyIGI9bnVtLndvcmRzWzBdfDA7dmFyIHI9YSpiO3ZhciBsbz1yJjY3MTA4ODYzO3ZhciBjYXJyeT1yLzY3MTA4ODY0fDA7b3V0LndvcmRzWzBdPWxvO2Zvcih2YXIgaz0xO2s8bGVuO2srKyl7dmFyIG5jYXJyeT1jYXJyeT4+PjI2O3ZhciByd29yZD1jYXJyeSY2NzEwODg2Mzt2YXIgbWF4Sj1NYXRoLm1pbihrLG51bS5sZW5ndGgtMSk7Zm9yKHZhciBqPU1hdGgubWF4KDAsay1zZWxmLmxlbmd0aCsxKTtqPD1tYXhKO2orKyl7dmFyIGk9ay1qfDA7YT1zZWxmLndvcmRzW2ldfDA7Yj1udW0ud29yZHNbal18MDtyPWEqYityd29yZDtuY2FycnkrPXIvNjcxMDg4NjR8MDtyd29yZD1yJjY3MTA4ODYzfW91dC53b3Jkc1trXT1yd29yZHwwO2NhcnJ5PW5jYXJyeXwwfWlmKGNhcnJ5IT09MCl7b3V0LndvcmRzW2tdPWNhcnJ5fDB9ZWxzZXtvdXQubGVuZ3RoLS19cmV0dXJuIG91dC5zdHJpcCgpfXZhciBjb21iMTBNdWxUbz1mdW5jdGlvbiBjb21iMTBNdWxUbyhzZWxmLG51bSxvdXQpe3ZhciBhPXNlbGYud29yZHM7dmFyIGI9bnVtLndvcmRzO3ZhciBvPW91dC53b3Jkczt2YXIgYz0wO3ZhciBsbzt2YXIgbWlkO3ZhciBoaTt2YXIgYTA9YVswXXwwO3ZhciBhbDA9YTAmODE5MTt2YXIgYWgwPWEwPj4+MTM7dmFyIGExPWFbMV18MDt2YXIgYWwxPWExJjgxOTE7dmFyIGFoMT1hMT4+PjEzO3ZhciBhMj1hWzJdfDA7dmFyIGFsMj1hMiY4MTkxO3ZhciBhaDI9YTI+Pj4xMzt2YXIgYTM9YVszXXwwO3ZhciBhbDM9YTMmODE5MTt2YXIgYWgzPWEzPj4+MTM7dmFyIGE0PWFbNF18MDt2YXIgYWw0PWE0JjgxOTE7dmFyIGFoND1hND4+PjEzO3ZhciBhNT1hWzVdfDA7dmFyIGFsNT1hNSY4MTkxO3ZhciBhaDU9YTU+Pj4xMzt2YXIgYTY9YVs2XXwwO3ZhciBhbDY9YTYmODE5MTt2YXIgYWg2PWE2Pj4+MTM7dmFyIGE3PWFbN118MDt2YXIgYWw3PWE3JjgxOTE7dmFyIGFoNz1hNz4+PjEzO3ZhciBhOD1hWzhdfDA7dmFyIGFsOD1hOCY4MTkxO3ZhciBhaDg9YTg+Pj4xMzt2YXIgYTk9YVs5XXwwO3ZhciBhbDk9YTkmODE5MTt2YXIgYWg5PWE5Pj4+MTM7dmFyIGIwPWJbMF18MDt2YXIgYmwwPWIwJjgxOTE7dmFyIGJoMD1iMD4+PjEzO3ZhciBiMT1iWzFdfDA7dmFyIGJsMT1iMSY4MTkxO3ZhciBiaDE9YjE+Pj4xMzt2YXIgYjI9YlsyXXwwO3ZhciBibDI9YjImODE5MTt2YXIgYmgyPWIyPj4+MTM7dmFyIGIzPWJbM118MDt2YXIgYmwzPWIzJjgxOTE7dmFyIGJoMz1iMz4+PjEzO3ZhciBiND1iWzRdfDA7dmFyIGJsND1iNCY4MTkxO3ZhciBiaDQ9YjQ+Pj4xMzt2YXIgYjU9Yls1XXwwO3ZhciBibDU9YjUmODE5MTt2YXIgYmg1PWI1Pj4+MTM7dmFyIGI2PWJbNl18MDt2YXIgYmw2PWI2JjgxOTE7dmFyIGJoNj1iNj4+PjEzO3ZhciBiNz1iWzddfDA7dmFyIGJsNz1iNyY4MTkxO3ZhciBiaDc9Yjc+Pj4xMzt2YXIgYjg9Yls4XXwwO3ZhciBibDg9YjgmODE5MTt2YXIgYmg4PWI4Pj4+MTM7dmFyIGI5PWJbOV18MDt2YXIgYmw5PWI5JjgxOTE7dmFyIGJoOT1iOT4+PjEzO291dC5uZWdhdGl2ZT1zZWxmLm5lZ2F0aXZlXm51bS5uZWdhdGl2ZTtvdXQubGVuZ3RoPTE5O2xvPU1hdGguaW11bChhbDAsYmwwKTttaWQ9TWF0aC5pbXVsKGFsMCxiaDApO21pZD1taWQrTWF0aC5pbXVsKGFoMCxibDApfDA7aGk9TWF0aC5pbXVsKGFoMCxiaDApO3ZhciB3MD0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzA+Pj4yNil8MDt3MCY9NjcxMDg4NjM7bG89TWF0aC5pbXVsKGFsMSxibDApO21pZD1NYXRoLmltdWwoYWwxLGJoMCk7bWlkPW1pZCtNYXRoLmltdWwoYWgxLGJsMCl8MDtoaT1NYXRoLmltdWwoYWgxLGJoMCk7bG89bG8rTWF0aC5pbXVsKGFsMCxibDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwwLGJoMSl8MDttaWQ9bWlkK01hdGguaW11bChhaDAsYmwxKXwwO2hpPWhpK01hdGguaW11bChhaDAsYmgxKXwwO3ZhciB3MT0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzE+Pj4yNil8MDt3MSY9NjcxMDg4NjM7bG89TWF0aC5pbXVsKGFsMixibDApO21pZD1NYXRoLmltdWwoYWwyLGJoMCk7bWlkPW1pZCtNYXRoLmltdWwoYWgyLGJsMCl8MDtoaT1NYXRoLmltdWwoYWgyLGJoMCk7bG89bG8rTWF0aC5pbXVsKGFsMSxibDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwxLGJoMSl8MDttaWQ9bWlkK01hdGguaW11bChhaDEsYmwxKXwwO2hpPWhpK01hdGguaW11bChhaDEsYmgxKXwwO2xvPWxvK01hdGguaW11bChhbDAsYmwyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMCxiaDIpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgwLGJsMil8MDtoaT1oaStNYXRoLmltdWwoYWgwLGJoMil8MDt2YXIgdzI9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHcyPj4+MjYpfDA7dzImPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDMsYmwwKTttaWQ9TWF0aC5pbXVsKGFsMyxiaDApO21pZD1taWQrTWF0aC5pbXVsKGFoMyxibDApfDA7aGk9TWF0aC5pbXVsKGFoMyxiaDApO2xvPWxvK01hdGguaW11bChhbDIsYmwxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMixiaDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgyLGJsMSl8MDtoaT1oaStNYXRoLmltdWwoYWgyLGJoMSl8MDtsbz1sbytNYXRoLmltdWwoYWwxLGJsMil8MDttaWQ9bWlkK01hdGguaW11bChhbDEsYmgyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMSxibDIpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMSxiaDIpfDA7bG89bG8rTWF0aC5pbXVsKGFsMCxibDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwwLGJoMyl8MDttaWQ9bWlkK01hdGguaW11bChhaDAsYmwzKXwwO2hpPWhpK01hdGguaW11bChhaDAsYmgzKXwwO3ZhciB3Mz0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzM+Pj4yNil8MDt3MyY9NjcxMDg4NjM7bG89TWF0aC5pbXVsKGFsNCxibDApO21pZD1NYXRoLmltdWwoYWw0LGJoMCk7bWlkPW1pZCtNYXRoLmltdWwoYWg0LGJsMCl8MDtoaT1NYXRoLmltdWwoYWg0LGJoMCk7bG89bG8rTWF0aC5pbXVsKGFsMyxibDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwzLGJoMSl8MDttaWQ9bWlkK01hdGguaW11bChhaDMsYmwxKXwwO2hpPWhpK01hdGguaW11bChhaDMsYmgxKXwwO2xvPWxvK01hdGguaW11bChhbDIsYmwyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMixiaDIpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgyLGJsMil8MDtoaT1oaStNYXRoLmltdWwoYWgyLGJoMil8MDtsbz1sbytNYXRoLmltdWwoYWwxLGJsMyl8MDttaWQ9bWlkK01hdGguaW11bChhbDEsYmgzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMSxibDMpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMSxiaDMpfDA7bG89bG8rTWF0aC5pbXVsKGFsMCxibDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwwLGJoNCl8MDttaWQ9bWlkK01hdGguaW11bChhaDAsYmw0KXwwO2hpPWhpK01hdGguaW11bChhaDAsYmg0KXwwO3ZhciB3ND0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzQ+Pj4yNil8MDt3NCY9NjcxMDg4NjM7bG89TWF0aC5pbXVsKGFsNSxibDApO21pZD1NYXRoLmltdWwoYWw1LGJoMCk7bWlkPW1pZCtNYXRoLmltdWwoYWg1LGJsMCl8MDtoaT1NYXRoLmltdWwoYWg1LGJoMCk7bG89bG8rTWF0aC5pbXVsKGFsNCxibDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw0LGJoMSl8MDttaWQ9bWlkK01hdGguaW11bChhaDQsYmwxKXwwO2hpPWhpK01hdGguaW11bChhaDQsYmgxKXwwO2xvPWxvK01hdGguaW11bChhbDMsYmwyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMyxiaDIpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgzLGJsMil8MDtoaT1oaStNYXRoLmltdWwoYWgzLGJoMil8MDtsbz1sbytNYXRoLmltdWwoYWwyLGJsMyl8MDttaWQ9bWlkK01hdGguaW11bChhbDIsYmgzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMixibDMpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMixiaDMpfDA7bG89bG8rTWF0aC5pbXVsKGFsMSxibDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwxLGJoNCl8MDttaWQ9bWlkK01hdGguaW11bChhaDEsYmw0KXwwO2hpPWhpK01hdGguaW11bChhaDEsYmg0KXwwO2xvPWxvK01hdGguaW11bChhbDAsYmw1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMCxiaDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgwLGJsNSl8MDtoaT1oaStNYXRoLmltdWwoYWgwLGJoNSl8MDt2YXIgdzU9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHc1Pj4+MjYpfDA7dzUmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDYsYmwwKTttaWQ9TWF0aC5pbXVsKGFsNixiaDApO21pZD1taWQrTWF0aC5pbXVsKGFoNixibDApfDA7aGk9TWF0aC5pbXVsKGFoNixiaDApO2xvPWxvK01hdGguaW11bChhbDUsYmwxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNSxiaDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg1LGJsMSl8MDtoaT1oaStNYXRoLmltdWwoYWg1LGJoMSl8MDtsbz1sbytNYXRoLmltdWwoYWw0LGJsMil8MDttaWQ9bWlkK01hdGguaW11bChhbDQsYmgyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNCxibDIpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNCxiaDIpfDA7bG89bG8rTWF0aC5pbXVsKGFsMyxibDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwzLGJoMyl8MDttaWQ9bWlkK01hdGguaW11bChhaDMsYmwzKXwwO2hpPWhpK01hdGguaW11bChhaDMsYmgzKXwwO2xvPWxvK01hdGguaW11bChhbDIsYmw0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMixiaDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgyLGJsNCl8MDtoaT1oaStNYXRoLmltdWwoYWgyLGJoNCl8MDtsbz1sbytNYXRoLmltdWwoYWwxLGJsNSl8MDttaWQ9bWlkK01hdGguaW11bChhbDEsYmg1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMSxibDUpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMSxiaDUpfDA7bG89bG8rTWF0aC5pbXVsKGFsMCxibDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwwLGJoNil8MDttaWQ9bWlkK01hdGguaW11bChhaDAsYmw2KXwwO2hpPWhpK01hdGguaW11bChhaDAsYmg2KXwwO3ZhciB3Nj0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzY+Pj4yNil8MDt3NiY9NjcxMDg4NjM7bG89TWF0aC5pbXVsKGFsNyxibDApO21pZD1NYXRoLmltdWwoYWw3LGJoMCk7bWlkPW1pZCtNYXRoLmltdWwoYWg3LGJsMCl8MDtoaT1NYXRoLmltdWwoYWg3LGJoMCk7bG89bG8rTWF0aC5pbXVsKGFsNixibDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw2LGJoMSl8MDttaWQ9bWlkK01hdGguaW11bChhaDYsYmwxKXwwO2hpPWhpK01hdGguaW11bChhaDYsYmgxKXwwO2xvPWxvK01hdGguaW11bChhbDUsYmwyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNSxiaDIpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg1LGJsMil8MDtoaT1oaStNYXRoLmltdWwoYWg1LGJoMil8MDtsbz1sbytNYXRoLmltdWwoYWw0LGJsMyl8MDttaWQ9bWlkK01hdGguaW11bChhbDQsYmgzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNCxibDMpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNCxiaDMpfDA7bG89bG8rTWF0aC5pbXVsKGFsMyxibDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwzLGJoNCl8MDttaWQ9bWlkK01hdGguaW11bChhaDMsYmw0KXwwO2hpPWhpK01hdGguaW11bChhaDMsYmg0KXwwO2xvPWxvK01hdGguaW11bChhbDIsYmw1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMixiaDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgyLGJsNSl8MDtoaT1oaStNYXRoLmltdWwoYWgyLGJoNSl8MDtsbz1sbytNYXRoLmltdWwoYWwxLGJsNil8MDttaWQ9bWlkK01hdGguaW11bChhbDEsYmg2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMSxibDYpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMSxiaDYpfDA7bG89bG8rTWF0aC5pbXVsKGFsMCxibDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwwLGJoNyl8MDttaWQ9bWlkK01hdGguaW11bChhaDAsYmw3KXwwO2hpPWhpK01hdGguaW11bChhaDAsYmg3KXwwO3ZhciB3Nz0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzc+Pj4yNil8MDt3NyY9NjcxMDg4NjM7bG89TWF0aC5pbXVsKGFsOCxibDApO21pZD1NYXRoLmltdWwoYWw4LGJoMCk7bWlkPW1pZCtNYXRoLmltdWwoYWg4LGJsMCl8MDtoaT1NYXRoLmltdWwoYWg4LGJoMCk7bG89bG8rTWF0aC5pbXVsKGFsNyxibDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw3LGJoMSl8MDttaWQ9bWlkK01hdGguaW11bChhaDcsYmwxKXwwO2hpPWhpK01hdGguaW11bChhaDcsYmgxKXwwO2xvPWxvK01hdGguaW11bChhbDYsYmwyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNixiaDIpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg2LGJsMil8MDtoaT1oaStNYXRoLmltdWwoYWg2LGJoMil8MDtsbz1sbytNYXRoLmltdWwoYWw1LGJsMyl8MDttaWQ9bWlkK01hdGguaW11bChhbDUsYmgzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNSxibDMpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNSxiaDMpfDA7bG89bG8rTWF0aC5pbXVsKGFsNCxibDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw0LGJoNCl8MDttaWQ9bWlkK01hdGguaW11bChhaDQsYmw0KXwwO2hpPWhpK01hdGguaW11bChhaDQsYmg0KXwwO2xvPWxvK01hdGguaW11bChhbDMsYmw1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMyxiaDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgzLGJsNSl8MDtoaT1oaStNYXRoLmltdWwoYWgzLGJoNSl8MDtsbz1sbytNYXRoLmltdWwoYWwyLGJsNil8MDttaWQ9bWlkK01hdGguaW11bChhbDIsYmg2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMixibDYpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMixiaDYpfDA7bG89bG8rTWF0aC5pbXVsKGFsMSxibDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwxLGJoNyl8MDttaWQ9bWlkK01hdGguaW11bChhaDEsYmw3KXwwO2hpPWhpK01hdGguaW11bChhaDEsYmg3KXwwO2xvPWxvK01hdGguaW11bChhbDAsYmw4KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMCxiaDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgwLGJsOCl8MDtoaT1oaStNYXRoLmltdWwoYWgwLGJoOCl8MDt2YXIgdzg9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHc4Pj4+MjYpfDA7dzgmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDksYmwwKTttaWQ9TWF0aC5pbXVsKGFsOSxiaDApO21pZD1taWQrTWF0aC5pbXVsKGFoOSxibDApfDA7aGk9TWF0aC5pbXVsKGFoOSxiaDApO2xvPWxvK01hdGguaW11bChhbDgsYmwxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsOCxiaDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg4LGJsMSl8MDtoaT1oaStNYXRoLmltdWwoYWg4LGJoMSl8MDtsbz1sbytNYXRoLmltdWwoYWw3LGJsMil8MDttaWQ9bWlkK01hdGguaW11bChhbDcsYmgyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNyxibDIpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNyxiaDIpfDA7bG89bG8rTWF0aC5pbXVsKGFsNixibDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw2LGJoMyl8MDttaWQ9bWlkK01hdGguaW11bChhaDYsYmwzKXwwO2hpPWhpK01hdGguaW11bChhaDYsYmgzKXwwO2xvPWxvK01hdGguaW11bChhbDUsYmw0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNSxiaDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg1LGJsNCl8MDtoaT1oaStNYXRoLmltdWwoYWg1LGJoNCl8MDtsbz1sbytNYXRoLmltdWwoYWw0LGJsNSl8MDttaWQ9bWlkK01hdGguaW11bChhbDQsYmg1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNCxibDUpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNCxiaDUpfDA7bG89bG8rTWF0aC5pbXVsKGFsMyxibDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwzLGJoNil8MDttaWQ9bWlkK01hdGguaW11bChhaDMsYmw2KXwwO2hpPWhpK01hdGguaW11bChhaDMsYmg2KXwwO2xvPWxvK01hdGguaW11bChhbDIsYmw3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMixiaDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgyLGJsNyl8MDtoaT1oaStNYXRoLmltdWwoYWgyLGJoNyl8MDtsbz1sbytNYXRoLmltdWwoYWwxLGJsOCl8MDttaWQ9bWlkK01hdGguaW11bChhbDEsYmg4KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMSxibDgpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMSxiaDgpfDA7bG89bG8rTWF0aC5pbXVsKGFsMCxibDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwwLGJoOSl8MDttaWQ9bWlkK01hdGguaW11bChhaDAsYmw5KXwwO2hpPWhpK01hdGguaW11bChhaDAsYmg5KXwwO3ZhciB3OT0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzk+Pj4yNil8MDt3OSY9NjcxMDg4NjM7bG89TWF0aC5pbXVsKGFsOSxibDEpO21pZD1NYXRoLmltdWwoYWw5LGJoMSk7bWlkPW1pZCtNYXRoLmltdWwoYWg5LGJsMSl8MDtoaT1NYXRoLmltdWwoYWg5LGJoMSk7bG89bG8rTWF0aC5pbXVsKGFsOCxibDIpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw4LGJoMil8MDttaWQ9bWlkK01hdGguaW11bChhaDgsYmwyKXwwO2hpPWhpK01hdGguaW11bChhaDgsYmgyKXwwO2xvPWxvK01hdGguaW11bChhbDcsYmwzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNyxiaDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg3LGJsMyl8MDtoaT1oaStNYXRoLmltdWwoYWg3LGJoMyl8MDtsbz1sbytNYXRoLmltdWwoYWw2LGJsNCl8MDttaWQ9bWlkK01hdGguaW11bChhbDYsYmg0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNixibDQpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNixiaDQpfDA7bG89bG8rTWF0aC5pbXVsKGFsNSxibDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw1LGJoNSl8MDttaWQ9bWlkK01hdGguaW11bChhaDUsYmw1KXwwO2hpPWhpK01hdGguaW11bChhaDUsYmg1KXwwO2xvPWxvK01hdGguaW11bChhbDQsYmw2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNCxiaDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg0LGJsNil8MDtoaT1oaStNYXRoLmltdWwoYWg0LGJoNil8MDtsbz1sbytNYXRoLmltdWwoYWwzLGJsNyl8MDttaWQ9bWlkK01hdGguaW11bChhbDMsYmg3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMyxibDcpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMyxiaDcpfDA7bG89bG8rTWF0aC5pbXVsKGFsMixibDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwyLGJoOCl8MDttaWQ9bWlkK01hdGguaW11bChhaDIsYmw4KXwwO2hpPWhpK01hdGguaW11bChhaDIsYmg4KXwwO2xvPWxvK01hdGguaW11bChhbDEsYmw5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMSxiaDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgxLGJsOSl8MDtoaT1oaStNYXRoLmltdWwoYWgxLGJoOSl8MDt2YXIgdzEwPShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3MTA+Pj4yNil8MDt3MTAmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDksYmwyKTttaWQ9TWF0aC5pbXVsKGFsOSxiaDIpO21pZD1taWQrTWF0aC5pbXVsKGFoOSxibDIpfDA7aGk9TWF0aC5pbXVsKGFoOSxiaDIpO2xvPWxvK01hdGguaW11bChhbDgsYmwzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsOCxiaDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg4LGJsMyl8MDtoaT1oaStNYXRoLmltdWwoYWg4LGJoMyl8MDtsbz1sbytNYXRoLmltdWwoYWw3LGJsNCl8MDttaWQ9bWlkK01hdGguaW11bChhbDcsYmg0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNyxibDQpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNyxiaDQpfDA7bG89bG8rTWF0aC5pbXVsKGFsNixibDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw2LGJoNSl8MDttaWQ9bWlkK01hdGguaW11bChhaDYsYmw1KXwwO2hpPWhpK01hdGguaW11bChhaDYsYmg1KXwwO2xvPWxvK01hdGguaW11bChhbDUsYmw2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNSxiaDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg1LGJsNil8MDtoaT1oaStNYXRoLmltdWwoYWg1LGJoNil8MDtsbz1sbytNYXRoLmltdWwoYWw0LGJsNyl8MDttaWQ9bWlkK01hdGguaW11bChhbDQsYmg3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNCxibDcpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNCxiaDcpfDA7bG89bG8rTWF0aC5pbXVsKGFsMyxibDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwzLGJoOCl8MDttaWQ9bWlkK01hdGguaW11bChhaDMsYmw4KXwwO2hpPWhpK01hdGguaW11bChhaDMsYmg4KXwwO2xvPWxvK01hdGguaW11bChhbDIsYmw5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMixiaDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgyLGJsOSl8MDtoaT1oaStNYXRoLmltdWwoYWgyLGJoOSl8MDt2YXIgdzExPShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3MTE+Pj4yNil8MDt3MTEmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDksYmwzKTttaWQ9TWF0aC5pbXVsKGFsOSxiaDMpO21pZD1taWQrTWF0aC5pbXVsKGFoOSxibDMpfDA7aGk9TWF0aC5pbXVsKGFoOSxiaDMpO2xvPWxvK01hdGguaW11bChhbDgsYmw0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsOCxiaDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg4LGJsNCl8MDtoaT1oaStNYXRoLmltdWwoYWg4LGJoNCl8MDtsbz1sbytNYXRoLmltdWwoYWw3LGJsNSl8MDttaWQ9bWlkK01hdGguaW11bChhbDcsYmg1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNyxibDUpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNyxiaDUpfDA7bG89bG8rTWF0aC5pbXVsKGFsNixibDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw2LGJoNil8MDttaWQ9bWlkK01hdGguaW11bChhaDYsYmw2KXwwO2hpPWhpK01hdGguaW11bChhaDYsYmg2KXwwO2xvPWxvK01hdGguaW11bChhbDUsYmw3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNSxiaDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg1LGJsNyl8MDtoaT1oaStNYXRoLmltdWwoYWg1LGJoNyl8MDtsbz1sbytNYXRoLmltdWwoYWw0LGJsOCl8MDttaWQ9bWlkK01hdGguaW11bChhbDQsYmg4KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNCxibDgpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNCxiaDgpfDA7bG89bG8rTWF0aC5pbXVsKGFsMyxibDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwzLGJoOSl8MDttaWQ9bWlkK01hdGguaW11bChhaDMsYmw5KXwwO2hpPWhpK01hdGguaW11bChhaDMsYmg5KXwwO3ZhciB3MTI9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHcxMj4+PjI2KXwwO3cxMiY9NjcxMDg4NjM7bG89TWF0aC5pbXVsKGFsOSxibDQpO21pZD1NYXRoLmltdWwoYWw5LGJoNCk7bWlkPW1pZCtNYXRoLmltdWwoYWg5LGJsNCl8MDtoaT1NYXRoLmltdWwoYWg5LGJoNCk7bG89bG8rTWF0aC5pbXVsKGFsOCxibDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw4LGJoNSl8MDttaWQ9bWlkK01hdGguaW11bChhaDgsYmw1KXwwO2hpPWhpK01hdGguaW11bChhaDgsYmg1KXwwO2xvPWxvK01hdGguaW11bChhbDcsYmw2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNyxiaDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg3LGJsNil8MDtoaT1oaStNYXRoLmltdWwoYWg3LGJoNil8MDtsbz1sbytNYXRoLmltdWwoYWw2LGJsNyl8MDttaWQ9bWlkK01hdGguaW11bChhbDYsYmg3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNixibDcpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNixiaDcpfDA7bG89bG8rTWF0aC5pbXVsKGFsNSxibDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw1LGJoOCl8MDttaWQ9bWlkK01hdGguaW11bChhaDUsYmw4KXwwO2hpPWhpK01hdGguaW11bChhaDUsYmg4KXwwO2xvPWxvK01hdGguaW11bChhbDQsYmw5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNCxiaDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg0LGJsOSl8MDtoaT1oaStNYXRoLmltdWwoYWg0LGJoOSl8MDt2YXIgdzEzPShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3MTM+Pj4yNil8MDt3MTMmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDksYmw1KTttaWQ9TWF0aC5pbXVsKGFsOSxiaDUpO21pZD1taWQrTWF0aC5pbXVsKGFoOSxibDUpfDA7aGk9TWF0aC5pbXVsKGFoOSxiaDUpO2xvPWxvK01hdGguaW11bChhbDgsYmw2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsOCxiaDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg4LGJsNil8MDtoaT1oaStNYXRoLmltdWwoYWg4LGJoNil8MDtsbz1sbytNYXRoLmltdWwoYWw3LGJsNyl8MDttaWQ9bWlkK01hdGguaW11bChhbDcsYmg3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNyxibDcpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNyxiaDcpfDA7bG89bG8rTWF0aC5pbXVsKGFsNixibDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw2LGJoOCl8MDttaWQ9bWlkK01hdGguaW11bChhaDYsYmw4KXwwO2hpPWhpK01hdGguaW11bChhaDYsYmg4KXwwO2xvPWxvK01hdGguaW11bChhbDUsYmw5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNSxiaDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg1LGJsOSl8MDtoaT1oaStNYXRoLmltdWwoYWg1LGJoOSl8MDt2YXIgdzE0PShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3MTQ+Pj4yNil8MDt3MTQmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDksYmw2KTttaWQ9TWF0aC5pbXVsKGFsOSxiaDYpO21pZD1taWQrTWF0aC5pbXVsKGFoOSxibDYpfDA7aGk9TWF0aC5pbXVsKGFoOSxiaDYpO2xvPWxvK01hdGguaW11bChhbDgsYmw3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsOCxiaDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg4LGJsNyl8MDtoaT1oaStNYXRoLmltdWwoYWg4LGJoNyl8MDtsbz1sbytNYXRoLmltdWwoYWw3LGJsOCl8MDttaWQ9bWlkK01hdGguaW11bChhbDcsYmg4KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNyxibDgpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNyxiaDgpfDA7bG89bG8rTWF0aC5pbXVsKGFsNixibDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw2LGJoOSl8MDttaWQ9bWlkK01hdGguaW11bChhaDYsYmw5KXwwO2hpPWhpK01hdGguaW11bChhaDYsYmg5KXwwO3ZhciB3MTU9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHcxNT4+PjI2KXwwO3cxNSY9NjcxMDg4NjM7bG89TWF0aC5pbXVsKGFsOSxibDcpO21pZD1NYXRoLmltdWwoYWw5LGJoNyk7bWlkPW1pZCtNYXRoLmltdWwoYWg5LGJsNyl8MDtoaT1NYXRoLmltdWwoYWg5LGJoNyk7bG89bG8rTWF0aC5pbXVsKGFsOCxibDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw4LGJoOCl8MDttaWQ9bWlkK01hdGguaW11bChhaDgsYmw4KXwwO2hpPWhpK01hdGguaW11bChhaDgsYmg4KXwwO2xvPWxvK01hdGguaW11bChhbDcsYmw5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNyxiaDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg3LGJsOSl8MDtoaT1oaStNYXRoLmltdWwoYWg3LGJoOSl8MDt2YXIgdzE2PShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3MTY+Pj4yNil8MDt3MTYmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDksYmw4KTttaWQ9TWF0aC5pbXVsKGFsOSxiaDgpO21pZD1taWQrTWF0aC5pbXVsKGFoOSxibDgpfDA7aGk9TWF0aC5pbXVsKGFoOSxiaDgpO2xvPWxvK01hdGguaW11bChhbDgsYmw5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsOCxiaDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg4LGJsOSl8MDtoaT1oaStNYXRoLmltdWwoYWg4LGJoOSl8MDt2YXIgdzE3PShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3MTc+Pj4yNil8MDt3MTcmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDksYmw5KTttaWQ9TWF0aC5pbXVsKGFsOSxiaDkpO21pZD1taWQrTWF0aC5pbXVsKGFoOSxibDkpfDA7aGk9TWF0aC5pbXVsKGFoOSxiaDkpO3ZhciB3MTg9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHcxOD4+PjI2KXwwO3cxOCY9NjcxMDg4NjM7b1swXT13MDtvWzFdPXcxO29bMl09dzI7b1szXT13MztvWzRdPXc0O29bNV09dzU7b1s2XT13NjtvWzddPXc3O29bOF09dzg7b1s5XT13OTtvWzEwXT13MTA7b1sxMV09dzExO29bMTJdPXcxMjtvWzEzXT13MTM7b1sxNF09dzE0O29bMTVdPXcxNTtvWzE2XT13MTY7b1sxN109dzE3O29bMThdPXcxODtpZihjIT09MCl7b1sxOV09YztvdXQubGVuZ3RoKyt9cmV0dXJuIG91dH07aWYoIU1hdGguaW11bCl7Y29tYjEwTXVsVG89c21hbGxNdWxUb31mdW5jdGlvbiBiaWdNdWxUbyhzZWxmLG51bSxvdXQpe291dC5uZWdhdGl2ZT1udW0ubmVnYXRpdmVec2VsZi5uZWdhdGl2ZTtvdXQubGVuZ3RoPXNlbGYubGVuZ3RoK251bS5sZW5ndGg7dmFyIGNhcnJ5PTA7dmFyIGhuY2Fycnk9MDtmb3IodmFyIGs9MDtrPG91dC5sZW5ndGgtMTtrKyspe3ZhciBuY2Fycnk9aG5jYXJyeTtobmNhcnJ5PTA7dmFyIHJ3b3JkPWNhcnJ5JjY3MTA4ODYzO3ZhciBtYXhKPU1hdGgubWluKGssbnVtLmxlbmd0aC0xKTtmb3IodmFyIGo9TWF0aC5tYXgoMCxrLXNlbGYubGVuZ3RoKzEpO2o8PW1heEo7aisrKXt2YXIgaT1rLWo7dmFyIGE9c2VsZi53b3Jkc1tpXXwwO3ZhciBiPW51bS53b3Jkc1tqXXwwO3ZhciByPWEqYjt2YXIgbG89ciY2NzEwODg2MztuY2Fycnk9bmNhcnJ5KyhyLzY3MTA4ODY0fDApfDA7bG89bG8rcndvcmR8MDtyd29yZD1sbyY2NzEwODg2MztuY2Fycnk9bmNhcnJ5Kyhsbz4+PjI2KXwwO2huY2FycnkrPW5jYXJyeT4+PjI2O25jYXJyeSY9NjcxMDg4NjN9b3V0LndvcmRzW2tdPXJ3b3JkO2NhcnJ5PW5jYXJyeTtuY2Fycnk9aG5jYXJyeX1pZihjYXJyeSE9PTApe291dC53b3Jkc1trXT1jYXJyeX1lbHNle291dC5sZW5ndGgtLX1yZXR1cm4gb3V0LnN0cmlwKCl9ZnVuY3Rpb24ganVtYm9NdWxUbyhzZWxmLG51bSxvdXQpe3ZhciBmZnRtPW5ldyBGRlRNO3JldHVybiBmZnRtLm11bHAoc2VsZixudW0sb3V0KX1CTi5wcm90b3R5cGUubXVsVG89ZnVuY3Rpb24gbXVsVG8obnVtLG91dCl7dmFyIHJlczt2YXIgbGVuPXRoaXMubGVuZ3RoK251bS5sZW5ndGg7aWYodGhpcy5sZW5ndGg9PT0xMCYmbnVtLmxlbmd0aD09PTEwKXtyZXM9Y29tYjEwTXVsVG8odGhpcyxudW0sb3V0KX1lbHNlIGlmKGxlbjw2Myl7cmVzPXNtYWxsTXVsVG8odGhpcyxudW0sb3V0KX1lbHNlIGlmKGxlbjwxMDI0KXtyZXM9YmlnTXVsVG8odGhpcyxudW0sb3V0KX1lbHNle3Jlcz1qdW1ib011bFRvKHRoaXMsbnVtLG91dCl9cmV0dXJuIHJlc307ZnVuY3Rpb24gRkZUTSh4LHkpe3RoaXMueD14O3RoaXMueT15fUZGVE0ucHJvdG90eXBlLm1ha2VSQlQ9ZnVuY3Rpb24gbWFrZVJCVChOKXt2YXIgdD1uZXcgQXJyYXkoTik7dmFyIGw9Qk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTiktMTtmb3IodmFyIGk9MDtpPE47aSsrKXt0W2ldPXRoaXMucmV2QmluKGksbCxOKX1yZXR1cm4gdH07RkZUTS5wcm90b3R5cGUucmV2QmluPWZ1bmN0aW9uIHJldkJpbih4LGwsTil7aWYoeD09PTB8fHg9PT1OLTEpcmV0dXJuIHg7dmFyIHJiPTA7Zm9yKHZhciBpPTA7aTxsO2krKyl7cmJ8PSh4JjEpPDxsLWktMTt4Pj49MX1yZXR1cm4gcmJ9O0ZGVE0ucHJvdG90eXBlLnBlcm11dGU9ZnVuY3Rpb24gcGVybXV0ZShyYnQscndzLGl3cyxydHdzLGl0d3MsTil7Zm9yKHZhciBpPTA7aTxOO2krKyl7cnR3c1tpXT1yd3NbcmJ0W2ldXTtpdHdzW2ldPWl3c1tyYnRbaV1dfX07RkZUTS5wcm90b3R5cGUudHJhbnNmb3JtPWZ1bmN0aW9uIHRyYW5zZm9ybShyd3MsaXdzLHJ0d3MsaXR3cyxOLHJidCl7dGhpcy5wZXJtdXRlKHJidCxyd3MsaXdzLHJ0d3MsaXR3cyxOKTtmb3IodmFyIHM9MTtzPE47czw8PTEpe3ZhciBsPXM8PDE7dmFyIHJ0d2RmPU1hdGguY29zKDIqTWF0aC5QSS9sKTt2YXIgaXR3ZGY9TWF0aC5zaW4oMipNYXRoLlBJL2wpO2Zvcih2YXIgcD0wO3A8TjtwKz1sKXt2YXIgcnR3ZGZfPXJ0d2RmO3ZhciBpdHdkZl89aXR3ZGY7Zm9yKHZhciBqPTA7ajxzO2orKyl7dmFyIHJlPXJ0d3NbcCtqXTt2YXIgaWU9aXR3c1twK2pdO3ZhciBybz1ydHdzW3AraitzXTt2YXIgaW89aXR3c1twK2orc107dmFyIHJ4PXJ0d2RmXypyby1pdHdkZl8qaW87aW89cnR3ZGZfKmlvK2l0d2RmXypybztybz1yeDtydHdzW3Aral09cmUrcm87aXR3c1twK2pdPWllK2lvO3J0d3NbcCtqK3NdPXJlLXJvO2l0d3NbcCtqK3NdPWllLWlvO2lmKGohPT1sKXtyeD1ydHdkZipydHdkZl8taXR3ZGYqaXR3ZGZfO2l0d2RmXz1ydHdkZippdHdkZl8raXR3ZGYqcnR3ZGZfO3J0d2RmXz1yeH19fX19O0ZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiPWZ1bmN0aW9uIGd1ZXNzTGVuMTNiKG4sbSl7dmFyIE49TWF0aC5tYXgobSxuKXwxO3ZhciBvZGQ9TiYxO3ZhciBpPTA7Zm9yKE49Ti8yfDA7TjtOPU4+Pj4xKXtpKyt9cmV0dXJuIDE8PGkrMStvZGR9O0ZGVE0ucHJvdG90eXBlLmNvbmp1Z2F0ZT1mdW5jdGlvbiBjb25qdWdhdGUocndzLGl3cyxOKXtpZihOPD0xKXJldHVybjtmb3IodmFyIGk9MDtpPE4vMjtpKyspe3ZhciB0PXJ3c1tpXTtyd3NbaV09cndzW04taS0xXTtyd3NbTi1pLTFdPXQ7dD1pd3NbaV07aXdzW2ldPS1pd3NbTi1pLTFdO2l3c1tOLWktMV09LXR9fTtGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2I9ZnVuY3Rpb24gbm9ybWFsaXplMTNiKHdzLE4pe3ZhciBjYXJyeT0wO2Zvcih2YXIgaT0wO2k8Ti8yO2krKyl7dmFyIHc9TWF0aC5yb3VuZCh3c1syKmkrMV0vTikqODE5MitNYXRoLnJvdW5kKHdzWzIqaV0vTikrY2Fycnk7d3NbaV09dyY2NzEwODg2MztpZih3PDY3MTA4ODY0KXtjYXJyeT0wfWVsc2V7Y2Fycnk9dy82NzEwODg2NHwwfX1yZXR1cm4gd3N9O0ZGVE0ucHJvdG90eXBlLmNvbnZlcnQxM2I9ZnVuY3Rpb24gY29udmVydDEzYih3cyxsZW4scndzLE4pe3ZhciBjYXJyeT0wO2Zvcih2YXIgaT0wO2k8bGVuO2krKyl7Y2Fycnk9Y2FycnkrKHdzW2ldfDApO3J3c1syKmldPWNhcnJ5JjgxOTE7Y2Fycnk9Y2Fycnk+Pj4xMztyd3NbMippKzFdPWNhcnJ5JjgxOTE7Y2Fycnk9Y2Fycnk+Pj4xM31mb3IoaT0yKmxlbjtpPE47KytpKXtyd3NbaV09MH1hc3NlcnQoY2Fycnk9PT0wKTthc3NlcnQoKGNhcnJ5Jn44MTkxKT09PTApfTtGRlRNLnByb3RvdHlwZS5zdHViPWZ1bmN0aW9uIHN0dWIoTil7dmFyIHBoPW5ldyBBcnJheShOKTtmb3IodmFyIGk9MDtpPE47aSsrKXtwaFtpXT0wfXJldHVybiBwaH07RkZUTS5wcm90b3R5cGUubXVscD1mdW5jdGlvbiBtdWxwKHgseSxvdXQpe3ZhciBOPTIqdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCx5Lmxlbmd0aCk7dmFyIHJidD10aGlzLm1ha2VSQlQoTik7dmFyIF89dGhpcy5zdHViKE4pO3ZhciByd3M9bmV3IEFycmF5KE4pO3ZhciByd3N0PW5ldyBBcnJheShOKTt2YXIgaXdzdD1uZXcgQXJyYXkoTik7dmFyIG5yd3M9bmV3IEFycmF5KE4pO3ZhciBucndzdD1uZXcgQXJyYXkoTik7dmFyIG5pd3N0PW5ldyBBcnJheShOKTt2YXIgcm13cz1vdXQud29yZHM7cm13cy5sZW5ndGg9Tjt0aGlzLmNvbnZlcnQxM2IoeC53b3Jkcyx4Lmxlbmd0aCxyd3MsTik7dGhpcy5jb252ZXJ0MTNiKHkud29yZHMseS5sZW5ndGgsbnJ3cyxOKTt0aGlzLnRyYW5zZm9ybShyd3MsXyxyd3N0LGl3c3QsTixyYnQpO3RoaXMudHJhbnNmb3JtKG5yd3MsXyxucndzdCxuaXdzdCxOLHJidCk7Zm9yKHZhciBpPTA7aTxOO2krKyl7dmFyIHJ4PXJ3c3RbaV0qbnJ3c3RbaV0taXdzdFtpXSpuaXdzdFtpXTtpd3N0W2ldPXJ3c3RbaV0qbml3c3RbaV0raXdzdFtpXSpucndzdFtpXTtyd3N0W2ldPXJ4fXRoaXMuY29uanVnYXRlKHJ3c3QsaXdzdCxOKTt0aGlzLnRyYW5zZm9ybShyd3N0LGl3c3Qscm13cyxfLE4scmJ0KTt0aGlzLmNvbmp1Z2F0ZShybXdzLF8sTik7dGhpcy5ub3JtYWxpemUxM2Iocm13cyxOKTtvdXQubmVnYXRpdmU9eC5uZWdhdGl2ZV55Lm5lZ2F0aXZlO291dC5sZW5ndGg9eC5sZW5ndGgreS5sZW5ndGg7cmV0dXJuIG91dC5zdHJpcCgpfTtCTi5wcm90b3R5cGUubXVsPWZ1bmN0aW9uIG11bChudW0pe3ZhciBvdXQ9bmV3IEJOKG51bGwpO291dC53b3Jkcz1uZXcgQXJyYXkodGhpcy5sZW5ndGgrbnVtLmxlbmd0aCk7cmV0dXJuIHRoaXMubXVsVG8obnVtLG91dCl9O0JOLnByb3RvdHlwZS5tdWxmPWZ1bmN0aW9uIG11bGYobnVtKXt2YXIgb3V0PW5ldyBCTihudWxsKTtvdXQud29yZHM9bmV3IEFycmF5KHRoaXMubGVuZ3RoK251bS5sZW5ndGgpO3JldHVybiBqdW1ib011bFRvKHRoaXMsbnVtLG91dCl9O0JOLnByb3RvdHlwZS5pbXVsPWZ1bmN0aW9uIGltdWwobnVtKXtyZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSx0aGlzKX07Qk4ucHJvdG90eXBlLmltdWxuPWZ1bmN0aW9uIGltdWxuKG51bSl7YXNzZXJ0KHR5cGVvZiBudW09PT1cIm51bWJlclwiKTthc3NlcnQobnVtPDY3MTA4ODY0KTt2YXIgY2Fycnk9MDtmb3IodmFyIGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7dmFyIHc9KHRoaXMud29yZHNbaV18MCkqbnVtO3ZhciBsbz0odyY2NzEwODg2MykrKGNhcnJ5JjY3MTA4ODYzKTtjYXJyeT4+PTI2O2NhcnJ5Kz13LzY3MTA4ODY0fDA7Y2FycnkrPWxvPj4+MjY7dGhpcy53b3Jkc1tpXT1sbyY2NzEwODg2M31pZihjYXJyeSE9PTApe3RoaXMud29yZHNbaV09Y2Fycnk7dGhpcy5sZW5ndGgrK31yZXR1cm4gdGhpc307Qk4ucHJvdG90eXBlLm11bG49ZnVuY3Rpb24gbXVsbihudW0pe3JldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKX07Qk4ucHJvdG90eXBlLnNxcj1mdW5jdGlvbiBzcXIoKXtyZXR1cm4gdGhpcy5tdWwodGhpcyl9O0JOLnByb3RvdHlwZS5pc3FyPWZ1bmN0aW9uIGlzcXIoKXtyZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSl9O0JOLnByb3RvdHlwZS5wb3c9ZnVuY3Rpb24gcG93KG51bSl7dmFyIHc9dG9CaXRBcnJheShudW0pO2lmKHcubGVuZ3RoPT09MClyZXR1cm4gbmV3IEJOKDEpO3ZhciByZXM9dGhpcztmb3IodmFyIGk9MDtpPHcubGVuZ3RoO2krKyxyZXM9cmVzLnNxcigpKXtpZih3W2ldIT09MClicmVha31pZigrK2k8dy5sZW5ndGgpe2Zvcih2YXIgcT1yZXMuc3FyKCk7aTx3Lmxlbmd0aDtpKysscT1xLnNxcigpKXtpZih3W2ldPT09MCljb250aW51ZTtyZXM9cmVzLm11bChxKX19cmV0dXJuIHJlc307Qk4ucHJvdG90eXBlLml1c2hsbj1mdW5jdGlvbiBpdXNobG4oYml0cyl7YXNzZXJ0KHR5cGVvZiBiaXRzPT09XCJudW1iZXJcIiYmYml0cz49MCk7dmFyIHI9Yml0cyUyNjt2YXIgcz0oYml0cy1yKS8yNjt2YXIgY2FycnlNYXNrPTY3MTA4ODYzPj4+MjYtcjw8MjYtcjt2YXIgaTtpZihyIT09MCl7dmFyIGNhcnJ5PTA7Zm9yKGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7dmFyIG5ld0NhcnJ5PXRoaXMud29yZHNbaV0mY2FycnlNYXNrO3ZhciBjPSh0aGlzLndvcmRzW2ldfDApLW5ld0NhcnJ5PDxyO3RoaXMud29yZHNbaV09Y3xjYXJyeTtjYXJyeT1uZXdDYXJyeT4+PjI2LXJ9aWYoY2Fycnkpe3RoaXMud29yZHNbaV09Y2Fycnk7dGhpcy5sZW5ndGgrK319aWYocyE9PTApe2ZvcihpPXRoaXMubGVuZ3RoLTE7aT49MDtpLS0pe3RoaXMud29yZHNbaStzXT10aGlzLndvcmRzW2ldfWZvcihpPTA7aTxzO2krKyl7dGhpcy53b3Jkc1tpXT0wfXRoaXMubGVuZ3RoKz1zfXJldHVybiB0aGlzLnN0cmlwKCl9O0JOLnByb3RvdHlwZS5pc2hsbj1mdW5jdGlvbiBpc2hsbihiaXRzKXthc3NlcnQodGhpcy5uZWdhdGl2ZT09PTApO3JldHVybiB0aGlzLml1c2hsbihiaXRzKX07Qk4ucHJvdG90eXBlLml1c2hybj1mdW5jdGlvbiBpdXNocm4oYml0cyxoaW50LGV4dGVuZGVkKXthc3NlcnQodHlwZW9mIGJpdHM9PT1cIm51bWJlclwiJiZiaXRzPj0wKTt2YXIgaDtpZihoaW50KXtoPShoaW50LWhpbnQlMjYpLzI2fWVsc2V7aD0wfXZhciByPWJpdHMlMjY7dmFyIHM9TWF0aC5taW4oKGJpdHMtcikvMjYsdGhpcy5sZW5ndGgpO3ZhciBtYXNrPTY3MTA4ODYzXjY3MTA4ODYzPj4+cjw8cjt2YXIgbWFza2VkV29yZHM9ZXh0ZW5kZWQ7aC09cztoPU1hdGgubWF4KDAsaCk7aWYobWFza2VkV29yZHMpe2Zvcih2YXIgaT0wO2k8cztpKyspe21hc2tlZFdvcmRzLndvcmRzW2ldPXRoaXMud29yZHNbaV19bWFza2VkV29yZHMubGVuZ3RoPXN9aWYocz09PTApe31lbHNlIGlmKHRoaXMubGVuZ3RoPnMpe3RoaXMubGVuZ3RoLT1zO2ZvcihpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3RoaXMud29yZHNbaV09dGhpcy53b3Jkc1tpK3NdfX1lbHNle3RoaXMud29yZHNbMF09MDt0aGlzLmxlbmd0aD0xfXZhciBjYXJyeT0wO2ZvcihpPXRoaXMubGVuZ3RoLTE7aT49MCYmKGNhcnJ5IT09MHx8aT49aCk7aS0tKXt2YXIgd29yZD10aGlzLndvcmRzW2ldfDA7dGhpcy53b3Jkc1tpXT1jYXJyeTw8MjYtcnx3b3JkPj4+cjtjYXJyeT13b3JkJm1hc2t9aWYobWFza2VkV29yZHMmJmNhcnJ5IT09MCl7bWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdPWNhcnJ5fWlmKHRoaXMubGVuZ3RoPT09MCl7dGhpcy53b3Jkc1swXT0wO3RoaXMubGVuZ3RoPTF9cmV0dXJuIHRoaXMuc3RyaXAoKX07Qk4ucHJvdG90eXBlLmlzaHJuPWZ1bmN0aW9uIGlzaHJuKGJpdHMsaGludCxleHRlbmRlZCl7YXNzZXJ0KHRoaXMubmVnYXRpdmU9PT0wKTtyZXR1cm4gdGhpcy5pdXNocm4oYml0cyxoaW50LGV4dGVuZGVkKX07Qk4ucHJvdG90eXBlLnNobG49ZnVuY3Rpb24gc2hsbihiaXRzKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmlzaGxuKGJpdHMpfTtCTi5wcm90b3R5cGUudXNobG49ZnVuY3Rpb24gdXNobG4oYml0cyl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNobG4oYml0cyl9O0JOLnByb3RvdHlwZS5zaHJuPWZ1bmN0aW9uIHNocm4oYml0cyl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hybihiaXRzKX07Qk4ucHJvdG90eXBlLnVzaHJuPWZ1bmN0aW9uIHVzaHJuKGJpdHMpe3JldHVybiB0aGlzLmNsb25lKCkuaXVzaHJuKGJpdHMpfTtCTi5wcm90b3R5cGUudGVzdG49ZnVuY3Rpb24gdGVzdG4oYml0KXthc3NlcnQodHlwZW9mIGJpdD09PVwibnVtYmVyXCImJmJpdD49MCk7dmFyIHI9Yml0JTI2O3ZhciBzPShiaXQtcikvMjY7dmFyIHE9MTw8cjtpZih0aGlzLmxlbmd0aDw9cylyZXR1cm4gZmFsc2U7dmFyIHc9dGhpcy53b3Jkc1tzXTtyZXR1cm4hISh3JnEpfTtCTi5wcm90b3R5cGUuaW1hc2tuPWZ1bmN0aW9uIGltYXNrbihiaXRzKXthc3NlcnQodHlwZW9mIGJpdHM9PT1cIm51bWJlclwiJiZiaXRzPj0wKTt2YXIgcj1iaXRzJTI2O3ZhciBzPShiaXRzLXIpLzI2O2Fzc2VydCh0aGlzLm5lZ2F0aXZlPT09MCxcImltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVyc1wiKTtpZih0aGlzLmxlbmd0aDw9cyl7cmV0dXJuIHRoaXN9aWYociE9PTApe3MrK310aGlzLmxlbmd0aD1NYXRoLm1pbihzLHRoaXMubGVuZ3RoKTtpZihyIT09MCl7dmFyIG1hc2s9NjcxMDg4NjNeNjcxMDg4NjM+Pj5yPDxyO3RoaXMud29yZHNbdGhpcy5sZW5ndGgtMV0mPW1hc2t9cmV0dXJuIHRoaXMuc3RyaXAoKX07Qk4ucHJvdG90eXBlLm1hc2tuPWZ1bmN0aW9uIG1hc2tuKGJpdHMpe3JldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpfTtCTi5wcm90b3R5cGUuaWFkZG49ZnVuY3Rpb24gaWFkZG4obnVtKXthc3NlcnQodHlwZW9mIG51bT09PVwibnVtYmVyXCIpO2Fzc2VydChudW08NjcxMDg4NjQpO2lmKG51bTwwKXJldHVybiB0aGlzLmlzdWJuKC1udW0pO2lmKHRoaXMubmVnYXRpdmUhPT0wKXtpZih0aGlzLmxlbmd0aD09PTEmJih0aGlzLndvcmRzWzBdfDApPG51bSl7dGhpcy53b3Jkc1swXT1udW0tKHRoaXMud29yZHNbMF18MCk7dGhpcy5uZWdhdGl2ZT0wO3JldHVybiB0aGlzfXRoaXMubmVnYXRpdmU9MDt0aGlzLmlzdWJuKG51bSk7dGhpcy5uZWdhdGl2ZT0xO3JldHVybiB0aGlzfXJldHVybiB0aGlzLl9pYWRkbihudW0pfTtCTi5wcm90b3R5cGUuX2lhZGRuPWZ1bmN0aW9uIF9pYWRkbihudW0pe3RoaXMud29yZHNbMF0rPW51bTtmb3IodmFyIGk9MDtpPHRoaXMubGVuZ3RoJiZ0aGlzLndvcmRzW2ldPj02NzEwODg2NDtpKyspe3RoaXMud29yZHNbaV0tPTY3MTA4ODY0O2lmKGk9PT10aGlzLmxlbmd0aC0xKXt0aGlzLndvcmRzW2krMV09MX1lbHNle3RoaXMud29yZHNbaSsxXSsrfX10aGlzLmxlbmd0aD1NYXRoLm1heCh0aGlzLmxlbmd0aCxpKzEpO3JldHVybiB0aGlzfTtCTi5wcm90b3R5cGUuaXN1Ym49ZnVuY3Rpb24gaXN1Ym4obnVtKXthc3NlcnQodHlwZW9mIG51bT09PVwibnVtYmVyXCIpO2Fzc2VydChudW08NjcxMDg4NjQpO2lmKG51bTwwKXJldHVybiB0aGlzLmlhZGRuKC1udW0pO2lmKHRoaXMubmVnYXRpdmUhPT0wKXt0aGlzLm5lZ2F0aXZlPTA7dGhpcy5pYWRkbihudW0pO3RoaXMubmVnYXRpdmU9MTtyZXR1cm4gdGhpc310aGlzLndvcmRzWzBdLT1udW07aWYodGhpcy5sZW5ndGg9PT0xJiZ0aGlzLndvcmRzWzBdPDApe3RoaXMud29yZHNbMF09LXRoaXMud29yZHNbMF07dGhpcy5uZWdhdGl2ZT0xfWVsc2V7Zm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aCYmdGhpcy53b3Jkc1tpXTwwO2krKyl7dGhpcy53b3Jkc1tpXSs9NjcxMDg4NjQ7dGhpcy53b3Jkc1tpKzFdLT0xfX1yZXR1cm4gdGhpcy5zdHJpcCgpfTtCTi5wcm90b3R5cGUuYWRkbj1mdW5jdGlvbiBhZGRuKG51bSl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pfTtCTi5wcm90b3R5cGUuc3Vibj1mdW5jdGlvbiBzdWJuKG51bSl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pfTtCTi5wcm90b3R5cGUuaWFicz1mdW5jdGlvbiBpYWJzKCl7dGhpcy5uZWdhdGl2ZT0wO3JldHVybiB0aGlzfTtCTi5wcm90b3R5cGUuYWJzPWZ1bmN0aW9uIGFicygpe3JldHVybiB0aGlzLmNsb25lKCkuaWFicygpfTtCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsPWZ1bmN0aW9uIF9pc2hsbnN1Ym11bChudW0sbXVsLHNoaWZ0KXt2YXIgbGVuPW51bS5sZW5ndGgrc2hpZnQ7dmFyIGk7dGhpcy5fZXhwYW5kKGxlbik7dmFyIHc7dmFyIGNhcnJ5PTA7Zm9yKGk9MDtpPG51bS5sZW5ndGg7aSsrKXt3PSh0aGlzLndvcmRzW2krc2hpZnRdfDApK2NhcnJ5O3ZhciByaWdodD0obnVtLndvcmRzW2ldfDApKm11bDt3LT1yaWdodCY2NzEwODg2MztjYXJyeT0odz4+MjYpLShyaWdodC82NzEwODg2NHwwKTt0aGlzLndvcmRzW2krc2hpZnRdPXcmNjcxMDg4NjN9Zm9yKDtpPHRoaXMubGVuZ3RoLXNoaWZ0O2krKyl7dz0odGhpcy53b3Jkc1tpK3NoaWZ0XXwwKStjYXJyeTtjYXJyeT13Pj4yNjt0aGlzLndvcmRzW2krc2hpZnRdPXcmNjcxMDg4NjN9aWYoY2Fycnk9PT0wKXJldHVybiB0aGlzLnN0cmlwKCk7YXNzZXJ0KGNhcnJ5PT09LTEpO2NhcnJ5PTA7Zm9yKGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7dz0tKHRoaXMud29yZHNbaV18MCkrY2Fycnk7Y2Fycnk9dz4+MjY7dGhpcy53b3Jkc1tpXT13JjY3MTA4ODYzfXRoaXMubmVnYXRpdmU9MTtyZXR1cm4gdGhpcy5zdHJpcCgpfTtCTi5wcm90b3R5cGUuX3dvcmREaXY9ZnVuY3Rpb24gX3dvcmREaXYobnVtLG1vZGUpe3ZhciBzaGlmdD10aGlzLmxlbmd0aC1udW0ubGVuZ3RoO3ZhciBhPXRoaXMuY2xvbmUoKTt2YXIgYj1udW07dmFyIGJoaT1iLndvcmRzW2IubGVuZ3RoLTFdfDA7dmFyIGJoaUJpdHM9dGhpcy5fY291bnRCaXRzKGJoaSk7c2hpZnQ9MjYtYmhpQml0cztpZihzaGlmdCE9PTApe2I9Yi51c2hsbihzaGlmdCk7YS5pdXNobG4oc2hpZnQpO2JoaT1iLndvcmRzW2IubGVuZ3RoLTFdfDB9dmFyIG09YS5sZW5ndGgtYi5sZW5ndGg7dmFyIHE7aWYobW9kZSE9PVwibW9kXCIpe3E9bmV3IEJOKG51bGwpO3EubGVuZ3RoPW0rMTtxLndvcmRzPW5ldyBBcnJheShxLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTxxLmxlbmd0aDtpKyspe3Eud29yZHNbaV09MH19dmFyIGRpZmY9YS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLDEsbSk7aWYoZGlmZi5uZWdhdGl2ZT09PTApe2E9ZGlmZjtpZihxKXtxLndvcmRzW21dPTF9fWZvcih2YXIgaj1tLTE7aj49MDtqLS0pe3ZhciBxaj0oYS53b3Jkc1tiLmxlbmd0aCtqXXwwKSo2NzEwODg2NCsoYS53b3Jkc1tiLmxlbmd0aCtqLTFdfDApO3FqPU1hdGgubWluKHFqL2JoaXwwLDY3MTA4ODYzKTthLl9pc2hsbnN1Ym11bChiLHFqLGopO3doaWxlKGEubmVnYXRpdmUhPT0wKXtxai0tO2EubmVnYXRpdmU9MDthLl9pc2hsbnN1Ym11bChiLDEsaik7aWYoIWEuaXNaZXJvKCkpe2EubmVnYXRpdmVePTF9fWlmKHEpe3Eud29yZHNbal09cWp9fWlmKHEpe3Euc3RyaXAoKX1hLnN0cmlwKCk7aWYobW9kZSE9PVwiZGl2XCImJnNoaWZ0IT09MCl7YS5pdXNocm4oc2hpZnQpfXJldHVybntkaXY6cXx8bnVsbCxtb2Q6YX19O0JOLnByb3RvdHlwZS5kaXZtb2Q9ZnVuY3Rpb24gZGl2bW9kKG51bSxtb2RlLHBvc2l0aXZlKXthc3NlcnQoIW51bS5pc1plcm8oKSk7aWYodGhpcy5pc1plcm8oKSl7cmV0dXJue2RpdjpuZXcgQk4oMCksbW9kOm5ldyBCTigwKX19dmFyIGRpdixtb2QscmVzO2lmKHRoaXMubmVnYXRpdmUhPT0wJiZudW0ubmVnYXRpdmU9PT0wKXtyZXM9dGhpcy5uZWcoKS5kaXZtb2QobnVtLG1vZGUpO2lmKG1vZGUhPT1cIm1vZFwiKXtkaXY9cmVzLmRpdi5uZWcoKX1pZihtb2RlIT09XCJkaXZcIil7bW9kPXJlcy5tb2QubmVnKCk7aWYocG9zaXRpdmUmJm1vZC5uZWdhdGl2ZSE9PTApe21vZC5pYWRkKG51bSl9fXJldHVybntkaXY6ZGl2LG1vZDptb2R9fWlmKHRoaXMubmVnYXRpdmU9PT0wJiZudW0ubmVnYXRpdmUhPT0wKXtyZXM9dGhpcy5kaXZtb2QobnVtLm5lZygpLG1vZGUpO2lmKG1vZGUhPT1cIm1vZFwiKXtkaXY9cmVzLmRpdi5uZWcoKX1yZXR1cm57ZGl2OmRpdixtb2Q6cmVzLm1vZH19aWYoKHRoaXMubmVnYXRpdmUmbnVtLm5lZ2F0aXZlKSE9PTApe3Jlcz10aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksbW9kZSk7aWYobW9kZSE9PVwiZGl2XCIpe21vZD1yZXMubW9kLm5lZygpO2lmKHBvc2l0aXZlJiZtb2QubmVnYXRpdmUhPT0wKXttb2QuaXN1YihudW0pfX1yZXR1cm57ZGl2OnJlcy5kaXYsbW9kOm1vZH19aWYobnVtLmxlbmd0aD50aGlzLmxlbmd0aHx8dGhpcy5jbXAobnVtKTwwKXtyZXR1cm57ZGl2Om5ldyBCTigwKSxtb2Q6dGhpc319aWYobnVtLmxlbmd0aD09PTEpe2lmKG1vZGU9PT1cImRpdlwiKXtyZXR1cm57ZGl2OnRoaXMuZGl2bihudW0ud29yZHNbMF0pLG1vZDpudWxsfX1pZihtb2RlPT09XCJtb2RcIil7cmV0dXJue2RpdjpudWxsLG1vZDpuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpfX1yZXR1cm57ZGl2OnRoaXMuZGl2bihudW0ud29yZHNbMF0pLG1vZDpuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpfX1yZXR1cm4gdGhpcy5fd29yZERpdihudW0sbW9kZSl9O0JOLnByb3RvdHlwZS5kaXY9ZnVuY3Rpb24gZGl2KG51bSl7cmV0dXJuIHRoaXMuZGl2bW9kKG51bSxcImRpdlwiLGZhbHNlKS5kaXZ9O0JOLnByb3RvdHlwZS5tb2Q9ZnVuY3Rpb24gbW9kKG51bSl7cmV0dXJuIHRoaXMuZGl2bW9kKG51bSxcIm1vZFwiLGZhbHNlKS5tb2R9O0JOLnByb3RvdHlwZS51bW9kPWZ1bmN0aW9uIHVtb2QobnVtKXtyZXR1cm4gdGhpcy5kaXZtb2QobnVtLFwibW9kXCIsdHJ1ZSkubW9kfTtCTi5wcm90b3R5cGUuZGl2Um91bmQ9ZnVuY3Rpb24gZGl2Um91bmQobnVtKXt2YXIgZG09dGhpcy5kaXZtb2QobnVtKTtpZihkbS5tb2QuaXNaZXJvKCkpcmV0dXJuIGRtLmRpdjt2YXIgbW9kPWRtLmRpdi5uZWdhdGl2ZSE9PTA/ZG0ubW9kLmlzdWIobnVtKTpkbS5tb2Q7dmFyIGhhbGY9bnVtLnVzaHJuKDEpO3ZhciByMj1udW0uYW5kbG4oMSk7dmFyIGNtcD1tb2QuY21wKGhhbGYpO2lmKGNtcDwwfHxyMj09PTEmJmNtcD09PTApcmV0dXJuIGRtLmRpdjtyZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlIT09MD9kbS5kaXYuaXN1Ym4oMSk6ZG0uZGl2LmlhZGRuKDEpfTtCTi5wcm90b3R5cGUubW9kbj1mdW5jdGlvbiBtb2RuKG51bSl7YXNzZXJ0KG51bTw9NjcxMDg4NjMpO3ZhciBwPSgxPDwyNiklbnVtO3ZhciBhY2M9MDtmb3IodmFyIGk9dGhpcy5sZW5ndGgtMTtpPj0wO2ktLSl7YWNjPShwKmFjYysodGhpcy53b3Jkc1tpXXwwKSklbnVtfXJldHVybiBhY2N9O0JOLnByb3RvdHlwZS5pZGl2bj1mdW5jdGlvbiBpZGl2bihudW0pe2Fzc2VydChudW08PTY3MTA4ODYzKTt2YXIgY2Fycnk9MDtmb3IodmFyIGk9dGhpcy5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIHc9KHRoaXMud29yZHNbaV18MCkrY2FycnkqNjcxMDg4NjQ7dGhpcy53b3Jkc1tpXT13L251bXwwO2NhcnJ5PXclbnVtfXJldHVybiB0aGlzLnN0cmlwKCl9O0JOLnByb3RvdHlwZS5kaXZuPWZ1bmN0aW9uIGRpdm4obnVtKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmlkaXZuKG51bSl9O0JOLnByb3RvdHlwZS5lZ2NkPWZ1bmN0aW9uIGVnY2QocCl7YXNzZXJ0KHAubmVnYXRpdmU9PT0wKTthc3NlcnQoIXAuaXNaZXJvKCkpO3ZhciB4PXRoaXM7dmFyIHk9cC5jbG9uZSgpO2lmKHgubmVnYXRpdmUhPT0wKXt4PXgudW1vZChwKX1lbHNle3g9eC5jbG9uZSgpfXZhciBBPW5ldyBCTigxKTt2YXIgQj1uZXcgQk4oMCk7dmFyIEM9bmV3IEJOKDApO3ZhciBEPW5ldyBCTigxKTt2YXIgZz0wO3doaWxlKHguaXNFdmVuKCkmJnkuaXNFdmVuKCkpe3guaXVzaHJuKDEpO3kuaXVzaHJuKDEpOysrZ312YXIgeXA9eS5jbG9uZSgpO3ZhciB4cD14LmNsb25lKCk7d2hpbGUoIXguaXNaZXJvKCkpe2Zvcih2YXIgaT0wLGltPTE7KHgud29yZHNbMF0maW0pPT09MCYmaTwyNjsrK2ksaW08PD0xKTtpZihpPjApe3guaXVzaHJuKGkpO3doaWxlKGktLSA+MCl7aWYoQS5pc09kZCgpfHxCLmlzT2RkKCkpe0EuaWFkZCh5cCk7Qi5pc3ViKHhwKX1BLml1c2hybigxKTtCLml1c2hybigxKX19Zm9yKHZhciBqPTAsam09MTsoeS53b3Jkc1swXSZqbSk9PT0wJiZqPDI2OysraixqbTw8PTEpO2lmKGo+MCl7eS5pdXNocm4oaik7d2hpbGUoai0tID4wKXtpZihDLmlzT2RkKCl8fEQuaXNPZGQoKSl7Qy5pYWRkKHlwKTtELmlzdWIoeHApfUMuaXVzaHJuKDEpO0QuaXVzaHJuKDEpfX1pZih4LmNtcCh5KT49MCl7eC5pc3ViKHkpO0EuaXN1YihDKTtCLmlzdWIoRCl9ZWxzZXt5LmlzdWIoeCk7Qy5pc3ViKEEpO0QuaXN1YihCKX19cmV0dXJue2E6QyxiOkQsZ2NkOnkuaXVzaGxuKGcpfX07Qk4ucHJvdG90eXBlLl9pbnZtcD1mdW5jdGlvbiBfaW52bXAocCl7YXNzZXJ0KHAubmVnYXRpdmU9PT0wKTthc3NlcnQoIXAuaXNaZXJvKCkpO3ZhciBhPXRoaXM7dmFyIGI9cC5jbG9uZSgpO2lmKGEubmVnYXRpdmUhPT0wKXthPWEudW1vZChwKX1lbHNle2E9YS5jbG9uZSgpfXZhciB4MT1uZXcgQk4oMSk7dmFyIHgyPW5ldyBCTigwKTt2YXIgZGVsdGE9Yi5jbG9uZSgpO3doaWxlKGEuY21wbigxKT4wJiZiLmNtcG4oMSk+MCl7Zm9yKHZhciBpPTAsaW09MTsoYS53b3Jkc1swXSZpbSk9PT0wJiZpPDI2OysraSxpbTw8PTEpO2lmKGk+MCl7YS5pdXNocm4oaSk7d2hpbGUoaS0tID4wKXtpZih4MS5pc09kZCgpKXt4MS5pYWRkKGRlbHRhKX14MS5pdXNocm4oMSl9fWZvcih2YXIgaj0wLGptPTE7KGIud29yZHNbMF0mam0pPT09MCYmajwyNjsrK2osam08PD0xKTtpZihqPjApe2IuaXVzaHJuKGopO3doaWxlKGotLSA+MCl7aWYoeDIuaXNPZGQoKSl7eDIuaWFkZChkZWx0YSl9eDIuaXVzaHJuKDEpfX1pZihhLmNtcChiKT49MCl7YS5pc3ViKGIpO3gxLmlzdWIoeDIpfWVsc2V7Yi5pc3ViKGEpO3gyLmlzdWIoeDEpfX12YXIgcmVzO2lmKGEuY21wbigxKT09PTApe3Jlcz14MX1lbHNle3Jlcz14Mn1pZihyZXMuY21wbigwKTwwKXtyZXMuaWFkZChwKX1yZXR1cm4gcmVzfTtCTi5wcm90b3R5cGUuZ2NkPWZ1bmN0aW9uIGdjZChudW0pe2lmKHRoaXMuaXNaZXJvKCkpcmV0dXJuIG51bS5hYnMoKTtpZihudW0uaXNaZXJvKCkpcmV0dXJuIHRoaXMuYWJzKCk7dmFyIGE9dGhpcy5jbG9uZSgpO3ZhciBiPW51bS5jbG9uZSgpO2EubmVnYXRpdmU9MDtiLm5lZ2F0aXZlPTA7Zm9yKHZhciBzaGlmdD0wO2EuaXNFdmVuKCkmJmIuaXNFdmVuKCk7c2hpZnQrKyl7YS5pdXNocm4oMSk7Yi5pdXNocm4oMSl9ZG97d2hpbGUoYS5pc0V2ZW4oKSl7YS5pdXNocm4oMSl9d2hpbGUoYi5pc0V2ZW4oKSl7Yi5pdXNocm4oMSl9dmFyIHI9YS5jbXAoYik7aWYocjwwKXt2YXIgdD1hO2E9YjtiPXR9ZWxzZSBpZihyPT09MHx8Yi5jbXBuKDEpPT09MCl7YnJlYWt9YS5pc3ViKGIpfXdoaWxlKHRydWUpO3JldHVybiBiLml1c2hsbihzaGlmdCl9O0JOLnByb3RvdHlwZS5pbnZtPWZ1bmN0aW9uIGludm0obnVtKXtyZXR1cm4gdGhpcy5lZ2NkKG51bSkuYS51bW9kKG51bSl9O0JOLnByb3RvdHlwZS5pc0V2ZW49ZnVuY3Rpb24gaXNFdmVuKCl7cmV0dXJuKHRoaXMud29yZHNbMF0mMSk9PT0wfTtCTi5wcm90b3R5cGUuaXNPZGQ9ZnVuY3Rpb24gaXNPZGQoKXtyZXR1cm4odGhpcy53b3Jkc1swXSYxKT09PTF9O0JOLnByb3RvdHlwZS5hbmRsbj1mdW5jdGlvbiBhbmRsbihudW0pe3JldHVybiB0aGlzLndvcmRzWzBdJm51bX07Qk4ucHJvdG90eXBlLmJpbmNuPWZ1bmN0aW9uIGJpbmNuKGJpdCl7YXNzZXJ0KHR5cGVvZiBiaXQ9PT1cIm51bWJlclwiKTt2YXIgcj1iaXQlMjY7dmFyIHM9KGJpdC1yKS8yNjt2YXIgcT0xPDxyO2lmKHRoaXMubGVuZ3RoPD1zKXt0aGlzLl9leHBhbmQocysxKTt0aGlzLndvcmRzW3NdfD1xO3JldHVybiB0aGlzfXZhciBjYXJyeT1xO2Zvcih2YXIgaT1zO2NhcnJ5IT09MCYmaTx0aGlzLmxlbmd0aDtpKyspe3ZhciB3PXRoaXMud29yZHNbaV18MDt3Kz1jYXJyeTtjYXJyeT13Pj4+MjY7dyY9NjcxMDg4NjM7dGhpcy53b3Jkc1tpXT13fWlmKGNhcnJ5IT09MCl7dGhpcy53b3Jkc1tpXT1jYXJyeTt0aGlzLmxlbmd0aCsrfXJldHVybiB0aGlzfTtCTi5wcm90b3R5cGUuaXNaZXJvPWZ1bmN0aW9uIGlzWmVybygpe3JldHVybiB0aGlzLmxlbmd0aD09PTEmJnRoaXMud29yZHNbMF09PT0wfTtCTi5wcm90b3R5cGUuY21wbj1mdW5jdGlvbiBjbXBuKG51bSl7dmFyIG5lZ2F0aXZlPW51bTwwO2lmKHRoaXMubmVnYXRpdmUhPT0wJiYhbmVnYXRpdmUpcmV0dXJuLTE7aWYodGhpcy5uZWdhdGl2ZT09PTAmJm5lZ2F0aXZlKXJldHVybiAxO3RoaXMuc3RyaXAoKTt2YXIgcmVzO2lmKHRoaXMubGVuZ3RoPjEpe3Jlcz0xfWVsc2V7aWYobmVnYXRpdmUpe251bT0tbnVtfWFzc2VydChudW08PTY3MTA4ODYzLFwiTnVtYmVyIGlzIHRvbyBiaWdcIik7dmFyIHc9dGhpcy53b3Jkc1swXXwwO3Jlcz13PT09bnVtPzA6dzxudW0/LTE6MX1pZih0aGlzLm5lZ2F0aXZlIT09MClyZXR1cm4tcmVzfDA7cmV0dXJuIHJlc307Qk4ucHJvdG90eXBlLmNtcD1mdW5jdGlvbiBjbXAobnVtKXtpZih0aGlzLm5lZ2F0aXZlIT09MCYmbnVtLm5lZ2F0aXZlPT09MClyZXR1cm4tMTtpZih0aGlzLm5lZ2F0aXZlPT09MCYmbnVtLm5lZ2F0aXZlIT09MClyZXR1cm4gMTt2YXIgcmVzPXRoaXMudWNtcChudW0pO2lmKHRoaXMubmVnYXRpdmUhPT0wKXJldHVybi1yZXN8MDtyZXR1cm4gcmVzfTtCTi5wcm90b3R5cGUudWNtcD1mdW5jdGlvbiB1Y21wKG51bSl7aWYodGhpcy5sZW5ndGg+bnVtLmxlbmd0aClyZXR1cm4gMTtpZih0aGlzLmxlbmd0aDxudW0ubGVuZ3RoKXJldHVybi0xO3ZhciByZXM9MDtmb3IodmFyIGk9dGhpcy5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIGE9dGhpcy53b3Jkc1tpXXwwO3ZhciBiPW51bS53b3Jkc1tpXXwwO2lmKGE9PT1iKWNvbnRpbnVlO2lmKGE8Yil7cmVzPS0xfWVsc2UgaWYoYT5iKXtyZXM9MX1icmVha31yZXR1cm4gcmVzfTtCTi5wcm90b3R5cGUuZ3RuPWZ1bmN0aW9uIGd0bihudW0pe3JldHVybiB0aGlzLmNtcG4obnVtKT09PTF9O0JOLnByb3RvdHlwZS5ndD1mdW5jdGlvbiBndChudW0pe3JldHVybiB0aGlzLmNtcChudW0pPT09MX07Qk4ucHJvdG90eXBlLmd0ZW49ZnVuY3Rpb24gZ3RlbihudW0pe3JldHVybiB0aGlzLmNtcG4obnVtKT49MH07Qk4ucHJvdG90eXBlLmd0ZT1mdW5jdGlvbiBndGUobnVtKXtyZXR1cm4gdGhpcy5jbXAobnVtKT49MH07Qk4ucHJvdG90eXBlLmx0bj1mdW5jdGlvbiBsdG4obnVtKXtyZXR1cm4gdGhpcy5jbXBuKG51bSk9PT0tMX07Qk4ucHJvdG90eXBlLmx0PWZ1bmN0aW9uIGx0KG51bSl7cmV0dXJuIHRoaXMuY21wKG51bSk9PT0tMX07Qk4ucHJvdG90eXBlLmx0ZW49ZnVuY3Rpb24gbHRlbihudW0pe3JldHVybiB0aGlzLmNtcG4obnVtKTw9MH07Qk4ucHJvdG90eXBlLmx0ZT1mdW5jdGlvbiBsdGUobnVtKXtyZXR1cm4gdGhpcy5jbXAobnVtKTw9MH07Qk4ucHJvdG90eXBlLmVxbj1mdW5jdGlvbiBlcW4obnVtKXtyZXR1cm4gdGhpcy5jbXBuKG51bSk9PT0wfTtCTi5wcm90b3R5cGUuZXE9ZnVuY3Rpb24gZXEobnVtKXtyZXR1cm4gdGhpcy5jbXAobnVtKT09PTB9O0JOLnJlZD1mdW5jdGlvbiByZWQobnVtKXtyZXR1cm4gbmV3IFJlZChudW0pfTtCTi5wcm90b3R5cGUudG9SZWQ9ZnVuY3Rpb24gdG9SZWQoY3R4KXthc3NlcnQoIXRoaXMucmVkLFwiQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dFwiKTthc3NlcnQodGhpcy5uZWdhdGl2ZT09PTAsXCJyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlc1wiKTtyZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KX07Qk4ucHJvdG90eXBlLmZyb21SZWQ9ZnVuY3Rpb24gZnJvbVJlZCgpe2Fzc2VydCh0aGlzLnJlZCxcImZyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHRcIik7cmV0dXJuIHRoaXMucmVkLmNvbnZlcnRGcm9tKHRoaXMpfTtCTi5wcm90b3R5cGUuX2ZvcmNlUmVkPWZ1bmN0aW9uIF9mb3JjZVJlZChjdHgpe3RoaXMucmVkPWN0eDtyZXR1cm4gdGhpc307Qk4ucHJvdG90eXBlLmZvcmNlUmVkPWZ1bmN0aW9uIGZvcmNlUmVkKGN0eCl7YXNzZXJ0KCF0aGlzLnJlZCxcIkFscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHRcIik7cmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCl9O0JOLnByb3RvdHlwZS5yZWRBZGQ9ZnVuY3Rpb24gcmVkQWRkKG51bSl7YXNzZXJ0KHRoaXMucmVkLFwicmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKTtyZXR1cm4gdGhpcy5yZWQuYWRkKHRoaXMsbnVtKX07Qk4ucHJvdG90eXBlLnJlZElBZGQ9ZnVuY3Rpb24gcmVkSUFkZChudW0pe2Fzc2VydCh0aGlzLnJlZCxcInJlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpO3JldHVybiB0aGlzLnJlZC5pYWRkKHRoaXMsbnVtKX07Qk4ucHJvdG90eXBlLnJlZFN1Yj1mdW5jdGlvbiByZWRTdWIobnVtKXthc3NlcnQodGhpcy5yZWQsXCJyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpO3JldHVybiB0aGlzLnJlZC5zdWIodGhpcyxudW0pfTtCTi5wcm90b3R5cGUucmVkSVN1Yj1mdW5jdGlvbiByZWRJU3ViKG51bSl7YXNzZXJ0KHRoaXMucmVkLFwicmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIik7cmV0dXJuIHRoaXMucmVkLmlzdWIodGhpcyxudW0pfTtCTi5wcm90b3R5cGUucmVkU2hsPWZ1bmN0aW9uIHJlZFNobChudW0pe2Fzc2VydCh0aGlzLnJlZCxcInJlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIik7cmV0dXJuIHRoaXMucmVkLnNobCh0aGlzLG51bSl9O0JOLnByb3RvdHlwZS5yZWRNdWw9ZnVuY3Rpb24gcmVkTXVsKG51bSl7YXNzZXJ0KHRoaXMucmVkLFwicmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKTt0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLG51bSk7cmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLG51bSl9O0JOLnByb3RvdHlwZS5yZWRJTXVsPWZ1bmN0aW9uIHJlZElNdWwobnVtKXthc3NlcnQodGhpcy5yZWQsXCJyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpO3RoaXMucmVkLl92ZXJpZnkyKHRoaXMsbnVtKTtyZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLG51bSl9O0JOLnByb3RvdHlwZS5yZWRTcXI9ZnVuY3Rpb24gcmVkU3FyKCl7YXNzZXJ0KHRoaXMucmVkLFwicmVkU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKTt0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtyZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpfTtCTi5wcm90b3R5cGUucmVkSVNxcj1mdW5jdGlvbiByZWRJU3FyKCl7YXNzZXJ0KHRoaXMucmVkLFwicmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIik7dGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7cmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyl9O0JOLnByb3RvdHlwZS5yZWRTcXJ0PWZ1bmN0aW9uIHJlZFNxcnQoKXthc3NlcnQodGhpcy5yZWQsXCJyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKTt0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtyZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKX07Qk4ucHJvdG90eXBlLnJlZEludm09ZnVuY3Rpb24gcmVkSW52bSgpe2Fzc2VydCh0aGlzLnJlZCxcInJlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpO3RoaXMucmVkLl92ZXJpZnkxKHRoaXMpO3JldHVybiB0aGlzLnJlZC5pbnZtKHRoaXMpfTtCTi5wcm90b3R5cGUucmVkTmVnPWZ1bmN0aW9uIHJlZE5lZygpe2Fzc2VydCh0aGlzLnJlZCxcInJlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIik7dGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7cmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKX07Qk4ucHJvdG90eXBlLnJlZFBvdz1mdW5jdGlvbiByZWRQb3cobnVtKXthc3NlcnQodGhpcy5yZWQmJiFudW0ucmVkLFwicmVkUG93KG5vcm1hbE51bSlcIik7dGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7cmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLG51bSl9O3ZhciBwcmltZXM9e2syNTY6bnVsbCxwMjI0Om51bGwscDE5MjpudWxsLHAyNTUxOTpudWxsfTtmdW5jdGlvbiBNUHJpbWUobmFtZSxwKXt0aGlzLm5hbWU9bmFtZTt0aGlzLnA9bmV3IEJOKHAsMTYpO3RoaXMubj10aGlzLnAuYml0TGVuZ3RoKCk7dGhpcy5rPW5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7dGhpcy50bXA9dGhpcy5fdG1wKCl9TVByaW1lLnByb3RvdHlwZS5fdG1wPWZ1bmN0aW9uIF90bXAoKXt2YXIgdG1wPW5ldyBCTihudWxsKTt0bXAud29yZHM9bmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4vMTMpKTtyZXR1cm4gdG1wfTtNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2U9ZnVuY3Rpb24gaXJlZHVjZShudW0pe3ZhciByPW51bTt2YXIgcmxlbjtkb3t0aGlzLnNwbGl0KHIsdGhpcy50bXApO3I9dGhpcy5pbXVsSyhyKTtyPXIuaWFkZCh0aGlzLnRtcCk7cmxlbj1yLmJpdExlbmd0aCgpfXdoaWxlKHJsZW4+dGhpcy5uKTt2YXIgY21wPXJsZW48dGhpcy5uPy0xOnIudWNtcCh0aGlzLnApO2lmKGNtcD09PTApe3Iud29yZHNbMF09MDtyLmxlbmd0aD0xfWVsc2UgaWYoY21wPjApe3IuaXN1Yih0aGlzLnApfWVsc2V7aWYoci5zdHJpcCE9PXVuZGVmaW5lZCl7ci5zdHJpcCgpfWVsc2V7ci5fc3RyaXAoKX19cmV0dXJuIHJ9O01QcmltZS5wcm90b3R5cGUuc3BsaXQ9ZnVuY3Rpb24gc3BsaXQoaW5wdXQsb3V0KXtpbnB1dC5pdXNocm4odGhpcy5uLDAsb3V0KX07TVByaW1lLnByb3RvdHlwZS5pbXVsSz1mdW5jdGlvbiBpbXVsSyhudW0pe3JldHVybiBudW0uaW11bCh0aGlzLmspfTtmdW5jdGlvbiBLMjU2KCl7TVByaW1lLmNhbGwodGhpcyxcImsyNTZcIixcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmXCIpfWluaGVyaXRzKEsyNTYsTVByaW1lKTtLMjU2LnByb3RvdHlwZS5zcGxpdD1mdW5jdGlvbiBzcGxpdChpbnB1dCxvdXRwdXQpe3ZhciBtYXNrPTQxOTQzMDM7dmFyIG91dExlbj1NYXRoLm1pbihpbnB1dC5sZW5ndGgsOSk7Zm9yKHZhciBpPTA7aTxvdXRMZW47aSsrKXtvdXRwdXQud29yZHNbaV09aW5wdXQud29yZHNbaV19b3V0cHV0Lmxlbmd0aD1vdXRMZW47aWYoaW5wdXQubGVuZ3RoPD05KXtpbnB1dC53b3Jkc1swXT0wO2lucHV0Lmxlbmd0aD0xO3JldHVybn12YXIgcHJldj1pbnB1dC53b3Jkc1s5XTtvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXT1wcmV2Jm1hc2s7Zm9yKGk9MTA7aTxpbnB1dC5sZW5ndGg7aSsrKXt2YXIgbmV4dD1pbnB1dC53b3Jkc1tpXXwwO2lucHV0LndvcmRzW2ktMTBdPShuZXh0Jm1hc2spPDw0fHByZXY+Pj4yMjtwcmV2PW5leHR9cHJldj4+Pj0yMjtpbnB1dC53b3Jkc1tpLTEwXT1wcmV2O2lmKHByZXY9PT0wJiZpbnB1dC5sZW5ndGg+MTApe2lucHV0Lmxlbmd0aC09MTB9ZWxzZXtpbnB1dC5sZW5ndGgtPTl9fTtLMjU2LnByb3RvdHlwZS5pbXVsSz1mdW5jdGlvbiBpbXVsSyhudW0pe251bS53b3Jkc1tudW0ubGVuZ3RoXT0wO251bS53b3Jkc1tudW0ubGVuZ3RoKzFdPTA7bnVtLmxlbmd0aCs9Mjt2YXIgbG89MDtmb3IodmFyIGk9MDtpPG51bS5sZW5ndGg7aSsrKXt2YXIgdz1udW0ud29yZHNbaV18MDtsbys9dyo5Nzc7bnVtLndvcmRzW2ldPWxvJjY3MTA4ODYzO2xvPXcqNjQrKGxvLzY3MTA4ODY0fDApfWlmKG51bS53b3Jkc1tudW0ubGVuZ3RoLTFdPT09MCl7bnVtLmxlbmd0aC0tO2lmKG51bS53b3Jkc1tudW0ubGVuZ3RoLTFdPT09MCl7bnVtLmxlbmd0aC0tfX1yZXR1cm4gbnVtfTtmdW5jdGlvbiBQMjI0KCl7TVByaW1lLmNhbGwodGhpcyxcInAyMjRcIixcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxXCIpfWluaGVyaXRzKFAyMjQsTVByaW1lKTtmdW5jdGlvbiBQMTkyKCl7TVByaW1lLmNhbGwodGhpcyxcInAxOTJcIixcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmXCIpfWluaGVyaXRzKFAxOTIsTVByaW1lKTtmdW5jdGlvbiBQMjU1MTkoKXtNUHJpbWUuY2FsbCh0aGlzLFwiMjU1MTlcIixcIjdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWRcIil9aW5oZXJpdHMoUDI1NTE5LE1QcmltZSk7UDI1NTE5LnByb3RvdHlwZS5pbXVsSz1mdW5jdGlvbiBpbXVsSyhudW0pe3ZhciBjYXJyeT0wO2Zvcih2YXIgaT0wO2k8bnVtLmxlbmd0aDtpKyspe3ZhciBoaT0obnVtLndvcmRzW2ldfDApKjE5K2NhcnJ5O3ZhciBsbz1oaSY2NzEwODg2MztoaT4+Pj0yNjtudW0ud29yZHNbaV09bG87Y2Fycnk9aGl9aWYoY2FycnkhPT0wKXtudW0ud29yZHNbbnVtLmxlbmd0aCsrXT1jYXJyeX1yZXR1cm4gbnVtfTtCTi5fcHJpbWU9ZnVuY3Rpb24gcHJpbWUobmFtZSl7aWYocHJpbWVzW25hbWVdKXJldHVybiBwcmltZXNbbmFtZV07dmFyIHByaW1lO2lmKG5hbWU9PT1cImsyNTZcIil7cHJpbWU9bmV3IEsyNTZ9ZWxzZSBpZihuYW1lPT09XCJwMjI0XCIpe3ByaW1lPW5ldyBQMjI0fWVsc2UgaWYobmFtZT09PVwicDE5MlwiKXtwcmltZT1uZXcgUDE5Mn1lbHNlIGlmKG5hbWU9PT1cInAyNTUxOVwiKXtwcmltZT1uZXcgUDI1NTE5fWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBwcmltZSBcIituYW1lKX1wcmltZXNbbmFtZV09cHJpbWU7cmV0dXJuIHByaW1lfTtmdW5jdGlvbiBSZWQobSl7aWYodHlwZW9mIG09PT1cInN0cmluZ1wiKXt2YXIgcHJpbWU9Qk4uX3ByaW1lKG0pO3RoaXMubT1wcmltZS5wO3RoaXMucHJpbWU9cHJpbWV9ZWxzZXthc3NlcnQobS5ndG4oMSksXCJtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDFcIik7dGhpcy5tPW07dGhpcy5wcmltZT1udWxsfX1SZWQucHJvdG90eXBlLl92ZXJpZnkxPWZ1bmN0aW9uIF92ZXJpZnkxKGEpe2Fzc2VydChhLm5lZ2F0aXZlPT09MCxcInJlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzXCIpO2Fzc2VydChhLnJlZCxcInJlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIil9O1JlZC5wcm90b3R5cGUuX3ZlcmlmeTI9ZnVuY3Rpb24gX3ZlcmlmeTIoYSxiKXthc3NlcnQoKGEubmVnYXRpdmV8Yi5uZWdhdGl2ZSk9PT0wLFwicmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXNcIik7YXNzZXJ0KGEucmVkJiZhLnJlZD09PWIucmVkLFwicmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKX07UmVkLnByb3RvdHlwZS5pbW9kPWZ1bmN0aW9uIGltb2QoYSl7aWYodGhpcy5wcmltZSlyZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtyZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpfTtSZWQucHJvdG90eXBlLm5lZz1mdW5jdGlvbiBuZWcoYSl7aWYoYS5pc1plcm8oKSl7cmV0dXJuIGEuY2xvbmUoKX1yZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyl9O1JlZC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uIGFkZChhLGIpe3RoaXMuX3ZlcmlmeTIoYSxiKTt2YXIgcmVzPWEuYWRkKGIpO2lmKHJlcy5jbXAodGhpcy5tKT49MCl7cmVzLmlzdWIodGhpcy5tKX1yZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKX07UmVkLnByb3RvdHlwZS5pYWRkPWZ1bmN0aW9uIGlhZGQoYSxiKXt0aGlzLl92ZXJpZnkyKGEsYik7dmFyIHJlcz1hLmlhZGQoYik7aWYocmVzLmNtcCh0aGlzLm0pPj0wKXtyZXMuaXN1Yih0aGlzLm0pfXJldHVybiByZXN9O1JlZC5wcm90b3R5cGUuc3ViPWZ1bmN0aW9uIHN1YihhLGIpe3RoaXMuX3ZlcmlmeTIoYSxiKTt2YXIgcmVzPWEuc3ViKGIpO2lmKHJlcy5jbXBuKDApPDApe3Jlcy5pYWRkKHRoaXMubSl9cmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyl9O1JlZC5wcm90b3R5cGUuaXN1Yj1mdW5jdGlvbiBpc3ViKGEsYil7dGhpcy5fdmVyaWZ5MihhLGIpO3ZhciByZXM9YS5pc3ViKGIpO2lmKHJlcy5jbXBuKDApPDApe3Jlcy5pYWRkKHRoaXMubSl9cmV0dXJuIHJlc307UmVkLnByb3RvdHlwZS5zaGw9ZnVuY3Rpb24gc2hsKGEsbnVtKXt0aGlzLl92ZXJpZnkxKGEpO3JldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKX07UmVkLnByb3RvdHlwZS5pbXVsPWZ1bmN0aW9uIGltdWwoYSxiKXt0aGlzLl92ZXJpZnkyKGEsYik7cmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpfTtSZWQucHJvdG90eXBlLm11bD1mdW5jdGlvbiBtdWwoYSxiKXt0aGlzLl92ZXJpZnkyKGEsYik7cmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSl9O1JlZC5wcm90b3R5cGUuaXNxcj1mdW5jdGlvbiBpc3FyKGEpe3JldHVybiB0aGlzLmltdWwoYSxhLmNsb25lKCkpfTtSZWQucHJvdG90eXBlLnNxcj1mdW5jdGlvbiBzcXIoYSl7cmV0dXJuIHRoaXMubXVsKGEsYSl9O1JlZC5wcm90b3R5cGUuc3FydD1mdW5jdGlvbiBzcXJ0KGEpe2lmKGEuaXNaZXJvKCkpcmV0dXJuIGEuY2xvbmUoKTt2YXIgbW9kMz10aGlzLm0uYW5kbG4oMyk7YXNzZXJ0KG1vZDMlMj09PTEpO2lmKG1vZDM9PT0zKXt2YXIgcG93PXRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7cmV0dXJuIHRoaXMucG93KGEscG93KX12YXIgcT10aGlzLm0uc3VibigxKTt2YXIgcz0wO3doaWxlKCFxLmlzWmVybygpJiZxLmFuZGxuKDEpPT09MCl7cysrO3EuaXVzaHJuKDEpfWFzc2VydCghcS5pc1plcm8oKSk7dmFyIG9uZT1uZXcgQk4oMSkudG9SZWQodGhpcyk7dmFyIG5PbmU9b25lLnJlZE5lZygpO3ZhciBscG93PXRoaXMubS5zdWJuKDEpLml1c2hybigxKTt2YXIgej10aGlzLm0uYml0TGVuZ3RoKCk7ej1uZXcgQk4oMip6KnopLnRvUmVkKHRoaXMpO3doaWxlKHRoaXMucG93KHosbHBvdykuY21wKG5PbmUpIT09MCl7ei5yZWRJQWRkKG5PbmUpfXZhciBjPXRoaXMucG93KHoscSk7dmFyIHI9dGhpcy5wb3coYSxxLmFkZG4oMSkuaXVzaHJuKDEpKTt2YXIgdD10aGlzLnBvdyhhLHEpO3ZhciBtPXM7d2hpbGUodC5jbXAob25lKSE9PTApe3ZhciB0bXA9dDtmb3IodmFyIGk9MDt0bXAuY21wKG9uZSkhPT0wO2krKyl7dG1wPXRtcC5yZWRTcXIoKX1hc3NlcnQoaTxtKTt2YXIgYj10aGlzLnBvdyhjLG5ldyBCTigxKS5pdXNobG4obS1pLTEpKTtyPXIucmVkTXVsKGIpO2M9Yi5yZWRTcXIoKTt0PXQucmVkTXVsKGMpO209aX1yZXR1cm4gcn07UmVkLnByb3RvdHlwZS5pbnZtPWZ1bmN0aW9uIGludm0oYSl7dmFyIGludj1hLl9pbnZtcCh0aGlzLm0pO2lmKGludi5uZWdhdGl2ZSE9PTApe2ludi5uZWdhdGl2ZT0wO3JldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKX1lbHNle3JldHVybiB0aGlzLmltb2QoaW52KX19O1JlZC5wcm90b3R5cGUucG93PWZ1bmN0aW9uIHBvdyhhLG51bSl7aWYobnVtLmlzWmVybygpKXJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7aWYobnVtLmNtcG4oMSk9PT0wKXJldHVybiBhLmNsb25lKCk7dmFyIHdpbmRvd1NpemU9NDt2YXIgd25kPW5ldyBBcnJheSgxPDx3aW5kb3dTaXplKTt3bmRbMF09bmV3IEJOKDEpLnRvUmVkKHRoaXMpO3duZFsxXT1hO2Zvcih2YXIgaT0yO2k8d25kLmxlbmd0aDtpKyspe3duZFtpXT10aGlzLm11bCh3bmRbaS0xXSxhKX12YXIgcmVzPXduZFswXTt2YXIgY3VycmVudD0wO3ZhciBjdXJyZW50TGVuPTA7dmFyIHN0YXJ0PW51bS5iaXRMZW5ndGgoKSUyNjtpZihzdGFydD09PTApe3N0YXJ0PTI2fWZvcihpPW51bS5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIHdvcmQ9bnVtLndvcmRzW2ldO2Zvcih2YXIgaj1zdGFydC0xO2o+PTA7ai0tKXt2YXIgYml0PXdvcmQ+PmomMTtpZihyZXMhPT13bmRbMF0pe3Jlcz10aGlzLnNxcihyZXMpfWlmKGJpdD09PTAmJmN1cnJlbnQ9PT0wKXtjdXJyZW50TGVuPTA7Y29udGludWV9Y3VycmVudDw8PTE7Y3VycmVudHw9Yml0O2N1cnJlbnRMZW4rKztpZihjdXJyZW50TGVuIT09d2luZG93U2l6ZSYmKGkhPT0wfHxqIT09MCkpY29udGludWU7cmVzPXRoaXMubXVsKHJlcyx3bmRbY3VycmVudF0pO2N1cnJlbnRMZW49MDtjdXJyZW50PTB9c3RhcnQ9MjZ9cmV0dXJuIHJlc307UmVkLnByb3RvdHlwZS5jb252ZXJ0VG89ZnVuY3Rpb24gY29udmVydFRvKG51bSl7dmFyIHI9bnVtLnVtb2QodGhpcy5tKTtyZXR1cm4gcj09PW51bT9yLmNsb25lKCk6cn07UmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbT1mdW5jdGlvbiBjb252ZXJ0RnJvbShudW0pe3ZhciByZXM9bnVtLmNsb25lKCk7cmVzLnJlZD1udWxsO3JldHVybiByZXN9O0JOLm1vbnQ9ZnVuY3Rpb24gbW9udChudW0pe3JldHVybiBuZXcgTW9udChudW0pfTtmdW5jdGlvbiBNb250KG0pe1JlZC5jYWxsKHRoaXMsbSk7dGhpcy5zaGlmdD10aGlzLm0uYml0TGVuZ3RoKCk7aWYodGhpcy5zaGlmdCUyNiE9PTApe3RoaXMuc2hpZnQrPTI2LXRoaXMuc2hpZnQlMjZ9dGhpcy5yPW5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7dGhpcy5yMj10aGlzLmltb2QodGhpcy5yLnNxcigpKTt0aGlzLnJpbnY9dGhpcy5yLl9pbnZtcCh0aGlzLm0pO3RoaXMubWludj10aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7dGhpcy5taW52PXRoaXMubWludi51bW9kKHRoaXMucik7dGhpcy5taW52PXRoaXMuci5zdWIodGhpcy5taW52KX1pbmhlcml0cyhNb250LFJlZCk7TW9udC5wcm90b3R5cGUuY29udmVydFRvPWZ1bmN0aW9uIGNvbnZlcnRUbyhudW0pe3JldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKX07TW9udC5wcm90b3R5cGUuY29udmVydEZyb209ZnVuY3Rpb24gY29udmVydEZyb20obnVtKXt2YXIgcj10aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtyLnJlZD1udWxsO3JldHVybiByfTtNb250LnByb3RvdHlwZS5pbXVsPWZ1bmN0aW9uIGltdWwoYSxiKXtpZihhLmlzWmVybygpfHxiLmlzWmVybygpKXthLndvcmRzWzBdPTA7YS5sZW5ndGg9MTtyZXR1cm4gYX12YXIgdD1hLmltdWwoYik7dmFyIGM9dC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7dmFyIHU9dC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTt2YXIgcmVzPXU7aWYodS5jbXAodGhpcy5tKT49MCl7cmVzPXUuaXN1Yih0aGlzLm0pfWVsc2UgaWYodS5jbXBuKDApPDApe3Jlcz11LmlhZGQodGhpcy5tKX1yZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKX07TW9udC5wcm90b3R5cGUubXVsPWZ1bmN0aW9uIG11bChhLGIpe2lmKGEuaXNaZXJvKCl8fGIuaXNaZXJvKCkpcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7dmFyIHQ9YS5tdWwoYik7dmFyIGM9dC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7dmFyIHU9dC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTt2YXIgcmVzPXU7aWYodS5jbXAodGhpcy5tKT49MCl7cmVzPXUuaXN1Yih0aGlzLm0pfWVsc2UgaWYodS5jbXBuKDApPDApe3Jlcz11LmlhZGQodGhpcy5tKX1yZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKX07TW9udC5wcm90b3R5cGUuaW52bT1mdW5jdGlvbiBpbnZtKGEpe3ZhciByZXM9dGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtyZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKX19KShcIm9iamVjdFwiPT09XCJ1bmRlZmluZWRcInx8bW9kdWxlLGNvbW1vbmpzR2xvYmFsKX0pO2NvbnN0IHZlcnNpb249XCJsb2dnZXIvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtsZXQgX3Blcm1hbmVudENlbnNvckVycm9ycz1mYWxzZTtsZXQgX2NlbnNvckVycm9ycz1mYWxzZTtjb25zdCBMb2dMZXZlbHM9e2RlYnVnOjEsZGVmYXVsdDoyLGluZm86Mix3YXJuaW5nOjMsZXJyb3I6NCxvZmY6NX07bGV0IF9sb2dMZXZlbD1Mb2dMZXZlbHNbXCJkZWZhdWx0XCJdO2xldCBfZ2xvYmFsTG9nZ2VyPW51bGw7ZnVuY3Rpb24gX2NoZWNrTm9ybWFsaXplKCl7dHJ5e2NvbnN0IG1pc3Npbmc9W107W1wiTkZEXCIsXCJORkNcIixcIk5GS0RcIixcIk5GS0NcIl0uZm9yRWFjaChmb3JtPT57dHJ5e2lmKFwidGVzdFwiLm5vcm1hbGl6ZShmb3JtKSE9PVwidGVzdFwiKXt0aHJvdyBuZXcgRXJyb3IoXCJiYWQgbm9ybWFsaXplXCIpfX1jYXRjaChlcnJvcil7bWlzc2luZy5wdXNoKGZvcm0pfX0pO2lmKG1pc3NpbmcubGVuZ3RoKXt0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nIFwiK21pc3Npbmcuam9pbihcIiwgXCIpKX1pZihTdHJpbmcuZnJvbUNoYXJDb2RlKDIzMykubm9ybWFsaXplKFwiTkZEXCIpIT09U3RyaW5nLmZyb21DaGFyQ29kZSgxMDEsNzY5KSl7dGhyb3cgbmV3IEVycm9yKFwiYnJva2VuIGltcGxlbWVudGF0aW9uXCIpfX1jYXRjaChlcnJvcil7cmV0dXJuIGVycm9yLm1lc3NhZ2V9cmV0dXJuIG51bGx9Y29uc3QgX25vcm1hbGl6ZUVycm9yPV9jaGVja05vcm1hbGl6ZSgpO3ZhciBMb2dMZXZlbDsoZnVuY3Rpb24oTG9nTGV2ZWwpe0xvZ0xldmVsW1wiREVCVUdcIl09XCJERUJVR1wiO0xvZ0xldmVsW1wiSU5GT1wiXT1cIklORk9cIjtMb2dMZXZlbFtcIldBUk5JTkdcIl09XCJXQVJOSU5HXCI7TG9nTGV2ZWxbXCJFUlJPUlwiXT1cIkVSUk9SXCI7TG9nTGV2ZWxbXCJPRkZcIl09XCJPRkZcIn0pKExvZ0xldmVsfHwoTG9nTGV2ZWw9e30pKTt2YXIgRXJyb3JDb2RlOyhmdW5jdGlvbihFcnJvckNvZGUpe0Vycm9yQ29kZVtcIlVOS05PV05fRVJST1JcIl09XCJVTktOT1dOX0VSUk9SXCI7RXJyb3JDb2RlW1wiTk9UX0lNUExFTUVOVEVEXCJdPVwiTk9UX0lNUExFTUVOVEVEXCI7RXJyb3JDb2RlW1wiVU5TVVBQT1JURURfT1BFUkFUSU9OXCJdPVwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCI7RXJyb3JDb2RlW1wiTkVUV09SS19FUlJPUlwiXT1cIk5FVFdPUktfRVJST1JcIjtFcnJvckNvZGVbXCJTRVJWRVJfRVJST1JcIl09XCJTRVJWRVJfRVJST1JcIjtFcnJvckNvZGVbXCJUSU1FT1VUXCJdPVwiVElNRU9VVFwiO0Vycm9yQ29kZVtcIkJVRkZFUl9PVkVSUlVOXCJdPVwiQlVGRkVSX09WRVJSVU5cIjtFcnJvckNvZGVbXCJOVU1FUklDX0ZBVUxUXCJdPVwiTlVNRVJJQ19GQVVMVFwiO0Vycm9yQ29kZVtcIk1JU1NJTkdfTkVXXCJdPVwiTUlTU0lOR19ORVdcIjtFcnJvckNvZGVbXCJJTlZBTElEX0FSR1VNRU5UXCJdPVwiSU5WQUxJRF9BUkdVTUVOVFwiO0Vycm9yQ29kZVtcIk1JU1NJTkdfQVJHVU1FTlRcIl09XCJNSVNTSU5HX0FSR1VNRU5UXCI7RXJyb3JDb2RlW1wiVU5FWFBFQ1RFRF9BUkdVTUVOVFwiXT1cIlVORVhQRUNURURfQVJHVU1FTlRcIjtFcnJvckNvZGVbXCJDQUxMX0VYQ0VQVElPTlwiXT1cIkNBTExfRVhDRVBUSU9OXCI7RXJyb3JDb2RlW1wiSU5TVUZGSUNJRU5UX0ZVTkRTXCJdPVwiSU5TVUZGSUNJRU5UX0ZVTkRTXCI7RXJyb3JDb2RlW1wiTk9OQ0VfRVhQSVJFRFwiXT1cIk5PTkNFX0VYUElSRURcIjtFcnJvckNvZGVbXCJSRVBMQUNFTUVOVF9VTkRFUlBSSUNFRFwiXT1cIlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VEXCI7RXJyb3JDb2RlW1wiVU5QUkVESUNUQUJMRV9HQVNfTElNSVRcIl09XCJVTlBSRURJQ1RBQkxFX0dBU19MSU1JVFwifSkoRXJyb3JDb2RlfHwoRXJyb3JDb2RlPXt9KSk7Y2xhc3MgTG9nZ2Vye2NvbnN0cnVjdG9yKHZlcnNpb24pe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidmVyc2lvblwiLHtlbnVtZXJhYmxlOnRydWUsdmFsdWU6dmVyc2lvbix3cml0YWJsZTpmYWxzZX0pfV9sb2cobG9nTGV2ZWwsYXJncyl7Y29uc3QgbGV2ZWw9bG9nTGV2ZWwudG9Mb3dlckNhc2UoKTtpZihMb2dMZXZlbHNbbGV2ZWxdPT1udWxsKXt0aGlzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbG9nIGxldmVsIG5hbWVcIixcImxvZ0xldmVsXCIsbG9nTGV2ZWwpfWlmKF9sb2dMZXZlbD5Mb2dMZXZlbHNbbGV2ZWxdKXtyZXR1cm59Y29uc29sZS5sb2cuYXBwbHkoY29uc29sZSxhcmdzKX1kZWJ1ZyguLi5hcmdzKXt0aGlzLl9sb2coTG9nZ2VyLmxldmVscy5ERUJVRyxhcmdzKX1pbmZvKC4uLmFyZ3Mpe3RoaXMuX2xvZyhMb2dnZXIubGV2ZWxzLklORk8sYXJncyl9d2FybiguLi5hcmdzKXt0aGlzLl9sb2coTG9nZ2VyLmxldmVscy5XQVJOSU5HLGFyZ3MpfW1ha2VFcnJvcihtZXNzYWdlLGNvZGUscGFyYW1zKXtpZihfY2Vuc29yRXJyb3JzKXtyZXR1cm4gdGhpcy5tYWtlRXJyb3IoXCJjZW5zb3JlZCBlcnJvclwiLGNvZGUse30pfWlmKCFjb2RlKXtjb2RlPUxvZ2dlci5lcnJvcnMuVU5LTk9XTl9FUlJPUn1pZighcGFyYW1zKXtwYXJhbXM9e319Y29uc3QgbWVzc2FnZURldGFpbHM9W107T2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGtleT0+e3RyeXttZXNzYWdlRGV0YWlscy5wdXNoKGtleStcIj1cIitKU09OLnN0cmluZ2lmeShwYXJhbXNba2V5XSkpfWNhdGNoKGVycm9yKXttZXNzYWdlRGV0YWlscy5wdXNoKGtleStcIj1cIitKU09OLnN0cmluZ2lmeShwYXJhbXNba2V5XS50b1N0cmluZygpKSl9fSk7bWVzc2FnZURldGFpbHMucHVzaChgY29kZT0ke2NvZGV9YCk7bWVzc2FnZURldGFpbHMucHVzaChgdmVyc2lvbj0ke3RoaXMudmVyc2lvbn1gKTtjb25zdCByZWFzb249bWVzc2FnZTtpZihtZXNzYWdlRGV0YWlscy5sZW5ndGgpe21lc3NhZ2UrPVwiIChcIittZXNzYWdlRGV0YWlscy5qb2luKFwiLCBcIikrXCIpXCJ9Y29uc3QgZXJyb3I9bmV3IEVycm9yKG1lc3NhZ2UpO2Vycm9yLnJlYXNvbj1yZWFzb247ZXJyb3IuY29kZT1jb2RlO09iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChmdW5jdGlvbihrZXkpe2Vycm9yW2tleV09cGFyYW1zW2tleV19KTtyZXR1cm4gZXJyb3J9dGhyb3dFcnJvcihtZXNzYWdlLGNvZGUscGFyYW1zKXt0aHJvdyB0aGlzLm1ha2VFcnJvcihtZXNzYWdlLGNvZGUscGFyYW1zKX10aHJvd0FyZ3VtZW50RXJyb3IobWVzc2FnZSxuYW1lLHZhbHVlKXtyZXR1cm4gdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2UsTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULHthcmd1bWVudDpuYW1lLHZhbHVlOnZhbHVlfSl9YXNzZXJ0KGNvbmRpdGlvbixtZXNzYWdlLGNvZGUscGFyYW1zKXtpZighIWNvbmRpdGlvbil7cmV0dXJufXRoaXMudGhyb3dFcnJvcihtZXNzYWdlLGNvZGUscGFyYW1zKX1hc3NlcnRBcmd1bWVudChjb25kaXRpb24sbWVzc2FnZSxuYW1lLHZhbHVlKXtpZighIWNvbmRpdGlvbil7cmV0dXJufXRoaXMudGhyb3dBcmd1bWVudEVycm9yKG1lc3NhZ2UsbmFtZSx2YWx1ZSl9Y2hlY2tOb3JtYWxpemUobWVzc2FnZSl7aWYobWVzc2FnZT09bnVsbCl7bWVzc2FnZT1cInBsYXRmb3JtIG1pc3NpbmcgU3RyaW5nLnByb3RvdHlwZS5ub3JtYWxpemVcIn1pZihfbm9ybWFsaXplRXJyb3Ipe3RoaXMudGhyb3dFcnJvcihcInBsYXRmb3JtIG1pc3NpbmcgU3RyaW5nLnByb3RvdHlwZS5ub3JtYWxpemVcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwiU3RyaW5nLnByb3RvdHlwZS5ub3JtYWxpemVcIixmb3JtOl9ub3JtYWxpemVFcnJvcn0pfX1jaGVja1NhZmVVaW50NTModmFsdWUsbWVzc2FnZSl7aWYodHlwZW9mIHZhbHVlIT09XCJudW1iZXJcIil7cmV0dXJufWlmKG1lc3NhZ2U9PW51bGwpe21lc3NhZ2U9XCJ2YWx1ZSBub3Qgc2FmZVwifWlmKHZhbHVlPDB8fHZhbHVlPj05MDA3MTk5MjU0NzQwOTkxKXt0aGlzLnRocm93RXJyb3IobWVzc2FnZSxMb2dnZXIuZXJyb3JzLk5VTUVSSUNfRkFVTFQse29wZXJhdGlvbjpcImNoZWNrU2FmZUludGVnZXJcIixmYXVsdDpcIm91dC1vZi1zYWZlLXJhbmdlXCIsdmFsdWU6dmFsdWV9KX1pZih2YWx1ZSUxKXt0aGlzLnRocm93RXJyb3IobWVzc2FnZSxMb2dnZXIuZXJyb3JzLk5VTUVSSUNfRkFVTFQse29wZXJhdGlvbjpcImNoZWNrU2FmZUludGVnZXJcIixmYXVsdDpcIm5vbi1pbnRlZ2VyXCIsdmFsdWU6dmFsdWV9KX19Y2hlY2tBcmd1bWVudENvdW50KGNvdW50LGV4cGVjdGVkQ291bnQsbWVzc2FnZSl7aWYobWVzc2FnZSl7bWVzc2FnZT1cIjogXCIrbWVzc2FnZX1lbHNle21lc3NhZ2U9XCJcIn1pZihjb3VudDxleHBlY3RlZENvdW50KXt0aGlzLnRocm93RXJyb3IoXCJtaXNzaW5nIGFyZ3VtZW50XCIrbWVzc2FnZSxMb2dnZXIuZXJyb3JzLk1JU1NJTkdfQVJHVU1FTlQse2NvdW50OmNvdW50LGV4cGVjdGVkQ291bnQ6ZXhwZWN0ZWRDb3VudH0pfWlmKGNvdW50PmV4cGVjdGVkQ291bnQpe3RoaXMudGhyb3dFcnJvcihcInRvbyBtYW55IGFyZ3VtZW50c1wiK21lc3NhZ2UsTG9nZ2VyLmVycm9ycy5VTkVYUEVDVEVEX0FSR1VNRU5ULHtjb3VudDpjb3VudCxleHBlY3RlZENvdW50OmV4cGVjdGVkQ291bnR9KX19Y2hlY2tOZXcodGFyZ2V0LGtpbmQpe2lmKHRhcmdldD09PU9iamVjdHx8dGFyZ2V0PT1udWxsKXt0aGlzLnRocm93RXJyb3IoXCJtaXNzaW5nIG5ld1wiLExvZ2dlci5lcnJvcnMuTUlTU0lOR19ORVcse25hbWU6a2luZC5uYW1lfSl9fWNoZWNrQWJzdHJhY3QodGFyZ2V0LGtpbmQpe2lmKHRhcmdldD09PWtpbmQpe3RoaXMudGhyb3dFcnJvcihcImNhbm5vdCBpbnN0YW50aWF0ZSBhYnN0cmFjdCBjbGFzcyBcIitKU09OLnN0cmluZ2lmeShraW5kLm5hbWUpK1wiIGRpcmVjdGx5OyB1c2UgYSBzdWItY2xhc3NcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7bmFtZTp0YXJnZXQubmFtZSxvcGVyYXRpb246XCJuZXdcIn0pfWVsc2UgaWYodGFyZ2V0PT09T2JqZWN0fHx0YXJnZXQ9PW51bGwpe3RoaXMudGhyb3dFcnJvcihcIm1pc3NpbmcgbmV3XCIsTG9nZ2VyLmVycm9ycy5NSVNTSU5HX05FVyx7bmFtZTpraW5kLm5hbWV9KX19c3RhdGljIGdsb2JhbExvZ2dlcigpe2lmKCFfZ2xvYmFsTG9nZ2VyKXtfZ2xvYmFsTG9nZ2VyPW5ldyBMb2dnZXIodmVyc2lvbil9cmV0dXJuIF9nbG9iYWxMb2dnZXJ9c3RhdGljIHNldENlbnNvcnNoaXAoY2Vuc29yc2hpcCxwZXJtYW5lbnQpe2lmKCFjZW5zb3JzaGlwJiZwZXJtYW5lbnQpe3RoaXMuZ2xvYmFsTG9nZ2VyKCkudGhyb3dFcnJvcihcImNhbm5vdCBwZXJtYW5lbnRseSBkaXNhYmxlIGNlbnNvcnNoaXBcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwic2V0Q2Vuc29yc2hpcFwifSl9aWYoX3Blcm1hbmVudENlbnNvckVycm9ycyl7aWYoIWNlbnNvcnNoaXApe3JldHVybn10aGlzLmdsb2JhbExvZ2dlcigpLnRocm93RXJyb3IoXCJlcnJvciBjZW5zb3JzaGlwIHBlcm1hbmVudFwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJzZXRDZW5zb3JzaGlwXCJ9KX1fY2Vuc29yRXJyb3JzPSEhY2Vuc29yc2hpcDtfcGVybWFuZW50Q2Vuc29yRXJyb3JzPSEhcGVybWFuZW50fXN0YXRpYyBzZXRMb2dMZXZlbChsb2dMZXZlbCl7Y29uc3QgbGV2ZWw9TG9nTGV2ZWxzW2xvZ0xldmVsLnRvTG93ZXJDYXNlKCldO2lmKGxldmVsPT1udWxsKXtMb2dnZXIuZ2xvYmFsTG9nZ2VyKCkud2FybihcImludmFsaWQgbG9nIGxldmVsIC0gXCIrbG9nTGV2ZWwpO3JldHVybn1fbG9nTGV2ZWw9bGV2ZWx9c3RhdGljIGZyb20odmVyc2lvbil7cmV0dXJuIG5ldyBMb2dnZXIodmVyc2lvbil9fUxvZ2dlci5lcnJvcnM9RXJyb3JDb2RlO0xvZ2dlci5sZXZlbHM9TG9nTGV2ZWw7Y29uc3QgdmVyc2lvbiQxPVwiYnl0ZXMvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXI9bmV3IExvZ2dlcih2ZXJzaW9uJDEpO2Z1bmN0aW9uIGlzSGV4YWJsZSh2YWx1ZSl7cmV0dXJuISF2YWx1ZS50b0hleFN0cmluZ31mdW5jdGlvbiBhZGRTbGljZShhcnJheSl7aWYoYXJyYXkuc2xpY2Upe3JldHVybiBhcnJheX1hcnJheS5zbGljZT1mdW5jdGlvbigpe2NvbnN0IGFyZ3M9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtyZXR1cm4gYWRkU2xpY2UobmV3IFVpbnQ4QXJyYXkoQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFycmF5LGFyZ3MpKSl9O3JldHVybiBhcnJheX1mdW5jdGlvbiBpc0J5dGVzTGlrZSh2YWx1ZSl7cmV0dXJuIGlzSGV4U3RyaW5nKHZhbHVlKSYmISh2YWx1ZS5sZW5ndGglMil8fGlzQnl0ZXModmFsdWUpfWZ1bmN0aW9uIGlzQnl0ZXModmFsdWUpe2lmKHZhbHVlPT1udWxsKXtyZXR1cm4gZmFsc2V9aWYodmFsdWUuY29uc3RydWN0b3I9PT1VaW50OEFycmF5KXtyZXR1cm4gdHJ1ZX1pZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtyZXR1cm4gZmFsc2V9aWYodmFsdWUubGVuZ3RoPT1udWxsKXtyZXR1cm4gZmFsc2V9Zm9yKGxldCBpPTA7aTx2YWx1ZS5sZW5ndGg7aSsrKXtjb25zdCB2PXZhbHVlW2ldO2lmKHR5cGVvZiB2IT09XCJudW1iZXJcInx8djwwfHx2Pj0yNTZ8fHYlMSl7cmV0dXJuIGZhbHNlfX1yZXR1cm4gdHJ1ZX1mdW5jdGlvbiBhcnJheWlmeSh2YWx1ZSxvcHRpb25zKXtpZighb3B0aW9ucyl7b3B0aW9ucz17fX1pZih0eXBlb2YgdmFsdWU9PT1cIm51bWJlclwiKXtsb2dnZXIuY2hlY2tTYWZlVWludDUzKHZhbHVlLFwiaW52YWxpZCBhcnJheWlmeSB2YWx1ZVwiKTtjb25zdCByZXN1bHQ9W107d2hpbGUodmFsdWUpe3Jlc3VsdC51bnNoaWZ0KHZhbHVlJjI1NSk7dmFsdWU9cGFyc2VJbnQoU3RyaW5nKHZhbHVlLzI1NikpfWlmKHJlc3VsdC5sZW5ndGg9PT0wKXtyZXN1bHQucHVzaCgwKX1yZXR1cm4gYWRkU2xpY2UobmV3IFVpbnQ4QXJyYXkocmVzdWx0KSl9aWYob3B0aW9ucy5hbGxvd01pc3NpbmdQcmVmaXgmJnR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCImJnZhbHVlLnN1YnN0cmluZygwLDIpIT09XCIweFwiKXt2YWx1ZT1cIjB4XCIrdmFsdWV9aWYoaXNIZXhhYmxlKHZhbHVlKSl7dmFsdWU9dmFsdWUudG9IZXhTdHJpbmcoKX1pZihpc0hleFN0cmluZyh2YWx1ZSkpe2xldCBoZXg9dmFsdWUuc3Vic3RyaW5nKDIpO2lmKGhleC5sZW5ndGglMil7aWYob3B0aW9ucy5oZXhQYWQ9PT1cImxlZnRcIil7aGV4PVwiMHgwXCIraGV4LnN1YnN0cmluZygyKX1lbHNlIGlmKG9wdGlvbnMuaGV4UGFkPT09XCJyaWdodFwiKXtoZXgrPVwiMFwifWVsc2V7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImhleCBkYXRhIGlzIG9kZC1sZW5ndGhcIixcInZhbHVlXCIsdmFsdWUpfX1jb25zdCByZXN1bHQ9W107Zm9yKGxldCBpPTA7aTxoZXgubGVuZ3RoO2krPTIpe3Jlc3VsdC5wdXNoKHBhcnNlSW50KGhleC5zdWJzdHJpbmcoaSxpKzIpLDE2KSl9cmV0dXJuIGFkZFNsaWNlKG5ldyBVaW50OEFycmF5KHJlc3VsdCkpfWlmKGlzQnl0ZXModmFsdWUpKXtyZXR1cm4gYWRkU2xpY2UobmV3IFVpbnQ4QXJyYXkodmFsdWUpKX1yZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYXJyYXlpZnkgdmFsdWVcIixcInZhbHVlXCIsdmFsdWUpfWZ1bmN0aW9uIGNvbmNhdChpdGVtcyl7Y29uc3Qgb2JqZWN0cz1pdGVtcy5tYXAoaXRlbT0+YXJyYXlpZnkoaXRlbSkpO2NvbnN0IGxlbmd0aD1vYmplY3RzLnJlZHVjZSgoYWNjdW0saXRlbSk9PmFjY3VtK2l0ZW0ubGVuZ3RoLDApO2NvbnN0IHJlc3VsdD1uZXcgVWludDhBcnJheShsZW5ndGgpO29iamVjdHMucmVkdWNlKChvZmZzZXQsb2JqZWN0KT0+e3Jlc3VsdC5zZXQob2JqZWN0LG9mZnNldCk7cmV0dXJuIG9mZnNldCtvYmplY3QubGVuZ3RofSwwKTtyZXR1cm4gYWRkU2xpY2UocmVzdWx0KX1mdW5jdGlvbiBzdHJpcFplcm9zKHZhbHVlKXtsZXQgcmVzdWx0PWFycmF5aWZ5KHZhbHVlKTtpZihyZXN1bHQubGVuZ3RoPT09MCl7cmV0dXJuIHJlc3VsdH1sZXQgc3RhcnQ9MDt3aGlsZShzdGFydDxyZXN1bHQubGVuZ3RoJiZyZXN1bHRbc3RhcnRdPT09MCl7c3RhcnQrK31pZihzdGFydCl7cmVzdWx0PXJlc3VsdC5zbGljZShzdGFydCl9cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiB6ZXJvUGFkKHZhbHVlLGxlbmd0aCl7dmFsdWU9YXJyYXlpZnkodmFsdWUpO2lmKHZhbHVlLmxlbmd0aD5sZW5ndGgpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ2YWx1ZSBvdXQgb2YgcmFuZ2VcIixcInZhbHVlXCIsYXJndW1lbnRzWzBdKX1jb25zdCByZXN1bHQ9bmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtyZXN1bHQuc2V0KHZhbHVlLGxlbmd0aC12YWx1ZS5sZW5ndGgpO3JldHVybiBhZGRTbGljZShyZXN1bHQpfWZ1bmN0aW9uIGlzSGV4U3RyaW5nKHZhbHVlLGxlbmd0aCl7aWYodHlwZW9mIHZhbHVlIT09XCJzdHJpbmdcInx8IXZhbHVlLm1hdGNoKC9eMHhbMC05QS1GYS1mXSokLykpe3JldHVybiBmYWxzZX1pZihsZW5ndGgmJnZhbHVlLmxlbmd0aCE9PTIrMipsZW5ndGgpe3JldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX1jb25zdCBIZXhDaGFyYWN0ZXJzPVwiMDEyMzQ1Njc4OWFiY2RlZlwiO2Z1bmN0aW9uIGhleGxpZnkodmFsdWUsb3B0aW9ucyl7aWYoIW9wdGlvbnMpe29wdGlvbnM9e319aWYodHlwZW9mIHZhbHVlPT09XCJudW1iZXJcIil7bG9nZ2VyLmNoZWNrU2FmZVVpbnQ1Myh2YWx1ZSxcImludmFsaWQgaGV4bGlmeSB2YWx1ZVwiKTtsZXQgaGV4PVwiXCI7d2hpbGUodmFsdWUpe2hleD1IZXhDaGFyYWN0ZXJzW3ZhbHVlJjE1XStoZXg7dmFsdWU9TWF0aC5mbG9vcih2YWx1ZS8xNil9aWYoaGV4Lmxlbmd0aCl7aWYoaGV4Lmxlbmd0aCUyKXtoZXg9XCIwXCIraGV4fXJldHVyblwiMHhcIitoZXh9cmV0dXJuXCIweDAwXCJ9aWYob3B0aW9ucy5hbGxvd01pc3NpbmdQcmVmaXgmJnR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCImJnZhbHVlLnN1YnN0cmluZygwLDIpIT09XCIweFwiKXt2YWx1ZT1cIjB4XCIrdmFsdWV9aWYoaXNIZXhhYmxlKHZhbHVlKSl7cmV0dXJuIHZhbHVlLnRvSGV4U3RyaW5nKCl9aWYoaXNIZXhTdHJpbmcodmFsdWUpKXtpZih2YWx1ZS5sZW5ndGglMil7aWYob3B0aW9ucy5oZXhQYWQ9PT1cImxlZnRcIil7dmFsdWU9XCIweDBcIit2YWx1ZS5zdWJzdHJpbmcoMil9ZWxzZSBpZihvcHRpb25zLmhleFBhZD09PVwicmlnaHRcIil7dmFsdWUrPVwiMFwifWVsc2V7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImhleCBkYXRhIGlzIG9kZC1sZW5ndGhcIixcInZhbHVlXCIsdmFsdWUpfX1yZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKX1pZihpc0J5dGVzKHZhbHVlKSl7bGV0IHJlc3VsdD1cIjB4XCI7Zm9yKGxldCBpPTA7aTx2YWx1ZS5sZW5ndGg7aSsrKXtsZXQgdj12YWx1ZVtpXTtyZXN1bHQrPUhleENoYXJhY3RlcnNbKHYmMjQwKT4+NF0rSGV4Q2hhcmFjdGVyc1t2JjE1XX1yZXR1cm4gcmVzdWx0fXJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXhsaWZ5IHZhbHVlXCIsXCJ2YWx1ZVwiLHZhbHVlKX1mdW5jdGlvbiBoZXhEYXRhTGVuZ3RoKGRhdGEpe2lmKHR5cGVvZiBkYXRhIT09XCJzdHJpbmdcIil7ZGF0YT1oZXhsaWZ5KGRhdGEpfWVsc2UgaWYoIWlzSGV4U3RyaW5nKGRhdGEpfHxkYXRhLmxlbmd0aCUyKXtyZXR1cm4gbnVsbH1yZXR1cm4oZGF0YS5sZW5ndGgtMikvMn1mdW5jdGlvbiBoZXhEYXRhU2xpY2UoZGF0YSxvZmZzZXQsZW5kT2Zmc2V0KXtpZih0eXBlb2YgZGF0YSE9PVwic3RyaW5nXCIpe2RhdGE9aGV4bGlmeShkYXRhKX1lbHNlIGlmKCFpc0hleFN0cmluZyhkYXRhKXx8ZGF0YS5sZW5ndGglMil7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgaGV4RGF0YVwiLFwidmFsdWVcIixkYXRhKX1vZmZzZXQ9MisyKm9mZnNldDtpZihlbmRPZmZzZXQhPW51bGwpe3JldHVyblwiMHhcIitkYXRhLnN1YnN0cmluZyhvZmZzZXQsMisyKmVuZE9mZnNldCl9cmV0dXJuXCIweFwiK2RhdGEuc3Vic3RyaW5nKG9mZnNldCl9ZnVuY3Rpb24gaGV4Q29uY2F0KGl0ZW1zKXtsZXQgcmVzdWx0PVwiMHhcIjtpdGVtcy5mb3JFYWNoKGl0ZW09PntyZXN1bHQrPWhleGxpZnkoaXRlbSkuc3Vic3RyaW5nKDIpfSk7cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiBoZXhWYWx1ZSh2YWx1ZSl7Y29uc3QgdHJpbW1lZD1oZXhTdHJpcFplcm9zKGhleGxpZnkodmFsdWUse2hleFBhZDpcImxlZnRcIn0pKTtpZih0cmltbWVkPT09XCIweFwiKXtyZXR1cm5cIjB4MFwifXJldHVybiB0cmltbWVkfWZ1bmN0aW9uIGhleFN0cmlwWmVyb3ModmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwic3RyaW5nXCIpe3ZhbHVlPWhleGxpZnkodmFsdWUpfWlmKCFpc0hleFN0cmluZyh2YWx1ZSkpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhleCBzdHJpbmdcIixcInZhbHVlXCIsdmFsdWUpfXZhbHVlPXZhbHVlLnN1YnN0cmluZygyKTtsZXQgb2Zmc2V0PTA7d2hpbGUob2Zmc2V0PHZhbHVlLmxlbmd0aCYmdmFsdWVbb2Zmc2V0XT09PVwiMFwiKXtvZmZzZXQrK31yZXR1cm5cIjB4XCIrdmFsdWUuc3Vic3RyaW5nKG9mZnNldCl9ZnVuY3Rpb24gaGV4WmVyb1BhZCh2YWx1ZSxsZW5ndGgpe2lmKHR5cGVvZiB2YWx1ZSE9PVwic3RyaW5nXCIpe3ZhbHVlPWhleGxpZnkodmFsdWUpfWVsc2UgaWYoIWlzSGV4U3RyaW5nKHZhbHVlKSl7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgaGV4IHN0cmluZ1wiLFwidmFsdWVcIix2YWx1ZSl9aWYodmFsdWUubGVuZ3RoPjIqbGVuZ3RoKzIpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ2YWx1ZSBvdXQgb2YgcmFuZ2VcIixcInZhbHVlXCIsYXJndW1lbnRzWzFdKX13aGlsZSh2YWx1ZS5sZW5ndGg8MipsZW5ndGgrMil7dmFsdWU9XCIweDBcIit2YWx1ZS5zdWJzdHJpbmcoMil9cmV0dXJuIHZhbHVlfWZ1bmN0aW9uIHNwbGl0U2lnbmF0dXJlKHNpZ25hdHVyZSl7Y29uc3QgcmVzdWx0PXtyOlwiMHhcIixzOlwiMHhcIixfdnM6XCIweFwiLHJlY292ZXJ5UGFyYW06MCx2OjB9O2lmKGlzQnl0ZXNMaWtlKHNpZ25hdHVyZSkpe2NvbnN0IGJ5dGVzPWFycmF5aWZ5KHNpZ25hdHVyZSk7aWYoYnl0ZXMubGVuZ3RoIT09NjUpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHNpZ25hdHVyZSBzdHJpbmc7IG11c3QgYmUgNjUgYnl0ZXNcIixcInNpZ25hdHVyZVwiLHNpZ25hdHVyZSl9cmVzdWx0LnI9aGV4bGlmeShieXRlcy5zbGljZSgwLDMyKSk7cmVzdWx0LnM9aGV4bGlmeShieXRlcy5zbGljZSgzMiw2NCkpO3Jlc3VsdC52PWJ5dGVzWzY0XTtpZihyZXN1bHQudjwyNyl7aWYocmVzdWx0LnY9PT0wfHxyZXN1bHQudj09PTEpe3Jlc3VsdC52Kz0yN31lbHNle2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgaW52YWxpZCB2IGJ5dGVcIixcInNpZ25hdHVyZVwiLHNpZ25hdHVyZSl9fXJlc3VsdC5yZWNvdmVyeVBhcmFtPTEtcmVzdWx0LnYlMjtpZihyZXN1bHQucmVjb3ZlcnlQYXJhbSl7Ynl0ZXNbMzJdfD0xMjh9cmVzdWx0Ll92cz1oZXhsaWZ5KGJ5dGVzLnNsaWNlKDMyLDY0KSl9ZWxzZXtyZXN1bHQucj1zaWduYXR1cmUucjtyZXN1bHQucz1zaWduYXR1cmUucztyZXN1bHQudj1zaWduYXR1cmUudjtyZXN1bHQucmVjb3ZlcnlQYXJhbT1zaWduYXR1cmUucmVjb3ZlcnlQYXJhbTtyZXN1bHQuX3ZzPXNpZ25hdHVyZS5fdnM7aWYocmVzdWx0Ll92cyE9bnVsbCl7Y29uc3QgdnM9emVyb1BhZChhcnJheWlmeShyZXN1bHQuX3ZzKSwzMik7cmVzdWx0Ll92cz1oZXhsaWZ5KHZzKTtjb25zdCByZWNvdmVyeVBhcmFtPXZzWzBdPj0xMjg/MTowO2lmKHJlc3VsdC5yZWNvdmVyeVBhcmFtPT1udWxsKXtyZXN1bHQucmVjb3ZlcnlQYXJhbT1yZWNvdmVyeVBhcmFtfWVsc2UgaWYocmVzdWx0LnJlY292ZXJ5UGFyYW0hPT1yZWNvdmVyeVBhcmFtKXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIHJlY292ZXJ5UGFyYW0gbWlzbWF0Y2ggX3ZzXCIsXCJzaWduYXR1cmVcIixzaWduYXR1cmUpfXZzWzBdJj0xMjc7Y29uc3Qgcz1oZXhsaWZ5KHZzKTtpZihyZXN1bHQucz09bnVsbCl7cmVzdWx0LnM9c31lbHNlIGlmKHJlc3VsdC5zIT09cyl7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSB2IG1pc21hdGNoIF92c1wiLFwic2lnbmF0dXJlXCIsc2lnbmF0dXJlKX19aWYocmVzdWx0LnJlY292ZXJ5UGFyYW09PW51bGwpe2lmKHJlc3VsdC52PT1udWxsKXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIG1pc3NpbmcgdiBhbmQgcmVjb3ZlcnlQYXJhbVwiLFwic2lnbmF0dXJlXCIsc2lnbmF0dXJlKX1lbHNlIGlmKHJlc3VsdC52PT09MHx8cmVzdWx0LnY9PT0xKXtyZXN1bHQucmVjb3ZlcnlQYXJhbT1yZXN1bHQudn1lbHNle3Jlc3VsdC5yZWNvdmVyeVBhcmFtPTEtcmVzdWx0LnYlMn19ZWxzZXtpZihyZXN1bHQudj09bnVsbCl7cmVzdWx0LnY9MjcrcmVzdWx0LnJlY292ZXJ5UGFyYW19ZWxzZSBpZihyZXN1bHQucmVjb3ZlcnlQYXJhbSE9PTEtcmVzdWx0LnYlMil7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSByZWNvdmVyeVBhcmFtIG1pc21hdGNoIHZcIixcInNpZ25hdHVyZVwiLHNpZ25hdHVyZSl9fWlmKHJlc3VsdC5yPT1udWxsfHwhaXNIZXhTdHJpbmcocmVzdWx0LnIpKXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIG1pc3Npbmcgb3IgaW52YWxpZCByXCIsXCJzaWduYXR1cmVcIixzaWduYXR1cmUpfWVsc2V7cmVzdWx0LnI9aGV4WmVyb1BhZChyZXN1bHQuciwzMil9aWYocmVzdWx0LnM9PW51bGx8fCFpc0hleFN0cmluZyhyZXN1bHQucykpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgbWlzc2luZyBvciBpbnZhbGlkIHNcIixcInNpZ25hdHVyZVwiLHNpZ25hdHVyZSl9ZWxzZXtyZXN1bHQucz1oZXhaZXJvUGFkKHJlc3VsdC5zLDMyKX1jb25zdCB2cz1hcnJheWlmeShyZXN1bHQucyk7aWYodnNbMF0+PTEyOCl7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBzIG91dCBvZiByYW5nZVwiLFwic2lnbmF0dXJlXCIsc2lnbmF0dXJlKX1pZihyZXN1bHQucmVjb3ZlcnlQYXJhbSl7dnNbMF18PTEyOH1jb25zdCBfdnM9aGV4bGlmeSh2cyk7aWYocmVzdWx0Ll92cyl7aWYoIWlzSGV4U3RyaW5nKHJlc3VsdC5fdnMpKXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIGludmFsaWQgX3ZzXCIsXCJzaWduYXR1cmVcIixzaWduYXR1cmUpfXJlc3VsdC5fdnM9aGV4WmVyb1BhZChyZXN1bHQuX3ZzLDMyKX1pZihyZXN1bHQuX3ZzPT1udWxsKXtyZXN1bHQuX3ZzPV92c31lbHNlIGlmKHJlc3VsdC5fdnMhPT1fdnMpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgX3ZzIG1pc21hdGNoIHYgYW5kIHNcIixcInNpZ25hdHVyZVwiLHNpZ25hdHVyZSl9fXJldHVybiByZXN1bHR9ZnVuY3Rpb24gam9pblNpZ25hdHVyZShzaWduYXR1cmUpe3NpZ25hdHVyZT1zcGxpdFNpZ25hdHVyZShzaWduYXR1cmUpO3JldHVybiBoZXhsaWZ5KGNvbmNhdChbc2lnbmF0dXJlLnIsc2lnbmF0dXJlLnMsc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW0/XCIweDFjXCI6XCIweDFiXCJdKSl9Y29uc3QgdmVyc2lvbiQyPVwiYmlnbnVtYmVyLzUuMS4xXCI7XCJ1c2Ugc3RyaWN0XCI7dmFyIEJOPWJuLkJOO2NvbnN0IGxvZ2dlciQxPW5ldyBMb2dnZXIodmVyc2lvbiQyKTtjb25zdCBfY29uc3RydWN0b3JHdWFyZD17fTtjb25zdCBNQVhfU0FGRT05MDA3MTk5MjU0NzQwOTkxO2Z1bmN0aW9uIGlzQmlnTnVtYmVyaXNoKHZhbHVlKXtyZXR1cm4gdmFsdWUhPW51bGwmJihCaWdOdW1iZXIuaXNCaWdOdW1iZXIodmFsdWUpfHx0eXBlb2YgdmFsdWU9PT1cIm51bWJlclwiJiZ2YWx1ZSUxPT09MHx8dHlwZW9mIHZhbHVlPT09XCJzdHJpbmdcIiYmISF2YWx1ZS5tYXRjaCgvXi0/WzAtOV0rJC8pfHxpc0hleFN0cmluZyh2YWx1ZSl8fHR5cGVvZiB2YWx1ZT09PVwiYmlnaW50XCJ8fGlzQnl0ZXModmFsdWUpKX1sZXQgX3dhcm5lZFRvU3RyaW5nUmFkaXg9ZmFsc2U7Y2xhc3MgQmlnTnVtYmVye2NvbnN0cnVjdG9yKGNvbnN0cnVjdG9yR3VhcmQsaGV4KXtsb2dnZXIkMS5jaGVja05ldyhuZXcudGFyZ2V0LEJpZ051bWJlcik7aWYoY29uc3RydWN0b3JHdWFyZCE9PV9jb25zdHJ1Y3Rvckd1YXJkKXtsb2dnZXIkMS50aHJvd0Vycm9yKFwiY2Fubm90IGNhbGwgY29uc3RydWN0b3IgZGlyZWN0bHk7IHVzZSBCaWdOdW1iZXIuZnJvbVwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJuZXcgKEJpZ051bWJlcilcIn0pfXRoaXMuX2hleD1oZXg7dGhpcy5faXNCaWdOdW1iZXI9dHJ1ZTtPYmplY3QuZnJlZXplKHRoaXMpfWZyb21Ud29zKHZhbHVlKXtyZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5mcm9tVHdvcyh2YWx1ZSkpfXRvVHdvcyh2YWx1ZSl7cmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykudG9Ud29zKHZhbHVlKSl9YWJzKCl7aWYodGhpcy5faGV4WzBdPT09XCItXCIpe3JldHVybiBCaWdOdW1iZXIuZnJvbSh0aGlzLl9oZXguc3Vic3RyaW5nKDEpKX1yZXR1cm4gdGhpc31hZGQob3RoZXIpe3JldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLmFkZCh0b0JOKG90aGVyKSkpfXN1YihvdGhlcil7cmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykuc3ViKHRvQk4ob3RoZXIpKSl9ZGl2KG90aGVyKXtjb25zdCBvPUJpZ051bWJlci5mcm9tKG90aGVyKTtpZihvLmlzWmVybygpKXt0aHJvd0ZhdWx0KFwiZGl2aXNpb24gYnkgemVyb1wiLFwiZGl2XCIpfXJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLmRpdih0b0JOKG90aGVyKSkpfW11bChvdGhlcil7cmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykubXVsKHRvQk4ob3RoZXIpKSl9bW9kKG90aGVyKXtjb25zdCB2YWx1ZT10b0JOKG90aGVyKTtpZih2YWx1ZS5pc05lZygpKXt0aHJvd0ZhdWx0KFwiY2Fubm90IG1vZHVsbyBuZWdhdGl2ZSB2YWx1ZXNcIixcIm1vZFwiKX1yZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS51bW9kKHZhbHVlKSl9cG93KG90aGVyKXtjb25zdCB2YWx1ZT10b0JOKG90aGVyKTtpZih2YWx1ZS5pc05lZygpKXt0aHJvd0ZhdWx0KFwiY2Fubm90IHJhaXNlIHRvIG5lZ2F0aXZlIHZhbHVlc1wiLFwicG93XCIpfXJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnBvdyh2YWx1ZSkpfWFuZChvdGhlcil7Y29uc3QgdmFsdWU9dG9CTihvdGhlcik7aWYodGhpcy5pc05lZ2F0aXZlKCl8fHZhbHVlLmlzTmVnKCkpe3Rocm93RmF1bHQoXCJjYW5ub3QgJ2FuZCcgbmVnYXRpdmUgdmFsdWVzXCIsXCJhbmRcIil9cmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykuYW5kKHZhbHVlKSl9b3Iob3RoZXIpe2NvbnN0IHZhbHVlPXRvQk4ob3RoZXIpO2lmKHRoaXMuaXNOZWdhdGl2ZSgpfHx2YWx1ZS5pc05lZygpKXt0aHJvd0ZhdWx0KFwiY2Fubm90ICdvcicgbmVnYXRpdmUgdmFsdWVzXCIsXCJvclwiKX1yZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5vcih2YWx1ZSkpfXhvcihvdGhlcil7Y29uc3QgdmFsdWU9dG9CTihvdGhlcik7aWYodGhpcy5pc05lZ2F0aXZlKCl8fHZhbHVlLmlzTmVnKCkpe3Rocm93RmF1bHQoXCJjYW5ub3QgJ3hvcicgbmVnYXRpdmUgdmFsdWVzXCIsXCJ4b3JcIil9cmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykueG9yKHZhbHVlKSl9bWFzayh2YWx1ZSl7aWYodGhpcy5pc05lZ2F0aXZlKCl8fHZhbHVlPDApe3Rocm93RmF1bHQoXCJjYW5ub3QgbWFzayBuZWdhdGl2ZSB2YWx1ZXNcIixcIm1hc2tcIil9cmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykubWFza24odmFsdWUpKX1zaGwodmFsdWUpe2lmKHRoaXMuaXNOZWdhdGl2ZSgpfHx2YWx1ZTwwKXt0aHJvd0ZhdWx0KFwiY2Fubm90IHNoaWZ0IG5lZ2F0aXZlIHZhbHVlc1wiLFwic2hsXCIpfXJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnNobG4odmFsdWUpKX1zaHIodmFsdWUpe2lmKHRoaXMuaXNOZWdhdGl2ZSgpfHx2YWx1ZTwwKXt0aHJvd0ZhdWx0KFwiY2Fubm90IHNoaWZ0IG5lZ2F0aXZlIHZhbHVlc1wiLFwic2hyXCIpfXJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnNocm4odmFsdWUpKX1lcShvdGhlcil7cmV0dXJuIHRvQk4odGhpcykuZXEodG9CTihvdGhlcikpfWx0KG90aGVyKXtyZXR1cm4gdG9CTih0aGlzKS5sdCh0b0JOKG90aGVyKSl9bHRlKG90aGVyKXtyZXR1cm4gdG9CTih0aGlzKS5sdGUodG9CTihvdGhlcikpfWd0KG90aGVyKXtyZXR1cm4gdG9CTih0aGlzKS5ndCh0b0JOKG90aGVyKSl9Z3RlKG90aGVyKXtyZXR1cm4gdG9CTih0aGlzKS5ndGUodG9CTihvdGhlcikpfWlzTmVnYXRpdmUoKXtyZXR1cm4gdGhpcy5faGV4WzBdPT09XCItXCJ9aXNaZXJvKCl7cmV0dXJuIHRvQk4odGhpcykuaXNaZXJvKCl9dG9OdW1iZXIoKXt0cnl7cmV0dXJuIHRvQk4odGhpcykudG9OdW1iZXIoKX1jYXRjaChlcnJvcil7dGhyb3dGYXVsdChcIm92ZXJmbG93XCIsXCJ0b051bWJlclwiLHRoaXMudG9TdHJpbmcoKSl9cmV0dXJuIG51bGx9dG9CaWdJbnQoKXt0cnl7cmV0dXJuIEJpZ0ludCh0aGlzLnRvU3RyaW5nKCkpfWNhdGNoKGUpe31yZXR1cm4gbG9nZ2VyJDEudGhyb3dFcnJvcihcInRoaXMgcGxhdGZvcm0gZG9lcyBub3Qgc3VwcG9ydCBCaWdJbnRcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7dmFsdWU6dGhpcy50b1N0cmluZygpfSl9dG9TdHJpbmcoKXtpZihhcmd1bWVudHMubGVuZ3RoPjApe2lmKGFyZ3VtZW50c1swXT09PTEwKXtpZighX3dhcm5lZFRvU3RyaW5nUmFkaXgpe193YXJuZWRUb1N0cmluZ1JhZGl4PXRydWU7bG9nZ2VyJDEud2FybihcIkJpZ051bWJlci50b1N0cmluZyBkb2VzIG5vdCBhY2NlcHQgYW55IHBhcmFtZXRlcnM7IGJhc2UtMTAgaXMgYXNzdW1lZFwiKX19ZWxzZSBpZihhcmd1bWVudHNbMF09PT0xNil7bG9nZ2VyJDEudGhyb3dFcnJvcihcIkJpZ051bWJlci50b1N0cmluZyBkb2VzIG5vdCBhY2NlcHQgYW55IHBhcmFtZXRlcnM7IHVzZSBiaWdOdW1iZXIudG9IZXhTdHJpbmcoKVwiLExvZ2dlci5lcnJvcnMuVU5FWFBFQ1RFRF9BUkdVTUVOVCx7fSl9ZWxzZXtsb2dnZXIkMS50aHJvd0Vycm9yKFwiQmlnTnVtYmVyLnRvU3RyaW5nIGRvZXMgbm90IGFjY2VwdCBwYXJhbWV0ZXJzXCIsTG9nZ2VyLmVycm9ycy5VTkVYUEVDVEVEX0FSR1VNRU5ULHt9KX19cmV0dXJuIHRvQk4odGhpcykudG9TdHJpbmcoMTApfXRvSGV4U3RyaW5nKCl7cmV0dXJuIHRoaXMuX2hleH10b0pTT04oa2V5KXtyZXR1cm57dHlwZTpcIkJpZ051bWJlclwiLGhleDp0aGlzLnRvSGV4U3RyaW5nKCl9fXN0YXRpYyBmcm9tKHZhbHVlKXtpZih2YWx1ZSBpbnN0YW5jZW9mIEJpZ051bWJlcil7cmV0dXJuIHZhbHVlfWlmKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpe2lmKHZhbHVlLm1hdGNoKC9eLT8weFswLTlhLWZdKyQvaSkpe3JldHVybiBuZXcgQmlnTnVtYmVyKF9jb25zdHJ1Y3Rvckd1YXJkLHRvSGV4KHZhbHVlKSl9aWYodmFsdWUubWF0Y2goL14tP1swLTldKyQvKSl7cmV0dXJuIG5ldyBCaWdOdW1iZXIoX2NvbnN0cnVjdG9yR3VhcmQsdG9IZXgobmV3IEJOKHZhbHVlKSkpfXJldHVybiBsb2dnZXIkMS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIEJpZ051bWJlciBzdHJpbmdcIixcInZhbHVlXCIsdmFsdWUpfWlmKHR5cGVvZiB2YWx1ZT09PVwibnVtYmVyXCIpe2lmKHZhbHVlJTEpe3Rocm93RmF1bHQoXCJ1bmRlcmZsb3dcIixcIkJpZ051bWJlci5mcm9tXCIsdmFsdWUpfWlmKHZhbHVlPj1NQVhfU0FGRXx8dmFsdWU8PS1NQVhfU0FGRSl7dGhyb3dGYXVsdChcIm92ZXJmbG93XCIsXCJCaWdOdW1iZXIuZnJvbVwiLHZhbHVlKX1yZXR1cm4gQmlnTnVtYmVyLmZyb20oU3RyaW5nKHZhbHVlKSl9Y29uc3QgYW55VmFsdWU9dmFsdWU7aWYodHlwZW9mIGFueVZhbHVlPT09XCJiaWdpbnRcIil7cmV0dXJuIEJpZ051bWJlci5mcm9tKGFueVZhbHVlLnRvU3RyaW5nKCkpfWlmKGlzQnl0ZXMoYW55VmFsdWUpKXtyZXR1cm4gQmlnTnVtYmVyLmZyb20oaGV4bGlmeShhbnlWYWx1ZSkpfWlmKGFueVZhbHVlKXtpZihhbnlWYWx1ZS50b0hleFN0cmluZyl7Y29uc3QgaGV4PWFueVZhbHVlLnRvSGV4U3RyaW5nKCk7aWYodHlwZW9mIGhleD09PVwic3RyaW5nXCIpe3JldHVybiBCaWdOdW1iZXIuZnJvbShoZXgpfX1lbHNle2xldCBoZXg9YW55VmFsdWUuX2hleDtpZihoZXg9PW51bGwmJmFueVZhbHVlLnR5cGU9PT1cIkJpZ051bWJlclwiKXtoZXg9YW55VmFsdWUuaGV4fWlmKHR5cGVvZiBoZXg9PT1cInN0cmluZ1wiKXtpZihpc0hleFN0cmluZyhoZXgpfHxoZXhbMF09PT1cIi1cIiYmaXNIZXhTdHJpbmcoaGV4LnN1YnN0cmluZygxKSkpe3JldHVybiBCaWdOdW1iZXIuZnJvbShoZXgpfX19fXJldHVybiBsb2dnZXIkMS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIEJpZ051bWJlciB2YWx1ZVwiLFwidmFsdWVcIix2YWx1ZSl9c3RhdGljIGlzQmlnTnVtYmVyKHZhbHVlKXtyZXR1cm4hISh2YWx1ZSYmdmFsdWUuX2lzQmlnTnVtYmVyKX19ZnVuY3Rpb24gdG9IZXgodmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwic3RyaW5nXCIpe3JldHVybiB0b0hleCh2YWx1ZS50b1N0cmluZygxNikpfWlmKHZhbHVlWzBdPT09XCItXCIpe3ZhbHVlPXZhbHVlLnN1YnN0cmluZygxKTtpZih2YWx1ZVswXT09PVwiLVwiKXtsb2dnZXIkMS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhleFwiLFwidmFsdWVcIix2YWx1ZSl9dmFsdWU9dG9IZXgodmFsdWUpO2lmKHZhbHVlPT09XCIweDAwXCIpe3JldHVybiB2YWx1ZX1yZXR1cm5cIi1cIit2YWx1ZX1pZih2YWx1ZS5zdWJzdHJpbmcoMCwyKSE9PVwiMHhcIil7dmFsdWU9XCIweFwiK3ZhbHVlfWlmKHZhbHVlPT09XCIweFwiKXtyZXR1cm5cIjB4MDBcIn1pZih2YWx1ZS5sZW5ndGglMil7dmFsdWU9XCIweDBcIit2YWx1ZS5zdWJzdHJpbmcoMil9d2hpbGUodmFsdWUubGVuZ3RoPjQmJnZhbHVlLnN1YnN0cmluZygwLDQpPT09XCIweDAwXCIpe3ZhbHVlPVwiMHhcIit2YWx1ZS5zdWJzdHJpbmcoNCl9cmV0dXJuIHZhbHVlfWZ1bmN0aW9uIHRvQmlnTnVtYmVyKHZhbHVlKXtyZXR1cm4gQmlnTnVtYmVyLmZyb20odG9IZXgodmFsdWUpKX1mdW5jdGlvbiB0b0JOKHZhbHVlKXtjb25zdCBoZXg9QmlnTnVtYmVyLmZyb20odmFsdWUpLnRvSGV4U3RyaW5nKCk7aWYoaGV4WzBdPT09XCItXCIpe3JldHVybiBuZXcgQk4oXCItXCIraGV4LnN1YnN0cmluZygzKSwxNil9cmV0dXJuIG5ldyBCTihoZXguc3Vic3RyaW5nKDIpLDE2KX1mdW5jdGlvbiB0aHJvd0ZhdWx0KGZhdWx0LG9wZXJhdGlvbix2YWx1ZSl7Y29uc3QgcGFyYW1zPXtmYXVsdDpmYXVsdCxvcGVyYXRpb246b3BlcmF0aW9ufTtpZih2YWx1ZSE9bnVsbCl7cGFyYW1zLnZhbHVlPXZhbHVlfXJldHVybiBsb2dnZXIkMS50aHJvd0Vycm9yKGZhdWx0LExvZ2dlci5lcnJvcnMuTlVNRVJJQ19GQVVMVCxwYXJhbXMpfWZ1bmN0aW9uIF9iYXNlMzZUbzE2KHZhbHVlKXtyZXR1cm4gbmV3IEJOKHZhbHVlLDM2KS50b1N0cmluZygxNil9ZnVuY3Rpb24gX2Jhc2UxNlRvMzYodmFsdWUpe3JldHVybiBuZXcgQk4odmFsdWUsMTYpLnRvU3RyaW5nKDM2KX1cInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkMj1uZXcgTG9nZ2VyKHZlcnNpb24kMik7Y29uc3QgX2NvbnN0cnVjdG9yR3VhcmQkMT17fTtjb25zdCBaZXJvPUJpZ051bWJlci5mcm9tKDApO2NvbnN0IE5lZ2F0aXZlT25lPUJpZ051bWJlci5mcm9tKC0xKTtmdW5jdGlvbiB0aHJvd0ZhdWx0JDEobWVzc2FnZSxmYXVsdCxvcGVyYXRpb24sdmFsdWUpe2NvbnN0IHBhcmFtcz17ZmF1bHQ6ZmF1bHQsb3BlcmF0aW9uOm9wZXJhdGlvbn07aWYodmFsdWUhPT11bmRlZmluZWQpe3BhcmFtcy52YWx1ZT12YWx1ZX1yZXR1cm4gbG9nZ2VyJDIudGhyb3dFcnJvcihtZXNzYWdlLExvZ2dlci5lcnJvcnMuTlVNRVJJQ19GQVVMVCxwYXJhbXMpfWxldCB6ZXJvcz1cIjBcIjt3aGlsZSh6ZXJvcy5sZW5ndGg8MjU2KXt6ZXJvcys9emVyb3N9ZnVuY3Rpb24gZ2V0TXVsdGlwbGllcihkZWNpbWFscyl7aWYodHlwZW9mIGRlY2ltYWxzIT09XCJudW1iZXJcIil7dHJ5e2RlY2ltYWxzPUJpZ051bWJlci5mcm9tKGRlY2ltYWxzKS50b051bWJlcigpfWNhdGNoKGUpe319aWYodHlwZW9mIGRlY2ltYWxzPT09XCJudW1iZXJcIiYmZGVjaW1hbHM+PTAmJmRlY2ltYWxzPD0yNTYmJiEoZGVjaW1hbHMlMSkpe3JldHVyblwiMVwiK3plcm9zLnN1YnN0cmluZygwLGRlY2ltYWxzKX1yZXR1cm4gbG9nZ2VyJDIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBkZWNpbWFsIHNpemVcIixcImRlY2ltYWxzXCIsZGVjaW1hbHMpfWZ1bmN0aW9uIGZvcm1hdEZpeGVkKHZhbHVlLGRlY2ltYWxzKXtpZihkZWNpbWFscz09bnVsbCl7ZGVjaW1hbHM9MH1jb25zdCBtdWx0aXBsaWVyPWdldE11bHRpcGxpZXIoZGVjaW1hbHMpO3ZhbHVlPUJpZ051bWJlci5mcm9tKHZhbHVlKTtjb25zdCBuZWdhdGl2ZT12YWx1ZS5sdChaZXJvKTtpZihuZWdhdGl2ZSl7dmFsdWU9dmFsdWUubXVsKE5lZ2F0aXZlT25lKX1sZXQgZnJhY3Rpb249dmFsdWUubW9kKG11bHRpcGxpZXIpLnRvU3RyaW5nKCk7d2hpbGUoZnJhY3Rpb24ubGVuZ3RoPG11bHRpcGxpZXIubGVuZ3RoLTEpe2ZyYWN0aW9uPVwiMFwiK2ZyYWN0aW9ufWZyYWN0aW9uPWZyYWN0aW9uLm1hdGNoKC9eKFswLTldKlsxLTldfDApKDAqKS8pWzFdO2NvbnN0IHdob2xlPXZhbHVlLmRpdihtdWx0aXBsaWVyKS50b1N0cmluZygpO3ZhbHVlPXdob2xlK1wiLlwiK2ZyYWN0aW9uO2lmKG5lZ2F0aXZlKXt2YWx1ZT1cIi1cIit2YWx1ZX1yZXR1cm4gdmFsdWV9ZnVuY3Rpb24gcGFyc2VGaXhlZCh2YWx1ZSxkZWNpbWFscyl7aWYoZGVjaW1hbHM9PW51bGwpe2RlY2ltYWxzPTB9Y29uc3QgbXVsdGlwbGllcj1nZXRNdWx0aXBsaWVyKGRlY2ltYWxzKTtpZih0eXBlb2YgdmFsdWUhPT1cInN0cmluZ1wifHwhdmFsdWUubWF0Y2goL14tP1swLTkuLF0rJC8pKXtsb2dnZXIkMi50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGRlY2ltYWwgdmFsdWVcIixcInZhbHVlXCIsdmFsdWUpfWlmKG11bHRpcGxpZXIubGVuZ3RoLTE9PT0wKXtyZXR1cm4gQmlnTnVtYmVyLmZyb20odmFsdWUpfWNvbnN0IG5lZ2F0aXZlPXZhbHVlLnN1YnN0cmluZygwLDEpPT09XCItXCI7aWYobmVnYXRpdmUpe3ZhbHVlPXZhbHVlLnN1YnN0cmluZygxKX1pZih2YWx1ZT09PVwiLlwiKXtsb2dnZXIkMi50aHJvd0FyZ3VtZW50RXJyb3IoXCJtaXNzaW5nIHZhbHVlXCIsXCJ2YWx1ZVwiLHZhbHVlKX1jb25zdCBjb21wcz12YWx1ZS5zcGxpdChcIi5cIik7aWYoY29tcHMubGVuZ3RoPjIpe2xvZ2dlciQyLnRocm93QXJndW1lbnRFcnJvcihcInRvbyBtYW55IGRlY2ltYWwgcG9pbnRzXCIsXCJ2YWx1ZVwiLHZhbHVlKX1sZXQgd2hvbGU9Y29tcHNbMF0sZnJhY3Rpb249Y29tcHNbMV07aWYoIXdob2xlKXt3aG9sZT1cIjBcIn1pZighZnJhY3Rpb24pe2ZyYWN0aW9uPVwiMFwifWlmKGZyYWN0aW9uLmxlbmd0aD5tdWx0aXBsaWVyLmxlbmd0aC0xKXt0aHJvd0ZhdWx0JDEoXCJmcmFjdGlvbmFsIGNvbXBvbmVudCBleGNlZWRzIGRlY2ltYWxzXCIsXCJ1bmRlcmZsb3dcIixcInBhcnNlRml4ZWRcIil9d2hpbGUoZnJhY3Rpb24ubGVuZ3RoPG11bHRpcGxpZXIubGVuZ3RoLTEpe2ZyYWN0aW9uKz1cIjBcIn1jb25zdCB3aG9sZVZhbHVlPUJpZ051bWJlci5mcm9tKHdob2xlKTtjb25zdCBmcmFjdGlvblZhbHVlPUJpZ051bWJlci5mcm9tKGZyYWN0aW9uKTtsZXQgd2VpPXdob2xlVmFsdWUubXVsKG11bHRpcGxpZXIpLmFkZChmcmFjdGlvblZhbHVlKTtpZihuZWdhdGl2ZSl7d2VpPXdlaS5tdWwoTmVnYXRpdmVPbmUpfXJldHVybiB3ZWl9Y2xhc3MgRml4ZWRGb3JtYXR7Y29uc3RydWN0b3IoY29uc3RydWN0b3JHdWFyZCxzaWduZWQsd2lkdGgsZGVjaW1hbHMpe2lmKGNvbnN0cnVjdG9yR3VhcmQhPT1fY29uc3RydWN0b3JHdWFyZCQxKXtsb2dnZXIkMi50aHJvd0Vycm9yKFwiY2Fubm90IHVzZSBGaXhlZEZvcm1hdCBjb25zdHJ1Y3RvcjsgdXNlIEZpeGVkRm9ybWF0LmZyb21cIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwibmV3IEZpeGVkRm9ybWF0XCJ9KX10aGlzLnNpZ25lZD1zaWduZWQ7dGhpcy53aWR0aD13aWR0aDt0aGlzLmRlY2ltYWxzPWRlY2ltYWxzO3RoaXMubmFtZT0oc2lnbmVkP1wiXCI6XCJ1XCIpK1wiZml4ZWRcIitTdHJpbmcod2lkdGgpK1wieFwiK1N0cmluZyhkZWNpbWFscyk7dGhpcy5fbXVsdGlwbGllcj1nZXRNdWx0aXBsaWVyKGRlY2ltYWxzKTtPYmplY3QuZnJlZXplKHRoaXMpfXN0YXRpYyBmcm9tKHZhbHVlKXtpZih2YWx1ZSBpbnN0YW5jZW9mIEZpeGVkRm9ybWF0KXtyZXR1cm4gdmFsdWV9bGV0IHNpZ25lZD10cnVlO2xldCB3aWR0aD0xMjg7bGV0IGRlY2ltYWxzPTE4O2lmKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpe2lmKHZhbHVlPT09XCJmaXhlZFwiKXt9ZWxzZSBpZih2YWx1ZT09PVwidWZpeGVkXCIpe3NpZ25lZD1mYWxzZX1lbHNlIGlmKHZhbHVlIT1udWxsKXtjb25zdCBtYXRjaD12YWx1ZS5tYXRjaCgvXih1PylmaXhlZChbMC05XSspeChbMC05XSspJC8pO2lmKCFtYXRjaCl7bG9nZ2VyJDIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmaXhlZCBmb3JtYXRcIixcImZvcm1hdFwiLHZhbHVlKX1zaWduZWQ9bWF0Y2hbMV0hPT1cInVcIjt3aWR0aD1wYXJzZUludChtYXRjaFsyXSk7ZGVjaW1hbHM9cGFyc2VJbnQobWF0Y2hbM10pfX1lbHNlIGlmKHZhbHVlKXtjb25zdCBjaGVjaz0oa2V5LHR5cGUsZGVmYXVsdFZhbHVlKT0+e2lmKHZhbHVlW2tleV09PW51bGwpe3JldHVybiBkZWZhdWx0VmFsdWV9aWYodHlwZW9mIHZhbHVlW2tleV0hPT10eXBlKXtsb2dnZXIkMi50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZpeGVkIGZvcm1hdCAoXCIra2V5K1wiIG5vdCBcIit0eXBlK1wiKVwiLFwiZm9ybWF0LlwiK2tleSx2YWx1ZVtrZXldKX1yZXR1cm4gdmFsdWVba2V5XX07c2lnbmVkPWNoZWNrKFwic2lnbmVkXCIsXCJib29sZWFuXCIsc2lnbmVkKTt3aWR0aD1jaGVjayhcIndpZHRoXCIsXCJudW1iZXJcIix3aWR0aCk7ZGVjaW1hbHM9Y2hlY2soXCJkZWNpbWFsc1wiLFwibnVtYmVyXCIsZGVjaW1hbHMpfWlmKHdpZHRoJTgpe2xvZ2dlciQyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZml4ZWQgZm9ybWF0IHdpZHRoIChub3QgYnl0ZSBhbGlnbmVkKVwiLFwiZm9ybWF0LndpZHRoXCIsd2lkdGgpfWlmKGRlY2ltYWxzPjgwKXtsb2dnZXIkMi50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZpeGVkIGZvcm1hdCAoZGVjaW1hbHMgdG9vIGxhcmdlKVwiLFwiZm9ybWF0LmRlY2ltYWxzXCIsZGVjaW1hbHMpfXJldHVybiBuZXcgRml4ZWRGb3JtYXQoX2NvbnN0cnVjdG9yR3VhcmQkMSxzaWduZWQsd2lkdGgsZGVjaW1hbHMpfX1jbGFzcyBGaXhlZE51bWJlcntjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkLGhleCx2YWx1ZSxmb3JtYXQpe2xvZ2dlciQyLmNoZWNrTmV3KG5ldy50YXJnZXQsRml4ZWROdW1iZXIpO2lmKGNvbnN0cnVjdG9yR3VhcmQhPT1fY29uc3RydWN0b3JHdWFyZCQxKXtsb2dnZXIkMi50aHJvd0Vycm9yKFwiY2Fubm90IHVzZSBGaXhlZE51bWJlciBjb25zdHJ1Y3RvcjsgdXNlIEZpeGVkTnVtYmVyLmZyb21cIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwibmV3IEZpeGVkRm9ybWF0XCJ9KX10aGlzLmZvcm1hdD1mb3JtYXQ7dGhpcy5faGV4PWhleDt0aGlzLl92YWx1ZT12YWx1ZTt0aGlzLl9pc0ZpeGVkTnVtYmVyPXRydWU7T2JqZWN0LmZyZWV6ZSh0aGlzKX1fY2hlY2tGb3JtYXQob3RoZXIpe2lmKHRoaXMuZm9ybWF0Lm5hbWUhPT1vdGhlci5mb3JtYXQubmFtZSl7bG9nZ2VyJDIudGhyb3dBcmd1bWVudEVycm9yKFwiaW5jb21wYXRpYmxlIGZvcm1hdDsgdXNlIGZpeGVkTnVtYmVyLnRvRm9ybWF0XCIsXCJvdGhlclwiLG90aGVyKX19YWRkVW5zYWZlKG90aGVyKXt0aGlzLl9jaGVja0Zvcm1hdChvdGhlcik7Y29uc3QgYT1wYXJzZUZpeGVkKHRoaXMuX3ZhbHVlLHRoaXMuZm9ybWF0LmRlY2ltYWxzKTtjb25zdCBiPXBhcnNlRml4ZWQob3RoZXIuX3ZhbHVlLG90aGVyLmZvcm1hdC5kZWNpbWFscyk7cmV0dXJuIEZpeGVkTnVtYmVyLmZyb21WYWx1ZShhLmFkZChiKSx0aGlzLmZvcm1hdC5kZWNpbWFscyx0aGlzLmZvcm1hdCl9c3ViVW5zYWZlKG90aGVyKXt0aGlzLl9jaGVja0Zvcm1hdChvdGhlcik7Y29uc3QgYT1wYXJzZUZpeGVkKHRoaXMuX3ZhbHVlLHRoaXMuZm9ybWF0LmRlY2ltYWxzKTtjb25zdCBiPXBhcnNlRml4ZWQob3RoZXIuX3ZhbHVlLG90aGVyLmZvcm1hdC5kZWNpbWFscyk7cmV0dXJuIEZpeGVkTnVtYmVyLmZyb21WYWx1ZShhLnN1YihiKSx0aGlzLmZvcm1hdC5kZWNpbWFscyx0aGlzLmZvcm1hdCl9bXVsVW5zYWZlKG90aGVyKXt0aGlzLl9jaGVja0Zvcm1hdChvdGhlcik7Y29uc3QgYT1wYXJzZUZpeGVkKHRoaXMuX3ZhbHVlLHRoaXMuZm9ybWF0LmRlY2ltYWxzKTtjb25zdCBiPXBhcnNlRml4ZWQob3RoZXIuX3ZhbHVlLG90aGVyLmZvcm1hdC5kZWNpbWFscyk7cmV0dXJuIEZpeGVkTnVtYmVyLmZyb21WYWx1ZShhLm11bChiKS5kaXYodGhpcy5mb3JtYXQuX211bHRpcGxpZXIpLHRoaXMuZm9ybWF0LmRlY2ltYWxzLHRoaXMuZm9ybWF0KX1kaXZVbnNhZmUob3RoZXIpe3RoaXMuX2NoZWNrRm9ybWF0KG90aGVyKTtjb25zdCBhPXBhcnNlRml4ZWQodGhpcy5fdmFsdWUsdGhpcy5mb3JtYXQuZGVjaW1hbHMpO2NvbnN0IGI9cGFyc2VGaXhlZChvdGhlci5fdmFsdWUsb3RoZXIuZm9ybWF0LmRlY2ltYWxzKTtyZXR1cm4gRml4ZWROdW1iZXIuZnJvbVZhbHVlKGEubXVsKHRoaXMuZm9ybWF0Ll9tdWx0aXBsaWVyKS5kaXYoYiksdGhpcy5mb3JtYXQuZGVjaW1hbHMsdGhpcy5mb3JtYXQpfWZsb29yKCl7bGV0IGNvbXBzPXRoaXMudG9TdHJpbmcoKS5zcGxpdChcIi5cIik7bGV0IHJlc3VsdD1GaXhlZE51bWJlci5mcm9tKGNvbXBzWzBdLHRoaXMuZm9ybWF0KTtjb25zdCBoYXNGcmFjdGlvbj0hY29tcHNbMV0ubWF0Y2goL14oMCopJC8pO2lmKHRoaXMuaXNOZWdhdGl2ZSgpJiZoYXNGcmFjdGlvbil7cmVzdWx0PXJlc3VsdC5zdWJVbnNhZmUoT05FKX1yZXR1cm4gcmVzdWx0fWNlaWxpbmcoKXtsZXQgY29tcHM9dGhpcy50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtsZXQgcmVzdWx0PUZpeGVkTnVtYmVyLmZyb20oY29tcHNbMF0sdGhpcy5mb3JtYXQpO2NvbnN0IGhhc0ZyYWN0aW9uPSFjb21wc1sxXS5tYXRjaCgvXigwKikkLyk7aWYoIXRoaXMuaXNOZWdhdGl2ZSgpJiZoYXNGcmFjdGlvbil7cmVzdWx0PXJlc3VsdC5hZGRVbnNhZmUoT05FKX1yZXR1cm4gcmVzdWx0fXJvdW5kKGRlY2ltYWxzKXtpZihkZWNpbWFscz09bnVsbCl7ZGVjaW1hbHM9MH1sZXQgY29tcHM9dGhpcy50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtpZihkZWNpbWFsczwwfHxkZWNpbWFscz44MHx8ZGVjaW1hbHMlMSl7bG9nZ2VyJDIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBkZWNpbWFsIGNvdW50XCIsXCJkZWNpbWFsc1wiLGRlY2ltYWxzKX1pZihjb21wc1sxXS5sZW5ndGg8PWRlY2ltYWxzKXtyZXR1cm4gdGhpc31jb25zdCBmYWN0b3I9Rml4ZWROdW1iZXIuZnJvbShcIjFcIit6ZXJvcy5zdWJzdHJpbmcoMCxkZWNpbWFscykpO3JldHVybiB0aGlzLm11bFVuc2FmZShmYWN0b3IpLmFkZFVuc2FmZShCVU1QKS5mbG9vcigpLmRpdlVuc2FmZShmYWN0b3IpfWlzWmVybygpe3JldHVybiB0aGlzLl92YWx1ZT09PVwiMC4wXCJ9aXNOZWdhdGl2ZSgpe3JldHVybiB0aGlzLl92YWx1ZVswXT09PVwiLVwifXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMuX3ZhbHVlfXRvSGV4U3RyaW5nKHdpZHRoKXtpZih3aWR0aD09bnVsbCl7cmV0dXJuIHRoaXMuX2hleH1pZih3aWR0aCU4KXtsb2dnZXIkMi50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJ5dGUgd2lkdGhcIixcIndpZHRoXCIsd2lkdGgpfWNvbnN0IGhleD1CaWdOdW1iZXIuZnJvbSh0aGlzLl9oZXgpLmZyb21Ud29zKHRoaXMuZm9ybWF0LndpZHRoKS50b1R3b3Mod2lkdGgpLnRvSGV4U3RyaW5nKCk7cmV0dXJuIGhleFplcm9QYWQoaGV4LHdpZHRoLzgpfXRvVW5zYWZlRmxvYXQoKXtyZXR1cm4gcGFyc2VGbG9hdCh0aGlzLnRvU3RyaW5nKCkpfXRvRm9ybWF0KGZvcm1hdCl7cmV0dXJuIEZpeGVkTnVtYmVyLmZyb21TdHJpbmcodGhpcy5fdmFsdWUsZm9ybWF0KX1zdGF0aWMgZnJvbVZhbHVlKHZhbHVlLGRlY2ltYWxzLGZvcm1hdCl7aWYoZm9ybWF0PT1udWxsJiZkZWNpbWFscyE9bnVsbCYmIWlzQmlnTnVtYmVyaXNoKGRlY2ltYWxzKSl7Zm9ybWF0PWRlY2ltYWxzO2RlY2ltYWxzPW51bGx9aWYoZGVjaW1hbHM9PW51bGwpe2RlY2ltYWxzPTB9aWYoZm9ybWF0PT1udWxsKXtmb3JtYXQ9XCJmaXhlZFwifXJldHVybiBGaXhlZE51bWJlci5mcm9tU3RyaW5nKGZvcm1hdEZpeGVkKHZhbHVlLGRlY2ltYWxzKSxGaXhlZEZvcm1hdC5mcm9tKGZvcm1hdCkpfXN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlLGZvcm1hdCl7aWYoZm9ybWF0PT1udWxsKXtmb3JtYXQ9XCJmaXhlZFwifWNvbnN0IGZpeGVkRm9ybWF0PUZpeGVkRm9ybWF0LmZyb20oZm9ybWF0KTtjb25zdCBudW1lcmljPXBhcnNlRml4ZWQodmFsdWUsZml4ZWRGb3JtYXQuZGVjaW1hbHMpO2lmKCFmaXhlZEZvcm1hdC5zaWduZWQmJm51bWVyaWMubHQoWmVybykpe3Rocm93RmF1bHQkMShcInVuc2lnbmVkIHZhbHVlIGNhbm5vdCBiZSBuZWdhdGl2ZVwiLFwib3ZlcmZsb3dcIixcInZhbHVlXCIsdmFsdWUpfWxldCBoZXg9bnVsbDtpZihmaXhlZEZvcm1hdC5zaWduZWQpe2hleD1udW1lcmljLnRvVHdvcyhmaXhlZEZvcm1hdC53aWR0aCkudG9IZXhTdHJpbmcoKX1lbHNle2hleD1udW1lcmljLnRvSGV4U3RyaW5nKCk7aGV4PWhleFplcm9QYWQoaGV4LGZpeGVkRm9ybWF0LndpZHRoLzgpfWNvbnN0IGRlY2ltYWw9Zm9ybWF0Rml4ZWQobnVtZXJpYyxmaXhlZEZvcm1hdC5kZWNpbWFscyk7cmV0dXJuIG5ldyBGaXhlZE51bWJlcihfY29uc3RydWN0b3JHdWFyZCQxLGhleCxkZWNpbWFsLGZpeGVkRm9ybWF0KX1zdGF0aWMgZnJvbUJ5dGVzKHZhbHVlLGZvcm1hdCl7aWYoZm9ybWF0PT1udWxsKXtmb3JtYXQ9XCJmaXhlZFwifWNvbnN0IGZpeGVkRm9ybWF0PUZpeGVkRm9ybWF0LmZyb20oZm9ybWF0KTtpZihhcnJheWlmeSh2YWx1ZSkubGVuZ3RoPmZpeGVkRm9ybWF0LndpZHRoLzgpe3Rocm93IG5ldyBFcnJvcihcIm92ZXJmbG93XCIpfWxldCBudW1lcmljPUJpZ051bWJlci5mcm9tKHZhbHVlKTtpZihmaXhlZEZvcm1hdC5zaWduZWQpe251bWVyaWM9bnVtZXJpYy5mcm9tVHdvcyhmaXhlZEZvcm1hdC53aWR0aCl9Y29uc3QgaGV4PW51bWVyaWMudG9Ud29zKChmaXhlZEZvcm1hdC5zaWduZWQ/MDoxKStmaXhlZEZvcm1hdC53aWR0aCkudG9IZXhTdHJpbmcoKTtjb25zdCBkZWNpbWFsPWZvcm1hdEZpeGVkKG51bWVyaWMsZml4ZWRGb3JtYXQuZGVjaW1hbHMpO3JldHVybiBuZXcgRml4ZWROdW1iZXIoX2NvbnN0cnVjdG9yR3VhcmQkMSxoZXgsZGVjaW1hbCxmaXhlZEZvcm1hdCl9c3RhdGljIGZyb20odmFsdWUsZm9ybWF0KXtpZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtyZXR1cm4gRml4ZWROdW1iZXIuZnJvbVN0cmluZyh2YWx1ZSxmb3JtYXQpfWlmKGlzQnl0ZXModmFsdWUpKXtyZXR1cm4gRml4ZWROdW1iZXIuZnJvbUJ5dGVzKHZhbHVlLGZvcm1hdCl9dHJ5e3JldHVybiBGaXhlZE51bWJlci5mcm9tVmFsdWUodmFsdWUsMCxmb3JtYXQpfWNhdGNoKGVycm9yKXtpZihlcnJvci5jb2RlIT09TG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5UKXt0aHJvdyBlcnJvcn19cmV0dXJuIGxvZ2dlciQyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgRml4ZWROdW1iZXIgdmFsdWVcIixcInZhbHVlXCIsdmFsdWUpfXN0YXRpYyBpc0ZpeGVkTnVtYmVyKHZhbHVlKXtyZXR1cm4hISh2YWx1ZSYmdmFsdWUuX2lzRml4ZWROdW1iZXIpfX1jb25zdCBPTkU9Rml4ZWROdW1iZXIuZnJvbSgxKTtjb25zdCBCVU1QPUZpeGVkTnVtYmVyLmZyb20oXCIwLjVcIik7Y29uc3QgdmVyc2lvbiQzPVwicHJvcGVydGllcy81LjEuMFwiO1widXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXI9d2luZG93JiZ3aW5kb3cuX19hd2FpdGVyfHxmdW5jdGlvbih0aGlzQXJnLF9hcmd1bWVudHMsUCxnZW5lcmF0b3Ipe2Z1bmN0aW9uIGFkb3B0KHZhbHVlKXtyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQP3ZhbHVlOm5ldyBQKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUodmFsdWUpfSl9cmV0dXJuIG5ldyhQfHwoUD1Qcm9taXNlKSkoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe2Z1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gc3RlcChyZXN1bHQpe3Jlc3VsdC5kb25lP3Jlc29sdmUocmVzdWx0LnZhbHVlKTphZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLHJlamVjdGVkKX1zdGVwKChnZW5lcmF0b3I9Z2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsX2FyZ3VtZW50c3x8W10pKS5uZXh0KCkpfSl9O2NvbnN0IGxvZ2dlciQzPW5ldyBMb2dnZXIodmVyc2lvbiQzKTtmdW5jdGlvbiBkZWZpbmVSZWFkT25seShvYmplY3QsbmFtZSx2YWx1ZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCxuYW1lLHtlbnVtZXJhYmxlOnRydWUsdmFsdWU6dmFsdWUsd3JpdGFibGU6ZmFsc2V9KX1mdW5jdGlvbiBnZXRTdGF0aWMoY3RvcixrZXkpe2ZvcihsZXQgaT0wO2k8MzI7aSsrKXtpZihjdG9yW2tleV0pe3JldHVybiBjdG9yW2tleV19aWYoIWN0b3IucHJvdG90eXBlfHx0eXBlb2YgY3Rvci5wcm90b3R5cGUhPT1cIm9iamVjdFwiKXticmVha31jdG9yPU9iamVjdC5nZXRQcm90b3R5cGVPZihjdG9yLnByb3RvdHlwZSkuY29uc3RydWN0b3J9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcmVzb2x2ZVByb3BlcnRpZXMob2JqZWN0KXtyZXR1cm4gX19hd2FpdGVyKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBwcm9taXNlcz1PYmplY3Qua2V5cyhvYmplY3QpLm1hcChrZXk9Pntjb25zdCB2YWx1ZT1vYmplY3Rba2V5XTtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKHY9Pih7a2V5OmtleSx2YWx1ZTp2fSkpfSk7Y29uc3QgcmVzdWx0cz15aWVsZCBQcm9taXNlLmFsbChwcm9taXNlcyk7cmV0dXJuIHJlc3VsdHMucmVkdWNlKChhY2N1bSxyZXN1bHQpPT57YWNjdW1bcmVzdWx0LmtleV09cmVzdWx0LnZhbHVlO3JldHVybiBhY2N1bX0se30pfSl9ZnVuY3Rpb24gY2hlY2tQcm9wZXJ0aWVzKG9iamVjdCxwcm9wZXJ0aWVzKXtpZighb2JqZWN0fHx0eXBlb2Ygb2JqZWN0IT09XCJvYmplY3RcIil7bG9nZ2VyJDMudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBvYmplY3RcIixcIm9iamVjdFwiLG9iamVjdCl9T2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGtleT0+e2lmKCFwcm9wZXJ0aWVzW2tleV0pe2xvZ2dlciQzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgb2JqZWN0IGtleSAtIFwiK2tleSxcInRyYW5zYWN0aW9uOlwiK2tleSxvYmplY3QpfX0pfWZ1bmN0aW9uIHNoYWxsb3dDb3B5KG9iamVjdCl7Y29uc3QgcmVzdWx0PXt9O2Zvcihjb25zdCBrZXkgaW4gb2JqZWN0KXtyZXN1bHRba2V5XT1vYmplY3Rba2V5XX1yZXR1cm4gcmVzdWx0fWNvbnN0IG9wYXF1ZT17YmlnaW50OnRydWUsYm9vbGVhbjp0cnVlLGZ1bmN0aW9uOnRydWUsbnVtYmVyOnRydWUsc3RyaW5nOnRydWV9O2Z1bmN0aW9uIF9pc0Zyb3plbihvYmplY3Qpe2lmKG9iamVjdD09PXVuZGVmaW5lZHx8b2JqZWN0PT09bnVsbHx8b3BhcXVlW3R5cGVvZiBvYmplY3RdKXtyZXR1cm4gdHJ1ZX1pZihBcnJheS5pc0FycmF5KG9iamVjdCl8fHR5cGVvZiBvYmplY3Q9PT1cIm9iamVjdFwiKXtpZighT2JqZWN0LmlzRnJvemVuKG9iamVjdCkpe3JldHVybiBmYWxzZX1jb25zdCBrZXlzPU9iamVjdC5rZXlzKG9iamVjdCk7Zm9yKGxldCBpPTA7aTxrZXlzLmxlbmd0aDtpKyspe2lmKCFfaXNGcm96ZW4ob2JqZWN0W2tleXNbaV1dKSl7cmV0dXJuIGZhbHNlfX1yZXR1cm4gdHJ1ZX1yZXR1cm4gbG9nZ2VyJDMudGhyb3dBcmd1bWVudEVycm9yKGBDYW5ub3QgZGVlcENvcHkgJHt0eXBlb2Ygb2JqZWN0fWAsXCJvYmplY3RcIixvYmplY3QpfWZ1bmN0aW9uIF9kZWVwQ29weShvYmplY3Qpe2lmKF9pc0Zyb3plbihvYmplY3QpKXtyZXR1cm4gb2JqZWN0fWlmKEFycmF5LmlzQXJyYXkob2JqZWN0KSl7cmV0dXJuIE9iamVjdC5mcmVlemUob2JqZWN0Lm1hcChpdGVtPT5kZWVwQ29weShpdGVtKSkpfWlmKHR5cGVvZiBvYmplY3Q9PT1cIm9iamVjdFwiKXtjb25zdCByZXN1bHQ9e307Zm9yKGNvbnN0IGtleSBpbiBvYmplY3Qpe2NvbnN0IHZhbHVlPW9iamVjdFtrZXldO2lmKHZhbHVlPT09dW5kZWZpbmVkKXtjb250aW51ZX1kZWZpbmVSZWFkT25seShyZXN1bHQsa2V5LGRlZXBDb3B5KHZhbHVlKSl9cmV0dXJuIHJlc3VsdH1yZXR1cm4gbG9nZ2VyJDMudGhyb3dBcmd1bWVudEVycm9yKGBDYW5ub3QgZGVlcENvcHkgJHt0eXBlb2Ygb2JqZWN0fWAsXCJvYmplY3RcIixvYmplY3QpfWZ1bmN0aW9uIGRlZXBDb3B5KG9iamVjdCl7cmV0dXJuIF9kZWVwQ29weShvYmplY3QpfWNsYXNzIERlc2NyaXB0aW9ue2NvbnN0cnVjdG9yKGluZm8pe2Zvcihjb25zdCBrZXkgaW4gaW5mbyl7dGhpc1trZXldPWRlZXBDb3B5KGluZm9ba2V5XSl9fX1jb25zdCB2ZXJzaW9uJDQ9XCJhYmkvNS4xLjJcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkND1uZXcgTG9nZ2VyKHZlcnNpb24kNCk7Y29uc3QgX2NvbnN0cnVjdG9yR3VhcmQkMj17fTtsZXQgTW9kaWZpZXJzQnl0ZXM9e2NhbGxkYXRhOnRydWUsbWVtb3J5OnRydWUsc3RvcmFnZTp0cnVlfTtsZXQgTW9kaWZpZXJzTmVzdD17Y2FsbGRhdGE6dHJ1ZSxtZW1vcnk6dHJ1ZX07ZnVuY3Rpb24gY2hlY2tNb2RpZmllcih0eXBlLG5hbWUpe2lmKHR5cGU9PT1cImJ5dGVzXCJ8fHR5cGU9PT1cInN0cmluZ1wiKXtpZihNb2RpZmllcnNCeXRlc1tuYW1lXSl7cmV0dXJuIHRydWV9fWVsc2UgaWYodHlwZT09PVwiYWRkcmVzc1wiKXtpZihuYW1lPT09XCJwYXlhYmxlXCIpe3JldHVybiB0cnVlfX1lbHNlIGlmKHR5cGUuaW5kZXhPZihcIltcIik+PTB8fHR5cGU9PT1cInR1cGxlXCIpe2lmKE1vZGlmaWVyc05lc3RbbmFtZV0pe3JldHVybiB0cnVlfX1pZihNb2RpZmllcnNCeXRlc1tuYW1lXXx8bmFtZT09PVwicGF5YWJsZVwiKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIG1vZGlmaWVyXCIsXCJuYW1lXCIsbmFtZSl9cmV0dXJuIGZhbHNlfWZ1bmN0aW9uIHBhcnNlUGFyYW1UeXBlKHBhcmFtLGFsbG93SW5kZXhlZCl7bGV0IG9yaWdpbmFsUGFyYW09cGFyYW07ZnVuY3Rpb24gdGhyb3dFcnJvcihpKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IHBvc2l0aW9uICR7aX1gLFwicGFyYW1cIixwYXJhbSl9cGFyYW09cGFyYW0ucmVwbGFjZSgvXFxzL2csXCIgXCIpO2Z1bmN0aW9uIG5ld05vZGUocGFyZW50KXtsZXQgbm9kZT17dHlwZTpcIlwiLG5hbWU6XCJcIixwYXJlbnQ6cGFyZW50LHN0YXRlOnthbGxvd1R5cGU6dHJ1ZX19O2lmKGFsbG93SW5kZXhlZCl7bm9kZS5pbmRleGVkPWZhbHNlfXJldHVybiBub2RlfWxldCBwYXJlbnQ9e3R5cGU6XCJcIixuYW1lOlwiXCIsc3RhdGU6e2FsbG93VHlwZTp0cnVlfX07bGV0IG5vZGU9cGFyZW50O2ZvcihsZXQgaT0wO2k8cGFyYW0ubGVuZ3RoO2krKyl7bGV0IGM9cGFyYW1baV07c3dpdGNoKGMpe2Nhc2VcIihcIjppZihub2RlLnN0YXRlLmFsbG93VHlwZSYmbm9kZS50eXBlPT09XCJcIil7bm9kZS50eXBlPVwidHVwbGVcIn1lbHNlIGlmKCFub2RlLnN0YXRlLmFsbG93UGFyYW1zKXt0aHJvd0Vycm9yKGkpfW5vZGUuc3RhdGUuYWxsb3dUeXBlPWZhbHNlO25vZGUudHlwZT12ZXJpZnlUeXBlKG5vZGUudHlwZSk7bm9kZS5jb21wb25lbnRzPVtuZXdOb2RlKG5vZGUpXTtub2RlPW5vZGUuY29tcG9uZW50c1swXTticmVhaztjYXNlXCIpXCI6ZGVsZXRlIG5vZGUuc3RhdGU7aWYobm9kZS5uYW1lPT09XCJpbmRleGVkXCIpe2lmKCFhbGxvd0luZGV4ZWQpe3Rocm93RXJyb3IoaSl9bm9kZS5pbmRleGVkPXRydWU7bm9kZS5uYW1lPVwiXCJ9aWYoY2hlY2tNb2RpZmllcihub2RlLnR5cGUsbm9kZS5uYW1lKSl7bm9kZS5uYW1lPVwiXCJ9bm9kZS50eXBlPXZlcmlmeVR5cGUobm9kZS50eXBlKTtsZXQgY2hpbGQ9bm9kZTtub2RlPW5vZGUucGFyZW50O2lmKCFub2RlKXt0aHJvd0Vycm9yKGkpfWRlbGV0ZSBjaGlsZC5wYXJlbnQ7bm9kZS5zdGF0ZS5hbGxvd1BhcmFtcz1mYWxzZTtub2RlLnN0YXRlLmFsbG93TmFtZT10cnVlO25vZGUuc3RhdGUuYWxsb3dBcnJheT10cnVlO2JyZWFrO2Nhc2VcIixcIjpkZWxldGUgbm9kZS5zdGF0ZTtpZihub2RlLm5hbWU9PT1cImluZGV4ZWRcIil7aWYoIWFsbG93SW5kZXhlZCl7dGhyb3dFcnJvcihpKX1ub2RlLmluZGV4ZWQ9dHJ1ZTtub2RlLm5hbWU9XCJcIn1pZihjaGVja01vZGlmaWVyKG5vZGUudHlwZSxub2RlLm5hbWUpKXtub2RlLm5hbWU9XCJcIn1ub2RlLnR5cGU9dmVyaWZ5VHlwZShub2RlLnR5cGUpO2xldCBzaWJsaW5nPW5ld05vZGUobm9kZS5wYXJlbnQpO25vZGUucGFyZW50LmNvbXBvbmVudHMucHVzaChzaWJsaW5nKTtkZWxldGUgbm9kZS5wYXJlbnQ7bm9kZT1zaWJsaW5nO2JyZWFrO2Nhc2VcIiBcIjppZihub2RlLnN0YXRlLmFsbG93VHlwZSl7aWYobm9kZS50eXBlIT09XCJcIil7bm9kZS50eXBlPXZlcmlmeVR5cGUobm9kZS50eXBlKTtkZWxldGUgbm9kZS5zdGF0ZS5hbGxvd1R5cGU7bm9kZS5zdGF0ZS5hbGxvd05hbWU9dHJ1ZTtub2RlLnN0YXRlLmFsbG93UGFyYW1zPXRydWV9fWlmKG5vZGUuc3RhdGUuYWxsb3dOYW1lKXtpZihub2RlLm5hbWUhPT1cIlwiKXtpZihub2RlLm5hbWU9PT1cImluZGV4ZWRcIil7aWYoIWFsbG93SW5kZXhlZCl7dGhyb3dFcnJvcihpKX1pZihub2RlLmluZGV4ZWQpe3Rocm93RXJyb3IoaSl9bm9kZS5pbmRleGVkPXRydWU7bm9kZS5uYW1lPVwiXCJ9ZWxzZSBpZihjaGVja01vZGlmaWVyKG5vZGUudHlwZSxub2RlLm5hbWUpKXtub2RlLm5hbWU9XCJcIn1lbHNle25vZGUuc3RhdGUuYWxsb3dOYW1lPWZhbHNlfX19YnJlYWs7Y2FzZVwiW1wiOmlmKCFub2RlLnN0YXRlLmFsbG93QXJyYXkpe3Rocm93RXJyb3IoaSl9bm9kZS50eXBlKz1jO25vZGUuc3RhdGUuYWxsb3dBcnJheT1mYWxzZTtub2RlLnN0YXRlLmFsbG93TmFtZT1mYWxzZTtub2RlLnN0YXRlLnJlYWRBcnJheT10cnVlO2JyZWFrO2Nhc2VcIl1cIjppZighbm9kZS5zdGF0ZS5yZWFkQXJyYXkpe3Rocm93RXJyb3IoaSl9bm9kZS50eXBlKz1jO25vZGUuc3RhdGUucmVhZEFycmF5PWZhbHNlO25vZGUuc3RhdGUuYWxsb3dBcnJheT10cnVlO25vZGUuc3RhdGUuYWxsb3dOYW1lPXRydWU7YnJlYWs7ZGVmYXVsdDppZihub2RlLnN0YXRlLmFsbG93VHlwZSl7bm9kZS50eXBlKz1jO25vZGUuc3RhdGUuYWxsb3dQYXJhbXM9dHJ1ZTtub2RlLnN0YXRlLmFsbG93QXJyYXk9dHJ1ZX1lbHNlIGlmKG5vZGUuc3RhdGUuYWxsb3dOYW1lKXtub2RlLm5hbWUrPWM7ZGVsZXRlIG5vZGUuc3RhdGUuYWxsb3dBcnJheX1lbHNlIGlmKG5vZGUuc3RhdGUucmVhZEFycmF5KXtub2RlLnR5cGUrPWN9ZWxzZXt0aHJvd0Vycm9yKGkpfX19aWYobm9kZS5wYXJlbnQpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcInVuZXhwZWN0ZWQgZW9mXCIsXCJwYXJhbVwiLHBhcmFtKX1kZWxldGUgcGFyZW50LnN0YXRlO2lmKG5vZGUubmFtZT09PVwiaW5kZXhlZFwiKXtpZighYWxsb3dJbmRleGVkKXt0aHJvd0Vycm9yKG9yaWdpbmFsUGFyYW0ubGVuZ3RoLTcpfWlmKG5vZGUuaW5kZXhlZCl7dGhyb3dFcnJvcihvcmlnaW5hbFBhcmFtLmxlbmd0aC03KX1ub2RlLmluZGV4ZWQ9dHJ1ZTtub2RlLm5hbWU9XCJcIn1lbHNlIGlmKGNoZWNrTW9kaWZpZXIobm9kZS50eXBlLG5vZGUubmFtZSkpe25vZGUubmFtZT1cIlwifXBhcmVudC50eXBlPXZlcmlmeVR5cGUocGFyZW50LnR5cGUpO3JldHVybiBwYXJlbnR9ZnVuY3Rpb24gcG9wdWxhdGUob2JqZWN0LHBhcmFtcyl7Zm9yKGxldCBrZXkgaW4gcGFyYW1zKXtkZWZpbmVSZWFkT25seShvYmplY3Qsa2V5LHBhcmFtc1trZXldKX19Y29uc3QgRm9ybWF0VHlwZXM9T2JqZWN0LmZyZWV6ZSh7c2lnaGFzaDpcInNpZ2hhc2hcIixtaW5pbWFsOlwibWluaW1hbFwiLGZ1bGw6XCJmdWxsXCIsanNvbjpcImpzb25cIn0pO2NvbnN0IHBhcmFtVHlwZUFycmF5PW5ldyBSZWdFeHAoL14oLiopXFxbKFswLTldKilcXF0kLyk7Y2xhc3MgUGFyYW1UeXBle2NvbnN0cnVjdG9yKGNvbnN0cnVjdG9yR3VhcmQscGFyYW1zKXtpZihjb25zdHJ1Y3Rvckd1YXJkIT09X2NvbnN0cnVjdG9yR3VhcmQkMil7bG9nZ2VyJDQudGhyb3dFcnJvcihcInVzZSBmcm9tU3RyaW5nXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIm5ldyBQYXJhbVR5cGUoKVwifSl9cG9wdWxhdGUodGhpcyxwYXJhbXMpO2xldCBtYXRjaD10aGlzLnR5cGUubWF0Y2gocGFyYW1UeXBlQXJyYXkpO2lmKG1hdGNoKXtwb3B1bGF0ZSh0aGlzLHthcnJheUxlbmd0aDpwYXJzZUludChtYXRjaFsyXXx8XCItMVwiKSxhcnJheUNoaWxkcmVuOlBhcmFtVHlwZS5mcm9tT2JqZWN0KHt0eXBlOm1hdGNoWzFdLGNvbXBvbmVudHM6dGhpcy5jb21wb25lbnRzfSksYmFzZVR5cGU6XCJhcnJheVwifSl9ZWxzZXtwb3B1bGF0ZSh0aGlzLHthcnJheUxlbmd0aDpudWxsLGFycmF5Q2hpbGRyZW46bnVsbCxiYXNlVHlwZTp0aGlzLmNvbXBvbmVudHMhPW51bGw/XCJ0dXBsZVwiOnRoaXMudHlwZX0pfXRoaXMuX2lzUGFyYW1UeXBlPXRydWU7T2JqZWN0LmZyZWV6ZSh0aGlzKX1mb3JtYXQoZm9ybWF0KXtpZighZm9ybWF0KXtmb3JtYXQ9Rm9ybWF0VHlwZXMuc2lnaGFzaH1pZighRm9ybWF0VHlwZXNbZm9ybWF0XSl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmb3JtYXQgdHlwZVwiLFwiZm9ybWF0XCIsZm9ybWF0KX1pZihmb3JtYXQ9PT1Gb3JtYXRUeXBlcy5qc29uKXtsZXQgcmVzdWx0PXt0eXBlOnRoaXMuYmFzZVR5cGU9PT1cInR1cGxlXCI/XCJ0dXBsZVwiOnRoaXMudHlwZSxuYW1lOnRoaXMubmFtZXx8dW5kZWZpbmVkfTtpZih0eXBlb2YgdGhpcy5pbmRleGVkPT09XCJib29sZWFuXCIpe3Jlc3VsdC5pbmRleGVkPXRoaXMuaW5kZXhlZH1pZih0aGlzLmNvbXBvbmVudHMpe3Jlc3VsdC5jb21wb25lbnRzPXRoaXMuY29tcG9uZW50cy5tYXAoY29tcD0+SlNPTi5wYXJzZShjb21wLmZvcm1hdChmb3JtYXQpKSl9cmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlc3VsdCl9bGV0IHJlc3VsdD1cIlwiO2lmKHRoaXMuYmFzZVR5cGU9PT1cImFycmF5XCIpe3Jlc3VsdCs9dGhpcy5hcnJheUNoaWxkcmVuLmZvcm1hdChmb3JtYXQpO3Jlc3VsdCs9XCJbXCIrKHRoaXMuYXJyYXlMZW5ndGg8MD9cIlwiOlN0cmluZyh0aGlzLmFycmF5TGVuZ3RoKSkrXCJdXCJ9ZWxzZXtpZih0aGlzLmJhc2VUeXBlPT09XCJ0dXBsZVwiKXtpZihmb3JtYXQhPT1Gb3JtYXRUeXBlcy5zaWdoYXNoKXtyZXN1bHQrPXRoaXMudHlwZX1yZXN1bHQrPVwiKFwiK3RoaXMuY29tcG9uZW50cy5tYXAoY29tcD0+Y29tcC5mb3JtYXQoZm9ybWF0KSkuam9pbihmb3JtYXQ9PT1Gb3JtYXRUeXBlcy5mdWxsP1wiLCBcIjpcIixcIikrXCIpXCJ9ZWxzZXtyZXN1bHQrPXRoaXMudHlwZX19aWYoZm9ybWF0IT09Rm9ybWF0VHlwZXMuc2lnaGFzaCl7aWYodGhpcy5pbmRleGVkPT09dHJ1ZSl7cmVzdWx0Kz1cIiBpbmRleGVkXCJ9aWYoZm9ybWF0PT09Rm9ybWF0VHlwZXMuZnVsbCYmdGhpcy5uYW1lKXtyZXN1bHQrPVwiIFwiK3RoaXMubmFtZX19cmV0dXJuIHJlc3VsdH1zdGF0aWMgZnJvbSh2YWx1ZSxhbGxvd0luZGV4ZWQpe2lmKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpe3JldHVybiBQYXJhbVR5cGUuZnJvbVN0cmluZyh2YWx1ZSxhbGxvd0luZGV4ZWQpfXJldHVybiBQYXJhbVR5cGUuZnJvbU9iamVjdCh2YWx1ZSl9c3RhdGljIGZyb21PYmplY3QodmFsdWUpe2lmKFBhcmFtVHlwZS5pc1BhcmFtVHlwZSh2YWx1ZSkpe3JldHVybiB2YWx1ZX1yZXR1cm4gbmV3IFBhcmFtVHlwZShfY29uc3RydWN0b3JHdWFyZCQyLHtuYW1lOnZhbHVlLm5hbWV8fG51bGwsdHlwZTp2ZXJpZnlUeXBlKHZhbHVlLnR5cGUpLGluZGV4ZWQ6dmFsdWUuaW5kZXhlZD09bnVsbD9udWxsOiEhdmFsdWUuaW5kZXhlZCxjb21wb25lbnRzOnZhbHVlLmNvbXBvbmVudHM/dmFsdWUuY29tcG9uZW50cy5tYXAoUGFyYW1UeXBlLmZyb21PYmplY3QpOm51bGx9KX1zdGF0aWMgZnJvbVN0cmluZyh2YWx1ZSxhbGxvd0luZGV4ZWQpe2Z1bmN0aW9uIFBhcmFtVHlwaWZ5KG5vZGUpe3JldHVybiBQYXJhbVR5cGUuZnJvbU9iamVjdCh7bmFtZTpub2RlLm5hbWUsdHlwZTpub2RlLnR5cGUsaW5kZXhlZDpub2RlLmluZGV4ZWQsY29tcG9uZW50czpub2RlLmNvbXBvbmVudHN9KX1yZXR1cm4gUGFyYW1UeXBpZnkocGFyc2VQYXJhbVR5cGUodmFsdWUsISFhbGxvd0luZGV4ZWQpKX1zdGF0aWMgaXNQYXJhbVR5cGUodmFsdWUpe3JldHVybiEhKHZhbHVlIT1udWxsJiZ2YWx1ZS5faXNQYXJhbVR5cGUpfX1mdW5jdGlvbiBwYXJzZVBhcmFtcyh2YWx1ZSxhbGxvd0luZGV4KXtyZXR1cm4gc3BsaXROZXN0aW5nKHZhbHVlKS5tYXAocGFyYW09PlBhcmFtVHlwZS5mcm9tU3RyaW5nKHBhcmFtLGFsbG93SW5kZXgpKX1jbGFzcyBGcmFnbWVudHtjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkLHBhcmFtcyl7aWYoY29uc3RydWN0b3JHdWFyZCE9PV9jb25zdHJ1Y3Rvckd1YXJkJDIpe2xvZ2dlciQ0LnRocm93RXJyb3IoXCJ1c2UgYSBzdGF0aWMgZnJvbSBtZXRob2RcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwibmV3IEZyYWdtZW50KClcIn0pfXBvcHVsYXRlKHRoaXMscGFyYW1zKTt0aGlzLl9pc0ZyYWdtZW50PXRydWU7T2JqZWN0LmZyZWV6ZSh0aGlzKX1zdGF0aWMgZnJvbSh2YWx1ZSl7aWYoRnJhZ21lbnQuaXNGcmFnbWVudCh2YWx1ZSkpe3JldHVybiB2YWx1ZX1pZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtyZXR1cm4gRnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZSl9cmV0dXJuIEZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpfXN0YXRpYyBmcm9tT2JqZWN0KHZhbHVlKXtpZihGcmFnbWVudC5pc0ZyYWdtZW50KHZhbHVlKSl7cmV0dXJuIHZhbHVlfXN3aXRjaCh2YWx1ZS50eXBlKXtjYXNlXCJmdW5jdGlvblwiOnJldHVybiBGdW5jdGlvbkZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO2Nhc2VcImV2ZW50XCI6cmV0dXJuIEV2ZW50RnJhZ21lbnQuZnJvbU9iamVjdCh2YWx1ZSk7Y2FzZVwiY29uc3RydWN0b3JcIjpyZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtjYXNlXCJlcnJvclwiOmNhc2VcImZhbGxiYWNrXCI6Y2FzZVwicmVjZWl2ZVwiOnJldHVybiBudWxsfXJldHVybiBsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZyYWdtZW50IG9iamVjdFwiLFwidmFsdWVcIix2YWx1ZSl9c3RhdGljIGZyb21TdHJpbmcodmFsdWUpe3ZhbHVlPXZhbHVlLnJlcGxhY2UoL1xccy9nLFwiIFwiKTt2YWx1ZT12YWx1ZS5yZXBsYWNlKC9cXCgvZyxcIiAoXCIpLnJlcGxhY2UoL1xcKS9nLFwiKSBcIikucmVwbGFjZSgvXFxzKy9nLFwiIFwiKTt2YWx1ZT12YWx1ZS50cmltKCk7aWYodmFsdWUuc3BsaXQoXCIgXCIpWzBdPT09XCJldmVudFwiKXtyZXR1cm4gRXZlbnRGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlLnN1YnN0cmluZyg1KS50cmltKCkpfWVsc2UgaWYodmFsdWUuc3BsaXQoXCIgXCIpWzBdPT09XCJmdW5jdGlvblwiKXtyZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlLnN1YnN0cmluZyg4KS50cmltKCkpfWVsc2UgaWYodmFsdWUuc3BsaXQoXCIoXCIpWzBdLnRyaW0oKT09PVwiY29uc3RydWN0b3JcIil7cmV0dXJuIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZS50cmltKCkpfXJldHVybiBsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBmcmFnbWVudFwiLFwidmFsdWVcIix2YWx1ZSl9c3RhdGljIGlzRnJhZ21lbnQodmFsdWUpe3JldHVybiEhKHZhbHVlJiZ2YWx1ZS5faXNGcmFnbWVudCl9fWNsYXNzIEV2ZW50RnJhZ21lbnQgZXh0ZW5kcyBGcmFnbWVudHtmb3JtYXQoZm9ybWF0KXtpZighZm9ybWF0KXtmb3JtYXQ9Rm9ybWF0VHlwZXMuc2lnaGFzaH1pZighRm9ybWF0VHlwZXNbZm9ybWF0XSl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmb3JtYXQgdHlwZVwiLFwiZm9ybWF0XCIsZm9ybWF0KX1pZihmb3JtYXQ9PT1Gb3JtYXRUeXBlcy5qc29uKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoe3R5cGU6XCJldmVudFwiLGFub255bW91czp0aGlzLmFub255bW91cyxuYW1lOnRoaXMubmFtZSxpbnB1dHM6dGhpcy5pbnB1dHMubWFwKGlucHV0PT5KU09OLnBhcnNlKGlucHV0LmZvcm1hdChmb3JtYXQpKSl9KX1sZXQgcmVzdWx0PVwiXCI7aWYoZm9ybWF0IT09Rm9ybWF0VHlwZXMuc2lnaGFzaCl7cmVzdWx0Kz1cImV2ZW50IFwifXJlc3VsdCs9dGhpcy5uYW1lK1wiKFwiK3RoaXMuaW5wdXRzLm1hcChpbnB1dD0+aW5wdXQuZm9ybWF0KGZvcm1hdCkpLmpvaW4oZm9ybWF0PT09Rm9ybWF0VHlwZXMuZnVsbD9cIiwgXCI6XCIsXCIpK1wiKSBcIjtpZihmb3JtYXQhPT1Gb3JtYXRUeXBlcy5zaWdoYXNoKXtpZih0aGlzLmFub255bW91cyl7cmVzdWx0Kz1cImFub255bW91cyBcIn19cmV0dXJuIHJlc3VsdC50cmltKCl9c3RhdGljIGZyb20odmFsdWUpe2lmKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpe3JldHVybiBFdmVudEZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUpfXJldHVybiBFdmVudEZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpfXN0YXRpYyBmcm9tT2JqZWN0KHZhbHVlKXtpZihFdmVudEZyYWdtZW50LmlzRXZlbnRGcmFnbWVudCh2YWx1ZSkpe3JldHVybiB2YWx1ZX1pZih2YWx1ZS50eXBlIT09XCJldmVudFwiKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGV2ZW50IG9iamVjdFwiLFwidmFsdWVcIix2YWx1ZSl9Y29uc3QgcGFyYW1zPXtuYW1lOnZlcmlmeUlkZW50aWZpZXIodmFsdWUubmFtZSksYW5vbnltb3VzOnZhbHVlLmFub255bW91cyxpbnB1dHM6dmFsdWUuaW5wdXRzP3ZhbHVlLmlucHV0cy5tYXAoUGFyYW1UeXBlLmZyb21PYmplY3QpOltdLHR5cGU6XCJldmVudFwifTtyZXR1cm4gbmV3IEV2ZW50RnJhZ21lbnQoX2NvbnN0cnVjdG9yR3VhcmQkMixwYXJhbXMpfXN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlKXtsZXQgbWF0Y2g9dmFsdWUubWF0Y2gocmVnZXhQYXJlbik7aWYoIW1hdGNoKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGV2ZW50IHN0cmluZ1wiLFwidmFsdWVcIix2YWx1ZSl9bGV0IGFub255bW91cz1mYWxzZTttYXRjaFszXS5zcGxpdChcIiBcIikuZm9yRWFjaChtb2RpZmllcj0+e3N3aXRjaChtb2RpZmllci50cmltKCkpe2Nhc2VcImFub255bW91c1wiOmFub255bW91cz10cnVlO2JyZWFrO2Nhc2VcIlwiOmJyZWFrO2RlZmF1bHQ6bG9nZ2VyJDQud2FybihcInVua25vd24gbW9kaWZpZXI6IFwiK21vZGlmaWVyKX19KTtyZXR1cm4gRXZlbnRGcmFnbWVudC5mcm9tT2JqZWN0KHtuYW1lOm1hdGNoWzFdLnRyaW0oKSxhbm9ueW1vdXM6YW5vbnltb3VzLGlucHV0czpwYXJzZVBhcmFtcyhtYXRjaFsyXSx0cnVlKSx0eXBlOlwiZXZlbnRcIn0pfXN0YXRpYyBpc0V2ZW50RnJhZ21lbnQodmFsdWUpe3JldHVybiB2YWx1ZSYmdmFsdWUuX2lzRnJhZ21lbnQmJnZhbHVlLnR5cGU9PT1cImV2ZW50XCJ9fWZ1bmN0aW9uIHBhcnNlR2FzKHZhbHVlLHBhcmFtcyl7cGFyYW1zLmdhcz1udWxsO2xldCBjb21wcz12YWx1ZS5zcGxpdChcIkBcIik7aWYoY29tcHMubGVuZ3RoIT09MSl7aWYoY29tcHMubGVuZ3RoPjIpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgaHVtYW4tcmVhZGFibGUgQUJJIHNpZ25hdHVyZVwiLFwidmFsdWVcIix2YWx1ZSl9aWYoIWNvbXBzWzFdLm1hdGNoKC9eWzAtOV0rJC8pKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGh1bWFuLXJlYWRhYmxlIEFCSSBzaWduYXR1cmUgZ2FzXCIsXCJ2YWx1ZVwiLHZhbHVlKX1wYXJhbXMuZ2FzPUJpZ051bWJlci5mcm9tKGNvbXBzWzFdKTtyZXR1cm4gY29tcHNbMF19cmV0dXJuIHZhbHVlfWZ1bmN0aW9uIHBhcnNlTW9kaWZpZXJzKHZhbHVlLHBhcmFtcyl7cGFyYW1zLmNvbnN0YW50PWZhbHNlO3BhcmFtcy5wYXlhYmxlPWZhbHNlO3BhcmFtcy5zdGF0ZU11dGFiaWxpdHk9XCJub25wYXlhYmxlXCI7dmFsdWUuc3BsaXQoXCIgXCIpLmZvckVhY2gobW9kaWZpZXI9Pntzd2l0Y2gobW9kaWZpZXIudHJpbSgpKXtjYXNlXCJjb25zdGFudFwiOnBhcmFtcy5jb25zdGFudD10cnVlO2JyZWFrO2Nhc2VcInBheWFibGVcIjpwYXJhbXMucGF5YWJsZT10cnVlO3BhcmFtcy5zdGF0ZU11dGFiaWxpdHk9XCJwYXlhYmxlXCI7YnJlYWs7Y2FzZVwibm9ucGF5YWJsZVwiOnBhcmFtcy5wYXlhYmxlPWZhbHNlO3BhcmFtcy5zdGF0ZU11dGFiaWxpdHk9XCJub25wYXlhYmxlXCI7YnJlYWs7Y2FzZVwicHVyZVwiOnBhcmFtcy5jb25zdGFudD10cnVlO3BhcmFtcy5zdGF0ZU11dGFiaWxpdHk9XCJwdXJlXCI7YnJlYWs7Y2FzZVwidmlld1wiOnBhcmFtcy5jb25zdGFudD10cnVlO3BhcmFtcy5zdGF0ZU11dGFiaWxpdHk9XCJ2aWV3XCI7YnJlYWs7Y2FzZVwiZXh0ZXJuYWxcIjpjYXNlXCJwdWJsaWNcIjpjYXNlXCJcIjpicmVhaztkZWZhdWx0OmNvbnNvbGUubG9nKFwidW5rbm93biBtb2RpZmllcjogXCIrbW9kaWZpZXIpfX0pfWZ1bmN0aW9uIHZlcmlmeVN0YXRlKHZhbHVlKXtsZXQgcmVzdWx0PXtjb25zdGFudDpmYWxzZSxwYXlhYmxlOnRydWUsc3RhdGVNdXRhYmlsaXR5OlwicGF5YWJsZVwifTtpZih2YWx1ZS5zdGF0ZU11dGFiaWxpdHkhPW51bGwpe3Jlc3VsdC5zdGF0ZU11dGFiaWxpdHk9dmFsdWUuc3RhdGVNdXRhYmlsaXR5O3Jlc3VsdC5jb25zdGFudD1yZXN1bHQuc3RhdGVNdXRhYmlsaXR5PT09XCJ2aWV3XCJ8fHJlc3VsdC5zdGF0ZU11dGFiaWxpdHk9PT1cInB1cmVcIjtpZih2YWx1ZS5jb25zdGFudCE9bnVsbCl7aWYoISF2YWx1ZS5jb25zdGFudCE9PXJlc3VsdC5jb25zdGFudCl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgY29uc3RhbnQgZnVuY3Rpb24gd2l0aCBtdXRhYmlsaXR5IFwiK3Jlc3VsdC5zdGF0ZU11dGFiaWxpdHksXCJ2YWx1ZVwiLHZhbHVlKX19cmVzdWx0LnBheWFibGU9cmVzdWx0LnN0YXRlTXV0YWJpbGl0eT09PVwicGF5YWJsZVwiO2lmKHZhbHVlLnBheWFibGUhPW51bGwpe2lmKCEhdmFsdWUucGF5YWJsZSE9PXJlc3VsdC5wYXlhYmxlKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJjYW5ub3QgaGF2ZSBwYXlhYmxlIGZ1bmN0aW9uIHdpdGggbXV0YWJpbGl0eSBcIityZXN1bHQuc3RhdGVNdXRhYmlsaXR5LFwidmFsdWVcIix2YWx1ZSl9fX1lbHNlIGlmKHZhbHVlLnBheWFibGUhPW51bGwpe3Jlc3VsdC5wYXlhYmxlPSEhdmFsdWUucGF5YWJsZTtpZih2YWx1ZS5jb25zdGFudD09bnVsbCYmIXJlc3VsdC5wYXlhYmxlJiZ2YWx1ZS50eXBlIT09XCJjb25zdHJ1Y3RvclwiKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bmFibGUgdG8gZGV0ZXJtaW5lIHN0YXRlTXV0YWJpbGl0eVwiLFwidmFsdWVcIix2YWx1ZSl9cmVzdWx0LmNvbnN0YW50PSEhdmFsdWUuY29uc3RhbnQ7aWYocmVzdWx0LmNvbnN0YW50KXtyZXN1bHQuc3RhdGVNdXRhYmlsaXR5PVwidmlld1wifWVsc2V7cmVzdWx0LnN0YXRlTXV0YWJpbGl0eT1yZXN1bHQucGF5YWJsZT9cInBheWFibGVcIjpcIm5vbnBheWFibGVcIn1pZihyZXN1bHQucGF5YWJsZSYmcmVzdWx0LmNvbnN0YW50KXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJjYW5ub3QgaGF2ZSBjb25zdGFudCBwYXlhYmxlIGZ1bmN0aW9uXCIsXCJ2YWx1ZVwiLHZhbHVlKX19ZWxzZSBpZih2YWx1ZS5jb25zdGFudCE9bnVsbCl7cmVzdWx0LmNvbnN0YW50PSEhdmFsdWUuY29uc3RhbnQ7cmVzdWx0LnBheWFibGU9IXJlc3VsdC5jb25zdGFudDtyZXN1bHQuc3RhdGVNdXRhYmlsaXR5PXJlc3VsdC5jb25zdGFudD9cInZpZXdcIjpcInBheWFibGVcIn1lbHNlIGlmKHZhbHVlLnR5cGUhPT1cImNvbnN0cnVjdG9yXCIpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcInVuYWJsZSB0byBkZXRlcm1pbmUgc3RhdGVNdXRhYmlsaXR5XCIsXCJ2YWx1ZVwiLHZhbHVlKX1yZXR1cm4gcmVzdWx0fWNsYXNzIENvbnN0cnVjdG9yRnJhZ21lbnQgZXh0ZW5kcyBGcmFnbWVudHtmb3JtYXQoZm9ybWF0KXtpZighZm9ybWF0KXtmb3JtYXQ9Rm9ybWF0VHlwZXMuc2lnaGFzaH1pZighRm9ybWF0VHlwZXNbZm9ybWF0XSl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmb3JtYXQgdHlwZVwiLFwiZm9ybWF0XCIsZm9ybWF0KX1pZihmb3JtYXQ9PT1Gb3JtYXRUeXBlcy5qc29uKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoe3R5cGU6XCJjb25zdHJ1Y3RvclwiLHN0YXRlTXV0YWJpbGl0eTp0aGlzLnN0YXRlTXV0YWJpbGl0eSE9PVwibm9ucGF5YWJsZVwiP3RoaXMuc3RhdGVNdXRhYmlsaXR5OnVuZGVmaW5lZCxwYXlhYmxlOnRoaXMucGF5YWJsZSxnYXM6dGhpcy5nYXM/dGhpcy5nYXMudG9OdW1iZXIoKTp1bmRlZmluZWQsaW5wdXRzOnRoaXMuaW5wdXRzLm1hcChpbnB1dD0+SlNPTi5wYXJzZShpbnB1dC5mb3JtYXQoZm9ybWF0KSkpfSl9aWYoZm9ybWF0PT09Rm9ybWF0VHlwZXMuc2lnaGFzaCl7bG9nZ2VyJDQudGhyb3dFcnJvcihcImNhbm5vdCBmb3JtYXQgYSBjb25zdHJ1Y3RvciBmb3Igc2lnaGFzaFwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJmb3JtYXQoc2lnaGFzaClcIn0pfWxldCByZXN1bHQ9XCJjb25zdHJ1Y3RvcihcIit0aGlzLmlucHV0cy5tYXAoaW5wdXQ9PmlucHV0LmZvcm1hdChmb3JtYXQpKS5qb2luKGZvcm1hdD09PUZvcm1hdFR5cGVzLmZ1bGw/XCIsIFwiOlwiLFwiKStcIikgXCI7aWYodGhpcy5zdGF0ZU11dGFiaWxpdHkmJnRoaXMuc3RhdGVNdXRhYmlsaXR5IT09XCJub25wYXlhYmxlXCIpe3Jlc3VsdCs9dGhpcy5zdGF0ZU11dGFiaWxpdHkrXCIgXCJ9cmV0dXJuIHJlc3VsdC50cmltKCl9c3RhdGljIGZyb20odmFsdWUpe2lmKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpe3JldHVybiBDb25zdHJ1Y3RvckZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUpfXJldHVybiBDb25zdHJ1Y3RvckZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpfXN0YXRpYyBmcm9tT2JqZWN0KHZhbHVlKXtpZihDb25zdHJ1Y3RvckZyYWdtZW50LmlzQ29uc3RydWN0b3JGcmFnbWVudCh2YWx1ZSkpe3JldHVybiB2YWx1ZX1pZih2YWx1ZS50eXBlIT09XCJjb25zdHJ1Y3RvclwiKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGNvbnN0cnVjdG9yIG9iamVjdFwiLFwidmFsdWVcIix2YWx1ZSl9bGV0IHN0YXRlPXZlcmlmeVN0YXRlKHZhbHVlKTtpZihzdGF0ZS5jb25zdGFudCl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiY29uc3RydWN0b3IgY2Fubm90IGJlIGNvbnN0YW50XCIsXCJ2YWx1ZVwiLHZhbHVlKX1jb25zdCBwYXJhbXM9e25hbWU6bnVsbCx0eXBlOnZhbHVlLnR5cGUsaW5wdXRzOnZhbHVlLmlucHV0cz92YWx1ZS5pbnB1dHMubWFwKFBhcmFtVHlwZS5mcm9tT2JqZWN0KTpbXSxwYXlhYmxlOnN0YXRlLnBheWFibGUsc3RhdGVNdXRhYmlsaXR5OnN0YXRlLnN0YXRlTXV0YWJpbGl0eSxnYXM6dmFsdWUuZ2FzP0JpZ051bWJlci5mcm9tKHZhbHVlLmdhcyk6bnVsbH07cmV0dXJuIG5ldyBDb25zdHJ1Y3RvckZyYWdtZW50KF9jb25zdHJ1Y3Rvckd1YXJkJDIscGFyYW1zKX1zdGF0aWMgZnJvbVN0cmluZyh2YWx1ZSl7bGV0IHBhcmFtcz17dHlwZTpcImNvbnN0cnVjdG9yXCJ9O3ZhbHVlPXBhcnNlR2FzKHZhbHVlLHBhcmFtcyk7bGV0IHBhcmVucz12YWx1ZS5tYXRjaChyZWdleFBhcmVuKTtpZighcGFyZW5zfHxwYXJlbnNbMV0udHJpbSgpIT09XCJjb25zdHJ1Y3RvclwiKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGNvbnN0cnVjdG9yIHN0cmluZ1wiLFwidmFsdWVcIix2YWx1ZSl9cGFyYW1zLmlucHV0cz1wYXJzZVBhcmFtcyhwYXJlbnNbMl0udHJpbSgpLGZhbHNlKTtwYXJzZU1vZGlmaWVycyhwYXJlbnNbM10udHJpbSgpLHBhcmFtcyk7cmV0dXJuIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbU9iamVjdChwYXJhbXMpfXN0YXRpYyBpc0NvbnN0cnVjdG9yRnJhZ21lbnQodmFsdWUpe3JldHVybiB2YWx1ZSYmdmFsdWUuX2lzRnJhZ21lbnQmJnZhbHVlLnR5cGU9PT1cImNvbnN0cnVjdG9yXCJ9fWNsYXNzIEZ1bmN0aW9uRnJhZ21lbnQgZXh0ZW5kcyBDb25zdHJ1Y3RvckZyYWdtZW50e2Zvcm1hdChmb3JtYXQpe2lmKCFmb3JtYXQpe2Zvcm1hdD1Gb3JtYXRUeXBlcy5zaWdoYXNofWlmKCFGb3JtYXRUeXBlc1tmb3JtYXRdKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZvcm1hdCB0eXBlXCIsXCJmb3JtYXRcIixmb3JtYXQpfWlmKGZvcm1hdD09PUZvcm1hdFR5cGVzLmpzb24pe3JldHVybiBKU09OLnN0cmluZ2lmeSh7dHlwZTpcImZ1bmN0aW9uXCIsbmFtZTp0aGlzLm5hbWUsY29uc3RhbnQ6dGhpcy5jb25zdGFudCxzdGF0ZU11dGFiaWxpdHk6dGhpcy5zdGF0ZU11dGFiaWxpdHkhPT1cIm5vbnBheWFibGVcIj90aGlzLnN0YXRlTXV0YWJpbGl0eTp1bmRlZmluZWQscGF5YWJsZTp0aGlzLnBheWFibGUsZ2FzOnRoaXMuZ2FzP3RoaXMuZ2FzLnRvTnVtYmVyKCk6dW5kZWZpbmVkLGlucHV0czp0aGlzLmlucHV0cy5tYXAoaW5wdXQ9PkpTT04ucGFyc2UoaW5wdXQuZm9ybWF0KGZvcm1hdCkpKSxvdXRwdXRzOnRoaXMub3V0cHV0cy5tYXAob3V0cHV0PT5KU09OLnBhcnNlKG91dHB1dC5mb3JtYXQoZm9ybWF0KSkpfSl9bGV0IHJlc3VsdD1cIlwiO2lmKGZvcm1hdCE9PUZvcm1hdFR5cGVzLnNpZ2hhc2gpe3Jlc3VsdCs9XCJmdW5jdGlvbiBcIn1yZXN1bHQrPXRoaXMubmFtZStcIihcIit0aGlzLmlucHV0cy5tYXAoaW5wdXQ9PmlucHV0LmZvcm1hdChmb3JtYXQpKS5qb2luKGZvcm1hdD09PUZvcm1hdFR5cGVzLmZ1bGw/XCIsIFwiOlwiLFwiKStcIikgXCI7aWYoZm9ybWF0IT09Rm9ybWF0VHlwZXMuc2lnaGFzaCl7aWYodGhpcy5zdGF0ZU11dGFiaWxpdHkpe2lmKHRoaXMuc3RhdGVNdXRhYmlsaXR5IT09XCJub25wYXlhYmxlXCIpe3Jlc3VsdCs9dGhpcy5zdGF0ZU11dGFiaWxpdHkrXCIgXCJ9fWVsc2UgaWYodGhpcy5jb25zdGFudCl7cmVzdWx0Kz1cInZpZXcgXCJ9aWYodGhpcy5vdXRwdXRzJiZ0aGlzLm91dHB1dHMubGVuZ3RoKXtyZXN1bHQrPVwicmV0dXJucyAoXCIrdGhpcy5vdXRwdXRzLm1hcChvdXRwdXQ9Pm91dHB1dC5mb3JtYXQoZm9ybWF0KSkuam9pbihcIiwgXCIpK1wiKSBcIn1pZih0aGlzLmdhcyE9bnVsbCl7cmVzdWx0Kz1cIkBcIit0aGlzLmdhcy50b1N0cmluZygpK1wiIFwifX1yZXR1cm4gcmVzdWx0LnRyaW0oKX1zdGF0aWMgZnJvbSh2YWx1ZSl7aWYodHlwZW9mIHZhbHVlPT09XCJzdHJpbmdcIil7cmV0dXJuIEZ1bmN0aW9uRnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZSl9cmV0dXJuIEZ1bmN0aW9uRnJhZ21lbnQuZnJvbU9iamVjdCh2YWx1ZSl9c3RhdGljIGZyb21PYmplY3QodmFsdWUpe2lmKEZ1bmN0aW9uRnJhZ21lbnQuaXNGdW5jdGlvbkZyYWdtZW50KHZhbHVlKSl7cmV0dXJuIHZhbHVlfWlmKHZhbHVlLnR5cGUhPT1cImZ1bmN0aW9uXCIpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZnVuY3Rpb24gb2JqZWN0XCIsXCJ2YWx1ZVwiLHZhbHVlKX1sZXQgc3RhdGU9dmVyaWZ5U3RhdGUodmFsdWUpO2NvbnN0IHBhcmFtcz17dHlwZTp2YWx1ZS50eXBlLG5hbWU6dmVyaWZ5SWRlbnRpZmllcih2YWx1ZS5uYW1lKSxjb25zdGFudDpzdGF0ZS5jb25zdGFudCxpbnB1dHM6dmFsdWUuaW5wdXRzP3ZhbHVlLmlucHV0cy5tYXAoUGFyYW1UeXBlLmZyb21PYmplY3QpOltdLG91dHB1dHM6dmFsdWUub3V0cHV0cz92YWx1ZS5vdXRwdXRzLm1hcChQYXJhbVR5cGUuZnJvbU9iamVjdCk6W10scGF5YWJsZTpzdGF0ZS5wYXlhYmxlLHN0YXRlTXV0YWJpbGl0eTpzdGF0ZS5zdGF0ZU11dGFiaWxpdHksZ2FzOnZhbHVlLmdhcz9CaWdOdW1iZXIuZnJvbSh2YWx1ZS5nYXMpOm51bGx9O3JldHVybiBuZXcgRnVuY3Rpb25GcmFnbWVudChfY29uc3RydWN0b3JHdWFyZCQyLHBhcmFtcyl9c3RhdGljIGZyb21TdHJpbmcodmFsdWUpe2xldCBwYXJhbXM9e3R5cGU6XCJmdW5jdGlvblwifTt2YWx1ZT1wYXJzZUdhcyh2YWx1ZSxwYXJhbXMpO2xldCBjb21wcz12YWx1ZS5zcGxpdChcIiByZXR1cm5zIFwiKTtpZihjb21wcy5sZW5ndGg+Mil7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmdW5jdGlvbiBzdHJpbmdcIixcInZhbHVlXCIsdmFsdWUpfWxldCBwYXJlbnM9Y29tcHNbMF0ubWF0Y2gocmVnZXhQYXJlbik7aWYoIXBhcmVucyl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmdW5jdGlvbiBzaWduYXR1cmVcIixcInZhbHVlXCIsdmFsdWUpfXBhcmFtcy5uYW1lPXBhcmVuc1sxXS50cmltKCk7aWYocGFyYW1zLm5hbWUpe3ZlcmlmeUlkZW50aWZpZXIocGFyYW1zLm5hbWUpfXBhcmFtcy5pbnB1dHM9cGFyc2VQYXJhbXMocGFyZW5zWzJdLGZhbHNlKTtwYXJzZU1vZGlmaWVycyhwYXJlbnNbM10udHJpbSgpLHBhcmFtcyk7aWYoY29tcHMubGVuZ3RoPjEpe2xldCByZXR1cm5zPWNvbXBzWzFdLm1hdGNoKHJlZ2V4UGFyZW4pO2lmKHJldHVybnNbMV0udHJpbSgpIT1cIlwifHxyZXR1cm5zWzNdLnRyaW0oKSE9XCJcIil7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwidW5leHBlY3RlZCB0b2tlbnNcIixcInZhbHVlXCIsdmFsdWUpfXBhcmFtcy5vdXRwdXRzPXBhcnNlUGFyYW1zKHJldHVybnNbMl0sZmFsc2UpfWVsc2V7cGFyYW1zLm91dHB1dHM9W119cmV0dXJuIEZ1bmN0aW9uRnJhZ21lbnQuZnJvbU9iamVjdChwYXJhbXMpfXN0YXRpYyBpc0Z1bmN0aW9uRnJhZ21lbnQodmFsdWUpe3JldHVybiB2YWx1ZSYmdmFsdWUuX2lzRnJhZ21lbnQmJnZhbHVlLnR5cGU9PT1cImZ1bmN0aW9uXCJ9fWZ1bmN0aW9uIHZlcmlmeVR5cGUodHlwZSl7aWYodHlwZS5tYXRjaCgvXnVpbnQoJHxbXjEtOV0pLykpe3R5cGU9XCJ1aW50MjU2XCIrdHlwZS5zdWJzdHJpbmcoNCl9ZWxzZSBpZih0eXBlLm1hdGNoKC9eaW50KCR8W14xLTldKS8pKXt0eXBlPVwiaW50MjU2XCIrdHlwZS5zdWJzdHJpbmcoMyl9cmV0dXJuIHR5cGV9Y29uc3QgcmVnZXhJZGVudGlmaWVyPW5ldyBSZWdFeHAoXCJeW0EtWmEtel9dW0EtWmEtejAtOV9dKiRcIik7ZnVuY3Rpb24gdmVyaWZ5SWRlbnRpZmllcih2YWx1ZSl7aWYoIXZhbHVlfHwhdmFsdWUubWF0Y2gocmVnZXhJZGVudGlmaWVyKSl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIGlkZW50aWZpZXIgXCIke3ZhbHVlfVwiYCxcInZhbHVlXCIsdmFsdWUpfXJldHVybiB2YWx1ZX1jb25zdCByZWdleFBhcmVuPW5ldyBSZWdFeHAoXCJeKFteKShdKilcXFxcKCguKilcXFxcKShbXikoXSopJFwiKTtmdW5jdGlvbiBzcGxpdE5lc3RpbmcodmFsdWUpe3ZhbHVlPXZhbHVlLnRyaW0oKTtsZXQgcmVzdWx0PVtdO2xldCBhY2N1bT1cIlwiO2xldCBkZXB0aD0wO2ZvcihsZXQgb2Zmc2V0PTA7b2Zmc2V0PHZhbHVlLmxlbmd0aDtvZmZzZXQrKyl7bGV0IGM9dmFsdWVbb2Zmc2V0XTtpZihjPT09XCIsXCImJmRlcHRoPT09MCl7cmVzdWx0LnB1c2goYWNjdW0pO2FjY3VtPVwiXCJ9ZWxzZXthY2N1bSs9YztpZihjPT09XCIoXCIpe2RlcHRoKyt9ZWxzZSBpZihjPT09XCIpXCIpe2RlcHRoLS07aWYoZGVwdGg9PT0tMSl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwidW5iYWxhbmNlZCBwYXJlbnRoZXNpc1wiLFwidmFsdWVcIix2YWx1ZSl9fX19aWYoYWNjdW0pe3Jlc3VsdC5wdXNoKGFjY3VtKX1yZXR1cm4gcmVzdWx0fVwidXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciQ1PW5ldyBMb2dnZXIodmVyc2lvbiQ0KTtmdW5jdGlvbiBjaGVja1Jlc3VsdEVycm9ycyhyZXN1bHQpe2NvbnN0IGVycm9ycz1bXTtjb25zdCBjaGVja0Vycm9ycz1mdW5jdGlvbihwYXRoLG9iamVjdCl7aWYoIUFycmF5LmlzQXJyYXkob2JqZWN0KSl7cmV0dXJufWZvcihsZXQga2V5IGluIG9iamVjdCl7Y29uc3QgY2hpbGRQYXRoPXBhdGguc2xpY2UoKTtjaGlsZFBhdGgucHVzaChrZXkpO3RyeXtjaGVja0Vycm9ycyhjaGlsZFBhdGgsb2JqZWN0W2tleV0pfWNhdGNoKGVycm9yKXtlcnJvcnMucHVzaCh7cGF0aDpjaGlsZFBhdGgsZXJyb3I6ZXJyb3J9KX19fTtjaGVja0Vycm9ycyhbXSxyZXN1bHQpO3JldHVybiBlcnJvcnN9Y2xhc3MgQ29kZXJ7Y29uc3RydWN0b3IobmFtZSx0eXBlLGxvY2FsTmFtZSxkeW5hbWljKXt0aGlzLm5hbWU9bmFtZTt0aGlzLnR5cGU9dHlwZTt0aGlzLmxvY2FsTmFtZT1sb2NhbE5hbWU7dGhpcy5keW5hbWljPWR5bmFtaWN9X3Rocm93RXJyb3IobWVzc2FnZSx2YWx1ZSl7bG9nZ2VyJDUudGhyb3dBcmd1bWVudEVycm9yKG1lc3NhZ2UsdGhpcy5sb2NhbE5hbWUsdmFsdWUpfX1jbGFzcyBXcml0ZXJ7Y29uc3RydWN0b3Iod29yZFNpemUpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJ3b3JkU2l6ZVwiLHdvcmRTaXplfHwzMik7dGhpcy5fZGF0YT1bXTt0aGlzLl9kYXRhTGVuZ3RoPTA7dGhpcy5fcGFkZGluZz1uZXcgVWludDhBcnJheSh3b3JkU2l6ZSl9Z2V0IGRhdGEoKXtyZXR1cm4gaGV4Q29uY2F0KHRoaXMuX2RhdGEpfWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5fZGF0YUxlbmd0aH1fd3JpdGVEYXRhKGRhdGEpe3RoaXMuX2RhdGEucHVzaChkYXRhKTt0aGlzLl9kYXRhTGVuZ3RoKz1kYXRhLmxlbmd0aDtyZXR1cm4gZGF0YS5sZW5ndGh9YXBwZW5kV3JpdGVyKHdyaXRlcil7cmV0dXJuIHRoaXMuX3dyaXRlRGF0YShjb25jYXQod3JpdGVyLl9kYXRhKSl9d3JpdGVCeXRlcyh2YWx1ZSl7bGV0IGJ5dGVzPWFycmF5aWZ5KHZhbHVlKTtjb25zdCBwYWRkaW5nT2Zmc2V0PWJ5dGVzLmxlbmd0aCV0aGlzLndvcmRTaXplO2lmKHBhZGRpbmdPZmZzZXQpe2J5dGVzPWNvbmNhdChbYnl0ZXMsdGhpcy5fcGFkZGluZy5zbGljZShwYWRkaW5nT2Zmc2V0KV0pfXJldHVybiB0aGlzLl93cml0ZURhdGEoYnl0ZXMpfV9nZXRWYWx1ZSh2YWx1ZSl7bGV0IGJ5dGVzPWFycmF5aWZ5KEJpZ051bWJlci5mcm9tKHZhbHVlKSk7aWYoYnl0ZXMubGVuZ3RoPnRoaXMud29yZFNpemUpe2xvZ2dlciQ1LnRocm93RXJyb3IoXCJ2YWx1ZSBvdXQtb2YtYm91bmRzXCIsTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTix7bGVuZ3RoOnRoaXMud29yZFNpemUsb2Zmc2V0OmJ5dGVzLmxlbmd0aH0pfWlmKGJ5dGVzLmxlbmd0aCV0aGlzLndvcmRTaXplKXtieXRlcz1jb25jYXQoW3RoaXMuX3BhZGRpbmcuc2xpY2UoYnl0ZXMubGVuZ3RoJXRoaXMud29yZFNpemUpLGJ5dGVzXSl9cmV0dXJuIGJ5dGVzfXdyaXRlVmFsdWUodmFsdWUpe3JldHVybiB0aGlzLl93cml0ZURhdGEodGhpcy5fZ2V0VmFsdWUodmFsdWUpKX13cml0ZVVwZGF0YWJsZVZhbHVlKCl7Y29uc3Qgb2Zmc2V0PXRoaXMuX2RhdGEubGVuZ3RoO3RoaXMuX2RhdGEucHVzaCh0aGlzLl9wYWRkaW5nKTt0aGlzLl9kYXRhTGVuZ3RoKz10aGlzLndvcmRTaXplO3JldHVybiB2YWx1ZT0+e3RoaXMuX2RhdGFbb2Zmc2V0XT10aGlzLl9nZXRWYWx1ZSh2YWx1ZSl9fX1jbGFzcyBSZWFkZXJ7Y29uc3RydWN0b3IoZGF0YSx3b3JkU2l6ZSxjb2VyY2VGdW5jLGFsbG93TG9vc2Upe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfZGF0YVwiLGFycmF5aWZ5KGRhdGEpKTtkZWZpbmVSZWFkT25seSh0aGlzLFwid29yZFNpemVcIix3b3JkU2l6ZXx8MzIpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfY29lcmNlRnVuY1wiLGNvZXJjZUZ1bmMpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJhbGxvd0xvb3NlXCIsYWxsb3dMb29zZSk7dGhpcy5fb2Zmc2V0PTB9Z2V0IGRhdGEoKXtyZXR1cm4gaGV4bGlmeSh0aGlzLl9kYXRhKX1nZXQgY29uc3VtZWQoKXtyZXR1cm4gdGhpcy5fb2Zmc2V0fXN0YXRpYyBjb2VyY2UobmFtZSx2YWx1ZSl7bGV0IG1hdGNoPW5hbWUubWF0Y2goXCJedT9pbnQoWzAtOV0rKSRcIik7aWYobWF0Y2gmJnBhcnNlSW50KG1hdGNoWzFdKTw9NDgpe3ZhbHVlPXZhbHVlLnRvTnVtYmVyKCl9cmV0dXJuIHZhbHVlfWNvZXJjZShuYW1lLHZhbHVlKXtpZih0aGlzLl9jb2VyY2VGdW5jKXtyZXR1cm4gdGhpcy5fY29lcmNlRnVuYyhuYW1lLHZhbHVlKX1yZXR1cm4gUmVhZGVyLmNvZXJjZShuYW1lLHZhbHVlKX1fcGVla0J5dGVzKG9mZnNldCxsZW5ndGgsbG9vc2Upe2xldCBhbGlnbmVkTGVuZ3RoPU1hdGguY2VpbChsZW5ndGgvdGhpcy53b3JkU2l6ZSkqdGhpcy53b3JkU2l6ZTtpZih0aGlzLl9vZmZzZXQrYWxpZ25lZExlbmd0aD50aGlzLl9kYXRhLmxlbmd0aCl7aWYodGhpcy5hbGxvd0xvb3NlJiZsb29zZSYmdGhpcy5fb2Zmc2V0K2xlbmd0aDw9dGhpcy5fZGF0YS5sZW5ndGgpe2FsaWduZWRMZW5ndGg9bGVuZ3RofWVsc2V7bG9nZ2VyJDUudGhyb3dFcnJvcihcImRhdGEgb3V0LW9mLWJvdW5kc1wiLExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4se2xlbmd0aDp0aGlzLl9kYXRhLmxlbmd0aCxvZmZzZXQ6dGhpcy5fb2Zmc2V0K2FsaWduZWRMZW5ndGh9KX19cmV0dXJuIHRoaXMuX2RhdGEuc2xpY2UodGhpcy5fb2Zmc2V0LHRoaXMuX29mZnNldCthbGlnbmVkTGVuZ3RoKX1zdWJSZWFkZXIob2Zmc2V0KXtyZXR1cm4gbmV3IFJlYWRlcih0aGlzLl9kYXRhLnNsaWNlKHRoaXMuX29mZnNldCtvZmZzZXQpLHRoaXMud29yZFNpemUsdGhpcy5fY29lcmNlRnVuYyx0aGlzLmFsbG93TG9vc2UpfXJlYWRCeXRlcyhsZW5ndGgsbG9vc2Upe2xldCBieXRlcz10aGlzLl9wZWVrQnl0ZXMoMCxsZW5ndGgsISFsb29zZSk7dGhpcy5fb2Zmc2V0Kz1ieXRlcy5sZW5ndGg7cmV0dXJuIGJ5dGVzLnNsaWNlKDAsbGVuZ3RoKX1yZWFkVmFsdWUoKXtyZXR1cm4gQmlnTnVtYmVyLmZyb20odGhpcy5yZWFkQnl0ZXModGhpcy53b3JkU2l6ZSkpfX12YXIgc2hhMz1jcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbihtb2R1bGUpeyhmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciByb290PXR5cGVvZiB3aW5kb3c9PT1cIm9iamVjdFwiP3dpbmRvdzp7fTt2YXIgTk9ERV9KUz0hcm9vdC5KU19TSEEzX05PX05PREVfSlMmJnR5cGVvZiBwcm9jZXNzPT09XCJvYmplY3RcIiYmcHJvY2Vzcy52ZXJzaW9ucyYmcHJvY2Vzcy52ZXJzaW9ucy5ub2RlO2lmKE5PREVfSlMpe3Jvb3Q9Y29tbW9uanNHbG9iYWx9dmFyIENPTU1PTl9KUz0hcm9vdC5KU19TSEEzX05PX0NPTU1PTl9KUyYmXCJvYmplY3RcIj09PVwib2JqZWN0XCImJm1vZHVsZS5leHBvcnRzO3ZhciBIRVhfQ0hBUlM9XCIwMTIzNDU2Nzg5YWJjZGVmXCIuc3BsaXQoXCJcIik7dmFyIFNIQUtFX1BBRERJTkc9WzMxLDc5MzYsMjAzMTYxNiw1MjAwOTM2OTZdO3ZhciBLRUNDQUtfUEFERElORz1bMSwyNTYsNjU1MzYsMTY3NzcyMTZdO3ZhciBQQURESU5HPVs2LDE1MzYsMzkzMjE2LDEwMDY2MzI5Nl07dmFyIFNISUZUPVswLDgsMTYsMjRdO3ZhciBSQz1bMSwwLDMyODk4LDAsMzI5MDYsMjE0NzQ4MzY0OCwyMTQ3NTE2NDE2LDIxNDc0ODM2NDgsMzI5MDcsMCwyMTQ3NDgzNjQ5LDAsMjE0NzUxNjU0NSwyMTQ3NDgzNjQ4LDMyNzc3LDIxNDc0ODM2NDgsMTM4LDAsMTM2LDAsMjE0NzUxNjQyNSwwLDIxNDc0ODM2NTgsMCwyMTQ3NTE2NTU1LDAsMTM5LDIxNDc0ODM2NDgsMzI5MDUsMjE0NzQ4MzY0OCwzMjc3MSwyMTQ3NDgzNjQ4LDMyNzcwLDIxNDc0ODM2NDgsMTI4LDIxNDc0ODM2NDgsMzI3NzgsMCwyMTQ3NDgzNjU4LDIxNDc0ODM2NDgsMjE0NzUxNjU0NSwyMTQ3NDgzNjQ4LDMyODk2LDIxNDc0ODM2NDgsMjE0NzQ4MzY0OSwwLDIxNDc1MTY0MjQsMjE0NzQ4MzY0OF07dmFyIEJJVFM9WzIyNCwyNTYsMzg0LDUxMl07dmFyIFNIQUtFX0JJVFM9WzEyOCwyNTZdO3ZhciBPVVRQVVRfVFlQRVM9W1wiaGV4XCIsXCJidWZmZXJcIixcImFycmF5QnVmZmVyXCIsXCJhcnJheVwiXTt2YXIgY3JlYXRlT3V0cHV0TWV0aG9kPWZ1bmN0aW9uKGJpdHMscGFkZGluZyxvdXRwdXRUeXBlKXtyZXR1cm4gZnVuY3Rpb24obWVzc2FnZSl7cmV0dXJuIG5ldyBLZWNjYWsoYml0cyxwYWRkaW5nLGJpdHMpLnVwZGF0ZShtZXNzYWdlKVtvdXRwdXRUeXBlXSgpfX07dmFyIGNyZWF0ZVNoYWtlT3V0cHV0TWV0aG9kPWZ1bmN0aW9uKGJpdHMscGFkZGluZyxvdXRwdXRUeXBlKXtyZXR1cm4gZnVuY3Rpb24obWVzc2FnZSxvdXRwdXRCaXRzKXtyZXR1cm4gbmV3IEtlY2NhayhiaXRzLHBhZGRpbmcsb3V0cHV0Qml0cykudXBkYXRlKG1lc3NhZ2UpW291dHB1dFR5cGVdKCl9fTt2YXIgY3JlYXRlTWV0aG9kPWZ1bmN0aW9uKGJpdHMscGFkZGluZyl7dmFyIG1ldGhvZD1jcmVhdGVPdXRwdXRNZXRob2QoYml0cyxwYWRkaW5nLFwiaGV4XCIpO21ldGhvZC5jcmVhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEtlY2NhayhiaXRzLHBhZGRpbmcsYml0cyl9O21ldGhvZC51cGRhdGU9ZnVuY3Rpb24obWVzc2FnZSl7cmV0dXJuIG1ldGhvZC5jcmVhdGUoKS51cGRhdGUobWVzc2FnZSl9O2Zvcih2YXIgaT0wO2k8T1VUUFVUX1RZUEVTLmxlbmd0aDsrK2kpe3ZhciB0eXBlPU9VVFBVVF9UWVBFU1tpXTttZXRob2RbdHlwZV09Y3JlYXRlT3V0cHV0TWV0aG9kKGJpdHMscGFkZGluZyx0eXBlKX1yZXR1cm4gbWV0aG9kfTt2YXIgY3JlYXRlU2hha2VNZXRob2Q9ZnVuY3Rpb24oYml0cyxwYWRkaW5nKXt2YXIgbWV0aG9kPWNyZWF0ZVNoYWtlT3V0cHV0TWV0aG9kKGJpdHMscGFkZGluZyxcImhleFwiKTttZXRob2QuY3JlYXRlPWZ1bmN0aW9uKG91dHB1dEJpdHMpe3JldHVybiBuZXcgS2VjY2FrKGJpdHMscGFkZGluZyxvdXRwdXRCaXRzKX07bWV0aG9kLnVwZGF0ZT1mdW5jdGlvbihtZXNzYWdlLG91dHB1dEJpdHMpe3JldHVybiBtZXRob2QuY3JlYXRlKG91dHB1dEJpdHMpLnVwZGF0ZShtZXNzYWdlKX07Zm9yKHZhciBpPTA7aTxPVVRQVVRfVFlQRVMubGVuZ3RoOysraSl7dmFyIHR5cGU9T1VUUFVUX1RZUEVTW2ldO21ldGhvZFt0eXBlXT1jcmVhdGVTaGFrZU91dHB1dE1ldGhvZChiaXRzLHBhZGRpbmcsdHlwZSl9cmV0dXJuIG1ldGhvZH07dmFyIGFsZ29yaXRobXM9W3tuYW1lOlwia2VjY2FrXCIscGFkZGluZzpLRUNDQUtfUEFERElORyxiaXRzOkJJVFMsY3JlYXRlTWV0aG9kOmNyZWF0ZU1ldGhvZH0se25hbWU6XCJzaGEzXCIscGFkZGluZzpQQURESU5HLGJpdHM6QklUUyxjcmVhdGVNZXRob2Q6Y3JlYXRlTWV0aG9kfSx7bmFtZTpcInNoYWtlXCIscGFkZGluZzpTSEFLRV9QQURESU5HLGJpdHM6U0hBS0VfQklUUyxjcmVhdGVNZXRob2Q6Y3JlYXRlU2hha2VNZXRob2R9XTt2YXIgbWV0aG9kcz17fSxtZXRob2ROYW1lcz1bXTtmb3IodmFyIGk9MDtpPGFsZ29yaXRobXMubGVuZ3RoOysraSl7dmFyIGFsZ29yaXRobT1hbGdvcml0aG1zW2ldO3ZhciBiaXRzPWFsZ29yaXRobS5iaXRzO2Zvcih2YXIgaj0wO2o8Yml0cy5sZW5ndGg7KytqKXt2YXIgbWV0aG9kTmFtZT1hbGdvcml0aG0ubmFtZStcIl9cIitiaXRzW2pdO21ldGhvZE5hbWVzLnB1c2gobWV0aG9kTmFtZSk7bWV0aG9kc1ttZXRob2ROYW1lXT1hbGdvcml0aG0uY3JlYXRlTWV0aG9kKGJpdHNbal0sYWxnb3JpdGhtLnBhZGRpbmcpfX1mdW5jdGlvbiBLZWNjYWsoYml0cyxwYWRkaW5nLG91dHB1dEJpdHMpe3RoaXMuYmxvY2tzPVtdO3RoaXMucz1bXTt0aGlzLnBhZGRpbmc9cGFkZGluZzt0aGlzLm91dHB1dEJpdHM9b3V0cHV0Qml0czt0aGlzLnJlc2V0PXRydWU7dGhpcy5ibG9jaz0wO3RoaXMuc3RhcnQ9MDt0aGlzLmJsb2NrQ291bnQ9MTYwMC0oYml0czw8MSk+PjU7dGhpcy5ieXRlQ291bnQ9dGhpcy5ibG9ja0NvdW50PDwyO3RoaXMub3V0cHV0QmxvY2tzPW91dHB1dEJpdHM+PjU7dGhpcy5leHRyYUJ5dGVzPShvdXRwdXRCaXRzJjMxKT4+Mztmb3IodmFyIGk9MDtpPDUwOysraSl7dGhpcy5zW2ldPTB9fUtlY2Nhay5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKG1lc3NhZ2Upe3ZhciBub3RTdHJpbmc9dHlwZW9mIG1lc3NhZ2UhPT1cInN0cmluZ1wiO2lmKG5vdFN0cmluZyYmbWVzc2FnZS5jb25zdHJ1Y3Rvcj09PUFycmF5QnVmZmVyKXttZXNzYWdlPW5ldyBVaW50OEFycmF5KG1lc3NhZ2UpfXZhciBsZW5ndGg9bWVzc2FnZS5sZW5ndGgsYmxvY2tzPXRoaXMuYmxvY2tzLGJ5dGVDb3VudD10aGlzLmJ5dGVDb3VudCxibG9ja0NvdW50PXRoaXMuYmxvY2tDb3VudCxpbmRleD0wLHM9dGhpcy5zLGksY29kZTt3aGlsZShpbmRleDxsZW5ndGgpe2lmKHRoaXMucmVzZXQpe3RoaXMucmVzZXQ9ZmFsc2U7YmxvY2tzWzBdPXRoaXMuYmxvY2s7Zm9yKGk9MTtpPGJsb2NrQ291bnQrMTsrK2kpe2Jsb2Nrc1tpXT0wfX1pZihub3RTdHJpbmcpe2ZvcihpPXRoaXMuc3RhcnQ7aW5kZXg8bGVuZ3RoJiZpPGJ5dGVDb3VudDsrK2luZGV4KXtibG9ja3NbaT4+Ml18PW1lc3NhZ2VbaW5kZXhdPDxTSElGVFtpKysmM119fWVsc2V7Zm9yKGk9dGhpcy5zdGFydDtpbmRleDxsZW5ndGgmJmk8Ynl0ZUNvdW50OysraW5kZXgpe2NvZGU9bWVzc2FnZS5jaGFyQ29kZUF0KGluZGV4KTtpZihjb2RlPDEyOCl7YmxvY2tzW2k+PjJdfD1jb2RlPDxTSElGVFtpKysmM119ZWxzZSBpZihjb2RlPDIwNDgpe2Jsb2Nrc1tpPj4yXXw9KDE5Mnxjb2RlPj42KTw8U0hJRlRbaSsrJjNdO2Jsb2Nrc1tpPj4yXXw9KDEyOHxjb2RlJjYzKTw8U0hJRlRbaSsrJjNdfWVsc2UgaWYoY29kZTw1NTI5Nnx8Y29kZT49NTczNDQpe2Jsb2Nrc1tpPj4yXXw9KDIyNHxjb2RlPj4xMik8PFNISUZUW2krKyYzXTtibG9ja3NbaT4+Ml18PSgxMjh8Y29kZT4+NiY2Myk8PFNISUZUW2krKyYzXTtibG9ja3NbaT4+Ml18PSgxMjh8Y29kZSY2Myk8PFNISUZUW2krKyYzXX1lbHNle2NvZGU9NjU1MzYrKChjb2RlJjEwMjMpPDwxMHxtZXNzYWdlLmNoYXJDb2RlQXQoKytpbmRleCkmMTAyMyk7YmxvY2tzW2k+PjJdfD0oMjQwfGNvZGU+PjE4KTw8U0hJRlRbaSsrJjNdO2Jsb2Nrc1tpPj4yXXw9KDEyOHxjb2RlPj4xMiY2Myk8PFNISUZUW2krKyYzXTtibG9ja3NbaT4+Ml18PSgxMjh8Y29kZT4+NiY2Myk8PFNISUZUW2krKyYzXTtibG9ja3NbaT4+Ml18PSgxMjh8Y29kZSY2Myk8PFNISUZUW2krKyYzXX19fXRoaXMubGFzdEJ5dGVJbmRleD1pO2lmKGk+PWJ5dGVDb3VudCl7dGhpcy5zdGFydD1pLWJ5dGVDb3VudDt0aGlzLmJsb2NrPWJsb2Nrc1tibG9ja0NvdW50XTtmb3IoaT0wO2k8YmxvY2tDb3VudDsrK2kpe3NbaV1ePWJsb2Nrc1tpXX1mKHMpO3RoaXMucmVzZXQ9dHJ1ZX1lbHNle3RoaXMuc3RhcnQ9aX19cmV0dXJuIHRoaXN9O0tlY2Nhay5wcm90b3R5cGUuZmluYWxpemU9ZnVuY3Rpb24oKXt2YXIgYmxvY2tzPXRoaXMuYmxvY2tzLGk9dGhpcy5sYXN0Qnl0ZUluZGV4LGJsb2NrQ291bnQ9dGhpcy5ibG9ja0NvdW50LHM9dGhpcy5zO2Jsb2Nrc1tpPj4yXXw9dGhpcy5wYWRkaW5nW2kmM107aWYodGhpcy5sYXN0Qnl0ZUluZGV4PT09dGhpcy5ieXRlQ291bnQpe2Jsb2Nrc1swXT1ibG9ja3NbYmxvY2tDb3VudF07Zm9yKGk9MTtpPGJsb2NrQ291bnQrMTsrK2kpe2Jsb2Nrc1tpXT0wfX1ibG9ja3NbYmxvY2tDb3VudC0xXXw9MjE0NzQ4MzY0ODtmb3IoaT0wO2k8YmxvY2tDb3VudDsrK2kpe3NbaV1ePWJsb2Nrc1tpXX1mKHMpfTtLZWNjYWsucHJvdG90eXBlLnRvU3RyaW5nPUtlY2Nhay5wcm90b3R5cGUuaGV4PWZ1bmN0aW9uKCl7dGhpcy5maW5hbGl6ZSgpO3ZhciBibG9ja0NvdW50PXRoaXMuYmxvY2tDb3VudCxzPXRoaXMucyxvdXRwdXRCbG9ja3M9dGhpcy5vdXRwdXRCbG9ja3MsZXh0cmFCeXRlcz10aGlzLmV4dHJhQnl0ZXMsaT0wLGo9MDt2YXIgaGV4PVwiXCIsYmxvY2s7d2hpbGUoajxvdXRwdXRCbG9ja3Mpe2ZvcihpPTA7aTxibG9ja0NvdW50JiZqPG91dHB1dEJsb2NrczsrK2ksKytqKXtibG9jaz1zW2ldO2hleCs9SEVYX0NIQVJTW2Jsb2NrPj40JjE1XStIRVhfQ0hBUlNbYmxvY2smMTVdK0hFWF9DSEFSU1tibG9jaz4+MTImMTVdK0hFWF9DSEFSU1tibG9jaz4+OCYxNV0rSEVYX0NIQVJTW2Jsb2NrPj4yMCYxNV0rSEVYX0NIQVJTW2Jsb2NrPj4xNiYxNV0rSEVYX0NIQVJTW2Jsb2NrPj4yOCYxNV0rSEVYX0NIQVJTW2Jsb2NrPj4yNCYxNV19aWYoaiVibG9ja0NvdW50PT09MCl7ZihzKTtpPTB9fWlmKGV4dHJhQnl0ZXMpe2Jsb2NrPXNbaV07aWYoZXh0cmFCeXRlcz4wKXtoZXgrPUhFWF9DSEFSU1tibG9jaz4+NCYxNV0rSEVYX0NIQVJTW2Jsb2NrJjE1XX1pZihleHRyYUJ5dGVzPjEpe2hleCs9SEVYX0NIQVJTW2Jsb2NrPj4xMiYxNV0rSEVYX0NIQVJTW2Jsb2NrPj44JjE1XX1pZihleHRyYUJ5dGVzPjIpe2hleCs9SEVYX0NIQVJTW2Jsb2NrPj4yMCYxNV0rSEVYX0NIQVJTW2Jsb2NrPj4xNiYxNV19fXJldHVybiBoZXh9O0tlY2Nhay5wcm90b3R5cGUuYXJyYXlCdWZmZXI9ZnVuY3Rpb24oKXt0aGlzLmZpbmFsaXplKCk7dmFyIGJsb2NrQ291bnQ9dGhpcy5ibG9ja0NvdW50LHM9dGhpcy5zLG91dHB1dEJsb2Nrcz10aGlzLm91dHB1dEJsb2NrcyxleHRyYUJ5dGVzPXRoaXMuZXh0cmFCeXRlcyxpPTAsaj0wO3ZhciBieXRlcz10aGlzLm91dHB1dEJpdHM+PjM7dmFyIGJ1ZmZlcjtpZihleHRyYUJ5dGVzKXtidWZmZXI9bmV3IEFycmF5QnVmZmVyKG91dHB1dEJsb2NrcysxPDwyKX1lbHNle2J1ZmZlcj1uZXcgQXJyYXlCdWZmZXIoYnl0ZXMpfXZhciBhcnJheT1uZXcgVWludDMyQXJyYXkoYnVmZmVyKTt3aGlsZShqPG91dHB1dEJsb2Nrcyl7Zm9yKGk9MDtpPGJsb2NrQ291bnQmJmo8b3V0cHV0QmxvY2tzOysraSwrK2ope2FycmF5W2pdPXNbaV19aWYoaiVibG9ja0NvdW50PT09MCl7ZihzKX19aWYoZXh0cmFCeXRlcyl7YXJyYXlbaV09c1tpXTtidWZmZXI9YnVmZmVyLnNsaWNlKDAsYnl0ZXMpfXJldHVybiBidWZmZXJ9O0tlY2Nhay5wcm90b3R5cGUuYnVmZmVyPUtlY2Nhay5wcm90b3R5cGUuYXJyYXlCdWZmZXI7S2VjY2FrLnByb3RvdHlwZS5kaWdlc3Q9S2VjY2FrLnByb3RvdHlwZS5hcnJheT1mdW5jdGlvbigpe3RoaXMuZmluYWxpemUoKTt2YXIgYmxvY2tDb3VudD10aGlzLmJsb2NrQ291bnQscz10aGlzLnMsb3V0cHV0QmxvY2tzPXRoaXMub3V0cHV0QmxvY2tzLGV4dHJhQnl0ZXM9dGhpcy5leHRyYUJ5dGVzLGk9MCxqPTA7dmFyIGFycmF5PVtdLG9mZnNldCxibG9jazt3aGlsZShqPG91dHB1dEJsb2Nrcyl7Zm9yKGk9MDtpPGJsb2NrQ291bnQmJmo8b3V0cHV0QmxvY2tzOysraSwrK2ope29mZnNldD1qPDwyO2Jsb2NrPXNbaV07YXJyYXlbb2Zmc2V0XT1ibG9jayYyNTU7YXJyYXlbb2Zmc2V0KzFdPWJsb2NrPj44JjI1NTthcnJheVtvZmZzZXQrMl09YmxvY2s+PjE2JjI1NTthcnJheVtvZmZzZXQrM109YmxvY2s+PjI0JjI1NX1pZihqJWJsb2NrQ291bnQ9PT0wKXtmKHMpfX1pZihleHRyYUJ5dGVzKXtvZmZzZXQ9ajw8MjtibG9jaz1zW2ldO2lmKGV4dHJhQnl0ZXM+MCl7YXJyYXlbb2Zmc2V0XT1ibG9jayYyNTV9aWYoZXh0cmFCeXRlcz4xKXthcnJheVtvZmZzZXQrMV09YmxvY2s+PjgmMjU1fWlmKGV4dHJhQnl0ZXM+Mil7YXJyYXlbb2Zmc2V0KzJdPWJsb2NrPj4xNiYyNTV9fXJldHVybiBhcnJheX07dmFyIGY9ZnVuY3Rpb24ocyl7dmFyIGgsbCxuLGMwLGMxLGMyLGMzLGM0LGM1LGM2LGM3LGM4LGM5LGIwLGIxLGIyLGIzLGI0LGI1LGI2LGI3LGI4LGI5LGIxMCxiMTEsYjEyLGIxMyxiMTQsYjE1LGIxNixiMTcsYjE4LGIxOSxiMjAsYjIxLGIyMixiMjMsYjI0LGIyNSxiMjYsYjI3LGIyOCxiMjksYjMwLGIzMSxiMzIsYjMzLGIzNCxiMzUsYjM2LGIzNyxiMzgsYjM5LGI0MCxiNDEsYjQyLGI0MyxiNDQsYjQ1LGI0NixiNDcsYjQ4LGI0OTtmb3Iobj0wO248NDg7bis9Mil7YzA9c1swXV5zWzEwXV5zWzIwXV5zWzMwXV5zWzQwXTtjMT1zWzFdXnNbMTFdXnNbMjFdXnNbMzFdXnNbNDFdO2MyPXNbMl1ec1sxMl1ec1syMl1ec1szMl1ec1s0Ml07YzM9c1szXV5zWzEzXV5zWzIzXV5zWzMzXV5zWzQzXTtjND1zWzRdXnNbMTRdXnNbMjRdXnNbMzRdXnNbNDRdO2M1PXNbNV1ec1sxNV1ec1syNV1ec1szNV1ec1s0NV07YzY9c1s2XV5zWzE2XV5zWzI2XV5zWzM2XV5zWzQ2XTtjNz1zWzddXnNbMTddXnNbMjddXnNbMzddXnNbNDddO2M4PXNbOF1ec1sxOF1ec1syOF1ec1szOF1ec1s0OF07Yzk9c1s5XV5zWzE5XV5zWzI5XV5zWzM5XV5zWzQ5XTtoPWM4XihjMjw8MXxjMz4+PjMxKTtsPWM5XihjMzw8MXxjMj4+PjMxKTtzWzBdXj1oO3NbMV1ePWw7c1sxMF1ePWg7c1sxMV1ePWw7c1syMF1ePWg7c1syMV1ePWw7c1szMF1ePWg7c1szMV1ePWw7c1s0MF1ePWg7c1s0MV1ePWw7aD1jMF4oYzQ8PDF8YzU+Pj4zMSk7bD1jMV4oYzU8PDF8YzQ+Pj4zMSk7c1syXV49aDtzWzNdXj1sO3NbMTJdXj1oO3NbMTNdXj1sO3NbMjJdXj1oO3NbMjNdXj1sO3NbMzJdXj1oO3NbMzNdXj1sO3NbNDJdXj1oO3NbNDNdXj1sO2g9YzJeKGM2PDwxfGM3Pj4+MzEpO2w9YzNeKGM3PDwxfGM2Pj4+MzEpO3NbNF1ePWg7c1s1XV49bDtzWzE0XV49aDtzWzE1XV49bDtzWzI0XV49aDtzWzI1XV49bDtzWzM0XV49aDtzWzM1XV49bDtzWzQ0XV49aDtzWzQ1XV49bDtoPWM0XihjODw8MXxjOT4+PjMxKTtsPWM1XihjOTw8MXxjOD4+PjMxKTtzWzZdXj1oO3NbN11ePWw7c1sxNl1ePWg7c1sxN11ePWw7c1syNl1ePWg7c1syN11ePWw7c1szNl1ePWg7c1szN11ePWw7c1s0Nl1ePWg7c1s0N11ePWw7aD1jNl4oYzA8PDF8YzE+Pj4zMSk7bD1jN14oYzE8PDF8YzA+Pj4zMSk7c1s4XV49aDtzWzldXj1sO3NbMThdXj1oO3NbMTldXj1sO3NbMjhdXj1oO3NbMjldXj1sO3NbMzhdXj1oO3NbMzldXj1sO3NbNDhdXj1oO3NbNDldXj1sO2IwPXNbMF07YjE9c1sxXTtiMzI9c1sxMV08PDR8c1sxMF0+Pj4yODtiMzM9c1sxMF08PDR8c1sxMV0+Pj4yODtiMTQ9c1syMF08PDN8c1syMV0+Pj4yOTtiMTU9c1syMV08PDN8c1syMF0+Pj4yOTtiNDY9c1szMV08PDl8c1szMF0+Pj4yMztiNDc9c1szMF08PDl8c1szMV0+Pj4yMztiMjg9c1s0MF08PDE4fHNbNDFdPj4+MTQ7YjI5PXNbNDFdPDwxOHxzWzQwXT4+PjE0O2IyMD1zWzJdPDwxfHNbM10+Pj4zMTtiMjE9c1szXTw8MXxzWzJdPj4+MzE7YjI9c1sxM108PDEyfHNbMTJdPj4+MjA7YjM9c1sxMl08PDEyfHNbMTNdPj4+MjA7YjM0PXNbMjJdPDwxMHxzWzIzXT4+PjIyO2IzNT1zWzIzXTw8MTB8c1syMl0+Pj4yMjtiMTY9c1szM108PDEzfHNbMzJdPj4+MTk7YjE3PXNbMzJdPDwxM3xzWzMzXT4+PjE5O2I0OD1zWzQyXTw8MnxzWzQzXT4+PjMwO2I0OT1zWzQzXTw8MnxzWzQyXT4+PjMwO2I0MD1zWzVdPDwzMHxzWzRdPj4+MjtiNDE9c1s0XTw8MzB8c1s1XT4+PjI7YjIyPXNbMTRdPDw2fHNbMTVdPj4+MjY7YjIzPXNbMTVdPDw2fHNbMTRdPj4+MjY7YjQ9c1syNV08PDExfHNbMjRdPj4+MjE7YjU9c1syNF08PDExfHNbMjVdPj4+MjE7YjM2PXNbMzRdPDwxNXxzWzM1XT4+PjE3O2IzNz1zWzM1XTw8MTV8c1szNF0+Pj4xNztiMTg9c1s0NV08PDI5fHNbNDRdPj4+MztiMTk9c1s0NF08PDI5fHNbNDVdPj4+MztiMTA9c1s2XTw8Mjh8c1s3XT4+PjQ7YjExPXNbN108PDI4fHNbNl0+Pj40O2I0Mj1zWzE3XTw8MjN8c1sxNl0+Pj45O2I0Mz1zWzE2XTw8MjN8c1sxN10+Pj45O2IyND1zWzI2XTw8MjV8c1syN10+Pj43O2IyNT1zWzI3XTw8MjV8c1syNl0+Pj43O2I2PXNbMzZdPDwyMXxzWzM3XT4+PjExO2I3PXNbMzddPDwyMXxzWzM2XT4+PjExO2IzOD1zWzQ3XTw8MjR8c1s0Nl0+Pj44O2IzOT1zWzQ2XTw8MjR8c1s0N10+Pj44O2IzMD1zWzhdPDwyN3xzWzldPj4+NTtiMzE9c1s5XTw8Mjd8c1s4XT4+PjU7YjEyPXNbMThdPDwyMHxzWzE5XT4+PjEyO2IxMz1zWzE5XTw8MjB8c1sxOF0+Pj4xMjtiNDQ9c1syOV08PDd8c1syOF0+Pj4yNTtiNDU9c1syOF08PDd8c1syOV0+Pj4yNTtiMjY9c1szOF08PDh8c1szOV0+Pj4yNDtiMjc9c1szOV08PDh8c1szOF0+Pj4yNDtiOD1zWzQ4XTw8MTR8c1s0OV0+Pj4xODtiOT1zWzQ5XTw8MTR8c1s0OF0+Pj4xODtzWzBdPWIwXn5iMiZiNDtzWzFdPWIxXn5iMyZiNTtzWzEwXT1iMTBefmIxMiZiMTQ7c1sxMV09YjExXn5iMTMmYjE1O3NbMjBdPWIyMF5+YjIyJmIyNDtzWzIxXT1iMjFefmIyMyZiMjU7c1szMF09YjMwXn5iMzImYjM0O3NbMzFdPWIzMV5+YjMzJmIzNTtzWzQwXT1iNDBefmI0MiZiNDQ7c1s0MV09YjQxXn5iNDMmYjQ1O3NbMl09YjJefmI0JmI2O3NbM109YjNefmI1JmI3O3NbMTJdPWIxMl5+YjE0JmIxNjtzWzEzXT1iMTNefmIxNSZiMTc7c1syMl09YjIyXn5iMjQmYjI2O3NbMjNdPWIyM15+YjI1JmIyNztzWzMyXT1iMzJefmIzNCZiMzY7c1szM109YjMzXn5iMzUmYjM3O3NbNDJdPWI0Ml5+YjQ0JmI0NjtzWzQzXT1iNDNefmI0NSZiNDc7c1s0XT1iNF5+YjYmYjg7c1s1XT1iNV5+YjcmYjk7c1sxNF09YjE0Xn5iMTYmYjE4O3NbMTVdPWIxNV5+YjE3JmIxOTtzWzI0XT1iMjRefmIyNiZiMjg7c1syNV09YjI1Xn5iMjcmYjI5O3NbMzRdPWIzNF5+YjM2JmIzODtzWzM1XT1iMzVefmIzNyZiMzk7c1s0NF09YjQ0Xn5iNDYmYjQ4O3NbNDVdPWI0NV5+YjQ3JmI0OTtzWzZdPWI2Xn5iOCZiMDtzWzddPWI3Xn5iOSZiMTtzWzE2XT1iMTZefmIxOCZiMTA7c1sxN109YjE3Xn5iMTkmYjExO3NbMjZdPWIyNl5+YjI4JmIyMDtzWzI3XT1iMjdefmIyOSZiMjE7c1szNl09YjM2Xn5iMzgmYjMwO3NbMzddPWIzN15+YjM5JmIzMTtzWzQ2XT1iNDZefmI0OCZiNDA7c1s0N109YjQ3Xn5iNDkmYjQxO3NbOF09YjhefmIwJmIyO3NbOV09YjlefmIxJmIzO3NbMThdPWIxOF5+YjEwJmIxMjtzWzE5XT1iMTlefmIxMSZiMTM7c1syOF09YjI4Xn5iMjAmYjIyO3NbMjldPWIyOV5+YjIxJmIyMztzWzM4XT1iMzhefmIzMCZiMzI7c1szOV09YjM5Xn5iMzEmYjMzO3NbNDhdPWI0OF5+YjQwJmI0MjtzWzQ5XT1iNDlefmI0MSZiNDM7c1swXV49UkNbbl07c1sxXV49UkNbbisxXX19O2lmKENPTU1PTl9KUyl7bW9kdWxlLmV4cG9ydHM9bWV0aG9kc31lbHNle2Zvcih2YXIgaT0wO2k8bWV0aG9kTmFtZXMubGVuZ3RoOysraSl7cm9vdFttZXRob2ROYW1lc1tpXV09bWV0aG9kc1ttZXRob2ROYW1lc1tpXV19fX0pKCl9KTtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBrZWNjYWsyNTYoZGF0YSl7cmV0dXJuXCIweFwiK3NoYTMua2VjY2FrXzI1NihhcnJheWlmeShkYXRhKSl9Y29uc3QgdmVyc2lvbiQ1PVwicmxwLzUuMS4wXCI7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJDY9bmV3IExvZ2dlcih2ZXJzaW9uJDUpO2Z1bmN0aW9uIGFycmF5aWZ5SW50ZWdlcih2YWx1ZSl7Y29uc3QgcmVzdWx0PVtdO3doaWxlKHZhbHVlKXtyZXN1bHQudW5zaGlmdCh2YWx1ZSYyNTUpO3ZhbHVlPj49OH1yZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIHVuYXJyYXlpZnlJbnRlZ2VyKGRhdGEsb2Zmc2V0LGxlbmd0aCl7bGV0IHJlc3VsdD0wO2ZvcihsZXQgaT0wO2k8bGVuZ3RoO2krKyl7cmVzdWx0PXJlc3VsdCoyNTYrZGF0YVtvZmZzZXQraV19cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiBfZW5jb2RlKG9iamVjdCl7aWYoQXJyYXkuaXNBcnJheShvYmplY3QpKXtsZXQgcGF5bG9hZD1bXTtvYmplY3QuZm9yRWFjaChmdW5jdGlvbihjaGlsZCl7cGF5bG9hZD1wYXlsb2FkLmNvbmNhdChfZW5jb2RlKGNoaWxkKSl9KTtpZihwYXlsb2FkLmxlbmd0aDw9NTUpe3BheWxvYWQudW5zaGlmdCgxOTIrcGF5bG9hZC5sZW5ndGgpO3JldHVybiBwYXlsb2FkfWNvbnN0IGxlbmd0aD1hcnJheWlmeUludGVnZXIocGF5bG9hZC5sZW5ndGgpO2xlbmd0aC51bnNoaWZ0KDI0NytsZW5ndGgubGVuZ3RoKTtyZXR1cm4gbGVuZ3RoLmNvbmNhdChwYXlsb2FkKX1pZighaXNCeXRlc0xpa2Uob2JqZWN0KSl7bG9nZ2VyJDYudGhyb3dBcmd1bWVudEVycm9yKFwiUkxQIG9iamVjdCBtdXN0IGJlIEJ5dGVzTGlrZVwiLFwib2JqZWN0XCIsb2JqZWN0KX1jb25zdCBkYXRhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycmF5aWZ5KG9iamVjdCkpO2lmKGRhdGEubGVuZ3RoPT09MSYmZGF0YVswXTw9MTI3KXtyZXR1cm4gZGF0YX1lbHNlIGlmKGRhdGEubGVuZ3RoPD01NSl7ZGF0YS51bnNoaWZ0KDEyOCtkYXRhLmxlbmd0aCk7cmV0dXJuIGRhdGF9Y29uc3QgbGVuZ3RoPWFycmF5aWZ5SW50ZWdlcihkYXRhLmxlbmd0aCk7bGVuZ3RoLnVuc2hpZnQoMTgzK2xlbmd0aC5sZW5ndGgpO3JldHVybiBsZW5ndGguY29uY2F0KGRhdGEpfWZ1bmN0aW9uIGVuY29kZShvYmplY3Qpe3JldHVybiBoZXhsaWZ5KF9lbmNvZGUob2JqZWN0KSl9ZnVuY3Rpb24gX2RlY29kZUNoaWxkcmVuKGRhdGEsb2Zmc2V0LGNoaWxkT2Zmc2V0LGxlbmd0aCl7Y29uc3QgcmVzdWx0PVtdO3doaWxlKGNoaWxkT2Zmc2V0PG9mZnNldCsxK2xlbmd0aCl7Y29uc3QgZGVjb2RlZD1fZGVjb2RlKGRhdGEsY2hpbGRPZmZzZXQpO3Jlc3VsdC5wdXNoKGRlY29kZWQucmVzdWx0KTtjaGlsZE9mZnNldCs9ZGVjb2RlZC5jb25zdW1lZDtpZihjaGlsZE9mZnNldD5vZmZzZXQrMStsZW5ndGgpe2xvZ2dlciQ2LnRocm93RXJyb3IoXCJjaGlsZCBkYXRhIHRvbyBzaG9ydFwiLExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4se30pfX1yZXR1cm57Y29uc3VtZWQ6MStsZW5ndGgscmVzdWx0OnJlc3VsdH19ZnVuY3Rpb24gX2RlY29kZShkYXRhLG9mZnNldCl7aWYoZGF0YS5sZW5ndGg9PT0wKXtsb2dnZXIkNi50aHJvd0Vycm9yKFwiZGF0YSB0b28gc2hvcnRcIixMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLHt9KX1pZihkYXRhW29mZnNldF0+PTI0OCl7Y29uc3QgbGVuZ3RoTGVuZ3RoPWRhdGFbb2Zmc2V0XS0yNDc7aWYob2Zmc2V0KzErbGVuZ3RoTGVuZ3RoPmRhdGEubGVuZ3RoKXtsb2dnZXIkNi50aHJvd0Vycm9yKFwiZGF0YSBzaG9ydCBzZWdtZW50IHRvbyBzaG9ydFwiLExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4se30pfWNvbnN0IGxlbmd0aD11bmFycmF5aWZ5SW50ZWdlcihkYXRhLG9mZnNldCsxLGxlbmd0aExlbmd0aCk7aWYob2Zmc2V0KzErbGVuZ3RoTGVuZ3RoK2xlbmd0aD5kYXRhLmxlbmd0aCl7bG9nZ2VyJDYudGhyb3dFcnJvcihcImRhdGEgbG9uZyBzZWdtZW50IHRvbyBzaG9ydFwiLExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4se30pfXJldHVybiBfZGVjb2RlQ2hpbGRyZW4oZGF0YSxvZmZzZXQsb2Zmc2V0KzErbGVuZ3RoTGVuZ3RoLGxlbmd0aExlbmd0aCtsZW5ndGgpfWVsc2UgaWYoZGF0YVtvZmZzZXRdPj0xOTIpe2NvbnN0IGxlbmd0aD1kYXRhW29mZnNldF0tMTkyO2lmKG9mZnNldCsxK2xlbmd0aD5kYXRhLmxlbmd0aCl7bG9nZ2VyJDYudGhyb3dFcnJvcihcImRhdGEgYXJyYXkgdG9vIHNob3J0XCIsTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTix7fSl9cmV0dXJuIF9kZWNvZGVDaGlsZHJlbihkYXRhLG9mZnNldCxvZmZzZXQrMSxsZW5ndGgpfWVsc2UgaWYoZGF0YVtvZmZzZXRdPj0xODQpe2NvbnN0IGxlbmd0aExlbmd0aD1kYXRhW29mZnNldF0tMTgzO2lmKG9mZnNldCsxK2xlbmd0aExlbmd0aD5kYXRhLmxlbmd0aCl7bG9nZ2VyJDYudGhyb3dFcnJvcihcImRhdGEgYXJyYXkgdG9vIHNob3J0XCIsTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTix7fSl9Y29uc3QgbGVuZ3RoPXVuYXJyYXlpZnlJbnRlZ2VyKGRhdGEsb2Zmc2V0KzEsbGVuZ3RoTGVuZ3RoKTtpZihvZmZzZXQrMStsZW5ndGhMZW5ndGgrbGVuZ3RoPmRhdGEubGVuZ3RoKXtsb2dnZXIkNi50aHJvd0Vycm9yKFwiZGF0YSBhcnJheSB0b28gc2hvcnRcIixMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLHt9KX1jb25zdCByZXN1bHQ9aGV4bGlmeShkYXRhLnNsaWNlKG9mZnNldCsxK2xlbmd0aExlbmd0aCxvZmZzZXQrMStsZW5ndGhMZW5ndGgrbGVuZ3RoKSk7cmV0dXJue2NvbnN1bWVkOjErbGVuZ3RoTGVuZ3RoK2xlbmd0aCxyZXN1bHQ6cmVzdWx0fX1lbHNlIGlmKGRhdGFbb2Zmc2V0XT49MTI4KXtjb25zdCBsZW5ndGg9ZGF0YVtvZmZzZXRdLTEyODtpZihvZmZzZXQrMStsZW5ndGg+ZGF0YS5sZW5ndGgpe2xvZ2dlciQ2LnRocm93RXJyb3IoXCJkYXRhIHRvbyBzaG9ydFwiLExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4se30pfWNvbnN0IHJlc3VsdD1oZXhsaWZ5KGRhdGEuc2xpY2Uob2Zmc2V0KzEsb2Zmc2V0KzErbGVuZ3RoKSk7cmV0dXJue2NvbnN1bWVkOjErbGVuZ3RoLHJlc3VsdDpyZXN1bHR9fXJldHVybntjb25zdW1lZDoxLHJlc3VsdDpoZXhsaWZ5KGRhdGFbb2Zmc2V0XSl9fWZ1bmN0aW9uIGRlY29kZShkYXRhKXtjb25zdCBieXRlcz1hcnJheWlmeShkYXRhKTtjb25zdCBkZWNvZGVkPV9kZWNvZGUoYnl0ZXMsMCk7aWYoZGVjb2RlZC5jb25zdW1lZCE9PWJ5dGVzLmxlbmd0aCl7bG9nZ2VyJDYudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBybHAgZGF0YVwiLFwiZGF0YVwiLGRhdGEpfXJldHVybiBkZWNvZGVkLnJlc3VsdH12YXIgaW5kZXg9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZW5jb2RlOmVuY29kZSxkZWNvZGU6ZGVjb2RlfSk7Y29uc3QgdmVyc2lvbiQ2PVwiYWRkcmVzcy81LjEuMFwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciQ3PW5ldyBMb2dnZXIodmVyc2lvbiQ2KTtmdW5jdGlvbiBnZXRDaGVja3N1bUFkZHJlc3MoYWRkcmVzcyl7aWYoIWlzSGV4U3RyaW5nKGFkZHJlc3MsMjApKXtsb2dnZXIkNy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFkZHJlc3NcIixcImFkZHJlc3NcIixhZGRyZXNzKX1hZGRyZXNzPWFkZHJlc3MudG9Mb3dlckNhc2UoKTtjb25zdCBjaGFycz1hZGRyZXNzLnN1YnN0cmluZygyKS5zcGxpdChcIlwiKTtjb25zdCBleHBhbmRlZD1uZXcgVWludDhBcnJheSg0MCk7Zm9yKGxldCBpPTA7aTw0MDtpKyspe2V4cGFuZGVkW2ldPWNoYXJzW2ldLmNoYXJDb2RlQXQoMCl9Y29uc3QgaGFzaGVkPWFycmF5aWZ5KGtlY2NhazI1NihleHBhbmRlZCkpO2ZvcihsZXQgaT0wO2k8NDA7aSs9Mil7aWYoaGFzaGVkW2k+PjFdPj40Pj04KXtjaGFyc1tpXT1jaGFyc1tpXS50b1VwcGVyQ2FzZSgpfWlmKChoYXNoZWRbaT4+MV0mMTUpPj04KXtjaGFyc1tpKzFdPWNoYXJzW2krMV0udG9VcHBlckNhc2UoKX19cmV0dXJuXCIweFwiK2NoYXJzLmpvaW4oXCJcIil9Y29uc3QgTUFYX1NBRkVfSU5URUdFUj05MDA3MTk5MjU0NzQwOTkxO2Z1bmN0aW9uIGxvZzEwKHgpe2lmKE1hdGgubG9nMTApe3JldHVybiBNYXRoLmxvZzEwKHgpfXJldHVybiBNYXRoLmxvZyh4KS9NYXRoLkxOMTB9Y29uc3QgaWJhbkxvb2t1cD17fTtmb3IobGV0IGk9MDtpPDEwO2krKyl7aWJhbkxvb2t1cFtTdHJpbmcoaSldPVN0cmluZyhpKX1mb3IobGV0IGk9MDtpPDI2O2krKyl7aWJhbkxvb2t1cFtTdHJpbmcuZnJvbUNoYXJDb2RlKDY1K2kpXT1TdHJpbmcoMTAraSl9Y29uc3Qgc2FmZURpZ2l0cz1NYXRoLmZsb29yKGxvZzEwKE1BWF9TQUZFX0lOVEVHRVIpKTtmdW5jdGlvbiBpYmFuQ2hlY2tzdW0oYWRkcmVzcyl7YWRkcmVzcz1hZGRyZXNzLnRvVXBwZXJDYXNlKCk7YWRkcmVzcz1hZGRyZXNzLnN1YnN0cmluZyg0KSthZGRyZXNzLnN1YnN0cmluZygwLDIpK1wiMDBcIjtsZXQgZXhwYW5kZWQ9YWRkcmVzcy5zcGxpdChcIlwiKS5tYXAoYz0+e3JldHVybiBpYmFuTG9va3VwW2NdfSkuam9pbihcIlwiKTt3aGlsZShleHBhbmRlZC5sZW5ndGg+PXNhZmVEaWdpdHMpe2xldCBibG9jaz1leHBhbmRlZC5zdWJzdHJpbmcoMCxzYWZlRGlnaXRzKTtleHBhbmRlZD1wYXJzZUludChibG9jaywxMCklOTcrZXhwYW5kZWQuc3Vic3RyaW5nKGJsb2NrLmxlbmd0aCl9bGV0IGNoZWNrc3VtPVN0cmluZyg5OC1wYXJzZUludChleHBhbmRlZCwxMCklOTcpO3doaWxlKGNoZWNrc3VtLmxlbmd0aDwyKXtjaGVja3N1bT1cIjBcIitjaGVja3N1bX1yZXR1cm4gY2hlY2tzdW19ZnVuY3Rpb24gZ2V0QWRkcmVzcyhhZGRyZXNzKXtsZXQgcmVzdWx0PW51bGw7aWYodHlwZW9mIGFkZHJlc3MhPT1cInN0cmluZ1wiKXtsb2dnZXIkNy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFkZHJlc3NcIixcImFkZHJlc3NcIixhZGRyZXNzKX1pZihhZGRyZXNzLm1hdGNoKC9eKDB4KT9bMC05YS1mQS1GXXs0MH0kLykpe2lmKGFkZHJlc3Muc3Vic3RyaW5nKDAsMikhPT1cIjB4XCIpe2FkZHJlc3M9XCIweFwiK2FkZHJlc3N9cmVzdWx0PWdldENoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKTtpZihhZGRyZXNzLm1hdGNoKC8oW0EtRl0uKlthLWZdKXwoW2EtZl0uKltBLUZdKS8pJiZyZXN1bHQhPT1hZGRyZXNzKXtsb2dnZXIkNy50aHJvd0FyZ3VtZW50RXJyb3IoXCJiYWQgYWRkcmVzcyBjaGVja3N1bVwiLFwiYWRkcmVzc1wiLGFkZHJlc3MpfX1lbHNlIGlmKGFkZHJlc3MubWF0Y2goL15YRVswLTldezJ9WzAtOUEtWmEtel17MzAsMzF9JC8pKXtpZihhZGRyZXNzLnN1YnN0cmluZygyLDQpIT09aWJhbkNoZWNrc3VtKGFkZHJlc3MpKXtsb2dnZXIkNy50aHJvd0FyZ3VtZW50RXJyb3IoXCJiYWQgaWNhcCBjaGVja3N1bVwiLFwiYWRkcmVzc1wiLGFkZHJlc3MpfXJlc3VsdD1fYmFzZTM2VG8xNihhZGRyZXNzLnN1YnN0cmluZyg0KSk7d2hpbGUocmVzdWx0Lmxlbmd0aDw0MCl7cmVzdWx0PVwiMFwiK3Jlc3VsdH1yZXN1bHQ9Z2V0Q2hlY2tzdW1BZGRyZXNzKFwiMHhcIityZXN1bHQpfWVsc2V7bG9nZ2VyJDcudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhZGRyZXNzXCIsXCJhZGRyZXNzXCIsYWRkcmVzcyl9cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiBpc0FkZHJlc3MoYWRkcmVzcyl7dHJ5e2dldEFkZHJlc3MoYWRkcmVzcyk7cmV0dXJuIHRydWV9Y2F0Y2goZXJyb3Ipe31yZXR1cm4gZmFsc2V9ZnVuY3Rpb24gZ2V0SWNhcEFkZHJlc3MoYWRkcmVzcyl7bGV0IGJhc2UzNj1fYmFzZTE2VG8zNihnZXRBZGRyZXNzKGFkZHJlc3MpLnN1YnN0cmluZygyKSkudG9VcHBlckNhc2UoKTt3aGlsZShiYXNlMzYubGVuZ3RoPDMwKXtiYXNlMzY9XCIwXCIrYmFzZTM2fXJldHVyblwiWEVcIitpYmFuQ2hlY2tzdW0oXCJYRTAwXCIrYmFzZTM2KStiYXNlMzZ9ZnVuY3Rpb24gZ2V0Q29udHJhY3RBZGRyZXNzKHRyYW5zYWN0aW9uKXtsZXQgZnJvbT1udWxsO3RyeXtmcm9tPWdldEFkZHJlc3ModHJhbnNhY3Rpb24uZnJvbSl9Y2F0Y2goZXJyb3Ipe2xvZ2dlciQ3LnRocm93QXJndW1lbnRFcnJvcihcIm1pc3NpbmcgZnJvbSBhZGRyZXNzXCIsXCJ0cmFuc2FjdGlvblwiLHRyYW5zYWN0aW9uKX1jb25zdCBub25jZT1zdHJpcFplcm9zKGFycmF5aWZ5KEJpZ051bWJlci5mcm9tKHRyYW5zYWN0aW9uLm5vbmNlKS50b0hleFN0cmluZygpKSk7cmV0dXJuIGdldEFkZHJlc3MoaGV4RGF0YVNsaWNlKGtlY2NhazI1NihlbmNvZGUoW2Zyb20sbm9uY2VdKSksMTIpKX1mdW5jdGlvbiBnZXRDcmVhdGUyQWRkcmVzcyhmcm9tLHNhbHQsaW5pdENvZGVIYXNoKXtpZihoZXhEYXRhTGVuZ3RoKHNhbHQpIT09MzIpe2xvZ2dlciQ3LnRocm93QXJndW1lbnRFcnJvcihcInNhbHQgbXVzdCBiZSAzMiBieXRlc1wiLFwic2FsdFwiLHNhbHQpfWlmKGhleERhdGFMZW5ndGgoaW5pdENvZGVIYXNoKSE9PTMyKXtsb2dnZXIkNy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbml0Q29kZUhhc2ggbXVzdCBiZSAzMiBieXRlc1wiLFwiaW5pdENvZGVIYXNoXCIsaW5pdENvZGVIYXNoKX1yZXR1cm4gZ2V0QWRkcmVzcyhoZXhEYXRhU2xpY2Uoa2VjY2FrMjU2KGNvbmNhdChbXCIweGZmXCIsZ2V0QWRkcmVzcyhmcm9tKSxzYWx0LGluaXRDb2RlSGFzaF0pKSwxMikpfVwidXNlIHN0cmljdFwiO2NsYXNzIEFkZHJlc3NDb2RlciBleHRlbmRzIENvZGVye2NvbnN0cnVjdG9yKGxvY2FsTmFtZSl7c3VwZXIoXCJhZGRyZXNzXCIsXCJhZGRyZXNzXCIsbG9jYWxOYW1lLGZhbHNlKX1kZWZhdWx0VmFsdWUoKXtyZXR1cm5cIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwifWVuY29kZSh3cml0ZXIsdmFsdWUpe3RyeXtnZXRBZGRyZXNzKHZhbHVlKX1jYXRjaChlcnJvcil7dGhpcy5fdGhyb3dFcnJvcihlcnJvci5tZXNzYWdlLHZhbHVlKX1yZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUpfWRlY29kZShyZWFkZXIpe3JldHVybiBnZXRBZGRyZXNzKGhleFplcm9QYWQocmVhZGVyLnJlYWRWYWx1ZSgpLnRvSGV4U3RyaW5nKCksMjApKX19XCJ1c2Ugc3RyaWN0XCI7Y2xhc3MgQW5vbnltb3VzQ29kZXIgZXh0ZW5kcyBDb2Rlcntjb25zdHJ1Y3Rvcihjb2Rlcil7c3VwZXIoY29kZXIubmFtZSxjb2Rlci50eXBlLHVuZGVmaW5lZCxjb2Rlci5keW5hbWljKTt0aGlzLmNvZGVyPWNvZGVyfWRlZmF1bHRWYWx1ZSgpe3JldHVybiB0aGlzLmNvZGVyLmRlZmF1bHRWYWx1ZSgpfWVuY29kZSh3cml0ZXIsdmFsdWUpe3JldHVybiB0aGlzLmNvZGVyLmVuY29kZSh3cml0ZXIsdmFsdWUpfWRlY29kZShyZWFkZXIpe3JldHVybiB0aGlzLmNvZGVyLmRlY29kZShyZWFkZXIpfX1cInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkOD1uZXcgTG9nZ2VyKHZlcnNpb24kNCk7ZnVuY3Rpb24gcGFjayh3cml0ZXIsY29kZXJzLHZhbHVlcyl7bGV0IGFycmF5VmFsdWVzPW51bGw7aWYoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKXthcnJheVZhbHVlcz12YWx1ZXN9ZWxzZSBpZih2YWx1ZXMmJnR5cGVvZiB2YWx1ZXM9PT1cIm9iamVjdFwiKXtsZXQgdW5pcXVlPXt9O2FycmF5VmFsdWVzPWNvZGVycy5tYXAoY29kZXI9Pntjb25zdCBuYW1lPWNvZGVyLmxvY2FsTmFtZTtpZighbmFtZSl7bG9nZ2VyJDgudGhyb3dFcnJvcihcImNhbm5vdCBlbmNvZGUgb2JqZWN0IGZvciBzaWduYXR1cmUgd2l0aCBtaXNzaW5nIG5hbWVzXCIsTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULHthcmd1bWVudDpcInZhbHVlc1wiLGNvZGVyOmNvZGVyLHZhbHVlOnZhbHVlc30pfWlmKHVuaXF1ZVtuYW1lXSl7bG9nZ2VyJDgudGhyb3dFcnJvcihcImNhbm5vdCBlbmNvZGUgb2JqZWN0IGZvciBzaWduYXR1cmUgd2l0aCBkdXBsaWNhdGUgbmFtZXNcIixMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQse2FyZ3VtZW50OlwidmFsdWVzXCIsY29kZXI6Y29kZXIsdmFsdWU6dmFsdWVzfSl9dW5pcXVlW25hbWVdPXRydWU7cmV0dXJuIHZhbHVlc1tuYW1lXX0pfWVsc2V7bG9nZ2VyJDgudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB0dXBsZSB2YWx1ZVwiLFwidHVwbGVcIix2YWx1ZXMpfWlmKGNvZGVycy5sZW5ndGghPT1hcnJheVZhbHVlcy5sZW5ndGgpe2xvZ2dlciQ4LnRocm93QXJndW1lbnRFcnJvcihcInR5cGVzL3ZhbHVlIGxlbmd0aCBtaXNtYXRjaFwiLFwidHVwbGVcIix2YWx1ZXMpfWxldCBzdGF0aWNXcml0ZXI9bmV3IFdyaXRlcih3cml0ZXIud29yZFNpemUpO2xldCBkeW5hbWljV3JpdGVyPW5ldyBXcml0ZXIod3JpdGVyLndvcmRTaXplKTtsZXQgdXBkYXRlRnVuY3M9W107Y29kZXJzLmZvckVhY2goKGNvZGVyLGluZGV4KT0+e2xldCB2YWx1ZT1hcnJheVZhbHVlc1tpbmRleF07aWYoY29kZXIuZHluYW1pYyl7bGV0IGR5bmFtaWNPZmZzZXQ9ZHluYW1pY1dyaXRlci5sZW5ndGg7Y29kZXIuZW5jb2RlKGR5bmFtaWNXcml0ZXIsdmFsdWUpO2xldCB1cGRhdGVGdW5jPXN0YXRpY1dyaXRlci53cml0ZVVwZGF0YWJsZVZhbHVlKCk7dXBkYXRlRnVuY3MucHVzaChiYXNlT2Zmc2V0PT57dXBkYXRlRnVuYyhiYXNlT2Zmc2V0K2R5bmFtaWNPZmZzZXQpfSl9ZWxzZXtjb2Rlci5lbmNvZGUoc3RhdGljV3JpdGVyLHZhbHVlKX19KTt1cGRhdGVGdW5jcy5mb3JFYWNoKGZ1bmM9PntmdW5jKHN0YXRpY1dyaXRlci5sZW5ndGgpfSk7bGV0IGxlbmd0aD13cml0ZXIuYXBwZW5kV3JpdGVyKHN0YXRpY1dyaXRlcik7bGVuZ3RoKz13cml0ZXIuYXBwZW5kV3JpdGVyKGR5bmFtaWNXcml0ZXIpO3JldHVybiBsZW5ndGh9ZnVuY3Rpb24gdW5wYWNrKHJlYWRlcixjb2RlcnMpe2xldCB2YWx1ZXM9W107bGV0IGJhc2VSZWFkZXI9cmVhZGVyLnN1YlJlYWRlcigwKTtjb2RlcnMuZm9yRWFjaChjb2Rlcj0+e2xldCB2YWx1ZT1udWxsO2lmKGNvZGVyLmR5bmFtaWMpe2xldCBvZmZzZXQ9cmVhZGVyLnJlYWRWYWx1ZSgpO2xldCBvZmZzZXRSZWFkZXI9YmFzZVJlYWRlci5zdWJSZWFkZXIob2Zmc2V0LnRvTnVtYmVyKCkpO3RyeXt2YWx1ZT1jb2Rlci5kZWNvZGUob2Zmc2V0UmVhZGVyKX1jYXRjaChlcnJvcil7aWYoZXJyb3IuY29kZT09PUxvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4pe3Rocm93IGVycm9yfXZhbHVlPWVycm9yO3ZhbHVlLmJhc2VUeXBlPWNvZGVyLm5hbWU7dmFsdWUubmFtZT1jb2Rlci5sb2NhbE5hbWU7dmFsdWUudHlwZT1jb2Rlci50eXBlfX1lbHNle3RyeXt2YWx1ZT1jb2Rlci5kZWNvZGUocmVhZGVyKX1jYXRjaChlcnJvcil7aWYoZXJyb3IuY29kZT09PUxvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4pe3Rocm93IGVycm9yfXZhbHVlPWVycm9yO3ZhbHVlLmJhc2VUeXBlPWNvZGVyLm5hbWU7dmFsdWUubmFtZT1jb2Rlci5sb2NhbE5hbWU7dmFsdWUudHlwZT1jb2Rlci50eXBlfX1pZih2YWx1ZSE9dW5kZWZpbmVkKXt2YWx1ZXMucHVzaCh2YWx1ZSl9fSk7Y29uc3QgdW5pcXVlTmFtZXM9Y29kZXJzLnJlZHVjZSgoYWNjdW0sY29kZXIpPT57Y29uc3QgbmFtZT1jb2Rlci5sb2NhbE5hbWU7aWYobmFtZSl7aWYoIWFjY3VtW25hbWVdKXthY2N1bVtuYW1lXT0wfWFjY3VtW25hbWVdKyt9cmV0dXJuIGFjY3VtfSx7fSk7Y29kZXJzLmZvckVhY2goKGNvZGVyLGluZGV4KT0+e2xldCBuYW1lPWNvZGVyLmxvY2FsTmFtZTtpZighbmFtZXx8dW5pcXVlTmFtZXNbbmFtZV0hPT0xKXtyZXR1cm59aWYobmFtZT09PVwibGVuZ3RoXCIpe25hbWU9XCJfbGVuZ3RoXCJ9aWYodmFsdWVzW25hbWVdIT1udWxsKXtyZXR1cm59Y29uc3QgdmFsdWU9dmFsdWVzW2luZGV4XTtpZih2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsdWVzLG5hbWUse2dldDooKT0+e3Rocm93IHZhbHVlfX0pfWVsc2V7dmFsdWVzW25hbWVdPXZhbHVlfX0pO2ZvcihsZXQgaT0wO2k8dmFsdWVzLmxlbmd0aDtpKyspe2NvbnN0IHZhbHVlPXZhbHVlc1tpXTtpZih2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsdWVzLGkse2dldDooKT0+e3Rocm93IHZhbHVlfX0pfX1yZXR1cm4gT2JqZWN0LmZyZWV6ZSh2YWx1ZXMpfWNsYXNzIEFycmF5Q29kZXIgZXh0ZW5kcyBDb2Rlcntjb25zdHJ1Y3Rvcihjb2RlcixsZW5ndGgsbG9jYWxOYW1lKXtjb25zdCB0eXBlPWNvZGVyLnR5cGUrXCJbXCIrKGxlbmd0aD49MD9sZW5ndGg6XCJcIikrXCJdXCI7Y29uc3QgZHluYW1pYz1sZW5ndGg9PT0tMXx8Y29kZXIuZHluYW1pYztzdXBlcihcImFycmF5XCIsdHlwZSxsb2NhbE5hbWUsZHluYW1pYyk7dGhpcy5jb2Rlcj1jb2Rlcjt0aGlzLmxlbmd0aD1sZW5ndGh9ZGVmYXVsdFZhbHVlKCl7Y29uc3QgZGVmYXVsdENoaWxkPXRoaXMuY29kZXIuZGVmYXVsdFZhbHVlKCk7Y29uc3QgcmVzdWx0PVtdO2ZvcihsZXQgaT0wO2k8dGhpcy5sZW5ndGg7aSsrKXtyZXN1bHQucHVzaChkZWZhdWx0Q2hpbGQpfXJldHVybiByZXN1bHR9ZW5jb2RlKHdyaXRlcix2YWx1ZSl7aWYoIUFycmF5LmlzQXJyYXkodmFsdWUpKXt0aGlzLl90aHJvd0Vycm9yKFwiZXhwZWN0ZWQgYXJyYXkgdmFsdWVcIix2YWx1ZSl9bGV0IGNvdW50PXRoaXMubGVuZ3RoO2lmKGNvdW50PT09LTEpe2NvdW50PXZhbHVlLmxlbmd0aDt3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZS5sZW5ndGgpfWxvZ2dlciQ4LmNoZWNrQXJndW1lbnRDb3VudCh2YWx1ZS5sZW5ndGgsY291bnQsXCJjb2RlciBhcnJheVwiKyh0aGlzLmxvY2FsTmFtZT9cIiBcIit0aGlzLmxvY2FsTmFtZTpcIlwiKSk7bGV0IGNvZGVycz1bXTtmb3IobGV0IGk9MDtpPHZhbHVlLmxlbmd0aDtpKyspe2NvZGVycy5wdXNoKHRoaXMuY29kZXIpfXJldHVybiBwYWNrKHdyaXRlcixjb2RlcnMsdmFsdWUpfWRlY29kZShyZWFkZXIpe2xldCBjb3VudD10aGlzLmxlbmd0aDtpZihjb3VudD09PS0xKXtjb3VudD1yZWFkZXIucmVhZFZhbHVlKCkudG9OdW1iZXIoKTtpZihjb3VudCozMj5yZWFkZXIuX2RhdGEubGVuZ3RoKXtsb2dnZXIkOC50aHJvd0Vycm9yKFwiaW5zdWZmaWNpZW50IGRhdGEgbGVuZ3RoXCIsTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTix7bGVuZ3RoOnJlYWRlci5fZGF0YS5sZW5ndGgsY291bnQ6Y291bnR9KX19bGV0IGNvZGVycz1bXTtmb3IobGV0IGk9MDtpPGNvdW50O2krKyl7Y29kZXJzLnB1c2gobmV3IEFub255bW91c0NvZGVyKHRoaXMuY29kZXIpKX1yZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsdW5wYWNrKHJlYWRlcixjb2RlcnMpKX19XCJ1c2Ugc3RyaWN0XCI7Y2xhc3MgQm9vbGVhbkNvZGVyIGV4dGVuZHMgQ29kZXJ7Y29uc3RydWN0b3IobG9jYWxOYW1lKXtzdXBlcihcImJvb2xcIixcImJvb2xcIixsb2NhbE5hbWUsZmFsc2UpfWRlZmF1bHRWYWx1ZSgpe3JldHVybiBmYWxzZX1lbmNvZGUod3JpdGVyLHZhbHVlKXtyZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodmFsdWU/MTowKX1kZWNvZGUocmVhZGVyKXtyZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLnR5cGUsIXJlYWRlci5yZWFkVmFsdWUoKS5pc1plcm8oKSl9fVwidXNlIHN0cmljdFwiO2NsYXNzIER5bmFtaWNCeXRlc0NvZGVyIGV4dGVuZHMgQ29kZXJ7Y29uc3RydWN0b3IodHlwZSxsb2NhbE5hbWUpe3N1cGVyKHR5cGUsdHlwZSxsb2NhbE5hbWUsdHJ1ZSl9ZGVmYXVsdFZhbHVlKCl7cmV0dXJuXCIweFwifWVuY29kZSh3cml0ZXIsdmFsdWUpe3ZhbHVlPWFycmF5aWZ5KHZhbHVlKTtsZXQgbGVuZ3RoPXdyaXRlci53cml0ZVZhbHVlKHZhbHVlLmxlbmd0aCk7bGVuZ3RoKz13cml0ZXIud3JpdGVCeXRlcyh2YWx1ZSk7cmV0dXJuIGxlbmd0aH1kZWNvZGUocmVhZGVyKXtyZXR1cm4gcmVhZGVyLnJlYWRCeXRlcyhyZWFkZXIucmVhZFZhbHVlKCkudG9OdW1iZXIoKSx0cnVlKX19Y2xhc3MgQnl0ZXNDb2RlciBleHRlbmRzIER5bmFtaWNCeXRlc0NvZGVye2NvbnN0cnVjdG9yKGxvY2FsTmFtZSl7c3VwZXIoXCJieXRlc1wiLGxvY2FsTmFtZSl9ZGVjb2RlKHJlYWRlcil7cmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy5uYW1lLGhleGxpZnkoc3VwZXIuZGVjb2RlKHJlYWRlcikpKX19XCJ1c2Ugc3RyaWN0XCI7Y2xhc3MgRml4ZWRCeXRlc0NvZGVyIGV4dGVuZHMgQ29kZXJ7Y29uc3RydWN0b3Ioc2l6ZSxsb2NhbE5hbWUpe2xldCBuYW1lPVwiYnl0ZXNcIitTdHJpbmcoc2l6ZSk7c3VwZXIobmFtZSxuYW1lLGxvY2FsTmFtZSxmYWxzZSk7dGhpcy5zaXplPXNpemV9ZGVmYXVsdFZhbHVlKCl7cmV0dXJuXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIi5zdWJzdHJpbmcoMCwyK3RoaXMuc2l6ZSoyKX1lbmNvZGUod3JpdGVyLHZhbHVlKXtsZXQgZGF0YT1hcnJheWlmeSh2YWx1ZSk7aWYoZGF0YS5sZW5ndGghPT10aGlzLnNpemUpe3RoaXMuX3Rocm93RXJyb3IoXCJpbmNvcnJlY3QgZGF0YSBsZW5ndGhcIix2YWx1ZSl9cmV0dXJuIHdyaXRlci53cml0ZUJ5dGVzKGRhdGEpfWRlY29kZShyZWFkZXIpe3JldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSxoZXhsaWZ5KHJlYWRlci5yZWFkQnl0ZXModGhpcy5zaXplKSkpfX1cInVzZSBzdHJpY3RcIjtjbGFzcyBOdWxsQ29kZXIgZXh0ZW5kcyBDb2Rlcntjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpe3N1cGVyKFwibnVsbFwiLFwiXCIsbG9jYWxOYW1lLGZhbHNlKX1kZWZhdWx0VmFsdWUoKXtyZXR1cm4gbnVsbH1lbmNvZGUod3JpdGVyLHZhbHVlKXtpZih2YWx1ZSE9bnVsbCl7dGhpcy5fdGhyb3dFcnJvcihcIm5vdCBudWxsXCIsdmFsdWUpfXJldHVybiB3cml0ZXIud3JpdGVCeXRlcyhbXSl9ZGVjb2RlKHJlYWRlcil7cmVhZGVyLnJlYWRCeXRlcygwKTtyZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsbnVsbCl9fWNvbnN0IEFkZHJlc3NaZXJvPVwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7Y29uc3QgTmVnYXRpdmVPbmUkMT1CaWdOdW1iZXIuZnJvbSgtMSk7Y29uc3QgWmVybyQxPUJpZ051bWJlci5mcm9tKDApO2NvbnN0IE9uZT1CaWdOdW1iZXIuZnJvbSgxKTtjb25zdCBUd289QmlnTnVtYmVyLmZyb20oMik7Y29uc3QgV2VpUGVyRXRoZXI9QmlnTnVtYmVyLmZyb20oXCIxMDAwMDAwMDAwMDAwMDAwMDAwXCIpO2NvbnN0IE1heFVpbnQyNTY9QmlnTnVtYmVyLmZyb20oXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIik7Y29uc3QgSGFzaFplcm89XCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtjb25zdCBFdGhlclN5bWJvbD1cIlx1MDM5RVwiO1widXNlIHN0cmljdFwiO3ZhciBpbmRleCQxPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLEFkZHJlc3NaZXJvOkFkZHJlc3NaZXJvLE5lZ2F0aXZlT25lOk5lZ2F0aXZlT25lJDEsWmVybzpaZXJvJDEsT25lOk9uZSxUd286VHdvLFdlaVBlckV0aGVyOldlaVBlckV0aGVyLE1heFVpbnQyNTY6TWF4VWludDI1NixIYXNoWmVybzpIYXNoWmVybyxFdGhlclN5bWJvbDpFdGhlclN5bWJvbH0pO1widXNlIHN0cmljdFwiO2NsYXNzIE51bWJlckNvZGVyIGV4dGVuZHMgQ29kZXJ7Y29uc3RydWN0b3Ioc2l6ZSxzaWduZWQsbG9jYWxOYW1lKXtjb25zdCBuYW1lPShzaWduZWQ/XCJpbnRcIjpcInVpbnRcIikrc2l6ZSo4O3N1cGVyKG5hbWUsbmFtZSxsb2NhbE5hbWUsZmFsc2UpO3RoaXMuc2l6ZT1zaXplO3RoaXMuc2lnbmVkPXNpZ25lZH1kZWZhdWx0VmFsdWUoKXtyZXR1cm4gMH1lbmNvZGUod3JpdGVyLHZhbHVlKXtsZXQgdj1CaWdOdW1iZXIuZnJvbSh2YWx1ZSk7bGV0IG1heFVpbnRWYWx1ZT1NYXhVaW50MjU2Lm1hc2sod3JpdGVyLndvcmRTaXplKjgpO2lmKHRoaXMuc2lnbmVkKXtsZXQgYm91bmRzPW1heFVpbnRWYWx1ZS5tYXNrKHRoaXMuc2l6ZSo4LTEpO2lmKHYuZ3QoYm91bmRzKXx8di5sdChib3VuZHMuYWRkKE9uZSkubXVsKE5lZ2F0aXZlT25lJDEpKSl7dGhpcy5fdGhyb3dFcnJvcihcInZhbHVlIG91dC1vZi1ib3VuZHNcIix2YWx1ZSl9fWVsc2UgaWYodi5sdChaZXJvJDEpfHx2Lmd0KG1heFVpbnRWYWx1ZS5tYXNrKHRoaXMuc2l6ZSo4KSkpe3RoaXMuX3Rocm93RXJyb3IoXCJ2YWx1ZSBvdXQtb2YtYm91bmRzXCIsdmFsdWUpfXY9di50b1R3b3ModGhpcy5zaXplKjgpLm1hc2sodGhpcy5zaXplKjgpO2lmKHRoaXMuc2lnbmVkKXt2PXYuZnJvbVR3b3ModGhpcy5zaXplKjgpLnRvVHdvcyg4KndyaXRlci53b3JkU2l6ZSl9cmV0dXJuIHdyaXRlci53cml0ZVZhbHVlKHYpfWRlY29kZShyZWFkZXIpe2xldCB2YWx1ZT1yZWFkZXIucmVhZFZhbHVlKCkubWFzayh0aGlzLnNpemUqOCk7aWYodGhpcy5zaWduZWQpe3ZhbHVlPXZhbHVlLmZyb21Ud29zKHRoaXMuc2l6ZSo4KX1yZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsdmFsdWUpfX1jb25zdCB2ZXJzaW9uJDc9XCJzdHJpbmdzLzUuMS4wXCI7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJDk9bmV3IExvZ2dlcih2ZXJzaW9uJDcpO3ZhciBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm07KGZ1bmN0aW9uKFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybSl7VW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtW1wiY3VycmVudFwiXT1cIlwiO1VuaWNvZGVOb3JtYWxpemF0aW9uRm9ybVtcIk5GQ1wiXT1cIk5GQ1wiO1VuaWNvZGVOb3JtYWxpemF0aW9uRm9ybVtcIk5GRFwiXT1cIk5GRFwiO1VuaWNvZGVOb3JtYWxpemF0aW9uRm9ybVtcIk5GS0NcIl09XCJORktDXCI7VW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtW1wiTkZLRFwiXT1cIk5GS0RcIn0pKFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybXx8KFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybT17fSkpO3ZhciBVdGY4RXJyb3JSZWFzb247KGZ1bmN0aW9uKFV0ZjhFcnJvclJlYXNvbil7VXRmOEVycm9yUmVhc29uW1wiVU5FWFBFQ1RFRF9DT05USU5VRVwiXT1cInVuZXhwZWN0ZWQgY29udGludWF0aW9uIGJ5dGVcIjtVdGY4RXJyb3JSZWFzb25bXCJCQURfUFJFRklYXCJdPVwiYmFkIGNvZGVwb2ludCBwcmVmaXhcIjtVdGY4RXJyb3JSZWFzb25bXCJPVkVSUlVOXCJdPVwic3RyaW5nIG92ZXJydW5cIjtVdGY4RXJyb3JSZWFzb25bXCJNSVNTSU5HX0NPTlRJTlVFXCJdPVwibWlzc2luZyBjb250aW51YXRpb24gYnl0ZVwiO1V0ZjhFcnJvclJlYXNvbltcIk9VVF9PRl9SQU5HRVwiXT1cIm91dCBvZiBVVEYtOCByYW5nZVwiO1V0ZjhFcnJvclJlYXNvbltcIlVURjE2X1NVUlJPR0FURVwiXT1cIlVURi0xNiBzdXJyb2dhdGVcIjtVdGY4RXJyb3JSZWFzb25bXCJPVkVSTE9OR1wiXT1cIm92ZXJsb25nIHJlcHJlc2VudGF0aW9uXCJ9KShVdGY4RXJyb3JSZWFzb258fChVdGY4RXJyb3JSZWFzb249e30pKTtmdW5jdGlvbiBlcnJvckZ1bmMocmVhc29uLG9mZnNldCxieXRlcyxvdXRwdXQsYmFkQ29kZXBvaW50KXtyZXR1cm4gbG9nZ2VyJDkudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIGNvZGVwb2ludCBhdCBvZmZzZXQgJHtvZmZzZXR9OyAke3JlYXNvbn1gLFwiYnl0ZXNcIixieXRlcyl9ZnVuY3Rpb24gaWdub3JlRnVuYyhyZWFzb24sb2Zmc2V0LGJ5dGVzLG91dHB1dCxiYWRDb2RlcG9pbnQpe2lmKHJlYXNvbj09PVV0ZjhFcnJvclJlYXNvbi5CQURfUFJFRklYfHxyZWFzb249PT1VdGY4RXJyb3JSZWFzb24uVU5FWFBFQ1RFRF9DT05USU5VRSl7bGV0IGk9MDtmb3IobGV0IG89b2Zmc2V0KzE7bzxieXRlcy5sZW5ndGg7bysrKXtpZihieXRlc1tvXT4+NiE9PTIpe2JyZWFrfWkrK31yZXR1cm4gaX1pZihyZWFzb249PT1VdGY4RXJyb3JSZWFzb24uT1ZFUlJVTil7cmV0dXJuIGJ5dGVzLmxlbmd0aC1vZmZzZXQtMX1yZXR1cm4gMH1mdW5jdGlvbiByZXBsYWNlRnVuYyhyZWFzb24sb2Zmc2V0LGJ5dGVzLG91dHB1dCxiYWRDb2RlcG9pbnQpe2lmKHJlYXNvbj09PVV0ZjhFcnJvclJlYXNvbi5PVkVSTE9ORyl7b3V0cHV0LnB1c2goYmFkQ29kZXBvaW50KTtyZXR1cm4gMH1vdXRwdXQucHVzaCg2NTUzMyk7cmV0dXJuIGlnbm9yZUZ1bmMocmVhc29uLG9mZnNldCxieXRlcyxvdXRwdXQsYmFkQ29kZXBvaW50KX1jb25zdCBVdGY4RXJyb3JGdW5jcz1PYmplY3QuZnJlZXplKHtlcnJvcjplcnJvckZ1bmMsaWdub3JlOmlnbm9yZUZ1bmMscmVwbGFjZTpyZXBsYWNlRnVuY30pO2Z1bmN0aW9uIGdldFV0ZjhDb2RlUG9pbnRzKGJ5dGVzLG9uRXJyb3Ipe2lmKG9uRXJyb3I9PW51bGwpe29uRXJyb3I9VXRmOEVycm9yRnVuY3MuZXJyb3J9Ynl0ZXM9YXJyYXlpZnkoYnl0ZXMpO2NvbnN0IHJlc3VsdD1bXTtsZXQgaT0wO3doaWxlKGk8Ynl0ZXMubGVuZ3RoKXtjb25zdCBjPWJ5dGVzW2krK107aWYoYz4+Nz09PTApe3Jlc3VsdC5wdXNoKGMpO2NvbnRpbnVlfWxldCBleHRyYUxlbmd0aD1udWxsO2xldCBvdmVybG9uZ01hc2s9bnVsbDtpZigoYyYyMjQpPT09MTkyKXtleHRyYUxlbmd0aD0xO292ZXJsb25nTWFzaz0xMjd9ZWxzZSBpZigoYyYyNDApPT09MjI0KXtleHRyYUxlbmd0aD0yO292ZXJsb25nTWFzaz0yMDQ3fWVsc2UgaWYoKGMmMjQ4KT09PTI0MCl7ZXh0cmFMZW5ndGg9MztvdmVybG9uZ01hc2s9NjU1MzV9ZWxzZXtpZigoYyYxOTIpPT09MTI4KXtpKz1vbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5VTkVYUEVDVEVEX0NPTlRJTlVFLGktMSxieXRlcyxyZXN1bHQpfWVsc2V7aSs9b25FcnJvcihVdGY4RXJyb3JSZWFzb24uQkFEX1BSRUZJWCxpLTEsYnl0ZXMscmVzdWx0KX1jb250aW51ZX1pZihpLTErZXh0cmFMZW5ndGg+PWJ5dGVzLmxlbmd0aCl7aSs9b25FcnJvcihVdGY4RXJyb3JSZWFzb24uT1ZFUlJVTixpLTEsYnl0ZXMscmVzdWx0KTtjb250aW51ZX1sZXQgcmVzPWMmKDE8PDgtZXh0cmFMZW5ndGgtMSktMTtmb3IobGV0IGo9MDtqPGV4dHJhTGVuZ3RoO2orKyl7bGV0IG5leHRDaGFyPWJ5dGVzW2ldO2lmKChuZXh0Q2hhciYxOTIpIT0xMjgpe2krPW9uRXJyb3IoVXRmOEVycm9yUmVhc29uLk1JU1NJTkdfQ09OVElOVUUsaSxieXRlcyxyZXN1bHQpO3Jlcz1udWxsO2JyZWFrfXJlcz1yZXM8PDZ8bmV4dENoYXImNjM7aSsrfWlmKHJlcz09PW51bGwpe2NvbnRpbnVlfWlmKHJlcz4xMTE0MTExKXtpKz1vbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5PVVRfT0ZfUkFOR0UsaS0xLWV4dHJhTGVuZ3RoLGJ5dGVzLHJlc3VsdCxyZXMpO2NvbnRpbnVlfWlmKHJlcz49NTUyOTYmJnJlczw9NTczNDMpe2krPW9uRXJyb3IoVXRmOEVycm9yUmVhc29uLlVURjE2X1NVUlJPR0FURSxpLTEtZXh0cmFMZW5ndGgsYnl0ZXMscmVzdWx0LHJlcyk7Y29udGludWV9aWYocmVzPD1vdmVybG9uZ01hc2spe2krPW9uRXJyb3IoVXRmOEVycm9yUmVhc29uLk9WRVJMT05HLGktMS1leHRyYUxlbmd0aCxieXRlcyxyZXN1bHQscmVzKTtjb250aW51ZX1yZXN1bHQucHVzaChyZXMpfXJldHVybiByZXN1bHR9ZnVuY3Rpb24gdG9VdGY4Qnl0ZXMoc3RyLGZvcm09VW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLmN1cnJlbnQpe2lmKGZvcm0hPVVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5jdXJyZW50KXtsb2dnZXIkOS5jaGVja05vcm1hbGl6ZSgpO3N0cj1zdHIubm9ybWFsaXplKGZvcm0pfWxldCByZXN1bHQ9W107Zm9yKGxldCBpPTA7aTxzdHIubGVuZ3RoO2krKyl7Y29uc3QgYz1zdHIuY2hhckNvZGVBdChpKTtpZihjPDEyOCl7cmVzdWx0LnB1c2goYyl9ZWxzZSBpZihjPDIwNDgpe3Jlc3VsdC5wdXNoKGM+PjZ8MTkyKTtyZXN1bHQucHVzaChjJjYzfDEyOCl9ZWxzZSBpZigoYyY2NDUxMik9PTU1Mjk2KXtpKys7Y29uc3QgYzI9c3RyLmNoYXJDb2RlQXQoaSk7aWYoaT49c3RyLmxlbmd0aHx8KGMyJjY0NTEyKSE9PTU2MzIwKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHV0Zi04IHN0cmluZ1wiKX1jb25zdCBwYWlyPTY1NTM2KygoYyYxMDIzKTw8MTApKyhjMiYxMDIzKTtyZXN1bHQucHVzaChwYWlyPj4xOHwyNDApO3Jlc3VsdC5wdXNoKHBhaXI+PjEyJjYzfDEyOCk7cmVzdWx0LnB1c2gocGFpcj4+NiY2M3wxMjgpO3Jlc3VsdC5wdXNoKHBhaXImNjN8MTI4KX1lbHNle3Jlc3VsdC5wdXNoKGM+PjEyfDIyNCk7cmVzdWx0LnB1c2goYz4+NiY2M3wxMjgpO3Jlc3VsdC5wdXNoKGMmNjN8MTI4KX19cmV0dXJuIGFycmF5aWZ5KHJlc3VsdCl9ZnVuY3Rpb24gZXNjYXBlQ2hhcih2YWx1ZSl7Y29uc3QgaGV4PVwiMDAwMFwiK3ZhbHVlLnRvU3RyaW5nKDE2KTtyZXR1cm5cIlxcXFx1XCIraGV4LnN1YnN0cmluZyhoZXgubGVuZ3RoLTQpfWZ1bmN0aW9uIF90b0VzY2FwZWRVdGY4U3RyaW5nKGJ5dGVzLG9uRXJyb3Ipe3JldHVybidcIicrZ2V0VXRmOENvZGVQb2ludHMoYnl0ZXMsb25FcnJvcikubWFwKGNvZGVQb2ludD0+e2lmKGNvZGVQb2ludDwyNTYpe3N3aXRjaChjb2RlUG9pbnQpe2Nhc2UgODpyZXR1cm5cIlxcXFxiXCI7Y2FzZSA5OnJldHVyblwiXFxcXHRcIjtjYXNlIDEwOnJldHVyblwiXFxcXG5cIjtjYXNlIDEzOnJldHVyblwiXFxcXHJcIjtjYXNlIDM0OnJldHVybidcXFxcXCInO2Nhc2UgOTI6cmV0dXJuXCJcXFxcXFxcXFwifWlmKGNvZGVQb2ludD49MzImJmNvZGVQb2ludDwxMjcpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCl9fWlmKGNvZGVQb2ludDw9NjU1MzUpe3JldHVybiBlc2NhcGVDaGFyKGNvZGVQb2ludCl9Y29kZVBvaW50LT02NTUzNjtyZXR1cm4gZXNjYXBlQ2hhcigoY29kZVBvaW50Pj4xMCYxMDIzKSs1NTI5NikrZXNjYXBlQ2hhcigoY29kZVBvaW50JjEwMjMpKzU2MzIwKX0pLmpvaW4oXCJcIikrJ1wiJ31mdW5jdGlvbiBfdG9VdGY4U3RyaW5nKGNvZGVQb2ludHMpe3JldHVybiBjb2RlUG9pbnRzLm1hcChjb2RlUG9pbnQ9PntpZihjb2RlUG9pbnQ8PTY1NTM1KXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpfWNvZGVQb2ludC09NjU1MzY7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKGNvZGVQb2ludD4+MTAmMTAyMykrNTUyOTYsKGNvZGVQb2ludCYxMDIzKSs1NjMyMCl9KS5qb2luKFwiXCIpfWZ1bmN0aW9uIHRvVXRmOFN0cmluZyhieXRlcyxvbkVycm9yKXtyZXR1cm4gX3RvVXRmOFN0cmluZyhnZXRVdGY4Q29kZVBvaW50cyhieXRlcyxvbkVycm9yKSl9ZnVuY3Rpb24gdG9VdGY4Q29kZVBvaW50cyhzdHIsZm9ybT1Vbmljb2RlTm9ybWFsaXphdGlvbkZvcm0uY3VycmVudCl7cmV0dXJuIGdldFV0ZjhDb2RlUG9pbnRzKHRvVXRmOEJ5dGVzKHN0cixmb3JtKSl9XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZm9ybWF0Qnl0ZXMzMlN0cmluZyh0ZXh0KXtjb25zdCBieXRlcz10b1V0ZjhCeXRlcyh0ZXh0KTtpZihieXRlcy5sZW5ndGg+MzEpe3Rocm93IG5ldyBFcnJvcihcImJ5dGVzMzIgc3RyaW5nIG11c3QgYmUgbGVzcyB0aGFuIDMyIGJ5dGVzXCIpfXJldHVybiBoZXhsaWZ5KGNvbmNhdChbYnl0ZXMsSGFzaFplcm9dKS5zbGljZSgwLDMyKSl9ZnVuY3Rpb24gcGFyc2VCeXRlczMyU3RyaW5nKGJ5dGVzKXtjb25zdCBkYXRhPWFycmF5aWZ5KGJ5dGVzKTtpZihkYXRhLmxlbmd0aCE9PTMyKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJ5dGVzMzIgLSBub3QgMzIgYnl0ZXMgbG9uZ1wiKX1pZihkYXRhWzMxXSE9PTApe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgYnl0ZXMzMiBzdHJpbmcgLSBubyBudWxsIHRlcm1pbmF0b3JcIil9bGV0IGxlbmd0aD0zMTt3aGlsZShkYXRhW2xlbmd0aC0xXT09PTApe2xlbmd0aC0tfXJldHVybiB0b1V0ZjhTdHJpbmcoZGF0YS5zbGljZSgwLGxlbmd0aCkpfVwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGJ5dGVzMihkYXRhKXtpZihkYXRhLmxlbmd0aCU0IT09MCl7dGhyb3cgbmV3IEVycm9yKFwiYmFkIGRhdGFcIil9bGV0IHJlc3VsdD1bXTtmb3IobGV0IGk9MDtpPGRhdGEubGVuZ3RoO2krPTQpe3Jlc3VsdC5wdXNoKHBhcnNlSW50KGRhdGEuc3Vic3RyaW5nKGksaSs0KSwxNikpfXJldHVybiByZXN1bHR9ZnVuY3Rpb24gY3JlYXRlVGFibGUoZGF0YSxmdW5jKXtpZighZnVuYyl7ZnVuYz1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuW3BhcnNlSW50KHZhbHVlLDE2KV19fWxldCBsbz0wO2xldCByZXN1bHQ9e307ZGF0YS5zcGxpdChcIixcIikuZm9yRWFjaChwYWlyPT57bGV0IGNvbXBzPXBhaXIuc3BsaXQoXCI6XCIpO2xvKz1wYXJzZUludChjb21wc1swXSwxNik7cmVzdWx0W2xvXT1mdW5jKGNvbXBzWzFdKX0pO3JldHVybiByZXN1bHR9ZnVuY3Rpb24gY3JlYXRlUmFuZ2VUYWJsZShkYXRhKXtsZXQgaGk9MDtyZXR1cm4gZGF0YS5zcGxpdChcIixcIikubWFwKHY9PntsZXQgY29tcHM9di5zcGxpdChcIi1cIik7aWYoY29tcHMubGVuZ3RoPT09MSl7Y29tcHNbMV09XCIwXCJ9ZWxzZSBpZihjb21wc1sxXT09PVwiXCIpe2NvbXBzWzFdPVwiMVwifWxldCBsbz1oaStwYXJzZUludChjb21wc1swXSwxNik7aGk9cGFyc2VJbnQoY29tcHNbMV0sMTYpO3JldHVybntsOmxvLGg6aGl9fSl9ZnVuY3Rpb24gbWF0Y2hNYXAodmFsdWUscmFuZ2VzKXtsZXQgbG89MDtmb3IobGV0IGk9MDtpPHJhbmdlcy5sZW5ndGg7aSsrKXtsZXQgcmFuZ2U9cmFuZ2VzW2ldO2xvKz1yYW5nZS5sO2lmKHZhbHVlPj1sbyYmdmFsdWU8PWxvK3JhbmdlLmgmJih2YWx1ZS1sbyklKHJhbmdlLmR8fDEpPT09MCl7aWYocmFuZ2UuZSYmcmFuZ2UuZS5pbmRleE9mKHZhbHVlLWxvKSE9PS0xKXtjb250aW51ZX1yZXR1cm4gcmFuZ2V9fXJldHVybiBudWxsfWNvbnN0IFRhYmxlX0FfMV9yYW5nZXM9Y3JlYXRlUmFuZ2VUYWJsZShcIjIyMSwxMy0xYiw1Zi0sNDAtMTAsNTEtZiwxMS0zLDMtMywyLTIsMi00LDgsMiwxNSwyZCwyOC04LDg4LDQ4LDI3LSwzLTUsMTEtMjAsMjctLDgsMjgsMy01LDEyLDE4LGItYSwxYy00LDYtMTYsMi1kLDItMiwyLDFiLTQsMTctOSw4Zi0sMTAsZiwxZi0yLDFjLTM0LDMzLTE0ZSw0LDM2LSwxMy0sNi0yLDFhLWYsNCw5LSwzLSwxNyw4LDItMiw1LSwyLDgtLDMtLDQtOCwyLTMsMyw2LSwxNi02LDItLDctMywzLSwxNyw4LDMsMywzLSwyLDYtMywzLSw0LWEsNSwyLTYsMTAtYiw0LDgsMiw0LDE3LDgsMyw2LSxiLDQsNC0sMi1lLDItNCxiLTEwLDQsOS0sMy0sMTcsOCwzLSw1LSw5LTIsMy0sNC03LDMtMywzLDQtMyxjLTEwLDMsNy0yLDQsNS0yLDMsMiwzLTIsMy0yLDQtMiw5LDQtMyw2LTIsNCw1LTgsMi1lLGQtZCw0LDksNCwxOCxiLDYtMyw4LDQsNS02LDMtOCwzLTMsYi0xMSwzLDksNCwxOCxiLDYtMyw4LDQsNS02LDMtNiwyLDMtMyxiLTExLDMsOSw0LDE4LDExLTMsNy0sNCw1LTgsMi03LDMtMyxiLTExLDMsMTMtMiwxOSxhLDItLDgtMiwyLTMsNywyLDktMTEsNC1iLDNiLTMsMWUtMjQsMywyLSwzLDItLDItNSw1LDgsNCwyLDItLDMsZSw0LSw2LDIsNy0sYi0sMy0yMSw0OSwyMy01LDFjLTMsOSwyNSwxMC0sMi0yZiwyMyw2LDMsOC0yLDUtNSwxYi00NSwyNy05LDJhLSwyLTMsNWItNCw0NS00LDUzLTUsOCw0MCwyLDUtLDgsMiw1LSwyOCwyLDUtLDIwLDIsNS0sOCwyLDUtLDgsOCwxOCwyMCwyLDUtLDgsMjgsMTQtNSwxZC0yMiw1Ni1iLDI3Ny04LDFlLTIsNTItZSxlLDgtYSwxOC04LDE1LWIsZSw0LDMtYiw1ZS0yLGItMTUsMTAsYi01LDU5LTcsMmItNTU1LDlkLTMsNWItNSwxNy0sNy0sMjctLDctLDksMiwyLDIsMjAtLDM2LDEwLGYtLDcsMTQtLDQsYSw1NC0zLDItNiw2LTUsOS0sMWMtMTAsMTMtMWQsMWMtMTQsM2MtLDEwLTYsMzItYiwyNDAtMzAsMjgtMTgsYy0xNCxhMCwxMTUtLDMsNjYtLGItNzYsNSw1LSwxZCwyNCwyLDUtMiwyLDgtLDM1LTIsMTksZi0xMCwxZC0zLDMxMS0zN2YsMWIsNWEtYixkNy0xOSxkLTMsNDEsNTctLDY4LTQsMjktMyw1ZiwyOS0zNywyZS0yLDI1LWMsMmMtMiw0ZS0zLDMwLDc4LTMsNjQtLDIwLDE5YjctNDksNTFhNy01OSw0OGUtMiwzOC03MzgsMmJhNS01YiwyMjJmLSwzYy05NCw4LWIsNi00LDFiLDYsMiwzLDMsNmQtMjAsMTZlLWYsNDEtLDM3LTcsMmUtMiwxMS1mLDUtYiwxOC0sYiwxNCw1LTMsNiw4OC0sMixiZi0yLDctLDctLDctLDQtMiw4LDgtOSw4LTJmZiwyMCw1LWIsMWMtYjQsMjctLDI3LWNiYjEsZjctOSwyOC0yLGI1LTIyMSw1Niw0OCwzLSwyLSwzLSw1LGQsMiw1LDMsNDIsNS0sOSw4LDFkLDUsNiwyLTIsOCwxNTMtMywxMjMtMywzMy0yN2ZkLGE2ZGEtNTEyOCwyMWYtNWRmLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMywyLTFkLDYxLWZmN2RcIik7Y29uc3QgVGFibGVfQl8xX2ZsYWdzPVwiYWQsMzRmLDE4MDYsMTgwYiwxODBjLDE4MGQsMjAwYiwyMDBjLDIwMGQsMjA2MCxmZWZmXCIuc3BsaXQoXCIsXCIpLm1hcCh2PT5wYXJzZUludCh2LDE2KSk7Y29uc3QgVGFibGVfQl8yX3Jhbmdlcz1be2g6MjUsczozMixsOjY1fSx7aDozMCxzOjMyLGU6WzIzXSxsOjEyN30se2g6NTQsczoxLGU6WzQ4XSxsOjY0LGQ6Mn0se2g6MTQsczoxLGw6NTcsZDoyfSx7aDo0NCxzOjEsbDoxNyxkOjJ9LHtoOjEwLHM6MSxlOlsyLDYsOF0sbDo2MSxkOjJ9LHtoOjE2LHM6MSxsOjY4LGQ6Mn0se2g6ODQsczoxLGU6WzE4LDI0LDY2XSxsOjE5LGQ6Mn0se2g6MjYsczozMixlOlsxN10sbDo0MzV9LHtoOjIyLHM6MSxsOjcxLGQ6Mn0se2g6MTUsczo4MCxsOjQwfSx7aDozMSxzOjMyLGw6MTZ9LHtoOjMyLHM6MSxsOjgwLGQ6Mn0se2g6NTIsczoxLGw6NDIsZDoyfSx7aDoxMixzOjEsbDo1NSxkOjJ9LHtoOjQwLHM6MSxlOlszOF0sbDoxNSxkOjJ9LHtoOjE0LHM6MSxsOjQ4LGQ6Mn0se2g6Mzcsczo0OCxsOjQ5fSx7aDoxNDgsczoxLGw6NjM1MSxkOjJ9LHtoOjg4LHM6MSxsOjE2MCxkOjJ9LHtoOjE1LHM6MTYsbDo3MDR9LHtoOjI1LHM6MjYsbDo4NTR9LHtoOjI1LHM6MzIsbDo1NTkxNX0se2g6Mzcsczo0MCxsOjEyNDd9LHtoOjI1LHM6LTExOTcxMSxsOjUzMjQ4fSx7aDoyNSxzOi0xMTk3NjMsbDo1Mn0se2g6MjUsczotMTE5ODE1LGw6NTJ9LHtoOjI1LHM6LTExOTg2NyxlOlsxLDQsNSw3LDgsMTEsMTIsMTddLGw6NTJ9LHtoOjI1LHM6LTExOTkxOSxsOjUyfSx7aDoyNCxzOi0xMTk5NzEsZTpbMiw3LDgsMTddLGw6NTJ9LHtoOjI0LHM6LTEyMDAyMyxlOlsyLDcsMTMsMTUsMTYsMTddLGw6NTJ9LHtoOjI1LHM6LTEyMDA3NSxsOjUyfSx7aDoyNSxzOi0xMjAxMjcsbDo1Mn0se2g6MjUsczotMTIwMTc5LGw6NTJ9LHtoOjI1LHM6LTEyMDIzMSxsOjUyfSx7aDoyNSxzOi0xMjAyODMsbDo1Mn0se2g6MjUsczotMTIwMzM1LGw6NTJ9LHtoOjI0LHM6LTExOTU0MyxlOlsxN10sbDo1Nn0se2g6MjQsczotMTE5NjAxLGU6WzE3XSxsOjU4fSx7aDoyNCxzOi0xMTk2NTksZTpbMTddLGw6NTh9LHtoOjI0LHM6LTExOTcxNyxlOlsxN10sbDo1OH0se2g6MjQsczotMTE5Nzc1LGU6WzE3XSxsOjU4fV07Y29uc3QgVGFibGVfQl8yX2x1dF9hYnM9Y3JlYXRlVGFibGUoXCJiNTozYmMsYzM6ZmYsNzo3MywyOjI1Myw1OjI1NCwzOjI1NiwxOjI1Nyw1OjI1OSwxOjI1YiwzOjI2MCwxOjI2MywyOjI2OSwxOjI2OCw1OjI2ZiwxOjI3MiwyOjI3NSw3OjI4MCwzOjI4Myw1OjI4OCwzOjI4YSwxOjI4Yiw1OjI5MiwzZjoxOTUsMToxYmYsMjk6MTllLDEyNTozYjksOGI6M2IyLDE6M2I4LDE6M2M1LDM6M2M2LDE6M2MwLDFhOjNiYSwxOjNjMSwxOjNjMywyOjNiOCwxOjNiNSwxYmM5OjNiOSwxYzoxZjc2LDE6MWY3NyxmOjFmN2EsMToxZjdiLGQ6MWY3OCwxOjFmNzksMToxZjdjLDE6MWY3ZCwxMDc6NjMsNToyNWIsNDo2OCwxOjY4LDE6NjgsMzo2OSwxOjY5LDE6NmMsMzo2ZSw0OjcwLDE6NzEsMTo3MiwxOjcyLDE6NzIsNzo3YSwyOjNjOSwyOjdhLDI6NmIsMTplNSwxOjYyLDE6NjMsMzo2NSwxOjY2LDI6NmQsYjozYjMsMTozYzAsNjo2NCwxYjU3NDozYjgsMWE6M2MzLDIwOjNiOCwxYTozYzMsMjA6M2I4LDFhOjNjMywyMDozYjgsMWE6M2MzLDIwOjNiOCwxYTozYzNcIik7Y29uc3QgVGFibGVfQl8yX2x1dF9yZWw9Y3JlYXRlVGFibGUoXCIxNzk6MSwyOjEsMjoxLDU6MSwyOjEsYTo0ZixhOjEsODoxLDI6MSwyOjEsMzoxLDU6MSwzOjEsNDoxLDI6MSwzOjEsNDoxLDg6MiwxOjEsMjoyLDE6MSwyOjIsMjc6MiwxOTU6MjYsMjoyNSwxOjI1LDE6MjUsMjo0MCwyOjNmLDE6M2YsMzM6MSwxMTotNiwxOi05LDFhYzc6LTNhLDZkOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsOTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsYjotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDk6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCw5Oi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCxjOi04LDI6LTgsMjotOCwyOi04LDk6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCw0OTotOCwxOi04LDE6LTRhLDE6LTRhLGQ6LTU2LDE6LTU2LDE6LTU2LDE6LTU2LGQ6LTgsMTotOCxmOi04LDE6LTgsMzotN1wiKTtjb25zdCBUYWJsZV9CXzJfY29tcGxleD1jcmVhdGVUYWJsZShcImRmOjAwNzMwMDczLDUxOjAwNjkwMzA3LDE5OjAyQkMwMDZFLGE3OjAwNkEwMzBDLDE4YTowMDIwMDNCOSwxNjowM0I5MDMwODAzMDEsMjA6MDNDNTAzMDgwMzAxLDFkNzowNTY1MDU4MiwxOTBmOjAwNjgwMzMxLDE6MDA3NDAzMDgsMTowMDc3MDMwQSwxOjAwNzkwMzBBLDE6MDA2MTAyQkUsYjY6MDNDNTAzMTMsMjowM0M1MDMxMzAzMDAsMjowM0M1MDMxMzAzMDEsMjowM0M1MDMxMzAzNDIsMmE6MUYwMDAzQjksMToxRjAxMDNCOSwxOjFGMDIwM0I5LDE6MUYwMzAzQjksMToxRjA0MDNCOSwxOjFGMDUwM0I5LDE6MUYwNjAzQjksMToxRjA3MDNCOSwxOjFGMDAwM0I5LDE6MUYwMTAzQjksMToxRjAyMDNCOSwxOjFGMDMwM0I5LDE6MUYwNDAzQjksMToxRjA1MDNCOSwxOjFGMDYwM0I5LDE6MUYwNzAzQjksMToxRjIwMDNCOSwxOjFGMjEwM0I5LDE6MUYyMjAzQjksMToxRjIzMDNCOSwxOjFGMjQwM0I5LDE6MUYyNTAzQjksMToxRjI2MDNCOSwxOjFGMjcwM0I5LDE6MUYyMDAzQjksMToxRjIxMDNCOSwxOjFGMjIwM0I5LDE6MUYyMzAzQjksMToxRjI0MDNCOSwxOjFGMjUwM0I5LDE6MUYyNjAzQjksMToxRjI3MDNCOSwxOjFGNjAwM0I5LDE6MUY2MTAzQjksMToxRjYyMDNCOSwxOjFGNjMwM0I5LDE6MUY2NDAzQjksMToxRjY1MDNCOSwxOjFGNjYwM0I5LDE6MUY2NzAzQjksMToxRjYwMDNCOSwxOjFGNjEwM0I5LDE6MUY2MjAzQjksMToxRjYzMDNCOSwxOjFGNjQwM0I5LDE6MUY2NTAzQjksMToxRjY2MDNCOSwxOjFGNjcwM0I5LDM6MUY3MDAzQjksMTowM0IxMDNCOSwxOjAzQUMwM0I5LDI6MDNCMTAzNDIsMTowM0IxMDM0MjAzQjksNTowM0IxMDNCOSw2OjFGNzQwM0I5LDE6MDNCNzAzQjksMTowM0FFMDNCOSwyOjAzQjcwMzQyLDE6MDNCNzAzNDIwM0I5LDU6MDNCNzAzQjksNjowM0I5MDMwODAzMDAsMTowM0I5MDMwODAzMDEsMzowM0I5MDM0MiwxOjAzQjkwMzA4MDM0MixiOjAzQzUwMzA4MDMwMCwxOjAzQzUwMzA4MDMwMSwxOjAzQzEwMzEzLDI6MDNDNTAzNDIsMTowM0M1MDMwODAzNDIsYjoxRjdDMDNCOSwxOjAzQzkwM0I5LDE6MDNDRTAzQjksMjowM0M5MDM0MiwxOjAzQzkwMzQyMDNCOSw1OjAzQzkwM0I5LGFjOjAwNzIwMDczLDViOjAwQjAwMDYzLDY6MDBCMDAwNjYsZDowMDZFMDA2RixhOjAwNzMwMDZELDE6MDA3NDAwNjUwMDZDLDE6MDA3NDAwNkQsMTI0ZjowMDY4MDA3MDAwNjEsMjowMDYxMDA3NSwyOjAwNkYwMDc2LGI6MDA3MDAwNjEsMTowMDZFMDA2MSwxOjAzQkMwMDYxLDE6MDA2RDAwNjEsMTowMDZCMDA2MSwxOjAwNkIwMDYyLDE6MDA2RDAwNjIsMTowMDY3MDA2MiwzOjAwNzAwMDY2LDE6MDA2RTAwNjYsMTowM0JDMDA2Niw0OjAwNjgwMDdBLDE6MDA2QjAwNjgwMDdBLDE6MDA2RDAwNjgwMDdBLDE6MDA2NzAwNjgwMDdBLDE6MDA3NDAwNjgwMDdBLDE1OjAwNzAwMDYxLDE6MDA2QjAwNzAwMDYxLDE6MDA2RDAwNzAwMDYxLDE6MDA2NzAwNzAwMDYxLDg6MDA3MDAwNzYsMTowMDZFMDA3NiwxOjAzQkMwMDc2LDE6MDA2RDAwNzYsMTowMDZCMDA3NiwxOjAwNkQwMDc2LDE6MDA3MDAwNzcsMTowMDZFMDA3NywxOjAzQkMwMDc3LDE6MDA2RDAwNzcsMTowMDZCMDA3NywxOjAwNkQwMDc3LDE6MDA2QjAzQzksMTowMDZEMDNDOSwyOjAwNjIwMDcxLDM6MDA2MzIyMTUwMDZCMDA2NywxOjAwNjMwMDZGMDAyRSwxOjAwNjQwMDYyLDE6MDA2NzAwNzksMjowMDY4MDA3MCwyOjAwNkIwMDZCLDE6MDA2QjAwNkQsOTowMDcwMDA2OCwyOjAwNzAwMDcwMDA2RCwxOjAwNzAwMDcyLDI6MDA3MzAwNzYsMTowMDc3MDA2MixjNzIzOjAwNjYwMDY2LDE6MDA2NjAwNjksMTowMDY2MDA2QywxOjAwNjYwMDY2MDA2OSwxOjAwNjYwMDY2MDA2QywxOjAwNzMwMDc0LDE6MDA3MzAwNzQsZDowNTc0MDU3NiwxOjA1NzQwNTY1LDE6MDU3NDA1NkIsMTowNTdFMDU3NiwxOjA1NzQwNTZEXCIsYnl0ZXMyKTtjb25zdCBUYWJsZV9DX3Jhbmdlcz1jcmVhdGVSYW5nZVRhYmxlKFwiODAtMjAsMmEwLSwzOWMsMzIsZjcxLDE4ZSw3ZjItZiwxOS03LDMwLTQsNy01LGY4MS1iLDUsYTgwMC0yMGZmLDRkMS0xZiwxMTAsZmEtNixkMTc0LTcsMmU4NC0sZmZmZi0sZmZmZi0sZmZmZi0sZmZmZi0sZmZmZi0sZmZmZi0sZmZmZi0sZmZmZi0sZmZmZi0sZmZmZi0sZmZmZi0sZmZmZi0sMiwxZi01ZixmZjdmLTIwMDAxXCIpO2Z1bmN0aW9uIGZsYXR0ZW4odmFsdWVzKXtyZXR1cm4gdmFsdWVzLnJlZHVjZSgoYWNjdW0sdmFsdWUpPT57dmFsdWUuZm9yRWFjaCh2YWx1ZT0+e2FjY3VtLnB1c2godmFsdWUpfSk7cmV0dXJuIGFjY3VtfSxbXSl9ZnVuY3Rpb24gX25hbWVwcmVwVGFibGVBMShjb2RlcG9pbnQpe3JldHVybiEhbWF0Y2hNYXAoY29kZXBvaW50LFRhYmxlX0FfMV9yYW5nZXMpfWZ1bmN0aW9uIF9uYW1lcHJlcFRhYmxlQjIoY29kZXBvaW50KXtsZXQgcmFuZ2U9bWF0Y2hNYXAoY29kZXBvaW50LFRhYmxlX0JfMl9yYW5nZXMpO2lmKHJhbmdlKXtyZXR1cm5bY29kZXBvaW50K3JhbmdlLnNdfWxldCBjb2Rlcz1UYWJsZV9CXzJfbHV0X2Fic1tjb2RlcG9pbnRdO2lmKGNvZGVzKXtyZXR1cm4gY29kZXN9bGV0IHNoaWZ0PVRhYmxlX0JfMl9sdXRfcmVsW2NvZGVwb2ludF07aWYoc2hpZnQpe3JldHVybltjb2RlcG9pbnQrc2hpZnRbMF1dfWxldCBjb21wbGV4PVRhYmxlX0JfMl9jb21wbGV4W2NvZGVwb2ludF07aWYoY29tcGxleCl7cmV0dXJuIGNvbXBsZXh9cmV0dXJuIG51bGx9ZnVuY3Rpb24gX25hbWVwcmVwVGFibGVDKGNvZGVwb2ludCl7cmV0dXJuISFtYXRjaE1hcChjb2RlcG9pbnQsVGFibGVfQ19yYW5nZXMpfWZ1bmN0aW9uIG5hbWVwcmVwKHZhbHVlKXtpZih2YWx1ZS5tYXRjaCgvXlthLXowLTktXSokL2kpJiZ2YWx1ZS5sZW5ndGg8PTU5KXtyZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKX1sZXQgY29kZXM9dG9VdGY4Q29kZVBvaW50cyh2YWx1ZSk7Y29kZXM9ZmxhdHRlbihjb2Rlcy5tYXAoY29kZT0+e2lmKFRhYmxlX0JfMV9mbGFncy5pbmRleE9mKGNvZGUpPj0wKXtyZXR1cm5bXX1pZihjb2RlPj02NTAyNCYmY29kZTw9NjUwMzkpe3JldHVybltdfWxldCBjb2Rlc1RhYmxlQjI9X25hbWVwcmVwVGFibGVCMihjb2RlKTtpZihjb2Rlc1RhYmxlQjIpe3JldHVybiBjb2Rlc1RhYmxlQjJ9cmV0dXJuW2NvZGVdfSkpO2NvZGVzPXRvVXRmOENvZGVQb2ludHMoX3RvVXRmOFN0cmluZyhjb2RlcyksVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLk5GS0MpO2NvZGVzLmZvckVhY2goY29kZT0+e2lmKF9uYW1lcHJlcFRhYmxlQyhjb2RlKSl7dGhyb3cgbmV3IEVycm9yKFwiU1RSSU5HUFJFUF9DT05UQUlOU19QUk9ISUJJVEVEXCIpfX0pO2NvZGVzLmZvckVhY2goY29kZT0+e2lmKF9uYW1lcHJlcFRhYmxlQTEoY29kZSkpe3Rocm93IG5ldyBFcnJvcihcIlNUUklOR1BSRVBfQ09OVEFJTlNfVU5BU1NJR05FRFwiKX19KTtsZXQgbmFtZT1fdG9VdGY4U3RyaW5nKGNvZGVzKTtpZihuYW1lLnN1YnN0cmluZygwLDEpPT09XCItXCJ8fG5hbWUuc3Vic3RyaW5nKDIsNCk9PT1cIi0tXCJ8fG5hbWUuc3Vic3RyaW5nKG5hbWUubGVuZ3RoLTEpPT09XCItXCIpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgaHlwaGVuXCIpfWlmKG5hbWUubGVuZ3RoPjYzKXt0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbG9uZ1wiKX1yZXR1cm4gbmFtZX1cInVzZSBzdHJpY3RcIjtcInVzZSBzdHJpY3RcIjtjbGFzcyBTdHJpbmdDb2RlciBleHRlbmRzIER5bmFtaWNCeXRlc0NvZGVye2NvbnN0cnVjdG9yKGxvY2FsTmFtZSl7c3VwZXIoXCJzdHJpbmdcIixsb2NhbE5hbWUpfWRlZmF1bHRWYWx1ZSgpe3JldHVyblwiXCJ9ZW5jb2RlKHdyaXRlcix2YWx1ZSl7cmV0dXJuIHN1cGVyLmVuY29kZSh3cml0ZXIsdG9VdGY4Qnl0ZXModmFsdWUpKX1kZWNvZGUocmVhZGVyKXtyZXR1cm4gdG9VdGY4U3RyaW5nKHN1cGVyLmRlY29kZShyZWFkZXIpKX19XCJ1c2Ugc3RyaWN0XCI7Y2xhc3MgVHVwbGVDb2RlciBleHRlbmRzIENvZGVye2NvbnN0cnVjdG9yKGNvZGVycyxsb2NhbE5hbWUpe2xldCBkeW5hbWljPWZhbHNlO2NvbnN0IHR5cGVzPVtdO2NvZGVycy5mb3JFYWNoKGNvZGVyPT57aWYoY29kZXIuZHluYW1pYyl7ZHluYW1pYz10cnVlfXR5cGVzLnB1c2goY29kZXIudHlwZSl9KTtjb25zdCB0eXBlPVwidHVwbGUoXCIrdHlwZXMuam9pbihcIixcIikrXCIpXCI7c3VwZXIoXCJ0dXBsZVwiLHR5cGUsbG9jYWxOYW1lLGR5bmFtaWMpO3RoaXMuY29kZXJzPWNvZGVyc31kZWZhdWx0VmFsdWUoKXtjb25zdCB2YWx1ZXM9W107dGhpcy5jb2RlcnMuZm9yRWFjaChjb2Rlcj0+e3ZhbHVlcy5wdXNoKGNvZGVyLmRlZmF1bHRWYWx1ZSgpKX0pO2NvbnN0IHVuaXF1ZU5hbWVzPXRoaXMuY29kZXJzLnJlZHVjZSgoYWNjdW0sY29kZXIpPT57Y29uc3QgbmFtZT1jb2Rlci5sb2NhbE5hbWU7aWYobmFtZSl7aWYoIWFjY3VtW25hbWVdKXthY2N1bVtuYW1lXT0wfWFjY3VtW25hbWVdKyt9cmV0dXJuIGFjY3VtfSx7fSk7dGhpcy5jb2RlcnMuZm9yRWFjaCgoY29kZXIsaW5kZXgpPT57bGV0IG5hbWU9Y29kZXIubG9jYWxOYW1lO2lmKCFuYW1lfHx1bmlxdWVOYW1lc1tuYW1lXSE9PTEpe3JldHVybn1pZihuYW1lPT09XCJsZW5ndGhcIil7bmFtZT1cIl9sZW5ndGhcIn1pZih2YWx1ZXNbbmFtZV0hPW51bGwpe3JldHVybn12YWx1ZXNbbmFtZV09dmFsdWVzW2luZGV4XX0pO3JldHVybiBPYmplY3QuZnJlZXplKHZhbHVlcyl9ZW5jb2RlKHdyaXRlcix2YWx1ZSl7cmV0dXJuIHBhY2sod3JpdGVyLHRoaXMuY29kZXJzLHZhbHVlKX1kZWNvZGUocmVhZGVyKXtyZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsdW5wYWNrKHJlYWRlcix0aGlzLmNvZGVycykpfX1cInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkYT1uZXcgTG9nZ2VyKHZlcnNpb24kNCk7Y29uc3QgcGFyYW1UeXBlQnl0ZXM9bmV3IFJlZ0V4cCgvXmJ5dGVzKFswLTldKikkLyk7Y29uc3QgcGFyYW1UeXBlTnVtYmVyPW5ldyBSZWdFeHAoL14odT9pbnQpKFswLTldKikkLyk7Y2xhc3MgQWJpQ29kZXJ7Y29uc3RydWN0b3IoY29lcmNlRnVuYyl7bG9nZ2VyJGEuY2hlY2tOZXcobmV3LnRhcmdldCxBYmlDb2Rlcik7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImNvZXJjZUZ1bmNcIixjb2VyY2VGdW5jfHxudWxsKX1fZ2V0Q29kZXIocGFyYW0pe3N3aXRjaChwYXJhbS5iYXNlVHlwZSl7Y2FzZVwiYWRkcmVzc1wiOnJldHVybiBuZXcgQWRkcmVzc0NvZGVyKHBhcmFtLm5hbWUpO2Nhc2VcImJvb2xcIjpyZXR1cm4gbmV3IEJvb2xlYW5Db2RlcihwYXJhbS5uYW1lKTtjYXNlXCJzdHJpbmdcIjpyZXR1cm4gbmV3IFN0cmluZ0NvZGVyKHBhcmFtLm5hbWUpO2Nhc2VcImJ5dGVzXCI6cmV0dXJuIG5ldyBCeXRlc0NvZGVyKHBhcmFtLm5hbWUpO2Nhc2VcImFycmF5XCI6cmV0dXJuIG5ldyBBcnJheUNvZGVyKHRoaXMuX2dldENvZGVyKHBhcmFtLmFycmF5Q2hpbGRyZW4pLHBhcmFtLmFycmF5TGVuZ3RoLHBhcmFtLm5hbWUpO2Nhc2VcInR1cGxlXCI6cmV0dXJuIG5ldyBUdXBsZUNvZGVyKChwYXJhbS5jb21wb25lbnRzfHxbXSkubWFwKGNvbXBvbmVudD0+e3JldHVybiB0aGlzLl9nZXRDb2Rlcihjb21wb25lbnQpfSkscGFyYW0ubmFtZSk7Y2FzZVwiXCI6cmV0dXJuIG5ldyBOdWxsQ29kZXIocGFyYW0ubmFtZSl9bGV0IG1hdGNoPXBhcmFtLnR5cGUubWF0Y2gocGFyYW1UeXBlTnVtYmVyKTtpZihtYXRjaCl7bGV0IHNpemU9cGFyc2VJbnQobWF0Y2hbMl18fFwiMjU2XCIpO2lmKHNpemU9PT0wfHxzaXplPjI1Nnx8c2l6ZSU4IT09MCl7bG9nZ2VyJGEudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBcIittYXRjaFsxXStcIiBiaXQgbGVuZ3RoXCIsXCJwYXJhbVwiLHBhcmFtKX1yZXR1cm4gbmV3IE51bWJlckNvZGVyKHNpemUvOCxtYXRjaFsxXT09PVwiaW50XCIscGFyYW0ubmFtZSl9bWF0Y2g9cGFyYW0udHlwZS5tYXRjaChwYXJhbVR5cGVCeXRlcyk7aWYobWF0Y2gpe2xldCBzaXplPXBhcnNlSW50KG1hdGNoWzFdKTtpZihzaXplPT09MHx8c2l6ZT4zMil7bG9nZ2VyJGEudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBieXRlcyBsZW5ndGhcIixcInBhcmFtXCIscGFyYW0pfXJldHVybiBuZXcgRml4ZWRCeXRlc0NvZGVyKHNpemUscGFyYW0ubmFtZSl9cmV0dXJuIGxvZ2dlciRhLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdHlwZVwiLFwidHlwZVwiLHBhcmFtLnR5cGUpfV9nZXRXb3JkU2l6ZSgpe3JldHVybiAzMn1fZ2V0UmVhZGVyKGRhdGEsYWxsb3dMb29zZSl7cmV0dXJuIG5ldyBSZWFkZXIoZGF0YSx0aGlzLl9nZXRXb3JkU2l6ZSgpLHRoaXMuY29lcmNlRnVuYyxhbGxvd0xvb3NlKX1fZ2V0V3JpdGVyKCl7cmV0dXJuIG5ldyBXcml0ZXIodGhpcy5fZ2V0V29yZFNpemUoKSl9Z2V0RGVmYXVsdFZhbHVlKHR5cGVzKXtjb25zdCBjb2RlcnM9dHlwZXMubWFwKHR5cGU9PnRoaXMuX2dldENvZGVyKFBhcmFtVHlwZS5mcm9tKHR5cGUpKSk7Y29uc3QgY29kZXI9bmV3IFR1cGxlQ29kZXIoY29kZXJzLFwiX1wiKTtyZXR1cm4gY29kZXIuZGVmYXVsdFZhbHVlKCl9ZW5jb2RlKHR5cGVzLHZhbHVlcyl7aWYodHlwZXMubGVuZ3RoIT09dmFsdWVzLmxlbmd0aCl7bG9nZ2VyJGEudGhyb3dFcnJvcihcInR5cGVzL3ZhbHVlcyBsZW5ndGggbWlzbWF0Y2hcIixMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQse2NvdW50Ont0eXBlczp0eXBlcy5sZW5ndGgsdmFsdWVzOnZhbHVlcy5sZW5ndGh9LHZhbHVlOnt0eXBlczp0eXBlcyx2YWx1ZXM6dmFsdWVzfX0pfWNvbnN0IGNvZGVycz10eXBlcy5tYXAodHlwZT0+dGhpcy5fZ2V0Q29kZXIoUGFyYW1UeXBlLmZyb20odHlwZSkpKTtjb25zdCBjb2Rlcj1uZXcgVHVwbGVDb2Rlcihjb2RlcnMsXCJfXCIpO2NvbnN0IHdyaXRlcj10aGlzLl9nZXRXcml0ZXIoKTtjb2Rlci5lbmNvZGUod3JpdGVyLHZhbHVlcyk7cmV0dXJuIHdyaXRlci5kYXRhfWRlY29kZSh0eXBlcyxkYXRhLGxvb3NlKXtjb25zdCBjb2RlcnM9dHlwZXMubWFwKHR5cGU9PnRoaXMuX2dldENvZGVyKFBhcmFtVHlwZS5mcm9tKHR5cGUpKSk7Y29uc3QgY29kZXI9bmV3IFR1cGxlQ29kZXIoY29kZXJzLFwiX1wiKTtyZXR1cm4gY29kZXIuZGVjb2RlKHRoaXMuX2dldFJlYWRlcihhcnJheWlmeShkYXRhKSxsb29zZSkpfX1jb25zdCBkZWZhdWx0QWJpQ29kZXI9bmV3IEFiaUNvZGVyO2Z1bmN0aW9uIGlkKHRleHQpe3JldHVybiBrZWNjYWsyNTYodG9VdGY4Qnl0ZXModGV4dCkpfWNvbnN0IHZlcnNpb24kOD1cImhhc2gvNS4xLjBcIjtjb25zdCBsb2dnZXIkYj1uZXcgTG9nZ2VyKHZlcnNpb24kOCk7Y29uc3QgWmVyb3M9bmV3IFVpbnQ4QXJyYXkoMzIpO1plcm9zLmZpbGwoMCk7Y29uc3QgUGFydGl0aW9uPW5ldyBSZWdFeHAoXCJeKCguKilcXFxcLik/KFteLl0rKSRcIik7ZnVuY3Rpb24gaXNWYWxpZE5hbWUobmFtZSl7dHJ5e2NvbnN0IGNvbXBzPW5hbWUuc3BsaXQoXCIuXCIpO2ZvcihsZXQgaT0wO2k8Y29tcHMubGVuZ3RoO2krKyl7aWYobmFtZXByZXAoY29tcHNbaV0pLmxlbmd0aD09PTApe3Rocm93IG5ldyBFcnJvcihcImVtcHR5XCIpfX1yZXR1cm4gdHJ1ZX1jYXRjaChlcnJvcil7fXJldHVybiBmYWxzZX1mdW5jdGlvbiBuYW1laGFzaChuYW1lKXtpZih0eXBlb2YgbmFtZSE9PVwic3RyaW5nXCIpe2xvZ2dlciRiLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzcyAtIFwiK1N0cmluZyhuYW1lKSxcIm5hbWVcIixuYW1lKX1sZXQgcmVzdWx0PVplcm9zO3doaWxlKG5hbWUubGVuZ3RoKXtjb25zdCBwYXJ0aXRpb249bmFtZS5tYXRjaChQYXJ0aXRpb24pO2NvbnN0IGxhYmVsPXRvVXRmOEJ5dGVzKG5hbWVwcmVwKHBhcnRpdGlvblszXSkpO3Jlc3VsdD1rZWNjYWsyNTYoY29uY2F0KFtyZXN1bHQsa2VjY2FrMjU2KGxhYmVsKV0pKTtuYW1lPXBhcnRpdGlvblsyXXx8XCJcIn1yZXR1cm4gaGV4bGlmeShyZXN1bHQpfWNvbnN0IG1lc3NhZ2VQcmVmaXg9XCJcdTAwMTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcXG5cIjtmdW5jdGlvbiBoYXNoTWVzc2FnZShtZXNzYWdlKXtpZih0eXBlb2YgbWVzc2FnZT09PVwic3RyaW5nXCIpe21lc3NhZ2U9dG9VdGY4Qnl0ZXMobWVzc2FnZSl9cmV0dXJuIGtlY2NhazI1Nihjb25jYXQoW3RvVXRmOEJ5dGVzKG1lc3NhZ2VQcmVmaXgpLHRvVXRmOEJ5dGVzKFN0cmluZyhtZXNzYWdlLmxlbmd0aCkpLG1lc3NhZ2VdKSl9dmFyIF9fYXdhaXRlciQxPXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkYz1uZXcgTG9nZ2VyKHZlcnNpb24kOCk7Y29uc3QgcGFkZGluZz1uZXcgVWludDhBcnJheSgzMik7cGFkZGluZy5maWxsKDApO2NvbnN0IE5lZ2F0aXZlT25lJDI9QmlnTnVtYmVyLmZyb20oLTEpO2NvbnN0IFplcm8kMj1CaWdOdW1iZXIuZnJvbSgwKTtjb25zdCBPbmUkMT1CaWdOdW1iZXIuZnJvbSgxKTtjb25zdCBNYXhVaW50MjU2JDE9QmlnTnVtYmVyLmZyb20oXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIik7ZnVuY3Rpb24gaGV4UGFkUmlnaHQodmFsdWUpe2NvbnN0IGJ5dGVzPWFycmF5aWZ5KHZhbHVlKTtjb25zdCBwYWRPZmZzZXQ9Ynl0ZXMubGVuZ3RoJTMyO2lmKHBhZE9mZnNldCl7cmV0dXJuIGhleENvbmNhdChbYnl0ZXMscGFkZGluZy5zbGljZShwYWRPZmZzZXQpXSl9cmV0dXJuIGhleGxpZnkoYnl0ZXMpfWNvbnN0IGhleFRydWU9aGV4WmVyb1BhZChPbmUkMS50b0hleFN0cmluZygpLDMyKTtjb25zdCBoZXhGYWxzZT1oZXhaZXJvUGFkKFplcm8kMi50b0hleFN0cmluZygpLDMyKTtjb25zdCBkb21haW5GaWVsZFR5cGVzPXtuYW1lOlwic3RyaW5nXCIsdmVyc2lvbjpcInN0cmluZ1wiLGNoYWluSWQ6XCJ1aW50MjU2XCIsdmVyaWZ5aW5nQ29udHJhY3Q6XCJhZGRyZXNzXCIsc2FsdDpcImJ5dGVzMzJcIn07Y29uc3QgZG9tYWluRmllbGROYW1lcz1bXCJuYW1lXCIsXCJ2ZXJzaW9uXCIsXCJjaGFpbklkXCIsXCJ2ZXJpZnlpbmdDb250cmFjdFwiLFwic2FsdFwiXTtmdW5jdGlvbiBjaGVja1N0cmluZyhrZXkpe3JldHVybiBmdW5jdGlvbih2YWx1ZSl7aWYodHlwZW9mIHZhbHVlIT09XCJzdHJpbmdcIil7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIGRvbWFpbiB2YWx1ZSBmb3IgJHtKU09OLnN0cmluZ2lmeShrZXkpfWAsYGRvbWFpbi4ke2tleX1gLHZhbHVlKX1yZXR1cm4gdmFsdWV9fWNvbnN0IGRvbWFpbkNoZWNrcz17bmFtZTpjaGVja1N0cmluZyhcIm5hbWVcIiksdmVyc2lvbjpjaGVja1N0cmluZyhcInZlcnNpb25cIiksY2hhaW5JZDpmdW5jdGlvbih2YWx1ZSl7dHJ5e3JldHVybiBCaWdOdW1iZXIuZnJvbSh2YWx1ZSkudG9TdHJpbmcoKX1jYXRjaChlcnJvcil7fXJldHVybiBsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgZG9tYWluIHZhbHVlIGZvciBcImNoYWluSWRcImAsXCJkb21haW4uY2hhaW5JZFwiLHZhbHVlKX0sdmVyaWZ5aW5nQ29udHJhY3Q6ZnVuY3Rpb24odmFsdWUpe3RyeXtyZXR1cm4gZ2V0QWRkcmVzcyh2YWx1ZSkudG9Mb3dlckNhc2UoKX1jYXRjaChlcnJvcil7fXJldHVybiBsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgZG9tYWluIHZhbHVlIFwidmVyaWZ5aW5nQ29udHJhY3RcImAsXCJkb21haW4udmVyaWZ5aW5nQ29udHJhY3RcIix2YWx1ZSl9LHNhbHQ6ZnVuY3Rpb24odmFsdWUpe3RyeXtjb25zdCBieXRlcz1hcnJheWlmeSh2YWx1ZSk7aWYoYnl0ZXMubGVuZ3RoIT09MzIpe3Rocm93IG5ldyBFcnJvcihcImJhZCBsZW5ndGhcIil9cmV0dXJuIGhleGxpZnkoYnl0ZXMpfWNhdGNoKGVycm9yKXt9cmV0dXJuIGxvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBkb21haW4gdmFsdWUgXCJzYWx0XCJgLFwiZG9tYWluLnNhbHRcIix2YWx1ZSl9fTtmdW5jdGlvbiBnZXRCYXNlRW5jb2Rlcih0eXBlKXt7Y29uc3QgbWF0Y2g9dHlwZS5tYXRjaCgvXih1PylpbnQoXFxkKikkLyk7aWYobWF0Y2gpe2NvbnN0IHNpZ25lZD1tYXRjaFsxXT09PVwiXCI7Y29uc3Qgd2lkdGg9cGFyc2VJbnQobWF0Y2hbMl18fFwiMjU2XCIpO2lmKHdpZHRoJTghPT0wfHx3aWR0aD4yNTZ8fG1hdGNoWzJdJiZtYXRjaFsyXSE9PVN0cmluZyh3aWR0aCkpe2xvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbnVtZXJpYyB3aWR0aFwiLFwidHlwZVwiLHR5cGUpfWNvbnN0IGJvdW5kc1VwcGVyPU1heFVpbnQyNTYkMS5tYXNrKHNpZ25lZD93aWR0aC0xOndpZHRoKTtjb25zdCBib3VuZHNMb3dlcj1zaWduZWQ/Ym91bmRzVXBwZXIuYWRkKE9uZSQxKS5tdWwoTmVnYXRpdmVPbmUkMik6WmVybyQyO3JldHVybiBmdW5jdGlvbih2YWx1ZSl7Y29uc3Qgdj1CaWdOdW1iZXIuZnJvbSh2YWx1ZSk7aWYodi5sdChib3VuZHNMb3dlcil8fHYuZ3QoYm91bmRzVXBwZXIpKXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYHZhbHVlIG91dC1vZi1ib3VuZHMgZm9yICR7dHlwZX1gLFwidmFsdWVcIix2YWx1ZSl9cmV0dXJuIGhleFplcm9QYWQodi50b1R3b3MoMjU2KS50b0hleFN0cmluZygpLDMyKX19fXtjb25zdCBtYXRjaD10eXBlLm1hdGNoKC9eYnl0ZXMoXFxkKykkLyk7aWYobWF0Y2gpe2NvbnN0IHdpZHRoPXBhcnNlSW50KG1hdGNoWzFdKTtpZih3aWR0aD09PTB8fHdpZHRoPjMyfHxtYXRjaFsxXSE9PVN0cmluZyh3aWR0aCkpe2xvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYnl0ZXMgd2lkdGhcIixcInR5cGVcIix0eXBlKX1yZXR1cm4gZnVuY3Rpb24odmFsdWUpe2NvbnN0IGJ5dGVzPWFycmF5aWZ5KHZhbHVlKTtpZihieXRlcy5sZW5ndGghPT13aWR0aCl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIGxlbmd0aCBmb3IgJHt0eXBlfWAsXCJ2YWx1ZVwiLHZhbHVlKX1yZXR1cm4gaGV4UGFkUmlnaHQodmFsdWUpfX19c3dpdGNoKHR5cGUpe2Nhc2VcImFkZHJlc3NcIjpyZXR1cm4gZnVuY3Rpb24odmFsdWUpe3JldHVybiBoZXhaZXJvUGFkKGdldEFkZHJlc3ModmFsdWUpLDMyKX07Y2FzZVwiYm9vbFwiOnJldHVybiBmdW5jdGlvbih2YWx1ZSl7cmV0dXJuIXZhbHVlP2hleEZhbHNlOmhleFRydWV9O2Nhc2VcImJ5dGVzXCI6cmV0dXJuIGZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4ga2VjY2FrMjU2KHZhbHVlKX07Y2FzZVwic3RyaW5nXCI6cmV0dXJuIGZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gaWQodmFsdWUpfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBlbmNvZGVUeXBlKG5hbWUsZmllbGRzKXtyZXR1cm5gJHtuYW1lfSgke2ZpZWxkcy5tYXAoKHtuYW1lOm5hbWUsdHlwZTp0eXBlfSk9PnR5cGUrXCIgXCIrbmFtZSkuam9pbihcIixcIil9KWB9Y2xhc3MgVHlwZWREYXRhRW5jb2Rlcntjb25zdHJ1Y3Rvcih0eXBlcyl7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInR5cGVzXCIsT2JqZWN0LmZyZWV6ZShkZWVwQ29weSh0eXBlcykpKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2VuY29kZXJDYWNoZVwiLHt9KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX3R5cGVzXCIse30pO2NvbnN0IGxpbmtzPXt9O2NvbnN0IHBhcmVudHM9e307Y29uc3Qgc3VidHlwZXM9e307T2JqZWN0LmtleXModHlwZXMpLmZvckVhY2godHlwZT0+e2xpbmtzW3R5cGVdPXt9O3BhcmVudHNbdHlwZV09W107c3VidHlwZXNbdHlwZV09e319KTtmb3IoY29uc3QgbmFtZSBpbiB0eXBlcyl7Y29uc3QgdW5pcXVlTmFtZXM9e307dHlwZXNbbmFtZV0uZm9yRWFjaChmaWVsZD0+e2lmKHVuaXF1ZU5hbWVzW2ZpZWxkLm5hbWVdKXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYGR1cGxpY2F0ZSB2YXJpYWJsZSBuYW1lICR7SlNPTi5zdHJpbmdpZnkoZmllbGQubmFtZSl9IGluICR7SlNPTi5zdHJpbmdpZnkobmFtZSl9YCxcInR5cGVzXCIsdHlwZXMpfXVuaXF1ZU5hbWVzW2ZpZWxkLm5hbWVdPXRydWU7Y29uc3QgYmFzZVR5cGU9ZmllbGQudHlwZS5tYXRjaCgvXihbXlxceDViXSopKFxceDVifCQpLylbMV07aWYoYmFzZVR5cGU9PT1uYW1lKXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYGNpcmN1bGFyIHR5cGUgcmVmZXJlbmNlIHRvICR7SlNPTi5zdHJpbmdpZnkoYmFzZVR5cGUpfWAsXCJ0eXBlc1wiLHR5cGVzKX1jb25zdCBlbmNvZGVyPWdldEJhc2VFbmNvZGVyKGJhc2VUeXBlKTtpZihlbmNvZGVyKXtyZXR1cm59aWYoIXBhcmVudHNbYmFzZVR5cGVdKXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYHVua25vd24gdHlwZSAke0pTT04uc3RyaW5naWZ5KGJhc2VUeXBlKX1gLFwidHlwZXNcIix0eXBlcyl9cGFyZW50c1tiYXNlVHlwZV0ucHVzaChuYW1lKTtsaW5rc1tuYW1lXVtiYXNlVHlwZV09dHJ1ZX0pfWNvbnN0IHByaW1hcnlUeXBlcz1PYmplY3Qua2V5cyhwYXJlbnRzKS5maWx0ZXIobj0+cGFyZW50c1tuXS5sZW5ndGg9PT0wKTtpZihwcmltYXJ5VHlwZXMubGVuZ3RoPT09MCl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKFwibWlzc2luZyBwcmltYXJ5IHR5cGVcIixcInR5cGVzXCIsdHlwZXMpfWVsc2UgaWYocHJpbWFyeVR5cGVzLmxlbmd0aD4xKXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYGFtYmlndW91cyBwcmltYXJ5IHR5cGVzIG9yIHVudXNlZCB0eXBlczogJHtwcmltYXJ5VHlwZXMubWFwKHQ9PkpTT04uc3RyaW5naWZ5KHQpKS5qb2luKFwiLCBcIil9YCxcInR5cGVzXCIsdHlwZXMpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJwcmltYXJ5VHlwZVwiLHByaW1hcnlUeXBlc1swXSk7ZnVuY3Rpb24gY2hlY2tDaXJjdWxhcih0eXBlLGZvdW5kKXtpZihmb3VuZFt0eXBlXSl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGBjaXJjdWxhciB0eXBlIHJlZmVyZW5jZSB0byAke0pTT04uc3RyaW5naWZ5KHR5cGUpfWAsXCJ0eXBlc1wiLHR5cGVzKX1mb3VuZFt0eXBlXT10cnVlO09iamVjdC5rZXlzKGxpbmtzW3R5cGVdKS5mb3JFYWNoKGNoaWxkPT57aWYoIXBhcmVudHNbY2hpbGRdKXtyZXR1cm59Y2hlY2tDaXJjdWxhcihjaGlsZCxmb3VuZCk7T2JqZWN0LmtleXMoZm91bmQpLmZvckVhY2goc3VidHlwZT0+e3N1YnR5cGVzW3N1YnR5cGVdW2NoaWxkXT10cnVlfSl9KTtkZWxldGUgZm91bmRbdHlwZV19Y2hlY2tDaXJjdWxhcih0aGlzLnByaW1hcnlUeXBlLHt9KTtmb3IoY29uc3QgbmFtZSBpbiBzdWJ0eXBlcyl7Y29uc3Qgc3Q9T2JqZWN0LmtleXMoc3VidHlwZXNbbmFtZV0pO3N0LnNvcnQoKTt0aGlzLl90eXBlc1tuYW1lXT1lbmNvZGVUeXBlKG5hbWUsdHlwZXNbbmFtZV0pK3N0Lm1hcCh0PT5lbmNvZGVUeXBlKHQsdHlwZXNbdF0pKS5qb2luKFwiXCIpfX1nZXRFbmNvZGVyKHR5cGUpe2xldCBlbmNvZGVyPXRoaXMuX2VuY29kZXJDYWNoZVt0eXBlXTtpZighZW5jb2Rlcil7ZW5jb2Rlcj10aGlzLl9lbmNvZGVyQ2FjaGVbdHlwZV09dGhpcy5fZ2V0RW5jb2Rlcih0eXBlKX1yZXR1cm4gZW5jb2Rlcn1fZ2V0RW5jb2Rlcih0eXBlKXt7Y29uc3QgZW5jb2Rlcj1nZXRCYXNlRW5jb2Rlcih0eXBlKTtpZihlbmNvZGVyKXtyZXR1cm4gZW5jb2Rlcn19Y29uc3QgbWF0Y2g9dHlwZS5tYXRjaCgvXiguKikoXFx4NWIoXFxkKilcXHg1ZCkkLyk7aWYobWF0Y2gpe2NvbnN0IHN1YnR5cGU9bWF0Y2hbMV07Y29uc3Qgc3ViRW5jb2Rlcj10aGlzLmdldEVuY29kZXIoc3VidHlwZSk7Y29uc3QgbGVuZ3RoPXBhcnNlSW50KG1hdGNoWzNdKTtyZXR1cm4gdmFsdWU9PntpZihsZW5ndGg+PTAmJnZhbHVlLmxlbmd0aCE9PWxlbmd0aCl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKFwiYXJyYXkgbGVuZ3RoIG1pc21hdGNoOyBleHBlY3RlZCBsZW5ndGggJHsgYXJyYXlMZW5ndGggfVwiLFwidmFsdWVcIix2YWx1ZSl9bGV0IHJlc3VsdD12YWx1ZS5tYXAoc3ViRW5jb2Rlcik7aWYodGhpcy5fdHlwZXNbc3VidHlwZV0pe3Jlc3VsdD1yZXN1bHQubWFwKGtlY2NhazI1Nil9cmV0dXJuIGtlY2NhazI1NihoZXhDb25jYXQocmVzdWx0KSl9fWNvbnN0IGZpZWxkcz10aGlzLnR5cGVzW3R5cGVdO2lmKGZpZWxkcyl7Y29uc3QgZW5jb2RlZFR5cGU9aWQodGhpcy5fdHlwZXNbdHlwZV0pO3JldHVybiB2YWx1ZT0+e2NvbnN0IHZhbHVlcz1maWVsZHMubWFwKCh7bmFtZTpuYW1lLHR5cGU6dHlwZX0pPT57Y29uc3QgcmVzdWx0PXRoaXMuZ2V0RW5jb2Rlcih0eXBlKSh2YWx1ZVtuYW1lXSk7aWYodGhpcy5fdHlwZXNbdHlwZV0pe3JldHVybiBrZWNjYWsyNTYocmVzdWx0KX1yZXR1cm4gcmVzdWx0fSk7dmFsdWVzLnVuc2hpZnQoZW5jb2RlZFR5cGUpO3JldHVybiBoZXhDb25jYXQodmFsdWVzKX19cmV0dXJuIGxvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihgdW5rbm93biB0eXBlOiAke3R5cGV9YCxcInR5cGVcIix0eXBlKX1lbmNvZGVUeXBlKG5hbWUpe2NvbnN0IHJlc3VsdD10aGlzLl90eXBlc1tuYW1lXTtpZighcmVzdWx0KXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYHVua25vd24gdHlwZTogJHtKU09OLnN0cmluZ2lmeShuYW1lKX1gLFwibmFtZVwiLG5hbWUpfXJldHVybiByZXN1bHR9ZW5jb2RlRGF0YSh0eXBlLHZhbHVlKXtyZXR1cm4gdGhpcy5nZXRFbmNvZGVyKHR5cGUpKHZhbHVlKX1oYXNoU3RydWN0KG5hbWUsdmFsdWUpe3JldHVybiBrZWNjYWsyNTYodGhpcy5lbmNvZGVEYXRhKG5hbWUsdmFsdWUpKX1lbmNvZGUodmFsdWUpe3JldHVybiB0aGlzLmVuY29kZURhdGEodGhpcy5wcmltYXJ5VHlwZSx2YWx1ZSl9aGFzaCh2YWx1ZSl7cmV0dXJuIHRoaXMuaGFzaFN0cnVjdCh0aGlzLnByaW1hcnlUeXBlLHZhbHVlKX1fdmlzaXQodHlwZSx2YWx1ZSxjYWxsYmFjayl7e2NvbnN0IGVuY29kZXI9Z2V0QmFzZUVuY29kZXIodHlwZSk7aWYoZW5jb2Rlcil7cmV0dXJuIGNhbGxiYWNrKHR5cGUsdmFsdWUpfX1jb25zdCBtYXRjaD10eXBlLm1hdGNoKC9eKC4qKShcXHg1YihcXGQqKVxceDVkKSQvKTtpZihtYXRjaCl7Y29uc3Qgc3VidHlwZT1tYXRjaFsxXTtjb25zdCBsZW5ndGg9cGFyc2VJbnQobWF0Y2hbM10pO2lmKGxlbmd0aD49MCYmdmFsdWUubGVuZ3RoIT09bGVuZ3RoKXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoXCJhcnJheSBsZW5ndGggbWlzbWF0Y2g7IGV4cGVjdGVkIGxlbmd0aCAkeyBhcnJheUxlbmd0aCB9XCIsXCJ2YWx1ZVwiLHZhbHVlKX1yZXR1cm4gdmFsdWUubWFwKHY9PnRoaXMuX3Zpc2l0KHN1YnR5cGUsdixjYWxsYmFjaykpfWNvbnN0IGZpZWxkcz10aGlzLnR5cGVzW3R5cGVdO2lmKGZpZWxkcyl7cmV0dXJuIGZpZWxkcy5yZWR1Y2UoKGFjY3VtLHtuYW1lOm5hbWUsdHlwZTp0eXBlfSk9PnthY2N1bVtuYW1lXT10aGlzLl92aXNpdCh0eXBlLHZhbHVlW25hbWVdLGNhbGxiYWNrKTtyZXR1cm4gYWNjdW19LHt9KX1yZXR1cm4gbG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGB1bmtub3duIHR5cGU6ICR7dHlwZX1gLFwidHlwZVwiLHR5cGUpfXZpc2l0KHZhbHVlLGNhbGxiYWNrKXtyZXR1cm4gdGhpcy5fdmlzaXQodGhpcy5wcmltYXJ5VHlwZSx2YWx1ZSxjYWxsYmFjayl9c3RhdGljIGZyb20odHlwZXMpe3JldHVybiBuZXcgVHlwZWREYXRhRW5jb2Rlcih0eXBlcyl9c3RhdGljIGdldFByaW1hcnlUeXBlKHR5cGVzKXtyZXR1cm4gVHlwZWREYXRhRW5jb2Rlci5mcm9tKHR5cGVzKS5wcmltYXJ5VHlwZX1zdGF0aWMgaGFzaFN0cnVjdChuYW1lLHR5cGVzLHZhbHVlKXtyZXR1cm4gVHlwZWREYXRhRW5jb2Rlci5mcm9tKHR5cGVzKS5oYXNoU3RydWN0KG5hbWUsdmFsdWUpfXN0YXRpYyBoYXNoRG9tYWluKGRvbWFpbil7Y29uc3QgZG9tYWluRmllbGRzPVtdO2Zvcihjb25zdCBuYW1lIGluIGRvbWFpbil7Y29uc3QgdHlwZT1kb21haW5GaWVsZFR5cGVzW25hbWVdO2lmKCF0eXBlKXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgdHlwZWQtZGF0YSBkb21haW4ga2V5OiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWAsXCJkb21haW5cIixkb21haW4pfWRvbWFpbkZpZWxkcy5wdXNoKHtuYW1lOm5hbWUsdHlwZTp0eXBlfSl9ZG9tYWluRmllbGRzLnNvcnQoKGEsYik9PntyZXR1cm4gZG9tYWluRmllbGROYW1lcy5pbmRleE9mKGEubmFtZSktZG9tYWluRmllbGROYW1lcy5pbmRleE9mKGIubmFtZSl9KTtyZXR1cm4gVHlwZWREYXRhRW5jb2Rlci5oYXNoU3RydWN0KFwiRUlQNzEyRG9tYWluXCIse0VJUDcxMkRvbWFpbjpkb21haW5GaWVsZHN9LGRvbWFpbil9c3RhdGljIGVuY29kZShkb21haW4sdHlwZXMsdmFsdWUpe3JldHVybiBoZXhDb25jYXQoW1wiMHgxOTAxXCIsVHlwZWREYXRhRW5jb2Rlci5oYXNoRG9tYWluKGRvbWFpbiksVHlwZWREYXRhRW5jb2Rlci5mcm9tKHR5cGVzKS5oYXNoKHZhbHVlKV0pfXN0YXRpYyBoYXNoKGRvbWFpbix0eXBlcyx2YWx1ZSl7cmV0dXJuIGtlY2NhazI1NihUeXBlZERhdGFFbmNvZGVyLmVuY29kZShkb21haW4sdHlwZXMsdmFsdWUpKX1zdGF0aWMgcmVzb2x2ZU5hbWVzKGRvbWFpbix0eXBlcyx2YWx1ZSxyZXNvbHZlTmFtZSl7cmV0dXJuIF9fYXdhaXRlciQxKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtkb21haW49c2hhbGxvd0NvcHkoZG9tYWluKTtjb25zdCBlbnNDYWNoZT17fTtpZihkb21haW4udmVyaWZ5aW5nQ29udHJhY3QmJiFpc0hleFN0cmluZyhkb21haW4udmVyaWZ5aW5nQ29udHJhY3QsMjApKXtlbnNDYWNoZVtkb21haW4udmVyaWZ5aW5nQ29udHJhY3RdPVwiMHhcIn1jb25zdCBlbmNvZGVyPVR5cGVkRGF0YUVuY29kZXIuZnJvbSh0eXBlcyk7ZW5jb2Rlci52aXNpdCh2YWx1ZSwodHlwZSx2YWx1ZSk9PntpZih0eXBlPT09XCJhZGRyZXNzXCImJiFpc0hleFN0cmluZyh2YWx1ZSwyMCkpe2Vuc0NhY2hlW3ZhbHVlXT1cIjB4XCJ9cmV0dXJuIHZhbHVlfSk7Zm9yKGNvbnN0IG5hbWUgaW4gZW5zQ2FjaGUpe2Vuc0NhY2hlW25hbWVdPXlpZWxkIHJlc29sdmVOYW1lKG5hbWUpfWlmKGRvbWFpbi52ZXJpZnlpbmdDb250cmFjdCYmZW5zQ2FjaGVbZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XSl7ZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0PWVuc0NhY2hlW2RvbWFpbi52ZXJpZnlpbmdDb250cmFjdF19dmFsdWU9ZW5jb2Rlci52aXNpdCh2YWx1ZSwodHlwZSx2YWx1ZSk9PntpZih0eXBlPT09XCJhZGRyZXNzXCImJmVuc0NhY2hlW3ZhbHVlXSl7cmV0dXJuIGVuc0NhY2hlW3ZhbHVlXX1yZXR1cm4gdmFsdWV9KTtyZXR1cm57ZG9tYWluOmRvbWFpbix2YWx1ZTp2YWx1ZX19KX1zdGF0aWMgZ2V0UGF5bG9hZChkb21haW4sdHlwZXMsdmFsdWUpe1R5cGVkRGF0YUVuY29kZXIuaGFzaERvbWFpbihkb21haW4pO2NvbnN0IGRvbWFpblZhbHVlcz17fTtjb25zdCBkb21haW5UeXBlcz1bXTtkb21haW5GaWVsZE5hbWVzLmZvckVhY2gobmFtZT0+e2NvbnN0IHZhbHVlPWRvbWFpbltuYW1lXTtpZih2YWx1ZT09bnVsbCl7cmV0dXJufWRvbWFpblZhbHVlc1tuYW1lXT1kb21haW5DaGVja3NbbmFtZV0odmFsdWUpO2RvbWFpblR5cGVzLnB1c2goe25hbWU6bmFtZSx0eXBlOmRvbWFpbkZpZWxkVHlwZXNbbmFtZV19KX0pO2NvbnN0IGVuY29kZXI9VHlwZWREYXRhRW5jb2Rlci5mcm9tKHR5cGVzKTtjb25zdCB0eXBlc1dpdGhEb21haW49c2hhbGxvd0NvcHkodHlwZXMpO2lmKHR5cGVzV2l0aERvbWFpbi5FSVA3MTJEb21haW4pe2xvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihcInR5cGVzIG11c3Qgbm90IGNvbnRhaW4gRUlQNzEyRG9tYWluIHR5cGVcIixcInR5cGVzLkVJUDcxMkRvbWFpblwiLHR5cGVzKX1lbHNle3R5cGVzV2l0aERvbWFpbi5FSVA3MTJEb21haW49ZG9tYWluVHlwZXN9ZW5jb2Rlci5lbmNvZGUodmFsdWUpO3JldHVybnt0eXBlczp0eXBlc1dpdGhEb21haW4sZG9tYWluOmRvbWFpblZhbHVlcyxwcmltYXJ5VHlwZTplbmNvZGVyLnByaW1hcnlUeXBlLG1lc3NhZ2U6ZW5jb2Rlci52aXNpdCh2YWx1ZSwodHlwZSx2YWx1ZSk9PntpZih0eXBlLm1hdGNoKC9eYnl0ZXMoXFxkKikvKSl7cmV0dXJuIGhleGxpZnkoYXJyYXlpZnkodmFsdWUpKX1pZih0eXBlLm1hdGNoKC9edT9pbnQvKSl7cmV0dXJuIEJpZ051bWJlci5mcm9tKHZhbHVlKS50b1N0cmluZygpfXN3aXRjaCh0eXBlKXtjYXNlXCJhZGRyZXNzXCI6cmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7Y2FzZVwiYm9vbFwiOnJldHVybiEhdmFsdWU7Y2FzZVwic3RyaW5nXCI6aWYodHlwZW9mIHZhbHVlIT09XCJzdHJpbmdcIil7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIHN0cmluZ2AsXCJ2YWx1ZVwiLHZhbHVlKX1yZXR1cm4gdmFsdWV9cmV0dXJuIGxvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIHR5cGVcIixcInR5cGVcIix0eXBlKX0pfX19XCJ1c2Ugc3RyaWN0XCI7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJGQ9bmV3IExvZ2dlcih2ZXJzaW9uJDQpO2NsYXNzIExvZ0Rlc2NyaXB0aW9uIGV4dGVuZHMgRGVzY3JpcHRpb257fWNsYXNzIFRyYW5zYWN0aW9uRGVzY3JpcHRpb24gZXh0ZW5kcyBEZXNjcmlwdGlvbnt9Y2xhc3MgSW5kZXhlZCBleHRlbmRzIERlc2NyaXB0aW9ue3N0YXRpYyBpc0luZGV4ZWQodmFsdWUpe3JldHVybiEhKHZhbHVlJiZ2YWx1ZS5faXNJbmRleGVkKX19ZnVuY3Rpb24gd3JhcEFjY2Vzc0Vycm9yKHByb3BlcnR5LGVycm9yKXtjb25zdCB3cmFwPW5ldyBFcnJvcihgZGVmZXJyZWQgZXJyb3IgZHVyaW5nIEFCSSBkZWNvZGluZyB0cmlnZ2VyZWQgYWNjZXNzaW5nICR7cHJvcGVydHl9YCk7d3JhcC5lcnJvcj1lcnJvcjtyZXR1cm4gd3JhcH1jbGFzcyBJbnRlcmZhY2V7Y29uc3RydWN0b3IoZnJhZ21lbnRzKXtsb2dnZXIkZC5jaGVja05ldyhuZXcudGFyZ2V0LEludGVyZmFjZSk7bGV0IGFiaT1bXTtpZih0eXBlb2YgZnJhZ21lbnRzPT09XCJzdHJpbmdcIil7YWJpPUpTT04ucGFyc2UoZnJhZ21lbnRzKX1lbHNle2FiaT1mcmFnbWVudHN9ZGVmaW5lUmVhZE9ubHkodGhpcyxcImZyYWdtZW50c1wiLGFiaS5tYXAoZnJhZ21lbnQ9PntyZXR1cm4gRnJhZ21lbnQuZnJvbShmcmFnbWVudCl9KS5maWx0ZXIoZnJhZ21lbnQ9PmZyYWdtZW50IT1udWxsKSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9hYmlDb2RlclwiLGdldFN0YXRpYyhuZXcudGFyZ2V0LFwiZ2V0QWJpQ29kZXJcIikoKSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImZ1bmN0aW9uc1wiLHt9KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiZXJyb3JzXCIse30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJldmVudHNcIix7fSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInN0cnVjdHNcIix7fSk7dGhpcy5mcmFnbWVudHMuZm9yRWFjaChmcmFnbWVudD0+e2xldCBidWNrZXQ9bnVsbDtzd2l0Y2goZnJhZ21lbnQudHlwZSl7Y2FzZVwiY29uc3RydWN0b3JcIjppZih0aGlzLmRlcGxveSl7bG9nZ2VyJGQud2FybihcImR1cGxpY2F0ZSBkZWZpbml0aW9uIC0gY29uc3RydWN0b3JcIik7cmV0dXJufWRlZmluZVJlYWRPbmx5KHRoaXMsXCJkZXBsb3lcIixmcmFnbWVudCk7cmV0dXJuO2Nhc2VcImZ1bmN0aW9uXCI6YnVja2V0PXRoaXMuZnVuY3Rpb25zO2JyZWFrO2Nhc2VcImV2ZW50XCI6YnVja2V0PXRoaXMuZXZlbnRzO2JyZWFrO2RlZmF1bHQ6cmV0dXJufWxldCBzaWduYXR1cmU9ZnJhZ21lbnQuZm9ybWF0KCk7aWYoYnVja2V0W3NpZ25hdHVyZV0pe2xvZ2dlciRkLndhcm4oXCJkdXBsaWNhdGUgZGVmaW5pdGlvbiAtIFwiK3NpZ25hdHVyZSk7cmV0dXJufWJ1Y2tldFtzaWduYXR1cmVdPWZyYWdtZW50fSk7aWYoIXRoaXMuZGVwbG95KXtkZWZpbmVSZWFkT25seSh0aGlzLFwiZGVwbG95XCIsQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tKHtwYXlhYmxlOmZhbHNlLHR5cGU6XCJjb25zdHJ1Y3RvclwifSkpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJfaXNJbnRlcmZhY2VcIix0cnVlKX1mb3JtYXQoZm9ybWF0KXtpZighZm9ybWF0KXtmb3JtYXQ9Rm9ybWF0VHlwZXMuZnVsbH1pZihmb3JtYXQ9PT1Gb3JtYXRUeXBlcy5zaWdoYXNoKXtsb2dnZXIkZC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnRlcmZhY2UgZG9lcyBub3Qgc3VwcG9ydCBmb3JtYXR0aW5nIHNpZ2hhc2hcIixcImZvcm1hdFwiLGZvcm1hdCl9Y29uc3QgYWJpPXRoaXMuZnJhZ21lbnRzLm1hcChmcmFnbWVudD0+ZnJhZ21lbnQuZm9ybWF0KGZvcm1hdCkpO2lmKGZvcm1hdD09PUZvcm1hdFR5cGVzLmpzb24pe3JldHVybiBKU09OLnN0cmluZ2lmeShhYmkubWFwKGo9PkpTT04ucGFyc2UoaikpKX1yZXR1cm4gYWJpfXN0YXRpYyBnZXRBYmlDb2Rlcigpe3JldHVybiBkZWZhdWx0QWJpQ29kZXJ9c3RhdGljIGdldEFkZHJlc3MoYWRkcmVzcyl7cmV0dXJuIGdldEFkZHJlc3MoYWRkcmVzcyl9c3RhdGljIGdldFNpZ2hhc2goZnVuY3Rpb25GcmFnbWVudCl7cmV0dXJuIGhleERhdGFTbGljZShpZChmdW5jdGlvbkZyYWdtZW50LmZvcm1hdCgpKSwwLDQpfXN0YXRpYyBnZXRFdmVudFRvcGljKGV2ZW50RnJhZ21lbnQpe3JldHVybiBpZChldmVudEZyYWdtZW50LmZvcm1hdCgpKX1nZXRGdW5jdGlvbihuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gpe2lmKGlzSGV4U3RyaW5nKG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaCkpe2Zvcihjb25zdCBuYW1lIGluIHRoaXMuZnVuY3Rpb25zKXtpZihuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2g9PT10aGlzLmdldFNpZ2hhc2gobmFtZSkpe3JldHVybiB0aGlzLmZ1bmN0aW9uc1tuYW1lXX19bG9nZ2VyJGQudGhyb3dBcmd1bWVudEVycm9yKFwibm8gbWF0Y2hpbmcgZnVuY3Rpb25cIixcInNpZ2hhc2hcIixuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gpfWlmKG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaC5pbmRleE9mKFwiKFwiKT09PS0xKXtjb25zdCBuYW1lPW5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaC50cmltKCk7Y29uc3QgbWF0Y2hpbmc9T2JqZWN0LmtleXModGhpcy5mdW5jdGlvbnMpLmZpbHRlcihmPT5mLnNwbGl0KFwiKFwiKVswXT09PW5hbWUpO2lmKG1hdGNoaW5nLmxlbmd0aD09PTApe2xvZ2dlciRkLnRocm93QXJndW1lbnRFcnJvcihcIm5vIG1hdGNoaW5nIGZ1bmN0aW9uXCIsXCJuYW1lXCIsbmFtZSl9ZWxzZSBpZihtYXRjaGluZy5sZW5ndGg+MSl7bG9nZ2VyJGQudGhyb3dBcmd1bWVudEVycm9yKFwibXVsdGlwbGUgbWF0Y2hpbmcgZnVuY3Rpb25zXCIsXCJuYW1lXCIsbmFtZSl9cmV0dXJuIHRoaXMuZnVuY3Rpb25zW21hdGNoaW5nWzBdXX1jb25zdCByZXN1bHQ9dGhpcy5mdW5jdGlvbnNbRnVuY3Rpb25GcmFnbWVudC5mcm9tU3RyaW5nKG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaCkuZm9ybWF0KCldO2lmKCFyZXN1bHQpe2xvZ2dlciRkLnRocm93QXJndW1lbnRFcnJvcihcIm5vIG1hdGNoaW5nIGZ1bmN0aW9uXCIsXCJzaWduYXR1cmVcIixuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gpfXJldHVybiByZXN1bHR9Z2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYyl7aWYoaXNIZXhTdHJpbmcobmFtZU9yU2lnbmF0dXJlT3JUb3BpYykpe2NvbnN0IHRvcGljaGFzaD1uYW1lT3JTaWduYXR1cmVPclRvcGljLnRvTG93ZXJDYXNlKCk7Zm9yKGNvbnN0IG5hbWUgaW4gdGhpcy5ldmVudHMpe2lmKHRvcGljaGFzaD09PXRoaXMuZ2V0RXZlbnRUb3BpYyhuYW1lKSl7cmV0dXJuIHRoaXMuZXZlbnRzW25hbWVdfX1sb2dnZXIkZC50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBldmVudFwiLFwidG9waWNoYXNoXCIsdG9waWNoYXNoKX1pZihuYW1lT3JTaWduYXR1cmVPclRvcGljLmluZGV4T2YoXCIoXCIpPT09LTEpe2NvbnN0IG5hbWU9bmFtZU9yU2lnbmF0dXJlT3JUb3BpYy50cmltKCk7Y29uc3QgbWF0Y2hpbmc9T2JqZWN0LmtleXModGhpcy5ldmVudHMpLmZpbHRlcihmPT5mLnNwbGl0KFwiKFwiKVswXT09PW5hbWUpO2lmKG1hdGNoaW5nLmxlbmd0aD09PTApe2xvZ2dlciRkLnRocm93QXJndW1lbnRFcnJvcihcIm5vIG1hdGNoaW5nIGV2ZW50XCIsXCJuYW1lXCIsbmFtZSl9ZWxzZSBpZihtYXRjaGluZy5sZW5ndGg+MSl7bG9nZ2VyJGQudGhyb3dBcmd1bWVudEVycm9yKFwibXVsdGlwbGUgbWF0Y2hpbmcgZXZlbnRzXCIsXCJuYW1lXCIsbmFtZSl9cmV0dXJuIHRoaXMuZXZlbnRzW21hdGNoaW5nWzBdXX1jb25zdCByZXN1bHQ9dGhpcy5ldmVudHNbRXZlbnRGcmFnbWVudC5mcm9tU3RyaW5nKG5hbWVPclNpZ25hdHVyZU9yVG9waWMpLmZvcm1hdCgpXTtpZighcmVzdWx0KXtsb2dnZXIkZC50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBldmVudFwiLFwic2lnbmF0dXJlXCIsbmFtZU9yU2lnbmF0dXJlT3JUb3BpYyl9cmV0dXJuIHJlc3VsdH1nZXRTaWdoYXNoKGZ1bmN0aW9uRnJhZ21lbnQpe2lmKHR5cGVvZiBmdW5jdGlvbkZyYWdtZW50PT09XCJzdHJpbmdcIil7ZnVuY3Rpb25GcmFnbWVudD10aGlzLmdldEZ1bmN0aW9uKGZ1bmN0aW9uRnJhZ21lbnQpfXJldHVybiBnZXRTdGF0aWModGhpcy5jb25zdHJ1Y3RvcixcImdldFNpZ2hhc2hcIikoZnVuY3Rpb25GcmFnbWVudCl9Z2V0RXZlbnRUb3BpYyhldmVudEZyYWdtZW50KXtpZih0eXBlb2YgZXZlbnRGcmFnbWVudD09PVwic3RyaW5nXCIpe2V2ZW50RnJhZ21lbnQ9dGhpcy5nZXRFdmVudChldmVudEZyYWdtZW50KX1yZXR1cm4gZ2V0U3RhdGljKHRoaXMuY29uc3RydWN0b3IsXCJnZXRFdmVudFRvcGljXCIpKGV2ZW50RnJhZ21lbnQpfV9kZWNvZGVQYXJhbXMocGFyYW1zLGRhdGEpe3JldHVybiB0aGlzLl9hYmlDb2Rlci5kZWNvZGUocGFyYW1zLGRhdGEpfV9lbmNvZGVQYXJhbXMocGFyYW1zLHZhbHVlcyl7cmV0dXJuIHRoaXMuX2FiaUNvZGVyLmVuY29kZShwYXJhbXMsdmFsdWVzKX1lbmNvZGVEZXBsb3kodmFsdWVzKXtyZXR1cm4gdGhpcy5fZW5jb2RlUGFyYW1zKHRoaXMuZGVwbG95LmlucHV0cyx2YWx1ZXN8fFtdKX1kZWNvZGVGdW5jdGlvbkRhdGEoZnVuY3Rpb25GcmFnbWVudCxkYXRhKXtpZih0eXBlb2YgZnVuY3Rpb25GcmFnbWVudD09PVwic3RyaW5nXCIpe2Z1bmN0aW9uRnJhZ21lbnQ9dGhpcy5nZXRGdW5jdGlvbihmdW5jdGlvbkZyYWdtZW50KX1jb25zdCBieXRlcz1hcnJheWlmeShkYXRhKTtpZihoZXhsaWZ5KGJ5dGVzLnNsaWNlKDAsNCkpIT09dGhpcy5nZXRTaWdoYXNoKGZ1bmN0aW9uRnJhZ21lbnQpKXtsb2dnZXIkZC50aHJvd0FyZ3VtZW50RXJyb3IoYGRhdGEgc2lnbmF0dXJlIGRvZXMgbm90IG1hdGNoIGZ1bmN0aW9uICR7ZnVuY3Rpb25GcmFnbWVudC5uYW1lfS5gLFwiZGF0YVwiLGhleGxpZnkoYnl0ZXMpKX1yZXR1cm4gdGhpcy5fZGVjb2RlUGFyYW1zKGZ1bmN0aW9uRnJhZ21lbnQuaW5wdXRzLGJ5dGVzLnNsaWNlKDQpKX1lbmNvZGVGdW5jdGlvbkRhdGEoZnVuY3Rpb25GcmFnbWVudCx2YWx1ZXMpe2lmKHR5cGVvZiBmdW5jdGlvbkZyYWdtZW50PT09XCJzdHJpbmdcIil7ZnVuY3Rpb25GcmFnbWVudD10aGlzLmdldEZ1bmN0aW9uKGZ1bmN0aW9uRnJhZ21lbnQpfXJldHVybiBoZXhsaWZ5KGNvbmNhdChbdGhpcy5nZXRTaWdoYXNoKGZ1bmN0aW9uRnJhZ21lbnQpLHRoaXMuX2VuY29kZVBhcmFtcyhmdW5jdGlvbkZyYWdtZW50LmlucHV0cyx2YWx1ZXN8fFtdKV0pKX1kZWNvZGVGdW5jdGlvblJlc3VsdChmdW5jdGlvbkZyYWdtZW50LGRhdGEpe2lmKHR5cGVvZiBmdW5jdGlvbkZyYWdtZW50PT09XCJzdHJpbmdcIil7ZnVuY3Rpb25GcmFnbWVudD10aGlzLmdldEZ1bmN0aW9uKGZ1bmN0aW9uRnJhZ21lbnQpfWxldCBieXRlcz1hcnJheWlmeShkYXRhKTtsZXQgcmVhc29uPW51bGw7bGV0IGVycm9yU2lnbmF0dXJlPW51bGw7c3dpdGNoKGJ5dGVzLmxlbmd0aCV0aGlzLl9hYmlDb2Rlci5fZ2V0V29yZFNpemUoKSl7Y2FzZSAwOnRyeXtyZXR1cm4gdGhpcy5fYWJpQ29kZXIuZGVjb2RlKGZ1bmN0aW9uRnJhZ21lbnQub3V0cHV0cyxieXRlcyl9Y2F0Y2goZXJyb3Ipe31icmVhaztjYXNlIDQ6aWYoaGV4bGlmeShieXRlcy5zbGljZSgwLDQpKT09PVwiMHgwOGMzNzlhMFwiKXtlcnJvclNpZ25hdHVyZT1cIkVycm9yKHN0cmluZylcIjtyZWFzb249dGhpcy5fYWJpQ29kZXIuZGVjb2RlKFtcInN0cmluZ1wiXSxieXRlcy5zbGljZSg0KSlbMF19YnJlYWt9cmV0dXJuIGxvZ2dlciRkLnRocm93RXJyb3IoXCJjYWxsIHJldmVydCBleGNlcHRpb25cIixMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OLHttZXRob2Q6ZnVuY3Rpb25GcmFnbWVudC5mb3JtYXQoKSxlcnJvclNpZ25hdHVyZTplcnJvclNpZ25hdHVyZSxlcnJvckFyZ3M6W3JlYXNvbl0scmVhc29uOnJlYXNvbn0pfWVuY29kZUZ1bmN0aW9uUmVzdWx0KGZ1bmN0aW9uRnJhZ21lbnQsdmFsdWVzKXtpZih0eXBlb2YgZnVuY3Rpb25GcmFnbWVudD09PVwic3RyaW5nXCIpe2Z1bmN0aW9uRnJhZ21lbnQ9dGhpcy5nZXRGdW5jdGlvbihmdW5jdGlvbkZyYWdtZW50KX1yZXR1cm4gaGV4bGlmeSh0aGlzLl9hYmlDb2Rlci5lbmNvZGUoZnVuY3Rpb25GcmFnbWVudC5vdXRwdXRzLHZhbHVlc3x8W10pKX1lbmNvZGVGaWx0ZXJUb3BpY3MoZXZlbnRGcmFnbWVudCx2YWx1ZXMpe2lmKHR5cGVvZiBldmVudEZyYWdtZW50PT09XCJzdHJpbmdcIil7ZXZlbnRGcmFnbWVudD10aGlzLmdldEV2ZW50KGV2ZW50RnJhZ21lbnQpfWlmKHZhbHVlcy5sZW5ndGg+ZXZlbnRGcmFnbWVudC5pbnB1dHMubGVuZ3RoKXtsb2dnZXIkZC50aHJvd0Vycm9yKFwidG9vIG1hbnkgYXJndW1lbnRzIGZvciBcIitldmVudEZyYWdtZW50LmZvcm1hdCgpLExvZ2dlci5lcnJvcnMuVU5FWFBFQ1RFRF9BUkdVTUVOVCx7YXJndW1lbnQ6XCJ2YWx1ZXNcIix2YWx1ZTp2YWx1ZXN9KX1sZXQgdG9waWNzPVtdO2lmKCFldmVudEZyYWdtZW50LmFub255bW91cyl7dG9waWNzLnB1c2godGhpcy5nZXRFdmVudFRvcGljKGV2ZW50RnJhZ21lbnQpKX1jb25zdCBlbmNvZGVUb3BpYz0ocGFyYW0sdmFsdWUpPT57aWYocGFyYW0udHlwZT09PVwic3RyaW5nXCIpe3JldHVybiBpZCh2YWx1ZSl9ZWxzZSBpZihwYXJhbS50eXBlPT09XCJieXRlc1wiKXtyZXR1cm4ga2VjY2FrMjU2KGhleGxpZnkodmFsdWUpKX1pZihwYXJhbS50eXBlPT09XCJhZGRyZXNzXCIpe3RoaXMuX2FiaUNvZGVyLmVuY29kZShbXCJhZGRyZXNzXCJdLFt2YWx1ZV0pfXJldHVybiBoZXhaZXJvUGFkKGhleGxpZnkodmFsdWUpLDMyKX07dmFsdWVzLmZvckVhY2goKHZhbHVlLGluZGV4KT0+e2xldCBwYXJhbT1ldmVudEZyYWdtZW50LmlucHV0c1tpbmRleF07aWYoIXBhcmFtLmluZGV4ZWQpe2lmKHZhbHVlIT1udWxsKXtsb2dnZXIkZC50aHJvd0FyZ3VtZW50RXJyb3IoXCJjYW5ub3QgZmlsdGVyIG5vbi1pbmRleGVkIHBhcmFtZXRlcnM7IG11c3QgYmUgbnVsbFwiLFwiY29udHJhY3QuXCIrcGFyYW0ubmFtZSx2YWx1ZSl9cmV0dXJufWlmKHZhbHVlPT1udWxsKXt0b3BpY3MucHVzaChudWxsKX1lbHNlIGlmKHBhcmFtLmJhc2VUeXBlPT09XCJhcnJheVwifHxwYXJhbS5iYXNlVHlwZT09PVwidHVwbGVcIil7bG9nZ2VyJGQudGhyb3dBcmd1bWVudEVycm9yKFwiZmlsdGVyaW5nIHdpdGggdHVwbGVzIG9yIGFycmF5cyBub3Qgc3VwcG9ydGVkXCIsXCJjb250cmFjdC5cIitwYXJhbS5uYW1lLHZhbHVlKX1lbHNlIGlmKEFycmF5LmlzQXJyYXkodmFsdWUpKXt0b3BpY3MucHVzaCh2YWx1ZS5tYXAodmFsdWU9PmVuY29kZVRvcGljKHBhcmFtLHZhbHVlKSkpfWVsc2V7dG9waWNzLnB1c2goZW5jb2RlVG9waWMocGFyYW0sdmFsdWUpKX19KTt3aGlsZSh0b3BpY3MubGVuZ3RoJiZ0b3BpY3NbdG9waWNzLmxlbmd0aC0xXT09PW51bGwpe3RvcGljcy5wb3AoKX1yZXR1cm4gdG9waWNzfWVuY29kZUV2ZW50TG9nKGV2ZW50RnJhZ21lbnQsdmFsdWVzKXtpZih0eXBlb2YgZXZlbnRGcmFnbWVudD09PVwic3RyaW5nXCIpe2V2ZW50RnJhZ21lbnQ9dGhpcy5nZXRFdmVudChldmVudEZyYWdtZW50KX1jb25zdCB0b3BpY3M9W107Y29uc3QgZGF0YVR5cGVzPVtdO2NvbnN0IGRhdGFWYWx1ZXM9W107aWYoIWV2ZW50RnJhZ21lbnQuYW5vbnltb3VzKXt0b3BpY3MucHVzaCh0aGlzLmdldEV2ZW50VG9waWMoZXZlbnRGcmFnbWVudCkpfWlmKHZhbHVlcy5sZW5ndGghPT1ldmVudEZyYWdtZW50LmlucHV0cy5sZW5ndGgpe2xvZ2dlciRkLnRocm93QXJndW1lbnRFcnJvcihcImV2ZW50IGFyZ3VtZW50cy92YWx1ZXMgbWlzbWF0Y2hcIixcInZhbHVlc1wiLHZhbHVlcyl9ZXZlbnRGcmFnbWVudC5pbnB1dHMuZm9yRWFjaCgocGFyYW0saW5kZXgpPT57Y29uc3QgdmFsdWU9dmFsdWVzW2luZGV4XTtpZihwYXJhbS5pbmRleGVkKXtpZihwYXJhbS50eXBlPT09XCJzdHJpbmdcIil7dG9waWNzLnB1c2goaWQodmFsdWUpKX1lbHNlIGlmKHBhcmFtLnR5cGU9PT1cImJ5dGVzXCIpe3RvcGljcy5wdXNoKGtlY2NhazI1Nih2YWx1ZSkpfWVsc2UgaWYocGFyYW0uYmFzZVR5cGU9PT1cInR1cGxlXCJ8fHBhcmFtLmJhc2VUeXBlPT09XCJhcnJheVwiKXt0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIil9ZWxzZXt0b3BpY3MucHVzaCh0aGlzLl9hYmlDb2Rlci5lbmNvZGUoW3BhcmFtLnR5cGVdLFt2YWx1ZV0pKX19ZWxzZXtkYXRhVHlwZXMucHVzaChwYXJhbSk7ZGF0YVZhbHVlcy5wdXNoKHZhbHVlKX19KTtyZXR1cm57ZGF0YTp0aGlzLl9hYmlDb2Rlci5lbmNvZGUoZGF0YVR5cGVzLGRhdGFWYWx1ZXMpLHRvcGljczp0b3BpY3N9fWRlY29kZUV2ZW50TG9nKGV2ZW50RnJhZ21lbnQsZGF0YSx0b3BpY3Mpe2lmKHR5cGVvZiBldmVudEZyYWdtZW50PT09XCJzdHJpbmdcIil7ZXZlbnRGcmFnbWVudD10aGlzLmdldEV2ZW50KGV2ZW50RnJhZ21lbnQpfWlmKHRvcGljcyE9bnVsbCYmIWV2ZW50RnJhZ21lbnQuYW5vbnltb3VzKXtsZXQgdG9waWNIYXNoPXRoaXMuZ2V0RXZlbnRUb3BpYyhldmVudEZyYWdtZW50KTtpZighaXNIZXhTdHJpbmcodG9waWNzWzBdLDMyKXx8dG9waWNzWzBdLnRvTG93ZXJDYXNlKCkhPT10b3BpY0hhc2gpe2xvZ2dlciRkLnRocm93RXJyb3IoXCJmcmFnbWVudC90b3BpYyBtaXNtYXRjaFwiLExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCx7YXJndW1lbnQ6XCJ0b3BpY3NbMF1cIixleHBlY3RlZDp0b3BpY0hhc2gsdmFsdWU6dG9waWNzWzBdfSl9dG9waWNzPXRvcGljcy5zbGljZSgxKX1sZXQgaW5kZXhlZD1bXTtsZXQgbm9uSW5kZXhlZD1bXTtsZXQgZHluYW1pYz1bXTtldmVudEZyYWdtZW50LmlucHV0cy5mb3JFYWNoKChwYXJhbSxpbmRleCk9PntpZihwYXJhbS5pbmRleGVkKXtpZihwYXJhbS50eXBlPT09XCJzdHJpbmdcInx8cGFyYW0udHlwZT09PVwiYnl0ZXNcInx8cGFyYW0uYmFzZVR5cGU9PT1cInR1cGxlXCJ8fHBhcmFtLmJhc2VUeXBlPT09XCJhcnJheVwiKXtpbmRleGVkLnB1c2goUGFyYW1UeXBlLmZyb21PYmplY3Qoe3R5cGU6XCJieXRlczMyXCIsbmFtZTpwYXJhbS5uYW1lfSkpO2R5bmFtaWMucHVzaCh0cnVlKX1lbHNle2luZGV4ZWQucHVzaChwYXJhbSk7ZHluYW1pYy5wdXNoKGZhbHNlKX19ZWxzZXtub25JbmRleGVkLnB1c2gocGFyYW0pO2R5bmFtaWMucHVzaChmYWxzZSl9fSk7bGV0IHJlc3VsdEluZGV4ZWQ9dG9waWNzIT1udWxsP3RoaXMuX2FiaUNvZGVyLmRlY29kZShpbmRleGVkLGNvbmNhdCh0b3BpY3MpKTpudWxsO2xldCByZXN1bHROb25JbmRleGVkPXRoaXMuX2FiaUNvZGVyLmRlY29kZShub25JbmRleGVkLGRhdGEsdHJ1ZSk7bGV0IHJlc3VsdD1bXTtsZXQgbm9uSW5kZXhlZEluZGV4PTAsaW5kZXhlZEluZGV4PTA7ZXZlbnRGcmFnbWVudC5pbnB1dHMuZm9yRWFjaCgocGFyYW0saW5kZXgpPT57aWYocGFyYW0uaW5kZXhlZCl7aWYocmVzdWx0SW5kZXhlZD09bnVsbCl7cmVzdWx0W2luZGV4XT1uZXcgSW5kZXhlZCh7X2lzSW5kZXhlZDp0cnVlLGhhc2g6bnVsbH0pfWVsc2UgaWYoZHluYW1pY1tpbmRleF0pe3Jlc3VsdFtpbmRleF09bmV3IEluZGV4ZWQoe19pc0luZGV4ZWQ6dHJ1ZSxoYXNoOnJlc3VsdEluZGV4ZWRbaW5kZXhlZEluZGV4KytdfSl9ZWxzZXt0cnl7cmVzdWx0W2luZGV4XT1yZXN1bHRJbmRleGVkW2luZGV4ZWRJbmRleCsrXX1jYXRjaChlcnJvcil7cmVzdWx0W2luZGV4XT1lcnJvcn19fWVsc2V7dHJ5e3Jlc3VsdFtpbmRleF09cmVzdWx0Tm9uSW5kZXhlZFtub25JbmRleGVkSW5kZXgrK119Y2F0Y2goZXJyb3Ipe3Jlc3VsdFtpbmRleF09ZXJyb3J9fWlmKHBhcmFtLm5hbWUmJnJlc3VsdFtwYXJhbS5uYW1lXT09bnVsbCl7Y29uc3QgdmFsdWU9cmVzdWx0W2luZGV4XTtpZih2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKXtPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LHBhcmFtLm5hbWUse2dldDooKT0+e3Rocm93IHdyYXBBY2Nlc3NFcnJvcihgcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShwYXJhbS5uYW1lKX1gLHZhbHVlKX19KX1lbHNle3Jlc3VsdFtwYXJhbS5uYW1lXT12YWx1ZX19fSk7Zm9yKGxldCBpPTA7aTxyZXN1bHQubGVuZ3RoO2krKyl7Y29uc3QgdmFsdWU9cmVzdWx0W2ldO2lmKHZhbHVlIGluc3RhbmNlb2YgRXJyb3Ipe09iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsaSx7Z2V0OigpPT57dGhyb3cgd3JhcEFjY2Vzc0Vycm9yKGBpbmRleCAke2l9YCx2YWx1ZSl9fSl9fXJldHVybiBPYmplY3QuZnJlZXplKHJlc3VsdCl9cGFyc2VUcmFuc2FjdGlvbih0eCl7bGV0IGZyYWdtZW50PXRoaXMuZ2V0RnVuY3Rpb24odHguZGF0YS5zdWJzdHJpbmcoMCwxMCkudG9Mb3dlckNhc2UoKSk7aWYoIWZyYWdtZW50KXtyZXR1cm4gbnVsbH1yZXR1cm4gbmV3IFRyYW5zYWN0aW9uRGVzY3JpcHRpb24oe2FyZ3M6dGhpcy5fYWJpQ29kZXIuZGVjb2RlKGZyYWdtZW50LmlucHV0cyxcIjB4XCIrdHguZGF0YS5zdWJzdHJpbmcoMTApKSxmdW5jdGlvbkZyYWdtZW50OmZyYWdtZW50LG5hbWU6ZnJhZ21lbnQubmFtZSxzaWduYXR1cmU6ZnJhZ21lbnQuZm9ybWF0KCksc2lnaGFzaDp0aGlzLmdldFNpZ2hhc2goZnJhZ21lbnQpLHZhbHVlOkJpZ051bWJlci5mcm9tKHR4LnZhbHVlfHxcIjBcIil9KX1wYXJzZUxvZyhsb2cpe2xldCBmcmFnbWVudD10aGlzLmdldEV2ZW50KGxvZy50b3BpY3NbMF0pO2lmKCFmcmFnbWVudHx8ZnJhZ21lbnQuYW5vbnltb3VzKXtyZXR1cm4gbnVsbH1yZXR1cm4gbmV3IExvZ0Rlc2NyaXB0aW9uKHtldmVudEZyYWdtZW50OmZyYWdtZW50LG5hbWU6ZnJhZ21lbnQubmFtZSxzaWduYXR1cmU6ZnJhZ21lbnQuZm9ybWF0KCksdG9waWM6dGhpcy5nZXRFdmVudFRvcGljKGZyYWdtZW50KSxhcmdzOnRoaXMuZGVjb2RlRXZlbnRMb2coZnJhZ21lbnQsbG9nLmRhdGEsbG9nLnRvcGljcyl9KX1zdGF0aWMgaXNJbnRlcmZhY2UodmFsdWUpe3JldHVybiEhKHZhbHVlJiZ2YWx1ZS5faXNJbnRlcmZhY2UpfX1cInVzZSBzdHJpY3RcIjtjb25zdCB2ZXJzaW9uJDk9XCJhYnN0cmFjdC1wcm92aWRlci81LjEuMFwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRlPW5ldyBMb2dnZXIodmVyc2lvbiQ5KTtjbGFzcyBGb3JrRXZlbnQgZXh0ZW5kcyBEZXNjcmlwdGlvbntzdGF0aWMgaXNGb3JrRXZlbnQodmFsdWUpe3JldHVybiEhKHZhbHVlJiZ2YWx1ZS5faXNGb3JrRXZlbnQpfX1jbGFzcyBCbG9ja0ZvcmtFdmVudCBleHRlbmRzIEZvcmtFdmVudHtjb25zdHJ1Y3RvcihibG9ja0hhc2gsZXhwaXJ5KXtpZighaXNIZXhTdHJpbmcoYmxvY2tIYXNoLDMyKSl7bG9nZ2VyJGUudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBibG9ja0hhc2hcIixcImJsb2NrSGFzaFwiLGJsb2NrSGFzaCl9c3VwZXIoe19pc0ZvcmtFdmVudDp0cnVlLF9pc0Jsb2NrRm9ya0V2ZW50OnRydWUsZXhwaXJ5OmV4cGlyeXx8MCxibG9ja0hhc2g6YmxvY2tIYXNofSl9fWNsYXNzIFRyYW5zYWN0aW9uRm9ya0V2ZW50IGV4dGVuZHMgRm9ya0V2ZW50e2NvbnN0cnVjdG9yKGhhc2gsZXhwaXJ5KXtpZighaXNIZXhTdHJpbmcoaGFzaCwzMikpe2xvZ2dlciRlLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdHJhbnNhY3Rpb24gaGFzaFwiLFwiaGFzaFwiLGhhc2gpfXN1cGVyKHtfaXNGb3JrRXZlbnQ6dHJ1ZSxfaXNUcmFuc2FjdGlvbkZvcmtFdmVudDp0cnVlLGV4cGlyeTpleHBpcnl8fDAsaGFzaDpoYXNofSl9fWNsYXNzIFRyYW5zYWN0aW9uT3JkZXJGb3JrRXZlbnQgZXh0ZW5kcyBGb3JrRXZlbnR7Y29uc3RydWN0b3IoYmVmb3JlSGFzaCxhZnRlckhhc2gsZXhwaXJ5KXtpZighaXNIZXhTdHJpbmcoYmVmb3JlSGFzaCwzMikpe2xvZ2dlciRlLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdHJhbnNhY3Rpb24gaGFzaFwiLFwiYmVmb3JlSGFzaFwiLGJlZm9yZUhhc2gpfWlmKCFpc0hleFN0cmluZyhhZnRlckhhc2gsMzIpKXtsb2dnZXIkZS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uIGhhc2hcIixcImFmdGVySGFzaFwiLGFmdGVySGFzaCl9c3VwZXIoe19pc0ZvcmtFdmVudDp0cnVlLF9pc1RyYW5zYWN0aW9uT3JkZXJGb3JrRXZlbnQ6dHJ1ZSxleHBpcnk6ZXhwaXJ5fHwwLGJlZm9yZUhhc2g6YmVmb3JlSGFzaCxhZnRlckhhc2g6YWZ0ZXJIYXNofSl9fWNsYXNzIFByb3ZpZGVye2NvbnN0cnVjdG9yKCl7bG9nZ2VyJGUuY2hlY2tBYnN0cmFjdChuZXcudGFyZ2V0LFByb3ZpZGVyKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2lzUHJvdmlkZXJcIix0cnVlKX1hZGRMaXN0ZW5lcihldmVudE5hbWUsbGlzdGVuZXIpe3JldHVybiB0aGlzLm9uKGV2ZW50TmFtZSxsaXN0ZW5lcil9cmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLGxpc3RlbmVyKXtyZXR1cm4gdGhpcy5vZmYoZXZlbnROYW1lLGxpc3RlbmVyKX1zdGF0aWMgaXNQcm92aWRlcih2YWx1ZSl7cmV0dXJuISEodmFsdWUmJnZhbHVlLl9pc1Byb3ZpZGVyKX19Y29uc3QgdmVyc2lvbiRhPVwiYWJzdHJhY3Qtc2lnbmVyLzUuMS4wXCI7XCJ1c2Ugc3RyaWN0XCI7dmFyIF9fYXdhaXRlciQyPXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkZj1uZXcgTG9nZ2VyKHZlcnNpb24kYSk7Y29uc3QgYWxsb3dlZFRyYW5zYWN0aW9uS2V5cz1bXCJhY2Nlc3NMaXN0XCIsXCJjaGFpbklkXCIsXCJkYXRhXCIsXCJmcm9tXCIsXCJnYXNMaW1pdFwiLFwiZ2FzUHJpY2VcIixcIm5vbmNlXCIsXCJ0b1wiLFwidHlwZVwiLFwidmFsdWVcIl07Y29uc3QgZm9yd2FyZEVycm9ycz1bTG9nZ2VyLmVycm9ycy5JTlNVRkZJQ0lFTlRfRlVORFMsTG9nZ2VyLmVycm9ycy5OT05DRV9FWFBJUkVELExvZ2dlci5lcnJvcnMuUkVQTEFDRU1FTlRfVU5ERVJQUklDRURdO2NsYXNzIFNpZ25lcntjb25zdHJ1Y3Rvcigpe2xvZ2dlciRmLmNoZWNrQWJzdHJhY3QobmV3LnRhcmdldCxTaWduZXIpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfaXNTaWduZXJcIix0cnVlKX1nZXRCYWxhbmNlKGJsb2NrVGFnKXtyZXR1cm4gX19hd2FpdGVyJDIodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3RoaXMuX2NoZWNrUHJvdmlkZXIoXCJnZXRCYWxhbmNlXCIpO3JldHVybiB5aWVsZCB0aGlzLnByb3ZpZGVyLmdldEJhbGFuY2UodGhpcy5nZXRBZGRyZXNzKCksYmxvY2tUYWcpfSl9Z2V0VHJhbnNhY3Rpb25Db3VudChibG9ja1RhZyl7cmV0dXJuIF9fYXdhaXRlciQyKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt0aGlzLl9jaGVja1Byb3ZpZGVyKFwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiKTtyZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5nZXRUcmFuc2FjdGlvbkNvdW50KHRoaXMuZ2V0QWRkcmVzcygpLGJsb2NrVGFnKX0pfWVzdGltYXRlR2FzKHRyYW5zYWN0aW9uKXtyZXR1cm4gX19hd2FpdGVyJDIodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3RoaXMuX2NoZWNrUHJvdmlkZXIoXCJlc3RpbWF0ZUdhc1wiKTtjb25zdCB0eD15aWVsZCByZXNvbHZlUHJvcGVydGllcyh0aGlzLmNoZWNrVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pKTtyZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5lc3RpbWF0ZUdhcyh0eCl9KX1jYWxsKHRyYW5zYWN0aW9uLGJsb2NrVGFnKXtyZXR1cm4gX19hd2FpdGVyJDIodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3RoaXMuX2NoZWNrUHJvdmlkZXIoXCJjYWxsXCIpO2NvbnN0IHR4PXlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHRoaXMuY2hlY2tUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikpO3JldHVybiB5aWVsZCB0aGlzLnByb3ZpZGVyLmNhbGwodHgsYmxvY2tUYWcpfSl9c2VuZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKXt0aGlzLl9jaGVja1Byb3ZpZGVyKFwic2VuZFRyYW5zYWN0aW9uXCIpO3JldHVybiB0aGlzLnBvcHVsYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pLnRoZW4odHg9PntyZXR1cm4gdGhpcy5zaWduVHJhbnNhY3Rpb24odHgpLnRoZW4oc2lnbmVkVHg9PntyZXR1cm4gdGhpcy5wcm92aWRlci5zZW5kVHJhbnNhY3Rpb24oc2lnbmVkVHgpfSl9KX1nZXRDaGFpbklkKCl7cmV0dXJuIF9fYXdhaXRlciQyKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt0aGlzLl9jaGVja1Byb3ZpZGVyKFwiZ2V0Q2hhaW5JZFwiKTtjb25zdCBuZXR3b3JrPXlpZWxkIHRoaXMucHJvdmlkZXIuZ2V0TmV0d29yaygpO3JldHVybiBuZXR3b3JrLmNoYWluSWR9KX1nZXRHYXNQcmljZSgpe3JldHVybiBfX2F3YWl0ZXIkMih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7dGhpcy5fY2hlY2tQcm92aWRlcihcImdldEdhc1ByaWNlXCIpO3JldHVybiB5aWVsZCB0aGlzLnByb3ZpZGVyLmdldEdhc1ByaWNlKCl9KX1yZXNvbHZlTmFtZShuYW1lKXtyZXR1cm4gX19hd2FpdGVyJDIodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3RoaXMuX2NoZWNrUHJvdmlkZXIoXCJyZXNvbHZlTmFtZVwiKTtyZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5yZXNvbHZlTmFtZShuYW1lKX0pfWNoZWNrVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pe2Zvcihjb25zdCBrZXkgaW4gdHJhbnNhY3Rpb24pe2lmKGFsbG93ZWRUcmFuc2FjdGlvbktleXMuaW5kZXhPZihrZXkpPT09LTEpe2xvZ2dlciRmLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdHJhbnNhY3Rpb24ga2V5OiBcIitrZXksXCJ0cmFuc2FjdGlvblwiLHRyYW5zYWN0aW9uKX19Y29uc3QgdHg9c2hhbGxvd0NvcHkodHJhbnNhY3Rpb24pO2lmKHR4LmZyb209PW51bGwpe3R4LmZyb209dGhpcy5nZXRBZGRyZXNzKCl9ZWxzZXt0eC5mcm9tPVByb21pc2UuYWxsKFtQcm9taXNlLnJlc29sdmUodHguZnJvbSksdGhpcy5nZXRBZGRyZXNzKCldKS50aGVuKHJlc3VsdD0+e2lmKHJlc3VsdFswXS50b0xvd2VyQ2FzZSgpIT09cmVzdWx0WzFdLnRvTG93ZXJDYXNlKCkpe2xvZ2dlciRmLnRocm93QXJndW1lbnRFcnJvcihcImZyb20gYWRkcmVzcyBtaXNtYXRjaFwiLFwidHJhbnNhY3Rpb25cIix0cmFuc2FjdGlvbil9cmV0dXJuIHJlc3VsdFswXX0pfXJldHVybiB0eH1wb3B1bGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKXtyZXR1cm4gX19hd2FpdGVyJDIodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IHR4PXlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHRoaXMuY2hlY2tUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikpO2lmKHR4LnRvIT1udWxsKXt0eC50bz1Qcm9taXNlLnJlc29sdmUodHgudG8pLnRoZW4odG89Pl9fYXdhaXRlciQyKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtpZih0bz09bnVsbCl7cmV0dXJuIG51bGx9Y29uc3QgYWRkcmVzcz15aWVsZCB0aGlzLnJlc29sdmVOYW1lKHRvKTtpZihhZGRyZXNzPT1udWxsKXtsb2dnZXIkZi50aHJvd0FyZ3VtZW50RXJyb3IoXCJwcm92aWRlZCBFTlMgbmFtZSByZXNvbHZlcyB0byBudWxsXCIsXCJ0eC50b1wiLHRvKX1yZXR1cm4gYWRkcmVzc30pKX1pZih0eC5nYXNQcmljZT09bnVsbCl7dHguZ2FzUHJpY2U9dGhpcy5nZXRHYXNQcmljZSgpfWlmKHR4Lm5vbmNlPT1udWxsKXt0eC5ub25jZT10aGlzLmdldFRyYW5zYWN0aW9uQ291bnQoXCJwZW5kaW5nXCIpfWlmKHR4Lmdhc0xpbWl0PT1udWxsKXt0eC5nYXNMaW1pdD10aGlzLmVzdGltYXRlR2FzKHR4KS5jYXRjaChlcnJvcj0+e2lmKGZvcndhcmRFcnJvcnMuaW5kZXhPZihlcnJvci5jb2RlKT49MCl7dGhyb3cgZXJyb3J9cmV0dXJuIGxvZ2dlciRmLnRocm93RXJyb3IoXCJjYW5ub3QgZXN0aW1hdGUgZ2FzOyB0cmFuc2FjdGlvbiBtYXkgZmFpbCBvciBtYXkgcmVxdWlyZSBtYW51YWwgZ2FzIGxpbWl0XCIsTG9nZ2VyLmVycm9ycy5VTlBSRURJQ1RBQkxFX0dBU19MSU1JVCx7ZXJyb3I6ZXJyb3IsdHg6dHh9KX0pfWlmKHR4LmNoYWluSWQ9PW51bGwpe3R4LmNoYWluSWQ9dGhpcy5nZXRDaGFpbklkKCl9ZWxzZXt0eC5jaGFpbklkPVByb21pc2UuYWxsKFtQcm9taXNlLnJlc29sdmUodHguY2hhaW5JZCksdGhpcy5nZXRDaGFpbklkKCldKS50aGVuKHJlc3VsdHM9PntpZihyZXN1bHRzWzFdIT09MCYmcmVzdWx0c1swXSE9PXJlc3VsdHNbMV0pe2xvZ2dlciRmLnRocm93QXJndW1lbnRFcnJvcihcImNoYWluSWQgYWRkcmVzcyBtaXNtYXRjaFwiLFwidHJhbnNhY3Rpb25cIix0cmFuc2FjdGlvbil9cmV0dXJuIHJlc3VsdHNbMF19KX1yZXR1cm4geWllbGQgcmVzb2x2ZVByb3BlcnRpZXModHgpfSl9X2NoZWNrUHJvdmlkZXIob3BlcmF0aW9uKXtpZighdGhpcy5wcm92aWRlcil7bG9nZ2VyJGYudGhyb3dFcnJvcihcIm1pc3NpbmcgcHJvdmlkZXJcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOm9wZXJhdGlvbnx8XCJfY2hlY2tQcm92aWRlclwifSl9fXN0YXRpYyBpc1NpZ25lcih2YWx1ZSl7cmV0dXJuISEodmFsdWUmJnZhbHVlLl9pc1NpZ25lcil9fWNsYXNzIFZvaWRTaWduZXIgZXh0ZW5kcyBTaWduZXJ7Y29uc3RydWN0b3IoYWRkcmVzcyxwcm92aWRlcil7bG9nZ2VyJGYuY2hlY2tOZXcobmV3LnRhcmdldCxWb2lkU2lnbmVyKTtzdXBlcigpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJhZGRyZXNzXCIsYWRkcmVzcyk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInByb3ZpZGVyXCIscHJvdmlkZXJ8fG51bGwpfWdldEFkZHJlc3MoKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuYWRkcmVzcyl9X2ZhaWwobWVzc2FnZSxvcGVyYXRpb24pe3JldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT57bG9nZ2VyJGYudGhyb3dFcnJvcihtZXNzYWdlLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246b3BlcmF0aW9ufSl9KX1zaWduTWVzc2FnZShtZXNzYWdlKXtyZXR1cm4gdGhpcy5fZmFpbChcIlZvaWRTaWduZXIgY2Fubm90IHNpZ24gbWVzc2FnZXNcIixcInNpZ25NZXNzYWdlXCIpfXNpZ25UcmFuc2FjdGlvbih0cmFuc2FjdGlvbil7cmV0dXJuIHRoaXMuX2ZhaWwoXCJWb2lkU2lnbmVyIGNhbm5vdCBzaWduIHRyYW5zYWN0aW9uc1wiLFwic2lnblRyYW5zYWN0aW9uXCIpfV9zaWduVHlwZWREYXRhKGRvbWFpbix0eXBlcyx2YWx1ZSl7cmV0dXJuIHRoaXMuX2ZhaWwoXCJWb2lkU2lnbmVyIGNhbm5vdCBzaWduIHR5cGVkIGRhdGFcIixcInNpZ25UeXBlZERhdGFcIil9Y29ubmVjdChwcm92aWRlcil7cmV0dXJuIG5ldyBWb2lkU2lnbmVyKHRoaXMuYWRkcmVzcyxwcm92aWRlcil9fXZhciBtaW5pbWFsaXN0aWNBc3NlcnQ9YXNzZXJ0O2Z1bmN0aW9uIGFzc2VydCh2YWwsbXNnKXtpZighdmFsKXRocm93IG5ldyBFcnJvcihtc2d8fFwiQXNzZXJ0aW9uIGZhaWxlZFwiKX1hc3NlcnQuZXF1YWw9ZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCxyLG1zZyl7aWYobCE9cil0aHJvdyBuZXcgRXJyb3IobXNnfHxcIkFzc2VydGlvbiBmYWlsZWQ6IFwiK2wrXCIgIT0gXCIrcil9O3ZhciBpbmhlcml0c19icm93c2VyPWNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uKG1vZHVsZSl7aWYodHlwZW9mIE9iamVjdC5jcmVhdGU9PT1cImZ1bmN0aW9uXCIpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGluaGVyaXRzKGN0b3Isc3VwZXJDdG9yKXtpZihzdXBlckN0b3Ipe2N0b3Iuc3VwZXJfPXN1cGVyQ3RvcjtjdG9yLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpjdG9yLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KX19fWVsc2V7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gaW5oZXJpdHMoY3RvcixzdXBlckN0b3Ipe2lmKHN1cGVyQ3Rvcil7Y3Rvci5zdXBlcl89c3VwZXJDdG9yO3ZhciBUZW1wQ3Rvcj1mdW5jdGlvbigpe307VGVtcEN0b3IucHJvdG90eXBlPXN1cGVyQ3Rvci5wcm90b3R5cGU7Y3Rvci5wcm90b3R5cGU9bmV3IFRlbXBDdG9yO2N0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yPWN0b3J9fX19KTt2YXIgaW5oZXJpdHM9Y3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24obW9kdWxlKXt0cnl7dmFyIHV0aWw9bnVsbDtpZih0eXBlb2YgdXRpbC5pbmhlcml0cyE9PVwiZnVuY3Rpb25cIil0aHJvd1wiXCI7bW9kdWxlLmV4cG9ydHM9dXRpbC5pbmhlcml0c31jYXRjaChlKXttb2R1bGUuZXhwb3J0cz1pbmhlcml0c19icm93c2VyfX0pO1widXNlIHN0cmljdFwiO3ZhciBpbmhlcml0c18xPWluaGVyaXRzO2Z1bmN0aW9uIHRvQXJyYXkobXNnLGVuYyl7aWYoQXJyYXkuaXNBcnJheShtc2cpKXJldHVybiBtc2cuc2xpY2UoKTtpZighbXNnKXJldHVybltdO3ZhciByZXM9W107aWYodHlwZW9mIG1zZz09PVwic3RyaW5nXCIpe2lmKCFlbmMpe2Zvcih2YXIgaT0wO2k8bXNnLmxlbmd0aDtpKyspe3ZhciBjPW1zZy5jaGFyQ29kZUF0KGkpO3ZhciBoaT1jPj44O3ZhciBsbz1jJjI1NTtpZihoaSlyZXMucHVzaChoaSxsbyk7ZWxzZSByZXMucHVzaChsbyl9fWVsc2UgaWYoZW5jPT09XCJoZXhcIil7bXNnPW1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2dpLFwiXCIpO2lmKG1zZy5sZW5ndGglMiE9PTApbXNnPVwiMFwiK21zZztmb3IoaT0wO2k8bXNnLmxlbmd0aDtpKz0yKXJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSttc2dbaSsxXSwxNikpfX1lbHNle2ZvcihpPTA7aTxtc2cubGVuZ3RoO2krKylyZXNbaV09bXNnW2ldfDB9cmV0dXJuIHJlc312YXIgdG9BcnJheV8xPXRvQXJyYXk7ZnVuY3Rpb24gdG9IZXgkMShtc2cpe3ZhciByZXM9XCJcIjtmb3IodmFyIGk9MDtpPG1zZy5sZW5ndGg7aSsrKXJlcys9emVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7cmV0dXJuIHJlc312YXIgdG9IZXhfMT10b0hleCQxO2Z1bmN0aW9uIGh0b25sKHcpe3ZhciByZXM9dz4+PjI0fHc+Pj44JjY1MjgwfHc8PDgmMTY3MTE2ODB8KHcmMjU1KTw8MjQ7cmV0dXJuIHJlcz4+PjB9dmFyIGh0b25sXzE9aHRvbmw7ZnVuY3Rpb24gdG9IZXgzMihtc2csZW5kaWFuKXt2YXIgcmVzPVwiXCI7Zm9yKHZhciBpPTA7aTxtc2cubGVuZ3RoO2krKyl7dmFyIHc9bXNnW2ldO2lmKGVuZGlhbj09PVwibGl0dGxlXCIpdz1odG9ubCh3KTtyZXMrPXplcm84KHcudG9TdHJpbmcoMTYpKX1yZXR1cm4gcmVzfXZhciB0b0hleDMyXzE9dG9IZXgzMjtmdW5jdGlvbiB6ZXJvMih3b3JkKXtpZih3b3JkLmxlbmd0aD09PTEpcmV0dXJuXCIwXCIrd29yZDtlbHNlIHJldHVybiB3b3JkfXZhciB6ZXJvMl8xPXplcm8yO2Z1bmN0aW9uIHplcm84KHdvcmQpe2lmKHdvcmQubGVuZ3RoPT09NylyZXR1cm5cIjBcIit3b3JkO2Vsc2UgaWYod29yZC5sZW5ndGg9PT02KXJldHVyblwiMDBcIit3b3JkO2Vsc2UgaWYod29yZC5sZW5ndGg9PT01KXJldHVyblwiMDAwXCIrd29yZDtlbHNlIGlmKHdvcmQubGVuZ3RoPT09NClyZXR1cm5cIjAwMDBcIit3b3JkO2Vsc2UgaWYod29yZC5sZW5ndGg9PT0zKXJldHVyblwiMDAwMDBcIit3b3JkO2Vsc2UgaWYod29yZC5sZW5ndGg9PT0yKXJldHVyblwiMDAwMDAwXCIrd29yZDtlbHNlIGlmKHdvcmQubGVuZ3RoPT09MSlyZXR1cm5cIjAwMDAwMDBcIit3b3JkO2Vsc2UgcmV0dXJuIHdvcmR9dmFyIHplcm84XzE9emVybzg7ZnVuY3Rpb24gam9pbjMyKG1zZyxzdGFydCxlbmQsZW5kaWFuKXt2YXIgbGVuPWVuZC1zdGFydDttaW5pbWFsaXN0aWNBc3NlcnQobGVuJTQ9PT0wKTt2YXIgcmVzPW5ldyBBcnJheShsZW4vNCk7Zm9yKHZhciBpPTAsaz1zdGFydDtpPHJlcy5sZW5ndGg7aSsrLGsrPTQpe3ZhciB3O2lmKGVuZGlhbj09PVwiYmlnXCIpdz1tc2dba108PDI0fG1zZ1trKzFdPDwxNnxtc2dbaysyXTw8OHxtc2dbayszXTtlbHNlIHc9bXNnW2srM108PDI0fG1zZ1trKzJdPDwxNnxtc2dbaysxXTw8OHxtc2dba107cmVzW2ldPXc+Pj4wfXJldHVybiByZXN9dmFyIGpvaW4zMl8xPWpvaW4zMjtmdW5jdGlvbiBzcGxpdDMyKG1zZyxlbmRpYW4pe3ZhciByZXM9bmV3IEFycmF5KG1zZy5sZW5ndGgqNCk7Zm9yKHZhciBpPTAsaz0wO2k8bXNnLmxlbmd0aDtpKyssays9NCl7dmFyIG09bXNnW2ldO2lmKGVuZGlhbj09PVwiYmlnXCIpe3Jlc1trXT1tPj4+MjQ7cmVzW2srMV09bT4+PjE2JjI1NTtyZXNbaysyXT1tPj4+OCYyNTU7cmVzW2srM109bSYyNTV9ZWxzZXtyZXNbayszXT1tPj4+MjQ7cmVzW2srMl09bT4+PjE2JjI1NTtyZXNbaysxXT1tPj4+OCYyNTU7cmVzW2tdPW0mMjU1fX1yZXR1cm4gcmVzfXZhciBzcGxpdDMyXzE9c3BsaXQzMjtmdW5jdGlvbiByb3RyMzIodyxiKXtyZXR1cm4gdz4+PmJ8dzw8MzItYn12YXIgcm90cjMyXzE9cm90cjMyO2Z1bmN0aW9uIHJvdGwzMih3LGIpe3JldHVybiB3PDxifHc+Pj4zMi1ifXZhciByb3RsMzJfMT1yb3RsMzI7ZnVuY3Rpb24gc3VtMzIoYSxiKXtyZXR1cm4gYStiPj4+MH12YXIgc3VtMzJfMT1zdW0zMjtmdW5jdGlvbiBzdW0zMl8zKGEsYixjKXtyZXR1cm4gYStiK2M+Pj4wfXZhciBzdW0zMl8zXzE9c3VtMzJfMztmdW5jdGlvbiBzdW0zMl80KGEsYixjLGQpe3JldHVybiBhK2IrYytkPj4+MH12YXIgc3VtMzJfNF8xPXN1bTMyXzQ7ZnVuY3Rpb24gc3VtMzJfNShhLGIsYyxkLGUpe3JldHVybiBhK2IrYytkK2U+Pj4wfXZhciBzdW0zMl81XzE9c3VtMzJfNTtmdW5jdGlvbiBzdW02NChidWYscG9zLGFoLGFsKXt2YXIgYmg9YnVmW3Bvc107dmFyIGJsPWJ1Zltwb3MrMV07dmFyIGxvPWFsK2JsPj4+MDt2YXIgaGk9KGxvPGFsPzE6MCkrYWgrYmg7YnVmW3Bvc109aGk+Pj4wO2J1Zltwb3MrMV09bG99dmFyIHN1bTY0XzE9c3VtNjQ7ZnVuY3Rpb24gc3VtNjRfaGkoYWgsYWwsYmgsYmwpe3ZhciBsbz1hbCtibD4+PjA7dmFyIGhpPShsbzxhbD8xOjApK2FoK2JoO3JldHVybiBoaT4+PjB9dmFyIHN1bTY0X2hpXzE9c3VtNjRfaGk7ZnVuY3Rpb24gc3VtNjRfbG8oYWgsYWwsYmgsYmwpe3ZhciBsbz1hbCtibDtyZXR1cm4gbG8+Pj4wfXZhciBzdW02NF9sb18xPXN1bTY0X2xvO2Z1bmN0aW9uIHN1bTY0XzRfaGkoYWgsYWwsYmgsYmwsY2gsY2wsZGgsZGwpe3ZhciBjYXJyeT0wO3ZhciBsbz1hbDtsbz1sbytibD4+PjA7Y2FycnkrPWxvPGFsPzE6MDtsbz1sbytjbD4+PjA7Y2FycnkrPWxvPGNsPzE6MDtsbz1sbytkbD4+PjA7Y2FycnkrPWxvPGRsPzE6MDt2YXIgaGk9YWgrYmgrY2grZGgrY2Fycnk7cmV0dXJuIGhpPj4+MH12YXIgc3VtNjRfNF9oaV8xPXN1bTY0XzRfaGk7ZnVuY3Rpb24gc3VtNjRfNF9sbyhhaCxhbCxiaCxibCxjaCxjbCxkaCxkbCl7dmFyIGxvPWFsK2JsK2NsK2RsO3JldHVybiBsbz4+PjB9dmFyIHN1bTY0XzRfbG9fMT1zdW02NF80X2xvO2Z1bmN0aW9uIHN1bTY0XzVfaGkoYWgsYWwsYmgsYmwsY2gsY2wsZGgsZGwsZWgsZWwpe3ZhciBjYXJyeT0wO3ZhciBsbz1hbDtsbz1sbytibD4+PjA7Y2FycnkrPWxvPGFsPzE6MDtsbz1sbytjbD4+PjA7Y2FycnkrPWxvPGNsPzE6MDtsbz1sbytkbD4+PjA7Y2FycnkrPWxvPGRsPzE6MDtsbz1sbytlbD4+PjA7Y2FycnkrPWxvPGVsPzE6MDt2YXIgaGk9YWgrYmgrY2grZGgrZWgrY2Fycnk7cmV0dXJuIGhpPj4+MH12YXIgc3VtNjRfNV9oaV8xPXN1bTY0XzVfaGk7ZnVuY3Rpb24gc3VtNjRfNV9sbyhhaCxhbCxiaCxibCxjaCxjbCxkaCxkbCxlaCxlbCl7dmFyIGxvPWFsK2JsK2NsK2RsK2VsO3JldHVybiBsbz4+PjB9dmFyIHN1bTY0XzVfbG9fMT1zdW02NF81X2xvO2Z1bmN0aW9uIHJvdHI2NF9oaShhaCxhbCxudW0pe3ZhciByPWFsPDwzMi1udW18YWg+Pj5udW07cmV0dXJuIHI+Pj4wfXZhciByb3RyNjRfaGlfMT1yb3RyNjRfaGk7ZnVuY3Rpb24gcm90cjY0X2xvKGFoLGFsLG51bSl7dmFyIHI9YWg8PDMyLW51bXxhbD4+Pm51bTtyZXR1cm4gcj4+PjB9dmFyIHJvdHI2NF9sb18xPXJvdHI2NF9sbztmdW5jdGlvbiBzaHI2NF9oaShhaCxhbCxudW0pe3JldHVybiBhaD4+Pm51bX12YXIgc2hyNjRfaGlfMT1zaHI2NF9oaTtmdW5jdGlvbiBzaHI2NF9sbyhhaCxhbCxudW0pe3ZhciByPWFoPDwzMi1udW18YWw+Pj5udW07cmV0dXJuIHI+Pj4wfXZhciBzaHI2NF9sb18xPXNocjY0X2xvO3ZhciB1dGlscz17aW5oZXJpdHM6aW5oZXJpdHNfMSx0b0FycmF5OnRvQXJyYXlfMSx0b0hleDp0b0hleF8xLGh0b25sOmh0b25sXzEsdG9IZXgzMjp0b0hleDMyXzEsemVybzI6emVybzJfMSx6ZXJvODp6ZXJvOF8xLGpvaW4zMjpqb2luMzJfMSxzcGxpdDMyOnNwbGl0MzJfMSxyb3RyMzI6cm90cjMyXzEscm90bDMyOnJvdGwzMl8xLHN1bTMyOnN1bTMyXzEsc3VtMzJfMzpzdW0zMl8zXzEsc3VtMzJfNDpzdW0zMl80XzEsc3VtMzJfNTpzdW0zMl81XzEsc3VtNjQ6c3VtNjRfMSxzdW02NF9oaTpzdW02NF9oaV8xLHN1bTY0X2xvOnN1bTY0X2xvXzEsc3VtNjRfNF9oaTpzdW02NF80X2hpXzEsc3VtNjRfNF9sbzpzdW02NF80X2xvXzEsc3VtNjRfNV9oaTpzdW02NF81X2hpXzEsc3VtNjRfNV9sbzpzdW02NF81X2xvXzEscm90cjY0X2hpOnJvdHI2NF9oaV8xLHJvdHI2NF9sbzpyb3RyNjRfbG9fMSxzaHI2NF9oaTpzaHI2NF9oaV8xLHNocjY0X2xvOnNocjY0X2xvXzF9O1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIEJsb2NrSGFzaCgpe3RoaXMucGVuZGluZz1udWxsO3RoaXMucGVuZGluZ1RvdGFsPTA7dGhpcy5ibG9ja1NpemU9dGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7dGhpcy5vdXRTaXplPXRoaXMuY29uc3RydWN0b3Iub3V0U2l6ZTt0aGlzLmhtYWNTdHJlbmd0aD10aGlzLmNvbnN0cnVjdG9yLmhtYWNTdHJlbmd0aDt0aGlzLnBhZExlbmd0aD10aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aC84O3RoaXMuZW5kaWFuPVwiYmlnXCI7dGhpcy5fZGVsdGE4PXRoaXMuYmxvY2tTaXplLzg7dGhpcy5fZGVsdGEzMj10aGlzLmJsb2NrU2l6ZS8zMn12YXIgQmxvY2tIYXNoXzE9QmxvY2tIYXNoO0Jsb2NrSGFzaC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uIHVwZGF0ZShtc2csZW5jKXttc2c9dXRpbHMudG9BcnJheShtc2csZW5jKTtpZighdGhpcy5wZW5kaW5nKXRoaXMucGVuZGluZz1tc2c7ZWxzZSB0aGlzLnBlbmRpbmc9dGhpcy5wZW5kaW5nLmNvbmNhdChtc2cpO3RoaXMucGVuZGluZ1RvdGFsKz1tc2cubGVuZ3RoO2lmKHRoaXMucGVuZGluZy5sZW5ndGg+PXRoaXMuX2RlbHRhOCl7bXNnPXRoaXMucGVuZGluZzt2YXIgcj1tc2cubGVuZ3RoJXRoaXMuX2RlbHRhODt0aGlzLnBlbmRpbmc9bXNnLnNsaWNlKG1zZy5sZW5ndGgtcixtc2cubGVuZ3RoKTtpZih0aGlzLnBlbmRpbmcubGVuZ3RoPT09MCl0aGlzLnBlbmRpbmc9bnVsbDttc2c9dXRpbHMuam9pbjMyKG1zZywwLG1zZy5sZW5ndGgtcix0aGlzLmVuZGlhbik7Zm9yKHZhciBpPTA7aTxtc2cubGVuZ3RoO2krPXRoaXMuX2RlbHRhMzIpdGhpcy5fdXBkYXRlKG1zZyxpLGkrdGhpcy5fZGVsdGEzMil9cmV0dXJuIHRoaXN9O0Jsb2NrSGFzaC5wcm90b3R5cGUuZGlnZXN0PWZ1bmN0aW9uIGRpZ2VzdChlbmMpe3RoaXMudXBkYXRlKHRoaXMuX3BhZCgpKTttaW5pbWFsaXN0aWNBc3NlcnQodGhpcy5wZW5kaW5nPT09bnVsbCk7cmV0dXJuIHRoaXMuX2RpZ2VzdChlbmMpfTtCbG9ja0hhc2gucHJvdG90eXBlLl9wYWQ9ZnVuY3Rpb24gcGFkKCl7dmFyIGxlbj10aGlzLnBlbmRpbmdUb3RhbDt2YXIgYnl0ZXM9dGhpcy5fZGVsdGE4O3ZhciBrPWJ5dGVzLShsZW4rdGhpcy5wYWRMZW5ndGgpJWJ5dGVzO3ZhciByZXM9bmV3IEFycmF5KGsrdGhpcy5wYWRMZW5ndGgpO3Jlc1swXT0xMjg7Zm9yKHZhciBpPTE7aTxrO2krKylyZXNbaV09MDtsZW48PD0zO2lmKHRoaXMuZW5kaWFuPT09XCJiaWdcIil7Zm9yKHZhciB0PTg7dDx0aGlzLnBhZExlbmd0aDt0KyspcmVzW2krK109MDtyZXNbaSsrXT0wO3Jlc1tpKytdPTA7cmVzW2krK109MDtyZXNbaSsrXT0wO3Jlc1tpKytdPWxlbj4+PjI0JjI1NTtyZXNbaSsrXT1sZW4+Pj4xNiYyNTU7cmVzW2krK109bGVuPj4+OCYyNTU7cmVzW2krK109bGVuJjI1NX1lbHNle3Jlc1tpKytdPWxlbiYyNTU7cmVzW2krK109bGVuPj4+OCYyNTU7cmVzW2krK109bGVuPj4+MTYmMjU1O3Jlc1tpKytdPWxlbj4+PjI0JjI1NTtyZXNbaSsrXT0wO3Jlc1tpKytdPTA7cmVzW2krK109MDtyZXNbaSsrXT0wO2Zvcih0PTg7dDx0aGlzLnBhZExlbmd0aDt0KyspcmVzW2krK109MH1yZXR1cm4gcmVzfTt2YXIgY29tbW9uPXtCbG9ja0hhc2g6QmxvY2tIYXNoXzF9O1widXNlIHN0cmljdFwiO3ZhciByb3RyMzIkMT11dGlscy5yb3RyMzI7ZnVuY3Rpb24gZnRfMShzLHgseSx6KXtpZihzPT09MClyZXR1cm4gY2gzMih4LHkseik7aWYocz09PTF8fHM9PT0zKXJldHVybiBwMzIoeCx5LHopO2lmKHM9PT0yKXJldHVybiBtYWozMih4LHkseil9dmFyIGZ0XzFfMT1mdF8xO2Z1bmN0aW9uIGNoMzIoeCx5LHope3JldHVybiB4Jnlefngmen12YXIgY2gzMl8xPWNoMzI7ZnVuY3Rpb24gbWFqMzIoeCx5LHope3JldHVybiB4JnleeCZ6Xnkmen12YXIgbWFqMzJfMT1tYWozMjtmdW5jdGlvbiBwMzIoeCx5LHope3JldHVybiB4Xnleen12YXIgcDMyXzE9cDMyO2Z1bmN0aW9uIHMwXzI1Nih4KXtyZXR1cm4gcm90cjMyJDEoeCwyKV5yb3RyMzIkMSh4LDEzKV5yb3RyMzIkMSh4LDIyKX12YXIgczBfMjU2XzE9czBfMjU2O2Z1bmN0aW9uIHMxXzI1Nih4KXtyZXR1cm4gcm90cjMyJDEoeCw2KV5yb3RyMzIkMSh4LDExKV5yb3RyMzIkMSh4LDI1KX12YXIgczFfMjU2XzE9czFfMjU2O2Z1bmN0aW9uIGcwXzI1Nih4KXtyZXR1cm4gcm90cjMyJDEoeCw3KV5yb3RyMzIkMSh4LDE4KV54Pj4+M312YXIgZzBfMjU2XzE9ZzBfMjU2O2Z1bmN0aW9uIGcxXzI1Nih4KXtyZXR1cm4gcm90cjMyJDEoeCwxNylecm90cjMyJDEoeCwxOSleeD4+PjEwfXZhciBnMV8yNTZfMT1nMV8yNTY7dmFyIGNvbW1vbiQxPXtmdF8xOmZ0XzFfMSxjaDMyOmNoMzJfMSxtYWozMjptYWozMl8xLHAzMjpwMzJfMSxzMF8yNTY6czBfMjU2XzEsczFfMjU2OnMxXzI1Nl8xLGcwXzI1NjpnMF8yNTZfMSxnMV8yNTY6ZzFfMjU2XzF9O1widXNlIHN0cmljdFwiO3ZhciByb3RsMzIkMT11dGlscy5yb3RsMzI7dmFyIHN1bTMyJDE9dXRpbHMuc3VtMzI7dmFyIHN1bTMyXzUkMT11dGlscy5zdW0zMl81O3ZhciBmdF8xJDE9Y29tbW9uJDEuZnRfMTt2YXIgQmxvY2tIYXNoJDE9Y29tbW9uLkJsb2NrSGFzaDt2YXIgc2hhMV9LPVsxNTE4NTAwMjQ5LDE4NTk3NzUzOTMsMjQwMDk1OTcwOCwzMzk1NDY5NzgyXTtmdW5jdGlvbiBTSEExKCl7aWYoISh0aGlzIGluc3RhbmNlb2YgU0hBMSkpcmV0dXJuIG5ldyBTSEExO0Jsb2NrSGFzaCQxLmNhbGwodGhpcyk7dGhpcy5oPVsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzgsMzI4NTM3NzUyMF07dGhpcy5XPW5ldyBBcnJheSg4MCl9dXRpbHMuaW5oZXJpdHMoU0hBMSxCbG9ja0hhc2gkMSk7dmFyIF8xPVNIQTE7U0hBMS5ibG9ja1NpemU9NTEyO1NIQTEub3V0U2l6ZT0xNjA7U0hBMS5obWFjU3RyZW5ndGg9ODA7U0hBMS5wYWRMZW5ndGg9NjQ7U0hBMS5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbiBfdXBkYXRlKG1zZyxzdGFydCl7dmFyIFc9dGhpcy5XO2Zvcih2YXIgaT0wO2k8MTY7aSsrKVdbaV09bXNnW3N0YXJ0K2ldO2Zvcig7aTxXLmxlbmd0aDtpKyspV1tpXT1yb3RsMzIkMShXW2ktM11eV1tpLThdXldbaS0xNF1eV1tpLTE2XSwxKTt2YXIgYT10aGlzLmhbMF07dmFyIGI9dGhpcy5oWzFdO3ZhciBjPXRoaXMuaFsyXTt2YXIgZD10aGlzLmhbM107dmFyIGU9dGhpcy5oWzRdO2ZvcihpPTA7aTxXLmxlbmd0aDtpKyspe3ZhciBzPX5+KGkvMjApO3ZhciB0PXN1bTMyXzUkMShyb3RsMzIkMShhLDUpLGZ0XzEkMShzLGIsYyxkKSxlLFdbaV0sc2hhMV9LW3NdKTtlPWQ7ZD1jO2M9cm90bDMyJDEoYiwzMCk7Yj1hO2E9dH10aGlzLmhbMF09c3VtMzIkMSh0aGlzLmhbMF0sYSk7dGhpcy5oWzFdPXN1bTMyJDEodGhpcy5oWzFdLGIpO3RoaXMuaFsyXT1zdW0zMiQxKHRoaXMuaFsyXSxjKTt0aGlzLmhbM109c3VtMzIkMSh0aGlzLmhbM10sZCk7dGhpcy5oWzRdPXN1bTMyJDEodGhpcy5oWzRdLGUpfTtTSEExLnByb3RvdHlwZS5fZGlnZXN0PWZ1bmN0aW9uIGRpZ2VzdChlbmMpe2lmKGVuYz09PVwiaGV4XCIpcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLFwiYmlnXCIpO2Vsc2UgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLFwiYmlnXCIpfTtcInVzZSBzdHJpY3RcIjt2YXIgc3VtMzIkMj11dGlscy5zdW0zMjt2YXIgc3VtMzJfNCQxPXV0aWxzLnN1bTMyXzQ7dmFyIHN1bTMyXzUkMj11dGlscy5zdW0zMl81O3ZhciBjaDMyJDE9Y29tbW9uJDEuY2gzMjt2YXIgbWFqMzIkMT1jb21tb24kMS5tYWozMjt2YXIgczBfMjU2JDE9Y29tbW9uJDEuczBfMjU2O3ZhciBzMV8yNTYkMT1jb21tb24kMS5zMV8yNTY7dmFyIGcwXzI1NiQxPWNvbW1vbiQxLmcwXzI1Njt2YXIgZzFfMjU2JDE9Y29tbW9uJDEuZzFfMjU2O3ZhciBCbG9ja0hhc2gkMj1jb21tb24uQmxvY2tIYXNoO3ZhciBzaGEyNTZfSz1bMTExNjM1MjQwOCwxODk5NDQ3NDQxLDMwNDkzMjM0NzEsMzkyMTAwOTU3Myw5NjE5ODcxNjMsMTUwODk3MDk5MywyNDUzNjM1NzQ4LDI4NzA3NjMyMjEsMzYyNDM4MTA4MCwzMTA1OTg0MDEsNjA3MjI1Mjc4LDE0MjY4ODE5ODcsMTkyNTA3ODM4OCwyMTYyMDc4MjA2LDI2MTQ4ODgxMDMsMzI0ODIyMjU4MCwzODM1MzkwNDAxLDQwMjIyMjQ3NzQsMjY0MzQ3MDc4LDYwNDgwNzYyOCw3NzAyNTU5ODMsMTI0OTE1MDEyMiwxNTU1MDgxNjkyLDE5OTYwNjQ5ODYsMjU1NDIyMDg4MiwyODIxODM0MzQ5LDI5NTI5OTY4MDgsMzIxMDMxMzY3MSwzMzM2NTcxODkxLDM1ODQ1Mjg3MTEsMTEzOTI2OTkzLDMzODI0MTg5NSw2NjYzMDcyMDUsNzczNTI5OTEyLDEyOTQ3NTczNzIsMTM5NjE4MjI5MSwxNjk1MTgzNzAwLDE5ODY2NjEwNTEsMjE3NzAyNjM1MCwyNDU2OTU2MDM3LDI3MzA0ODU5MjEsMjgyMDMwMjQxMSwzMjU5NzMwODAwLDMzNDU3NjQ3NzEsMzUxNjA2NTgxNywzNjAwMzUyODA0LDQwOTQ1NzE5MDksMjc1NDIzMzQ0LDQzMDIyNzczNCw1MDY5NDg2MTYsNjU5MDYwNTU2LDg4Mzk5Nzg3Nyw5NTgxMzk1NzEsMTMyMjgyMjIxOCwxNTM3MDAyMDYzLDE3NDc4NzM3NzksMTk1NTU2MjIyMiwyMDI0MTA0ODE1LDIyMjc3MzA0NTIsMjM2MTg1MjQyNCwyNDI4NDM2NDc0LDI3NTY3MzQxODcsMzIwNDAzMTQ3OSwzMzI5MzI1Mjk4XTtmdW5jdGlvbiBTSEEyNTYoKXtpZighKHRoaXMgaW5zdGFuY2VvZiBTSEEyNTYpKXJldHVybiBuZXcgU0hBMjU2O0Jsb2NrSGFzaCQyLmNhbGwodGhpcyk7dGhpcy5oPVsxNzc5MDMzNzAzLDMxNDQxMzQyNzcsMTAxMzkwNDI0MiwyNzczNDgwNzYyLDEzNTk4OTMxMTksMjYwMDgyMjkyNCw1Mjg3MzQ2MzUsMTU0MTQ1OTIyNV07dGhpcy5rPXNoYTI1Nl9LO3RoaXMuVz1uZXcgQXJyYXkoNjQpfXV0aWxzLmluaGVyaXRzKFNIQTI1NixCbG9ja0hhc2gkMik7dmFyIF8yNTY9U0hBMjU2O1NIQTI1Ni5ibG9ja1NpemU9NTEyO1NIQTI1Ni5vdXRTaXplPTI1NjtTSEEyNTYuaG1hY1N0cmVuZ3RoPTE5MjtTSEEyNTYucGFkTGVuZ3RoPTY0O1NIQTI1Ni5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbiBfdXBkYXRlKG1zZyxzdGFydCl7dmFyIFc9dGhpcy5XO2Zvcih2YXIgaT0wO2k8MTY7aSsrKVdbaV09bXNnW3N0YXJ0K2ldO2Zvcig7aTxXLmxlbmd0aDtpKyspV1tpXT1zdW0zMl80JDEoZzFfMjU2JDEoV1tpLTJdKSxXW2ktN10sZzBfMjU2JDEoV1tpLTE1XSksV1tpLTE2XSk7dmFyIGE9dGhpcy5oWzBdO3ZhciBiPXRoaXMuaFsxXTt2YXIgYz10aGlzLmhbMl07dmFyIGQ9dGhpcy5oWzNdO3ZhciBlPXRoaXMuaFs0XTt2YXIgZj10aGlzLmhbNV07dmFyIGc9dGhpcy5oWzZdO3ZhciBoPXRoaXMuaFs3XTttaW5pbWFsaXN0aWNBc3NlcnQodGhpcy5rLmxlbmd0aD09PVcubGVuZ3RoKTtmb3IoaT0wO2k8Vy5sZW5ndGg7aSsrKXt2YXIgVDE9c3VtMzJfNSQyKGgsczFfMjU2JDEoZSksY2gzMiQxKGUsZixnKSx0aGlzLmtbaV0sV1tpXSk7dmFyIFQyPXN1bTMyJDIoczBfMjU2JDEoYSksbWFqMzIkMShhLGIsYykpO2g9ZztnPWY7Zj1lO2U9c3VtMzIkMihkLFQxKTtkPWM7Yz1iO2I9YTthPXN1bTMyJDIoVDEsVDIpfXRoaXMuaFswXT1zdW0zMiQyKHRoaXMuaFswXSxhKTt0aGlzLmhbMV09c3VtMzIkMih0aGlzLmhbMV0sYik7dGhpcy5oWzJdPXN1bTMyJDIodGhpcy5oWzJdLGMpO3RoaXMuaFszXT1zdW0zMiQyKHRoaXMuaFszXSxkKTt0aGlzLmhbNF09c3VtMzIkMih0aGlzLmhbNF0sZSk7dGhpcy5oWzVdPXN1bTMyJDIodGhpcy5oWzVdLGYpO3RoaXMuaFs2XT1zdW0zMiQyKHRoaXMuaFs2XSxnKTt0aGlzLmhbN109c3VtMzIkMih0aGlzLmhbN10saCl9O1NIQTI1Ni5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbiBkaWdlc3QoZW5jKXtpZihlbmM9PT1cImhleFwiKXJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCxcImJpZ1wiKTtlbHNlIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCxcImJpZ1wiKX07XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gU0hBMjI0KCl7aWYoISh0aGlzIGluc3RhbmNlb2YgU0hBMjI0KSlyZXR1cm4gbmV3IFNIQTIyNDtfMjU2LmNhbGwodGhpcyk7dGhpcy5oPVszMjM4MzcxMDMyLDkxNDE1MDY2Myw4MTI3MDI5OTksNDE0NDkxMjY5Nyw0MjkwNzc1ODU3LDE3NTA2MDMwMjUsMTY5NDA3NjgzOSwzMjA0MDc1NDI4XX11dGlscy5pbmhlcml0cyhTSEEyMjQsXzI1Nik7dmFyIF8yMjQ9U0hBMjI0O1NIQTIyNC5ibG9ja1NpemU9NTEyO1NIQTIyNC5vdXRTaXplPTIyNDtTSEEyMjQuaG1hY1N0cmVuZ3RoPTE5MjtTSEEyMjQucGFkTGVuZ3RoPTY0O1NIQTIyNC5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbiBkaWdlc3QoZW5jKXtpZihlbmM9PT1cImhleFwiKXJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLDcpLFwiYmlnXCIpO2Vsc2UgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsNyksXCJiaWdcIil9O1widXNlIHN0cmljdFwiO3ZhciByb3RyNjRfaGkkMT11dGlscy5yb3RyNjRfaGk7dmFyIHJvdHI2NF9sbyQxPXV0aWxzLnJvdHI2NF9sbzt2YXIgc2hyNjRfaGkkMT11dGlscy5zaHI2NF9oaTt2YXIgc2hyNjRfbG8kMT11dGlscy5zaHI2NF9sbzt2YXIgc3VtNjQkMT11dGlscy5zdW02NDt2YXIgc3VtNjRfaGkkMT11dGlscy5zdW02NF9oaTt2YXIgc3VtNjRfbG8kMT11dGlscy5zdW02NF9sbzt2YXIgc3VtNjRfNF9oaSQxPXV0aWxzLnN1bTY0XzRfaGk7dmFyIHN1bTY0XzRfbG8kMT11dGlscy5zdW02NF80X2xvO3ZhciBzdW02NF81X2hpJDE9dXRpbHMuc3VtNjRfNV9oaTt2YXIgc3VtNjRfNV9sbyQxPXV0aWxzLnN1bTY0XzVfbG87dmFyIEJsb2NrSGFzaCQzPWNvbW1vbi5CbG9ja0hhc2g7dmFyIHNoYTUxMl9LPVsxMTE2MzUyNDA4LDM2MDk3Njc0NTgsMTg5OTQ0NzQ0MSw2MDI4OTE3MjUsMzA0OTMyMzQ3MSwzOTY0NDg0Mzk5LDM5MjEwMDk1NzMsMjE3MzI5NTU0OCw5NjE5ODcxNjMsNDA4MTYyODQ3MiwxNTA4OTcwOTkzLDMwNTM4MzQyNjUsMjQ1MzYzNTc0OCwyOTM3NjcxNTc5LDI4NzA3NjMyMjEsMzY2NDYwOTU2MCwzNjI0MzgxMDgwLDI3MzQ4ODMzOTQsMzEwNTk4NDAxLDExNjQ5OTY1NDIsNjA3MjI1Mjc4LDEzMjM2MTA3NjQsMTQyNjg4MTk4NywzNTkwMzA0OTk0LDE5MjUwNzgzODgsNDA2ODE4MjM4MywyMTYyMDc4MjA2LDk5MTMzNjExMywyNjE0ODg4MTAzLDYzMzgwMzMxNywzMjQ4MjIyNTgwLDM0Nzk3NzQ4NjgsMzgzNTM5MDQwMSwyNjY2NjEzNDU4LDQwMjIyMjQ3NzQsOTQ0NzExMTM5LDI2NDM0NzA3OCwyMzQxMjYyNzczLDYwNDgwNzYyOCwyMDA3ODAwOTMzLDc3MDI1NTk4MywxNDk1OTkwOTAxLDEyNDkxNTAxMjIsMTg1NjQzMTIzNSwxNTU1MDgxNjkyLDMxNzUyMTgxMzIsMTk5NjA2NDk4NiwyMTk4OTUwODM3LDI1NTQyMjA4ODIsMzk5OTcxOTMzOSwyODIxODM0MzQ5LDc2Njc4NDAxNiwyOTUyOTk2ODA4LDI1NjY1OTQ4NzksMzIxMDMxMzY3MSwzMjAzMzM3OTU2LDMzMzY1NzE4OTEsMTAzNDQ1NzAyNiwzNTg0NTI4NzExLDI0NjY5NDg5MDEsMTEzOTI2OTkzLDM3NTgzMjYzODMsMzM4MjQxODk1LDE2ODcxNzkzNiw2NjYzMDcyMDUsMTE4ODE3OTk2NCw3NzM1Mjk5MTIsMTU0NjA0NTczNCwxMjk0NzU3MzcyLDE1MjI4MDU0ODUsMTM5NjE4MjI5MSwyNjQzODMzODIzLDE2OTUxODM3MDAsMjM0MzUyNzM5MCwxOTg2NjYxMDUxLDEwMTQ0Nzc0ODAsMjE3NzAyNjM1MCwxMjA2NzU5MTQyLDI0NTY5NTYwMzcsMzQ0MDc3NjI3LDI3MzA0ODU5MjEsMTI5MDg2MzQ2MCwyODIwMzAyNDExLDMxNTg0NTQyNzMsMzI1OTczMDgwMCwzNTA1OTUyNjU3LDMzNDU3NjQ3NzEsMTA2MjE3MDA4LDM1MTYwNjU4MTcsMzYwNjAwODM0NCwzNjAwMzUyODA0LDE0MzI3MjU3NzYsNDA5NDU3MTkwOSwxNDY3MDMxNTk0LDI3NTQyMzM0NCw4NTExNjk3MjAsNDMwMjI3NzM0LDMxMDA4MjM3NTIsNTA2OTQ4NjE2LDEzNjMyNTgxOTUsNjU5MDYwNTU2LDM3NTA2ODU1OTMsODgzOTk3ODc3LDM3ODUwNTAyODAsOTU4MTM5NTcxLDMzMTgzMDc0MjcsMTMyMjgyMjIxOCwzODEyNzIzNDAzLDE1MzcwMDIwNjMsMjAwMzAzNDk5NSwxNzQ3ODczNzc5LDM2MDIwMzY4OTksMTk1NTU2MjIyMiwxNTc1OTkwMDEyLDIwMjQxMDQ4MTUsMTEyNTU5MjkyOCwyMjI3NzMwNDUyLDI3MTY5MDQzMDYsMjM2MTg1MjQyNCw0NDI3NzYwNDQsMjQyODQzNjQ3NCw1OTM2OTgzNDQsMjc1NjczNDE4NywzNzMzMTEwMjQ5LDMyMDQwMzE0NzksMjk5OTM1MTU3MywzMzI5MzI1Mjk4LDM4MTU5MjA0MjcsMzM5MTU2OTYxNCwzOTI4MzgzOTAwLDM1MTUyNjcyNzEsNTY2MjgwNzExLDM5NDAxODc2MDYsMzQ1NDA2OTUzNCw0MTE4NjMwMjcxLDQwMDAyMzk5OTIsMTE2NDE4NDc0LDE5MTQxMzg1NTQsMTc0MjkyNDIxLDI3MzEwNTUyNzAsMjg5MzgwMzU2LDMyMDM5OTMwMDYsNDYwMzkzMjY5LDMyMDYyMDMxNSw2ODU0NzE3MzMsNTg3NDk2ODM2LDg1MjE0Mjk3MSwxMDg2NzkyODUxLDEwMTcwMzYyOTgsMzY1NTQzMTAwLDExMjYwMDA1ODAsMjYxODI5NzY3NiwxMjg4MDMzNDcwLDM0MDk4NTUxNTgsMTUwMTUwNTk0OCw0MjM0NTA5ODY2LDE2MDcxNjc5MTUsOTg3MTY3NDY4LDE4MTY0MDIzMTYsMTI0NjE4OTU5MV07ZnVuY3Rpb24gU0hBNTEyKCl7aWYoISh0aGlzIGluc3RhbmNlb2YgU0hBNTEyKSlyZXR1cm4gbmV3IFNIQTUxMjtCbG9ja0hhc2gkMy5jYWxsKHRoaXMpO3RoaXMuaD1bMTc3OTAzMzcwMyw0MDg5MjM1NzIwLDMxNDQxMzQyNzcsMjIyNzg3MzU5NSwxMDEzOTA0MjQyLDQyNzExNzU3MjMsMjc3MzQ4MDc2MiwxNTk1NzUwMTI5LDEzNTk4OTMxMTksMjkxNzU2NTEzNywyNjAwODIyOTI0LDcyNTUxMTE5OSw1Mjg3MzQ2MzUsNDIxNTM4OTU0NywxNTQxNDU5MjI1LDMyNzAzMzIwOV07dGhpcy5rPXNoYTUxMl9LO3RoaXMuVz1uZXcgQXJyYXkoMTYwKX11dGlscy5pbmhlcml0cyhTSEE1MTIsQmxvY2tIYXNoJDMpO3ZhciBfNTEyPVNIQTUxMjtTSEE1MTIuYmxvY2tTaXplPTEwMjQ7U0hBNTEyLm91dFNpemU9NTEyO1NIQTUxMi5obWFjU3RyZW5ndGg9MTkyO1NIQTUxMi5wYWRMZW5ndGg9MTI4O1NIQTUxMi5wcm90b3R5cGUuX3ByZXBhcmVCbG9jaz1mdW5jdGlvbiBfcHJlcGFyZUJsb2NrKG1zZyxzdGFydCl7dmFyIFc9dGhpcy5XO2Zvcih2YXIgaT0wO2k8MzI7aSsrKVdbaV09bXNnW3N0YXJ0K2ldO2Zvcig7aTxXLmxlbmd0aDtpKz0yKXt2YXIgYzBfaGk9ZzFfNTEyX2hpKFdbaS00XSxXW2ktM10pO3ZhciBjMF9sbz1nMV81MTJfbG8oV1tpLTRdLFdbaS0zXSk7dmFyIGMxX2hpPVdbaS0xNF07dmFyIGMxX2xvPVdbaS0xM107dmFyIGMyX2hpPWcwXzUxMl9oaShXW2ktMzBdLFdbaS0yOV0pO3ZhciBjMl9sbz1nMF81MTJfbG8oV1tpLTMwXSxXW2ktMjldKTt2YXIgYzNfaGk9V1tpLTMyXTt2YXIgYzNfbG89V1tpLTMxXTtXW2ldPXN1bTY0XzRfaGkkMShjMF9oaSxjMF9sbyxjMV9oaSxjMV9sbyxjMl9oaSxjMl9sbyxjM19oaSxjM19sbyk7V1tpKzFdPXN1bTY0XzRfbG8kMShjMF9oaSxjMF9sbyxjMV9oaSxjMV9sbyxjMl9oaSxjMl9sbyxjM19oaSxjM19sbyl9fTtTSEE1MTIucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24gX3VwZGF0ZShtc2csc3RhcnQpe3RoaXMuX3ByZXBhcmVCbG9jayhtc2csc3RhcnQpO3ZhciBXPXRoaXMuVzt2YXIgYWg9dGhpcy5oWzBdO3ZhciBhbD10aGlzLmhbMV07dmFyIGJoPXRoaXMuaFsyXTt2YXIgYmw9dGhpcy5oWzNdO3ZhciBjaD10aGlzLmhbNF07dmFyIGNsPXRoaXMuaFs1XTt2YXIgZGg9dGhpcy5oWzZdO3ZhciBkbD10aGlzLmhbN107dmFyIGVoPXRoaXMuaFs4XTt2YXIgZWw9dGhpcy5oWzldO3ZhciBmaD10aGlzLmhbMTBdO3ZhciBmbD10aGlzLmhbMTFdO3ZhciBnaD10aGlzLmhbMTJdO3ZhciBnbD10aGlzLmhbMTNdO3ZhciBoaD10aGlzLmhbMTRdO3ZhciBobD10aGlzLmhbMTVdO21pbmltYWxpc3RpY0Fzc2VydCh0aGlzLmsubGVuZ3RoPT09Vy5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8Vy5sZW5ndGg7aSs9Mil7dmFyIGMwX2hpPWhoO3ZhciBjMF9sbz1obDt2YXIgYzFfaGk9czFfNTEyX2hpKGVoLGVsKTt2YXIgYzFfbG89czFfNTEyX2xvKGVoLGVsKTt2YXIgYzJfaGk9Y2g2NF9oaShlaCxlbCxmaCxmbCxnaCxnbCk7dmFyIGMyX2xvPWNoNjRfbG8oZWgsZWwsZmgsZmwsZ2gsZ2wpO3ZhciBjM19oaT10aGlzLmtbaV07dmFyIGMzX2xvPXRoaXMua1tpKzFdO3ZhciBjNF9oaT1XW2ldO3ZhciBjNF9sbz1XW2krMV07dmFyIFQxX2hpPXN1bTY0XzVfaGkkMShjMF9oaSxjMF9sbyxjMV9oaSxjMV9sbyxjMl9oaSxjMl9sbyxjM19oaSxjM19sbyxjNF9oaSxjNF9sbyk7dmFyIFQxX2xvPXN1bTY0XzVfbG8kMShjMF9oaSxjMF9sbyxjMV9oaSxjMV9sbyxjMl9oaSxjMl9sbyxjM19oaSxjM19sbyxjNF9oaSxjNF9sbyk7YzBfaGk9czBfNTEyX2hpKGFoLGFsKTtjMF9sbz1zMF81MTJfbG8oYWgsYWwpO2MxX2hpPW1hajY0X2hpKGFoLGFsLGJoLGJsLGNoLGNsKTtjMV9sbz1tYWo2NF9sbyhhaCxhbCxiaCxibCxjaCxjbCk7dmFyIFQyX2hpPXN1bTY0X2hpJDEoYzBfaGksYzBfbG8sYzFfaGksYzFfbG8pO3ZhciBUMl9sbz1zdW02NF9sbyQxKGMwX2hpLGMwX2xvLGMxX2hpLGMxX2xvKTtoaD1naDtobD1nbDtnaD1maDtnbD1mbDtmaD1laDtmbD1lbDtlaD1zdW02NF9oaSQxKGRoLGRsLFQxX2hpLFQxX2xvKTtlbD1zdW02NF9sbyQxKGRsLGRsLFQxX2hpLFQxX2xvKTtkaD1jaDtkbD1jbDtjaD1iaDtjbD1ibDtiaD1haDtibD1hbDthaD1zdW02NF9oaSQxKFQxX2hpLFQxX2xvLFQyX2hpLFQyX2xvKTthbD1zdW02NF9sbyQxKFQxX2hpLFQxX2xvLFQyX2hpLFQyX2xvKX1zdW02NCQxKHRoaXMuaCwwLGFoLGFsKTtzdW02NCQxKHRoaXMuaCwyLGJoLGJsKTtzdW02NCQxKHRoaXMuaCw0LGNoLGNsKTtzdW02NCQxKHRoaXMuaCw2LGRoLGRsKTtzdW02NCQxKHRoaXMuaCw4LGVoLGVsKTtzdW02NCQxKHRoaXMuaCwxMCxmaCxmbCk7c3VtNjQkMSh0aGlzLmgsMTIsZ2gsZ2wpO3N1bTY0JDEodGhpcy5oLDE0LGhoLGhsKX07U0hBNTEyLnByb3RvdHlwZS5fZGlnZXN0PWZ1bmN0aW9uIGRpZ2VzdChlbmMpe2lmKGVuYz09PVwiaGV4XCIpcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLFwiYmlnXCIpO2Vsc2UgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLFwiYmlnXCIpfTtmdW5jdGlvbiBjaDY0X2hpKHhoLHhsLHloLHlsLHpoKXt2YXIgcj14aCZ5aF5+eGgmemg7aWYocjwwKXIrPTQyOTQ5NjcyOTY7cmV0dXJuIHJ9ZnVuY3Rpb24gY2g2NF9sbyh4aCx4bCx5aCx5bCx6aCx6bCl7dmFyIHI9eGwmeWxefnhsJnpsO2lmKHI8MClyKz00Mjk0OTY3Mjk2O3JldHVybiByfWZ1bmN0aW9uIG1hajY0X2hpKHhoLHhsLHloLHlsLHpoKXt2YXIgcj14aCZ5aF54aCZ6aF55aCZ6aDtpZihyPDApcis9NDI5NDk2NzI5NjtyZXR1cm4gcn1mdW5jdGlvbiBtYWo2NF9sbyh4aCx4bCx5aCx5bCx6aCx6bCl7dmFyIHI9eGwmeWxeeGwmemxeeWwmemw7aWYocjwwKXIrPTQyOTQ5NjcyOTY7cmV0dXJuIHJ9ZnVuY3Rpb24gczBfNTEyX2hpKHhoLHhsKXt2YXIgYzBfaGk9cm90cjY0X2hpJDEoeGgseGwsMjgpO3ZhciBjMV9oaT1yb3RyNjRfaGkkMSh4bCx4aCwyKTt2YXIgYzJfaGk9cm90cjY0X2hpJDEoeGwseGgsNyk7dmFyIHI9YzBfaGleYzFfaGleYzJfaGk7aWYocjwwKXIrPTQyOTQ5NjcyOTY7cmV0dXJuIHJ9ZnVuY3Rpb24gczBfNTEyX2xvKHhoLHhsKXt2YXIgYzBfbG89cm90cjY0X2xvJDEoeGgseGwsMjgpO3ZhciBjMV9sbz1yb3RyNjRfbG8kMSh4bCx4aCwyKTt2YXIgYzJfbG89cm90cjY0X2xvJDEoeGwseGgsNyk7dmFyIHI9YzBfbG9eYzFfbG9eYzJfbG87aWYocjwwKXIrPTQyOTQ5NjcyOTY7cmV0dXJuIHJ9ZnVuY3Rpb24gczFfNTEyX2hpKHhoLHhsKXt2YXIgYzBfaGk9cm90cjY0X2hpJDEoeGgseGwsMTQpO3ZhciBjMV9oaT1yb3RyNjRfaGkkMSh4aCx4bCwxOCk7dmFyIGMyX2hpPXJvdHI2NF9oaSQxKHhsLHhoLDkpO3ZhciByPWMwX2hpXmMxX2hpXmMyX2hpO2lmKHI8MClyKz00Mjk0OTY3Mjk2O3JldHVybiByfWZ1bmN0aW9uIHMxXzUxMl9sbyh4aCx4bCl7dmFyIGMwX2xvPXJvdHI2NF9sbyQxKHhoLHhsLDE0KTt2YXIgYzFfbG89cm90cjY0X2xvJDEoeGgseGwsMTgpO3ZhciBjMl9sbz1yb3RyNjRfbG8kMSh4bCx4aCw5KTt2YXIgcj1jMF9sb15jMV9sb15jMl9sbztpZihyPDApcis9NDI5NDk2NzI5NjtyZXR1cm4gcn1mdW5jdGlvbiBnMF81MTJfaGkoeGgseGwpe3ZhciBjMF9oaT1yb3RyNjRfaGkkMSh4aCx4bCwxKTt2YXIgYzFfaGk9cm90cjY0X2hpJDEoeGgseGwsOCk7dmFyIGMyX2hpPXNocjY0X2hpJDEoeGgseGwsNyk7dmFyIHI9YzBfaGleYzFfaGleYzJfaGk7aWYocjwwKXIrPTQyOTQ5NjcyOTY7cmV0dXJuIHJ9ZnVuY3Rpb24gZzBfNTEyX2xvKHhoLHhsKXt2YXIgYzBfbG89cm90cjY0X2xvJDEoeGgseGwsMSk7dmFyIGMxX2xvPXJvdHI2NF9sbyQxKHhoLHhsLDgpO3ZhciBjMl9sbz1zaHI2NF9sbyQxKHhoLHhsLDcpO3ZhciByPWMwX2xvXmMxX2xvXmMyX2xvO2lmKHI8MClyKz00Mjk0OTY3Mjk2O3JldHVybiByfWZ1bmN0aW9uIGcxXzUxMl9oaSh4aCx4bCl7dmFyIGMwX2hpPXJvdHI2NF9oaSQxKHhoLHhsLDE5KTt2YXIgYzFfaGk9cm90cjY0X2hpJDEoeGwseGgsMjkpO3ZhciBjMl9oaT1zaHI2NF9oaSQxKHhoLHhsLDYpO3ZhciByPWMwX2hpXmMxX2hpXmMyX2hpO2lmKHI8MClyKz00Mjk0OTY3Mjk2O3JldHVybiByfWZ1bmN0aW9uIGcxXzUxMl9sbyh4aCx4bCl7dmFyIGMwX2xvPXJvdHI2NF9sbyQxKHhoLHhsLDE5KTt2YXIgYzFfbG89cm90cjY0X2xvJDEoeGwseGgsMjkpO3ZhciBjMl9sbz1zaHI2NF9sbyQxKHhoLHhsLDYpO3ZhciByPWMwX2xvXmMxX2xvXmMyX2xvO2lmKHI8MClyKz00Mjk0OTY3Mjk2O3JldHVybiByfVwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIFNIQTM4NCgpe2lmKCEodGhpcyBpbnN0YW5jZW9mIFNIQTM4NCkpcmV0dXJuIG5ldyBTSEEzODQ7XzUxMi5jYWxsKHRoaXMpO3RoaXMuaD1bMzQxODA3MDM2NSwzMjM4MzcxMDMyLDE2NTQyNzAyNTAsOTE0MTUwNjYzLDI0Mzg1MjkzNzAsODEyNzAyOTk5LDM1NTQ2MjM2MCw0MTQ0OTEyNjk3LDE3MzE0MDU0MTUsNDI5MDc3NTg1NywyMzk0MTgwMjMxLDE3NTA2MDMwMjUsMzY3NTAwODUyNSwxNjk0MDc2ODM5LDEyMDMwNjI4MTMsMzIwNDA3NTQyOF19dXRpbHMuaW5oZXJpdHMoU0hBMzg0LF81MTIpO3ZhciBfMzg0PVNIQTM4NDtTSEEzODQuYmxvY2tTaXplPTEwMjQ7U0hBMzg0Lm91dFNpemU9Mzg0O1NIQTM4NC5obWFjU3RyZW5ndGg9MTkyO1NIQTM4NC5wYWRMZW5ndGg9MTI4O1NIQTM4NC5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbiBkaWdlc3QoZW5jKXtpZihlbmM9PT1cImhleFwiKXJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLDEyKSxcImJpZ1wiKTtlbHNlIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLDEyKSxcImJpZ1wiKX07XCJ1c2Ugc3RyaWN0XCI7dmFyIHNoYTE9XzE7dmFyIHNoYTIyND1fMjI0O3ZhciBzaGEyNTY9XzI1Njt2YXIgc2hhMzg0PV8zODQ7dmFyIHNoYTUxMj1fNTEyO3ZhciBzaGE9e3NoYTE6c2hhMSxzaGEyMjQ6c2hhMjI0LHNoYTI1NjpzaGEyNTYsc2hhMzg0OnNoYTM4NCxzaGE1MTI6c2hhNTEyfTtcInVzZSBzdHJpY3RcIjt2YXIgcm90bDMyJDI9dXRpbHMucm90bDMyO3ZhciBzdW0zMiQzPXV0aWxzLnN1bTMyO3ZhciBzdW0zMl8zJDE9dXRpbHMuc3VtMzJfMzt2YXIgc3VtMzJfNCQyPXV0aWxzLnN1bTMyXzQ7dmFyIEJsb2NrSGFzaCQ0PWNvbW1vbi5CbG9ja0hhc2g7ZnVuY3Rpb24gUklQRU1EMTYwKCl7aWYoISh0aGlzIGluc3RhbmNlb2YgUklQRU1EMTYwKSlyZXR1cm4gbmV3IFJJUEVNRDE2MDtCbG9ja0hhc2gkNC5jYWxsKHRoaXMpO3RoaXMuaD1bMTczMjU4NDE5Myw0MDIzMjMzNDE3LDI1NjIzODMxMDIsMjcxNzMzODc4LDMyODUzNzc1MjBdO3RoaXMuZW5kaWFuPVwibGl0dGxlXCJ9dXRpbHMuaW5oZXJpdHMoUklQRU1EMTYwLEJsb2NrSGFzaCQ0KTt2YXIgcmlwZW1kMTYwPVJJUEVNRDE2MDtSSVBFTUQxNjAuYmxvY2tTaXplPTUxMjtSSVBFTUQxNjAub3V0U2l6ZT0xNjA7UklQRU1EMTYwLmhtYWNTdHJlbmd0aD0xOTI7UklQRU1EMTYwLnBhZExlbmd0aD02NDtSSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24gdXBkYXRlKG1zZyxzdGFydCl7dmFyIEE9dGhpcy5oWzBdO3ZhciBCPXRoaXMuaFsxXTt2YXIgQz10aGlzLmhbMl07dmFyIEQ9dGhpcy5oWzNdO3ZhciBFPXRoaXMuaFs0XTt2YXIgQWg9QTt2YXIgQmg9Qjt2YXIgQ2g9Qzt2YXIgRGg9RDt2YXIgRWg9RTtmb3IodmFyIGo9MDtqPDgwO2orKyl7dmFyIFQ9c3VtMzIkMyhyb3RsMzIkMihzdW0zMl80JDIoQSxmKGosQixDLEQpLG1zZ1tyW2pdK3N0YXJ0XSxLKGopKSxzW2pdKSxFKTtBPUU7RT1EO0Q9cm90bDMyJDIoQywxMCk7Qz1CO0I9VDtUPXN1bTMyJDMocm90bDMyJDIoc3VtMzJfNCQyKEFoLGYoNzktaixCaCxDaCxEaCksbXNnW3JoW2pdK3N0YXJ0XSxLaChqKSksc2hbal0pLEVoKTtBaD1FaDtFaD1EaDtEaD1yb3RsMzIkMihDaCwxMCk7Q2g9Qmg7Qmg9VH1UPXN1bTMyXzMkMSh0aGlzLmhbMV0sQyxEaCk7dGhpcy5oWzFdPXN1bTMyXzMkMSh0aGlzLmhbMl0sRCxFaCk7dGhpcy5oWzJdPXN1bTMyXzMkMSh0aGlzLmhbM10sRSxBaCk7dGhpcy5oWzNdPXN1bTMyXzMkMSh0aGlzLmhbNF0sQSxCaCk7dGhpcy5oWzRdPXN1bTMyXzMkMSh0aGlzLmhbMF0sQixDaCk7dGhpcy5oWzBdPVR9O1JJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbiBkaWdlc3QoZW5jKXtpZihlbmM9PT1cImhleFwiKXJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCxcImxpdHRsZVwiKTtlbHNlIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCxcImxpdHRsZVwiKX07ZnVuY3Rpb24gZihqLHgseSx6KXtpZihqPD0xNSlyZXR1cm4geF55Xno7ZWxzZSBpZihqPD0zMSlyZXR1cm4geCZ5fH54Jno7ZWxzZSBpZihqPD00NylyZXR1cm4oeHx+eSleejtlbHNlIGlmKGo8PTYzKXJldHVybiB4Jnp8eSZ+ejtlbHNlIHJldHVybiB4Xih5fH56KX1mdW5jdGlvbiBLKGope2lmKGo8PTE1KXJldHVybiAwO2Vsc2UgaWYoajw9MzEpcmV0dXJuIDE1MTg1MDAyNDk7ZWxzZSBpZihqPD00NylyZXR1cm4gMTg1OTc3NTM5MztlbHNlIGlmKGo8PTYzKXJldHVybiAyNDAwOTU5NzA4O2Vsc2UgcmV0dXJuIDI4NDA4NTM4Mzh9ZnVuY3Rpb24gS2goail7aWYoajw9MTUpcmV0dXJuIDEzNTI4Mjk5MjY7ZWxzZSBpZihqPD0zMSlyZXR1cm4gMTU0ODYwMzY4NDtlbHNlIGlmKGo8PTQ3KXJldHVybiAxODM2MDcyNjkxO2Vsc2UgaWYoajw9NjMpcmV0dXJuIDIwNTM5OTQyMTc7ZWxzZSByZXR1cm4gMH12YXIgcj1bMCwxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSw3LDQsMTMsMSwxMCw2LDE1LDMsMTIsMCw5LDUsMiwxNCwxMSw4LDMsMTAsMTQsNCw5LDE1LDgsMSwyLDcsMCw2LDEzLDExLDUsMTIsMSw5LDExLDEwLDAsOCwxMiw0LDEzLDMsNywxNSwxNCw1LDYsMiw0LDAsNSw5LDcsMTIsMiwxMCwxNCwxLDMsOCwxMSw2LDE1LDEzXTt2YXIgcmg9WzUsMTQsNywwLDksMiwxMSw0LDEzLDYsMTUsOCwxLDEwLDMsMTIsNiwxMSwzLDcsMCwxMyw1LDEwLDE0LDE1LDgsMTIsNCw5LDEsMiwxNSw1LDEsMyw3LDE0LDYsOSwxMSw4LDEyLDIsMTAsMCw0LDEzLDgsNiw0LDEsMywxMSwxNSwwLDUsMTIsMiwxMyw5LDcsMTAsMTQsMTIsMTUsMTAsNCwxLDUsOCw3LDYsMiwxMywxNCwwLDMsOSwxMV07dmFyIHM9WzExLDE0LDE1LDEyLDUsOCw3LDksMTEsMTMsMTQsMTUsNiw3LDksOCw3LDYsOCwxMywxMSw5LDcsMTUsNywxMiwxNSw5LDExLDcsMTMsMTIsMTEsMTMsNiw3LDE0LDksMTMsMTUsMTQsOCwxMyw2LDUsMTIsNyw1LDExLDEyLDE0LDE1LDE0LDE1LDksOCw5LDE0LDUsNiw4LDYsNSwxMiw5LDE1LDUsMTEsNiw4LDEzLDEyLDUsMTIsMTMsMTQsMTEsOCw1LDZdO3ZhciBzaD1bOCw5LDksMTEsMTMsMTUsMTUsNSw3LDcsOCwxMSwxNCwxNCwxMiw2LDksMTMsMTUsNywxMiw4LDksMTEsNyw3LDEyLDcsNiwxNSwxMywxMSw5LDcsMTUsMTEsOCw2LDYsMTQsMTIsMTMsNSwxNCwxMywxMyw3LDUsMTUsNSw4LDExLDE0LDE0LDYsMTQsNiw5LDEyLDksMTIsNSwxNSw4LDgsNSwxMiw5LDEyLDUsMTQsNiw4LDEzLDYsNSwxNSwxMywxMSwxMV07dmFyIHJpcGVtZD17cmlwZW1kMTYwOnJpcGVtZDE2MH07XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gSG1hYyhoYXNoLGtleSxlbmMpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEhtYWMpKXJldHVybiBuZXcgSG1hYyhoYXNoLGtleSxlbmMpO3RoaXMuSGFzaD1oYXNoO3RoaXMuYmxvY2tTaXplPWhhc2guYmxvY2tTaXplLzg7dGhpcy5vdXRTaXplPWhhc2gub3V0U2l6ZS84O3RoaXMuaW5uZXI9bnVsbDt0aGlzLm91dGVyPW51bGw7dGhpcy5faW5pdCh1dGlscy50b0FycmF5KGtleSxlbmMpKX12YXIgaG1hYz1IbWFjO0htYWMucHJvdG90eXBlLl9pbml0PWZ1bmN0aW9uIGluaXQoa2V5KXtpZihrZXkubGVuZ3RoPnRoaXMuYmxvY2tTaXplKWtleT0obmV3IHRoaXMuSGFzaCkudXBkYXRlKGtleSkuZGlnZXN0KCk7bWluaW1hbGlzdGljQXNzZXJ0KGtleS5sZW5ndGg8PXRoaXMuYmxvY2tTaXplKTtmb3IodmFyIGk9a2V5Lmxlbmd0aDtpPHRoaXMuYmxvY2tTaXplO2krKylrZXkucHVzaCgwKTtmb3IoaT0wO2k8a2V5Lmxlbmd0aDtpKyspa2V5W2ldXj01NDt0aGlzLmlubmVyPShuZXcgdGhpcy5IYXNoKS51cGRhdGUoa2V5KTtmb3IoaT0wO2k8a2V5Lmxlbmd0aDtpKyspa2V5W2ldXj0xMDY7dGhpcy5vdXRlcj0obmV3IHRoaXMuSGFzaCkudXBkYXRlKGtleSl9O0htYWMucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbiB1cGRhdGUobXNnLGVuYyl7dGhpcy5pbm5lci51cGRhdGUobXNnLGVuYyk7cmV0dXJuIHRoaXN9O0htYWMucHJvdG90eXBlLmRpZ2VzdD1mdW5jdGlvbiBkaWdlc3QoZW5jKXt0aGlzLm91dGVyLnVwZGF0ZSh0aGlzLmlubmVyLmRpZ2VzdCgpKTtyZXR1cm4gdGhpcy5vdXRlci5kaWdlc3QoZW5jKX07dmFyIGhhc2hfMT1jcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7dmFyIGhhc2g9ZXhwb3J0cztoYXNoLnV0aWxzPXV0aWxzO2hhc2guY29tbW9uPWNvbW1vbjtoYXNoLnNoYT1zaGE7aGFzaC5yaXBlbWQ9cmlwZW1kO2hhc2guaG1hYz1obWFjO2hhc2guc2hhMT1oYXNoLnNoYS5zaGExO2hhc2guc2hhMjU2PWhhc2guc2hhLnNoYTI1NjtoYXNoLnNoYTIyND1oYXNoLnNoYS5zaGEyMjQ7aGFzaC5zaGEzODQ9aGFzaC5zaGEuc2hhMzg0O2hhc2guc2hhNTEyPWhhc2guc2hhLnNoYTUxMjtoYXNoLnJpcGVtZDE2MD1oYXNoLnJpcGVtZC5yaXBlbWQxNjB9KTt2YXIgY29tbW9uanNHbG9iYWwkMT10eXBlb2YgZ2xvYmFsVGhpcyE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsVGhpczp0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIj93aW5kb3c6dHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsOnR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIj9zZWxmOnt9O2Z1bmN0aW9uIGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzJDEoeCl7cmV0dXJuIHgmJnguX19lc01vZHVsZSYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsXCJkZWZhdWx0XCIpP3hbXCJkZWZhdWx0XCJdOnh9ZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUkMShmbixiYXNlZGlyLG1vZHVsZSl7cmV0dXJuIG1vZHVsZT17cGF0aDpiYXNlZGlyLGV4cG9ydHM6e30scmVxdWlyZTpmdW5jdGlvbihwYXRoLGJhc2Upe3JldHVybiBjb21tb25qc1JlcXVpcmUkMShwYXRoLGJhc2U9PT11bmRlZmluZWR8fGJhc2U9PT1udWxsP21vZHVsZS5wYXRoOmJhc2UpfX0sZm4obW9kdWxlLG1vZHVsZS5leHBvcnRzKSxtb2R1bGUuZXhwb3J0c31mdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbU5hbWVzcGFjZUlmUHJlc2VudCQxKG4pe3JldHVybiBuJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixcImRlZmF1bHRcIik/bltcImRlZmF1bHRcIl06bn1mdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbU5hbWVzcGFjZUlmTm90TmFtZWQkMShuKXtyZXR1cm4gbiYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sXCJkZWZhdWx0XCIpJiZPYmplY3Qua2V5cyhuKS5sZW5ndGg9PT0xP25bXCJkZWZhdWx0XCJdOm59ZnVuY3Rpb24gZ2V0QXVnbWVudGVkTmFtZXNwYWNlJDEobil7aWYobi5fX2VzTW9kdWxlKXJldHVybiBuO3ZhciBhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO09iamVjdC5rZXlzKG4pLmZvckVhY2goZnVuY3Rpb24oayl7dmFyIGQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLGspO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGssZC5nZXQ/ZDp7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBuW2tdfX0pfSk7cmV0dXJuIGF9ZnVuY3Rpb24gY29tbW9uanNSZXF1aXJlJDEoKXt0aHJvdyBuZXcgRXJyb3IoXCJEeW5hbWljIHJlcXVpcmVzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBieSBAcm9sbHVwL3BsdWdpbi1jb21tb25qc1wiKX12YXIgbWluaW1hbGlzdGljQXNzZXJ0JDE9YXNzZXJ0JDE7ZnVuY3Rpb24gYXNzZXJ0JDEodmFsLG1zZyl7aWYoIXZhbCl0aHJvdyBuZXcgRXJyb3IobXNnfHxcIkFzc2VydGlvbiBmYWlsZWRcIil9YXNzZXJ0JDEuZXF1YWw9ZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCxyLG1zZyl7aWYobCE9cil0aHJvdyBuZXcgRXJyb3IobXNnfHxcIkFzc2VydGlvbiBmYWlsZWQ6IFwiK2wrXCIgIT0gXCIrcil9O3ZhciB1dGlsc18xPWNyZWF0ZUNvbW1vbmpzTW9kdWxlJDEoZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe1widXNlIHN0cmljdFwiO3ZhciB1dGlscz1leHBvcnRzO2Z1bmN0aW9uIHRvQXJyYXkobXNnLGVuYyl7aWYoQXJyYXkuaXNBcnJheShtc2cpKXJldHVybiBtc2cuc2xpY2UoKTtpZighbXNnKXJldHVybltdO3ZhciByZXM9W107aWYodHlwZW9mIG1zZyE9PVwic3RyaW5nXCIpe2Zvcih2YXIgaT0wO2k8bXNnLmxlbmd0aDtpKyspcmVzW2ldPW1zZ1tpXXwwO3JldHVybiByZXN9aWYoZW5jPT09XCJoZXhcIil7bXNnPW1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2dpLFwiXCIpO2lmKG1zZy5sZW5ndGglMiE9PTApbXNnPVwiMFwiK21zZztmb3IodmFyIGk9MDtpPG1zZy5sZW5ndGg7aSs9MilyZXMucHVzaChwYXJzZUludChtc2dbaV0rbXNnW2krMV0sMTYpKX1lbHNle2Zvcih2YXIgaT0wO2k8bXNnLmxlbmd0aDtpKyspe3ZhciBjPW1zZy5jaGFyQ29kZUF0KGkpO3ZhciBoaT1jPj44O3ZhciBsbz1jJjI1NTtpZihoaSlyZXMucHVzaChoaSxsbyk7ZWxzZSByZXMucHVzaChsbyl9fXJldHVybiByZXN9dXRpbHMudG9BcnJheT10b0FycmF5O2Z1bmN0aW9uIHplcm8yKHdvcmQpe2lmKHdvcmQubGVuZ3RoPT09MSlyZXR1cm5cIjBcIit3b3JkO2Vsc2UgcmV0dXJuIHdvcmR9dXRpbHMuemVybzI9emVybzI7ZnVuY3Rpb24gdG9IZXgobXNnKXt2YXIgcmVzPVwiXCI7Zm9yKHZhciBpPTA7aTxtc2cubGVuZ3RoO2krKylyZXMrPXplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO3JldHVybiByZXN9dXRpbHMudG9IZXg9dG9IZXg7dXRpbHMuZW5jb2RlPWZ1bmN0aW9uIGVuY29kZShhcnIsZW5jKXtpZihlbmM9PT1cImhleFwiKXJldHVybiB0b0hleChhcnIpO2Vsc2UgcmV0dXJuIGFycn19KTt2YXIgdXRpbHNfMSQxPWNyZWF0ZUNvbW1vbmpzTW9kdWxlJDEoZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe1widXNlIHN0cmljdFwiO3ZhciB1dGlscz1leHBvcnRzO3V0aWxzLmFzc2VydD1taW5pbWFsaXN0aWNBc3NlcnQkMTt1dGlscy50b0FycmF5PXV0aWxzXzEudG9BcnJheTt1dGlscy56ZXJvMj11dGlsc18xLnplcm8yO3V0aWxzLnRvSGV4PXV0aWxzXzEudG9IZXg7dXRpbHMuZW5jb2RlPXV0aWxzXzEuZW5jb2RlO2Z1bmN0aW9uIGdldE5BRihudW0sdyxiaXRzKXt2YXIgbmFmPW5ldyBBcnJheShNYXRoLm1heChudW0uYml0TGVuZ3RoKCksYml0cykrMSk7bmFmLmZpbGwoMCk7dmFyIHdzPTE8PHcrMTt2YXIgaz1udW0uY2xvbmUoKTtmb3IodmFyIGk9MDtpPG5hZi5sZW5ndGg7aSsrKXt2YXIgejt2YXIgbW9kPWsuYW5kbG4od3MtMSk7aWYoay5pc09kZCgpKXtpZihtb2Q+KHdzPj4xKS0xKXo9KHdzPj4xKS1tb2Q7ZWxzZSB6PW1vZDtrLmlzdWJuKHopfWVsc2V7ej0wfW5hZltpXT16O2suaXVzaHJuKDEpfXJldHVybiBuYWZ9dXRpbHMuZ2V0TkFGPWdldE5BRjtmdW5jdGlvbiBnZXRKU0YoazEsazIpe3ZhciBqc2Y9W1tdLFtdXTtrMT1rMS5jbG9uZSgpO2syPWsyLmNsb25lKCk7dmFyIGQxPTA7dmFyIGQyPTA7dmFyIG04O3doaWxlKGsxLmNtcG4oLWQxKT4wfHxrMi5jbXBuKC1kMik+MCl7dmFyIG0xND1rMS5hbmRsbigzKStkMSYzO3ZhciBtMjQ9azIuYW5kbG4oMykrZDImMztpZihtMTQ9PT0zKW0xND0tMTtpZihtMjQ9PT0zKW0yND0tMTt2YXIgdTE7aWYoKG0xNCYxKT09PTApe3UxPTB9ZWxzZXttOD1rMS5hbmRsbig3KStkMSY3O2lmKChtOD09PTN8fG04PT09NSkmJm0yND09PTIpdTE9LW0xNDtlbHNlIHUxPW0xNH1qc2ZbMF0ucHVzaCh1MSk7dmFyIHUyO2lmKChtMjQmMSk9PT0wKXt1Mj0wfWVsc2V7bTg9azIuYW5kbG4oNykrZDImNztpZigobTg9PT0zfHxtOD09PTUpJiZtMTQ9PT0yKXUyPS1tMjQ7ZWxzZSB1Mj1tMjR9anNmWzFdLnB1c2godTIpO2lmKDIqZDE9PT11MSsxKWQxPTEtZDE7aWYoMipkMj09PXUyKzEpZDI9MS1kMjtrMS5pdXNocm4oMSk7azIuaXVzaHJuKDEpfXJldHVybiBqc2Z9dXRpbHMuZ2V0SlNGPWdldEpTRjtmdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eShvYmosbmFtZSxjb21wdXRlcil7dmFyIGtleT1cIl9cIituYW1lO29iai5wcm90b3R5cGVbbmFtZV09ZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkoKXtyZXR1cm4gdGhpc1trZXldIT09dW5kZWZpbmVkP3RoaXNba2V5XTp0aGlzW2tleV09Y29tcHV0ZXIuY2FsbCh0aGlzKX19dXRpbHMuY2FjaGVkUHJvcGVydHk9Y2FjaGVkUHJvcGVydHk7ZnVuY3Rpb24gcGFyc2VCeXRlcyhieXRlcyl7cmV0dXJuIHR5cGVvZiBieXRlcz09PVwic3RyaW5nXCI/dXRpbHMudG9BcnJheShieXRlcyxcImhleFwiKTpieXRlc311dGlscy5wYXJzZUJ5dGVzPXBhcnNlQnl0ZXM7ZnVuY3Rpb24gaW50RnJvbUxFKGJ5dGVzKXtyZXR1cm4gbmV3IGJuKGJ5dGVzLFwiaGV4XCIsXCJsZVwiKX11dGlscy5pbnRGcm9tTEU9aW50RnJvbUxFfSk7XCJ1c2Ugc3RyaWN0XCI7dmFyIGdldE5BRj11dGlsc18xJDEuZ2V0TkFGO3ZhciBnZXRKU0Y9dXRpbHNfMSQxLmdldEpTRjt2YXIgYXNzZXJ0JDEkMT11dGlsc18xJDEuYXNzZXJ0O2Z1bmN0aW9uIEJhc2VDdXJ2ZSh0eXBlLGNvbmYpe3RoaXMudHlwZT10eXBlO3RoaXMucD1uZXcgYm4oY29uZi5wLDE2KTt0aGlzLnJlZD1jb25mLnByaW1lP2JuLnJlZChjb25mLnByaW1lKTpibi5tb250KHRoaXMucCk7dGhpcy56ZXJvPW5ldyBibigwKS50b1JlZCh0aGlzLnJlZCk7dGhpcy5vbmU9bmV3IGJuKDEpLnRvUmVkKHRoaXMucmVkKTt0aGlzLnR3bz1uZXcgYm4oMikudG9SZWQodGhpcy5yZWQpO3RoaXMubj1jb25mLm4mJm5ldyBibihjb25mLm4sMTYpO3RoaXMuZz1jb25mLmcmJnRoaXMucG9pbnRGcm9tSlNPTihjb25mLmcsY29uZi5nUmVkKTt0aGlzLl93bmFmVDE9bmV3IEFycmF5KDQpO3RoaXMuX3duYWZUMj1uZXcgQXJyYXkoNCk7dGhpcy5fd25hZlQzPW5ldyBBcnJheSg0KTt0aGlzLl93bmFmVDQ9bmV3IEFycmF5KDQpO3RoaXMuX2JpdExlbmd0aD10aGlzLm4/dGhpcy5uLmJpdExlbmd0aCgpOjA7dmFyIGFkanVzdENvdW50PXRoaXMubiYmdGhpcy5wLmRpdih0aGlzLm4pO2lmKCFhZGp1c3RDb3VudHx8YWRqdXN0Q291bnQuY21wbigxMDApPjApe3RoaXMucmVkTj1udWxsfWVsc2V7dGhpcy5fbWF4d2VsbFRyaWNrPXRydWU7dGhpcy5yZWROPXRoaXMubi50b1JlZCh0aGlzLnJlZCl9fXZhciBiYXNlPUJhc2VDdXJ2ZTtCYXNlQ3VydmUucHJvdG90eXBlLnBvaW50PWZ1bmN0aW9uIHBvaW50KCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpfTtCYXNlQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlPWZ1bmN0aW9uIHZhbGlkYXRlKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpfTtCYXNlQ3VydmUucHJvdG90eXBlLl9maXhlZE5hZk11bD1mdW5jdGlvbiBfZml4ZWROYWZNdWwocCxrKXthc3NlcnQkMSQxKHAucHJlY29tcHV0ZWQpO3ZhciBkb3VibGVzPXAuX2dldERvdWJsZXMoKTt2YXIgbmFmPWdldE5BRihrLDEsdGhpcy5fYml0TGVuZ3RoKTt2YXIgST0oMTw8ZG91Ymxlcy5zdGVwKzEpLShkb3VibGVzLnN0ZXAlMj09PTA/MjoxKTtJLz0zO3ZhciByZXByPVtdO3ZhciBqO3ZhciBuYWZXO2ZvcihqPTA7ajxuYWYubGVuZ3RoO2orPWRvdWJsZXMuc3RlcCl7bmFmVz0wO2Zvcih2YXIgbD1qK2RvdWJsZXMuc3RlcC0xO2w+PWo7bC0tKW5hZlc9KG5hZlc8PDEpK25hZltsXTtyZXByLnB1c2gobmFmVyl9dmFyIGE9dGhpcy5qcG9pbnQobnVsbCxudWxsLG51bGwpO3ZhciBiPXRoaXMuanBvaW50KG51bGwsbnVsbCxudWxsKTtmb3IodmFyIGk9STtpPjA7aS0tKXtmb3Ioaj0wO2o8cmVwci5sZW5ndGg7aisrKXtuYWZXPXJlcHJbal07aWYobmFmVz09PWkpYj1iLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdKTtlbHNlIGlmKG5hZlc9PT0taSliPWIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0ubmVnKCkpfWE9YS5hZGQoYil9cmV0dXJuIGEudG9QKCl9O0Jhc2VDdXJ2ZS5wcm90b3R5cGUuX3duYWZNdWw9ZnVuY3Rpb24gX3duYWZNdWwocCxrKXt2YXIgdz00O3ZhciBuYWZQb2ludHM9cC5fZ2V0TkFGUG9pbnRzKHcpO3c9bmFmUG9pbnRzLnduZDt2YXIgd25kPW5hZlBvaW50cy5wb2ludHM7dmFyIG5hZj1nZXROQUYoayx3LHRoaXMuX2JpdExlbmd0aCk7dmFyIGFjYz10aGlzLmpwb2ludChudWxsLG51bGwsbnVsbCk7Zm9yKHZhciBpPW5hZi5sZW5ndGgtMTtpPj0wO2ktLSl7Zm9yKHZhciBsPTA7aT49MCYmbmFmW2ldPT09MDtpLS0pbCsrO2lmKGk+PTApbCsrO2FjYz1hY2MuZGJscChsKTtpZihpPDApYnJlYWs7dmFyIHo9bmFmW2ldO2Fzc2VydCQxJDEoeiE9PTApO2lmKHAudHlwZT09PVwiYWZmaW5lXCIpe2lmKHo+MClhY2M9YWNjLm1peGVkQWRkKHduZFt6LTE+PjFdKTtlbHNlIGFjYz1hY2MubWl4ZWRBZGQod25kWy16LTE+PjFdLm5lZygpKX1lbHNle2lmKHo+MClhY2M9YWNjLmFkZCh3bmRbei0xPj4xXSk7ZWxzZSBhY2M9YWNjLmFkZCh3bmRbLXotMT4+MV0ubmVnKCkpfX1yZXR1cm4gcC50eXBlPT09XCJhZmZpbmVcIj9hY2MudG9QKCk6YWNjfTtCYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsQWRkPWZ1bmN0aW9uIF93bmFmTXVsQWRkKGRlZlcscG9pbnRzLGNvZWZmcyxsZW4samFjb2JpYW5SZXN1bHQpe3ZhciB3bmRXaWR0aD10aGlzLl93bmFmVDE7dmFyIHduZD10aGlzLl93bmFmVDI7dmFyIG5hZj10aGlzLl93bmFmVDM7dmFyIG1heD0wO3ZhciBpO3ZhciBqO3ZhciBwO2ZvcihpPTA7aTxsZW47aSsrKXtwPXBvaW50c1tpXTt2YXIgbmFmUG9pbnRzPXAuX2dldE5BRlBvaW50cyhkZWZXKTt3bmRXaWR0aFtpXT1uYWZQb2ludHMud25kO3duZFtpXT1uYWZQb2ludHMucG9pbnRzfWZvcihpPWxlbi0xO2k+PTE7aS09Mil7dmFyIGE9aS0xO3ZhciBiPWk7aWYod25kV2lkdGhbYV0hPT0xfHx3bmRXaWR0aFtiXSE9PTEpe25hZlthXT1nZXROQUYoY29lZmZzW2FdLHduZFdpZHRoW2FdLHRoaXMuX2JpdExlbmd0aCk7bmFmW2JdPWdldE5BRihjb2VmZnNbYl0sd25kV2lkdGhbYl0sdGhpcy5fYml0TGVuZ3RoKTttYXg9TWF0aC5tYXgobmFmW2FdLmxlbmd0aCxtYXgpO21heD1NYXRoLm1heChuYWZbYl0ubGVuZ3RoLG1heCk7Y29udGludWV9dmFyIGNvbWI9W3BvaW50c1thXSxudWxsLG51bGwscG9pbnRzW2JdXTtpZihwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkpPT09MCl7Y29tYlsxXT1wb2ludHNbYV0uYWRkKHBvaW50c1tiXSk7Y29tYlsyXT1wb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdLm5lZygpKX1lbHNlIGlmKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueS5yZWROZWcoKSk9PT0wKXtjb21iWzFdPXBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO2NvbWJbMl09cG9pbnRzW2FdLmFkZChwb2ludHNbYl0ubmVnKCkpfWVsc2V7Y29tYlsxXT1wb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdKTtjb21iWzJdPXBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpfXZhciBpbmRleD1bLTMsLTEsLTUsLTcsMCw3LDUsMSwzXTt2YXIganNmPWdldEpTRihjb2VmZnNbYV0sY29lZmZzW2JdKTttYXg9TWF0aC5tYXgoanNmWzBdLmxlbmd0aCxtYXgpO25hZlthXT1uZXcgQXJyYXkobWF4KTtuYWZbYl09bmV3IEFycmF5KG1heCk7Zm9yKGo9MDtqPG1heDtqKyspe3ZhciBqYT1qc2ZbMF1bal18MDt2YXIgamI9anNmWzFdW2pdfDA7bmFmW2FdW2pdPWluZGV4WyhqYSsxKSozKyhqYisxKV07bmFmW2JdW2pdPTA7d25kW2FdPWNvbWJ9fXZhciBhY2M9dGhpcy5qcG9pbnQobnVsbCxudWxsLG51bGwpO3ZhciB0bXA9dGhpcy5fd25hZlQ0O2ZvcihpPW1heDtpPj0wO2ktLSl7dmFyIGs9MDt3aGlsZShpPj0wKXt2YXIgemVybz10cnVlO2ZvcihqPTA7ajxsZW47aisrKXt0bXBbal09bmFmW2pdW2ldfDA7aWYodG1wW2pdIT09MCl6ZXJvPWZhbHNlfWlmKCF6ZXJvKWJyZWFrO2srKztpLS19aWYoaT49MClrKys7YWNjPWFjYy5kYmxwKGspO2lmKGk8MClicmVhaztmb3Ioaj0wO2o8bGVuO2orKyl7dmFyIHo9dG1wW2pdO3A7aWYoej09PTApY29udGludWU7ZWxzZSBpZih6PjApcD13bmRbal1bei0xPj4xXTtlbHNlIGlmKHo8MClwPXduZFtqXVstei0xPj4xXS5uZWcoKTtpZihwLnR5cGU9PT1cImFmZmluZVwiKWFjYz1hY2MubWl4ZWRBZGQocCk7ZWxzZSBhY2M9YWNjLmFkZChwKX19Zm9yKGk9MDtpPGxlbjtpKyspd25kW2ldPW51bGw7aWYoamFjb2JpYW5SZXN1bHQpcmV0dXJuIGFjYztlbHNlIHJldHVybiBhY2MudG9QKCl9O2Z1bmN0aW9uIEJhc2VQb2ludChjdXJ2ZSx0eXBlKXt0aGlzLmN1cnZlPWN1cnZlO3RoaXMudHlwZT10eXBlO3RoaXMucHJlY29tcHV0ZWQ9bnVsbH1CYXNlQ3VydmUuQmFzZVBvaW50PUJhc2VQb2ludDtCYXNlUG9pbnQucHJvdG90eXBlLmVxPWZ1bmN0aW9uIGVxKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpfTtCYXNlUG9pbnQucHJvdG90eXBlLnZhbGlkYXRlPWZ1bmN0aW9uIHZhbGlkYXRlKCl7cmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyl9O0Jhc2VDdXJ2ZS5wcm90b3R5cGUuZGVjb2RlUG9pbnQ9ZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsZW5jKXtieXRlcz11dGlsc18xJDEudG9BcnJheShieXRlcyxlbmMpO3ZhciBsZW49dGhpcy5wLmJ5dGVMZW5ndGgoKTtpZigoYnl0ZXNbMF09PT00fHxieXRlc1swXT09PTZ8fGJ5dGVzWzBdPT09NykmJmJ5dGVzLmxlbmd0aC0xPT09MipsZW4pe2lmKGJ5dGVzWzBdPT09Nilhc3NlcnQkMSQxKGJ5dGVzW2J5dGVzLmxlbmd0aC0xXSUyPT09MCk7ZWxzZSBpZihieXRlc1swXT09PTcpYXNzZXJ0JDEkMShieXRlc1tieXRlcy5sZW5ndGgtMV0lMj09PTEpO3ZhciByZXM9dGhpcy5wb2ludChieXRlcy5zbGljZSgxLDErbGVuKSxieXRlcy5zbGljZSgxK2xlbiwxKzIqbGVuKSk7cmV0dXJuIHJlc31lbHNlIGlmKChieXRlc1swXT09PTJ8fGJ5dGVzWzBdPT09MykmJmJ5dGVzLmxlbmd0aC0xPT09bGVuKXtyZXR1cm4gdGhpcy5wb2ludEZyb21YKGJ5dGVzLnNsaWNlKDEsMStsZW4pLGJ5dGVzWzBdPT09Myl9dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBwb2ludCBmb3JtYXRcIil9O0Jhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlQ29tcHJlc3NlZD1mdW5jdGlvbiBlbmNvZGVDb21wcmVzc2VkKGVuYyl7cmV0dXJuIHRoaXMuZW5jb2RlKGVuYyx0cnVlKX07QmFzZVBvaW50LnByb3RvdHlwZS5fZW5jb2RlPWZ1bmN0aW9uIF9lbmNvZGUoY29tcGFjdCl7dmFyIGxlbj10aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO3ZhciB4PXRoaXMuZ2V0WCgpLnRvQXJyYXkoXCJiZVwiLGxlbik7aWYoY29tcGFjdClyZXR1cm5bdGhpcy5nZXRZKCkuaXNFdmVuKCk/MjozXS5jb25jYXQoeCk7cmV0dXJuWzRdLmNvbmNhdCh4LHRoaXMuZ2V0WSgpLnRvQXJyYXkoXCJiZVwiLGxlbikpfTtCYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbiBlbmNvZGUoZW5jLGNvbXBhY3Qpe3JldHVybiB1dGlsc18xJDEuZW5jb2RlKHRoaXMuX2VuY29kZShjb21wYWN0KSxlbmMpfTtCYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGU9ZnVuY3Rpb24gcHJlY29tcHV0ZShwb3dlcil7aWYodGhpcy5wcmVjb21wdXRlZClyZXR1cm4gdGhpczt2YXIgcHJlY29tcHV0ZWQ9e2RvdWJsZXM6bnVsbCxuYWY6bnVsbCxiZXRhOm51bGx9O3ByZWNvbXB1dGVkLm5hZj10aGlzLl9nZXROQUZQb2ludHMoOCk7cHJlY29tcHV0ZWQuZG91Ymxlcz10aGlzLl9nZXREb3VibGVzKDQscG93ZXIpO3ByZWNvbXB1dGVkLmJldGE9dGhpcy5fZ2V0QmV0YSgpO3RoaXMucHJlY29tcHV0ZWQ9cHJlY29tcHV0ZWQ7cmV0dXJuIHRoaXN9O0Jhc2VQb2ludC5wcm90b3R5cGUuX2hhc0RvdWJsZXM9ZnVuY3Rpb24gX2hhc0RvdWJsZXMoayl7aWYoIXRoaXMucHJlY29tcHV0ZWQpcmV0dXJuIGZhbHNlO3ZhciBkb3VibGVzPXRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztpZighZG91YmxlcylyZXR1cm4gZmFsc2U7cmV0dXJuIGRvdWJsZXMucG9pbnRzLmxlbmd0aD49TWF0aC5jZWlsKChrLmJpdExlbmd0aCgpKzEpL2RvdWJsZXMuc3RlcCl9O0Jhc2VQb2ludC5wcm90b3R5cGUuX2dldERvdWJsZXM9ZnVuY3Rpb24gX2dldERvdWJsZXMoc3RlcCxwb3dlcil7aWYodGhpcy5wcmVjb21wdXRlZCYmdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzKXJldHVybiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXM7dmFyIGRvdWJsZXM9W3RoaXNdO3ZhciBhY2M9dGhpcztmb3IodmFyIGk9MDtpPHBvd2VyO2krPXN0ZXApe2Zvcih2YXIgaj0wO2o8c3RlcDtqKyspYWNjPWFjYy5kYmwoKTtkb3VibGVzLnB1c2goYWNjKX1yZXR1cm57c3RlcDpzdGVwLHBvaW50czpkb3VibGVzfX07QmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0TkFGUG9pbnRzPWZ1bmN0aW9uIF9nZXROQUZQb2ludHMod25kKXtpZih0aGlzLnByZWNvbXB1dGVkJiZ0aGlzLnByZWNvbXB1dGVkLm5hZilyZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7dmFyIHJlcz1bdGhpc107dmFyIG1heD0oMTw8d25kKS0xO3ZhciBkYmw9bWF4PT09MT9udWxsOnRoaXMuZGJsKCk7Zm9yKHZhciBpPTE7aTxtYXg7aSsrKXJlc1tpXT1yZXNbaS0xXS5hZGQoZGJsKTtyZXR1cm57d25kOnduZCxwb2ludHM6cmVzfX07QmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0QmV0YT1mdW5jdGlvbiBfZ2V0QmV0YSgpe3JldHVybiBudWxsfTtCYXNlUG9pbnQucHJvdG90eXBlLmRibHA9ZnVuY3Rpb24gZGJscChrKXt2YXIgcj10aGlzO2Zvcih2YXIgaT0wO2k8aztpKyspcj1yLmRibCgpO3JldHVybiByfTt2YXIgaW5oZXJpdHNfYnJvd3NlciQxPWNyZWF0ZUNvbW1vbmpzTW9kdWxlJDEoZnVuY3Rpb24obW9kdWxlKXtpZih0eXBlb2YgT2JqZWN0LmNyZWF0ZT09PVwiZnVuY3Rpb25cIil7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gaW5oZXJpdHMoY3RvcixzdXBlckN0b3Ipe2lmKHN1cGVyQ3Rvcil7Y3Rvci5zdXBlcl89c3VwZXJDdG9yO2N0b3IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmN0b3IsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pfX19ZWxzZXttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBpbmhlcml0cyhjdG9yLHN1cGVyQ3Rvcil7aWYoc3VwZXJDdG9yKXtjdG9yLnN1cGVyXz1zdXBlckN0b3I7dmFyIFRlbXBDdG9yPWZ1bmN0aW9uKCl7fTtUZW1wQ3Rvci5wcm90b3R5cGU9c3VwZXJDdG9yLnByb3RvdHlwZTtjdG9yLnByb3RvdHlwZT1uZXcgVGVtcEN0b3I7Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3I9Y3Rvcn19fX0pO1widXNlIHN0cmljdFwiO3ZhciBhc3NlcnQkMj11dGlsc18xJDEuYXNzZXJ0O2Z1bmN0aW9uIFNob3J0Q3VydmUoY29uZil7YmFzZS5jYWxsKHRoaXMsXCJzaG9ydFwiLGNvbmYpO3RoaXMuYT1uZXcgYm4oY29uZi5hLDE2KS50b1JlZCh0aGlzLnJlZCk7dGhpcy5iPW5ldyBibihjb25mLmIsMTYpLnRvUmVkKHRoaXMucmVkKTt0aGlzLnRpbnY9dGhpcy50d28ucmVkSW52bSgpO3RoaXMuemVyb0E9dGhpcy5hLmZyb21SZWQoKS5jbXBuKDApPT09MDt0aGlzLnRocmVlQT10aGlzLmEuZnJvbVJlZCgpLnN1Yih0aGlzLnApLmNtcG4oLTMpPT09MDt0aGlzLmVuZG89dGhpcy5fZ2V0RW5kb21vcnBoaXNtKGNvbmYpO3RoaXMuX2VuZG9XbmFmVDE9bmV3IEFycmF5KDQpO3RoaXMuX2VuZG9XbmFmVDI9bmV3IEFycmF5KDQpfWluaGVyaXRzX2Jyb3dzZXIkMShTaG9ydEN1cnZlLGJhc2UpO3ZhciBzaG9ydF8xPVNob3J0Q3VydmU7U2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9tb3JwaGlzbT1mdW5jdGlvbiBfZ2V0RW5kb21vcnBoaXNtKGNvbmYpe2lmKCF0aGlzLnplcm9BfHwhdGhpcy5nfHwhdGhpcy5ufHx0aGlzLnAubW9kbigzKSE9PTEpcmV0dXJuO3ZhciBiZXRhO3ZhciBsYW1iZGE7aWYoY29uZi5iZXRhKXtiZXRhPW5ldyBibihjb25mLmJldGEsMTYpLnRvUmVkKHRoaXMucmVkKX1lbHNle3ZhciBiZXRhcz10aGlzLl9nZXRFbmRvUm9vdHModGhpcy5wKTtiZXRhPWJldGFzWzBdLmNtcChiZXRhc1sxXSk8MD9iZXRhc1swXTpiZXRhc1sxXTtiZXRhPWJldGEudG9SZWQodGhpcy5yZWQpfWlmKGNvbmYubGFtYmRhKXtsYW1iZGE9bmV3IGJuKGNvbmYubGFtYmRhLDE2KX1lbHNle3ZhciBsYW1iZGFzPXRoaXMuX2dldEVuZG9Sb290cyh0aGlzLm4pO2lmKHRoaXMuZy5tdWwobGFtYmRhc1swXSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKT09PTApe2xhbWJkYT1sYW1iZGFzWzBdfWVsc2V7bGFtYmRhPWxhbWJkYXNbMV07YXNzZXJ0JDIodGhpcy5nLm11bChsYW1iZGEpLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSk9PT0wKX19dmFyIGJhc2lzO2lmKGNvbmYuYmFzaXMpe2Jhc2lzPWNvbmYuYmFzaXMubWFwKGZ1bmN0aW9uKHZlYyl7cmV0dXJue2E6bmV3IGJuKHZlYy5hLDE2KSxiOm5ldyBibih2ZWMuYiwxNil9fSl9ZWxzZXtiYXNpcz10aGlzLl9nZXRFbmRvQmFzaXMobGFtYmRhKX1yZXR1cm57YmV0YTpiZXRhLGxhbWJkYTpsYW1iZGEsYmFzaXM6YmFzaXN9fTtTaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb1Jvb3RzPWZ1bmN0aW9uIF9nZXRFbmRvUm9vdHMobnVtKXt2YXIgcmVkPW51bT09PXRoaXMucD90aGlzLnJlZDpibi5tb250KG51bSk7dmFyIHRpbnY9bmV3IGJuKDIpLnRvUmVkKHJlZCkucmVkSW52bSgpO3ZhciBudGludj10aW52LnJlZE5lZygpO3ZhciBzPW5ldyBibigzKS50b1JlZChyZWQpLnJlZE5lZygpLnJlZFNxcnQoKS5yZWRNdWwodGludik7dmFyIGwxPW50aW52LnJlZEFkZChzKS5mcm9tUmVkKCk7dmFyIGwyPW50aW52LnJlZFN1YihzKS5mcm9tUmVkKCk7cmV0dXJuW2wxLGwyXX07U2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9CYXNpcz1mdW5jdGlvbiBfZ2V0RW5kb0Jhc2lzKGxhbWJkYSl7dmFyIGFwcnhTcXJ0PXRoaXMubi51c2hybihNYXRoLmZsb29yKHRoaXMubi5iaXRMZW5ndGgoKS8yKSk7dmFyIHU9bGFtYmRhO3ZhciB2PXRoaXMubi5jbG9uZSgpO3ZhciB4MT1uZXcgYm4oMSk7dmFyIHkxPW5ldyBibigwKTt2YXIgeDI9bmV3IGJuKDApO3ZhciB5Mj1uZXcgYm4oMSk7dmFyIGEwO3ZhciBiMDt2YXIgYTE7dmFyIGIxO3ZhciBhMjt2YXIgYjI7dmFyIHByZXZSO3ZhciBpPTA7dmFyIHI7dmFyIHg7d2hpbGUodS5jbXBuKDApIT09MCl7dmFyIHE9di5kaXYodSk7cj12LnN1YihxLm11bCh1KSk7eD14Mi5zdWIocS5tdWwoeDEpKTt2YXIgeT15Mi5zdWIocS5tdWwoeTEpKTtpZighYTEmJnIuY21wKGFwcnhTcXJ0KTwwKXthMD1wcmV2Ui5uZWcoKTtiMD14MTthMT1yLm5lZygpO2IxPXh9ZWxzZSBpZihhMSYmKytpPT09Mil7YnJlYWt9cHJldlI9cjt2PXU7dT1yO3gyPXgxO3gxPXg7eTI9eTE7eTE9eX1hMj1yLm5lZygpO2IyPXg7dmFyIGxlbjE9YTEuc3FyKCkuYWRkKGIxLnNxcigpKTt2YXIgbGVuMj1hMi5zcXIoKS5hZGQoYjIuc3FyKCkpO2lmKGxlbjIuY21wKGxlbjEpPj0wKXthMj1hMDtiMj1iMH1pZihhMS5uZWdhdGl2ZSl7YTE9YTEubmVnKCk7YjE9YjEubmVnKCl9aWYoYTIubmVnYXRpdmUpe2EyPWEyLm5lZygpO2IyPWIyLm5lZygpfXJldHVyblt7YTphMSxiOmIxfSx7YTphMixiOmIyfV19O1Nob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvU3BsaXQ9ZnVuY3Rpb24gX2VuZG9TcGxpdChrKXt2YXIgYmFzaXM9dGhpcy5lbmRvLmJhc2lzO3ZhciB2MT1iYXNpc1swXTt2YXIgdjI9YmFzaXNbMV07dmFyIGMxPXYyLmIubXVsKGspLmRpdlJvdW5kKHRoaXMubik7dmFyIGMyPXYxLmIubmVnKCkubXVsKGspLmRpdlJvdW5kKHRoaXMubik7dmFyIHAxPWMxLm11bCh2MS5hKTt2YXIgcDI9YzIubXVsKHYyLmEpO3ZhciBxMT1jMS5tdWwodjEuYik7dmFyIHEyPWMyLm11bCh2Mi5iKTt2YXIgazE9ay5zdWIocDEpLnN1YihwMik7dmFyIGsyPXExLmFkZChxMikubmVnKCk7cmV0dXJue2sxOmsxLGsyOmsyfX07U2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWD1mdW5jdGlvbiBwb2ludEZyb21YKHgsb2RkKXt4PW5ldyBibih4LDE2KTtpZigheC5yZWQpeD14LnRvUmVkKHRoaXMucmVkKTt2YXIgeTI9eC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZCh4LnJlZE11bCh0aGlzLmEpKS5yZWRJQWRkKHRoaXMuYik7dmFyIHk9eTIucmVkU3FydCgpO2lmKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSE9PTApdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwb2ludFwiKTt2YXIgaXNPZGQ9eS5mcm9tUmVkKCkuaXNPZGQoKTtpZihvZGQmJiFpc09kZHx8IW9kZCYmaXNPZGQpeT15LnJlZE5lZygpO3JldHVybiB0aGlzLnBvaW50KHgseSl9O1Nob3J0Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlPWZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KXtpZihwb2ludC5pbmYpcmV0dXJuIHRydWU7dmFyIHg9cG9pbnQueDt2YXIgeT1wb2ludC55O3ZhciBheD10aGlzLmEucmVkTXVsKHgpO3ZhciByaHM9eC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZChheCkucmVkSUFkZCh0aGlzLmIpO3JldHVybiB5LnJlZFNxcigpLnJlZElTdWIocmhzKS5jbXBuKDApPT09MH07U2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2VuZG9XbmFmTXVsQWRkPWZ1bmN0aW9uIF9lbmRvV25hZk11bEFkZChwb2ludHMsY29lZmZzLGphY29iaWFuUmVzdWx0KXt2YXIgbnBvaW50cz10aGlzLl9lbmRvV25hZlQxO3ZhciBuY29lZmZzPXRoaXMuX2VuZG9XbmFmVDI7Zm9yKHZhciBpPTA7aTxwb2ludHMubGVuZ3RoO2krKyl7dmFyIHNwbGl0PXRoaXMuX2VuZG9TcGxpdChjb2VmZnNbaV0pO3ZhciBwPXBvaW50c1tpXTt2YXIgYmV0YT1wLl9nZXRCZXRhKCk7aWYoc3BsaXQuazEubmVnYXRpdmUpe3NwbGl0LmsxLmluZWcoKTtwPXAubmVnKHRydWUpfWlmKHNwbGl0LmsyLm5lZ2F0aXZlKXtzcGxpdC5rMi5pbmVnKCk7YmV0YT1iZXRhLm5lZyh0cnVlKX1ucG9pbnRzW2kqMl09cDtucG9pbnRzW2kqMisxXT1iZXRhO25jb2VmZnNbaSoyXT1zcGxpdC5rMTtuY29lZmZzW2kqMisxXT1zcGxpdC5rMn12YXIgcmVzPXRoaXMuX3duYWZNdWxBZGQoMSxucG9pbnRzLG5jb2VmZnMsaSoyLGphY29iaWFuUmVzdWx0KTtmb3IodmFyIGo9MDtqPGkqMjtqKyspe25wb2ludHNbal09bnVsbDtuY29lZmZzW2pdPW51bGx9cmV0dXJuIHJlc307ZnVuY3Rpb24gUG9pbnQoY3VydmUseCx5LGlzUmVkKXtiYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsY3VydmUsXCJhZmZpbmVcIik7aWYoeD09PW51bGwmJnk9PT1udWxsKXt0aGlzLng9bnVsbDt0aGlzLnk9bnVsbDt0aGlzLmluZj10cnVlfWVsc2V7dGhpcy54PW5ldyBibih4LDE2KTt0aGlzLnk9bmV3IGJuKHksMTYpO2lmKGlzUmVkKXt0aGlzLnguZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO3RoaXMueS5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCl9aWYoIXRoaXMueC5yZWQpdGhpcy54PXRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7aWYoIXRoaXMueS5yZWQpdGhpcy55PXRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7dGhpcy5pbmY9ZmFsc2V9fWluaGVyaXRzX2Jyb3dzZXIkMShQb2ludCxiYXNlLkJhc2VQb2ludCk7U2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnQ9ZnVuY3Rpb24gcG9pbnQoeCx5LGlzUmVkKXtyZXR1cm4gbmV3IFBvaW50KHRoaXMseCx5LGlzUmVkKX07U2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTj1mdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaixyZWQpe3JldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLG9iaixyZWQpfTtQb2ludC5wcm90b3R5cGUuX2dldEJldGE9ZnVuY3Rpb24gX2dldEJldGEoKXtpZighdGhpcy5jdXJ2ZS5lbmRvKXJldHVybjt2YXIgcHJlPXRoaXMucHJlY29tcHV0ZWQ7aWYocHJlJiZwcmUuYmV0YSlyZXR1cm4gcHJlLmJldGE7dmFyIGJldGE9dGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTXVsKHRoaXMuY3VydmUuZW5kby5iZXRhKSx0aGlzLnkpO2lmKHByZSl7dmFyIGN1cnZlPXRoaXMuY3VydmU7dmFyIGVuZG9NdWw9ZnVuY3Rpb24ocCl7cmV0dXJuIGN1cnZlLnBvaW50KHAueC5yZWRNdWwoY3VydmUuZW5kby5iZXRhKSxwLnkpfTtwcmUuYmV0YT1iZXRhO2JldGEucHJlY29tcHV0ZWQ9e2JldGE6bnVsbCxuYWY6cHJlLm5hZiYme3duZDpwcmUubmFmLnduZCxwb2ludHM6cHJlLm5hZi5wb2ludHMubWFwKGVuZG9NdWwpfSxkb3VibGVzOnByZS5kb3VibGVzJiZ7c3RlcDpwcmUuZG91Ymxlcy5zdGVwLHBvaW50czpwcmUuZG91Ymxlcy5wb2ludHMubWFwKGVuZG9NdWwpfX19cmV0dXJuIGJldGF9O1BvaW50LnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24gdG9KU09OKCl7aWYoIXRoaXMucHJlY29tcHV0ZWQpcmV0dXJuW3RoaXMueCx0aGlzLnldO3JldHVyblt0aGlzLngsdGhpcy55LHRoaXMucHJlY29tcHV0ZWQmJntkb3VibGVzOnRoaXMucHJlY29tcHV0ZWQuZG91YmxlcyYme3N0ZXA6dGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnN0ZXAscG9pbnRzOnRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5wb2ludHMuc2xpY2UoMSl9LG5hZjp0aGlzLnByZWNvbXB1dGVkLm5hZiYme3duZDp0aGlzLnByZWNvbXB1dGVkLm5hZi53bmQscG9pbnRzOnRoaXMucHJlY29tcHV0ZWQubmFmLnBvaW50cy5zbGljZSgxKX19XX07UG9pbnQuZnJvbUpTT049ZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsb2JqLHJlZCl7aWYodHlwZW9mIG9iaj09PVwic3RyaW5nXCIpb2JqPUpTT04ucGFyc2Uob2JqKTt2YXIgcmVzPWN1cnZlLnBvaW50KG9ialswXSxvYmpbMV0scmVkKTtpZighb2JqWzJdKXJldHVybiByZXM7ZnVuY3Rpb24gb2JqMnBvaW50KG9iail7cmV0dXJuIGN1cnZlLnBvaW50KG9ialswXSxvYmpbMV0scmVkKX12YXIgcHJlPW9ialsyXTtyZXMucHJlY29tcHV0ZWQ9e2JldGE6bnVsbCxkb3VibGVzOnByZS5kb3VibGVzJiZ7c3RlcDpwcmUuZG91Ymxlcy5zdGVwLHBvaW50czpbcmVzXS5jb25jYXQocHJlLmRvdWJsZXMucG9pbnRzLm1hcChvYmoycG9pbnQpKX0sbmFmOnByZS5uYWYmJnt3bmQ6cHJlLm5hZi53bmQscG9pbnRzOltyZXNdLmNvbmNhdChwcmUubmFmLnBvaW50cy5tYXAob2JqMnBvaW50KSl9fTtyZXR1cm4gcmVzfTtQb2ludC5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbiBpbnNwZWN0KCl7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuXCI8RUMgUG9pbnQgSW5maW5pdHk+XCI7cmV0dXJuXCI8RUMgUG9pbnQgeDogXCIrdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwyKStcIiB5OiBcIit0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LDIpK1wiPlwifTtQb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eT1mdW5jdGlvbiBpc0luZmluaXR5KCl7cmV0dXJuIHRoaXMuaW5mfTtQb2ludC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uIGFkZChwKXtpZih0aGlzLmluZilyZXR1cm4gcDtpZihwLmluZilyZXR1cm4gdGhpcztpZih0aGlzLmVxKHApKXJldHVybiB0aGlzLmRibCgpO2lmKHRoaXMubmVnKCkuZXEocCkpcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCxudWxsKTtpZih0aGlzLnguY21wKHAueCk9PT0wKXJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsbnVsbCk7dmFyIGM9dGhpcy55LnJlZFN1YihwLnkpO2lmKGMuY21wbigwKSE9PTApYz1jLnJlZE11bCh0aGlzLngucmVkU3ViKHAueCkucmVkSW52bSgpKTt2YXIgbng9Yy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueCkucmVkSVN1YihwLngpO3ZhciBueT1jLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO3JldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LG55KX07UG9pbnQucHJvdG90eXBlLmRibD1mdW5jdGlvbiBkYmwoKXtpZih0aGlzLmluZilyZXR1cm4gdGhpczt2YXIgeXMxPXRoaXMueS5yZWRBZGQodGhpcy55KTtpZih5czEuY21wbigwKT09PTApcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCxudWxsKTt2YXIgYT10aGlzLmN1cnZlLmE7dmFyIHgyPXRoaXMueC5yZWRTcXIoKTt2YXIgZHlpbnY9eXMxLnJlZEludm0oKTt2YXIgYz14Mi5yZWRBZGQoeDIpLnJlZElBZGQoeDIpLnJlZElBZGQoYSkucmVkTXVsKGR5aW52KTt2YXIgbng9Yy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueC5yZWRBZGQodGhpcy54KSk7dmFyIG55PWMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7cmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsbnkpfTtQb2ludC5wcm90b3R5cGUuZ2V0WD1mdW5jdGlvbiBnZXRYKCl7cmV0dXJuIHRoaXMueC5mcm9tUmVkKCl9O1BvaW50LnByb3RvdHlwZS5nZXRZPWZ1bmN0aW9uIGdldFkoKXtyZXR1cm4gdGhpcy55LmZyb21SZWQoKX07UG9pbnQucHJvdG90eXBlLm11bD1mdW5jdGlvbiBtdWwoayl7az1uZXcgYm4oaywxNik7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuIHRoaXM7ZWxzZSBpZih0aGlzLl9oYXNEb3VibGVzKGspKXJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLGspO2Vsc2UgaWYodGhpcy5jdXJ2ZS5lbmRvKXJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChbdGhpc10sW2tdKTtlbHNlIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsayl9O1BvaW50LnByb3RvdHlwZS5tdWxBZGQ9ZnVuY3Rpb24gbXVsQWRkKGsxLHAyLGsyKXt2YXIgcG9pbnRzPVt0aGlzLHAyXTt2YXIgY29lZmZzPVtrMSxrMl07aWYodGhpcy5jdXJ2ZS5lbmRvKXJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsY29lZmZzKTtlbHNlIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEscG9pbnRzLGNvZWZmcywyKX07UG9pbnQucHJvdG90eXBlLmptdWxBZGQ9ZnVuY3Rpb24gam11bEFkZChrMSxwMixrMil7dmFyIHBvaW50cz1bdGhpcyxwMl07dmFyIGNvZWZmcz1bazEsazJdO2lmKHRoaXMuY3VydmUuZW5kbylyZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLGNvZWZmcyx0cnVlKTtlbHNlIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEscG9pbnRzLGNvZWZmcywyLHRydWUpfTtQb2ludC5wcm90b3R5cGUuZXE9ZnVuY3Rpb24gZXEocCl7cmV0dXJuIHRoaXM9PT1wfHx0aGlzLmluZj09PXAuaW5mJiYodGhpcy5pbmZ8fHRoaXMueC5jbXAocC54KT09PTAmJnRoaXMueS5jbXAocC55KT09PTApfTtQb2ludC5wcm90b3R5cGUubmVnPWZ1bmN0aW9uIG5lZyhfcHJlY29tcHV0ZSl7aWYodGhpcy5pbmYpcmV0dXJuIHRoaXM7dmFyIHJlcz10aGlzLmN1cnZlLnBvaW50KHRoaXMueCx0aGlzLnkucmVkTmVnKCkpO2lmKF9wcmVjb21wdXRlJiZ0aGlzLnByZWNvbXB1dGVkKXt2YXIgcHJlPXRoaXMucHJlY29tcHV0ZWQ7dmFyIG5lZ2F0ZT1mdW5jdGlvbihwKXtyZXR1cm4gcC5uZWcoKX07cmVzLnByZWNvbXB1dGVkPXtuYWY6cHJlLm5hZiYme3duZDpwcmUubmFmLnduZCxwb2ludHM6cHJlLm5hZi5wb2ludHMubWFwKG5lZ2F0ZSl9LGRvdWJsZXM6cHJlLmRvdWJsZXMmJntzdGVwOnByZS5kb3VibGVzLnN0ZXAscG9pbnRzOnByZS5kb3VibGVzLnBvaW50cy5tYXAobmVnYXRlKX19fXJldHVybiByZXN9O1BvaW50LnByb3RvdHlwZS50b0o9ZnVuY3Rpb24gdG9KKCl7aWYodGhpcy5pbmYpcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsbnVsbCxudWxsKTt2YXIgcmVzPXRoaXMuY3VydmUuanBvaW50KHRoaXMueCx0aGlzLnksdGhpcy5jdXJ2ZS5vbmUpO3JldHVybiByZXN9O2Z1bmN0aW9uIEpQb2ludChjdXJ2ZSx4LHkseil7YmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLGN1cnZlLFwiamFjb2JpYW5cIik7aWYoeD09PW51bGwmJnk9PT1udWxsJiZ6PT09bnVsbCl7dGhpcy54PXRoaXMuY3VydmUub25lO3RoaXMueT10aGlzLmN1cnZlLm9uZTt0aGlzLno9bmV3IGJuKDApfWVsc2V7dGhpcy54PW5ldyBibih4LDE2KTt0aGlzLnk9bmV3IGJuKHksMTYpO3RoaXMuej1uZXcgYm4oeiwxNil9aWYoIXRoaXMueC5yZWQpdGhpcy54PXRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7aWYoIXRoaXMueS5yZWQpdGhpcy55PXRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7aWYoIXRoaXMuei5yZWQpdGhpcy56PXRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7dGhpcy56T25lPXRoaXMuej09PXRoaXMuY3VydmUub25lfWluaGVyaXRzX2Jyb3dzZXIkMShKUG9pbnQsYmFzZS5CYXNlUG9pbnQpO1Nob3J0Q3VydmUucHJvdG90eXBlLmpwb2ludD1mdW5jdGlvbiBqcG9pbnQoeCx5LHope3JldHVybiBuZXcgSlBvaW50KHRoaXMseCx5LHopfTtKUG9pbnQucHJvdG90eXBlLnRvUD1mdW5jdGlvbiB0b1AoKXtpZih0aGlzLmlzSW5maW5pdHkoKSlyZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLG51bGwpO3ZhciB6aW52PXRoaXMuei5yZWRJbnZtKCk7dmFyIHppbnYyPXppbnYucmVkU3FyKCk7dmFyIGF4PXRoaXMueC5yZWRNdWwoemludjIpO3ZhciBheT10aGlzLnkucmVkTXVsKHppbnYyKS5yZWRNdWwoemludik7cmV0dXJuIHRoaXMuY3VydmUucG9pbnQoYXgsYXkpfTtKUG9pbnQucHJvdG90eXBlLm5lZz1mdW5jdGlvbiBuZWcoKXtyZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LHRoaXMueS5yZWROZWcoKSx0aGlzLnopfTtKUG9pbnQucHJvdG90eXBlLmFkZD1mdW5jdGlvbiBhZGQocCl7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuIHA7aWYocC5pc0luZmluaXR5KCkpcmV0dXJuIHRoaXM7dmFyIHB6Mj1wLnoucmVkU3FyKCk7dmFyIHoyPXRoaXMuei5yZWRTcXIoKTt2YXIgdTE9dGhpcy54LnJlZE11bChwejIpO3ZhciB1Mj1wLngucmVkTXVsKHoyKTt2YXIgczE9dGhpcy55LnJlZE11bChwejIucmVkTXVsKHAueikpO3ZhciBzMj1wLnkucmVkTXVsKHoyLnJlZE11bCh0aGlzLnopKTt2YXIgaD11MS5yZWRTdWIodTIpO3ZhciByPXMxLnJlZFN1YihzMik7aWYoaC5jbXBuKDApPT09MCl7aWYoci5jbXBuKDApIT09MClyZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCxudWxsLG51bGwpO2Vsc2UgcmV0dXJuIHRoaXMuZGJsKCl9dmFyIGgyPWgucmVkU3FyKCk7dmFyIGgzPWgyLnJlZE11bChoKTt2YXIgdj11MS5yZWRNdWwoaDIpO3ZhciBueD1yLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTt2YXIgbnk9ci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTt2YXIgbno9dGhpcy56LnJlZE11bChwLnopLnJlZE11bChoKTtyZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsbnksbnopfTtKUG9pbnQucHJvdG90eXBlLm1peGVkQWRkPWZ1bmN0aW9uIG1peGVkQWRkKHApe2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVybiBwLnRvSigpO2lmKHAuaXNJbmZpbml0eSgpKXJldHVybiB0aGlzO3ZhciB6Mj10aGlzLnoucmVkU3FyKCk7dmFyIHUxPXRoaXMueDt2YXIgdTI9cC54LnJlZE11bCh6Mik7dmFyIHMxPXRoaXMueTt2YXIgczI9cC55LnJlZE11bCh6MikucmVkTXVsKHRoaXMueik7dmFyIGg9dTEucmVkU3ViKHUyKTt2YXIgcj1zMS5yZWRTdWIoczIpO2lmKGguY21wbigwKT09PTApe2lmKHIuY21wbigwKSE9PTApcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsbnVsbCxudWxsKTtlbHNlIHJldHVybiB0aGlzLmRibCgpfXZhciBoMj1oLnJlZFNxcigpO3ZhciBoMz1oMi5yZWRNdWwoaCk7dmFyIHY9dTEucmVkTXVsKGgyKTt2YXIgbng9ci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7dmFyIG55PXIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7dmFyIG56PXRoaXMuei5yZWRNdWwoaCk7cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LG55LG56KX07SlBvaW50LnByb3RvdHlwZS5kYmxwPWZ1bmN0aW9uIGRibHAocG93KXtpZihwb3c9PT0wKXJldHVybiB0aGlzO2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVybiB0aGlzO2lmKCFwb3cpcmV0dXJuIHRoaXMuZGJsKCk7dmFyIGk7aWYodGhpcy5jdXJ2ZS56ZXJvQXx8dGhpcy5jdXJ2ZS50aHJlZUEpe3ZhciByPXRoaXM7Zm9yKGk9MDtpPHBvdztpKyspcj1yLmRibCgpO3JldHVybiByfXZhciBhPXRoaXMuY3VydmUuYTt2YXIgdGludj10aGlzLmN1cnZlLnRpbnY7dmFyIGp4PXRoaXMueDt2YXIgank9dGhpcy55O3ZhciBqej10aGlzLno7dmFyIGp6ND1qei5yZWRTcXIoKS5yZWRTcXIoKTt2YXIganlkPWp5LnJlZEFkZChqeSk7Zm9yKGk9MDtpPHBvdztpKyspe3ZhciBqeDI9angucmVkU3FyKCk7dmFyIGp5ZDI9anlkLnJlZFNxcigpO3ZhciBqeWQ0PWp5ZDIucmVkU3FyKCk7dmFyIGM9angyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpO3ZhciB0MT1qeC5yZWRNdWwoanlkMik7dmFyIG54PWMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTt2YXIgdDI9dDEucmVkSVN1YihueCk7dmFyIGRueT1jLnJlZE11bCh0Mik7ZG55PWRueS5yZWRJQWRkKGRueSkucmVkSVN1YihqeWQ0KTt2YXIgbno9anlkLnJlZE11bChqeik7aWYoaSsxPHBvdylqejQ9ano0LnJlZE11bChqeWQ0KTtqeD1ueDtqej1uejtqeWQ9ZG55fXJldHVybiB0aGlzLmN1cnZlLmpwb2ludChqeCxqeWQucmVkTXVsKHRpbnYpLGp6KX07SlBvaW50LnByb3RvdHlwZS5kYmw9ZnVuY3Rpb24gZGJsKCl7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuIHRoaXM7aWYodGhpcy5jdXJ2ZS56ZXJvQSlyZXR1cm4gdGhpcy5femVyb0RibCgpO2Vsc2UgaWYodGhpcy5jdXJ2ZS50aHJlZUEpcmV0dXJuIHRoaXMuX3RocmVlRGJsKCk7ZWxzZSByZXR1cm4gdGhpcy5fZGJsKCl9O0pQb2ludC5wcm90b3R5cGUuX3plcm9EYmw9ZnVuY3Rpb24gX3plcm9EYmwoKXt2YXIgbng7dmFyIG55O3ZhciBuejtpZih0aGlzLnpPbmUpe3ZhciB4eD10aGlzLngucmVkU3FyKCk7dmFyIHl5PXRoaXMueS5yZWRTcXIoKTt2YXIgeXl5eT15eS5yZWRTcXIoKTt2YXIgcz10aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO3M9cy5yZWRJQWRkKHMpO3ZhciBtPXh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7dmFyIHQ9bS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7dmFyIHl5eXk4PXl5eXkucmVkSUFkZCh5eXl5KTt5eXl5OD15eXl5OC5yZWRJQWRkKHl5eXk4KTt5eXl5OD15eXl5OC5yZWRJQWRkKHl5eXk4KTtueD10O255PW0ucmVkTXVsKHMucmVkSVN1Yih0KSkucmVkSVN1Yih5eXl5OCk7bno9dGhpcy55LnJlZEFkZCh0aGlzLnkpfWVsc2V7dmFyIGE9dGhpcy54LnJlZFNxcigpO3ZhciBiPXRoaXMueS5yZWRTcXIoKTt2YXIgYz1iLnJlZFNxcigpO3ZhciBkPXRoaXMueC5yZWRBZGQoYikucmVkU3FyKCkucmVkSVN1YihhKS5yZWRJU3ViKGMpO2Q9ZC5yZWRJQWRkKGQpO3ZhciBlPWEucmVkQWRkKGEpLnJlZElBZGQoYSk7dmFyIGY9ZS5yZWRTcXIoKTt2YXIgYzg9Yy5yZWRJQWRkKGMpO2M4PWM4LnJlZElBZGQoYzgpO2M4PWM4LnJlZElBZGQoYzgpO254PWYucmVkSVN1YihkKS5yZWRJU3ViKGQpO255PWUucmVkTXVsKGQucmVkSVN1YihueCkpLnJlZElTdWIoYzgpO256PXRoaXMueS5yZWRNdWwodGhpcy56KTtuej1uei5yZWRJQWRkKG56KX1yZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsbnksbnopfTtKUG9pbnQucHJvdG90eXBlLl90aHJlZURibD1mdW5jdGlvbiBfdGhyZWVEYmwoKXt2YXIgbng7dmFyIG55O3ZhciBuejtpZih0aGlzLnpPbmUpe3ZhciB4eD10aGlzLngucmVkU3FyKCk7dmFyIHl5PXRoaXMueS5yZWRTcXIoKTt2YXIgeXl5eT15eS5yZWRTcXIoKTt2YXIgcz10aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO3M9cy5yZWRJQWRkKHMpO3ZhciBtPXh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCkucmVkSUFkZCh0aGlzLmN1cnZlLmEpO3ZhciB0PW0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO254PXQ7dmFyIHl5eXk4PXl5eXkucmVkSUFkZCh5eXl5KTt5eXl5OD15eXl5OC5yZWRJQWRkKHl5eXk4KTt5eXl5OD15eXl5OC5yZWRJQWRkKHl5eXk4KTtueT1tLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO256PXRoaXMueS5yZWRBZGQodGhpcy55KX1lbHNle3ZhciBkZWx0YT10aGlzLnoucmVkU3FyKCk7dmFyIGdhbW1hPXRoaXMueS5yZWRTcXIoKTt2YXIgYmV0YT10aGlzLngucmVkTXVsKGdhbW1hKTt2YXIgYWxwaGE9dGhpcy54LnJlZFN1YihkZWx0YSkucmVkTXVsKHRoaXMueC5yZWRBZGQoZGVsdGEpKTthbHBoYT1hbHBoYS5yZWRBZGQoYWxwaGEpLnJlZElBZGQoYWxwaGEpO3ZhciBiZXRhND1iZXRhLnJlZElBZGQoYmV0YSk7YmV0YTQ9YmV0YTQucmVkSUFkZChiZXRhNCk7dmFyIGJldGE4PWJldGE0LnJlZEFkZChiZXRhNCk7bng9YWxwaGEucmVkU3FyKCkucmVkSVN1YihiZXRhOCk7bno9dGhpcy55LnJlZEFkZCh0aGlzLnopLnJlZFNxcigpLnJlZElTdWIoZ2FtbWEpLnJlZElTdWIoZGVsdGEpO3ZhciBnZ2FtbWE4PWdhbW1hLnJlZFNxcigpO2dnYW1tYTg9Z2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO2dnYW1tYTg9Z2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO2dnYW1tYTg9Z2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO255PWFscGhhLnJlZE11bChiZXRhNC5yZWRJU3ViKG54KSkucmVkSVN1YihnZ2FtbWE4KX1yZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsbnksbnopfTtKUG9pbnQucHJvdG90eXBlLl9kYmw9ZnVuY3Rpb24gX2RibCgpe3ZhciBhPXRoaXMuY3VydmUuYTt2YXIgang9dGhpcy54O3ZhciBqeT10aGlzLnk7dmFyIGp6PXRoaXMuejt2YXIgano0PWp6LnJlZFNxcigpLnJlZFNxcigpO3ZhciBqeDI9angucmVkU3FyKCk7dmFyIGp5Mj1qeS5yZWRTcXIoKTt2YXIgYz1qeDIucmVkQWRkKGp4MikucmVkSUFkZChqeDIpLnJlZElBZGQoYS5yZWRNdWwoano0KSk7dmFyIGp4ZDQ9angucmVkQWRkKGp4KTtqeGQ0PWp4ZDQucmVkSUFkZChqeGQ0KTt2YXIgdDE9anhkNC5yZWRNdWwoankyKTt2YXIgbng9Yy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpO3ZhciB0Mj10MS5yZWRJU3ViKG54KTt2YXIganlkOD1qeTIucmVkU3FyKCk7anlkOD1qeWQ4LnJlZElBZGQoanlkOCk7anlkOD1qeWQ4LnJlZElBZGQoanlkOCk7anlkOD1qeWQ4LnJlZElBZGQoanlkOCk7dmFyIG55PWMucmVkTXVsKHQyKS5yZWRJU3ViKGp5ZDgpO3ZhciBuej1qeS5yZWRBZGQoankpLnJlZE11bChqeik7cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LG55LG56KX07SlBvaW50LnByb3RvdHlwZS50cnBsPWZ1bmN0aW9uIHRycGwoKXtpZighdGhpcy5jdXJ2ZS56ZXJvQSlyZXR1cm4gdGhpcy5kYmwoKS5hZGQodGhpcyk7dmFyIHh4PXRoaXMueC5yZWRTcXIoKTt2YXIgeXk9dGhpcy55LnJlZFNxcigpO3ZhciB6ej10aGlzLnoucmVkU3FyKCk7dmFyIHl5eXk9eXkucmVkU3FyKCk7dmFyIG09eHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KTt2YXIgbW09bS5yZWRTcXIoKTt2YXIgZT10aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO2U9ZS5yZWRJQWRkKGUpO2U9ZS5yZWRBZGQoZSkucmVkSUFkZChlKTtlPWUucmVkSVN1YihtbSk7dmFyIGVlPWUucmVkU3FyKCk7dmFyIHQ9eXl5eS5yZWRJQWRkKHl5eXkpO3Q9dC5yZWRJQWRkKHQpO3Q9dC5yZWRJQWRkKHQpO3Q9dC5yZWRJQWRkKHQpO3ZhciB1PW0ucmVkSUFkZChlKS5yZWRTcXIoKS5yZWRJU3ViKG1tKS5yZWRJU3ViKGVlKS5yZWRJU3ViKHQpO3ZhciB5eXU0PXl5LnJlZE11bCh1KTt5eXU0PXl5dTQucmVkSUFkZCh5eXU0KTt5eXU0PXl5dTQucmVkSUFkZCh5eXU0KTt2YXIgbng9dGhpcy54LnJlZE11bChlZSkucmVkSVN1Yih5eXU0KTtueD1ueC5yZWRJQWRkKG54KTtueD1ueC5yZWRJQWRkKG54KTt2YXIgbnk9dGhpcy55LnJlZE11bCh1LnJlZE11bCh0LnJlZElTdWIodSkpLnJlZElTdWIoZS5yZWRNdWwoZWUpKSk7bnk9bnkucmVkSUFkZChueSk7bnk9bnkucmVkSUFkZChueSk7bnk9bnkucmVkSUFkZChueSk7dmFyIG56PXRoaXMuei5yZWRBZGQoZSkucmVkU3FyKCkucmVkSVN1Yih6eikucmVkSVN1YihlZSk7cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LG55LG56KX07SlBvaW50LnByb3RvdHlwZS5tdWw9ZnVuY3Rpb24gbXVsKGssa2Jhc2Upe2s9bmV3IGJuKGssa2Jhc2UpO3JldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsayl9O0pQb2ludC5wcm90b3R5cGUuZXE9ZnVuY3Rpb24gZXEocCl7aWYocC50eXBlPT09XCJhZmZpbmVcIilyZXR1cm4gdGhpcy5lcShwLnRvSigpKTtpZih0aGlzPT09cClyZXR1cm4gdHJ1ZTt2YXIgejI9dGhpcy56LnJlZFNxcigpO3ZhciBwejI9cC56LnJlZFNxcigpO2lmKHRoaXMueC5yZWRNdWwocHoyKS5yZWRJU3ViKHAueC5yZWRNdWwoejIpKS5jbXBuKDApIT09MClyZXR1cm4gZmFsc2U7dmFyIHozPXoyLnJlZE11bCh0aGlzLnopO3ZhciBwejM9cHoyLnJlZE11bChwLnopO3JldHVybiB0aGlzLnkucmVkTXVsKHB6MykucmVkSVN1YihwLnkucmVkTXVsKHozKSkuY21wbigwKT09PTB9O0pQb2ludC5wcm90b3R5cGUuZXFYVG9QPWZ1bmN0aW9uIGVxWFRvUCh4KXt2YXIgenM9dGhpcy56LnJlZFNxcigpO3ZhciByeD14LnRvUmVkKHRoaXMuY3VydmUucmVkKS5yZWRNdWwoenMpO2lmKHRoaXMueC5jbXAocngpPT09MClyZXR1cm4gdHJ1ZTt2YXIgeGM9eC5jbG9uZSgpO3ZhciB0PXRoaXMuY3VydmUucmVkTi5yZWRNdWwoenMpO2Zvcig7Oyl7eGMuaWFkZCh0aGlzLmN1cnZlLm4pO2lmKHhjLmNtcCh0aGlzLmN1cnZlLnApPj0wKXJldHVybiBmYWxzZTtyeC5yZWRJQWRkKHQpO2lmKHRoaXMueC5jbXAocngpPT09MClyZXR1cm4gdHJ1ZX19O0pQb2ludC5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbiBpbnNwZWN0KCl7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuXCI8RUMgSlBvaW50IEluZmluaXR5PlwiO3JldHVyblwiPEVDIEpQb2ludCB4OiBcIit0aGlzLngudG9TdHJpbmcoMTYsMikrXCIgeTogXCIrdGhpcy55LnRvU3RyaW5nKDE2LDIpK1wiIHo6IFwiK3RoaXMuei50b1N0cmluZygxNiwyKStcIj5cIn07SlBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5PWZ1bmN0aW9uIGlzSW5maW5pdHkoKXtyZXR1cm4gdGhpcy56LmNtcG4oMCk9PT0wfTt2YXIgY3VydmVfMT1jcmVhdGVDb21tb25qc01vZHVsZSQxKGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgY3VydmU9ZXhwb3J0cztjdXJ2ZS5iYXNlPWJhc2U7Y3VydmUuc2hvcnQ9c2hvcnRfMTtjdXJ2ZS5tb250PW51bGw7Y3VydmUuZWR3YXJkcz1udWxsfSk7dmFyIGN1cnZlc18xPWNyZWF0ZUNvbW1vbmpzTW9kdWxlJDEoZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe1widXNlIHN0cmljdFwiO3ZhciBjdXJ2ZXM9ZXhwb3J0czt2YXIgYXNzZXJ0PXV0aWxzXzEkMS5hc3NlcnQ7ZnVuY3Rpb24gUHJlc2V0Q3VydmUob3B0aW9ucyl7aWYob3B0aW9ucy50eXBlPT09XCJzaG9ydFwiKXRoaXMuY3VydmU9bmV3IGN1cnZlXzEuc2hvcnQob3B0aW9ucyk7ZWxzZSBpZihvcHRpb25zLnR5cGU9PT1cImVkd2FyZHNcIil0aGlzLmN1cnZlPW5ldyBjdXJ2ZV8xLmVkd2FyZHMob3B0aW9ucyk7ZWxzZSB0aGlzLmN1cnZlPW5ldyBjdXJ2ZV8xLm1vbnQob3B0aW9ucyk7dGhpcy5nPXRoaXMuY3VydmUuZzt0aGlzLm49dGhpcy5jdXJ2ZS5uO3RoaXMuaGFzaD1vcHRpb25zLmhhc2g7YXNzZXJ0KHRoaXMuZy52YWxpZGF0ZSgpLFwiSW52YWxpZCBjdXJ2ZVwiKTthc3NlcnQodGhpcy5nLm11bCh0aGlzLm4pLmlzSW5maW5pdHkoKSxcIkludmFsaWQgY3VydmUsIEcqTiAhPSBPXCIpfWN1cnZlcy5QcmVzZXRDdXJ2ZT1QcmVzZXRDdXJ2ZTtmdW5jdGlvbiBkZWZpbmVDdXJ2ZShuYW1lLG9wdGlvbnMpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsbmFtZSx7Y29uZmlndXJhYmxlOnRydWUsZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3ZhciBjdXJ2ZT1uZXcgUHJlc2V0Q3VydmUob3B0aW9ucyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcyxuYW1lLHtjb25maWd1cmFibGU6dHJ1ZSxlbnVtZXJhYmxlOnRydWUsdmFsdWU6Y3VydmV9KTtyZXR1cm4gY3VydmV9fSl9ZGVmaW5lQ3VydmUoXCJwMTkyXCIse3R5cGU6XCJzaG9ydFwiLHByaW1lOlwicDE5MlwiLHA6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZlwiLGE6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmY1wiLGI6XCI2NDIxMDUxOSBlNTljODBlNyAwZmE3ZTlhYiA3MjI0MzA0OSBmZWI4ZGVlYyBjMTQ2YjliMVwiLG46XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiA5OWRlZjgzNiAxNDZiYzliMSBiNGQyMjgzMVwiLGhhc2g6aGFzaF8xLnNoYTI1NixnUmVkOmZhbHNlLGc6W1wiMTg4ZGE4MGUgYjAzMDkwZjYgN2NiZjIwZWIgNDNhMTg4MDAgZjRmZjBhZmQgODJmZjEwMTJcIixcIjA3MTkyYjk1IGZmYzhkYTc4IDYzMTAxMWVkIDZiMjRjZGQ1IDczZjk3N2ExIDFlNzk0ODExXCJdfSk7ZGVmaW5lQ3VydmUoXCJwMjI0XCIse3R5cGU6XCJzaG9ydFwiLHByaW1lOlwicDIyNFwiLHA6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMVwiLGE6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZVwiLGI6XCJiNDA1MGE4NSAwYzA0YjNhYiBmNTQxMzI1NiA1MDQ0YjBiNyBkN2JmZDhiYSAyNzBiMzk0MyAyMzU1ZmZiNFwiLG46XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmMTZhMiBlMGI4ZjAzZSAxM2RkMjk0NSA1YzVjMmEzZFwiLGhhc2g6aGFzaF8xLnNoYTI1NixnUmVkOmZhbHNlLGc6W1wiYjcwZTBjYmQgNmJiNGJmN2YgMzIxMzkwYjkgNGEwM2MxZDMgNTZjMjExMjIgMzQzMjgwZDYgMTE1YzFkMjFcIixcImJkMzc2Mzg4IGI1ZjcyM2ZiIDRjMjJkZmU2IGNkNDM3NWEwIDVhMDc0NzY0IDQ0ZDU4MTk5IDg1MDA3ZTM0XCJdfSk7ZGVmaW5lQ3VydmUoXCJwMjU2XCIse3R5cGU6XCJzaG9ydFwiLHByaW1lOm51bGwscDpcImZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmXCIsYTpcImZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjXCIsYjpcIjVhYzYzNWQ4IGFhM2E5M2U3IGIzZWJiZDU1IDc2OTg4NmJjIDY1MWQwNmIwIGNjNTNiMGY2IDNiY2UzYzNlIDI3ZDI2MDRiXCIsbjpcImZmZmZmZmZmIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGJjZTZmYWFkIGE3MTc5ZTg0IGYzYjljYWMyIGZjNjMyNTUxXCIsaGFzaDpoYXNoXzEuc2hhMjU2LGdSZWQ6ZmFsc2UsZzpbXCI2YjE3ZDFmMiBlMTJjNDI0NyBmOGJjZTZlNSA2M2E0NDBmMiA3NzAzN2Q4MSAyZGViMzNhMCBmNGExMzk0NSBkODk4YzI5NlwiLFwiNGZlMzQyZTIgZmUxYTdmOWIgOGVlN2ViNGEgN2MwZjllMTYgMmJjZTMzNTcgNmIzMTVlY2UgY2JiNjQwNjggMzdiZjUxZjVcIl19KTtkZWZpbmVDdXJ2ZShcInAzODRcIix7dHlwZTpcInNob3J0XCIscHJpbWU6bnVsbCxwOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgXCIrXCJmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZlwiLGE6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBcIitcImZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZjXCIsYjpcImIzMzEyZmE3IGUyM2VlN2U0IDk4OGUwNTZiIGUzZjgyZDE5IDE4MWQ5YzZlIGZlODE0MTEyIDAzMTQwODhmIFwiK1wiNTAxMzg3NWEgYzY1NjM5OGQgOGEyZWQxOWQgMmE4NWM4ZWQgZDNlYzJhZWZcIixuOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgYzc2MzRkODEgXCIrXCJmNDM3MmRkZiA1ODFhMGRiMiA0OGIwYTc3YSBlY2VjMTk2YSBjY2M1Mjk3M1wiLGhhc2g6aGFzaF8xLnNoYTM4NCxnUmVkOmZhbHNlLGc6W1wiYWE4N2NhMjIgYmU4YjA1MzcgOGViMWM3MWUgZjMyMGFkNzQgNmUxZDNiNjIgOGJhNzliOTggNTlmNzQxZTAgODI1NDJhMzggXCIrXCI1NTAyZjI1ZCBiZjU1Mjk2YyAzYTU0NWUzOCA3Mjc2MGFiN1wiLFwiMzYxN2RlNGEgOTYyNjJjNmYgNWQ5ZTk4YmYgOTI5MmRjMjkgZjhmNDFkYmQgMjg5YTE0N2MgZTlkYTMxMTMgYjVmMGI4YzAgXCIrXCIwYTYwYjFjZSAxZDdlODE5ZCA3YTQzMWQ3YyA5MGVhMGU1ZlwiXX0pO2RlZmluZUN1cnZlKFwicDUyMVwiLHt0eXBlOlwic2hvcnRcIixwcmltZTpudWxsLHA6XCIwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBcIitcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIFwiK1wiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmZcIixhOlwiMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgXCIrXCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBcIitcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjXCIsYjpcIjAwMDAwMDUxIDk1M2ViOTYxIDhlMWM5YTFmIDkyOWEyMWEwIGI2ODU0MGVlIGEyZGE3MjViIFwiK1wiOTliMzE1ZjMgYjhiNDg5OTEgOGVmMTA5ZTEgNTYxOTM5NTEgZWM3ZTkzN2IgMTY1MmMwYmQgXCIrXCIzYmIxYmYwNyAzNTczZGY4OCAzZDJjMzRmMSBlZjQ1MWZkNCA2YjUwM2YwMFwiLG46XCIwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBcIitcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZhIDUxODY4NzgzIGJmMmY5NjZiIDdmY2MwMTQ4IFwiK1wiZjcwOWE1ZDAgM2JiNWM5YjggODk5YzQ3YWUgYmI2ZmI3MWUgOTEzODY0MDlcIixoYXNoOmhhc2hfMS5zaGE1MTIsZ1JlZDpmYWxzZSxnOltcIjAwMDAwMGM2IDg1OGUwNmI3IDA0MDRlOWNkIDllM2VjYjY2IDIzOTViNDQyIDljNjQ4MTM5IFwiK1wiMDUzZmI1MjEgZjgyOGFmNjAgNmI0ZDNkYmEgYTE0YjVlNzcgZWZlNzU5MjggZmUxZGMxMjcgXCIrXCJhMmZmYThkZSAzMzQ4YjNjMSA4NTZhNDI5YiBmOTdlN2UzMSBjMmU1YmQ2NlwiLFwiMDAwMDAxMTggMzkyOTZhNzggOWEzYmMwMDQgNWM4YTVmYjQgMmM3ZDFiZDkgOThmNTQ0NDkgXCIrXCI1NzliNDQ2OCAxN2FmYmQxNyAyNzNlNjYyYyA5N2VlNzI5OSA1ZWY0MjY0MCBjNTUwYjkwMSBcIitcIjNmYWQwNzYxIDM1M2M3MDg2IGEyNzJjMjQwIDg4YmU5NDc2IDlmZDE2NjUwXCJdfSk7ZGVmaW5lQ3VydmUoXCJjdXJ2ZTI1NTE5XCIse3R5cGU6XCJtb250XCIscHJpbWU6XCJwMjU1MTlcIixwOlwiN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZFwiLGE6XCI3NmQwNlwiLGI6XCIxXCIsbjpcIjEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWRcIixoYXNoOmhhc2hfMS5zaGEyNTYsZ1JlZDpmYWxzZSxnOltcIjlcIl19KTtkZWZpbmVDdXJ2ZShcImVkMjU1MTlcIix7dHlwZTpcImVkd2FyZHNcIixwcmltZTpcInAyNTUxOVwiLHA6XCI3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkXCIsYTpcIi0xXCIsYzpcIjFcIixkOlwiNTIwMzZjZWUyYjZmZmU3MyA4Y2M3NDA3OTc3NzllODk4IDAwNzAwYTRkNDE0MWQ4YWIgNzVlYjRkY2ExMzU5NzhhM1wiLG46XCIxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkXCIsaGFzaDpoYXNoXzEuc2hhMjU2LGdSZWQ6ZmFsc2UsZzpbXCIyMTY5MzZkM2NkNmU1M2ZlYzBhNGUyMzFmZGQ2ZGM1YzY5MmNjNzYwOTUyNWE3YjJjOTU2MmQ2MDhmMjVkNTFhXCIsXCI2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjU4XCJdfSk7dmFyIHByZTt0cnl7cHJlPW51bGwuY3Jhc2goKX1jYXRjaChlKXtwcmU9dW5kZWZpbmVkfWRlZmluZUN1cnZlKFwic2VjcDI1NmsxXCIse3R5cGU6XCJzaG9ydFwiLHByaW1lOlwiazI1NlwiLHA6XCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZlwiLGE6XCIwXCIsYjpcIjdcIixuOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgYmFhZWRjZTYgYWY0OGEwM2IgYmZkMjVlOGMgZDAzNjQxNDFcIixoOlwiMVwiLGhhc2g6aGFzaF8xLnNoYTI1NixiZXRhOlwiN2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZVwiLGxhbWJkYTpcIjUzNjNhZDRjYzA1YzMwZTBhNTI2MWMwMjg4MTI2NDVhMTIyZTIyZWEyMDgxNjY3OGRmMDI5NjdjMWIyM2JkNzJcIixiYXNpczpbe2E6XCIzMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNVwiLGI6XCItZTQ0MzdlZDYwMTBlODgyODZmNTQ3ZmE5MGFiZmU0YzNcIn0se2E6XCIxMTRjYTUwZjdhOGUyZjNmNjU3YzExMDhkOWQ0NGNmZDhcIixiOlwiMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTVcIn1dLGdSZWQ6ZmFsc2UsZzpbXCI3OWJlNjY3ZWY5ZGNiYmFjNTVhMDYyOTVjZTg3MGIwNzAyOWJmY2RiMmRjZTI4ZDk1OWYyODE1YjE2ZjgxNzk4XCIsXCI0ODNhZGE3NzI2YTNjNDY1NWRhNGZiZmMwZTExMDhhOGZkMTdiNDQ4YTY4NTU0MTk5YzQ3ZDA4ZmZiMTBkNGI4XCIscHJlXX0pfSk7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gSG1hY0RSQkcob3B0aW9ucyl7aWYoISh0aGlzIGluc3RhbmNlb2YgSG1hY0RSQkcpKXJldHVybiBuZXcgSG1hY0RSQkcob3B0aW9ucyk7dGhpcy5oYXNoPW9wdGlvbnMuaGFzaDt0aGlzLnByZWRSZXNpc3Q9ISFvcHRpb25zLnByZWRSZXNpc3Q7dGhpcy5vdXRMZW49dGhpcy5oYXNoLm91dFNpemU7dGhpcy5taW5FbnRyb3B5PW9wdGlvbnMubWluRW50cm9weXx8dGhpcy5oYXNoLmhtYWNTdHJlbmd0aDt0aGlzLl9yZXNlZWQ9bnVsbDt0aGlzLnJlc2VlZEludGVydmFsPW51bGw7dGhpcy5LPW51bGw7dGhpcy5WPW51bGw7dmFyIGVudHJvcHk9dXRpbHNfMS50b0FycmF5KG9wdGlvbnMuZW50cm9weSxvcHRpb25zLmVudHJvcHlFbmN8fFwiaGV4XCIpO3ZhciBub25jZT11dGlsc18xLnRvQXJyYXkob3B0aW9ucy5ub25jZSxvcHRpb25zLm5vbmNlRW5jfHxcImhleFwiKTt2YXIgcGVycz11dGlsc18xLnRvQXJyYXkob3B0aW9ucy5wZXJzLG9wdGlvbnMucGVyc0VuY3x8XCJoZXhcIik7bWluaW1hbGlzdGljQXNzZXJ0JDEoZW50cm9weS5sZW5ndGg+PXRoaXMubWluRW50cm9weS84LFwiTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiBcIit0aGlzLm1pbkVudHJvcHkrXCIgYml0c1wiKTt0aGlzLl9pbml0KGVudHJvcHksbm9uY2UscGVycyl9dmFyIGhtYWNEcmJnPUhtYWNEUkJHO0htYWNEUkJHLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbiBpbml0KGVudHJvcHksbm9uY2UscGVycyl7dmFyIHNlZWQ9ZW50cm9weS5jb25jYXQobm9uY2UpLmNvbmNhdChwZXJzKTt0aGlzLks9bmV3IEFycmF5KHRoaXMub3V0TGVuLzgpO3RoaXMuVj1uZXcgQXJyYXkodGhpcy5vdXRMZW4vOCk7Zm9yKHZhciBpPTA7aTx0aGlzLlYubGVuZ3RoO2krKyl7dGhpcy5LW2ldPTA7dGhpcy5WW2ldPTF9dGhpcy5fdXBkYXRlKHNlZWQpO3RoaXMuX3Jlc2VlZD0xO3RoaXMucmVzZWVkSW50ZXJ2YWw9MjgxNDc0OTc2NzEwNjU2fTtIbWFjRFJCRy5wcm90b3R5cGUuX2htYWM9ZnVuY3Rpb24gaG1hYygpe3JldHVybiBuZXcgaGFzaF8xLmhtYWModGhpcy5oYXNoLHRoaXMuSyl9O0htYWNEUkJHLnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uIHVwZGF0ZShzZWVkKXt2YXIga21hYz10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikudXBkYXRlKFswXSk7aWYoc2VlZClrbWFjPWttYWMudXBkYXRlKHNlZWQpO3RoaXMuSz1rbWFjLmRpZ2VzdCgpO3RoaXMuVj10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7aWYoIXNlZWQpcmV0dXJuO3RoaXMuSz10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikudXBkYXRlKFsxXSkudXBkYXRlKHNlZWQpLmRpZ2VzdCgpO3RoaXMuVj10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCl9O0htYWNEUkJHLnByb3RvdHlwZS5yZXNlZWQ9ZnVuY3Rpb24gcmVzZWVkKGVudHJvcHksZW50cm9weUVuYyxhZGQsYWRkRW5jKXtpZih0eXBlb2YgZW50cm9weUVuYyE9PVwic3RyaW5nXCIpe2FkZEVuYz1hZGQ7YWRkPWVudHJvcHlFbmM7ZW50cm9weUVuYz1udWxsfWVudHJvcHk9dXRpbHNfMS50b0FycmF5KGVudHJvcHksZW50cm9weUVuYyk7YWRkPXV0aWxzXzEudG9BcnJheShhZGQsYWRkRW5jKTttaW5pbWFsaXN0aWNBc3NlcnQkMShlbnRyb3B5Lmxlbmd0aD49dGhpcy5taW5FbnRyb3B5LzgsXCJOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6IFwiK3RoaXMubWluRW50cm9weStcIiBiaXRzXCIpO3RoaXMuX3VwZGF0ZShlbnRyb3B5LmNvbmNhdChhZGR8fFtdKSk7dGhpcy5fcmVzZWVkPTF9O0htYWNEUkJHLnByb3RvdHlwZS5nZW5lcmF0ZT1mdW5jdGlvbiBnZW5lcmF0ZShsZW4sZW5jLGFkZCxhZGRFbmMpe2lmKHRoaXMuX3Jlc2VlZD50aGlzLnJlc2VlZEludGVydmFsKXRocm93IG5ldyBFcnJvcihcIlJlc2VlZCBpcyByZXF1aXJlZFwiKTtpZih0eXBlb2YgZW5jIT09XCJzdHJpbmdcIil7YWRkRW5jPWFkZDthZGQ9ZW5jO2VuYz1udWxsfWlmKGFkZCl7YWRkPXV0aWxzXzEudG9BcnJheShhZGQsYWRkRW5jfHxcImhleFwiKTt0aGlzLl91cGRhdGUoYWRkKX12YXIgdGVtcD1bXTt3aGlsZSh0ZW1wLmxlbmd0aDxsZW4pe3RoaXMuVj10aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7dGVtcD10ZW1wLmNvbmNhdCh0aGlzLlYpfXZhciByZXM9dGVtcC5zbGljZSgwLGxlbik7dGhpcy5fdXBkYXRlKGFkZCk7dGhpcy5fcmVzZWVkKys7cmV0dXJuIHV0aWxzXzEuZW5jb2RlKHJlcyxlbmMpfTtcInVzZSBzdHJpY3RcIjt2YXIgYXNzZXJ0JDM9dXRpbHNfMSQxLmFzc2VydDtmdW5jdGlvbiBLZXlQYWlyKGVjLG9wdGlvbnMpe3RoaXMuZWM9ZWM7dGhpcy5wcml2PW51bGw7dGhpcy5wdWI9bnVsbDtpZihvcHRpb25zLnByaXYpdGhpcy5faW1wb3J0UHJpdmF0ZShvcHRpb25zLnByaXYsb3B0aW9ucy5wcml2RW5jKTtpZihvcHRpb25zLnB1Yil0aGlzLl9pbXBvcnRQdWJsaWMob3B0aW9ucy5wdWIsb3B0aW9ucy5wdWJFbmMpfXZhciBrZXk9S2V5UGFpcjtLZXlQYWlyLmZyb21QdWJsaWM9ZnVuY3Rpb24gZnJvbVB1YmxpYyhlYyxwdWIsZW5jKXtpZihwdWIgaW5zdGFuY2VvZiBLZXlQYWlyKXJldHVybiBwdWI7cmV0dXJuIG5ldyBLZXlQYWlyKGVjLHtwdWI6cHViLHB1YkVuYzplbmN9KX07S2V5UGFpci5mcm9tUHJpdmF0ZT1mdW5jdGlvbiBmcm9tUHJpdmF0ZShlYyxwcml2LGVuYyl7aWYocHJpdiBpbnN0YW5jZW9mIEtleVBhaXIpcmV0dXJuIHByaXY7cmV0dXJuIG5ldyBLZXlQYWlyKGVjLHtwcml2OnByaXYscHJpdkVuYzplbmN9KX07S2V5UGFpci5wcm90b3R5cGUudmFsaWRhdGU9ZnVuY3Rpb24gdmFsaWRhdGUoKXt2YXIgcHViPXRoaXMuZ2V0UHVibGljKCk7aWYocHViLmlzSW5maW5pdHkoKSlyZXR1cm57cmVzdWx0OmZhbHNlLHJlYXNvbjpcIkludmFsaWQgcHVibGljIGtleVwifTtpZighcHViLnZhbGlkYXRlKCkpcmV0dXJue3Jlc3VsdDpmYWxzZSxyZWFzb246XCJQdWJsaWMga2V5IGlzIG5vdCBhIHBvaW50XCJ9O2lmKCFwdWIubXVsKHRoaXMuZWMuY3VydmUubikuaXNJbmZpbml0eSgpKXJldHVybntyZXN1bHQ6ZmFsc2UscmVhc29uOlwiUHVibGljIGtleSAqIE4gIT0gT1wifTtyZXR1cm57cmVzdWx0OnRydWUscmVhc29uOm51bGx9fTtLZXlQYWlyLnByb3RvdHlwZS5nZXRQdWJsaWM9ZnVuY3Rpb24gZ2V0UHVibGljKGNvbXBhY3QsZW5jKXtpZih0eXBlb2YgY29tcGFjdD09PVwic3RyaW5nXCIpe2VuYz1jb21wYWN0O2NvbXBhY3Q9bnVsbH1pZighdGhpcy5wdWIpdGhpcy5wdWI9dGhpcy5lYy5nLm11bCh0aGlzLnByaXYpO2lmKCFlbmMpcmV0dXJuIHRoaXMucHViO3JldHVybiB0aGlzLnB1Yi5lbmNvZGUoZW5jLGNvbXBhY3QpfTtLZXlQYWlyLnByb3RvdHlwZS5nZXRQcml2YXRlPWZ1bmN0aW9uIGdldFByaXZhdGUoZW5jKXtpZihlbmM9PT1cImhleFwiKXJldHVybiB0aGlzLnByaXYudG9TdHJpbmcoMTYsMik7ZWxzZSByZXR1cm4gdGhpcy5wcml2fTtLZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHJpdmF0ZT1mdW5jdGlvbiBfaW1wb3J0UHJpdmF0ZShrZXksZW5jKXt0aGlzLnByaXY9bmV3IGJuKGtleSxlbmN8fDE2KTt0aGlzLnByaXY9dGhpcy5wcml2LnVtb2QodGhpcy5lYy5jdXJ2ZS5uKX07S2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYz1mdW5jdGlvbiBfaW1wb3J0UHVibGljKGtleSxlbmMpe2lmKGtleS54fHxrZXkueSl7aWYodGhpcy5lYy5jdXJ2ZS50eXBlPT09XCJtb250XCIpe2Fzc2VydCQzKGtleS54LFwiTmVlZCB4IGNvb3JkaW5hdGVcIil9ZWxzZSBpZih0aGlzLmVjLmN1cnZlLnR5cGU9PT1cInNob3J0XCJ8fHRoaXMuZWMuY3VydmUudHlwZT09PVwiZWR3YXJkc1wiKXthc3NlcnQkMyhrZXkueCYma2V5LnksXCJOZWVkIGJvdGggeCBhbmQgeSBjb29yZGluYXRlXCIpfXRoaXMucHViPXRoaXMuZWMuY3VydmUucG9pbnQoa2V5Lngsa2V5LnkpO3JldHVybn10aGlzLnB1Yj10aGlzLmVjLmN1cnZlLmRlY29kZVBvaW50KGtleSxlbmMpfTtLZXlQYWlyLnByb3RvdHlwZS5kZXJpdmU9ZnVuY3Rpb24gZGVyaXZlKHB1Yil7aWYoIXB1Yi52YWxpZGF0ZSgpKXthc3NlcnQkMyhwdWIudmFsaWRhdGUoKSxcInB1YmxpYyBwb2ludCBub3QgdmFsaWRhdGVkXCIpfXJldHVybiBwdWIubXVsKHRoaXMucHJpdikuZ2V0WCgpfTtLZXlQYWlyLnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uIHNpZ24obXNnLGVuYyxvcHRpb25zKXtyZXR1cm4gdGhpcy5lYy5zaWduKG1zZyx0aGlzLGVuYyxvcHRpb25zKX07S2V5UGFpci5wcm90b3R5cGUudmVyaWZ5PWZ1bmN0aW9uIHZlcmlmeShtc2csc2lnbmF0dXJlKXtyZXR1cm4gdGhpcy5lYy52ZXJpZnkobXNnLHNpZ25hdHVyZSx0aGlzKX07S2V5UGFpci5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbiBpbnNwZWN0KCl7cmV0dXJuXCI8S2V5IHByaXY6IFwiKyh0aGlzLnByaXYmJnRoaXMucHJpdi50b1N0cmluZygxNiwyKSkrXCIgcHViOiBcIisodGhpcy5wdWImJnRoaXMucHViLmluc3BlY3QoKSkrXCIgPlwifTtcInVzZSBzdHJpY3RcIjt2YXIgYXNzZXJ0JDQ9dXRpbHNfMSQxLmFzc2VydDtmdW5jdGlvbiBTaWduYXR1cmUob3B0aW9ucyxlbmMpe2lmKG9wdGlvbnMgaW5zdGFuY2VvZiBTaWduYXR1cmUpcmV0dXJuIG9wdGlvbnM7aWYodGhpcy5faW1wb3J0REVSKG9wdGlvbnMsZW5jKSlyZXR1cm47YXNzZXJ0JDQob3B0aW9ucy5yJiZvcHRpb25zLnMsXCJTaWduYXR1cmUgd2l0aG91dCByIG9yIHNcIik7dGhpcy5yPW5ldyBibihvcHRpb25zLnIsMTYpO3RoaXMucz1uZXcgYm4ob3B0aW9ucy5zLDE2KTtpZihvcHRpb25zLnJlY292ZXJ5UGFyYW09PT11bmRlZmluZWQpdGhpcy5yZWNvdmVyeVBhcmFtPW51bGw7ZWxzZSB0aGlzLnJlY292ZXJ5UGFyYW09b3B0aW9ucy5yZWNvdmVyeVBhcmFtfXZhciBzaWduYXR1cmU9U2lnbmF0dXJlO2Z1bmN0aW9uIFBvc2l0aW9uKCl7dGhpcy5wbGFjZT0wfWZ1bmN0aW9uIGdldExlbmd0aChidWYscCl7dmFyIGluaXRpYWw9YnVmW3AucGxhY2UrK107aWYoIShpbml0aWFsJjEyOCkpe3JldHVybiBpbml0aWFsfXZhciBvY3RldExlbj1pbml0aWFsJjE1O2lmKG9jdGV0TGVuPT09MHx8b2N0ZXRMZW4+NCl7cmV0dXJuIGZhbHNlfXZhciB2YWw9MDtmb3IodmFyIGk9MCxvZmY9cC5wbGFjZTtpPG9jdGV0TGVuO2krKyxvZmYrKyl7dmFsPDw9ODt2YWx8PWJ1ZltvZmZdO3ZhbD4+Pj0wfWlmKHZhbDw9MTI3KXtyZXR1cm4gZmFsc2V9cC5wbGFjZT1vZmY7cmV0dXJuIHZhbH1mdW5jdGlvbiBybVBhZGRpbmcoYnVmKXt2YXIgaT0wO3ZhciBsZW49YnVmLmxlbmd0aC0xO3doaWxlKCFidWZbaV0mJiEoYnVmW2krMV0mMTI4KSYmaTxsZW4pe2krK31pZihpPT09MCl7cmV0dXJuIGJ1Zn1yZXR1cm4gYnVmLnNsaWNlKGkpfVNpZ25hdHVyZS5wcm90b3R5cGUuX2ltcG9ydERFUj1mdW5jdGlvbiBfaW1wb3J0REVSKGRhdGEsZW5jKXtkYXRhPXV0aWxzXzEkMS50b0FycmF5KGRhdGEsZW5jKTt2YXIgcD1uZXcgUG9zaXRpb247aWYoZGF0YVtwLnBsYWNlKytdIT09NDgpe3JldHVybiBmYWxzZX12YXIgbGVuPWdldExlbmd0aChkYXRhLHApO2lmKGxlbj09PWZhbHNlKXtyZXR1cm4gZmFsc2V9aWYobGVuK3AucGxhY2UhPT1kYXRhLmxlbmd0aCl7cmV0dXJuIGZhbHNlfWlmKGRhdGFbcC5wbGFjZSsrXSE9PTIpe3JldHVybiBmYWxzZX12YXIgcmxlbj1nZXRMZW5ndGgoZGF0YSxwKTtpZihybGVuPT09ZmFsc2Upe3JldHVybiBmYWxzZX12YXIgcj1kYXRhLnNsaWNlKHAucGxhY2UscmxlbitwLnBsYWNlKTtwLnBsYWNlKz1ybGVuO2lmKGRhdGFbcC5wbGFjZSsrXSE9PTIpe3JldHVybiBmYWxzZX12YXIgc2xlbj1nZXRMZW5ndGgoZGF0YSxwKTtpZihzbGVuPT09ZmFsc2Upe3JldHVybiBmYWxzZX1pZihkYXRhLmxlbmd0aCE9PXNsZW4rcC5wbGFjZSl7cmV0dXJuIGZhbHNlfXZhciBzPWRhdGEuc2xpY2UocC5wbGFjZSxzbGVuK3AucGxhY2UpO2lmKHJbMF09PT0wKXtpZihyWzFdJjEyOCl7cj1yLnNsaWNlKDEpfWVsc2V7cmV0dXJuIGZhbHNlfX1pZihzWzBdPT09MCl7aWYoc1sxXSYxMjgpe3M9cy5zbGljZSgxKX1lbHNle3JldHVybiBmYWxzZX19dGhpcy5yPW5ldyBibihyKTt0aGlzLnM9bmV3IGJuKHMpO3RoaXMucmVjb3ZlcnlQYXJhbT1udWxsO3JldHVybiB0cnVlfTtmdW5jdGlvbiBjb25zdHJ1Y3RMZW5ndGgoYXJyLGxlbil7aWYobGVuPDEyOCl7YXJyLnB1c2gobGVuKTtyZXR1cm59dmFyIG9jdGV0cz0xKyhNYXRoLmxvZyhsZW4pL01hdGguTE4yPj4+Myk7YXJyLnB1c2gob2N0ZXRzfDEyOCk7d2hpbGUoLS1vY3RldHMpe2Fyci5wdXNoKGxlbj4+PihvY3RldHM8PDMpJjI1NSl9YXJyLnB1c2gobGVuKX1TaWduYXR1cmUucHJvdG90eXBlLnRvREVSPWZ1bmN0aW9uIHRvREVSKGVuYyl7dmFyIHI9dGhpcy5yLnRvQXJyYXkoKTt2YXIgcz10aGlzLnMudG9BcnJheSgpO2lmKHJbMF0mMTI4KXI9WzBdLmNvbmNhdChyKTtpZihzWzBdJjEyOClzPVswXS5jb25jYXQocyk7cj1ybVBhZGRpbmcocik7cz1ybVBhZGRpbmcocyk7d2hpbGUoIXNbMF0mJiEoc1sxXSYxMjgpKXtzPXMuc2xpY2UoMSl9dmFyIGFycj1bMl07Y29uc3RydWN0TGVuZ3RoKGFycixyLmxlbmd0aCk7YXJyPWFyci5jb25jYXQocik7YXJyLnB1c2goMik7Y29uc3RydWN0TGVuZ3RoKGFycixzLmxlbmd0aCk7dmFyIGJhY2tIYWxmPWFyci5jb25jYXQocyk7dmFyIHJlcz1bNDhdO2NvbnN0cnVjdExlbmd0aChyZXMsYmFja0hhbGYubGVuZ3RoKTtyZXM9cmVzLmNvbmNhdChiYWNrSGFsZik7cmV0dXJuIHV0aWxzXzEkMS5lbmNvZGUocmVzLGVuYyl9O1widXNlIHN0cmljdFwiO3ZhciByYW5kPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWRcIil9O3ZhciBhc3NlcnQkNT11dGlsc18xJDEuYXNzZXJ0O2Z1bmN0aW9uIEVDKG9wdGlvbnMpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEVDKSlyZXR1cm4gbmV3IEVDKG9wdGlvbnMpO2lmKHR5cGVvZiBvcHRpb25zPT09XCJzdHJpbmdcIil7YXNzZXJ0JDUoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGN1cnZlc18xLG9wdGlvbnMpLFwiVW5rbm93biBjdXJ2ZSBcIitvcHRpb25zKTtvcHRpb25zPWN1cnZlc18xW29wdGlvbnNdfWlmKG9wdGlvbnMgaW5zdGFuY2VvZiBjdXJ2ZXNfMS5QcmVzZXRDdXJ2ZSlvcHRpb25zPXtjdXJ2ZTpvcHRpb25zfTt0aGlzLmN1cnZlPW9wdGlvbnMuY3VydmUuY3VydmU7dGhpcy5uPXRoaXMuY3VydmUubjt0aGlzLm5oPXRoaXMubi51c2hybigxKTt0aGlzLmc9dGhpcy5jdXJ2ZS5nO3RoaXMuZz1vcHRpb25zLmN1cnZlLmc7dGhpcy5nLnByZWNvbXB1dGUob3B0aW9ucy5jdXJ2ZS5uLmJpdExlbmd0aCgpKzEpO3RoaXMuaGFzaD1vcHRpb25zLmhhc2h8fG9wdGlvbnMuY3VydmUuaGFzaH12YXIgZWM9RUM7RUMucHJvdG90eXBlLmtleVBhaXI9ZnVuY3Rpb24ga2V5UGFpcihvcHRpb25zKXtyZXR1cm4gbmV3IGtleSh0aGlzLG9wdGlvbnMpfTtFQy5wcm90b3R5cGUua2V5RnJvbVByaXZhdGU9ZnVuY3Rpb24ga2V5RnJvbVByaXZhdGUocHJpdixlbmMpe3JldHVybiBrZXkuZnJvbVByaXZhdGUodGhpcyxwcml2LGVuYyl9O0VDLnByb3RvdHlwZS5rZXlGcm9tUHVibGljPWZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViLGVuYyl7cmV0dXJuIGtleS5mcm9tUHVibGljKHRoaXMscHViLGVuYyl9O0VDLnByb3RvdHlwZS5nZW5LZXlQYWlyPWZ1bmN0aW9uIGdlbktleVBhaXIob3B0aW9ucyl7aWYoIW9wdGlvbnMpb3B0aW9ucz17fTt2YXIgZHJiZz1uZXcgaG1hY0RyYmcoe2hhc2g6dGhpcy5oYXNoLHBlcnM6b3B0aW9ucy5wZXJzLHBlcnNFbmM6b3B0aW9ucy5wZXJzRW5jfHxcInV0ZjhcIixlbnRyb3B5Om9wdGlvbnMuZW50cm9weXx8cmFuZCh0aGlzLmhhc2guaG1hY1N0cmVuZ3RoKSxlbnRyb3B5RW5jOm9wdGlvbnMuZW50cm9weSYmb3B0aW9ucy5lbnRyb3B5RW5jfHxcInV0ZjhcIixub25jZTp0aGlzLm4udG9BcnJheSgpfSk7dmFyIGJ5dGVzPXRoaXMubi5ieXRlTGVuZ3RoKCk7dmFyIG5zMj10aGlzLm4uc3ViKG5ldyBibigyKSk7Zm9yKDs7KXt2YXIgcHJpdj1uZXcgYm4oZHJiZy5nZW5lcmF0ZShieXRlcykpO2lmKHByaXYuY21wKG5zMik+MCljb250aW51ZTtwcml2LmlhZGRuKDEpO3JldHVybiB0aGlzLmtleUZyb21Qcml2YXRlKHByaXYpfX07RUMucHJvdG90eXBlLl90cnVuY2F0ZVRvTj1mdW5jdGlvbiBfdHJ1bmNhdGVUb04obXNnLHRydW5jT25seSl7dmFyIGRlbHRhPW1zZy5ieXRlTGVuZ3RoKCkqOC10aGlzLm4uYml0TGVuZ3RoKCk7aWYoZGVsdGE+MCltc2c9bXNnLnVzaHJuKGRlbHRhKTtpZighdHJ1bmNPbmx5JiZtc2cuY21wKHRoaXMubik+PTApcmV0dXJuIG1zZy5zdWIodGhpcy5uKTtlbHNlIHJldHVybiBtc2d9O0VDLnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uIHNpZ24obXNnLGtleSxlbmMsb3B0aW9ucyl7aWYodHlwZW9mIGVuYz09PVwib2JqZWN0XCIpe29wdGlvbnM9ZW5jO2VuYz1udWxsfWlmKCFvcHRpb25zKW9wdGlvbnM9e307a2V5PXRoaXMua2V5RnJvbVByaXZhdGUoa2V5LGVuYyk7bXNnPXRoaXMuX3RydW5jYXRlVG9OKG5ldyBibihtc2csMTYpKTt2YXIgYnl0ZXM9dGhpcy5uLmJ5dGVMZW5ndGgoKTt2YXIgYmtleT1rZXkuZ2V0UHJpdmF0ZSgpLnRvQXJyYXkoXCJiZVwiLGJ5dGVzKTt2YXIgbm9uY2U9bXNnLnRvQXJyYXkoXCJiZVwiLGJ5dGVzKTt2YXIgZHJiZz1uZXcgaG1hY0RyYmcoe2hhc2g6dGhpcy5oYXNoLGVudHJvcHk6YmtleSxub25jZTpub25jZSxwZXJzOm9wdGlvbnMucGVycyxwZXJzRW5jOm9wdGlvbnMucGVyc0VuY3x8XCJ1dGY4XCJ9KTt2YXIgbnMxPXRoaXMubi5zdWIobmV3IGJuKDEpKTtmb3IodmFyIGl0ZXI9MDs7aXRlcisrKXt2YXIgaz1vcHRpb25zLms/b3B0aW9ucy5rKGl0ZXIpOm5ldyBibihkcmJnLmdlbmVyYXRlKHRoaXMubi5ieXRlTGVuZ3RoKCkpKTtrPXRoaXMuX3RydW5jYXRlVG9OKGssdHJ1ZSk7aWYoay5jbXBuKDEpPD0wfHxrLmNtcChuczEpPj0wKWNvbnRpbnVlO3ZhciBrcD10aGlzLmcubXVsKGspO2lmKGtwLmlzSW5maW5pdHkoKSljb250aW51ZTt2YXIga3BYPWtwLmdldFgoKTt2YXIgcj1rcFgudW1vZCh0aGlzLm4pO2lmKHIuY21wbigwKT09PTApY29udGludWU7dmFyIHM9ay5pbnZtKHRoaXMubikubXVsKHIubXVsKGtleS5nZXRQcml2YXRlKCkpLmlhZGQobXNnKSk7cz1zLnVtb2QodGhpcy5uKTtpZihzLmNtcG4oMCk9PT0wKWNvbnRpbnVlO3ZhciByZWNvdmVyeVBhcmFtPShrcC5nZXRZKCkuaXNPZGQoKT8xOjApfChrcFguY21wKHIpIT09MD8yOjApO2lmKG9wdGlvbnMuY2Fub25pY2FsJiZzLmNtcCh0aGlzLm5oKT4wKXtzPXRoaXMubi5zdWIocyk7cmVjb3ZlcnlQYXJhbV49MX1yZXR1cm4gbmV3IHNpZ25hdHVyZSh7cjpyLHM6cyxyZWNvdmVyeVBhcmFtOnJlY292ZXJ5UGFyYW19KX19O0VDLnByb3RvdHlwZS52ZXJpZnk9ZnVuY3Rpb24gdmVyaWZ5KG1zZyxzaWduYXR1cmUkMSxrZXksZW5jKXttc2c9dGhpcy5fdHJ1bmNhdGVUb04obmV3IGJuKG1zZywxNikpO2tleT10aGlzLmtleUZyb21QdWJsaWMoa2V5LGVuYyk7c2lnbmF0dXJlJDE9bmV3IHNpZ25hdHVyZShzaWduYXR1cmUkMSxcImhleFwiKTt2YXIgcj1zaWduYXR1cmUkMS5yO3ZhciBzPXNpZ25hdHVyZSQxLnM7aWYoci5jbXBuKDEpPDB8fHIuY21wKHRoaXMubik+PTApcmV0dXJuIGZhbHNlO2lmKHMuY21wbigxKTwwfHxzLmNtcCh0aGlzLm4pPj0wKXJldHVybiBmYWxzZTt2YXIgc2ludj1zLmludm0odGhpcy5uKTt2YXIgdTE9c2ludi5tdWwobXNnKS51bW9kKHRoaXMubik7dmFyIHUyPXNpbnYubXVsKHIpLnVtb2QodGhpcy5uKTt2YXIgcDtpZighdGhpcy5jdXJ2ZS5fbWF4d2VsbFRyaWNrKXtwPXRoaXMuZy5tdWxBZGQodTEsa2V5LmdldFB1YmxpYygpLHUyKTtpZihwLmlzSW5maW5pdHkoKSlyZXR1cm4gZmFsc2U7cmV0dXJuIHAuZ2V0WCgpLnVtb2QodGhpcy5uKS5jbXAocik9PT0wfXA9dGhpcy5nLmptdWxBZGQodTEsa2V5LmdldFB1YmxpYygpLHUyKTtpZihwLmlzSW5maW5pdHkoKSlyZXR1cm4gZmFsc2U7cmV0dXJuIHAuZXFYVG9QKHIpfTtFQy5wcm90b3R5cGUucmVjb3ZlclB1YktleT1mdW5jdGlvbihtc2csc2lnbmF0dXJlJDEsaixlbmMpe2Fzc2VydCQ1KCgzJmopPT09aixcIlRoZSByZWNvdmVyeSBwYXJhbSBpcyBtb3JlIHRoYW4gdHdvIGJpdHNcIik7c2lnbmF0dXJlJDE9bmV3IHNpZ25hdHVyZShzaWduYXR1cmUkMSxlbmMpO3ZhciBuPXRoaXMubjt2YXIgZT1uZXcgYm4obXNnKTt2YXIgcj1zaWduYXR1cmUkMS5yO3ZhciBzPXNpZ25hdHVyZSQxLnM7dmFyIGlzWU9kZD1qJjE7dmFyIGlzU2Vjb25kS2V5PWo+PjE7aWYoci5jbXAodGhpcy5jdXJ2ZS5wLnVtb2QodGhpcy5jdXJ2ZS5uKSk+PTAmJmlzU2Vjb25kS2V5KXRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIHNlbmNvbmQga2V5IGNhbmRpbmF0ZVwiKTtpZihpc1NlY29uZEtleSlyPXRoaXMuY3VydmUucG9pbnRGcm9tWChyLmFkZCh0aGlzLmN1cnZlLm4pLGlzWU9kZCk7ZWxzZSByPXRoaXMuY3VydmUucG9pbnRGcm9tWChyLGlzWU9kZCk7dmFyIHJJbnY9c2lnbmF0dXJlJDEuci5pbnZtKG4pO3ZhciBzMT1uLnN1YihlKS5tdWwockludikudW1vZChuKTt2YXIgczI9cy5tdWwockludikudW1vZChuKTtyZXR1cm4gdGhpcy5nLm11bEFkZChzMSxyLHMyKX07RUMucHJvdG90eXBlLmdldEtleVJlY292ZXJ5UGFyYW09ZnVuY3Rpb24oZSxzaWduYXR1cmUkMSxRLGVuYyl7c2lnbmF0dXJlJDE9bmV3IHNpZ25hdHVyZShzaWduYXR1cmUkMSxlbmMpO2lmKHNpZ25hdHVyZSQxLnJlY292ZXJ5UGFyYW0hPT1udWxsKXJldHVybiBzaWduYXR1cmUkMS5yZWNvdmVyeVBhcmFtO2Zvcih2YXIgaT0wO2k8NDtpKyspe3ZhciBRcHJpbWU7dHJ5e1FwcmltZT10aGlzLnJlY292ZXJQdWJLZXkoZSxzaWduYXR1cmUkMSxpKX1jYXRjaChlKXtjb250aW51ZX1pZihRcHJpbWUuZXEoUSkpcmV0dXJuIGl9dGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGZpbmQgdmFsaWQgcmVjb3ZlcnkgZmFjdG9yXCIpfTt2YXIgZWxsaXB0aWNfMT1jcmVhdGVDb21tb25qc01vZHVsZSQxKGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgZWxsaXB0aWM9ZXhwb3J0cztlbGxpcHRpYy52ZXJzaW9uPXt2ZXJzaW9uOlwiNi41LjRcIn0udmVyc2lvbjtlbGxpcHRpYy51dGlscz11dGlsc18xJDE7ZWxsaXB0aWMucmFuZD1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkXCIpfTtlbGxpcHRpYy5jdXJ2ZT1jdXJ2ZV8xO2VsbGlwdGljLmN1cnZlcz1jdXJ2ZXNfMTtlbGxpcHRpYy5lYz1lYztlbGxpcHRpYy5lZGRzYT1udWxsfSk7dmFyIEVDJDE9ZWxsaXB0aWNfMS5lYztjb25zdCB2ZXJzaW9uJGI9XCJzaWduaW5nLWtleS81LjEuMFwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRnPW5ldyBMb2dnZXIodmVyc2lvbiRiKTtsZXQgX2N1cnZlPW51bGw7ZnVuY3Rpb24gZ2V0Q3VydmUoKXtpZighX2N1cnZlKXtfY3VydmU9bmV3IEVDJDEoXCJzZWNwMjU2azFcIil9cmV0dXJuIF9jdXJ2ZX1jbGFzcyBTaWduaW5nS2V5e2NvbnN0cnVjdG9yKHByaXZhdGVLZXkpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJjdXJ2ZVwiLFwic2VjcDI1NmsxXCIpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwcml2YXRlS2V5XCIsaGV4bGlmeShwcml2YXRlS2V5KSk7Y29uc3Qga2V5UGFpcj1nZXRDdXJ2ZSgpLmtleUZyb21Qcml2YXRlKGFycmF5aWZ5KHRoaXMucHJpdmF0ZUtleSkpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwdWJsaWNLZXlcIixcIjB4XCIra2V5UGFpci5nZXRQdWJsaWMoZmFsc2UsXCJoZXhcIikpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJjb21wcmVzc2VkUHVibGljS2V5XCIsXCIweFwiK2tleVBhaXIuZ2V0UHVibGljKHRydWUsXCJoZXhcIikpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfaXNTaWduaW5nS2V5XCIsdHJ1ZSl9X2FkZFBvaW50KG90aGVyKXtjb25zdCBwMD1nZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYXJyYXlpZnkodGhpcy5wdWJsaWNLZXkpKTtjb25zdCBwMT1nZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYXJyYXlpZnkob3RoZXIpKTtyZXR1cm5cIjB4XCIrcDAucHViLmFkZChwMS5wdWIpLmVuY29kZUNvbXByZXNzZWQoXCJoZXhcIil9c2lnbkRpZ2VzdChkaWdlc3Qpe2NvbnN0IGtleVBhaXI9Z2V0Q3VydmUoKS5rZXlGcm9tUHJpdmF0ZShhcnJheWlmeSh0aGlzLnByaXZhdGVLZXkpKTtjb25zdCBkaWdlc3RCeXRlcz1hcnJheWlmeShkaWdlc3QpO2lmKGRpZ2VzdEJ5dGVzLmxlbmd0aCE9PTMyKXtsb2dnZXIkZy50aHJvd0FyZ3VtZW50RXJyb3IoXCJiYWQgZGlnZXN0IGxlbmd0aFwiLFwiZGlnZXN0XCIsZGlnZXN0KX1jb25zdCBzaWduYXR1cmU9a2V5UGFpci5zaWduKGRpZ2VzdEJ5dGVzLHtjYW5vbmljYWw6dHJ1ZX0pO3JldHVybiBzcGxpdFNpZ25hdHVyZSh7cmVjb3ZlcnlQYXJhbTpzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSxyOmhleFplcm9QYWQoXCIweFwiK3NpZ25hdHVyZS5yLnRvU3RyaW5nKDE2KSwzMiksczpoZXhaZXJvUGFkKFwiMHhcIitzaWduYXR1cmUucy50b1N0cmluZygxNiksMzIpfSl9Y29tcHV0ZVNoYXJlZFNlY3JldChvdGhlcktleSl7Y29uc3Qga2V5UGFpcj1nZXRDdXJ2ZSgpLmtleUZyb21Qcml2YXRlKGFycmF5aWZ5KHRoaXMucHJpdmF0ZUtleSkpO2NvbnN0IG90aGVyS2V5UGFpcj1nZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYXJyYXlpZnkoY29tcHV0ZVB1YmxpY0tleShvdGhlcktleSkpKTtyZXR1cm4gaGV4WmVyb1BhZChcIjB4XCIra2V5UGFpci5kZXJpdmUob3RoZXJLZXlQYWlyLmdldFB1YmxpYygpKS50b1N0cmluZygxNiksMzIpfXN0YXRpYyBpc1NpZ25pbmdLZXkodmFsdWUpe3JldHVybiEhKHZhbHVlJiZ2YWx1ZS5faXNTaWduaW5nS2V5KX19ZnVuY3Rpb24gcmVjb3ZlclB1YmxpY0tleShkaWdlc3Qsc2lnbmF0dXJlKXtjb25zdCBzaWc9c3BsaXRTaWduYXR1cmUoc2lnbmF0dXJlKTtjb25zdCBycz17cjphcnJheWlmeShzaWcuciksczphcnJheWlmeShzaWcucyl9O3JldHVyblwiMHhcIitnZXRDdXJ2ZSgpLnJlY292ZXJQdWJLZXkoYXJyYXlpZnkoZGlnZXN0KSxycyxzaWcucmVjb3ZlcnlQYXJhbSkuZW5jb2RlKFwiaGV4XCIsZmFsc2UpfWZ1bmN0aW9uIGNvbXB1dGVQdWJsaWNLZXkoa2V5LGNvbXByZXNzZWQpe2NvbnN0IGJ5dGVzPWFycmF5aWZ5KGtleSk7aWYoYnl0ZXMubGVuZ3RoPT09MzIpe2NvbnN0IHNpZ25pbmdLZXk9bmV3IFNpZ25pbmdLZXkoYnl0ZXMpO2lmKGNvbXByZXNzZWQpe3JldHVyblwiMHhcIitnZXRDdXJ2ZSgpLmtleUZyb21Qcml2YXRlKGJ5dGVzKS5nZXRQdWJsaWModHJ1ZSxcImhleFwiKX1yZXR1cm4gc2lnbmluZ0tleS5wdWJsaWNLZXl9ZWxzZSBpZihieXRlcy5sZW5ndGg9PT0zMyl7aWYoY29tcHJlc3NlZCl7cmV0dXJuIGhleGxpZnkoYnl0ZXMpfXJldHVyblwiMHhcIitnZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYnl0ZXMpLmdldFB1YmxpYyhmYWxzZSxcImhleFwiKX1lbHNlIGlmKGJ5dGVzLmxlbmd0aD09PTY1KXtpZighY29tcHJlc3NlZCl7cmV0dXJuIGhleGxpZnkoYnl0ZXMpfXJldHVyblwiMHhcIitnZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYnl0ZXMpLmdldFB1YmxpYyh0cnVlLFwiaGV4XCIpfXJldHVybiBsb2dnZXIkZy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHB1YmxpYyBvciBwcml2YXRlIGtleVwiLFwia2V5XCIsXCJbUkVEQUNURURdXCIpfWNvbnN0IHZlcnNpb24kYz1cInRyYW5zYWN0aW9ucy81LjEuMVwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRoPW5ldyBMb2dnZXIodmVyc2lvbiRjKTtmdW5jdGlvbiBoYW5kbGVBZGRyZXNzKHZhbHVlKXtpZih2YWx1ZT09PVwiMHhcIil7cmV0dXJuIG51bGx9cmV0dXJuIGdldEFkZHJlc3ModmFsdWUpfWZ1bmN0aW9uIGhhbmRsZU51bWJlcih2YWx1ZSl7aWYodmFsdWU9PT1cIjB4XCIpe3JldHVybiBaZXJvJDF9cmV0dXJuIEJpZ051bWJlci5mcm9tKHZhbHVlKX1jb25zdCB0cmFuc2FjdGlvbkZpZWxkcz1be25hbWU6XCJub25jZVwiLG1heExlbmd0aDozMixudW1lcmljOnRydWV9LHtuYW1lOlwiZ2FzUHJpY2VcIixtYXhMZW5ndGg6MzIsbnVtZXJpYzp0cnVlfSx7bmFtZTpcImdhc0xpbWl0XCIsbWF4TGVuZ3RoOjMyLG51bWVyaWM6dHJ1ZX0se25hbWU6XCJ0b1wiLGxlbmd0aDoyMH0se25hbWU6XCJ2YWx1ZVwiLG1heExlbmd0aDozMixudW1lcmljOnRydWV9LHtuYW1lOlwiZGF0YVwifV07Y29uc3QgYWxsb3dlZFRyYW5zYWN0aW9uS2V5cyQxPXtjaGFpbklkOnRydWUsZGF0YTp0cnVlLGdhc0xpbWl0OnRydWUsZ2FzUHJpY2U6dHJ1ZSxub25jZTp0cnVlLHRvOnRydWUsdmFsdWU6dHJ1ZX07ZnVuY3Rpb24gY29tcHV0ZUFkZHJlc3Moa2V5KXtjb25zdCBwdWJsaWNLZXk9Y29tcHV0ZVB1YmxpY0tleShrZXkpO3JldHVybiBnZXRBZGRyZXNzKGhleERhdGFTbGljZShrZWNjYWsyNTYoaGV4RGF0YVNsaWNlKHB1YmxpY0tleSwxKSksMTIpKX1mdW5jdGlvbiByZWNvdmVyQWRkcmVzcyhkaWdlc3Qsc2lnbmF0dXJlKXtyZXR1cm4gY29tcHV0ZUFkZHJlc3MocmVjb3ZlclB1YmxpY0tleShhcnJheWlmeShkaWdlc3QpLHNpZ25hdHVyZSkpfWZ1bmN0aW9uIGZvcm1hdE51bWJlcih2YWx1ZSxuYW1lKXtjb25zdCByZXN1bHQ9c3RyaXBaZXJvcyhCaWdOdW1iZXIuZnJvbSh2YWx1ZSkudG9IZXhTdHJpbmcoKSk7aWYocmVzdWx0Lmxlbmd0aD4zMil7bG9nZ2VyJGgudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBsZW5ndGggZm9yIFwiK25hbWUsXCJ0cmFuc2FjdGlvbjpcIituYW1lLHZhbHVlKX1yZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIGFjY2Vzc1NldGlmeShhZGRyLHN0b3JhZ2VLZXlzKXtyZXR1cm57YWRkcmVzczpnZXRBZGRyZXNzKGFkZHIpLHN0b3JhZ2VLZXlzOihzdG9yYWdlS2V5c3x8W10pLm1hcCgoc3RvcmFnZUtleSxpbmRleCk9PntpZihoZXhEYXRhTGVuZ3RoKHN0b3JhZ2VLZXkpIT09MzIpe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWNjZXNzIGxpc3Qgc3RvcmFnZUtleVwiLGBhY2Nlc3NMaXN0WyR7YWRkcn06JHtpbmRleH1dYCxzdG9yYWdlS2V5KX1yZXR1cm4gc3RvcmFnZUtleS50b0xvd2VyQ2FzZSgpfSl9fWZ1bmN0aW9uIGFjY2Vzc0xpc3RpZnkodmFsdWUpe2lmKEFycmF5LmlzQXJyYXkodmFsdWUpKXtyZXR1cm4gdmFsdWUubWFwKChzZXQsaW5kZXgpPT57aWYoQXJyYXkuaXNBcnJheShzZXQpKXtpZihzZXQubGVuZ3RoPjIpe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcImFjY2VzcyBsaXN0IGV4cGVjdGVkIHRvIGJlIFsgYWRkcmVzcywgc3RvcmFnZUtleXNbXSBdXCIsYHZhbHVlWyR7aW5kZXh9XWAsc2V0KX1yZXR1cm4gYWNjZXNzU2V0aWZ5KHNldFswXSxzZXRbMV0pfXJldHVybiBhY2Nlc3NTZXRpZnkoc2V0LmFkZHJlc3Msc2V0LnN0b3JhZ2VLZXlzKX0pfWNvbnN0IHJlc3VsdD1PYmplY3Qua2V5cyh2YWx1ZSkubWFwKGFkZHI9Pntjb25zdCBzdG9yYWdlS2V5cz12YWx1ZVthZGRyXS5yZWR1Y2UoKGFjY3VtLHN0b3JhZ2VLZXkpPT57YWNjdW1bc3RvcmFnZUtleV09dHJ1ZTtyZXR1cm4gYWNjdW19LHt9KTtyZXR1cm4gYWNjZXNzU2V0aWZ5KGFkZHIsT2JqZWN0LmtleXMoc3RvcmFnZUtleXMpLnNvcnQoKSl9KTtyZXN1bHQuc29ydCgoYSxiKT0+YS5hZGRyZXNzLmxvY2FsZUNvbXBhcmUoYi5hZGRyZXNzKSk7cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiBmb3JtYXRBY2Nlc3NMaXN0KHZhbHVlKXtyZXR1cm4gYWNjZXNzTGlzdGlmeSh2YWx1ZSkubWFwKHNldD0+W3NldC5hZGRyZXNzLHNldC5zdG9yYWdlS2V5c10pfWZ1bmN0aW9uIF9zZXJpYWxpemVFaXAyOTMwKHRyYW5zYWN0aW9uLHNpZ25hdHVyZSl7Y29uc3QgZmllbGRzPVtmb3JtYXROdW1iZXIodHJhbnNhY3Rpb24uY2hhaW5JZHx8MCxcImNoYWluSWRcIiksZm9ybWF0TnVtYmVyKHRyYW5zYWN0aW9uLm5vbmNlfHwwLFwibm9uY2VcIiksZm9ybWF0TnVtYmVyKHRyYW5zYWN0aW9uLmdhc1ByaWNlfHwwLFwiZ2FzUHJpY2VcIiksZm9ybWF0TnVtYmVyKHRyYW5zYWN0aW9uLmdhc0xpbWl0fHwwLFwiZ2FzTGltaXRcIiksdHJhbnNhY3Rpb24udG8hPW51bGw/Z2V0QWRkcmVzcyh0cmFuc2FjdGlvbi50byk6XCIweFwiLGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi52YWx1ZXx8MCxcInZhbHVlXCIpLHRyYW5zYWN0aW9uLmRhdGF8fFwiMHhcIixmb3JtYXRBY2Nlc3NMaXN0KHRyYW5zYWN0aW9uLmFjY2Vzc0xpc3R8fFtdKV07aWYoc2lnbmF0dXJlKXtjb25zdCBzaWc9c3BsaXRTaWduYXR1cmUoc2lnbmF0dXJlKTtmaWVsZHMucHVzaChmb3JtYXROdW1iZXIoc2lnLnJlY292ZXJ5UGFyYW0sXCJyZWNvdmVyeVBhcmFtXCIpKTtmaWVsZHMucHVzaChzdHJpcFplcm9zKHNpZy5yKSk7ZmllbGRzLnB1c2goc3RyaXBaZXJvcyhzaWcucykpfXJldHVybiBoZXhDb25jYXQoW1wiMHgwMVwiLGVuY29kZShmaWVsZHMpXSl9ZnVuY3Rpb24gX3NlcmlhbGl6ZSh0cmFuc2FjdGlvbixzaWduYXR1cmUpe2NoZWNrUHJvcGVydGllcyh0cmFuc2FjdGlvbixhbGxvd2VkVHJhbnNhY3Rpb25LZXlzJDEpO2NvbnN0IHJhdz1bXTt0cmFuc2FjdGlvbkZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkSW5mbyl7bGV0IHZhbHVlPXRyYW5zYWN0aW9uW2ZpZWxkSW5mby5uYW1lXXx8W107Y29uc3Qgb3B0aW9ucz17fTtpZihmaWVsZEluZm8ubnVtZXJpYyl7b3B0aW9ucy5oZXhQYWQ9XCJsZWZ0XCJ9dmFsdWU9YXJyYXlpZnkoaGV4bGlmeSh2YWx1ZSxvcHRpb25zKSk7aWYoZmllbGRJbmZvLmxlbmd0aCYmdmFsdWUubGVuZ3RoIT09ZmllbGRJbmZvLmxlbmd0aCYmdmFsdWUubGVuZ3RoPjApe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbGVuZ3RoIGZvciBcIitmaWVsZEluZm8ubmFtZSxcInRyYW5zYWN0aW9uOlwiK2ZpZWxkSW5mby5uYW1lLHZhbHVlKX1pZihmaWVsZEluZm8ubWF4TGVuZ3RoKXt2YWx1ZT1zdHJpcFplcm9zKHZhbHVlKTtpZih2YWx1ZS5sZW5ndGg+ZmllbGRJbmZvLm1heExlbmd0aCl7bG9nZ2VyJGgudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBsZW5ndGggZm9yIFwiK2ZpZWxkSW5mby5uYW1lLFwidHJhbnNhY3Rpb246XCIrZmllbGRJbmZvLm5hbWUsdmFsdWUpfX1yYXcucHVzaChoZXhsaWZ5KHZhbHVlKSl9KTtsZXQgY2hhaW5JZD0wO2lmKHRyYW5zYWN0aW9uLmNoYWluSWQhPW51bGwpe2NoYWluSWQ9dHJhbnNhY3Rpb24uY2hhaW5JZDtpZih0eXBlb2YgY2hhaW5JZCE9PVwibnVtYmVyXCIpe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdHJhbnNhY3Rpb24uY2hhaW5JZFwiLFwidHJhbnNhY3Rpb25cIix0cmFuc2FjdGlvbil9fWVsc2UgaWYoc2lnbmF0dXJlJiYhaXNCeXRlc0xpa2Uoc2lnbmF0dXJlKSYmc2lnbmF0dXJlLnY+Mjgpe2NoYWluSWQ9TWF0aC5mbG9vcigoc2lnbmF0dXJlLnYtMzUpLzIpfWlmKGNoYWluSWQhPT0wKXtyYXcucHVzaChoZXhsaWZ5KGNoYWluSWQpKTtyYXcucHVzaChcIjB4XCIpO3Jhdy5wdXNoKFwiMHhcIil9aWYoIXNpZ25hdHVyZSl7cmV0dXJuIGVuY29kZShyYXcpfWNvbnN0IHNpZz1zcGxpdFNpZ25hdHVyZShzaWduYXR1cmUpO2xldCB2PTI3K3NpZy5yZWNvdmVyeVBhcmFtO2lmKGNoYWluSWQhPT0wKXtyYXcucG9wKCk7cmF3LnBvcCgpO3Jhdy5wb3AoKTt2Kz1jaGFpbklkKjIrODtpZihzaWcudj4yOCYmc2lnLnYhPT12KXtsb2dnZXIkaC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0cmFuc2FjdGlvbi5jaGFpbklkL3NpZ25hdHVyZS52IG1pc21hdGNoXCIsXCJzaWduYXR1cmVcIixzaWduYXR1cmUpfX1lbHNlIGlmKHNpZy52IT09dil7bG9nZ2VyJGgudGhyb3dBcmd1bWVudEVycm9yKFwidHJhbnNhY3Rpb24uY2hhaW5JZC9zaWduYXR1cmUudiBtaXNtYXRjaFwiLFwic2lnbmF0dXJlXCIsc2lnbmF0dXJlKX1yYXcucHVzaChoZXhsaWZ5KHYpKTtyYXcucHVzaChzdHJpcFplcm9zKGFycmF5aWZ5KHNpZy5yKSkpO3Jhdy5wdXNoKHN0cmlwWmVyb3MoYXJyYXlpZnkoc2lnLnMpKSk7cmV0dXJuIGVuY29kZShyYXcpfWZ1bmN0aW9uIHNlcmlhbGl6ZSh0cmFuc2FjdGlvbixzaWduYXR1cmUpe2lmKHRyYW5zYWN0aW9uLnR5cGU9PW51bGwpe2lmKHRyYW5zYWN0aW9uLmFjY2Vzc0xpc3QhPW51bGwpe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcInVudHlwZWQgdHJhbnNhY3Rpb25zIGRvIG5vdCBzdXBwb3J0IGFjY2Vzc0xpc3Q7IGluY2x1ZGUgdHlwZTogMVwiLFwidHJhbnNhY3Rpb25cIix0cmFuc2FjdGlvbil9cmV0dXJuIF9zZXJpYWxpemUodHJhbnNhY3Rpb24sc2lnbmF0dXJlKX1zd2l0Y2godHJhbnNhY3Rpb24udHlwZSl7Y2FzZSAxOnJldHVybiBfc2VyaWFsaXplRWlwMjkzMCh0cmFuc2FjdGlvbixzaWduYXR1cmUpO2RlZmF1bHQ6YnJlYWt9cmV0dXJuIGxvZ2dlciRoLnRocm93RXJyb3IoYHVuc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGU6ICR7dHJhbnNhY3Rpb24udHlwZX1gLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJzZXJpYWxpemVUcmFuc2FjdGlvblwiLHRyYW5zYWN0aW9uVHlwZTp0cmFuc2FjdGlvbi50eXBlfSl9ZnVuY3Rpb24gX3BhcnNlRWlwMjkzMChwYXlsb2FkKXtjb25zdCB0cmFuc2FjdGlvbj1kZWNvZGUocGF5bG9hZC5zbGljZSgxKSk7aWYodHJhbnNhY3Rpb24ubGVuZ3RoIT09OCYmdHJhbnNhY3Rpb24ubGVuZ3RoIT09MTEpe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgY29tcG9uZW50IGNvdW50IGZvciB0cmFuc2FjdGlvbiB0eXBlOiAxXCIsXCJwYXlsb2FkXCIsaGV4bGlmeShwYXlsb2FkKSl9Y29uc3QgdHg9e3R5cGU6MSxjaGFpbklkOmhhbmRsZU51bWJlcih0cmFuc2FjdGlvblswXSkudG9OdW1iZXIoKSxub25jZTpoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMV0pLnRvTnVtYmVyKCksZ2FzUHJpY2U6aGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzJdKSxnYXNMaW1pdDpoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bM10pLHRvOmhhbmRsZUFkZHJlc3ModHJhbnNhY3Rpb25bNF0pLHZhbHVlOmhhbmRsZU51bWJlcih0cmFuc2FjdGlvbls1XSksZGF0YTp0cmFuc2FjdGlvbls2XSxhY2Nlc3NMaXN0OmFjY2Vzc0xpc3RpZnkodHJhbnNhY3Rpb25bN10pfTtpZih0cmFuc2FjdGlvbi5sZW5ndGg9PT04KXtyZXR1cm4gdHh9dHJ5e2NvbnN0IHJlY2lkPWhhbmRsZU51bWJlcih0cmFuc2FjdGlvbls4XSkudG9OdW1iZXIoKTtpZihyZWNpZCE9PTAmJnJlY2lkIT09MSl7dGhyb3cgbmV3IEVycm9yKFwiYmFkIHJlY2lkXCIpfXR4LnY9cmVjaWR9Y2F0Y2goZXJyb3Ipe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdiBmb3IgdHJhbnNhY3Rpb24gdHlwZTogMVwiLFwidlwiLHRyYW5zYWN0aW9uWzhdKX10eC5yPWhleFplcm9QYWQodHJhbnNhY3Rpb25bOV0sMzIpO3R4LnM9aGV4WmVyb1BhZCh0cmFuc2FjdGlvblsxMF0sMzIpO3RyeXtjb25zdCBkaWdlc3Q9a2VjY2FrMjU2KF9zZXJpYWxpemVFaXAyOTMwKHR4KSk7dHguZnJvbT1yZWNvdmVyQWRkcmVzcyhkaWdlc3Qse3I6dHgucixzOnR4LnMscmVjb3ZlcnlQYXJhbTp0eC52fSl9Y2F0Y2goZXJyb3Ipe2NvbnNvbGUubG9nKGVycm9yKX10eC5oYXNoPWtlY2NhazI1NihwYXlsb2FkKTtyZXR1cm4gdHh9ZnVuY3Rpb24gX3BhcnNlKHJhd1RyYW5zYWN0aW9uKXtjb25zdCB0cmFuc2FjdGlvbj1kZWNvZGUocmF3VHJhbnNhY3Rpb24pO2lmKHRyYW5zYWN0aW9uLmxlbmd0aCE9PTkmJnRyYW5zYWN0aW9uLmxlbmd0aCE9PTYpe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgcmF3IHRyYW5zYWN0aW9uXCIsXCJyYXdUcmFuc2FjdGlvblwiLHJhd1RyYW5zYWN0aW9uKX1jb25zdCB0eD17bm9uY2U6aGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzBdKS50b051bWJlcigpLGdhc1ByaWNlOmhhbmRsZU51bWJlcih0cmFuc2FjdGlvblsxXSksZ2FzTGltaXQ6aGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzJdKSx0bzpoYW5kbGVBZGRyZXNzKHRyYW5zYWN0aW9uWzNdKSx2YWx1ZTpoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bNF0pLGRhdGE6dHJhbnNhY3Rpb25bNV0sY2hhaW5JZDowfTtpZih0cmFuc2FjdGlvbi5sZW5ndGg9PT02KXtyZXR1cm4gdHh9dHJ5e3R4LnY9QmlnTnVtYmVyLmZyb20odHJhbnNhY3Rpb25bNl0pLnRvTnVtYmVyKCl9Y2F0Y2goZXJyb3Ipe2NvbnNvbGUubG9nKGVycm9yKTtyZXR1cm4gdHh9dHgucj1oZXhaZXJvUGFkKHRyYW5zYWN0aW9uWzddLDMyKTt0eC5zPWhleFplcm9QYWQodHJhbnNhY3Rpb25bOF0sMzIpO2lmKEJpZ051bWJlci5mcm9tKHR4LnIpLmlzWmVybygpJiZCaWdOdW1iZXIuZnJvbSh0eC5zKS5pc1plcm8oKSl7dHguY2hhaW5JZD10eC52O3R4LnY9MH1lbHNle3R4LmNoYWluSWQ9TWF0aC5mbG9vcigodHgudi0zNSkvMik7aWYodHguY2hhaW5JZDwwKXt0eC5jaGFpbklkPTB9bGV0IHJlY292ZXJ5UGFyYW09dHgudi0yNztjb25zdCByYXc9dHJhbnNhY3Rpb24uc2xpY2UoMCw2KTtpZih0eC5jaGFpbklkIT09MCl7cmF3LnB1c2goaGV4bGlmeSh0eC5jaGFpbklkKSk7cmF3LnB1c2goXCIweFwiKTtyYXcucHVzaChcIjB4XCIpO3JlY292ZXJ5UGFyYW0tPXR4LmNoYWluSWQqMis4fWNvbnN0IGRpZ2VzdD1rZWNjYWsyNTYoZW5jb2RlKHJhdykpO3RyeXt0eC5mcm9tPXJlY292ZXJBZGRyZXNzKGRpZ2VzdCx7cjpoZXhsaWZ5KHR4LnIpLHM6aGV4bGlmeSh0eC5zKSxyZWNvdmVyeVBhcmFtOnJlY292ZXJ5UGFyYW19KX1jYXRjaChlcnJvcil7Y29uc29sZS5sb2coZXJyb3IpfXR4Lmhhc2g9a2VjY2FrMjU2KHJhd1RyYW5zYWN0aW9uKX10eC50eXBlPW51bGw7cmV0dXJuIHR4fWZ1bmN0aW9uIHBhcnNlKHJhd1RyYW5zYWN0aW9uKXtjb25zdCBwYXlsb2FkPWFycmF5aWZ5KHJhd1RyYW5zYWN0aW9uKTtpZihwYXlsb2FkWzBdPjEyNyl7cmV0dXJuIF9wYXJzZShwYXlsb2FkKX1zd2l0Y2gocGF5bG9hZFswXSl7Y2FzZSAxOnJldHVybiBfcGFyc2VFaXAyOTMwKHBheWxvYWQpO2RlZmF1bHQ6YnJlYWt9cmV0dXJuIGxvZ2dlciRoLnRocm93RXJyb3IoYHVuc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGU6ICR7cGF5bG9hZFswXX1gLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJwYXJzZVRyYW5zYWN0aW9uXCIsdHJhbnNhY3Rpb25UeXBlOnBheWxvYWRbMF19KX1jb25zdCB2ZXJzaW9uJGQ9XCJjb250cmFjdHMvNS4xLjFcIjtcInVzZSBzdHJpY3RcIjt2YXIgX19hd2FpdGVyJDM9d2luZG93JiZ3aW5kb3cuX19hd2FpdGVyfHxmdW5jdGlvbih0aGlzQXJnLF9hcmd1bWVudHMsUCxnZW5lcmF0b3Ipe2Z1bmN0aW9uIGFkb3B0KHZhbHVlKXtyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQP3ZhbHVlOm5ldyBQKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUodmFsdWUpfSl9cmV0dXJuIG5ldyhQfHwoUD1Qcm9taXNlKSkoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe2Z1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gc3RlcChyZXN1bHQpe3Jlc3VsdC5kb25lP3Jlc29sdmUocmVzdWx0LnZhbHVlKTphZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLHJlamVjdGVkKX1zdGVwKChnZW5lcmF0b3I9Z2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsX2FyZ3VtZW50c3x8W10pKS5uZXh0KCkpfSl9O2NvbnN0IGxvZ2dlciRpPW5ldyBMb2dnZXIodmVyc2lvbiRkKTtjb25zdCBhbGxvd2VkVHJhbnNhY3Rpb25LZXlzJDI9e2NoYWluSWQ6dHJ1ZSxkYXRhOnRydWUsZnJvbTp0cnVlLGdhc0xpbWl0OnRydWUsZ2FzUHJpY2U6dHJ1ZSxub25jZTp0cnVlLHRvOnRydWUsdmFsdWU6dHJ1ZSx0eXBlOnRydWUsYWNjZXNzTGlzdDp0cnVlfTtmdW5jdGlvbiByZXNvbHZlTmFtZShyZXNvbHZlcixuYW1lT3JQcm9taXNlKXtyZXR1cm4gX19hd2FpdGVyJDModGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IG5hbWU9eWllbGQgbmFtZU9yUHJvbWlzZTt0cnl7cmV0dXJuIGdldEFkZHJlc3MobmFtZSl9Y2F0Y2goZXJyb3Ipe31pZighcmVzb2x2ZXIpe2xvZ2dlciRpLnRocm93RXJyb3IoXCJhIHByb3ZpZGVyIG9yIHNpZ25lciBpcyBuZWVkZWQgdG8gcmVzb2x2ZSBFTlMgbmFtZXNcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwicmVzb2x2ZU5hbWVcIn0pfWNvbnN0IGFkZHJlc3M9eWllbGQgcmVzb2x2ZXIucmVzb2x2ZU5hbWUobmFtZSk7aWYoYWRkcmVzcz09bnVsbCl7bG9nZ2VyJGkudGhyb3dBcmd1bWVudEVycm9yKFwicmVzb2x2ZXIgb3IgYWRkciBpcyBub3QgY29uZmlndXJlZCBmb3IgRU5TIG5hbWVcIixcIm5hbWVcIixuYW1lKX1yZXR1cm4gYWRkcmVzc30pfWZ1bmN0aW9uIHJlc29sdmVBZGRyZXNzZXMocmVzb2x2ZXIsdmFsdWUscGFyYW1UeXBlKXtyZXR1cm4gX19hd2FpdGVyJDModGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2lmKEFycmF5LmlzQXJyYXkocGFyYW1UeXBlKSl7cmV0dXJuIHlpZWxkIFByb21pc2UuYWxsKHBhcmFtVHlwZS5tYXAoKHBhcmFtVHlwZSxpbmRleCk9PntyZXR1cm4gcmVzb2x2ZUFkZHJlc3NlcyhyZXNvbHZlcixBcnJheS5pc0FycmF5KHZhbHVlKT92YWx1ZVtpbmRleF06dmFsdWVbcGFyYW1UeXBlLm5hbWVdLHBhcmFtVHlwZSl9KSl9aWYocGFyYW1UeXBlLnR5cGU9PT1cImFkZHJlc3NcIil7cmV0dXJuIHlpZWxkIHJlc29sdmVOYW1lKHJlc29sdmVyLHZhbHVlKX1pZihwYXJhbVR5cGUudHlwZT09PVwidHVwbGVcIil7cmV0dXJuIHlpZWxkIHJlc29sdmVBZGRyZXNzZXMocmVzb2x2ZXIsdmFsdWUscGFyYW1UeXBlLmNvbXBvbmVudHMpfWlmKHBhcmFtVHlwZS5iYXNlVHlwZT09PVwiYXJyYXlcIil7aWYoIUFycmF5LmlzQXJyYXkodmFsdWUpKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiaW52YWxpZCB2YWx1ZSBmb3IgYXJyYXlcIikpfXJldHVybiB5aWVsZCBQcm9taXNlLmFsbCh2YWx1ZS5tYXAodj0+cmVzb2x2ZUFkZHJlc3NlcyhyZXNvbHZlcix2LHBhcmFtVHlwZS5hcnJheUNoaWxkcmVuKSkpfXJldHVybiB2YWx1ZX0pfWZ1bmN0aW9uIHBvcHVsYXRlVHJhbnNhY3Rpb24oY29udHJhY3QsZnJhZ21lbnQsYXJncyl7cmV0dXJuIF9fYXdhaXRlciQzKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtsZXQgb3ZlcnJpZGVzPXt9O2lmKGFyZ3MubGVuZ3RoPT09ZnJhZ21lbnQuaW5wdXRzLmxlbmd0aCsxJiZ0eXBlb2YgYXJnc1thcmdzLmxlbmd0aC0xXT09PVwib2JqZWN0XCIpe292ZXJyaWRlcz1zaGFsbG93Q29weShhcmdzLnBvcCgpKX1sb2dnZXIkaS5jaGVja0FyZ3VtZW50Q291bnQoYXJncy5sZW5ndGgsZnJhZ21lbnQuaW5wdXRzLmxlbmd0aCxcInBhc3NlZCB0byBjb250cmFjdFwiKTtpZihjb250cmFjdC5zaWduZXIpe2lmKG92ZXJyaWRlcy5mcm9tKXtvdmVycmlkZXMuZnJvbT1yZXNvbHZlUHJvcGVydGllcyh7b3ZlcnJpZGU6cmVzb2x2ZU5hbWUoY29udHJhY3Quc2lnbmVyLG92ZXJyaWRlcy5mcm9tKSxzaWduZXI6Y29udHJhY3Quc2lnbmVyLmdldEFkZHJlc3MoKX0pLnRoZW4oY2hlY2s9Pl9fYXdhaXRlciQzKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtpZihnZXRBZGRyZXNzKGNoZWNrLnNpZ25lcikhPT1jaGVjay5vdmVycmlkZSl7bG9nZ2VyJGkudGhyb3dFcnJvcihcIkNvbnRyYWN0IHdpdGggYSBTaWduZXIgY2Fubm90IG92ZXJyaWRlIGZyb21cIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwib3ZlcnJpZGVzLmZyb21cIn0pfXJldHVybiBjaGVjay5vdmVycmlkZX0pKX1lbHNle292ZXJyaWRlcy5mcm9tPWNvbnRyYWN0LnNpZ25lci5nZXRBZGRyZXNzKCl9fWVsc2UgaWYob3ZlcnJpZGVzLmZyb20pe292ZXJyaWRlcy5mcm9tPXJlc29sdmVOYW1lKGNvbnRyYWN0LnByb3ZpZGVyLG92ZXJyaWRlcy5mcm9tKX1jb25zdCByZXNvbHZlZD15aWVsZCByZXNvbHZlUHJvcGVydGllcyh7YXJnczpyZXNvbHZlQWRkcmVzc2VzKGNvbnRyYWN0LnNpZ25lcnx8Y29udHJhY3QucHJvdmlkZXIsYXJncyxmcmFnbWVudC5pbnB1dHMpLGFkZHJlc3M6Y29udHJhY3QucmVzb2x2ZWRBZGRyZXNzLG92ZXJyaWRlczpyZXNvbHZlUHJvcGVydGllcyhvdmVycmlkZXMpfHx7fX0pO2NvbnN0IGRhdGE9Y29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUZ1bmN0aW9uRGF0YShmcmFnbWVudCxyZXNvbHZlZC5hcmdzKTtjb25zdCB0eD17ZGF0YTpkYXRhLHRvOnJlc29sdmVkLmFkZHJlc3N9O2NvbnN0IHJvPXJlc29sdmVkLm92ZXJyaWRlcztpZihyby5ub25jZSE9bnVsbCl7dHgubm9uY2U9QmlnTnVtYmVyLmZyb20ocm8ubm9uY2UpLnRvTnVtYmVyKCl9aWYocm8uZ2FzTGltaXQhPW51bGwpe3R4Lmdhc0xpbWl0PUJpZ051bWJlci5mcm9tKHJvLmdhc0xpbWl0KX1pZihyby5nYXNQcmljZSE9bnVsbCl7dHguZ2FzUHJpY2U9QmlnTnVtYmVyLmZyb20ocm8uZ2FzUHJpY2UpfWlmKHJvLmZyb20hPW51bGwpe3R4LmZyb209cm8uZnJvbX1pZihyby50eXBlIT1udWxsKXt0eC50eXBlPXJvLnR5cGV9aWYocm8uYWNjZXNzTGlzdCE9bnVsbCl7dHguYWNjZXNzTGlzdD1hY2Nlc3NMaXN0aWZ5KHJvLmFjY2Vzc0xpc3QpfWlmKHR4Lmdhc0xpbWl0PT1udWxsJiZmcmFnbWVudC5nYXMhPW51bGwpe2xldCBpbnRyaW5zaWM9MjFlMztjb25zdCBieXRlcz1hcnJheWlmeShkYXRhKTtmb3IobGV0IGk9MDtpPGJ5dGVzLmxlbmd0aDtpKyspe2ludHJpbnNpYys9NDtpZihieXRlc1tpXSl7aW50cmluc2ljKz02NH19dHguZ2FzTGltaXQ9QmlnTnVtYmVyLmZyb20oZnJhZ21lbnQuZ2FzKS5hZGQoaW50cmluc2ljKX1pZihyby52YWx1ZSl7Y29uc3Qgcm9WYWx1ZT1CaWdOdW1iZXIuZnJvbShyby52YWx1ZSk7aWYoIXJvVmFsdWUuaXNaZXJvKCkmJiFmcmFnbWVudC5wYXlhYmxlKXtsb2dnZXIkaS50aHJvd0Vycm9yKFwibm9uLXBheWFibGUgbWV0aG9kIGNhbm5vdCBvdmVycmlkZSB2YWx1ZVwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJvdmVycmlkZXMudmFsdWVcIix2YWx1ZTpvdmVycmlkZXMudmFsdWV9KX10eC52YWx1ZT1yb1ZhbHVlfWRlbGV0ZSBvdmVycmlkZXMubm9uY2U7ZGVsZXRlIG92ZXJyaWRlcy5nYXNMaW1pdDtkZWxldGUgb3ZlcnJpZGVzLmdhc1ByaWNlO2RlbGV0ZSBvdmVycmlkZXMuZnJvbTtkZWxldGUgb3ZlcnJpZGVzLnZhbHVlO2RlbGV0ZSBvdmVycmlkZXMudHlwZTtkZWxldGUgb3ZlcnJpZGVzLmFjY2Vzc0xpc3Q7Y29uc3QgbGVmdG92ZXJzPU9iamVjdC5rZXlzKG92ZXJyaWRlcykuZmlsdGVyKGtleT0+b3ZlcnJpZGVzW2tleV0hPW51bGwpO2lmKGxlZnRvdmVycy5sZW5ndGgpe2xvZ2dlciRpLnRocm93RXJyb3IoYGNhbm5vdCBvdmVycmlkZSAke2xlZnRvdmVycy5tYXAobD0+SlNPTi5zdHJpbmdpZnkobCkpLmpvaW4oXCIsXCIpfWAsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIm92ZXJyaWRlc1wiLG92ZXJyaWRlczpsZWZ0b3ZlcnN9KX1yZXR1cm4gdHh9KX1mdW5jdGlvbiBidWlsZFBvcHVsYXRlKGNvbnRyYWN0LGZyYWdtZW50KXtyZXR1cm4gZnVuY3Rpb24oLi4uYXJncyl7cmV0dXJuIHBvcHVsYXRlVHJhbnNhY3Rpb24oY29udHJhY3QsZnJhZ21lbnQsYXJncyl9fWZ1bmN0aW9uIGJ1aWxkRXN0aW1hdGUoY29udHJhY3QsZnJhZ21lbnQpe2NvbnN0IHNpZ25lck9yUHJvdmlkZXI9Y29udHJhY3Quc2lnbmVyfHxjb250cmFjdC5wcm92aWRlcjtyZXR1cm4gZnVuY3Rpb24oLi4uYXJncyl7cmV0dXJuIF9fYXdhaXRlciQzKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtpZighc2lnbmVyT3JQcm92aWRlcil7bG9nZ2VyJGkudGhyb3dFcnJvcihcImVzdGltYXRlIHJlcXVpcmUgYSBwcm92aWRlciBvciBzaWduZXJcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwiZXN0aW1hdGVHYXNcIn0pfWNvbnN0IHR4PXlpZWxkIHBvcHVsYXRlVHJhbnNhY3Rpb24oY29udHJhY3QsZnJhZ21lbnQsYXJncyk7cmV0dXJuIHlpZWxkIHNpZ25lck9yUHJvdmlkZXIuZXN0aW1hdGVHYXModHgpfSl9fWZ1bmN0aW9uIGJ1aWxkQ2FsbChjb250cmFjdCxmcmFnbWVudCxjb2xsYXBzZVNpbXBsZSl7Y29uc3Qgc2lnbmVyT3JQcm92aWRlcj1jb250cmFjdC5zaWduZXJ8fGNvbnRyYWN0LnByb3ZpZGVyO3JldHVybiBmdW5jdGlvbiguLi5hcmdzKXtyZXR1cm4gX19hd2FpdGVyJDModGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2xldCBibG9ja1RhZz11bmRlZmluZWQ7aWYoYXJncy5sZW5ndGg9PT1mcmFnbWVudC5pbnB1dHMubGVuZ3RoKzEmJnR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoLTFdPT09XCJvYmplY3RcIil7Y29uc3Qgb3ZlcnJpZGVzPXNoYWxsb3dDb3B5KGFyZ3MucG9wKCkpO2lmKG92ZXJyaWRlcy5ibG9ja1RhZyE9bnVsbCl7YmxvY2tUYWc9eWllbGQgb3ZlcnJpZGVzLmJsb2NrVGFnfWRlbGV0ZSBvdmVycmlkZXMuYmxvY2tUYWc7YXJncy5wdXNoKG92ZXJyaWRlcyl9aWYoY29udHJhY3QuZGVwbG95VHJhbnNhY3Rpb24hPW51bGwpe3lpZWxkIGNvbnRyYWN0Ll9kZXBsb3llZChibG9ja1RhZyl9Y29uc3QgdHg9eWllbGQgcG9wdWxhdGVUcmFuc2FjdGlvbihjb250cmFjdCxmcmFnbWVudCxhcmdzKTtjb25zdCByZXN1bHQ9eWllbGQgc2lnbmVyT3JQcm92aWRlci5jYWxsKHR4LGJsb2NrVGFnKTt0cnl7bGV0IHZhbHVlPWNvbnRyYWN0LmludGVyZmFjZS5kZWNvZGVGdW5jdGlvblJlc3VsdChmcmFnbWVudCxyZXN1bHQpO2lmKGNvbGxhcHNlU2ltcGxlJiZmcmFnbWVudC5vdXRwdXRzLmxlbmd0aD09PTEpe3ZhbHVlPXZhbHVlWzBdfXJldHVybiB2YWx1ZX1jYXRjaChlcnJvcil7aWYoZXJyb3IuY29kZT09PUxvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04pe2Vycm9yLmFkZHJlc3M9Y29udHJhY3QuYWRkcmVzcztlcnJvci5hcmdzPWFyZ3M7ZXJyb3IudHJhbnNhY3Rpb249dHh9dGhyb3cgZXJyb3J9fSl9fWZ1bmN0aW9uIGJ1aWxkU2VuZChjb250cmFjdCxmcmFnbWVudCl7cmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3Mpe3JldHVybiBfX2F3YWl0ZXIkMyh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYoIWNvbnRyYWN0LnNpZ25lcil7bG9nZ2VyJGkudGhyb3dFcnJvcihcInNlbmRpbmcgYSB0cmFuc2FjdGlvbiByZXF1aXJlcyBhIHNpZ25lclwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJzZW5kVHJhbnNhY3Rpb25cIn0pfWlmKGNvbnRyYWN0LmRlcGxveVRyYW5zYWN0aW9uIT1udWxsKXt5aWVsZCBjb250cmFjdC5fZGVwbG95ZWQoKX1jb25zdCB0eFJlcXVlc3Q9eWllbGQgcG9wdWxhdGVUcmFuc2FjdGlvbihjb250cmFjdCxmcmFnbWVudCxhcmdzKTtjb25zdCB0eD15aWVsZCBjb250cmFjdC5zaWduZXIuc2VuZFRyYW5zYWN0aW9uKHR4UmVxdWVzdCk7Y29uc3Qgd2FpdD10eC53YWl0LmJpbmQodHgpO3R4LndhaXQ9KGNvbmZpcm1hdGlvbnM9PntyZXR1cm4gd2FpdChjb25maXJtYXRpb25zKS50aGVuKHJlY2VpcHQ9PntyZWNlaXB0LmV2ZW50cz1yZWNlaXB0LmxvZ3MubWFwKGxvZz0+e2xldCBldmVudD1kZWVwQ29weShsb2cpO2xldCBwYXJzZWQ9bnVsbDt0cnl7cGFyc2VkPWNvbnRyYWN0LmludGVyZmFjZS5wYXJzZUxvZyhsb2cpfWNhdGNoKGUpe31pZihwYXJzZWQpe2V2ZW50LmFyZ3M9cGFyc2VkLmFyZ3M7ZXZlbnQuZGVjb2RlPSgoZGF0YSx0b3BpY3MpPT57cmV0dXJuIGNvbnRyYWN0LmludGVyZmFjZS5kZWNvZGVFdmVudExvZyhwYXJzZWQuZXZlbnRGcmFnbWVudCxkYXRhLHRvcGljcyl9KTtldmVudC5ldmVudD1wYXJzZWQubmFtZTtldmVudC5ldmVudFNpZ25hdHVyZT1wYXJzZWQuc2lnbmF0dXJlfWV2ZW50LnJlbW92ZUxpc3RlbmVyPSgoKT0+e3JldHVybiBjb250cmFjdC5wcm92aWRlcn0pO2V2ZW50LmdldEJsb2NrPSgoKT0+e3JldHVybiBjb250cmFjdC5wcm92aWRlci5nZXRCbG9jayhyZWNlaXB0LmJsb2NrSGFzaCl9KTtldmVudC5nZXRUcmFuc2FjdGlvbj0oKCk9PntyZXR1cm4gY29udHJhY3QucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb24ocmVjZWlwdC50cmFuc2FjdGlvbkhhc2gpfSk7ZXZlbnQuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0PSgoKT0+e3JldHVybiBQcm9taXNlLnJlc29sdmUocmVjZWlwdCl9KTtyZXR1cm4gZXZlbnR9KTtyZXR1cm4gcmVjZWlwdH0pfSk7cmV0dXJuIHR4fSl9fWZ1bmN0aW9uIGJ1aWxkRGVmYXVsdChjb250cmFjdCxmcmFnbWVudCxjb2xsYXBzZVNpbXBsZSl7aWYoZnJhZ21lbnQuY29uc3RhbnQpe3JldHVybiBidWlsZENhbGwoY29udHJhY3QsZnJhZ21lbnQsY29sbGFwc2VTaW1wbGUpfXJldHVybiBidWlsZFNlbmQoY29udHJhY3QsZnJhZ21lbnQpfWZ1bmN0aW9uIGdldEV2ZW50VGFnKGZpbHRlcil7aWYoZmlsdGVyLmFkZHJlc3MmJihmaWx0ZXIudG9waWNzPT1udWxsfHxmaWx0ZXIudG9waWNzLmxlbmd0aD09PTApKXtyZXR1cm5cIipcIn1yZXR1cm4oZmlsdGVyLmFkZHJlc3N8fFwiKlwiKStcIkBcIisoZmlsdGVyLnRvcGljcz9maWx0ZXIudG9waWNzLm1hcCh0b3BpYz0+e2lmKEFycmF5LmlzQXJyYXkodG9waWMpKXtyZXR1cm4gdG9waWMuam9pbihcInxcIil9cmV0dXJuIHRvcGljfSkuam9pbihcIjpcIik6XCJcIil9Y2xhc3MgUnVubmluZ0V2ZW50e2NvbnN0cnVjdG9yKHRhZyxmaWx0ZXIpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJ0YWdcIix0YWcpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJmaWx0ZXJcIixmaWx0ZXIpO3RoaXMuX2xpc3RlbmVycz1bXX1hZGRMaXN0ZW5lcihsaXN0ZW5lcixvbmNlKXt0aGlzLl9saXN0ZW5lcnMucHVzaCh7bGlzdGVuZXI6bGlzdGVuZXIsb25jZTpvbmNlfSl9cmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpe2xldCBkb25lPWZhbHNlO3RoaXMuX2xpc3RlbmVycz10aGlzLl9saXN0ZW5lcnMuZmlsdGVyKGl0ZW09PntpZihkb25lfHxpdGVtLmxpc3RlbmVyIT09bGlzdGVuZXIpe3JldHVybiB0cnVlfWRvbmU9dHJ1ZTtyZXR1cm4gZmFsc2V9KX1yZW1vdmVBbGxMaXN0ZW5lcnMoKXt0aGlzLl9saXN0ZW5lcnM9W119bGlzdGVuZXJzKCl7cmV0dXJuIHRoaXMuX2xpc3RlbmVycy5tYXAoaT0+aS5saXN0ZW5lcil9bGlzdGVuZXJDb3VudCgpe3JldHVybiB0aGlzLl9saXN0ZW5lcnMubGVuZ3RofXJ1bihhcmdzKXtjb25zdCBsaXN0ZW5lckNvdW50PXRoaXMubGlzdGVuZXJDb3VudCgpO3RoaXMuX2xpc3RlbmVycz10aGlzLl9saXN0ZW5lcnMuZmlsdGVyKGl0ZW09Pntjb25zdCBhcmdzQ29weT1hcmdzLnNsaWNlKCk7c2V0VGltZW91dCgoKT0+e2l0ZW0ubGlzdGVuZXIuYXBwbHkodGhpcyxhcmdzQ29weSl9LDApO3JldHVybiFpdGVtLm9uY2V9KTtyZXR1cm4gbGlzdGVuZXJDb3VudH1wcmVwYXJlRXZlbnQoZXZlbnQpe31nZXRFbWl0KGV2ZW50KXtyZXR1cm5bZXZlbnRdfX1jbGFzcyBFcnJvclJ1bm5pbmdFdmVudCBleHRlbmRzIFJ1bm5pbmdFdmVudHtjb25zdHJ1Y3Rvcigpe3N1cGVyKFwiZXJyb3JcIixudWxsKX19Y2xhc3MgRnJhZ21lbnRSdW5uaW5nRXZlbnQgZXh0ZW5kcyBSdW5uaW5nRXZlbnR7Y29uc3RydWN0b3IoYWRkcmVzcyxjb250cmFjdEludGVyZmFjZSxmcmFnbWVudCx0b3BpY3Mpe2NvbnN0IGZpbHRlcj17YWRkcmVzczphZGRyZXNzfTtsZXQgdG9waWM9Y29udHJhY3RJbnRlcmZhY2UuZ2V0RXZlbnRUb3BpYyhmcmFnbWVudCk7aWYodG9waWNzKXtpZih0b3BpYyE9PXRvcGljc1swXSl7bG9nZ2VyJGkudGhyb3dBcmd1bWVudEVycm9yKFwidG9waWMgbWlzbWF0Y2hcIixcInRvcGljc1wiLHRvcGljcyl9ZmlsdGVyLnRvcGljcz10b3BpY3Muc2xpY2UoKX1lbHNle2ZpbHRlci50b3BpY3M9W3RvcGljXX1zdXBlcihnZXRFdmVudFRhZyhmaWx0ZXIpLGZpbHRlcik7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFkZHJlc3NcIixhZGRyZXNzKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiaW50ZXJmYWNlXCIsY29udHJhY3RJbnRlcmZhY2UpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJmcmFnbWVudFwiLGZyYWdtZW50KX1wcmVwYXJlRXZlbnQoZXZlbnQpe3N1cGVyLnByZXBhcmVFdmVudChldmVudCk7ZXZlbnQuZXZlbnQ9dGhpcy5mcmFnbWVudC5uYW1lO2V2ZW50LmV2ZW50U2lnbmF0dXJlPXRoaXMuZnJhZ21lbnQuZm9ybWF0KCk7ZXZlbnQuZGVjb2RlPSgoZGF0YSx0b3BpY3MpPT57cmV0dXJuIHRoaXMuaW50ZXJmYWNlLmRlY29kZUV2ZW50TG9nKHRoaXMuZnJhZ21lbnQsZGF0YSx0b3BpY3MpfSk7dHJ5e2V2ZW50LmFyZ3M9dGhpcy5pbnRlcmZhY2UuZGVjb2RlRXZlbnRMb2codGhpcy5mcmFnbWVudCxldmVudC5kYXRhLGV2ZW50LnRvcGljcyl9Y2F0Y2goZXJyb3Ipe2V2ZW50LmFyZ3M9bnVsbDtldmVudC5kZWNvZGVFcnJvcj1lcnJvcn19Z2V0RW1pdChldmVudCl7Y29uc3QgZXJyb3JzPWNoZWNrUmVzdWx0RXJyb3JzKGV2ZW50LmFyZ3MpO2lmKGVycm9ycy5sZW5ndGgpe3Rocm93IGVycm9yc1swXS5lcnJvcn1jb25zdCBhcmdzPShldmVudC5hcmdzfHxbXSkuc2xpY2UoKTthcmdzLnB1c2goZXZlbnQpO3JldHVybiBhcmdzfX1jbGFzcyBXaWxkY2FyZFJ1bm5pbmdFdmVudCBleHRlbmRzIFJ1bm5pbmdFdmVudHtjb25zdHJ1Y3RvcihhZGRyZXNzLGNvbnRyYWN0SW50ZXJmYWNlKXtzdXBlcihcIipcIix7YWRkcmVzczphZGRyZXNzfSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFkZHJlc3NcIixhZGRyZXNzKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiaW50ZXJmYWNlXCIsY29udHJhY3RJbnRlcmZhY2UpfXByZXBhcmVFdmVudChldmVudCl7c3VwZXIucHJlcGFyZUV2ZW50KGV2ZW50KTt0cnl7Y29uc3QgcGFyc2VkPXRoaXMuaW50ZXJmYWNlLnBhcnNlTG9nKGV2ZW50KTtldmVudC5ldmVudD1wYXJzZWQubmFtZTtldmVudC5ldmVudFNpZ25hdHVyZT1wYXJzZWQuc2lnbmF0dXJlO2V2ZW50LmRlY29kZT0oKGRhdGEsdG9waWNzKT0+e3JldHVybiB0aGlzLmludGVyZmFjZS5kZWNvZGVFdmVudExvZyhwYXJzZWQuZXZlbnRGcmFnbWVudCxkYXRhLHRvcGljcyl9KTtldmVudC5hcmdzPXBhcnNlZC5hcmdzfWNhdGNoKGVycm9yKXt9fX1jbGFzcyBCYXNlQ29udHJhY3R7Y29uc3RydWN0b3IoYWRkcmVzc09yTmFtZSxjb250cmFjdEludGVyZmFjZSxzaWduZXJPclByb3ZpZGVyKXtsb2dnZXIkaS5jaGVja05ldyhuZXcudGFyZ2V0LENvbnRyYWN0KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiaW50ZXJmYWNlXCIsZ2V0U3RhdGljKG5ldy50YXJnZXQsXCJnZXRJbnRlcmZhY2VcIikoY29udHJhY3RJbnRlcmZhY2UpKTtpZihzaWduZXJPclByb3ZpZGVyPT1udWxsKXtkZWZpbmVSZWFkT25seSh0aGlzLFwicHJvdmlkZXJcIixudWxsKTtkZWZpbmVSZWFkT25seSh0aGlzLFwic2lnbmVyXCIsbnVsbCl9ZWxzZSBpZihTaWduZXIuaXNTaWduZXIoc2lnbmVyT3JQcm92aWRlcikpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwcm92aWRlclwiLHNpZ25lck9yUHJvdmlkZXIucHJvdmlkZXJ8fG51bGwpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJzaWduZXJcIixzaWduZXJPclByb3ZpZGVyKX1lbHNlIGlmKFByb3ZpZGVyLmlzUHJvdmlkZXIoc2lnbmVyT3JQcm92aWRlcikpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwcm92aWRlclwiLHNpZ25lck9yUHJvdmlkZXIpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJzaWduZXJcIixudWxsKX1lbHNle2xvZ2dlciRpLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgc2lnbmVyIG9yIHByb3ZpZGVyXCIsXCJzaWduZXJPclByb3ZpZGVyXCIsc2lnbmVyT3JQcm92aWRlcil9ZGVmaW5lUmVhZE9ubHkodGhpcyxcImNhbGxTdGF0aWNcIix7fSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImVzdGltYXRlR2FzXCIse30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJmdW5jdGlvbnNcIix7fSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInBvcHVsYXRlVHJhbnNhY3Rpb25cIix7fSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImZpbHRlcnNcIix7fSk7e2NvbnN0IHVuaXF1ZUZpbHRlcnM9e307T2JqZWN0LmtleXModGhpcy5pbnRlcmZhY2UuZXZlbnRzKS5mb3JFYWNoKGV2ZW50U2lnbmF0dXJlPT57Y29uc3QgZXZlbnQ9dGhpcy5pbnRlcmZhY2UuZXZlbnRzW2V2ZW50U2lnbmF0dXJlXTtkZWZpbmVSZWFkT25seSh0aGlzLmZpbHRlcnMsZXZlbnRTaWduYXR1cmUsKC4uLmFyZ3MpPT57cmV0dXJue2FkZHJlc3M6dGhpcy5hZGRyZXNzLHRvcGljczp0aGlzLmludGVyZmFjZS5lbmNvZGVGaWx0ZXJUb3BpY3MoZXZlbnQsYXJncyl9fSk7aWYoIXVuaXF1ZUZpbHRlcnNbZXZlbnQubmFtZV0pe3VuaXF1ZUZpbHRlcnNbZXZlbnQubmFtZV09W119dW5pcXVlRmlsdGVyc1tldmVudC5uYW1lXS5wdXNoKGV2ZW50U2lnbmF0dXJlKX0pO09iamVjdC5rZXlzKHVuaXF1ZUZpbHRlcnMpLmZvckVhY2gobmFtZT0+e2NvbnN0IGZpbHRlcnM9dW5pcXVlRmlsdGVyc1tuYW1lXTtpZihmaWx0ZXJzLmxlbmd0aD09PTEpe2RlZmluZVJlYWRPbmx5KHRoaXMuZmlsdGVycyxuYW1lLHRoaXMuZmlsdGVyc1tmaWx0ZXJzWzBdXSl9ZWxzZXtsb2dnZXIkaS53YXJuKGBEdXBsaWNhdGUgZGVmaW5pdGlvbiBvZiAke25hbWV9ICgke2ZpbHRlcnMuam9pbihcIiwgXCIpfSlgKX19KX1kZWZpbmVSZWFkT25seSh0aGlzLFwiX3J1bm5pbmdFdmVudHNcIix7fSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl93cmFwcGVkRW1pdHNcIix7fSk7aWYoYWRkcmVzc09yTmFtZT09bnVsbCl7bG9nZ2VyJGkudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBjb250cmFjdCBhZGRyZXNzIG9yIEVOUyBuYW1lXCIsXCJhZGRyZXNzT3JOYW1lXCIsYWRkcmVzc09yTmFtZSl9ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFkZHJlc3NcIixhZGRyZXNzT3JOYW1lKTtpZih0aGlzLnByb3ZpZGVyKXtkZWZpbmVSZWFkT25seSh0aGlzLFwicmVzb2x2ZWRBZGRyZXNzXCIscmVzb2x2ZU5hbWUodGhpcy5wcm92aWRlcixhZGRyZXNzT3JOYW1lKSl9ZWxzZXt0cnl7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInJlc29sdmVkQWRkcmVzc1wiLFByb21pc2UucmVzb2x2ZShnZXRBZGRyZXNzKGFkZHJlc3NPck5hbWUpKSl9Y2F0Y2goZXJyb3Ipe2xvZ2dlciRpLnRocm93RXJyb3IoXCJwcm92aWRlciBpcyByZXF1aXJlZCB0byB1c2UgRU5TIG5hbWUgYXMgY29udHJhY3QgYWRkcmVzc1wiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJuZXcgQ29udHJhY3RcIn0pfX1jb25zdCB1bmlxdWVOYW1lcz17fTtjb25zdCB1bmlxdWVTaWduYXR1cmVzPXt9O09iamVjdC5rZXlzKHRoaXMuaW50ZXJmYWNlLmZ1bmN0aW9ucykuZm9yRWFjaChzaWduYXR1cmU9Pntjb25zdCBmcmFnbWVudD10aGlzLmludGVyZmFjZS5mdW5jdGlvbnNbc2lnbmF0dXJlXTtpZih1bmlxdWVTaWduYXR1cmVzW3NpZ25hdHVyZV0pe2xvZ2dlciRpLndhcm4oYER1cGxpY2F0ZSBBQkkgZW50cnkgZm9yICR7SlNPTi5zdHJpbmdpZnkobmFtZSl9YCk7cmV0dXJufXVuaXF1ZVNpZ25hdHVyZXNbc2lnbmF0dXJlXT10cnVlO3tjb25zdCBuYW1lPWZyYWdtZW50Lm5hbWU7aWYoIXVuaXF1ZU5hbWVzW25hbWVdKXt1bmlxdWVOYW1lc1tuYW1lXT1bXX11bmlxdWVOYW1lc1tuYW1lXS5wdXNoKHNpZ25hdHVyZSl9aWYodGhpc1tzaWduYXR1cmVdPT1udWxsKXtkZWZpbmVSZWFkT25seSh0aGlzLHNpZ25hdHVyZSxidWlsZERlZmF1bHQodGhpcyxmcmFnbWVudCx0cnVlKSl9aWYodGhpcy5mdW5jdGlvbnNbc2lnbmF0dXJlXT09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcy5mdW5jdGlvbnMsc2lnbmF0dXJlLGJ1aWxkRGVmYXVsdCh0aGlzLGZyYWdtZW50LGZhbHNlKSl9aWYodGhpcy5jYWxsU3RhdGljW3NpZ25hdHVyZV09PW51bGwpe2RlZmluZVJlYWRPbmx5KHRoaXMuY2FsbFN0YXRpYyxzaWduYXR1cmUsYnVpbGRDYWxsKHRoaXMsZnJhZ21lbnQsdHJ1ZSkpfWlmKHRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbltzaWduYXR1cmVdPT1udWxsKXtkZWZpbmVSZWFkT25seSh0aGlzLnBvcHVsYXRlVHJhbnNhY3Rpb24sc2lnbmF0dXJlLGJ1aWxkUG9wdWxhdGUodGhpcyxmcmFnbWVudCkpfWlmKHRoaXMuZXN0aW1hdGVHYXNbc2lnbmF0dXJlXT09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcy5lc3RpbWF0ZUdhcyxzaWduYXR1cmUsYnVpbGRFc3RpbWF0ZSh0aGlzLGZyYWdtZW50KSl9fSk7T2JqZWN0LmtleXModW5pcXVlTmFtZXMpLmZvckVhY2gobmFtZT0+e2NvbnN0IHNpZ25hdHVyZXM9dW5pcXVlTmFtZXNbbmFtZV07aWYoc2lnbmF0dXJlcy5sZW5ndGg+MSl7cmV0dXJufWNvbnN0IHNpZ25hdHVyZT1zaWduYXR1cmVzWzBdO3RyeXtpZih0aGlzW25hbWVdPT1udWxsKXtkZWZpbmVSZWFkT25seSh0aGlzLG5hbWUsdGhpc1tzaWduYXR1cmVdKX19Y2F0Y2goZSl7fWlmKHRoaXMuZnVuY3Rpb25zW25hbWVdPT1udWxsKXtkZWZpbmVSZWFkT25seSh0aGlzLmZ1bmN0aW9ucyxuYW1lLHRoaXMuZnVuY3Rpb25zW3NpZ25hdHVyZV0pfWlmKHRoaXMuY2FsbFN0YXRpY1tuYW1lXT09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcy5jYWxsU3RhdGljLG5hbWUsdGhpcy5jYWxsU3RhdGljW3NpZ25hdHVyZV0pfWlmKHRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbltuYW1lXT09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcy5wb3B1bGF0ZVRyYW5zYWN0aW9uLG5hbWUsdGhpcy5wb3B1bGF0ZVRyYW5zYWN0aW9uW3NpZ25hdHVyZV0pfWlmKHRoaXMuZXN0aW1hdGVHYXNbbmFtZV09PW51bGwpe2RlZmluZVJlYWRPbmx5KHRoaXMuZXN0aW1hdGVHYXMsbmFtZSx0aGlzLmVzdGltYXRlR2FzW3NpZ25hdHVyZV0pfX0pfXN0YXRpYyBnZXRDb250cmFjdEFkZHJlc3ModHJhbnNhY3Rpb24pe3JldHVybiBnZXRDb250cmFjdEFkZHJlc3ModHJhbnNhY3Rpb24pfXN0YXRpYyBnZXRJbnRlcmZhY2UoY29udHJhY3RJbnRlcmZhY2Upe2lmKEludGVyZmFjZS5pc0ludGVyZmFjZShjb250cmFjdEludGVyZmFjZSkpe3JldHVybiBjb250cmFjdEludGVyZmFjZX1yZXR1cm4gbmV3IEludGVyZmFjZShjb250cmFjdEludGVyZmFjZSl9ZGVwbG95ZWQoKXtyZXR1cm4gdGhpcy5fZGVwbG95ZWQoKX1fZGVwbG95ZWQoYmxvY2tUYWcpe2lmKCF0aGlzLl9kZXBsb3llZFByb21pc2Upe2lmKHRoaXMuZGVwbG95VHJhbnNhY3Rpb24pe3RoaXMuX2RlcGxveWVkUHJvbWlzZT10aGlzLmRlcGxveVRyYW5zYWN0aW9uLndhaXQoKS50aGVuKCgpPT57cmV0dXJuIHRoaXN9KX1lbHNle3RoaXMuX2RlcGxveWVkUHJvbWlzZT10aGlzLnByb3ZpZGVyLmdldENvZGUodGhpcy5hZGRyZXNzLGJsb2NrVGFnKS50aGVuKGNvZGU9PntpZihjb2RlPT09XCIweFwiKXtsb2dnZXIkaS50aHJvd0Vycm9yKFwiY29udHJhY3Qgbm90IGRlcGxveWVkXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se2NvbnRyYWN0QWRkcmVzczp0aGlzLmFkZHJlc3Msb3BlcmF0aW9uOlwiZ2V0RGVwbG95ZWRcIn0pfXJldHVybiB0aGlzfSl9fXJldHVybiB0aGlzLl9kZXBsb3llZFByb21pc2V9ZmFsbGJhY2sob3ZlcnJpZGVzKXtpZighdGhpcy5zaWduZXIpe2xvZ2dlciRpLnRocm93RXJyb3IoXCJzZW5kaW5nIGEgdHJhbnNhY3Rpb25zIHJlcXVpcmUgYSBzaWduZXJcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwic2VuZFRyYW5zYWN0aW9uKGZhbGxiYWNrKVwifSl9Y29uc3QgdHg9c2hhbGxvd0NvcHkob3ZlcnJpZGVzfHx7fSk7W1wiZnJvbVwiLFwidG9cIl0uZm9yRWFjaChmdW5jdGlvbihrZXkpe2lmKHR4W2tleV09PW51bGwpe3JldHVybn1sb2dnZXIkaS50aHJvd0Vycm9yKFwiY2Fubm90IG92ZXJyaWRlIFwiK2tleSxMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOmtleX0pfSk7dHgudG89dGhpcy5yZXNvbHZlZEFkZHJlc3M7cmV0dXJuIHRoaXMuZGVwbG95ZWQoKS50aGVuKCgpPT57cmV0dXJuIHRoaXMuc2lnbmVyLnNlbmRUcmFuc2FjdGlvbih0eCl9KX1jb25uZWN0KHNpZ25lck9yUHJvdmlkZXIpe2lmKHR5cGVvZiBzaWduZXJPclByb3ZpZGVyPT09XCJzdHJpbmdcIil7c2lnbmVyT3JQcm92aWRlcj1uZXcgVm9pZFNpZ25lcihzaWduZXJPclByb3ZpZGVyLHRoaXMucHJvdmlkZXIpfWNvbnN0IGNvbnRyYWN0PW5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuYWRkcmVzcyx0aGlzLmludGVyZmFjZSxzaWduZXJPclByb3ZpZGVyKTtpZih0aGlzLmRlcGxveVRyYW5zYWN0aW9uKXtkZWZpbmVSZWFkT25seShjb250cmFjdCxcImRlcGxveVRyYW5zYWN0aW9uXCIsdGhpcy5kZXBsb3lUcmFuc2FjdGlvbil9cmV0dXJuIGNvbnRyYWN0fWF0dGFjaChhZGRyZXNzT3JOYW1lKXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYWRkcmVzc09yTmFtZSx0aGlzLmludGVyZmFjZSx0aGlzLnNpZ25lcnx8dGhpcy5wcm92aWRlcil9c3RhdGljIGlzSW5kZXhlZCh2YWx1ZSl7cmV0dXJuIEluZGV4ZWQuaXNJbmRleGVkKHZhbHVlKX1fbm9ybWFsaXplUnVubmluZ0V2ZW50KHJ1bm5pbmdFdmVudCl7aWYodGhpcy5fcnVubmluZ0V2ZW50c1tydW5uaW5nRXZlbnQudGFnXSl7cmV0dXJuIHRoaXMuX3J1bm5pbmdFdmVudHNbcnVubmluZ0V2ZW50LnRhZ119cmV0dXJuIHJ1bm5pbmdFdmVudH1fZ2V0UnVubmluZ0V2ZW50KGV2ZW50TmFtZSl7aWYodHlwZW9mIGV2ZW50TmFtZT09PVwic3RyaW5nXCIpe2lmKGV2ZW50TmFtZT09PVwiZXJyb3JcIil7cmV0dXJuIHRoaXMuX25vcm1hbGl6ZVJ1bm5pbmdFdmVudChuZXcgRXJyb3JSdW5uaW5nRXZlbnQpfWlmKGV2ZW50TmFtZT09PVwiZXZlbnRcIil7cmV0dXJuIHRoaXMuX25vcm1hbGl6ZVJ1bm5pbmdFdmVudChuZXcgUnVubmluZ0V2ZW50KFwiZXZlbnRcIixudWxsKSl9aWYoZXZlbnROYW1lPT09XCIqXCIpe3JldHVybiB0aGlzLl9ub3JtYWxpemVSdW5uaW5nRXZlbnQobmV3IFdpbGRjYXJkUnVubmluZ0V2ZW50KHRoaXMuYWRkcmVzcyx0aGlzLmludGVyZmFjZSkpfWNvbnN0IGZyYWdtZW50PXRoaXMuaW50ZXJmYWNlLmdldEV2ZW50KGV2ZW50TmFtZSk7cmV0dXJuIHRoaXMuX25vcm1hbGl6ZVJ1bm5pbmdFdmVudChuZXcgRnJhZ21lbnRSdW5uaW5nRXZlbnQodGhpcy5hZGRyZXNzLHRoaXMuaW50ZXJmYWNlLGZyYWdtZW50KSl9aWYoZXZlbnROYW1lLnRvcGljcyYmZXZlbnROYW1lLnRvcGljcy5sZW5ndGg+MCl7dHJ5e2NvbnN0IHRvcGljPWV2ZW50TmFtZS50b3BpY3NbMF07aWYodHlwZW9mIHRvcGljIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB0b3BpY1wiKX1jb25zdCBmcmFnbWVudD10aGlzLmludGVyZmFjZS5nZXRFdmVudCh0b3BpYyk7cmV0dXJuIHRoaXMuX25vcm1hbGl6ZVJ1bm5pbmdFdmVudChuZXcgRnJhZ21lbnRSdW5uaW5nRXZlbnQodGhpcy5hZGRyZXNzLHRoaXMuaW50ZXJmYWNlLGZyYWdtZW50LGV2ZW50TmFtZS50b3BpY3MpKX1jYXRjaChlcnJvcil7fWNvbnN0IGZpbHRlcj17YWRkcmVzczp0aGlzLmFkZHJlc3MsdG9waWNzOmV2ZW50TmFtZS50b3BpY3N9O3JldHVybiB0aGlzLl9ub3JtYWxpemVSdW5uaW5nRXZlbnQobmV3IFJ1bm5pbmdFdmVudChnZXRFdmVudFRhZyhmaWx0ZXIpLGZpbHRlcikpfXJldHVybiB0aGlzLl9ub3JtYWxpemVSdW5uaW5nRXZlbnQobmV3IFdpbGRjYXJkUnVubmluZ0V2ZW50KHRoaXMuYWRkcmVzcyx0aGlzLmludGVyZmFjZSkpfV9jaGVja1J1bm5pbmdFdmVudHMocnVubmluZ0V2ZW50KXtpZihydW5uaW5nRXZlbnQubGlzdGVuZXJDb3VudCgpPT09MCl7ZGVsZXRlIHRoaXMuX3J1bm5pbmdFdmVudHNbcnVubmluZ0V2ZW50LnRhZ107Y29uc3QgZW1pdD10aGlzLl93cmFwcGVkRW1pdHNbcnVubmluZ0V2ZW50LnRhZ107aWYoZW1pdCYmcnVubmluZ0V2ZW50LmZpbHRlcil7dGhpcy5wcm92aWRlci5vZmYocnVubmluZ0V2ZW50LmZpbHRlcixlbWl0KTtkZWxldGUgdGhpcy5fd3JhcHBlZEVtaXRzW3J1bm5pbmdFdmVudC50YWddfX19X3dyYXBFdmVudChydW5uaW5nRXZlbnQsbG9nLGxpc3RlbmVyKXtjb25zdCBldmVudD1kZWVwQ29weShsb2cpO2V2ZW50LnJlbW92ZUxpc3RlbmVyPSgoKT0+e2lmKCFsaXN0ZW5lcil7cmV0dXJufXJ1bm5pbmdFdmVudC5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7dGhpcy5fY2hlY2tSdW5uaW5nRXZlbnRzKHJ1bm5pbmdFdmVudCl9KTtldmVudC5nZXRCbG9jaz0oKCk9PntyZXR1cm4gdGhpcy5wcm92aWRlci5nZXRCbG9jayhsb2cuYmxvY2tIYXNoKX0pO2V2ZW50LmdldFRyYW5zYWN0aW9uPSgoKT0+e3JldHVybiB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uKGxvZy50cmFuc2FjdGlvbkhhc2gpfSk7ZXZlbnQuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0PSgoKT0+e3JldHVybiB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uUmVjZWlwdChsb2cudHJhbnNhY3Rpb25IYXNoKX0pO3J1bm5pbmdFdmVudC5wcmVwYXJlRXZlbnQoZXZlbnQpO3JldHVybiBldmVudH1fYWRkRXZlbnRMaXN0ZW5lcihydW5uaW5nRXZlbnQsbGlzdGVuZXIsb25jZSl7aWYoIXRoaXMucHJvdmlkZXIpe2xvZ2dlciRpLnRocm93RXJyb3IoXCJldmVudHMgcmVxdWlyZSBhIHByb3ZpZGVyIG9yIGEgc2lnbmVyIHdpdGggYSBwcm92aWRlclwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJvbmNlXCJ9KX1ydW5uaW5nRXZlbnQuYWRkTGlzdGVuZXIobGlzdGVuZXIsb25jZSk7dGhpcy5fcnVubmluZ0V2ZW50c1tydW5uaW5nRXZlbnQudGFnXT1ydW5uaW5nRXZlbnQ7aWYoIXRoaXMuX3dyYXBwZWRFbWl0c1tydW5uaW5nRXZlbnQudGFnXSl7Y29uc3Qgd3JhcHBlZEVtaXQ9bG9nPT57bGV0IGV2ZW50PXRoaXMuX3dyYXBFdmVudChydW5uaW5nRXZlbnQsbG9nLGxpc3RlbmVyKTtpZihldmVudC5kZWNvZGVFcnJvcj09bnVsbCl7dHJ5e2NvbnN0IGFyZ3M9cnVubmluZ0V2ZW50LmdldEVtaXQoZXZlbnQpO3RoaXMuZW1pdChydW5uaW5nRXZlbnQuZmlsdGVyLC4uLmFyZ3MpfWNhdGNoKGVycm9yKXtldmVudC5kZWNvZGVFcnJvcj1lcnJvci5lcnJvcn19aWYocnVubmluZ0V2ZW50LmZpbHRlciE9bnVsbCl7dGhpcy5lbWl0KFwiZXZlbnRcIixldmVudCl9aWYoZXZlbnQuZGVjb2RlRXJyb3IhPW51bGwpe3RoaXMuZW1pdChcImVycm9yXCIsZXZlbnQuZGVjb2RlRXJyb3IsZXZlbnQpfX07dGhpcy5fd3JhcHBlZEVtaXRzW3J1bm5pbmdFdmVudC50YWddPXdyYXBwZWRFbWl0O2lmKHJ1bm5pbmdFdmVudC5maWx0ZXIhPW51bGwpe3RoaXMucHJvdmlkZXIub24ocnVubmluZ0V2ZW50LmZpbHRlcix3cmFwcGVkRW1pdCl9fX1xdWVyeUZpbHRlcihldmVudCxmcm9tQmxvY2tPckJsb2NraGFzaCx0b0Jsb2NrKXtjb25zdCBydW5uaW5nRXZlbnQ9dGhpcy5fZ2V0UnVubmluZ0V2ZW50KGV2ZW50KTtjb25zdCBmaWx0ZXI9c2hhbGxvd0NvcHkocnVubmluZ0V2ZW50LmZpbHRlcik7aWYodHlwZW9mIGZyb21CbG9ja09yQmxvY2toYXNoPT09XCJzdHJpbmdcIiYmaXNIZXhTdHJpbmcoZnJvbUJsb2NrT3JCbG9ja2hhc2gsMzIpKXtpZih0b0Jsb2NrIT1udWxsKXtsb2dnZXIkaS50aHJvd0FyZ3VtZW50RXJyb3IoXCJjYW5ub3Qgc3BlY2lmeSB0b0Jsb2NrIHdpdGggYmxvY2toYXNoXCIsXCJ0b0Jsb2NrXCIsdG9CbG9jayl9ZmlsdGVyLmJsb2NrSGFzaD1mcm9tQmxvY2tPckJsb2NraGFzaH1lbHNle2ZpbHRlci5mcm9tQmxvY2s9ZnJvbUJsb2NrT3JCbG9ja2hhc2ghPW51bGw/ZnJvbUJsb2NrT3JCbG9ja2hhc2g6MDtmaWx0ZXIudG9CbG9jaz10b0Jsb2NrIT1udWxsP3RvQmxvY2s6XCJsYXRlc3RcIn1yZXR1cm4gdGhpcy5wcm92aWRlci5nZXRMb2dzKGZpbHRlcikudGhlbihsb2dzPT57cmV0dXJuIGxvZ3MubWFwKGxvZz0+dGhpcy5fd3JhcEV2ZW50KHJ1bm5pbmdFdmVudCxsb2csbnVsbCkpfSl9b24oZXZlbnQsbGlzdGVuZXIpe3RoaXMuX2FkZEV2ZW50TGlzdGVuZXIodGhpcy5fZ2V0UnVubmluZ0V2ZW50KGV2ZW50KSxsaXN0ZW5lcixmYWxzZSk7cmV0dXJuIHRoaXN9b25jZShldmVudCxsaXN0ZW5lcil7dGhpcy5fYWRkRXZlbnRMaXN0ZW5lcih0aGlzLl9nZXRSdW5uaW5nRXZlbnQoZXZlbnQpLGxpc3RlbmVyLHRydWUpO3JldHVybiB0aGlzfWVtaXQoZXZlbnROYW1lLC4uLmFyZ3Mpe2lmKCF0aGlzLnByb3ZpZGVyKXtyZXR1cm4gZmFsc2V9Y29uc3QgcnVubmluZ0V2ZW50PXRoaXMuX2dldFJ1bm5pbmdFdmVudChldmVudE5hbWUpO2NvbnN0IHJlc3VsdD1ydW5uaW5nRXZlbnQucnVuKGFyZ3MpPjA7dGhpcy5fY2hlY2tSdW5uaW5nRXZlbnRzKHJ1bm5pbmdFdmVudCk7cmV0dXJuIHJlc3VsdH1saXN0ZW5lckNvdW50KGV2ZW50TmFtZSl7aWYoIXRoaXMucHJvdmlkZXIpe3JldHVybiAwfWlmKGV2ZW50TmFtZT09bnVsbCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX3J1bm5pbmdFdmVudHMpLnJlZHVjZSgoYWNjdW0sa2V5KT0+e3JldHVybiBhY2N1bSt0aGlzLl9ydW5uaW5nRXZlbnRzW2tleV0ubGlzdGVuZXJDb3VudCgpfSwwKX1yZXR1cm4gdGhpcy5fZ2V0UnVubmluZ0V2ZW50KGV2ZW50TmFtZSkubGlzdGVuZXJDb3VudCgpfWxpc3RlbmVycyhldmVudE5hbWUpe2lmKCF0aGlzLnByb3ZpZGVyKXtyZXR1cm5bXX1pZihldmVudE5hbWU9PW51bGwpe2NvbnN0IHJlc3VsdD1bXTtmb3IobGV0IHRhZyBpbiB0aGlzLl9ydW5uaW5nRXZlbnRzKXt0aGlzLl9ydW5uaW5nRXZlbnRzW3RhZ10ubGlzdGVuZXJzKCkuZm9yRWFjaChsaXN0ZW5lcj0+e3Jlc3VsdC5wdXNoKGxpc3RlbmVyKX0pfXJldHVybiByZXN1bHR9cmV0dXJuIHRoaXMuX2dldFJ1bm5pbmdFdmVudChldmVudE5hbWUpLmxpc3RlbmVycygpfXJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWUpe2lmKCF0aGlzLnByb3ZpZGVyKXtyZXR1cm4gdGhpc31pZihldmVudE5hbWU9PW51bGwpe2Zvcihjb25zdCB0YWcgaW4gdGhpcy5fcnVubmluZ0V2ZW50cyl7Y29uc3QgcnVubmluZ0V2ZW50PXRoaXMuX3J1bm5pbmdFdmVudHNbdGFnXTtydW5uaW5nRXZlbnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7dGhpcy5fY2hlY2tSdW5uaW5nRXZlbnRzKHJ1bm5pbmdFdmVudCl9cmV0dXJuIHRoaXN9Y29uc3QgcnVubmluZ0V2ZW50PXRoaXMuX2dldFJ1bm5pbmdFdmVudChldmVudE5hbWUpO3J1bm5pbmdFdmVudC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTt0aGlzLl9jaGVja1J1bm5pbmdFdmVudHMocnVubmluZ0V2ZW50KTtyZXR1cm4gdGhpc31vZmYoZXZlbnROYW1lLGxpc3RlbmVyKXtpZighdGhpcy5wcm92aWRlcil7cmV0dXJuIHRoaXN9Y29uc3QgcnVubmluZ0V2ZW50PXRoaXMuX2dldFJ1bm5pbmdFdmVudChldmVudE5hbWUpO3J1bm5pbmdFdmVudC5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7dGhpcy5fY2hlY2tSdW5uaW5nRXZlbnRzKHJ1bm5pbmdFdmVudCk7cmV0dXJuIHRoaXN9cmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLGxpc3RlbmVyKXtyZXR1cm4gdGhpcy5vZmYoZXZlbnROYW1lLGxpc3RlbmVyKX19Y2xhc3MgQ29udHJhY3QgZXh0ZW5kcyBCYXNlQ29udHJhY3R7fWNsYXNzIENvbnRyYWN0RmFjdG9yeXtjb25zdHJ1Y3Rvcihjb250cmFjdEludGVyZmFjZSxieXRlY29kZSxzaWduZXIpe2xldCBieXRlY29kZUhleD1udWxsO2lmKHR5cGVvZiBieXRlY29kZT09PVwic3RyaW5nXCIpe2J5dGVjb2RlSGV4PWJ5dGVjb2RlfWVsc2UgaWYoaXNCeXRlcyhieXRlY29kZSkpe2J5dGVjb2RlSGV4PWhleGxpZnkoYnl0ZWNvZGUpfWVsc2UgaWYoYnl0ZWNvZGUmJnR5cGVvZiBieXRlY29kZS5vYmplY3Q9PT1cInN0cmluZ1wiKXtieXRlY29kZUhleD1ieXRlY29kZS5vYmplY3R9ZWxzZXtieXRlY29kZUhleD1cIiFcIn1pZihieXRlY29kZUhleC5zdWJzdHJpbmcoMCwyKSE9PVwiMHhcIil7Ynl0ZWNvZGVIZXg9XCIweFwiK2J5dGVjb2RlSGV4fWlmKCFpc0hleFN0cmluZyhieXRlY29kZUhleCl8fGJ5dGVjb2RlSGV4Lmxlbmd0aCUyKXtsb2dnZXIkaS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJ5dGVjb2RlXCIsXCJieXRlY29kZVwiLGJ5dGVjb2RlKX1pZihzaWduZXImJiFTaWduZXIuaXNTaWduZXIoc2lnbmVyKSl7bG9nZ2VyJGkudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBzaWduZXJcIixcInNpZ25lclwiLHNpZ25lcil9ZGVmaW5lUmVhZE9ubHkodGhpcyxcImJ5dGVjb2RlXCIsYnl0ZWNvZGVIZXgpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJpbnRlcmZhY2VcIixnZXRTdGF0aWMobmV3LnRhcmdldCxcImdldEludGVyZmFjZVwiKShjb250cmFjdEludGVyZmFjZSkpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJzaWduZXJcIixzaWduZXJ8fG51bGwpfWdldERlcGxveVRyYW5zYWN0aW9uKC4uLmFyZ3Mpe2xldCB0eD17fTtpZihhcmdzLmxlbmd0aD09PXRoaXMuaW50ZXJmYWNlLmRlcGxveS5pbnB1dHMubGVuZ3RoKzEmJnR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoLTFdPT09XCJvYmplY3RcIil7dHg9c2hhbGxvd0NvcHkoYXJncy5wb3AoKSk7Zm9yKGNvbnN0IGtleSBpbiB0eCl7aWYoIWFsbG93ZWRUcmFuc2FjdGlvbktleXMkMltrZXldKXt0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHRyYW5zYWN0aW9uIG92ZXJyaWRlIFwiK2tleSl9fX1bXCJkYXRhXCIsXCJmcm9tXCIsXCJ0b1wiXS5mb3JFYWNoKGtleT0+e2lmKHR4W2tleV09PW51bGwpe3JldHVybn1sb2dnZXIkaS50aHJvd0Vycm9yKFwiY2Fubm90IG92ZXJyaWRlIFwiK2tleSxMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOmtleX0pfSk7bG9nZ2VyJGkuY2hlY2tBcmd1bWVudENvdW50KGFyZ3MubGVuZ3RoLHRoaXMuaW50ZXJmYWNlLmRlcGxveS5pbnB1dHMubGVuZ3RoLFwiIGluIENvbnRyYWN0IGNvbnN0cnVjdG9yXCIpO3R4LmRhdGE9aGV4bGlmeShjb25jYXQoW3RoaXMuYnl0ZWNvZGUsdGhpcy5pbnRlcmZhY2UuZW5jb2RlRGVwbG95KGFyZ3MpXSkpO3JldHVybiB0eH1kZXBsb3koLi4uYXJncyl7cmV0dXJuIF9fYXdhaXRlciQzKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtsZXQgb3ZlcnJpZGVzPXt9O2lmKGFyZ3MubGVuZ3RoPT09dGhpcy5pbnRlcmZhY2UuZGVwbG95LmlucHV0cy5sZW5ndGgrMSl7b3ZlcnJpZGVzPWFyZ3MucG9wKCl9bG9nZ2VyJGkuY2hlY2tBcmd1bWVudENvdW50KGFyZ3MubGVuZ3RoLHRoaXMuaW50ZXJmYWNlLmRlcGxveS5pbnB1dHMubGVuZ3RoLFwiIGluIENvbnRyYWN0IGNvbnN0cnVjdG9yXCIpO2NvbnN0IHBhcmFtcz15aWVsZCByZXNvbHZlQWRkcmVzc2VzKHRoaXMuc2lnbmVyLGFyZ3MsdGhpcy5pbnRlcmZhY2UuZGVwbG95LmlucHV0cyk7cGFyYW1zLnB1c2gob3ZlcnJpZGVzKTtjb25zdCB1bnNpZ25lZFR4PXRoaXMuZ2V0RGVwbG95VHJhbnNhY3Rpb24oLi4ucGFyYW1zKTtjb25zdCB0eD15aWVsZCB0aGlzLnNpZ25lci5zZW5kVHJhbnNhY3Rpb24odW5zaWduZWRUeCk7Y29uc3QgYWRkcmVzcz1nZXRTdGF0aWModGhpcy5jb25zdHJ1Y3RvcixcImdldENvbnRyYWN0QWRkcmVzc1wiKSh0eCk7Y29uc3QgY29udHJhY3Q9Z2V0U3RhdGljKHRoaXMuY29uc3RydWN0b3IsXCJnZXRDb250cmFjdFwiKShhZGRyZXNzLHRoaXMuaW50ZXJmYWNlLHRoaXMuc2lnbmVyKTtkZWZpbmVSZWFkT25seShjb250cmFjdCxcImRlcGxveVRyYW5zYWN0aW9uXCIsdHgpO3JldHVybiBjb250cmFjdH0pfWF0dGFjaChhZGRyZXNzKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5nZXRDb250cmFjdChhZGRyZXNzLHRoaXMuaW50ZXJmYWNlLHRoaXMuc2lnbmVyKX1jb25uZWN0KHNpZ25lcil7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuaW50ZXJmYWNlLHRoaXMuYnl0ZWNvZGUsc2lnbmVyKX1zdGF0aWMgZnJvbVNvbGlkaXR5KGNvbXBpbGVyT3V0cHV0LHNpZ25lcil7aWYoY29tcGlsZXJPdXRwdXQ9PW51bGwpe2xvZ2dlciRpLnRocm93RXJyb3IoXCJtaXNzaW5nIGNvbXBpbGVyIG91dHB1dFwiLExvZ2dlci5lcnJvcnMuTUlTU0lOR19BUkdVTUVOVCx7YXJndW1lbnQ6XCJjb21waWxlck91dHB1dFwifSl9aWYodHlwZW9mIGNvbXBpbGVyT3V0cHV0PT09XCJzdHJpbmdcIil7Y29tcGlsZXJPdXRwdXQ9SlNPTi5wYXJzZShjb21waWxlck91dHB1dCl9Y29uc3QgYWJpPWNvbXBpbGVyT3V0cHV0LmFiaTtsZXQgYnl0ZWNvZGU9bnVsbDtpZihjb21waWxlck91dHB1dC5ieXRlY29kZSl7Ynl0ZWNvZGU9Y29tcGlsZXJPdXRwdXQuYnl0ZWNvZGV9ZWxzZSBpZihjb21waWxlck91dHB1dC5ldm0mJmNvbXBpbGVyT3V0cHV0LmV2bS5ieXRlY29kZSl7Ynl0ZWNvZGU9Y29tcGlsZXJPdXRwdXQuZXZtLmJ5dGVjb2RlfXJldHVybiBuZXcgdGhpcyhhYmksYnl0ZWNvZGUsc2lnbmVyKX1zdGF0aWMgZ2V0SW50ZXJmYWNlKGNvbnRyYWN0SW50ZXJmYWNlKXtyZXR1cm4gQ29udHJhY3QuZ2V0SW50ZXJmYWNlKGNvbnRyYWN0SW50ZXJmYWNlKX1zdGF0aWMgZ2V0Q29udHJhY3RBZGRyZXNzKHR4KXtyZXR1cm4gZ2V0Q29udHJhY3RBZGRyZXNzKHR4KX1zdGF0aWMgZ2V0Q29udHJhY3QoYWRkcmVzcyxjb250cmFjdEludGVyZmFjZSxzaWduZXIpe3JldHVybiBuZXcgQ29udHJhY3QoYWRkcmVzcyxjb250cmFjdEludGVyZmFjZSxzaWduZXIpfX1jbGFzcyBCYXNlWHtjb25zdHJ1Y3RvcihhbHBoYWJldCl7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFscGhhYmV0XCIsYWxwaGFiZXQpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJiYXNlXCIsYWxwaGFiZXQubGVuZ3RoKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2FscGhhYmV0TWFwXCIse30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfbGVhZGVyXCIsYWxwaGFiZXQuY2hhckF0KDApKTtmb3IobGV0IGk9MDtpPGFscGhhYmV0Lmxlbmd0aDtpKyspe3RoaXMuX2FscGhhYmV0TWFwW2FscGhhYmV0LmNoYXJBdChpKV09aX19ZW5jb2RlKHZhbHVlKXtsZXQgc291cmNlPWFycmF5aWZ5KHZhbHVlKTtpZihzb3VyY2UubGVuZ3RoPT09MCl7cmV0dXJuXCJcIn1sZXQgZGlnaXRzPVswXTtmb3IobGV0IGk9MDtpPHNvdXJjZS5sZW5ndGg7KytpKXtsZXQgY2Fycnk9c291cmNlW2ldO2ZvcihsZXQgaj0wO2o8ZGlnaXRzLmxlbmd0aDsrK2ope2NhcnJ5Kz1kaWdpdHNbal08PDg7ZGlnaXRzW2pdPWNhcnJ5JXRoaXMuYmFzZTtjYXJyeT1jYXJyeS90aGlzLmJhc2V8MH13aGlsZShjYXJyeT4wKXtkaWdpdHMucHVzaChjYXJyeSV0aGlzLmJhc2UpO2NhcnJ5PWNhcnJ5L3RoaXMuYmFzZXwwfX1sZXQgc3RyaW5nPVwiXCI7Zm9yKGxldCBrPTA7c291cmNlW2tdPT09MCYmazxzb3VyY2UubGVuZ3RoLTE7KytrKXtzdHJpbmcrPXRoaXMuX2xlYWRlcn1mb3IobGV0IHE9ZGlnaXRzLmxlbmd0aC0xO3E+PTA7LS1xKXtzdHJpbmcrPXRoaXMuYWxwaGFiZXRbZGlnaXRzW3FdXX1yZXR1cm4gc3RyaW5nfWRlY29kZSh2YWx1ZSl7aWYodHlwZW9mIHZhbHVlIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFN0cmluZ1wiKX1sZXQgYnl0ZXM9W107aWYodmFsdWUubGVuZ3RoPT09MCl7cmV0dXJuIG5ldyBVaW50OEFycmF5KGJ5dGVzKX1ieXRlcy5wdXNoKDApO2ZvcihsZXQgaT0wO2k8dmFsdWUubGVuZ3RoO2krKyl7bGV0IGJ5dGU9dGhpcy5fYWxwaGFiZXRNYXBbdmFsdWVbaV1dO2lmKGJ5dGU9PT11bmRlZmluZWQpe3Rocm93IG5ldyBFcnJvcihcIk5vbi1iYXNlXCIrdGhpcy5iYXNlK1wiIGNoYXJhY3RlclwiKX1sZXQgY2Fycnk9Ynl0ZTtmb3IobGV0IGo9MDtqPGJ5dGVzLmxlbmd0aDsrK2ope2NhcnJ5Kz1ieXRlc1tqXSp0aGlzLmJhc2U7Ynl0ZXNbal09Y2FycnkmMjU1O2NhcnJ5Pj49OH13aGlsZShjYXJyeT4wKXtieXRlcy5wdXNoKGNhcnJ5JjI1NSk7Y2Fycnk+Pj04fX1mb3IobGV0IGs9MDt2YWx1ZVtrXT09PXRoaXMuX2xlYWRlciYmazx2YWx1ZS5sZW5ndGgtMTsrK2spe2J5dGVzLnB1c2goMCl9cmV0dXJuIGFycmF5aWZ5KG5ldyBVaW50OEFycmF5KGJ5dGVzLnJldmVyc2UoKSkpfX1jb25zdCBCYXNlMzI9bmV3IEJhc2VYKFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoyMzQ1NjdcIik7Y29uc3QgQmFzZTU4PW5ldyBCYXNlWChcIjEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpcIik7dmFyIFN1cHBvcnRlZEFsZ29yaXRobTsoZnVuY3Rpb24oU3VwcG9ydGVkQWxnb3JpdGhtKXtTdXBwb3J0ZWRBbGdvcml0aG1bXCJzaGEyNTZcIl09XCJzaGEyNTZcIjtTdXBwb3J0ZWRBbGdvcml0aG1bXCJzaGE1MTJcIl09XCJzaGE1MTJcIn0pKFN1cHBvcnRlZEFsZ29yaXRobXx8KFN1cHBvcnRlZEFsZ29yaXRobT17fSkpO2NvbnN0IHZlcnNpb24kZT1cInNoYTIvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkaj1uZXcgTG9nZ2VyKHZlcnNpb24kZSk7ZnVuY3Rpb24gcmlwZW1kMTYwJDEoZGF0YSl7cmV0dXJuXCIweFwiK2hhc2hfMS5yaXBlbWQxNjAoKS51cGRhdGUoYXJyYXlpZnkoZGF0YSkpLmRpZ2VzdChcImhleFwiKX1mdW5jdGlvbiBzaGEyNTYkMShkYXRhKXtyZXR1cm5cIjB4XCIraGFzaF8xLnNoYTI1NigpLnVwZGF0ZShhcnJheWlmeShkYXRhKSkuZGlnZXN0KFwiaGV4XCIpfWZ1bmN0aW9uIHNoYTUxMiQxKGRhdGEpe3JldHVyblwiMHhcIitoYXNoXzEuc2hhNTEyKCkudXBkYXRlKGFycmF5aWZ5KGRhdGEpKS5kaWdlc3QoXCJoZXhcIil9ZnVuY3Rpb24gY29tcHV0ZUhtYWMoYWxnb3JpdGhtLGtleSxkYXRhKXtpZighU3VwcG9ydGVkQWxnb3JpdGhtW2FsZ29yaXRobV0pe2xvZ2dlciRqLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCBhbGdvcml0aG0gXCIrYWxnb3JpdGhtLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJobWFjXCIsYWxnb3JpdGhtOmFsZ29yaXRobX0pfXJldHVyblwiMHhcIitoYXNoXzEuaG1hYyhoYXNoXzFbYWxnb3JpdGhtXSxhcnJheWlmeShrZXkpKS51cGRhdGUoYXJyYXlpZnkoZGF0YSkpLmRpZ2VzdChcImhleFwiKX1cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBwYmtkZjIocGFzc3dvcmQsc2FsdCxpdGVyYXRpb25zLGtleWxlbixoYXNoQWxnb3JpdGhtKXtwYXNzd29yZD1hcnJheWlmeShwYXNzd29yZCk7c2FsdD1hcnJheWlmeShzYWx0KTtsZXQgaExlbjtsZXQgbD0xO2NvbnN0IERLPW5ldyBVaW50OEFycmF5KGtleWxlbik7Y29uc3QgYmxvY2sxPW5ldyBVaW50OEFycmF5KHNhbHQubGVuZ3RoKzQpO2Jsb2NrMS5zZXQoc2FsdCk7bGV0IHI7bGV0IFQ7Zm9yKGxldCBpPTE7aTw9bDtpKyspe2Jsb2NrMVtzYWx0Lmxlbmd0aF09aT4+MjQmMjU1O2Jsb2NrMVtzYWx0Lmxlbmd0aCsxXT1pPj4xNiYyNTU7YmxvY2sxW3NhbHQubGVuZ3RoKzJdPWk+PjgmMjU1O2Jsb2NrMVtzYWx0Lmxlbmd0aCszXT1pJjI1NTtsZXQgVT1hcnJheWlmeShjb21wdXRlSG1hYyhoYXNoQWxnb3JpdGhtLHBhc3N3b3JkLGJsb2NrMSkpO2lmKCFoTGVuKXtoTGVuPVUubGVuZ3RoO1Q9bmV3IFVpbnQ4QXJyYXkoaExlbik7bD1NYXRoLmNlaWwoa2V5bGVuL2hMZW4pO3I9a2V5bGVuLShsLTEpKmhMZW59VC5zZXQoVSk7Zm9yKGxldCBqPTE7ajxpdGVyYXRpb25zO2orKyl7VT1hcnJheWlmeShjb21wdXRlSG1hYyhoYXNoQWxnb3JpdGhtLHBhc3N3b3JkLFUpKTtmb3IobGV0IGs9MDtrPGhMZW47aysrKVRba11ePVVba119Y29uc3QgZGVzdFBvcz0oaS0xKSpoTGVuO2NvbnN0IGxlbj1pPT09bD9yOmhMZW47REsuc2V0KGFycmF5aWZ5KFQpLnNsaWNlKDAsbGVuKSxkZXN0UG9zKX1yZXR1cm4gaGV4bGlmeShESyl9Y29uc3QgdmVyc2lvbiRmPVwid29yZGxpc3RzLzUuMS4wXCI7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgZXhwb3J0V29yZGxpc3Q9ZmFsc2U7Y29uc3QgbG9nZ2VyJGs9bmV3IExvZ2dlcih2ZXJzaW9uJGYpO2NsYXNzIFdvcmRsaXN0e2NvbnN0cnVjdG9yKGxvY2FsZSl7bG9nZ2VyJGsuY2hlY2tBYnN0cmFjdChuZXcudGFyZ2V0LFdvcmRsaXN0KTtkZWZpbmVSZWFkT25seSh0aGlzLFwibG9jYWxlXCIsbG9jYWxlKX1zcGxpdChtbmVtb25pYyl7cmV0dXJuIG1uZW1vbmljLnRvTG93ZXJDYXNlKCkuc3BsaXQoLyArL2cpfWpvaW4od29yZHMpe3JldHVybiB3b3Jkcy5qb2luKFwiIFwiKX1zdGF0aWMgY2hlY2sod29yZGxpc3Qpe2NvbnN0IHdvcmRzPVtdO2ZvcihsZXQgaT0wO2k8MjA0ODtpKyspe2NvbnN0IHdvcmQ9d29yZGxpc3QuZ2V0V29yZChpKTtpZihpIT09d29yZGxpc3QuZ2V0V29yZEluZGV4KHdvcmQpKXtyZXR1cm5cIjB4XCJ9d29yZHMucHVzaCh3b3JkKX1yZXR1cm4gaWQod29yZHMuam9pbihcIlxcblwiKStcIlxcblwiKX1zdGF0aWMgcmVnaXN0ZXIobGFuZyxuYW1lKXtpZighbmFtZSl7bmFtZT1sYW5nLmxvY2FsZX1pZihleHBvcnRXb3JkbGlzdCl7dHJ5e2NvbnN0IGFueUdsb2JhbD13aW5kb3c7aWYoYW55R2xvYmFsLl9ldGhlcnMmJmFueUdsb2JhbC5fZXRoZXJzLndvcmRsaXN0cyl7aWYoIWFueUdsb2JhbC5fZXRoZXJzLndvcmRsaXN0c1tuYW1lXSl7ZGVmaW5lUmVhZE9ubHkoYW55R2xvYmFsLl9ldGhlcnMud29yZGxpc3RzLG5hbWUsbGFuZyl9fX1jYXRjaChlcnJvcil7fX19fVwidXNlIHN0cmljdFwiO2NvbnN0IHdvcmRzPVwiQWJkaWthY2VBYmVjZWRhQWRyZXNhQWdyZXNlQWtjZUFrdG92a2FBbGVqQWxrb2hvbEFtcHV0YWNlQW5hbmFzQW5kdWxrYUFuZWtkb3RhQW5rZXRhQW50aWthQW51bG92YXRBcmNoYUFyb2dhbmNlQXNmYWx0QXNpc3RlbnRBc3BpcmFjZUFzdG1hQXN0cm9ub21BdGxhc0F0bGV0aWthQXRvbEF1dG9idXNBenlsQmFia2FCYWNob3JCYWNpbEJhY3Vsa2FCYWRhdGVsQmFnZXRhQmFnckJhaG5vQmFrdGVyaWVCYWxhZGFCYWxldGthQmFsa29uQmFsb25la0JhbHZhbkJhbHphQmFtYnVzQmFua29tYXRCYXJiYXJCYXJldEJhcm1hbkJhcm9rb0JhcnZhQmF0ZXJrYUJhdG9oQmF2bG5hQmF6YWxrYUJhemlsaWthQmF6dWthQmVkbmFCZXJhbkJlc2VkYUJlc3RpZUJldG9uQmV6aW5rYUJlem1vY0JlenRha0JpY3lrbEJpZGxvQmlmdGVrQmlraW55QmlsYW5jZUJpb2dyYWZCaW9sb2dCaXR2YUJpem9uQmxhaG9ieXRCbGF0b3VjaEJsZWNoYUJsZWR1bGVCbGVza0JsaWthdEJsaXpuYUJsb2tvdmF0QmxvdWRpdEJsdWRCb2Jla0JvYnJCb2RsaW5hQm9kbm91dEJvaGF0b3N0Qm9qa290Qm9qb3ZhdEJva29yeXNCb2xlc3RCb3JlY0Jvcm92aWNlQm90YUJvdWJlbEJvdWNoYXRCb3VkYUJvdWxlQm91cmF0Qm94ZXJCcmFkYXZrYUJyYW1ib3JhQnJhbmthQnJhdHJCcmVwdGFCcmlrZXRhQnJrb0JybG9oQnJvbnpCcm9za2V2QnJ1bmV0a2FCcnVzaW5rYUJyemRhQnJ6eUJ1YmxpbmFCdWJub3ZhdEJ1Y2h0YUJ1ZGl0ZWxCdWRrYUJ1ZG92YUJ1ZmV0QnVqYXJvc3RCdWt2aWNlQnVsZG9rQnVsdmFCdW5kYUJ1bmtyQnVyemFCdXRpa0J1dm9sQnV6b2xhQnlkbGV0QnlsaW5hQnl0b3ZrYUJ6dWtvdENhcGFydENhcmV2bmFDZWRyQ2VkdWxlQ2VqY2hDZWpuQ2VsYUNlbGVyQ2Vsa2VtQ2VsbmljZUNlbmluYUNlbm5vc3RDZW5vdmthQ2VudHJ1bUNlbnpvckNlc3RvcGlzQ2V0a2FDaGFsdXBhQ2hhcGFkbG9DaGFyaXRhQ2hhdGFDaGVjaHRhdENoZW1pZUNoaWNob3RDaGlydXJnQ2hsYWRDaGxlYmFDaGx1Yml0Q2htZWxDaG11cmFDaG9ib3RDaG9jaG9sQ2hvZGJhQ2hvbGVyYUNob21vdXRDaG9waXRDaG9yb2JhQ2hvdkNocmFwb3RDaHJsaXRDaHJ0Q2hydXBDaHRpdm9zdENodWRpbmFDaHV0bmF0Q2h2YXRDaHZpbGthQ2h2b3N0Q2h5YmFDaHlzdGF0Q2h5dGl0Q2lidWxlQ2lnYXJldGFDaWhlbG5hQ2lobGFDaW5rb3RDaXJrdXNDaXN0ZXJuYUNpdGFjZUNpdHJ1c0NpemluZWNDaXpvc3RDbG9uYUNva29saXZDb3V2YXRDdGl0ZWxDdG5vc3RDdWRub3N0Q3VrZXRhQ3VrckN1cG90Q3Zha25vdXRDdmFsQ3Zpa0N2cmtvdEN5a2xpc3RhRGFsZWtvRGFyZWJhRGF0ZWxEYXR1bURjZXJhRGViYXRhRGVjaG92a2FEZWNpYmVsRGVmaWNpdERlZmxhY2VEZWtsRGVrcmV0RGVtb2tyYXREZXByZXNlRGVyYnlEZXNrYURldGVrdGl2RGlrb2JyYXpEaWt0b3ZhdERpb2RhRGlwbG9tRGlza0Rpc3BsZWpEaXZhZGxvRGl2b2NoRGxhaGFEbG91aG9EbHVob3Bpc0RuZXNEb2Jyb0RvYnl0ZWtEb2NlbnREb2NodXRpdERvZG5lc0RvaGxlZERvaG9kYURvaHJhRG9qZW1Eb2puaWNlRG9rbGFkRG9rb2xhRG9rdG9yRG9rdW1lbnREb2xhckRvbGV2YURvbGluYURvbWFEb21pbmFudERvbWx1dml0RG9tb3ZEb251dGl0RG9wYWREb3Bpc0RvcGxuaXREb3Bvc3VkRG9wcm92b2REb3B1c3RpdERvcmF6aXREb3Jvc3REb3J0RG9zYWhEb3Nsb3ZEb3N0YXRla0Rvc3VkRG9zeXRhRG90YXpEb3Rla0RvdGtub3V0RG91ZmF0RG91dG5hdERvdm96Y2VEb3phZHVEb3puYXREb3pvcmNlRHJhaG90YURyYWtEcmFtYXRpa0RyYXZlY0RyYXplRHJkb2xEcm9ibm9zdERyb2dlcmllRHJvemREcnNub3N0RHJ0aXREcnpvc3REdWJlbkR1Y2hvdm5vRHVkZWtEdWhhRHVob3ZrYUR1c2l0RHVzbm9EdXRvc3REdm9qaWNlRHZvcmVjRHluYW1pdEVrb2xvZ0Vrb25vbWllRWxla3Ryb25FbGlwc2FFbWFpbEVtaXNlRW1vY2VFbXBhdGllRXBpem9kYUVwb2NoYUVwb3BlakVwb3NFc2VqRXNlbmNlRXNrb3J0YUVza3ltb0V0aWtldGFFdWZvcmllRXZvbHVjZUV4ZWt1Y2VFeGt1cnplRXhwZWRpY2VFeHBsb3plRXhwb3J0RXh0cmFrdEZhY2thRmFqZmthRmFrdWx0YUZhbmF0aWtGYW50YXppZUZhcm1hY2llRmF2b3JpdEZhem9sZUZlZGVyYWNlRmVqZXRvbkZlbmthRmlhbGthRmlndXJhbnRGaWxvem9mRmlsdHJGaW5hbmNlRmludGFGaXhhY2VGam9yZEZsYW5lbEZsaXJ0RmxvdGlsYUZvbmRGb3Nmb3JGb3RiYWxGb3RrYUZvdG9uRnJha2NlRnJlc2thRnJvbnRhRnVrYXJGdW5rY2VGeXppa2FHYWxlamVHYXJhbnRHZW5ldGlrYUdlb2xvZ0dpbG90aW5hR2xhenVyYUdsZWp0R29sZW1Hb2xmaXN0YUdvdGlrYUdyYWZHcmFtb2ZvbkdyYW51bGVHcmVwR3JpbEdyb2dHcm90ZXNrYUd1bWFIYWRpY2VIYWRySGFsYUhhbGVua2FIYW5iYUhhbm9waXNIYXJmYUhhcnB1bmFIYXZyYW5IZWJrb3N0SGVqa2FsSGVqbm9IZWp0bWFuSGVrdGFySGVsbWFIZW1hdG9tSGVyZWNIZXJuYUhlc2xvSGV6a3lIaXN0b3Jpa0hsYWRvdmthSGxhc2l2a3lIbGF2YUhsZWRhdEhsZW5IbG9kYXZlY0hsb2hIbG91cG9zdEhsdGF0SGx1YmluYUhsdWNob3RhSG1hdEhtb3RhSG15ekhuaXNIbm9qaXZvSG5vdXRIb2JsaW5hSG9ib2pIb2NoSG9kaW55SG9kbGF0SG9kbm90YUhvZG92YXRIb2pub3N0SG9rZWpIb2xpbmthSG9sa2FIb2x1YkhvbW9sZUhvbml0YmFIb25vcmFjZUhvcmFsSG9yZGFIb3Jpem9udEhvcmtvSG9ybGl2ZWNIb3Jtb25Ib3JuaW5hSG9yb3Nrb3BIb3JzdHZvSG9zcG9kYUhvc3RpbmFIb3Rvdm9zdEhvdWJhSG91ZkhvdXBhdEhvdXNrYUhvdm9ySHJhZGJhSHJhbmljZUhyYXZvc3RIcmF6ZGFIcmJvbGVrSHJkaW5hSHJkbG9IcmRvc3RIcm5la0hyb2JrYUhyb21hZGFIcm90SHJvdWRhSHJvemVuSHJzdGthSHJ1Ym9zdEhyeXphdEh1YmVub3N0SHVibm91dEh1ZGJhSHVrb3RIdW1ySHVzaXRhSHVzdG90YUh2b3pkSHlibm9zdEh5ZHJhbnRIeWdpZW5hSHltbmFIeXN0ZXJpa0lkeWxrYUlobmVkSWtvbmFJbHV6ZUltdW5pdGFJbmZla2NlSW5mbGFjZUlua2Fzb0lub3ZhY2VJbnNwZWtjZUludGVybmV0SW52YWxpZGFJbnZlc3RvckluemVyY2VJcm9uaWVKYWJsa29KYWNodGFKYWhvZGFKYWttaWxlSmFrb3N0SmFsb3ZlY0phbnRhckphcm1hcmtKYXJvSmFzYW5KYXNub0phdGthSmF2b3JKYXp5a0plZGluZWNKZWRsZUplZG5hdGVsSmVobGFuSmVrb3RKZWxlbkplbGl0b0plbW5vc3RKZW5vbUplcGljZUplc2V0ZXJKZXZpdEplemRlY0plemVyb0ppbmFrSmluZHlKaW5vY2hKaXNrcmFKaXN0b3RhSml0cm5pY2VKaXp2YUptZW5vdmF0Sm9ndXJ0SnVydGFLYWJhcmV0S2FiZWxLYWJpbmV0S2FjaG5hS2FkZXRLYWRpZGxvS2FoYW5LYWpha0thanV0YUtha2FvS2FrdHVzS2FsYW1pdGFLYWxob3R5S2FsaWJyS2Fsbm9zdEthbWVyYUthbWtvbGl2S2FtbmFLYW5pYmFsS2Fub2VLYW50b3JLYXBhbGluYUthcGVsYUthcGl0b2xhS2Fwa2FLYXBsZUthcG90YUthcHJLYXB1c3RhS2FweWJhcmFLYXJhbWVsS2Fyb3RrYUthcnRvbkthc2FLYXRhbG9nS2F0ZWRyYUthdWNlS2F1emFLYXZhbGVjS2F6YWprYUthemV0YUtheml2b3N0S2Rla29saXZLZGVzaUtlZGx1YmVuS2VtcEtlcmFtaWthS2lub0tsYWNla0tsYWRpdm9LbGFtS2xhcG90S2xhc2lrYUtsYXVuS2xlY0tsZW5iYUtsZXBhdEtsZXNub3V0S2xpZEtsaW1hS2xpc25hS2xvYm91a0tsb2thbktsb3BhS2xvdWJLbHVib3ZuYUtsdXNhdEtsdXprb3N0S21lbkttaXRhdEttb3RyS25paGFLbm90S29hbGljZUtvYmVyZWNLb2JrYUtvYmxpaGFLb2J5bGFLb2NvdXJLb2hvdXRLb2plbmVjS29rb3NLb2t0ZWpsS29sYXBzS29sZWRhS29saXplS29sb0tvbWFuZG9Lb21ldGFLb21pa0tvbW5hdGFLb21vcmFLb21wYXNLb211bml0YUtvbmF0S29uY2VwdEtvbmRpY2VLb25lY0tvbmZlc2VLb25ncmVzS29uaW5hS29ua3Vyc0tvbnRha3RLb256ZXJ2YUtvcGFuZWNLb3BpZUtvcG5vdXRLb3Byb3ZrYUtvcmJlbEtvcmVrdG9yS29ybWlkbG9Lb3JvcHRldktvcnB1c0tvcnVuYUtvcnl0b0tvcnpldEtvc2F0ZWNLb3N0a2FLb3RlbEtvdGxldGFLb3RvdWxLb3VrYXRLb3VwZWxuYUtvdXNla0tvdXpsb0tvdmJvaktvemFLb3pvcm9oS3JhYmljZUtyYWNoS3JhamluYUtyYWxvdmF0S3Jhc29waXNLcmF2YXRhS3JlZGl0S3JlamNhcktyZXNiYUtyZXZldGFLcmlrZXRLcml0aWtLcml6ZUtya2F2ZWNLcm1lbGVjS3JtaXZvS3JvY2FuS3Jva0tyb25pa2FLcm9waXRLcm91cGFLcm92a2FLcnRla0tydWhhZGxvS3J1cGljZUtydXRvc3RLcnZpbmthS3J5Y2hsZUtyeXB0YUtyeXN0YWxLcnl0S3VkbGFua2FLdWZyS3Vqbm9zdEt1a2xhS3VsYWpkYUt1bGljaEt1bGthS3Vsb21ldEt1bHR1cmFLdW5hS3Vwb2RpdnVLdXJ0S3Vyem9yS3V0aWxLdmFsaXRhS3Zhc2lua2FLdmVzdG9yS3lub2xvZ0t5c2VsaW5hS3l0YXJhS3l0aWNlS3l0a2FLeXRvdmVjS3l2YWRsb0xhYnJhZG9yTGFjaHRhbkxhZG5vc3RMYWlrTGFrb21lY0xhbWVsYUxhbXBhTGFub3ZrYUxhc2ljZUxhc29MYXN0dXJhTGF0aW5rYUxhdmluYUxlYmthTGVja2R5TGVkZW5MZWRuaWNlTGVkb3ZrYUxlZHZpbmFMZWdlbmRhTGVnaWVMZWdyYWNlTGVoY2VMZWhrb3N0TGVobm91dExla3R2YXJMZW5vY2hvZExlbnRpbGthTGVwZW5rYUxlcGlkbG9MZXRhZGxvTGV0ZWNMZXRtb0xldG9rcnVoTGV2aGFydExldml0YWNlTGV2b2Jva0xpYnJhTGljaG90a2FMaWRvamVkTGlkc2tvc3RMaWhvdmluYUxpamF2ZWNMaWxla0xpbWV0a2FMaW5pZUxpbmthTGlub2xldW1MaXN0b3BhZExpdGluYUxpdG92YXRMb2Jpc3RhTG9kaXZvZExvZ2lrYUxvZ29wZWRMb2thbGl0YUxva2V0TG9tY292YXRMb3BhdGFMb3B1Y2hMb3JkTG9zb3NMb3RyTG91ZGFsTG91aExvdWthTG91c2thdExvdmVjTHN0aXZvc3RMdWNlcm5hTHVjaWZlckx1bXBMdXNrTHVzdHJhY2VMdmljZUx5cmFMeXJpa2FMeXNpbmFNYWRhbU1hZGxvTWFnaXN0ck1haGFnb25NYWpldGVrTWFqaXRlbE1ham9yaXRhTWFrYWtNYWtvdmljZU1ha3JlbGFNYWxiYU1hbGluYU1hbG92YXRNYWx2aWNlTWFtaW5rYU1hbmRsZU1hbmtvTWFybm9zdE1hc2Frck1hc2tvdE1hc29wdXN0TWF0aWNlTWF0cmlrYU1hdHVyaXRhTWF6YW5lY01heml2b01hemxpdE1henVya2FNZGxvYmFNZWNoYW5pa01lZGl0YWNlTWVkb3ZpbmFNZWxhc2FNZWxvdW5NZW50b2xrYU1ldGxhTWV0b2RhTWV0ck1lemVyYU1pZ3JhY2VNaWhub3V0TWlodWxlTWlraW5hTWlrcm9mb25NaWxlbmVjTWlsaW1ldHJNaWxvc3RNaW1pa2FNaW5jb3ZuYU1pbmliYXJNaW5vbWV0TWludWxvc3RNaXNrYU1pc3RyTWl4b3ZhdE1sYWRvc3RNbGhhTWxob3ZpbmFNbG9rTWxzYXRNbHV2aXRNbmljaE1ub2hlbU1vYmlsTW9jbm9zdE1vZGVsa2FNb2RsaXRiYU1vaHlsYU1va3JvTW9sZWt1bGFNb21lbnRrYU1vbmFyY2hhTW9ub2tsTW9uc3RydW1Nb250b3ZhdE1vbnp1bk1vc2F6TW9za3l0TW9zdE1vdGl2YWNlTW90b3JrYU1vdHlrYU1vdWNoYU1vdWRyb3N0TW96YWlrYU1vemVrTW96b2xNcmFtb3JNcmF2ZW5lY01ya2V2TXJ0dm9sYU1yemV0TXJ6dXRvc3RNc3RpdGVsTXVkcmNNdWZsb25NdWxhdE11bWllTXVuaWNlTXVzZXRNdXRhY2VNdXpldW1NdXppa2FudE15c2xpdmVjTXpkYU5hYm91cmF0TmFjaHl0YXROYWRhY2VOYWRieXRla05hZGhvek5hZG9icm9OYWRwaXNOYWhsYXNOYWhuYXROYWhvZGlsZU5haHJhZGl0TmFpdml0YU5hamVkbm91TmFqaXN0b05ham1vdXROYWtsb25pdE5ha29uZWNOYWtybWl0TmFsZXZvTmFtYXphdE5hbWx1dml0TmFub21ldHJOYW9rb05hb3Bha05hb3N0cm9OYXBhZGF0TmFwZXZub05hcGxuaXROYXBub3V0TmFwb3NsZWROYXByb3N0b05hcm9kaXROYXJ1YnlOYXJ5Y2hsb05hc2FkaXROYXNla2F0TmFzbGVwb05hc3RhdE5hdG9saWtOYXZlbmVrTmF2cmNoTmF2emRvcnlOYXp2YXROZWJlTmVjaGF0TmVja3lOZWRhbGVrb05lZGJhdE5lZHVoTmVnYWNlTmVoZXROZWhvZGFOZWplbk5lanBydmVOZWtsaWROZWxpYm9zdE5lbWlsb3N0TmVtb2NOZW9jaG90YU5lb25rYU5lcG9rb2pOZXJvc3ROZXJ2TmVzbXlzbE5lc291bGFkTmV0dm9yTmV1cm9uTmV2aW5hTmV6dnlrbGVOaWNvdGFOaWpha05pa2FtTmlrZHlOaWtsTmlrdGVyYWtOaXRyb05vY2xlaE5vaGF2aWNlTm9taW5hY2VOb3JhTm9yZWtOb3NpdGVsTm9zbm9zdE5vdXplTm92aW55Tm92b3RhTm96ZHJhTnVkYU51ZGxlTnVnZXROdXRpdE51dG5vc3ROdXRyaWVOeW1mYU9iYWxPYmFydml0T2JhdmFPYmRpdk9iZWNPYmVobmF0T2Jlam1vdXRPYmV6aXRhT2JoYWpvYmFPYmlsbmljZU9iamFzbml0T2JqZWt0T2JrbG9waXRPYmxhc3RPYmxla09ibGliYU9ibG9oYU9ibHVkYU9ibm9zT2JvaGF0aXRPYm9qZWtPYm91dE9icmF6ZWNPYnJuYU9icnViYU9icnlzT2JzYWhPYnNsdWhhT2JzdGFyYXRPYnV2T2J2YXpPYnZpbml0T2J2b2RPYnZ5a2xlT2J5dmF0ZWxPYnpvck9jYXNPY2VsT2Nlbml0T2NobGFkaXRPY2hvdGFPY2hyYW5hT2NpdG5vdXRPZGJvak9kYnl0T2RjaG9kT2RjaXppdE9kZWJyYXRPZGVzbGF0T2RldnpkYXRPZGV6dmFPZGhhZGNlT2Rob2RpdE9kamV0T2RqaW51ZE9ka2F6T2Rrb3VwaXRPZGxpdk9kbHVrYU9kbWxrYU9kb2xub3N0T2RwYWRPZHBpc09kcGxvdXRPZHBvck9kcHVzdGl0T2RweWthdE9kcmF6a2FPZHNvdWRpdE9kc3R1cE9kc3VuT2R0b2tPZHR1ZE9kdmFoYU9kdmV0YU9kdm9sYXRPZHZyYWNldE9kem5ha09maW5hT2ZzYWpkT2hsYXNPaG5pc2tvT2hyYWRhT2hyb3ppdE9ocnl6ZWtPa2FwT2tlbmljZU9rbGlrYU9rbm9Pa291emxpdE9rb3Z5T2tyYXNhT2tyZXNPa3JzZWtPa3J1aE9rdXBhbnRPa3Vya2FPa3VzaXRPbGVqbmluYU9saXpvdmF0T21ha09tZWxldGFPbWV6aXRPbWxhZGluYU9tbG91dmF0T21sdXZhT215bE9uZWhkeU9wYWtvdmF0T3Bhc2VrT3BlcmFjZU9waWNlT3BpbG9zdE9waXNvdmF0T3BvcmFPcG96aWNlT3ByYXZkdU9wcm90aU9yYml0YWxPcmNoZXN0ck9yZ2llT3JsaWNlT3Jsb2pPcnRlbE9zYWRhT3NjaG5vdXRPc2lrYU9zaXZvT3NsYXZhT3NsZXBpdE9zbG5pdE9zbG92aXRPc25vdmFPc29iYU9zb2xpdE9zcGFsZWNPc3Rlbk9zdHJhaGFPc3R1ZGFPc3R5Y2hPc3Zvaml0T3RlcGxpdE90aXNrT3RvcE90cmhhdE90cmxvc3RPdHJva090cnVieU90dm9yT3Zhbm91dE92YXJPdmVzT3ZsaXZuaXRPdm9jZU94aWRPemRvYmFQYWNoYXRlbFBhY2llbnRQYWRvdWNoUGFob3Jla1Bha3RQYWxhbmRhUGFsZWNQYWxpdm9QYWx1YmFQYW1mbGV0UGFtbHNla1BhbmVua2FQYW5pa2FQYW5uYVBhbm92YXRQYW5zdHZvUGFudG9mbGVQYXByaWthUGFya2V0YVBhcm9kaWVQYXJ0YVBhcnVrYVBhcnliYVBhc2VrYVBhc2l2aXRhUGFzdGVsa2FQYXRlbnRQYXRyb25hUGF2b3VrUGF6bmVodFBhem91cmVrUGVja2FQZWRhZ29nUGVqc2VrUGVrbG9QZWxvdG9uUGVuYWx0YVBlbmRyZWtQZW56ZVBlcmlza29wUGVyb1Blc3Ryb3N0UGV0YXJkYVBldGljZVBldHJvbGVqUGV2bmluYVBleGVzb1BpYW5pc3RhUGloYVBpamF2aWNlUGlrbGVQaWtuaWtQaWxpbmFQaWxub3N0UGlsdWxrYVBpbnpldGFQaXBldGFQaXNhdGVsUGlzdG9sZVBpdGV2bmFQaXZuaWNlUGl2b3ZhclBsYWNlbnRhUGxha2F0UGxhbWVuUGxhbmV0YVBsYXN0aWthUGxhdGl0UGxhdmlkbG9QbGF6UGxlY2hQbGVtZW5vUGxlbnRhUGxlc1BsZXRpdm9QbGV2ZWxQbGl2YXRQbG5pdFBsbm9QbG9jaGFQbG9kaW5hUGxvbWJhUGxvdXRQbHVrUGx5blBvYmF2aXRQb2J5dFBvY2hvZFBvY2l0UG9jdGl2ZWNQb2RhdFBvZGNlbml0UG9kZXBzYXRQb2RobGVkUG9kaXZpdFBvZGtsYWRQb2RtYW5pdFBvZG5pa1BvZG9iYVBvZHBvcmFQb2RyYXpQb2RzdGF0YVBvZHZvZFBvZHppbVBvZXppZVBvaGFua2FQb2hudXRrYVBvaG92b3JQb2hyb21hUG9oeWJQb2ludGFQb2ppc3RrYVBvam1vdXRQb2theml0UG9rbGVzUG9rb2pQb2tyb2tQb2t1dGFQb2t5blBvbGVkbmVQb2xpYmVrUG9sa25vdXRQb2xvaGFQb2x5bm9tUG9tYWx1UG9taW5vdXRQb21sa2FQb21vY1BvbXN0YVBvbXlzbGV0UG9uZWNoYXRQb25vcmthUG9udXJvc3RQb3BhZGF0UG9wZWxQb3Bpc2VrUG9wbGFjaFBvcHJvc2l0UG9wc2F0UG9wdWRQb3JhZGNlUG9yY2VQb3JvZFBvcnVjaGFQb3J5dlBvc2FkaXRQb3NlZFBvc2lsYVBvc2tva1Bvc2xhbmVjUG9zb3VkaXRQb3Nwb2x1UG9zdGF2YVBvc3VkZWtQb3N5cFBvdGFoUG90a2FuUG90bGVza1BvdG9tZWtQb3RyYXZhUG90dXBhUG90dm9yYVBvdWthelBvdXRvUG91emRyb1BvdmFoYVBvdmlkbGFQb3ZsYWtQb3ZvelBvdnJjaFBvdnN0YXRQb3Z5a1BvdnpkZWNoUG96ZHJhdlBvemVtZWtQb3puYXRla1Bvem9yUG96dmF0UHJhY292YXRQcmFob3J5UHJha3Rpa2FQcmFsZXNQcmFvdGVjUHJhcG9yZWtQcmFzZVByYXZkYVByaW5jaXBQcmtub1Byb2J1ZGl0UHJvY2VudG9Qcm9kZWpQcm9mZXNlUHJvaHJhUHJvamVrdFByb2xvbWl0UHJvbWlsZVByb25pa2F0UHJvcGFkUHJvcm9rUHJvc2JhUHJvdG9uUHJvdXRla1Byb3ZhelByc2thdmthUHJzdGVuUHJ1ZGtvc3RQcnV0UHJ2ZWtQcnZvaG9yeVBzYW5lY1Bzb3ZvZFBzdHJ1aFB0YWN0dm9QdWJlcnRhUHVjaFB1ZGxQdWthdmVjUHVrbGluYVB1a3JsZVB1bHRQdW1wYVB1bmNQdXBlblB1c2FQdXNpbmthUHVzdGluYVB1dG92YXRQdXR5a2FQeXJhbWlkYVB5c2tQeXRlbFJhY2VrUmFjaG90UmFkaWFjZVJhZG5pY2VSYWRvblJhZnRSYWdieVJha2V0YVJha292aW5hUmFtZW5vUmFtcG91Y2hSYW5kZVJhcmFjaFJhcml0YVJhc292bmFSYXN0clJhdG9sZXN0UmF6YW5jZVJhemlkbG9SZWFnb3ZhdFJlYWtjZVJlY2VwdFJlZGFrdG9yUmVmZXJlbnRSZWZsZXhSZWpub2tSZWtsYW1hUmVrb3JkUmVrcnV0UmVrdG9yUmVwdXRhY2VSZXZpemVSZXZtYVJldm9sdmVyUmV6ZXJ2YVJpc2tvdmF0Uml6aWtvUm9ib3Rpa2FSb2Rva21lblJvaG92a2FSb2tsZVJva29rb1JvbWFuZXRvUm9wb3ZvZFJvcHVjaGFSb3JlanNSb3NvbFJvc3RsaW5hUm90bWlzdHJSb3RvcGVkUm90dW5kYVJvdWJlbmthUm91Y2hvUm91cFJvdXJhUm92aW5hUm92bmljZVJvemJvclJvemNob2RSb3pkYXRSb3plem5hdFJvemhvZGNlUm96aW5rYVJvemplemRSb3prYXpSb3psb2hhUm96bWFyUm96cGFkUm96cnVjaFJvenNhaFJvenRva1JvenVtUm96dm9kUnVicmlrYVJ1Y2hhZGxvUnVrYXZpY2VSdWtvcGlzUnliYVJ5Ym9sb3ZSeWNobG9zdFJ5ZGxvUnlwYWRsb1J5dGluYVJ5em9zdFNhZGlzdGFTYWhhdFNha29TYW1lY1NhbWl6ZGF0U2Ftb3RhU2FuaXRrYVNhcmRpbmthU2FzYW5rYVNhdGVsaXRTYXpiYVNhemVuaWNlU2JvclNjaG92YXRTZWJyYW5rYVNlY2VzZVNlZGFkbG9TZWRpbWVudFNlZGxvU2VobmF0U2VqbW91dFNla2VyYVNla3RhU2VrdW5kYVNla3ZvamVTZW1lbm9TZW5vU2VydmlzU2VzYWRpdFNlc2hvcmFTZXNrb2tTZXNsYXRTZXN0cmFTZXN1dlNlc3lwYXRTZXRiYVNldGluYVNldGthdFNldG5vdXRTZXRydmF0U2V2ZXJTZXpuYW1TaG9kYVNocm5vdXRTaWZvblNpbG5pY2VTaXJrYVNpcm90ZWtTaXJ1cFNpdHVhY2VTa2FmYW5kclNrYWxpc2tvU2thbnplblNrYXV0U2tlcHRpa1NraWNhU2tsYWRiYVNrbGVuaWNlU2tsb1NrbHV6U2tvYmFTa29rYW5Ta29yb1NrcmlwdGFTa3J6U2t1cGluYVNrdm9zdFNrdnJuYVNsYWJpa2FTbGFkaWRsb1NsYW5pbmFTbGFzdFNsYXZub3N0U2xlZG92YXRTbGVwZWNTbGV2YVNsZXppbmFTbGliU2xpbmFTbGl6bmljZVNsb25TbG91cGVrU2xvdm9TbHVjaFNsdWhhU2x1bmNlU2x1cGthU2x6YVNtYXJhZ2RTbWV0YW5hU21pbHN0dm9TbWxvdXZhU21vZ1NtcmFkU21ya1NtcnRrYVNtdXRla1NteXNsU25hZFNuYWhhU25vYlNvYm90YVNvY2hhU29kb3ZrYVNva29sU29wa2FTb3R2YVNvdWJvalNvdWNpdFNvdWRjZVNvdWhsYXNTb3VsYWRTb3VtcmFrU291cHJhdmFTb3VzZWRTb3V0b2tTb3V2aXNldFNwYWxvdm5hU3Bhc2l0ZWxTcGlzU3BsYXZTcG9kZWtTcG9qZW5lY1Nwb2x1U3BvbnpvclNwb3Jub3N0U3BvdXN0YVNwcmNoYVNwdXN0aXRTcmFuZGFTcmF6U3JkY2VTcm5hU3JuZWNTcm92bmF0U3JwZW5TcnN0U3J1YlN0YW5pY2VTdGFyb3N0YVN0YXRpa2FTdGF2YmFTdGVobm9TdGV6a2FTdG9kb2xhU3RvbGVrU3RvcGFTdG9ybm9TdG91cGF0U3RyYWNoU3RyZXNTdHJobm91dFN0cm9tU3RydW5hU3R1ZG5hU3R1cG5pY2VTdHZvbFN0eWtTdWJqZWt0U3VidHJvcHlTdWNoYXJTdWRvc3RTdWtub1N1bmRhdFN1bm91dFN1cmlrYXRhU3Vyb3ZpbmFTdmFoU3ZhbHN0dm9TdmV0clN2YXRiYVN2YXpla1N2aXNsZVN2aXRla1N2b2JvZGFTdm9kaWRsb1N2b3JrYVN2cmFiU3lrYXZrYVN5a290U3luZWtTeW5vdmVjU3lwYXRTeXBrb3N0U3lyb3Zvc3RTeXNlbFN5dG9zdFRhYmxldGthVGFidWxlVGFob3VuVGFqZW1ub1RhamZ1blRhamdhVGFqaXRUYWpub3N0VGFrdGlrYVRhbWhsZVRhbXBvblRhbmNvdmF0VGFuZWNUYW5rZXJUYXBldGFUYXZlbmluYVRhemF0ZWxUZWNobmlrYVRlaGR5VGVrdXRpbmFUZWxlZm9uVGVtbm90YVRlbmRlbmNlVGVuaXN0YVRlbm9yVGVwbG90YVRlcG5hVGVwcnZlVGVyYXBpZVRlcm1vc2thVGV4dGlsVGljaG9UaXNrb3Bpc1RpdHVsZWtUa2FkbGVjVGthbmluYVRsYXBrYVRsZXNrYXRUbHVrb3RUbHVwYVRtZWxUb2FsZXRhVG9waW5rYVRvcG9sVG9yem9Ub3VoYVRvdWxlY1RyYWRpY2VUcmFrdG9yVHJhbXBUcmFzYVRyYXZlcnphVHJlZml0VHJlc3RUcmV6b3JUcmhhdmluYVRyaGxpbmFUcm9jaHVUcm9qaWNlVHJvc2thVHJvdWJhVHJwY2VUcnBpdGVsVHJwa29zdFRydWJlY1RydWNobGl0VHJ1aGxpY2VUcnVzVHJ2YXRUdWR5VHVobm91dFR1aG9zdFR1bmRyYVR1cmlzdGFUdXJuYWpUdXplbXNrb1R2YXJvaFR2b3JiYVR2cmRvc3RUdnJ6VHlnclR5a2V2VWJvaG9zdFVib3plVWJyYXRVYnJvdXNla1VicnVzVWJ5dG92bmFVY2hvVWN0aXZvc3RVZGl2aXRVaHJhZGl0VWplZG5hdFVqaXN0aXRVam1vdXRVa2F6YXRlbFVrbGlkbml0VWtsb25pdFVrb3R2aXRVa3Jvaml0VWxpY2VVbGl0YVVsb3ZpdFVteXZhZGxvVW5hdml0VW5pZm9ybWFVbmlrbm91dFVwYWRub3V0VXBsYXRuaXRVcGx5bm91dFVwb3V0YXRVcHJhdml0VXJhblVyYXppdFVzZWRub3V0VXNpbG92YXRVc21ydGl0VXNuYWRuaXRVc25vdXRVc291ZGl0VXN0bGF0VXN0cm5vdXRVdGFob3ZhdFV0a2F0VXRsdW1pdFV0b25vdXRVdG9wZW5lY1V0cm91c2l0VXZhbGl0VXZvbG5pdFV2b3pvdmthVXpkcmF2aXRVemVsVXplbmluYVV6bGluYVV6bmF0VmFnb25WYWxjaGFWYWxvdW5WYW5hVmFuZGFsVmFuaWxrYVZhcmFuVmFyaGFueVZhcm92YXRWY2Vsa3VWY2hvZFZkb3ZhVmVkcm9WZWdldGFjZVZlamNlVmVsYmxvdWRWZWxldHJoVmVsaXRlbFZlbG1vY1ZlbHJ5YmFWZW5rb3ZWZXJhbmRhVmVyemVWZXNlbGthVmVza3J6ZVZlc25pY2VWZXNwb2R1VmVzdGFWZXRlcmluYVZldmVya2FWaWJyYWNlVmljaHJWaWRlb2hyYVZpZGluYVZpZGxlVmlsYVZpbmljZVZpc2V0Vml0YWxpdGFWaXplVml6aXRrYVZqZXpkVmtsYWRWa3VzVmxhamthVmxha1ZsYXNlY1ZsZXZvVmxoa29zdFZsaXZWbG5vdmthVmxvdXBhdFZudWNvdmF0Vm51a1ZvZGFWb2Rpdm9zdFZvZG96bmFrVm9kc3R2b1ZvamVuc2t5Vm9qbmFWb2pza29Wb2xhbnRWb2xiYVZvbGl0Vm9sbm9Wb3Nrb3ZrYVZvemlkbG9Wb3pvdm5hVnByYXZvVnJhYmVjVnJhY2V0VnJhaFZyYXRhVnJiYVZyY2hvbGVrVnJoYXRWcnN0dmFWcnR1bGVWc2FkaXRWc3RvdXBpdFZzdHVwVnRpcFZ5YmF2aXRWeWJyYXRWeWNob3ZhdFZ5ZGF0VnlkcmFWeWZvdGl0VnlobGVkYXRWeWhub3V0Vnlob2RpdFZ5aHJhZGl0VnlodWJpdFZ5amFzbml0VnlqZXRWeWptb3V0VnlrbG9waXRWeWtvbmF0VnlsZWthdFZ5bWF6YXRWeW1leml0VnltaXpldFZ5bXlzbGV0VnluZWNoYXRWeW5pa2F0VnludXRpdFZ5cGFkYXRWeXBsYXRpdFZ5cHJhdml0VnlwdXN0aXRWeXJheml0Vnlyb3ZuYXRWeXJ2YXRWeXNsb3ZpdFZ5c29rb1Z5c3Rhdml0VnlzdW5vdXRWeXN5cGF0Vnl0YXNpdFZ5dGVzYXRWeXRyYXRpdFZ5dmlub3V0Vnl2b2xhdFZ5dnJoZWxWeXpkb2JpdFZ5em5hdFZ6YWR1VnpidWRpdFZ6Y2hvcGl0Vnpkb3JWemR1Y2hWemR5Y2hhdFZ6ZXN0dXBWemhsZWRlbVZ6a2F6VnpseWthdFZ6bmlrVnpvcmVrVnpwb3VyYVZ6dGFoVnp0ZWtYeWxvZm9uWmFicmF0WmFieWRsZXRaYWNob3ZhdFphZGFybW9aYWR1c2l0WmFmb3VrYXRaYWhsdGl0WmFob2RpdFphaHJhZGFaYWh5bm91dFphamF0ZWNaYWpldFphamlzdGl0WmFrbGVwYXRaYWtvdXBpdFphbGVwaXRaYW1leml0WmFtb3RhdFphbXlzbGV0WmFuZWNoYXRaYW5pa2F0WmFwbGF0aXRaYXBvaml0WmFwc2F0WmFyYXppdFphc3Rhdml0WmFzdW5vdXRaYXRhaml0WmF0ZW1uaXRaYXRrbm91dFphdWptb3V0WmF2YWxpdFphdmVsZXRaYXZpbml0WmF2b2xhdFphdnJ0YXRaYXp2b25pdFpiYXZpdFpicnVzdVpidWRvdmF0WmJ5dGVrWmRhbGVrYVpkYXJtYVpkYXRub3N0WmRpdm9aZG9iaXRaZHJvalpkdmloWmR5bWFkbG9aZWxlbmluYVplbWFuWmVtaW5hWmVwdGF0WmV6YWR1WmV6ZG9sYVpoYXRpdFpobHRub3V0WmhsdWJva2FaaG90b3ZpdFpocnViYVppbWFaaW1uaWNlWmplbW5pdFprbGFtYXRaa291bWF0WmtyYXRrYVprdW1hdmthWmxhdG9abGVoa2FabG9iYVpsb21abG9zdFpsb3p2eWtabWFwb3ZhdFptYXJabWF0ZWtabWlqZVptaXpldFptb2NuaXRabW9kcmF0Wm1yemxpbmFabXV0b3ZhdFpuYWtabmFsb3N0Wm5hbWVuYXRabm92dVpvYnJheml0Wm90YXZpdFpvdWJla1pvdWZhbGVacGxvZGl0WnBvbWFsaXRacHJhdmFacHJvc3RpdFpwcnVka2FacHJ2dVpyYWRhWnJhbml0WnJjYWRsb1pybml0b3N0WnJub1pyb3ZuYVpyeWNobGl0WnJ6YXZvc3RadGljaGFadHJhdGl0WnVib3ZpbmFadWJyWnZlZG5vdXRadmVua3VadmVzZWxhWnZvblp2cmF0WnZ1a292b2RadnlrXCI7bGV0IHdvcmRsaXN0PW51bGw7ZnVuY3Rpb24gbG9hZFdvcmRzKGxhbmcpe2lmKHdvcmRsaXN0IT1udWxsKXtyZXR1cm59d29yZGxpc3Q9d29yZHMucmVwbGFjZSgvKFtBLVpdKS9nLFwiICQxXCIpLnRvTG93ZXJDYXNlKCkuc3Vic3RyaW5nKDEpLnNwbGl0KFwiIFwiKTtpZihXb3JkbGlzdC5jaGVjayhsYW5nKSE9PVwiMHgyNWY0NDU1NWY0YWYyNWI1MWE3MTExMzZlMWM3ZDZlNTBjZTlmODkxN2QzOWQ2YjFmMDc2YjJiYjRkMmZhYzFhXCIpe3dvcmRsaXN0PW51bGw7dGhyb3cgbmV3IEVycm9yKFwiQklQMzkgV29yZGxpc3QgZm9yIGVuIChFbmdsaXNoKSBGQUlMRURcIil9fWNsYXNzIExhbmdDeiBleHRlbmRzIFdvcmRsaXN0e2NvbnN0cnVjdG9yKCl7c3VwZXIoXCJjelwiKX1nZXRXb3JkKGluZGV4KXtsb2FkV29yZHModGhpcyk7cmV0dXJuIHdvcmRsaXN0W2luZGV4XX1nZXRXb3JkSW5kZXgod29yZCl7bG9hZFdvcmRzKHRoaXMpO3JldHVybiB3b3JkbGlzdC5pbmRleE9mKHdvcmQpfX1jb25zdCBsYW5nQ3o9bmV3IExhbmdDejtXb3JkbGlzdC5yZWdpc3RlcihsYW5nQ3opO1widXNlIHN0cmljdFwiO2NvbnN0IHdvcmRzJDE9XCJBYmFuZG9uQWJpbGl0eUFibGVBYm91dEFib3ZlQWJzZW50QWJzb3JiQWJzdHJhY3RBYnN1cmRBYnVzZUFjY2Vzc0FjY2lkZW50QWNjb3VudEFjY3VzZUFjaGlldmVBY2lkQWNvdXN0aWNBY3F1aXJlQWNyb3NzQWN0QWN0aW9uQWN0b3JBY3RyZXNzQWN0dWFsQWRhcHRBZGRBZGRpY3RBZGRyZXNzQWRqdXN0QWRtaXRBZHVsdEFkdmFuY2VBZHZpY2VBZXJvYmljQWZmYWlyQWZmb3JkQWZyYWlkQWdhaW5BZ2VBZ2VudEFncmVlQWhlYWRBaW1BaXJBaXJwb3J0QWlzbGVBbGFybUFsYnVtQWxjb2hvbEFsZXJ0QWxpZW5BbGxBbGxleUFsbG93QWxtb3N0QWxvbmVBbHBoYUFscmVhZHlBbHNvQWx0ZXJBbHdheXNBbWF0ZXVyQW1hemluZ0Ftb25nQW1vdW50QW11c2VkQW5hbHlzdEFuY2hvckFuY2llbnRBbmdlckFuZ2xlQW5ncnlBbmltYWxBbmtsZUFubm91bmNlQW5udWFsQW5vdGhlckFuc3dlckFudGVubmFBbnRpcXVlQW54aWV0eUFueUFwYXJ0QXBvbG9neUFwcGVhckFwcGxlQXBwcm92ZUFwcmlsQXJjaEFyY3RpY0FyZWFBcmVuYUFyZ3VlQXJtQXJtZWRBcm1vckFybXlBcm91bmRBcnJhbmdlQXJyZXN0QXJyaXZlQXJyb3dBcnRBcnRlZmFjdEFydGlzdEFydHdvcmtBc2tBc3BlY3RBc3NhdWx0QXNzZXRBc3Npc3RBc3N1bWVBc3RobWFBdGhsZXRlQXRvbUF0dGFja0F0dGVuZEF0dGl0dWRlQXR0cmFjdEF1Y3Rpb25BdWRpdEF1Z3VzdEF1bnRBdXRob3JBdXRvQXV0dW1uQXZlcmFnZUF2b2NhZG9Bdm9pZEF3YWtlQXdhcmVBd2F5QXdlc29tZUF3ZnVsQXdrd2FyZEF4aXNCYWJ5QmFjaGVsb3JCYWNvbkJhZGdlQmFnQmFsYW5jZUJhbGNvbnlCYWxsQmFtYm9vQmFuYW5hQmFubmVyQmFyQmFyZWx5QmFyZ2FpbkJhcnJlbEJhc2VCYXNpY0Jhc2tldEJhdHRsZUJlYWNoQmVhbkJlYXV0eUJlY2F1c2VCZWNvbWVCZWVmQmVmb3JlQmVnaW5CZWhhdmVCZWhpbmRCZWxpZXZlQmVsb3dCZWx0QmVuY2hCZW5lZml0QmVzdEJldHJheUJldHRlckJldHdlZW5CZXlvbmRCaWN5Y2xlQmlkQmlrZUJpbmRCaW9sb2d5QmlyZEJpcnRoQml0dGVyQmxhY2tCbGFkZUJsYW1lQmxhbmtldEJsYXN0QmxlYWtCbGVzc0JsaW5kQmxvb2RCbG9zc29tQmxvdXNlQmx1ZUJsdXJCbHVzaEJvYXJkQm9hdEJvZHlCb2lsQm9tYkJvbmVCb251c0Jvb2tCb29zdEJvcmRlckJvcmluZ0JvcnJvd0Jvc3NCb3R0b21Cb3VuY2VCb3hCb3lCcmFja2V0QnJhaW5CcmFuZEJyYXNzQnJhdmVCcmVhZEJyZWV6ZUJyaWNrQnJpZGdlQnJpZWZCcmlnaHRCcmluZ0JyaXNrQnJvY2NvbGlCcm9rZW5Ccm9uemVCcm9vbUJyb3RoZXJCcm93bkJydXNoQnViYmxlQnVkZHlCdWRnZXRCdWZmYWxvQnVpbGRCdWxiQnVsa0J1bGxldEJ1bmRsZUJ1bmtlckJ1cmRlbkJ1cmdlckJ1cnN0QnVzQnVzaW5lc3NCdXN5QnV0dGVyQnV5ZXJCdXp6Q2FiYmFnZUNhYmluQ2FibGVDYWN0dXNDYWdlQ2FrZUNhbGxDYWxtQ2FtZXJhQ2FtcENhbkNhbmFsQ2FuY2VsQ2FuZHlDYW5ub25DYW5vZUNhbnZhc0NhbnlvbkNhcGFibGVDYXBpdGFsQ2FwdGFpbkNhckNhcmJvbkNhcmRDYXJnb0NhcnBldENhcnJ5Q2FydENhc2VDYXNoQ2FzaW5vQ2FzdGxlQ2FzdWFsQ2F0Q2F0YWxvZ0NhdGNoQ2F0ZWdvcnlDYXR0bGVDYXVnaHRDYXVzZUNhdXRpb25DYXZlQ2VpbGluZ0NlbGVyeUNlbWVudENlbnN1c0NlbnR1cnlDZXJlYWxDZXJ0YWluQ2hhaXJDaGFsa0NoYW1waW9uQ2hhbmdlQ2hhb3NDaGFwdGVyQ2hhcmdlQ2hhc2VDaGF0Q2hlYXBDaGVja0NoZWVzZUNoZWZDaGVycnlDaGVzdENoaWNrZW5DaGllZkNoaWxkQ2hpbW5leUNob2ljZUNob29zZUNocm9uaWNDaHVja2xlQ2h1bmtDaHVybkNpZ2FyQ2lubmFtb25DaXJjbGVDaXRpemVuQ2l0eUNpdmlsQ2xhaW1DbGFwQ2xhcmlmeUNsYXdDbGF5Q2xlYW5DbGVya0NsZXZlckNsaWNrQ2xpZW50Q2xpZmZDbGltYkNsaW5pY0NsaXBDbG9ja0Nsb2dDbG9zZUNsb3RoQ2xvdWRDbG93bkNsdWJDbHVtcENsdXN0ZXJDbHV0Y2hDb2FjaENvYXN0Q29jb251dENvZGVDb2ZmZWVDb2lsQ29pbkNvbGxlY3RDb2xvckNvbHVtbkNvbWJpbmVDb21lQ29tZm9ydENvbWljQ29tbW9uQ29tcGFueUNvbmNlcnRDb25kdWN0Q29uZmlybUNvbmdyZXNzQ29ubmVjdENvbnNpZGVyQ29udHJvbENvbnZpbmNlQ29va0Nvb2xDb3BwZXJDb3B5Q29yYWxDb3JlQ29ybkNvcnJlY3RDb3N0Q290dG9uQ291Y2hDb3VudHJ5Q291cGxlQ291cnNlQ291c2luQ292ZXJDb3lvdGVDcmFja0NyYWRsZUNyYWZ0Q3JhbUNyYW5lQ3Jhc2hDcmF0ZXJDcmF3bENyYXp5Q3JlYW1DcmVkaXRDcmVla0NyZXdDcmlja2V0Q3JpbWVDcmlzcENyaXRpY0Nyb3BDcm9zc0Nyb3VjaENyb3dkQ3J1Y2lhbENydWVsQ3J1aXNlQ3J1bWJsZUNydW5jaENydXNoQ3J5Q3J5c3RhbEN1YmVDdWx0dXJlQ3VwQ3VwYm9hcmRDdXJpb3VzQ3VycmVudEN1cnRhaW5DdXJ2ZUN1c2hpb25DdXN0b21DdXRlQ3ljbGVEYWREYW1hZ2VEYW1wRGFuY2VEYW5nZXJEYXJpbmdEYXNoRGF1Z2h0ZXJEYXduRGF5RGVhbERlYmF0ZURlYnJpc0RlY2FkZURlY2VtYmVyRGVjaWRlRGVjbGluZURlY29yYXRlRGVjcmVhc2VEZWVyRGVmZW5zZURlZmluZURlZnlEZWdyZWVEZWxheURlbGl2ZXJEZW1hbmREZW1pc2VEZW5pYWxEZW50aXN0RGVueURlcGFydERlcGVuZERlcG9zaXREZXB0aERlcHV0eURlcml2ZURlc2NyaWJlRGVzZXJ0RGVzaWduRGVza0Rlc3BhaXJEZXN0cm95RGV0YWlsRGV0ZWN0RGV2ZWxvcERldmljZURldm90ZURpYWdyYW1EaWFsRGlhbW9uZERpYXJ5RGljZURpZXNlbERpZXREaWZmZXJEaWdpdGFsRGlnbml0eURpbGVtbWFEaW5uZXJEaW5vc2F1ckRpcmVjdERpcnREaXNhZ3JlZURpc2NvdmVyRGlzZWFzZURpc2hEaXNtaXNzRGlzb3JkZXJEaXNwbGF5RGlzdGFuY2VEaXZlcnREaXZpZGVEaXZvcmNlRGl6enlEb2N0b3JEb2N1bWVudERvZ0RvbGxEb2xwaGluRG9tYWluRG9uYXRlRG9ua2V5RG9ub3JEb29yRG9zZURvdWJsZURvdmVEcmFmdERyYWdvbkRyYW1hRHJhc3RpY0RyYXdEcmVhbURyZXNzRHJpZnREcmlsbERyaW5rRHJpcERyaXZlRHJvcERydW1EcnlEdWNrRHVtYkR1bmVEdXJpbmdEdXN0RHV0Y2hEdXR5RHdhcmZEeW5hbWljRWFnZXJFYWdsZUVhcmx5RWFybkVhcnRoRWFzaWx5RWFzdEVhc3lFY2hvRWNvbG9neUVjb25vbXlFZGdlRWRpdEVkdWNhdGVFZmZvcnRFZ2dFaWdodEVpdGhlckVsYm93RWxkZXJFbGVjdHJpY0VsZWdhbnRFbGVtZW50RWxlcGhhbnRFbGV2YXRvckVsaXRlRWxzZUVtYmFya0VtYm9keUVtYnJhY2VFbWVyZ2VFbW90aW9uRW1wbG95RW1wb3dlckVtcHR5RW5hYmxlRW5hY3RFbmRFbmRsZXNzRW5kb3JzZUVuZW15RW5lcmd5RW5mb3JjZUVuZ2FnZUVuZ2luZUVuaGFuY2VFbmpveUVubGlzdEVub3VnaEVucmljaEVucm9sbEVuc3VyZUVudGVyRW50aXJlRW50cnlFbnZlbG9wZUVwaXNvZGVFcXVhbEVxdWlwRXJhRXJhc2VFcm9kZUVyb3Npb25FcnJvckVydXB0RXNjYXBlRXNzYXlFc3NlbmNlRXN0YXRlRXRlcm5hbEV0aGljc0V2aWRlbmNlRXZpbEV2b2tlRXZvbHZlRXhhY3RFeGFtcGxlRXhjZXNzRXhjaGFuZ2VFeGNpdGVFeGNsdWRlRXhjdXNlRXhlY3V0ZUV4ZXJjaXNlRXhoYXVzdEV4aGliaXRFeGlsZUV4aXN0RXhpdEV4b3RpY0V4cGFuZEV4cGVjdEV4cGlyZUV4cGxhaW5FeHBvc2VFeHByZXNzRXh0ZW5kRXh0cmFFeWVFeWVicm93RmFicmljRmFjZUZhY3VsdHlGYWRlRmFpbnRGYWl0aEZhbGxGYWxzZUZhbWVGYW1pbHlGYW1vdXNGYW5GYW5jeUZhbnRhc3lGYXJtRmFzaGlvbkZhdEZhdGFsRmF0aGVyRmF0aWd1ZUZhdWx0RmF2b3JpdGVGZWF0dXJlRmVicnVhcnlGZWRlcmFsRmVlRmVlZEZlZWxGZW1hbGVGZW5jZUZlc3RpdmFsRmV0Y2hGZXZlckZld0ZpYmVyRmljdGlvbkZpZWxkRmlndXJlRmlsZUZpbG1GaWx0ZXJGaW5hbEZpbmRGaW5lRmluZ2VyRmluaXNoRmlyZUZpcm1GaXJzdEZpc2NhbEZpc2hGaXRGaXRuZXNzRml4RmxhZ0ZsYW1lRmxhc2hGbGF0Rmxhdm9yRmxlZUZsaWdodEZsaXBGbG9hdEZsb2NrRmxvb3JGbG93ZXJGbHVpZEZsdXNoRmx5Rm9hbUZvY3VzRm9nRm9pbEZvbGRGb2xsb3dGb29kRm9vdEZvcmNlRm9yZXN0Rm9yZ2V0Rm9ya0ZvcnR1bmVGb3J1bUZvcndhcmRGb3NzaWxGb3N0ZXJGb3VuZEZveEZyYWdpbGVGcmFtZUZyZXF1ZW50RnJlc2hGcmllbmRGcmluZ2VGcm9nRnJvbnRGcm9zdEZyb3duRnJvemVuRnJ1aXRGdWVsRnVuRnVubnlGdXJuYWNlRnVyeUZ1dHVyZUdhZGdldEdhaW5HYWxheHlHYWxsZXJ5R2FtZUdhcEdhcmFnZUdhcmJhZ2VHYXJkZW5HYXJsaWNHYXJtZW50R2FzR2FzcEdhdGVHYXRoZXJHYXVnZUdhemVHZW5lcmFsR2VuaXVzR2VucmVHZW50bGVHZW51aW5lR2VzdHVyZUdob3N0R2lhbnRHaWZ0R2lnZ2xlR2luZ2VyR2lyYWZmZUdpcmxHaXZlR2xhZEdsYW5jZUdsYXJlR2xhc3NHbGlkZUdsaW1wc2VHbG9iZUdsb29tR2xvcnlHbG92ZUdsb3dHbHVlR29hdEdvZGRlc3NHb2xkR29vZEdvb3NlR29yaWxsYUdvc3BlbEdvc3NpcEdvdmVybkdvd25HcmFiR3JhY2VHcmFpbkdyYW50R3JhcGVHcmFzc0dyYXZpdHlHcmVhdEdyZWVuR3JpZEdyaWVmR3JpdEdyb2NlcnlHcm91cEdyb3dHcnVudEd1YXJkR3Vlc3NHdWlkZUd1aWx0R3VpdGFyR3VuR3ltSGFiaXRIYWlySGFsZkhhbW1lckhhbXN0ZXJIYW5kSGFwcHlIYXJib3JIYXJkSGFyc2hIYXJ2ZXN0SGF0SGF2ZUhhd2tIYXphcmRIZWFkSGVhbHRoSGVhcnRIZWF2eUhlZGdlaG9nSGVpZ2h0SGVsbG9IZWxtZXRIZWxwSGVuSGVyb0hpZGRlbkhpZ2hIaWxsSGludEhpcEhpcmVIaXN0b3J5SG9iYnlIb2NrZXlIb2xkSG9sZUhvbGlkYXlIb2xsb3dIb21lSG9uZXlIb29kSG9wZUhvcm5Ib3Jyb3JIb3JzZUhvc3BpdGFsSG9zdEhvdGVsSG91ckhvdmVySHViSHVnZUh1bWFuSHVtYmxlSHVtb3JIdW5kcmVkSHVuZ3J5SHVudEh1cmRsZUh1cnJ5SHVydEh1c2JhbmRIeWJyaWRJY2VJY29uSWRlYUlkZW50aWZ5SWRsZUlnbm9yZUlsbElsbGVnYWxJbGxuZXNzSW1hZ2VJbWl0YXRlSW1tZW5zZUltbXVuZUltcGFjdEltcG9zZUltcHJvdmVJbXB1bHNlSW5jaEluY2x1ZGVJbmNvbWVJbmNyZWFzZUluZGV4SW5kaWNhdGVJbmRvb3JJbmR1c3RyeUluZmFudEluZmxpY3RJbmZvcm1JbmhhbGVJbmhlcml0SW5pdGlhbEluamVjdEluanVyeUlubWF0ZUlubmVySW5ub2NlbnRJbnB1dElucXVpcnlJbnNhbmVJbnNlY3RJbnNpZGVJbnNwaXJlSW5zdGFsbEludGFjdEludGVyZXN0SW50b0ludmVzdEludml0ZUludm9sdmVJcm9uSXNsYW5kSXNvbGF0ZUlzc3VlSXRlbUl2b3J5SmFja2V0SmFndWFySmFySmF6ekplYWxvdXNKZWFuc0plbGx5SmV3ZWxKb2JKb2luSm9rZUpvdXJuZXlKb3lKdWRnZUp1aWNlSnVtcEp1bmdsZUp1bmlvckp1bmtKdXN0S2FuZ2Fyb29LZWVuS2VlcEtldGNodXBLZXlLaWNrS2lkS2lkbmV5S2luZEtpbmdkb21LaXNzS2l0S2l0Y2hlbktpdGVLaXR0ZW5LaXdpS25lZUtuaWZlS25vY2tLbm93TGFiTGFiZWxMYWJvckxhZGRlckxhZHlMYWtlTGFtcExhbmd1YWdlTGFwdG9wTGFyZ2VMYXRlckxhdGluTGF1Z2hMYXVuZHJ5TGF2YUxhd0xhd25MYXdzdWl0TGF5ZXJMYXp5TGVhZGVyTGVhZkxlYXJuTGVhdmVMZWN0dXJlTGVmdExlZ0xlZ2FsTGVnZW5kTGVpc3VyZUxlbW9uTGVuZExlbmd0aExlbnNMZW9wYXJkTGVzc29uTGV0dGVyTGV2ZWxMaWFyTGliZXJ0eUxpYnJhcnlMaWNlbnNlTGlmZUxpZnRMaWdodExpa2VMaW1iTGltaXRMaW5rTGlvbkxpcXVpZExpc3RMaXR0bGVMaXZlTGl6YXJkTG9hZExvYW5Mb2JzdGVyTG9jYWxMb2NrTG9naWNMb25lbHlMb25nTG9vcExvdHRlcnlMb3VkTG91bmdlTG92ZUxveWFsTHVja3lMdWdnYWdlTHVtYmVyTHVuYXJMdW5jaEx1eHVyeUx5cmljc01hY2hpbmVNYWRNYWdpY01hZ25ldE1haWRNYWlsTWFpbk1ham9yTWFrZU1hbW1hbE1hbk1hbmFnZU1hbmRhdGVNYW5nb01hbnNpb25NYW51YWxNYXBsZU1hcmJsZU1hcmNoTWFyZ2luTWFyaW5lTWFya2V0TWFycmlhZ2VNYXNrTWFzc01hc3Rlck1hdGNoTWF0ZXJpYWxNYXRoTWF0cml4TWF0dGVyTWF4aW11bU1hemVNZWFkb3dNZWFuTWVhc3VyZU1lYXRNZWNoYW5pY01lZGFsTWVkaWFNZWxvZHlNZWx0TWVtYmVyTWVtb3J5TWVudGlvbk1lbnVNZXJjeU1lcmdlTWVyaXRNZXJyeU1lc2hNZXNzYWdlTWV0YWxNZXRob2RNaWRkbGVNaWRuaWdodE1pbGtNaWxsaW9uTWltaWNNaW5kTWluaW11bU1pbm9yTWludXRlTWlyYWNsZU1pcnJvck1pc2VyeU1pc3NNaXN0YWtlTWl4TWl4ZWRNaXh0dXJlTW9iaWxlTW9kZWxNb2RpZnlNb21Nb21lbnRNb25pdG9yTW9ua2V5TW9uc3Rlck1vbnRoTW9vbk1vcmFsTW9yZU1vcm5pbmdNb3NxdWl0b01vdGhlck1vdGlvbk1vdG9yTW91bnRhaW5Nb3VzZU1vdmVNb3ZpZU11Y2hNdWZmaW5NdWxlTXVsdGlwbHlNdXNjbGVNdXNldW1NdXNocm9vbU11c2ljTXVzdE11dHVhbE15c2VsZk15c3RlcnlNeXRoTmFpdmVOYW1lTmFwa2luTmFycm93TmFzdHlOYXRpb25OYXR1cmVOZWFyTmVja05lZWROZWdhdGl2ZU5lZ2xlY3ROZWl0aGVyTmVwaGV3TmVydmVOZXN0TmV0TmV0d29ya05ldXRyYWxOZXZlck5ld3NOZXh0TmljZU5pZ2h0Tm9ibGVOb2lzZU5vbWluZWVOb29kbGVOb3JtYWxOb3J0aE5vc2VOb3RhYmxlTm90ZU5vdGhpbmdOb3RpY2VOb3ZlbE5vd051Y2xlYXJOdW1iZXJOdXJzZU51dE9ha09iZXlPYmplY3RPYmxpZ2VPYnNjdXJlT2JzZXJ2ZU9idGFpbk9idmlvdXNPY2N1ck9jZWFuT2N0b2Jlck9kb3JPZmZPZmZlck9mZmljZU9mdGVuT2lsT2theU9sZE9saXZlT2x5bXBpY09taXRPbmNlT25lT25pb25PbmxpbmVPbmx5T3Blbk9wZXJhT3Bpbmlvbk9wcG9zZU9wdGlvbk9yYW5nZU9yYml0T3JjaGFyZE9yZGVyT3JkaW5hcnlPcmdhbk9yaWVudE9yaWdpbmFsT3JwaGFuT3N0cmljaE90aGVyT3V0ZG9vck91dGVyT3V0cHV0T3V0c2lkZU92YWxPdmVuT3Zlck93bk93bmVyT3h5Z2VuT3lzdGVyT3pvbmVQYWN0UGFkZGxlUGFnZVBhaXJQYWxhY2VQYWxtUGFuZGFQYW5lbFBhbmljUGFudGhlclBhcGVyUGFyYWRlUGFyZW50UGFya1BhcnJvdFBhcnR5UGFzc1BhdGNoUGF0aFBhdGllbnRQYXRyb2xQYXR0ZXJuUGF1c2VQYXZlUGF5bWVudFBlYWNlUGVhbnV0UGVhclBlYXNhbnRQZWxpY2FuUGVuUGVuYWx0eVBlbmNpbFBlb3BsZVBlcHBlclBlcmZlY3RQZXJtaXRQZXJzb25QZXRQaG9uZVBob3RvUGhyYXNlUGh5c2ljYWxQaWFub1BpY25pY1BpY3R1cmVQaWVjZVBpZ1BpZ2VvblBpbGxQaWxvdFBpbmtQaW9uZWVyUGlwZVBpc3RvbFBpdGNoUGl6emFQbGFjZVBsYW5ldFBsYXN0aWNQbGF0ZVBsYXlQbGVhc2VQbGVkZ2VQbHVja1BsdWdQbHVuZ2VQb2VtUG9ldFBvaW50UG9sYXJQb2xlUG9saWNlUG9uZFBvbnlQb29sUG9wdWxhclBvcnRpb25Qb3NpdGlvblBvc3NpYmxlUG9zdFBvdGF0b1BvdHRlcnlQb3ZlcnR5UG93ZGVyUG93ZXJQcmFjdGljZVByYWlzZVByZWRpY3RQcmVmZXJQcmVwYXJlUHJlc2VudFByZXR0eVByZXZlbnRQcmljZVByaWRlUHJpbWFyeVByaW50UHJpb3JpdHlQcmlzb25Qcml2YXRlUHJpemVQcm9ibGVtUHJvY2Vzc1Byb2R1Y2VQcm9maXRQcm9ncmFtUHJvamVjdFByb21vdGVQcm9vZlByb3BlcnR5UHJvc3BlclByb3RlY3RQcm91ZFByb3ZpZGVQdWJsaWNQdWRkaW5nUHVsbFB1bHBQdWxzZVB1bXBraW5QdW5jaFB1cGlsUHVwcHlQdXJjaGFzZVB1cml0eVB1cnBvc2VQdXJzZVB1c2hQdXRQdXp6bGVQeXJhbWlkUXVhbGl0eVF1YW50dW1RdWFydGVyUXVlc3Rpb25RdWlja1F1aXRRdWl6UXVvdGVSYWJiaXRSYWNjb29uUmFjZVJhY2tSYWRhclJhZGlvUmFpbFJhaW5SYWlzZVJhbGx5UmFtcFJhbmNoUmFuZG9tUmFuZ2VSYXBpZFJhcmVSYXRlUmF0aGVyUmF2ZW5SYXdSYXpvclJlYWR5UmVhbFJlYXNvblJlYmVsUmVidWlsZFJlY2FsbFJlY2VpdmVSZWNpcGVSZWNvcmRSZWN5Y2xlUmVkdWNlUmVmbGVjdFJlZm9ybVJlZnVzZVJlZ2lvblJlZ3JldFJlZ3VsYXJSZWplY3RSZWxheFJlbGVhc2VSZWxpZWZSZWx5UmVtYWluUmVtZW1iZXJSZW1pbmRSZW1vdmVSZW5kZXJSZW5ld1JlbnRSZW9wZW5SZXBhaXJSZXBlYXRSZXBsYWNlUmVwb3J0UmVxdWlyZVJlc2N1ZVJlc2VtYmxlUmVzaXN0UmVzb3VyY2VSZXNwb25zZVJlc3VsdFJldGlyZVJldHJlYXRSZXR1cm5SZXVuaW9uUmV2ZWFsUmV2aWV3UmV3YXJkUmh5dGhtUmliUmliYm9uUmljZVJpY2hSaWRlUmlkZ2VSaWZsZVJpZ2h0UmlnaWRSaW5nUmlvdFJpcHBsZVJpc2tSaXR1YWxSaXZhbFJpdmVyUm9hZFJvYXN0Um9ib3RSb2J1c3RSb2NrZXRSb21hbmNlUm9vZlJvb2tpZVJvb21Sb3NlUm90YXRlUm91Z2hSb3VuZFJvdXRlUm95YWxSdWJiZXJSdWRlUnVnUnVsZVJ1blJ1bndheVJ1cmFsU2FkU2FkZGxlU2FkbmVzc1NhZmVTYWlsU2FsYWRTYWxtb25TYWxvblNhbHRTYWx1dGVTYW1lU2FtcGxlU2FuZFNhdGlzZnlTYXRvc2hpU2F1Y2VTYXVzYWdlU2F2ZVNheVNjYWxlU2NhblNjYXJlU2NhdHRlclNjZW5lU2NoZW1lU2Nob29sU2NpZW5jZVNjaXNzb3JzU2NvcnBpb25TY291dFNjcmFwU2NyZWVuU2NyaXB0U2NydWJTZWFTZWFyY2hTZWFzb25TZWF0U2Vjb25kU2VjcmV0U2VjdGlvblNlY3VyaXR5U2VlZFNlZWtTZWdtZW50U2VsZWN0U2VsbFNlbWluYXJTZW5pb3JTZW5zZVNlbnRlbmNlU2VyaWVzU2VydmljZVNlc3Npb25TZXR0bGVTZXR1cFNldmVuU2hhZG93U2hhZnRTaGFsbG93U2hhcmVTaGVkU2hlbGxTaGVyaWZmU2hpZWxkU2hpZnRTaGluZVNoaXBTaGl2ZXJTaG9ja1Nob2VTaG9vdFNob3BTaG9ydFNob3VsZGVyU2hvdmVTaHJpbXBTaHJ1Z1NodWZmbGVTaHlTaWJsaW5nU2lja1NpZGVTaWVnZVNpZ2h0U2lnblNpbGVudFNpbGtTaWxseVNpbHZlclNpbWlsYXJTaW1wbGVTaW5jZVNpbmdTaXJlblNpc3RlclNpdHVhdGVTaXhTaXplU2thdGVTa2V0Y2hTa2lTa2lsbFNraW5Ta2lydFNrdWxsU2xhYlNsYW1TbGVlcFNsZW5kZXJTbGljZVNsaWRlU2xpZ2h0U2xpbVNsb2dhblNsb3RTbG93U2x1c2hTbWFsbFNtYXJ0U21pbGVTbW9rZVNtb290aFNuYWNrU25ha2VTbmFwU25pZmZTbm93U29hcFNvY2NlclNvY2lhbFNvY2tTb2RhU29mdFNvbGFyU29sZGllclNvbGlkU29sdXRpb25Tb2x2ZVNvbWVvbmVTb25nU29vblNvcnJ5U29ydFNvdWxTb3VuZFNvdXBTb3VyY2VTb3V0aFNwYWNlU3BhcmVTcGF0aWFsU3Bhd25TcGVha1NwZWNpYWxTcGVlZFNwZWxsU3BlbmRTcGhlcmVTcGljZVNwaWRlclNwaWtlU3BpblNwaXJpdFNwbGl0U3BvaWxTcG9uc29yU3Bvb25TcG9ydFNwb3RTcHJheVNwcmVhZFNwcmluZ1NweVNxdWFyZVNxdWVlemVTcXVpcnJlbFN0YWJsZVN0YWRpdW1TdGFmZlN0YWdlU3RhaXJzU3RhbXBTdGFuZFN0YXJ0U3RhdGVTdGF5U3RlYWtTdGVlbFN0ZW1TdGVwU3RlcmVvU3RpY2tTdGlsbFN0aW5nU3RvY2tTdG9tYWNoU3RvbmVTdG9vbFN0b3J5U3RvdmVTdHJhdGVneVN0cmVldFN0cmlrZVN0cm9uZ1N0cnVnZ2xlU3R1ZGVudFN0dWZmU3R1bWJsZVN0eWxlU3ViamVjdFN1Ym1pdFN1YndheVN1Y2Nlc3NTdWNoU3VkZGVuU3VmZmVyU3VnYXJTdWdnZXN0U3VpdFN1bW1lclN1blN1bm55U3Vuc2V0U3VwZXJTdXBwbHlTdXByZW1lU3VyZVN1cmZhY2VTdXJnZVN1cnByaXNlU3Vycm91bmRTdXJ2ZXlTdXNwZWN0U3VzdGFpblN3YWxsb3dTd2FtcFN3YXBTd2FybVN3ZWFyU3dlZXRTd2lmdFN3aW1Td2luZ1N3aXRjaFN3b3JkU3ltYm9sU3ltcHRvbVN5cnVwU3lzdGVtVGFibGVUYWNrbGVUYWdUYWlsVGFsZW50VGFsa1RhbmtUYXBlVGFyZ2V0VGFza1Rhc3RlVGF0dG9vVGF4aVRlYWNoVGVhbVRlbGxUZW5UZW5hbnRUZW5uaXNUZW50VGVybVRlc3RUZXh0VGhhbmtUaGF0VGhlbWVUaGVuVGhlb3J5VGhlcmVUaGV5VGhpbmdUaGlzVGhvdWdodFRocmVlVGhyaXZlVGhyb3dUaHVtYlRodW5kZXJUaWNrZXRUaWRlVGlnZXJUaWx0VGltYmVyVGltZVRpbnlUaXBUaXJlZFRpc3N1ZVRpdGxlVG9hc3RUb2JhY2NvVG9kYXlUb2RkbGVyVG9lVG9nZXRoZXJUb2lsZXRUb2tlblRvbWF0b1RvbW9ycm93VG9uZVRvbmd1ZVRvbmlnaHRUb29sVG9vdGhUb3BUb3BpY1RvcHBsZVRvcmNoVG9ybmFkb1RvcnRvaXNlVG9zc1RvdGFsVG91cmlzdFRvd2FyZFRvd2VyVG93blRveVRyYWNrVHJhZGVUcmFmZmljVHJhZ2ljVHJhaW5UcmFuc2ZlclRyYXBUcmFzaFRyYXZlbFRyYXlUcmVhdFRyZWVUcmVuZFRyaWFsVHJpYmVUcmlja1RyaWdnZXJUcmltVHJpcFRyb3BoeVRyb3VibGVUcnVja1RydWVUcnVseVRydW1wZXRUcnVzdFRydXRoVHJ5VHViZVR1aXRpb25UdW1ibGVUdW5hVHVubmVsVHVya2V5VHVyblR1cnRsZVR3ZWx2ZVR3ZW50eVR3aWNlVHdpblR3aXN0VHdvVHlwZVR5cGljYWxVZ2x5VW1icmVsbGFVbmFibGVVbmF3YXJlVW5jbGVVbmNvdmVyVW5kZXJVbmRvVW5mYWlyVW5mb2xkVW5oYXBweVVuaWZvcm1VbmlxdWVVbml0VW5pdmVyc2VVbmtub3duVW5sb2NrVW50aWxVbnVzdWFsVW52ZWlsVXBkYXRlVXBncmFkZVVwaG9sZFVwb25VcHBlclVwc2V0VXJiYW5VcmdlVXNhZ2VVc2VVc2VkVXNlZnVsVXNlbGVzc1VzdWFsVXRpbGl0eVZhY2FudFZhY3V1bVZhZ3VlVmFsaWRWYWxsZXlWYWx2ZVZhblZhbmlzaFZhcG9yVmFyaW91c1Zhc3RWYXVsdFZlaGljbGVWZWx2ZXRWZW5kb3JWZW50dXJlVmVudWVWZXJiVmVyaWZ5VmVyc2lvblZlcnlWZXNzZWxWZXRlcmFuVmlhYmxlVmlicmFudFZpY2lvdXNWaWN0b3J5VmlkZW9WaWV3VmlsbGFnZVZpbnRhZ2VWaW9saW5WaXJ0dWFsVmlydXNWaXNhVmlzaXRWaXN1YWxWaXRhbFZpdmlkVm9jYWxWb2ljZVZvaWRWb2xjYW5vVm9sdW1lVm90ZVZveWFnZVdhZ2VXYWdvbldhaXRXYWxrV2FsbFdhbG51dFdhbnRXYXJmYXJlV2FybVdhcnJpb3JXYXNoV2FzcFdhc3RlV2F0ZXJXYXZlV2F5V2VhbHRoV2VhcG9uV2VhcldlYXNlbFdlYXRoZXJXZWJXZWRkaW5nV2Vla2VuZFdlaXJkV2VsY29tZVdlc3RXZXRXaGFsZVdoYXRXaGVhdFdoZWVsV2hlbldoZXJlV2hpcFdoaXNwZXJXaWRlV2lkdGhXaWZlV2lsZFdpbGxXaW5XaW5kb3dXaW5lV2luZ1dpbmtXaW5uZXJXaW50ZXJXaXJlV2lzZG9tV2lzZVdpc2hXaXRuZXNzV29sZldvbWFuV29uZGVyV29vZFdvb2xXb3JkV29ya1dvcmxkV29ycnlXb3J0aFdyYXBXcmVja1dyZXN0bGVXcmlzdFdyaXRlV3JvbmdZYXJkWWVhclllbGxvd1lvdVlvdW5nWW91dGhaZWJyYVplcm9ab25lWm9vXCI7bGV0IHdvcmRsaXN0JDE9bnVsbDtmdW5jdGlvbiBsb2FkV29yZHMkMShsYW5nKXtpZih3b3JkbGlzdCQxIT1udWxsKXtyZXR1cm59d29yZGxpc3QkMT13b3JkcyQxLnJlcGxhY2UoLyhbQS1aXSkvZyxcIiAkMVwiKS50b0xvd2VyQ2FzZSgpLnN1YnN0cmluZygxKS5zcGxpdChcIiBcIik7aWYoV29yZGxpc3QuY2hlY2sobGFuZykhPT1cIjB4M2M4YWNjMWU3YjA4ZDhlNzZmOWZkYTAxNWVmNDhkYzhjNzEwYTczY2I3ZTBmNzdiMmMxOGE5YjVhN2FkZGU2MFwiKXt3b3JkbGlzdCQxPW51bGw7dGhyb3cgbmV3IEVycm9yKFwiQklQMzkgV29yZGxpc3QgZm9yIGVuIChFbmdsaXNoKSBGQUlMRURcIil9fWNsYXNzIExhbmdFbiBleHRlbmRzIFdvcmRsaXN0e2NvbnN0cnVjdG9yKCl7c3VwZXIoXCJlblwiKX1nZXRXb3JkKGluZGV4KXtsb2FkV29yZHMkMSh0aGlzKTtyZXR1cm4gd29yZGxpc3QkMVtpbmRleF19Z2V0V29yZEluZGV4KHdvcmQpe2xvYWRXb3JkcyQxKHRoaXMpO3JldHVybiB3b3JkbGlzdCQxLmluZGV4T2Yod29yZCl9fWNvbnN0IGxhbmdFbj1uZXcgTGFuZ0VuO1dvcmRsaXN0LnJlZ2lzdGVyKGxhbmdFbik7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgd29yZHMkMj1cIkEvYmFjb0FiZG9tZW5BYmVqYUFiaWVydG9BYm9nYWRvQWJvbm9BYm9ydG9BYnJhem9BYnJpckFidWVsb0FidXNvQWNhYmFyQWNhZGVtaWFBY2Nlc29BY2Npby9uQWNlaXRlQWNlbGdhQWNlbnRvQWNlcHRhckEvY2lkb0FjbGFyYXJBY25lL0Fjb2dlckFjb3NvQWN0aXZvQWN0b0FjdHJpekFjdHVhckFjdWRpckFjdWVyZG9BY3VzYXJBZGljdG9BZG1pdGlyQWRvcHRhckFkb3Jub0FkdWFuYUFkdWx0b0FlL3Jlb0FmZWN0YXJBZmljaW8vbkFmaW5hckFmaXJtYXJBL2dpbEFnaXRhckFnb25pL2FBZ29zdG9BZ290YXJBZ3JlZ2FyQWdyaW9BZ3VhQWd1ZG9BL2d1aWxhQWd1amFBaG9nb0Fob3Jyb0FpcmVBaXNsYXJBamVkcmV6QWplbm9BanVzdGVBbGFjcmEvbkFsYW1icmVBbGFybWFBbGJhQS9sYnVtQWxjYWxkZUFsZGVhQWxlZ3JlQWxlamFyQWxlcnRhQWxldGFBbGZpbGVyQWxnYUFsZ29kby9uQWxpYWRvQWxpZW50b0FsaXZpb0FsbWFBbG1lamFBbG1pL2JhckFsdGFyQWx0ZXphQWx0aXZvQWx0b0FsdHVyYUFsdW1ub0FsemFyQW1hYmxlQW1hbnRlQW1hcG9sYUFtYXJnb0FtYXNhckEvbWJhckEvbWJpdG9BbWVub0FtaWdvQW1pc3RhZEFtb3JBbXBhcm9BbXBsaW9BbmNob0FuY2lhbm9BbmNsYUFuZGFyQW5kZS9uQW5lbWlhQS9uZ3Vsb0FuaWxsb0Evbmltb0FuaS9zQW5vdGFyQW50ZW5hQW50aWd1b0FudG9qb0FudWFsQW51bGFyQW51bmNpb0F+YWRpckF+ZWpvQX5vQXBhZ2FyQXBhcmF0b0FwZXRpdG9BcGlvQXBsaWNhckFwb2RvQXBvcnRlQXBveW9BcHJlbmRlckFwcm9iYXJBcHVlc3RhQXB1cm9BcmFkb0FyYX5hQXJhckEvcmJpdHJvQS9yYm9sQXJidXN0b0FyY2hpdm9BcmNvQXJkZXJBcmRpbGxhQXJkdW9BL3JlYUEvcmlkb0FyaWVzQXJtb25pL2FBcm5lL3NBcm9tYUFycGFBcnBvL25BcnJlZ2xvQXJyb3pBcnJ1Z2FBcnRlQXJ0aXN0YUFzYUFzYWRvQXNhbHRvQXNjZW5zb0FzZWd1cmFyQXNlb0FzZXNvckFzaWVudG9Bc2lsb0FzaXN0aXJBc25vQXNvbWJyb0Evc3Blcm9Bc3RpbGxhQXN0cm9Bc3R1dG9Bc3VtaXJBc3VudG9BdGFqb0F0YXF1ZUF0YXJBdGVudG9BdGVvQS90aWNvQXRsZXRhQS90b21vQXRyYWVyQXRyb3pBdHUvbkF1ZGF6QXVkaW9BdWdlQXVsYUF1bWVudG9BdXNlbnRlQXV0b3JBdmFsQXZhbmNlQXZhcm9BdmVBdmVsbGFuYUF2ZW5hQXZlc3RydXpBdmlvL25Bdmlzb0F5ZXJBeXVkYUF5dW5vQXphZnJhL25BemFyQXpvdGVBenUvY2FyQXp1ZnJlQXp1bEJhYmFCYWJvckJhY2hlQmFoaS9hQmFpbGVCYWphckJhbGFuemFCYWxjby9uQmFsZGVCYW1idS9CYW5jb0JhbmRhQmF+b0JhcmJhQmFyY29CYXJuaXpCYXJyb0JhL3NjdWxhQmFzdG8vbkJhc3VyYUJhdGFsbGFCYXRlcmkvYUJhdGlyQmF0dXRhQmF1L2xCYXphckJlYmUvQmViaWRhQmVsbG9CZXNhckJlc29CZXN0aWFCaWNob0JpZW5CaW5nb0JsYW5jb0Jsb3F1ZUJsdXNhQm9hQm9iaW5hQm9ib0JvY2FCb2NpbmFCb2RhQm9kZWdhQm9pbmFCb2xhQm9sZXJvQm9sc2FCb21iYUJvbmRhZEJvbml0b0Jvbm9Cb25zYS9pQm9yZGVCb3JyYXJCb3NxdWVCb3RlQm90aS9uQm8vdmVkYUJvemFsQnJhdm9CcmF6b0JyZWNoYUJyZXZlQnJpbGxvQnJpbmNvQnJpc2FCcm9jYUJyb21hQnJvbmNlQnJvdGVCcnVqYUJydXNjb0JydXRvQnVjZW9CdWNsZUJ1ZW5vQnVleUJ1ZmFuZGFCdWZvL25CdS9ob0J1aXRyZUJ1bHRvQnVyYnVqYUJ1cmxhQnVycm9CdXNjYXJCdXRhY2FCdXpvL25DYWJhbGxvQ2FiZXphQ2FiaW5hQ2FicmFDYWNhb0NhZGEvdmVyQ2FkZW5hQ2FlckNhZmUvQ2FpL2RhQ2FpbWEvbkNhamFDYWpvL25DYWxDYWxhbWFyQ2FsY2lvQ2FsZG9DYWxpZGFkQ2FsbGVDYWxtYUNhbG9yQ2Fsdm9DYW1hQ2FtYmlvQ2FtZWxsb0NhbWlub0NhbXBvQ2EvbmNlckNhbmRpbENhbmVsYUNhbmd1cm9DYW5pY2FDYW50b0NhfmFDYX5vL25DYW9iYUNhb3NDYXBhekNhcGl0YS9uQ2Fwb3RlQ2FwdGFyQ2FwdWNoYUNhcmFDYXJiby9uQ2EvcmNlbENhcmV0YUNhcmdhQ2FyaX5vQ2FybmVDYXJwZXRhQ2Fycm9DYXJ0YUNhc2FDYXNjb0Nhc2Vyb0Nhc3BhQ2FzdG9yQ2F0b3JjZUNhdHJlQ2F1ZGFsQ2F1c2FDYXpvQ2Vib2xsYUNlZGVyQ2Vkcm9DZWxkYUNlL2xlYnJlQ2Vsb3NvQ2UvbHVsYUNlbWVudG9DZW5pemFDZW50cm9DZXJjYUNlcmRvQ2VyZXphQ2Vyb0NlcnJhckNlcnRlemFDZS9zcGVkQ2V0cm9DaGFjYWxDaGFsZWNvQ2hhbXB1L0NoYW5jbGFDaGFwYUNoYXJsYUNoaWNvQ2hpc3RlQ2hpdm9DaG9xdWVDaG96YUNodWxldGFDaHVwYXJDaWNsby9uQ2llZ29DaWVsb0NpZW5DaWVydG9DaWZyYUNpZ2Fycm9DaW1hQ2luY29DaW5lQ2ludGFDaXByZS9zQ2lyY29DaXJ1ZWxhQ2lzbmVDaXRhQ2l1ZGFkQ2xhbW9yQ2xhbkNsYXJvQ2xhc2VDbGF2ZUNsaWVudGVDbGltYUNsaS9uaWNhQ29icmVDb2NjaW8vbkNvY2hpbm9Db2NpbmFDb2NvQ28vZGlnb0NvZG9Db2ZyZUNvZ2VyQ29oZXRlQ29qaS9uQ29qb0NvbGFDb2xjaGFDb2xlZ2lvQ29sZ2FyQ29saW5hQ29sbGFyQ29sbW9Db2x1bW5hQ29tYmF0ZUNvbWVyQ29taWRhQ28vbW9kb0NvbXByYUNvbmRlQ29uZWpvQ29uZ2FDb25vY2VyQ29uc2Vqb0NvbnRhckNvcGFDb3BpYUNvcmF6by9uQ29yYmF0YUNvcmNob0NvcmRvL25Db3JvbmFDb3JyZXJDb3NlckNvc21vc0Nvc3RhQ3JhL25lb0NyYS90ZXJDcmVhckNyZWNlckNyZWkvZG9DcmVtYUNyaS9hQ3JpbWVuQ3JpcHRhQ3Jpc2lzQ3JvbW9Dcm8vbmljYUNyb3F1ZXRhQ3J1ZG9DcnV6Q3VhZHJvQ3VhcnRvQ3VhdHJvQ3Vib0N1YnJpckN1Y2hhcmFDdWVsbG9DdWVudG9DdWVyZGFDdWVzdGFDdWV2YUN1aWRhckN1bGVicmFDdWxwYUN1bHRvQ3VtYnJlQ3VtcGxpckN1bmFDdW5ldGFDdW90YUN1cG8vbkN1L3B1bGFDdXJhckN1cmlvc29DdXJzb0N1cnZhQ3V0aXNEYW1hRGFuemFEYXJEYXJkb0RhL3RpbERlYmVyRGUvYmlsRGUvY2FkYURlY2lyRGVkb0RlZmVuc2FEZWZpbmlyRGVqYXJEZWxmaS9uRGVsZ2Fkb0RlbGl0b0RlbW9yYURlbnNvRGVudGFsRGVwb3J0ZURlcmVjaG9EZXJyb3RhRGVzYXl1bm9EZXNlb0Rlc2ZpbGVEZXNudWRvRGVzdGlub0Rlc3ZpL29EZXRhbGxlRGV0ZW5lckRldWRhRGkvYURpYWJsb0RpYWRlbWFEaWFtYW50ZURpYW5hRGlhcmlvRGlidWpvRGljdGFyRGllbnRlRGlldGFEaWV6RGlmaS9jaWxEaWdub0RpbGVtYURpbHVpckRpbmVyb0RpcmVjdG9EaXJpZ2lyRGlzY29EaXNlfm9EaXNmcmF6RGl2YURpdmlub0RvYmxlRG9jZURvbG9yRG9taW5nb0RvbkRvbmFyRG9yYWRvRG9ybWlyRG9yc29Eb3NEb3Npc0RyYWdvL25Ecm9nYUR1Y2hhRHVkYUR1ZWxvRHVlfm9EdWxjZUR1L29EdXF1ZUR1cmFyRHVyZXphRHVyb0UvYmFub0VicmlvRWNoYXJFY29FY3VhZG9yRWRhZEVkaWNpby9uRWRpZmljaW9FZGl0b3JFZHVjYXJFZmVjdG9FZmljYXpFamVFamVtcGxvRWxlZmFudGVFbGVnaXJFbGVtZW50b0VsZXZhckVsaXBzZUUvbGl0ZUVsaXhpckVsb2dpb0VsdWRpckVtYnVkb0VtaXRpckVtb2Npby9uRW1wYXRlRW1wZX5vRW1wbGVvRW1wcmVzYUVuYW5vRW5jYXJnb0VuY2h1ZmVFbmNpL2FFbmVtaWdvRW5lcm9FbmZhZG9FbmZlcm1vRW5nYX5vRW5pZ21hRW5sYWNlRW5vcm1lRW5yZWRvRW5zYXlvRW5zZX5hckVudGVyb0VudHJhckVudmFzZUVudmkvb0UvcG9jYUVxdWlwb0VyaXpvRXNjYWxhRXNjZW5hRXNjb2xhckVzY3JpYmlyRXNjdWRvRXNlbmNpYUVzZmVyYUVzZnVlcnpvRXNwYWRhRXNwZWpvRXNwaS9hRXNwb3NhRXNwdW1hRXNxdWkvRXN0YXJFc3RlRXN0aWxvRXN0dWZhRXRhcGFFdGVybm9FL3RpY2FFdG5pYUV2YWRpckV2YWx1YXJFdmVudG9Fdml0YXJFeGFjdG9FeGFtZW5FeGNlc29FeGN1c2FFeGVudG9FeGlnaXJFeGlsaW9FeGlzdGlyRS94aXRvRXhwZXJ0b0V4cGxpY2FyRXhwb25lckV4dHJlbW9GYS9icmljYUZhL2J1bGFGYWNoYWRhRmEvY2lsRmFjdG9yRmFlbmFGYWphRmFsZGFGYWxsb0ZhbHNvRmFsdGFyRmFtYUZhbWlsaWFGYW1vc29GYXJhby9uRmFybWFjaWFGYXJvbEZhcnNhRmFzZUZhdGlnYUZhdW5hRmF2b3JGYXhGZWJyZXJvRmVjaGFGZWxpekZlb0ZlcmlhRmVyb3pGZS9ydGlsRmVydm9yRmVzdGkvbkZpYWJsZUZpYW56YUZpYXJGaWJyYUZpY2Npby9uRmljaGFGaWRlb0ZpZWJyZUZpZWxGaWVyYUZpZXN0YUZpZ3VyYUZpamFyRmlqb0ZpbGFGaWxldGVGaWxpYWxGaWx0cm9GaW5GaW5jYUZpbmdpckZpbml0b0Zpcm1hRmxhY29GbGF1dGFGbGVjaGFGbG9yRmxvdGFGbHVpckZsdWpvRmx1L29yRm9iaWFGb2NhRm9nYXRhRm9nby9uRm9saW9Gb2xsZXRvRm9uZG9Gb3JtYUZvcnJvRm9ydHVuYUZvcnphckZvc2FGb3RvRnJhY2Fzb0ZyYS9naWxGcmFuamFGcmFzZUZyYXVkZUZyZWkvckZyZW5vRnJlc2FGcmkvb0ZyaXRvRnJ1dGFGdWVnb0Z1ZW50ZUZ1ZXJ6YUZ1Z2FGdW1hckZ1bmNpby9uRnVuZGFGdXJnby9uRnVyaWFGdXNpbEZ1L3Rib2xGdXR1cm9HYWNlbGFHYWZhc0dhaXRhR2Fqb0dhbGFHYWxlcmkvYUdhbGxvR2FtYmFHYW5hckdhbmNob0dhbmdhR2Fuc29HYXJhamVHYXJ6YUdhc29saW5hR2FzdGFyR2F0b0dhdmlsYS9uR2VtZWxvR2VtaXJHZW5HZS9uZXJvR2VuaW9HZW50ZUdlcmFuaW9HZXJlbnRlR2VybWVuR2VzdG9HaWdhbnRlR2ltbmFzaW9HaXJhckdpcm9HbGFjaWFyR2xvYm9HbG9yaWFHb2xHb2xmb0dvbG9zb0dvbHBlR29tYUdvcmRvR29yaWxhR29ycmFHb3RhR290ZW9Hb3phckdyYWRhR3JhL2ZpY29HcmFub0dyYXNhR3JhdGlzR3JhdmVHcmlldGFHcmlsbG9HcmlwZUdyaXNHcml0b0dyb3NvckdydS9hR3J1ZXNvR3J1bW9HcnVwb0d1YW50ZUd1YXBvR3VhcmRpYUd1ZXJyYUd1aS9hR3Vpfm9HdWlvbkd1aXNvR3VpdGFycmFHdXNhbm9HdXN0YXJIYWJlckhhL2JpbEhhYmxhckhhY2VySGFjaGFIYWRhSGFsbGFySGFtYWNhSGFyaW5hSGF6SGF6YX5hSGViaWxsYUhlYnJhSGVjaG9IZWxhZG9IZWxpb0hlbWJyYUhlcmlySGVybWFub0hlL3JvZUhlcnZpckhpZWxvSGllcnJvSGkvZ2Fkb0hpZ2llbmVIaWpvSGltbm9IaXN0b3JpYUhvY2ljb0hvZ2FySG9ndWVyYUhvamFIb21icmVIb25nb0hvbm9ySG9ucmFIb3JhSG9ybWlnYUhvcm5vSG9zdGlsSG95b0h1ZWNvSHVlbGdhSHVlcnRhSHVlc29IdWV2b0h1aWRhSHVpckh1bWFub0h1L21lZG9IdW1pbGRlSHVtb0h1bmRpckh1cmFjYS9uSHVydG9JY29ub0lkZWFsSWRpb21hSS9kb2xvSWdsZXNpYUlnbHUvSWd1YWxJbGVnYWxJbHVzaW8vbkltYWdlbkltYS9uSW1pdGFySW1wYXJJbXBlcmlvSW1wb25lckltcHVsc29JbmNhcGF6SS9uZGljZUluZXJ0ZUluZmllbEluZm9ybWVJbmdlbmlvSW5pY2lvSW5tZW5zb0lubXVuZUlubmF0b0luc2VjdG9JbnN0YW50ZUludGVyZS9zSS9udGltb0ludHVpckludS90aWxJbnZpZXJub0lyYUlyaXNJcm9uaS9hSXNsYUlzbG90ZUphYmFsaS9KYWJvL25KYW1vL25KYXJhYmVKYXJkaS9uSmFycmFKYXVsYUphem1pL25KZWZlSmVyaW5nYUppbmV0ZUpvcm5hZGFKb3JvYmFKb3ZlbkpveWFKdWVyZ2FKdWV2ZXNKdWV6SnVnYWRvckp1Z29KdWd1ZXRlSnVpY2lvSnVuY29KdW5nbGFKdW5pb0p1bnRhckp1L3BpdGVySnVyYXJKdXN0b0p1dmVuaWxKdXpnYXJLaWxvS29hbGFMYWJpb0xhY2lvTGFjcmFMYWRvTGFkcm8vbkxhZ2FydG9MYS9ncmltYUxhZ3VuYUxhaWNvTGFtZXJMYS9taW5hTGEvbXBhcmFMYW5hTGFuY2hhTGFuZ29zdGFMYW56YUxhL3BpekxhcmdvTGFydmFMYS9zdGltYUxhdGFMYS90ZXhMYXRpckxhdXJlbExhdmFyTGF6b0xlYWxMZWNjaW8vbkxlY2hlTGVjdG9yTGVlckxlZ2lvL25MZWd1bWJyZUxlamFub0xlbmd1YUxlbnRvTGV+YUxlby9uTGVvcGFyZG9MZXNpby9uTGV0YWxMZXRyYUxldmVMZXllbmRhTGliZXJ0YWRMaWJyb0xpY29yTGkvZGVyTGlkaWFyTGllbnpvTGlnYUxpZ2Vyb0xpbWFMaS9taXRlTGltby9uTGltcGlvTGluY2VMaW5kb0xpL25lYUxpbmdvdGVMaW5vTGludGVybmFMaS9xdWlkb0xpc29MaXN0YUxpdGVyYUxpdGlvTGl0cm9MbGFnYUxsYW1hTGxhbnRvTGxhdmVMbGVnYXJMbGVuYXJMbGV2YXJMbG9yYXJMbG92ZXJMbHV2aWFMb2JvTG9jaW8vbkxvY29Mb2N1cmFMby9naWNhTG9ncm9Mb21icml6TG9tb0xvbmphTG90ZUx1Y2hhTHVjaXJMdWdhckx1am9MdW5hTHVuZXNMdXBhTHVzdHJvTHV0b0x1ek1hY2V0YU1hY2hvTWFkZXJhTWFkcmVNYWR1cm9NYWVzdHJvTWFmaWFNYWdpYU1hZ29NYWkvek1hbGRhZE1hbGV0YU1hbGxhTWFsb01hbWEvTWFtYm9NYW11dE1hbmNvTWFuZG9NYW5lamFyTWFuZ2FNYW5pcXVpL01hbmphck1hbm9NYW5zb01hbnRhTWF+YW5hTWFwYU1hL3F1aW5hTWFyTWFyY29NYXJlYU1hcmZpbE1hcmdlbk1hcmlkb01hL3Jtb2xNYXJyby9uTWFydGVzTWFyem9NYXNhTWEvc2NhcmFNYXNpdm9NYXRhck1hdGVyaWFNYXRpek1hdHJpek1hL3hpbW9NYXlvck1hem9yY2FNZWNoYU1lZGFsbGFNZWRpb01lL2R1bGFNZWppbGxhTWVqb3JNZWxlbmFNZWxvL25NZW1vcmlhTWVub3JNZW5zYWplTWVudGVNZW51L01lcmNhZG9NZXJlbmd1ZU1lL3JpdG9NZXNNZXNvL25NZXRhTWV0ZXJNZS90b2RvTWV0cm9NZXpjbGFNaWVkb01pZWxNaWVtYnJvTWlnYU1pbE1pbGFncm9NaWxpdGFyTWlsbG8vbk1pbW9NaW5hTWluZXJvTWkvbmltb01pbnV0b01pb3BlTWlyYXJNaXNhTWlzZXJpYU1pc2lsTWlzbW9NaXRhZE1pdG9Nb2NoaWxhTW9jaW8vbk1vZGFNb2RlbG9Nb2hvTW9qYXJNb2xkZU1vbGVyTW9saW5vTW9tZW50b01vbWlhTW9uYXJjYU1vbmVkYU1vbmphTW9udG9Nb35vTW9yYWRhTW9yZGVyTW9yZW5vTW9yaXJNb3Jyb01vcnNhTW9ydGFsTW9zY2FNb3N0cmFyTW90aXZvTW92ZXJNby92aWxNb3pvTXVjaG9NdWRhck11ZWJsZU11ZWxhTXVlcnRlTXVlc3RyYU11Z3JlTXVqZXJNdWxhTXVsZXRhTXVsdGFNdW5kb011fmVjYU11cmFsTXVyb011L3NjdWxvTXVzZW9NdXNnb011L3NpY2FNdXNsb05hL2Nhck5hY2lvL25OYWRhck5haXBlTmFyYW5qYU5hcml6TmFycmFyTmFzYWxOYXRhbE5hdGl2b05hdHVyYWxOYS91c2VhTmF2YWxOYXZlTmF2aWRhZE5lY2lvTmUvY3Rhck5lZ2FyTmVnb2Npb05lZ3JvTmVvL25OZXJ2aW9OZXRvTmV1dHJvTmV2YXJOZXZlcmFOaWNob05pZG9OaWVibGFOaWV0b05pfmV6Tml+b05pL3RpZG9OaXZlbE5vYmxlemFOb2NoZU5vL21pbmFOb3JpYU5vcm1hTm9ydGVOb3RhTm90aWNpYU5vdmF0b05vdmVsYU5vdmlvTnViZU51Y2FOdS9jbGVvTnVkaWxsb051ZG9OdWVyYU51ZXZlTnVlek51bG9OdS9tZXJvTnV0cmlhT2FzaXNPYmVzb09iaXNwb09iamV0b09icmFPYnJlcm9PYnNlcnZhck9idGVuZXJPYnZpb09jYU9jYXNvT2NlL2Fub09jaGVudGFPY2hvT2Npb09jcmVPY3Rhdm9PY3R1YnJlT2N1bHRvT2N1cGFyT2N1cnJpck9kaWFyT2Rpb09kaXNlYU9lc3RlT2ZlbnNhT2ZlcnRhT2ZpY2lvT2ZyZWNlck9ncm9PaS9kb09pL3JPam9PbGFPbGVhZGFPbGZhdG9PbGl2b09sbGFPbG1vT2xvck9sdmlkb09tYmxpZ29PbmRhT256YU9wYWNvT3BjaW8vbk8vcGVyYU9waW5hck9wb25lck9wdGFyTy9wdGljYU9wdWVzdG9PcmFjaW8vbk9yYWRvck9yYWxPL3JiaXRhT3JjYU9yZGVuT3JlamFPL3JnYW5vT3JnaS9hT3JndWxsb09yaWVudGVPcmlnZW5PcmlsbGFPcm9PcnF1ZXN0YU9ydWdhT3NhZGkvYU9zY3Vyb09zZXpub09zb09zdHJhT3Rvfm9PdHJvT3ZlamFPL3Z1bG9PL3hpZG9PeGkvZ2Vub095ZW50ZU96b25vUGFjdG9QYWRyZVBhZWxsYVBhL2dpbmFQYWdvUGFpL3NQYS9qYXJvUGFsYWJyYVBhbGNvUGFsZXRhUGEvbGlkb1BhbG1hUGFsb21hUGFscGFyUGFuUGFuYWxQYS9uaWNvUGFudGVyYVBhfnVlbG9QYXBhL1BhcGVsUGFwaWxsYVBhcXVldGVQYXJhclBhcmNlbGFQYXJlZFBhcmlyUGFyb1BhL3JwYWRvUGFycXVlUGEvcnJhZm9QYXJ0ZVBhc2FyUGFzZW9QYXNpby9uUGFzb1Bhc3RhUGF0YVBhdGlvUGF0cmlhUGF1c2FQYXV0YVBhdm9QYXlhc29QZWF0by9uUGVjYWRvUGVjZXJhUGVjaG9QZWRhbFBlZGlyUGVnYXJQZWluZVBlbGFyUGVsZGF+b1BlbGVhUGVsaWdyb1BlbGxlam9QZWxvUGVsdWNhUGVuYVBlbnNhclBlfm8vblBlby9uUGVvclBlcGlub1BlcXVlfm9QZXJhUGVyY2hhUGVyZGVyUGVyZXphUGVyZmlsUGVyaWNvUGVybGFQZXJtaXNvUGVycm9QZXJzb25hUGVzYVBlc2NhUGUvc2ltb1Blc3RhfmFQZS90YWxvUGV0cm8vbGVvUGV6UGV6dX5hUGljYXJQaWNoby9uUGllUGllZHJhUGllcm5hUGllemFQaWphbWFQaWxhclBpbG90b1BpbWllbnRhUGlub1BpbnRvclBpbnphUGl+YVBpb2pvUGlwYVBpcmF0YVBpc2FyUGlzY2luYVBpc29QaXN0YVBpdG8vblBpemNhUGxhY2FQbGFuUGxhdGFQbGF5YVBsYXphUGxlaXRvUGxlbm9QbG9tb1BsdW1hUGx1cmFsUG9icmVQb2NvUG9kZXJQb2Rpb1BvZW1hUG9lc2kvYVBvZXRhUG9sZW5Qb2xpY2kvYVBvbGxvUG9sdm9Qb21hZGFQb21lbG9Qb21vUG9tcGFQb25lclBvcmNpby9uUG9ydGFsUG9zYWRhUG9zZWVyUG9zaWJsZVBvc3RlUG90ZW5jaWFQb3Ryb1Bvem9QcmFkb1ByZWNvelByZWd1bnRhUHJlbWlvUHJlbnNhUHJlc29QcmV2aW9Qcmltb1ByaS9uY2lwZVByaXNpby9uUHJpdmFyUHJvYVByb2JhclByb2Nlc29Qcm9kdWN0b1Byb2V6YVByb2Zlc29yUHJvZ3JhbWFQcm9sZVByb21lc2FQcm9udG9Qcm9waW9Qcm8veGltb1BydWViYVB1L2JsaWNvUHVjaGVyb1B1ZG9yUHVlYmxvUHVlcnRhUHVlc3RvUHVsZ2FQdWxpclB1bG1vL25QdWxwb1B1bHNvUHVtYVB1bnRvUHV+YWxQdX5vUHVwYVB1cGlsYVB1cmUvUXVlZGFyUXVlamFRdWVtYXJRdWVyZXJRdWVzb1F1aWV0b1F1aS9taWNhUXVpbmNlUXVpdGFyUmEvYmFub1JhYmlhUmFib1JhY2lvL25SYWRpY2FsUmFpL3pSYW1hUmFtcGFSYW5jaG9SYW5nb1JhcGF6UmEvcGlkb1JhcHRvUmFzZ29SYXNwYVJhdG9SYXlvUmF6YVJhem8vblJlYWNjaW8vblJlYWxpZGFkUmViYX5vUmVib3RlUmVjYWVyUmVjZXRhUmVjaGF6b1JlY29nZXJSZWNyZW9SZWN0b1JlY3Vyc29SZWRSZWRvbmRvUmVkdWNpclJlZmxlam9SZWZvcm1hUmVmcmEvblJlZnVnaW9SZWdhbG9SZWdpclJlZ2xhUmVncmVzb1JlaGUvblJlaW5vUmVpL3JSZWphUmVsYXRvUmVsZXZvUmVsaWV2ZVJlbGxlbm9SZWxvalJlbWFyUmVtZWRpb1JlbW9SZW5jb3JSZW5kaXJSZW50YVJlcGFydG9SZXBldGlyUmVwb3NvUmVwdGlsUmVzUmVzY2F0ZVJlc2luYVJlc3BldG9SZXN0b1Jlc3VtZW5SZXRpcm9SZXRvcm5vUmV0cmF0b1JldW5pclJldmUvc1JldmlzdGFSZXlSZXphclJpY29SaWVnb1JpZW5kYVJpZXNnb1JpZmFSaS9naWRvUmlnb3JSaW5jby9uUml+by9uUmkvb1JpcXVlemFSaXNhUml0bW9SaXRvUml6b1JvYmxlUm9jZVJvY2lhclJvZGFyUm9kZW9Sb2RpbGxhUm9lclJvaml6b1Jvam9Sb21lcm9Sb21wZXJSb25Sb25jb1JvbmRhUm9wYVJvcGVyb1Jvc2FSb3NjYVJvc3Ryb1JvdGFyUnViaS9SdWJvclJ1ZG9SdWVkYVJ1Z2lyUnVpZG9SdWluYVJ1bGV0YVJ1bG9SdW1ib1J1bW9yUnVwdHVyYVJ1dGFSdXRpbmFTYS9iYWRvU2FiZXJTYWJpb1NhYmxlU2FjYXJTYWdhelNhZ3JhZG9TYWxhU2FsZG9TYWxlcm9TYWxpclNhbG1vL25TYWxvL25TYWxzYVNhbHRvU2FsdWRTYWx2YXJTYW1iYVNhbmNpby9uU2FuZGkvYVNhbmVhclNhbmdyZVNhbmlkYWRTYW5vU2FudG9TYXBvU2FxdWVTYXJkaW5hU2FydGUvblNhc3RyZVNhdGEvblNhdW5hU2F4b2ZvL25TZWNjaW8vblNlY29TZWNyZXRvU2VjdGFTZWRTZWd1aXJTZWlzU2VsbG9TZWx2YVNlbWFuYVNlbWlsbGFTZW5kYVNlbnNvclNlfmFsU2V+b3JTZXBhcmFyU2VwaWFTZXF1aS9hU2VyU2VyaWVTZXJtby9uU2VydmlyU2VzZW50YVNlc2lvL25TZXRhU2V0ZW50YVNldmVyb1NleG9TZXh0b1NpZHJhU2llc3RhU2lldGVTaWdsb1NpZ25vU2kvbGFiYVNpbGJhclNpbGVuY2lvU2lsbGFTaS9tYm9sb1NpbWlvU2lyZW5hU2lzdGVtYVNpdGlvU2l0dWFyU29icmVTb2Npb1NvZGlvU29sU29sYXBhU29sZGFkb1NvbGVkYWRTby9saWRvU29sdGFyU29sdWNpby9uU29tYnJhU29uZGVvU29uaWRvU29ub3JvU29ucmlzYVNvcGFTb3BsYXJTb3BvcnRlU29yZG9Tb3JwcmVzYVNvcnRlb1Nvc3RlL25Tby90YW5vU3VhdmVTdWJpclN1Y2Vzb1N1ZG9yU3VlZ3JhU3VlbG9TdWV+b1N1ZXJ0ZVN1ZnJpclN1amV0b1N1bHRhL25TdW1hclN1cGVyYXJTdXBsaXJTdXBvbmVyU3VwcmVtb1N1clN1cmNvU3VyZX5vU3VyZ2lyU3VzdG9TdXRpbFRhYmFjb1RhYmlxdWVUYWJsYVRhYnUvVGFjb1RhY3RvVGFqb1RhbGFyVGFsY29UYWxlbnRvVGFsbGFUYWxvL25UYW1hfm9UYW1ib3JUYW5nb1RhbnF1ZVRhcGFUYXBldGVUYXBpYVRhcG8vblRhcXVpbGxhVGFyZGVUYXJlYVRhcmlmYVRhcmpldGFUYXJvdFRhcnJvVGFydGFUYXR1YWplVGF1cm9UYXphVGF6by9uVGVhdHJvVGVjaG9UZWNsYVRlL2NuaWNhVGVqYWRvVGVqZXJUZWppZG9UZWxhVGVsZS9mb25vVGVtYVRlbW9yVGVtcGxvVGVuYXpUZW5kZXJUZW5lclRlbmlzVGVuc29UZW9yaS9hVGVyYXBpYVRlcmNvVGUvcm1pbm9UZXJudXJhVGVycm9yVGVzaXNUZXNvcm9UZXN0aWdvVGV0ZXJhVGV4dG9UZXpUaWJpb1RpYnVyby9uVGllbXBvVGllbmRhVGllcnJhVGllc29UaWdyZVRpamVyYVRpbGRlVGltYnJlVGkvbWlkb1RpbW9UaW50YVRpL29UaS9waWNvVGlwb1RpcmFUaXJvL25UaXRhL25UaS90ZXJlVGkvdHVsb1RpemFUb2FsbGFUb2JpbGxvVG9jYXJUb2Npbm9Ub2RvVG9nYVRvbGRvVG9tYXJUb25vVG9udG9Ub3BhclRvcGVUb3F1ZVRvL3JheFRvcmVyb1Rvcm1lbnRhVG9ybmVvVG9yb1RvcnBlZG9Ub3JyZVRvcnNvVG9ydHVnYVRvc1Rvc2NvVG9zZXJUby94aWNvVHJhYmFqb1RyYWN0b3JUcmFlclRyYS9maWNvVHJhZ29UcmFqZVRyYW1vVHJhbmNlVHJhdG9UcmF1bWFUcmF6YXJUcmUvYm9sVHJlZ3VhVHJlaW50YVRyZW5UcmVwYXJUcmVzVHJpYnVUcmlnb1RyaXBhVHJpc3RlVHJpdW5mb1Ryb2Zlb1Ryb21wYVRyb25jb1Ryb3BhVHJvdGVUcm96b1RydWNvVHJ1ZW5vVHJ1ZmFUdWJlcmkvYVR1Ym9UdWVydG9UdW1iYVR1bW9yVHUvbmVsVHUvbmljYVR1cmJpbmFUdXJpc21vVHVybm9UdXRvclViaWNhclUvbGNlcmFVbWJyYWxVbmlkYWRVbmlyVW5pdmVyc29Vbm9VbnRhclV+YVVyYmFub1VyYmVVcmdlbnRlVXJuYVVzYXJVc3VhcmlvVS90aWxVdG9waS9hVXZhVmFjYVZhY2kvb1ZhY3VuYVZhZ2FyVmFnb1ZhaW5hVmFqaWxsYVZhbGVWYS9saWRvVmFsbGVWYWxvclZhL2x2dWxhVmFtcGlyb1ZhcmFWYXJpYXJWYXJvL25WYXNvVmVjaW5vVmVjdG9yVmVoaS9jdWxvVmVpbnRlVmVqZXpWZWxhVmVsZXJvVmVsb3pWZW5hVmVuY2VyVmVuZGFWZW5lbm9WZW5nYXJWZW5pclZlbnRhVmVudXNWZXJWZXJhbm9WZXJib1ZlcmRlVmVyZWRhVmVyamFWZXJzb1ZlcnRlclZpL2FWaWFqZVZpYnJhclZpY2lvVmkvY3RpbWFWaWRhVmkvZGVvVmlkcmlvVmllam9WaWVybmVzVmlnb3JWaWxWaWxsYVZpbmFncmVWaW5vVml+ZWRvVmlvbGkvblZpcmFsVmlyZ29WaXJ0dWRWaXNvclZpL3NwZXJhVmlzdGFWaXRhbWluYVZpdWRvVml2YXpWaXZlcm9WaXZpclZpdm9Wb2xjYS9uVm9sdW1lblZvbHZlclZvcmF6Vm90YXJWb3RvVm96VnVlbG9WdWxnYXJZYWNlcllhdGVZZWd1YVllbWFZZXJub1llc29Zb2RvWW9nYVlvZ3VyWmFmaXJvWmFuamFaYXBhdG9aYXJ6YVpvbmFab3Jyb1p1bW9adXJkb1wiO2NvbnN0IGxvb2t1cD17fTtsZXQgd29yZGxpc3QkMj1udWxsO2Z1bmN0aW9uIGRyb3BEaWFjcml0aWMod29yZCl7bG9nZ2VyJGsuY2hlY2tOb3JtYWxpemUoKTtyZXR1cm4gdG9VdGY4U3RyaW5nKEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCh0b1V0ZjhCeXRlcyh3b3JkLm5vcm1hbGl6ZShcIk5GRFwiKS50b0xvd2VyQ2FzZSgpKSxjPT57cmV0dXJuIGM+PTY1JiZjPD05MHx8Yz49OTcmJmM8PTEyM30pKX1mdW5jdGlvbiBleHBhbmQod29yZCl7Y29uc3Qgb3V0cHV0PVtdO0FycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodG9VdGY4Qnl0ZXMod29yZCksYz0+e2lmKGM9PT00Nyl7b3V0cHV0LnB1c2goMjA0KTtvdXRwdXQucHVzaCgxMjkpfWVsc2UgaWYoYz09PTEyNil7b3V0cHV0LnB1c2goMTEwKTtvdXRwdXQucHVzaCgyMDQpO291dHB1dC5wdXNoKDEzMSl9ZWxzZXtvdXRwdXQucHVzaChjKX19KTtyZXR1cm4gdG9VdGY4U3RyaW5nKG91dHB1dCl9ZnVuY3Rpb24gbG9hZFdvcmRzJDIobGFuZyl7aWYod29yZGxpc3QkMiE9bnVsbCl7cmV0dXJufXdvcmRsaXN0JDI9d29yZHMkMi5yZXBsYWNlKC8oW0EtWl0pL2csXCIgJDFcIikudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMSkuc3BsaXQoXCIgXCIpLm1hcCh3PT5leHBhbmQodykpO3dvcmRsaXN0JDIuZm9yRWFjaCgod29yZCxpbmRleCk9Pntsb29rdXBbZHJvcERpYWNyaXRpYyh3b3JkKV09aW5kZXh9KTtpZihXb3JkbGlzdC5jaGVjayhsYW5nKSE9PVwiMHhmNzRmYjcwOTJhZWFjZGZiZjg5NTk1NTdkZTIyMDk4ZGE1MTIyMDdmYjlmMTA5Y2I1MjY5OTQ5MzhjZjQwMzAwXCIpe3dvcmRsaXN0JDI9bnVsbDt0aHJvdyBuZXcgRXJyb3IoXCJCSVAzOSBXb3JkbGlzdCBmb3IgZXMgKFNwYW5pc2gpIEZBSUxFRFwiKX19Y2xhc3MgTGFuZ0VzIGV4dGVuZHMgV29yZGxpc3R7Y29uc3RydWN0b3IoKXtzdXBlcihcImVzXCIpfWdldFdvcmQoaW5kZXgpe2xvYWRXb3JkcyQyKHRoaXMpO3JldHVybiB3b3JkbGlzdCQyW2luZGV4XX1nZXRXb3JkSW5kZXgod29yZCl7bG9hZFdvcmRzJDIodGhpcyk7cmV0dXJuIGxvb2t1cFtkcm9wRGlhY3JpdGljKHdvcmQpXX19Y29uc3QgbGFuZ0VzPW5ldyBMYW5nRXM7V29yZGxpc3QucmVnaXN0ZXIobGFuZ0VzKTtcInVzZSBzdHJpY3RcIjtjb25zdCB3b3JkcyQzPVwiQWJhaXNzZXJBYmFuZG9uQWJkaXF1ZXJBYmVpbGxlQWJvbGlyQWJvcmRlckFib3V0aXJBYm95ZXJBYnJhc2lmQWJyZXV2ZXJBYnJpdGVyQWJyb2dlckFicnVwdEFic2VuY2VBYnNvbHVBYnN1cmRlQWJ1c2lmQWJ5c3NhbEFjYWRlL21pZUFjYWpvdUFjYXJpZW5BY2NhYmxlckFjY2VwdGVyQWNjbGFtZXJBY2NvbGFkZUFjY3JvY2hlQWNjdXNlckFjZXJiZUFjaGF0QWNoZXRlckFjaWR1bGVyQWNpZXJBY29tcHRlQWNxdWUvcmlyQWNyb255bWVBY3RldXJBY3RpZkFjdHVlbEFkZXB0ZUFkZS9xdWF0QWRoZS9zaWZBZGplY3RpZkFkanVnZXJBZG1ldHRyZUFkbWlyZXJBZG9wdGVyQWRvcmVyQWRvdWNpckFkcmVzc2VBZHJvaXRBZHVsdGVBZHZlcmJlQWUvcmVyQWUvcm9uZWZBZmZhaXJlQWZmZWN0ZXJBZmZpY2hlQWZmcmV1eEFmZnVibGVyQWdhY2VyQWdlbmNlckFnaWxlQWdpdGVyQWdyYWZlckFncmUvYWJsZUFncnVtZUFpZGVyQWlndWlsbGVBaWxpZXJBaW1hYmxlQWlzYW5jZUFqb3V0ZXJBanVzdGVyQWxhcm1lckFsY2hpbWllQWxlcnRlQWxnZS1icmVBbGd1ZUFsaWUvbmVyQWxpbWVudEFsbGUvZ2VyQWxsaWFnZUFsbG91ZXJBbGx1bWVyQWxvdXJkaXJBbHBhZ2FBbHRlc3NlQWx2ZS9vbGVBbWF0ZXVyQW1iaWd1QW1icmVBbWUvbmFnZXJBbWVydHVtZUFtaWRvbkFtaXJhbEFtb3JjZXJBbW91ckFtb3ZpYmxlQW1waGliaWVBbXBsZXVyQW11c2FudEFuYWx5c2VBbmFwaG9yZUFuYXJjaGllQW5hdG9taWVBbmNpZW5BbmUvYW50aXJBbmdsZUFuZ29pc3NlQW5ndWxldXhBbmltYWxBbm5leGVyQW5ub25jZUFubnVlbEFub2RpbkFub21hbGllQW5vbnltZUFub3JtYWxBbnRlbm5lQW50aWRvdGVBbnhpZXV4QXBhaXNlckFwZS9yaXRpZkFwbGFuaXJBcG9sb2dpZUFwcGFyZWlsQXBwZWxlckFwcG9ydGVyQXBwdXllckFxdWFyaXVtQXF1ZWR1Y0FyYml0cmVBcmJ1c3RlQXJkZXVyQXJkb2lzZUFyZ2VudEFybGVxdWluQXJtYXR1cmVBcm1lbWVudEFybW9pcmVBcm11cmVBcnBlbnRlckFycmFjaGVyQXJyaXZlckFycm9zZXJBcnNlbmljQXJ0ZS9yaWVsQXJ0aWNsZUFzcGVjdEFzcGhhbHRlQXNwaXJlckFzc2F1dEFzc2VydmlyQXNzaWV0dGVBc3NvY2llckFzc3VyZXJBc3RpY290QXN0cmVBc3R1Y2VBdGVsaWVyQXRvbWVBdHJpdW1BdHJvY2VBdHRhcXVlQXR0ZW50aWZBdHRpcmVyQXR0cmFwZXJBdWJhaW5lQXViZXJnZUF1ZGFjZUF1ZGlibGVBdWd1cmVyQXVyb3JlQXV0b21uZUF1dHJ1Y2hlQXZhbGVyQXZhbmNlckF2YXJpY2VBdmVuaXJBdmVyc2VBdmV1Z2xlQXZpYXRldXJBdmlkZUF2aW9uQXZpc2VyQXZvaW5lQXZvdWVyQXZyaWxBeGlhbEF4aW9tZUJhZGdlQmFmb3VlckJhZ2FnZUJhZ3VldHRlQmFpZ25hZGVCYWxhbmNlckJhbGNvbkJhbGVpbmVCYWxpc2FnZUJhbWJpbkJhbmNhaXJlQmFuZGFnZUJhbmxpZXVlQmFubmllLXJlQmFucXVpZXJCYXJiaWVyQmFyaWxCYXJvbkJhcnF1ZUJhcnJhZ2VCYXNzaW5CYXN0aW9uQmF0YWlsbGVCYXRlYXVCYXR0ZXJpZUJhdWRyaWVyQmF2YXJkZXJCZWxldHRlQmUvbGllckJlbG90ZUJlL25lL2ZpY2VCZXJjZWF1QmVyZ2VyQmVybGluZUJlcm11ZGFCZXNhY2VCZXNvZ25lQmUvdGFpbEJldXJyZUJpYmVyb25CaWN5Y2xlQmlkdWxlQmlqb3VCaWxhbkJpbGluZ3VlQmlsbGFyZEJpbmFpcmVCaW9sb2dpZUJpb3BzaWVCaW90eXBlQmlzY3VpdEJpc29uQmlzdG91cmlCaXR1bWVCaXphcnJlQmxhZmFyZEJsYWd1ZUJsYW5jaGlyQmxlc3NhbnRCbGluZGVyQmxvbmRCbG9xdWVyQmxvdXNvbkJvYmFyZEJvYmluZUJvaXJlQm9pc2VyQm9saWRlQm9uYm9uQm9uZGlyQm9uaGV1ckJvbmlmaWVyQm9udXNCb3JkdXJlQm9ybmVCb3R0ZUJvdWNsZUJvdWV1eEJvdWdpZUJvdWxvbkJvdXF1aW5Cb3Vyc2VCb3Vzc29sZUJvdXRpcXVlQm94ZXVyQnJhbmNoZUJyYXNpZXJCcmF2ZUJyZWJpc0JyZS1jaGVCcmV1dmFnZUJyaWNvbGVyQnJpZ2FkZUJyaWxsYW50QnJpb2NoZUJyaXF1ZUJyb2NodXJlQnJvZGVyQnJvbnplckJyb3Vzc2VCcm95ZXVyQnJ1bWVCcnVzcXVlQnJ1dGFsQnJ1eWFudEJ1ZmZsZUJ1aXNzb25CdWxsZXRpbkJ1cmVhdUJ1cmluQnVzdGllckJ1dGluZXJCdXRvaXJCdXZhYmxlQnV2ZXR0ZUNhYmFub25DYWJpbmVDYWNoZXR0ZUNhZGVhdUNhZHJlQ2FmZS9pbmVDYWlsbG91Q2Fpc3NvbkNhbGN1bGVyQ2FsZXBpbkNhbGlicmVDYWxtZXJDYWxvbW5pZUNhbHZhaXJlQ2FtYXJhZGVDYW1lL3JhQ2FtaW9uQ2FtcGFnbmVDYW5hbENhbmV0b25DYW5vbkNhbnRpbmVDYW51bGFyQ2FwYWJsZUNhcG9yYWxDYXByaWNlQ2Fwc3VsZUNhcHRlckNhcHVjaGVDYXJhYmluZUNhcmJvbmVDYXJlc3NlckNhcmlib3VDYXJuYWdlQ2Fyb3R0ZUNhcnJlYXVDYXJ0b25DYXNjYWRlQ2FzaWVyQ2FzcXVlQ2Fzc3VyZUNhdXNlckNhdXRpb25DYXZhbGllckNhdmVybmVDYXZpYXJDZS9kaWxsZUNlaW50dXJlQ2UvbGVzdGVDZWxsdWxlQ2VuZHJpZXJDZW5zdXJlckNlbnRyYWxDZXJjbGVDZS9yZS9icmFsQ2VyaXNlQ2VybmVyQ2VydmVhdUNlc3NlckNoYWdyaW5DaGFpc2VDaGFsZXVyQ2hhbWJyZUNoYW5jZUNoYXBpdHJlQ2hhcmJvbkNoYXNzZXVyQ2hhdG9uQ2hhdXNzb25DaGF2aXJlckNoZW1pc2VDaGVuaWxsZUNoZS9xdWllckNoZXJjaGVyQ2hldmFsQ2hpZW5DaGlmZnJlQ2hpZ25vbkNoaW1lLXJlQ2hpb3RDaGxvcnVyZUNob2NvbGF0Q2hvaXNpckNob3NlQ2hvdWV0dGVDaHJvbWVDaHV0ZUNpZ2FyZUNpZ29nbmVDaW1lbnRlckNpbmUvbWFDaW50cmVyQ2lyY3VsZXJDaXJlckNpcnF1ZUNpdGVybmVDaXRveWVuQ2l0cm9uQ2l2aWxDbGFpcm9uQ2xhbWV1ckNsYXF1ZXJDbGFzc2VDbGF2aWVyQ2xpZW50Q2xpZ25lckNsaW1hdENsaXZhZ2VDbG9jaGVDbG9uYWdlQ2xvcG9ydGVDb2JhbHRDb2JyYUNvY2Fzc2VDb2NvdGllckNvZGVyQ29kaWZpZXJDb2ZmcmVDb2duZXJDb2hlL3Npb25Db2lmZmVyQ29pbmNlckNvbGUtcmVDb2xpYnJpQ29sbGluZUNvbG1hdGVyQ29sb25lbENvbWJhdENvbWUvZGllQ29tbWFuZGVDb21wYWN0Q29uY2VydENvbmR1aXJlQ29uZmllckNvbmdlbGVyQ29ubm90ZXJDb25zb25uZUNvbnRhY3RDb252ZXhlQ29wYWluQ29waWVDb3JhaWxDb3JiZWF1Q29yZGFnZUNvcm5pY2hlQ29ycHVzQ29ycmVjdENvcnRlLWdlQ29zbWlxdWVDb3N0dW1lQ290b25Db3VkZUNvdXB1cmVDb3VyYWdlQ291dGVhdUNvdXZyaXJDb3lvdGVDcmFiZUNyYWludGVDcmF2YXRlQ3JheW9uQ3JlL2F0dXJlQ3JlL2RpdGVyQ3JlL21ldXhDcmV1c2VyQ3JldmV0dGVDcmlibGVyQ3JpZXJDcmlzdGFsQ3JpdGUtcmVDcm9pcmVDcm9xdWVyQ3JvdGFsZUNydWNpYWxDcnVlbENyeXB0ZXJDdWJpcXVlQ3VlaWxsaXJDdWlsbGUtcmVDdWlzaW5lQ3VpdnJlQ3VsbWluZXJDdWx0aXZlckN1bXVsZXJDdXBpZGVDdXJhdGlmQ3Vyc2V1ckN5YW51cmVDeWNsZUN5bGluZHJlQ3luaXF1ZURhaWduZXJEYW1pZXJEYW5nZXJEYW5zZXVyRGF1cGhpbkRlL2JhdHRyZURlL2JpdGVyRGUvYm9yZGVyRGUvYnJpZGVyRGUvYnV0YW50RGUvY2FsZXJEZS9jZW1icmVEZS9jaGlyZXJEZS9jaWRlckRlL2NsYXJlckRlL2NvcmVyRGUvY3JpcmVEZS9jdXBsZXJEZS9kYWxlRGUvZHVjdGlmRGUvZXNzZURlL2ZlbnNpZkRlL2ZpbGVyRGUvZnJheWVyRGUvZ2FnZXJEZS9naXZyZXJEZS9nbHV0aXJEZS9ncmFmZXJEZS9qZXVuZXJEZS9saWNlRGUvbG9nZXJEZW1hbmRlckRlbWV1cmVyRGUvbW9saXJEZS9uaWNoZXJEZS9ub3VlckRlbnRlbGxlRGUvbnVkZXJEZS9wYXJ0RGUvcGVuc2VyRGUvcGhhc2VyRGUvcGxhY2VyRGUvcG9zZXJEZS9yYW5nZXJEZS9yb2JlckRlL3Nhc3RyZURlc2NlbnRlRGUvc2VydERlL3NpZ25lckRlL3NvYmUvaXJEZXNzaW5lckRlc3RyaWVyRGUvdGFjaGVyRGUvdGVzdGVyRGUvdG91cmVyRGUvdHJlc3NlRGV2YW5jZXJEZXZlbmlyRGV2aW5lckRldm9pckRpYWJsZURpYWxvZ3VlRGlhbWFudERpY3RlckRpZmZlL3JlckRpZ2UvcmVyRGlnaXRhbERpZ25lRGlsdWVyRGltYW5jaGVEaW1pbnVlckRpb3h5ZGVEaXJlY3RpZkRpcmlnZXJEaXNjdXRlckRpc3Bvc2VyRGlzc2lwZXJEaXN0YW5jZURpdmVydGlyRGl2aXNlckRvY2lsZURvY3RldXJEb2dtZURvaWd0RG9tYWluZURvbWljaWxlRG9tcHRlckRvbmF0ZXVyRG9uam9uRG9ubmVyRG9wYW1pbmVEb3J0b2lyRG9ydXJlRG9zYWdlRG9zZXVyRG9zc2llckRvdGF0aW9uRG91YW5pZXJEb3VibGVEb3VjZXVyRG91dGVyRG95ZW5EcmFnb25EcmFwZXJEcmVzc2VyRHJpYmJsZXJEcm9pdHVyZUR1cGVyaWVEdXBsZXhlRHVyYWJsZUR1cmNpckR5bmFzdGllRS9ibG91aXJFL2NhcnRlckUvY2hhcnBlRS9jaGVsbGVFL2NsYWlyZXJFL2NsaXBzZUUvY2xvcmVFL2NsdXNlRS9jb2xlRS9jb25vbWllRS9jb3JjZUUvY291dGVyRS9jcmFzZXJFL2NyZS9tZXJFL2NyaXZhaW5FL2Nyb3VFL2N1bWVFL2N1cmV1aWxFL2RpZmllckUvZHVxdWVyRWZmYWNlckVmZmVjdGlmRWZmaWdpZUVmZm9ydEVmZnJheWVyRWZmdXNpb25FL2dhbGlzZXJFL2dhcmVyRS9qZWN0ZXJFL2xhYm9yZXJFL2xhcmdpckUvbGVjdHJvbkUvbGUvZ2FudEUvbGUvcGhhbnRFL2xlLXZlRS9saWdpYmxlRS9saXRpc21lRS9sb2dlRS9sdWNpZGVyRS9sdWRlckVtYmFsbGVyRW1iZWxsaXJFbWJyeW9uRS9tZXJhdWRlRS9taXNzaW9uRW1tZW5lckUvbW90aW9uRS9tb3V2b2lyRW1wZXJldXJFbXBsb3llckVtcG9ydGVyRW1wcmlzZUUvbXVsc2lvbkVuY2FkcmVyRW5jaGUtcmVFbmNsYXZlRW5jb2NoZUVuZGlndWVyRW5kb3NzZXJFbmRyb2l0RW5kdWlyZUUvbmVyZ2llRW5mYW5jZUVuZmVybWVyRW5mb3VpckVuZ2FnZXJFbmdpbkVuZ2xvYmVyRS9uaWdtZUVuamFtYmVyRW5qZXVFbmxldmVyRW5uZW1pRW5udXlldXhFbnJpY2hpckVucm9iYWdlRW5zZWlnbmVFbnRhc3NlckVudGVuZHJlRW50aWVyRW50b3VyZXJFbnRyYXZlckUvbnVtZS9yZXJFbnZhaGlyRW52aWFibGVFbnZveWVyRW56eW1lRS9vbGllbkUvcGFpc3NpckUvcGFyZ25lRS9wYXRhbnRFL3BhdWxlRS9waWNlcmllRS9waWRlL21pZUUvcGllckUvcGlsb2d1ZUUvcGluZUUvcGlzb2RlRS9waXRhcGhlRS9wb3F1ZUUvcHJldXZlRS9wcm91dmVyRS9wdWlzYW50RS9xdWVycmVFL3F1aXBlRS9yaWdlckUvcm9zaW9uRXJyZXVyRS9ydXB0aW9uRXNjYWxpZXJFc3BhZG9uRXNwZS1jZUVzcGllLWdsZUVzcG9pckVzcHJpdEVzcXVpdmVyRXNzYXllckVzc2VuY2VFc3NpZXVFc3NvcmVyRXN0aW1lRXN0b21hY0VzdHJhZGVFL3RhZ2UtcmVFL3RhbGVyRS90YW5jaGVFL3RhdGlxdWVFL3RlaW5kcmVFL3RlbmRvaXJFL3Rlcm5lbEUvdGhhbm9sRS90aGlxdWVFdGhuaWVFL3RpcmVyRS90b2ZmZXJFL3RvaWxlRS90b25uYW50RS90b3VyZGlyRS90cmFuZ2VFL3Ryb2l0RS90dWRlRXVwaG9yaWVFL3ZhbHVlckUvdmFzaW9uRS92ZW50YWlsRS92aWRlbmNlRS92aXRlckUvdm9sdXRpZkUvdm9xdWVyRXhhY3RFeGFnZS9yZXJFeGF1Y2VyRXhjZWxsZXJFeGNpdGFudEV4Y2x1c2lmRXhjdXNlRXhlL2N1dGVyRXhlbXBsZUV4ZXJjZXJFeGhhbGVyRXhob3J0ZXJFeGlnZW5jZUV4aWxlckV4aXN0ZXJFeG90aXF1ZUV4cGUvZGllckV4cGxvcmVyRXhwb3NlckV4cHJpbWVyRXhxdWlzRXh0ZW5zaWZFeHRyYWlyZUV4dWx0ZXJGYWJsZUZhYnVsZXV4RmFjZXR0ZUZhY2lsZUZhY3R1cmVGYWlibGlyRmFsYWlzZUZhbWV1eEZhbWlsbGVGYXJjZXVyRmFyZmVsdUZhcmluZUZhcm91Y2hlRmFzY2luZXJGYXRhbEZhdGlndWVGYXVjb25GYXV0aWZGYXZldXJGYXZvcmlGZS9icmlsZUZlL2NvbmRlckZlL2RlL3JlckZlL2xpbkZlbW1lRmUvbXVyRmVuZG9pckZlL29kYWxGZXJtZXJGZS9yb2NlRmVydmV1ckZlc3RpdmFsRmV1aWxsZUZldXRyZUZlL3ZyaWVyRmlhc2NvRmljZWxlckZpY3RpZkZpZGUtbGVGaWd1cmVGaWxhdHVyZUZpbGV0YWdlRmlsaWUtcmVGaWxsZXVsRmlsbWVyRmlsb3VGaWx0cmVyRmluYW5jZXJGaW5pckZpb2xlRmlybWVGaXNzdXJlRml4ZXJGbGFpcmVyRmxhbW1lRmxhc3F1ZUZsYXR0ZXVyRmxlL2F1RmxlLWNoZUZsZXVyRmxleGlvbkZsb2NvbkZsb3JlRmx1Y3R1ZXJGbHVpZGVGbHV2aWFsRm9saWVGb25kZXJpZUZvbmdpYmxlRm9udGFpbmVGb3JjZXJGb3JnZXJvbkZvcm11bGVyRm9ydHVuZUZvc3NpbGVGb3VkcmVGb3VnZS1yZUZvdWlsbGVyRm91bHVyZUZvdXJtaUZyYWdpbGVGcmFpc2VGcmFuY2hpckZyYXBwZXJGcmF5ZXVyRnJlL2dhdGVGcmVpbmVyRnJlbG9uRnJlL21pckZyZS9uZS9zaWVGcmUtcmVGcmlhYmxlRnJpY3Rpb25Gcmlzc29uRnJpdm9sZUZyb2lkRnJvbWFnZUZyb250YWxGcm90dGVyRnJ1aXRGdWdpdGlmRnVpdGVGdXJldXJGdXJpZXV4RnVydGlmRnVzaW9uRnV0dXJHYWduZXJHYWxheGllR2FsZXJpZUdhbWJhZGVyR2FyYW50aXJHYXJkaWVuR2FybmlyR2FycmlndWVHYXplbGxlR2F6b25HZS9hbnRHZS9sYXRpbmVHZS9sdWxlR2VuZGFybWVHZS9uZS9yYWxHZS9uaWVHZW5vdUdlbnRpbEdlL29sb2dpZUdlL29tZS10cmVHZS9yYW5pdW1HZXJtZUdlc3R1ZWxHZXlzZXJHaWJpZXJHaWNsZXJHaXJhZmVHaXZyZUdsYWNlR2xhaXZlR2xpc3Nlckdsb2JlR2xvaXJlR2xvcmlldXhHb2xmZXVyR29tbWVHb25mbGVyR29yZ2VHb3JpbGxlR291ZHJvbkdvdWZmcmVHb3Vsb3RHb3VwaWxsZUdvdXJtYW5kR291dHRlR3JhZHVlbEdyYWZmaXRpR3JhaW5lR3JhbmRHcmFwcGluR3JhdHVpdEdyYXZpckdyZW5hdEdyaWZmdXJlR3JpbGxlckdyaW1wZXJHcm9nbmVyR3JvbmRlckdyb3R0ZUdyb3VwZUdydWdlckdydXRpZXJHcnV5ZS1yZUd1ZS9wYXJkR3VlcnJpZXJHdWlkZUd1aW1hdXZlR3VpdGFyZUd1c3RhdGlmR3ltbmFzdGVHeXJvc3RhdEhhYml0dWRlSGFjaG9pckhhbHRlSGFtZWF1SGFuZ2FySGFubmV0b25IYXJpY290SGFybW9uaWVIYXJwb25IYXNhcmRIZS9saXVtSGUvbWF0b21lSGVyYmVIZS9yaXNzb25IZXJtaW5lSGUvcm9uSGUvc2l0ZXJIZXVyZXV4SGliZXJuZXJIaWJvdUhpbGFyYW50SGlzdG9pcmVIaXZlckhvbWFyZEhvbW1hZ2VIb21vZ2UtbmVIb25uZXVySG9ub3JlckhvbnRldXhIb3JkZUhvcml6b25Ib3Jsb2dlSG9ybW9uZUhvcnJpYmxlSG91bGV1eEhvdXNzZUh1YmxvdEh1aWxldXhIdW1haW5IdW1ibGVIdW1pZGVIdW1vdXJIdXJsZXJIeWRyb21lbEh5Z2llLW5lSHltbmVIeXBub3NlSWR5bGxlSWdub3JlcklndWFuZUlsbGljaXRlSWxsdXNpb25JbWFnZUltYmliZXJJbWl0ZXJJbW1lbnNlSW1tb2JpbGVJbW11YWJsZUltcGFjdEltcGUvcmlhbEltcGxvcmVySW1wb3NlckltcHJpbWVySW1wdXRlckluY2FybmVySW5jZW5kaWVJbmNpZGVudEluY2xpbmVySW5jb2xvcmVJbmRleGVySW5kaWNlSW5kdWN0aWZJbmUvZGl0SW5lcHRpZUluZXhhY3RJbmZpbmlJbmZsaWdlckluZm9ybWVySW5mdXNpb25JbmdlL3JlckluaGFsZXJJbmhpYmVySW5qZWN0ZXJJbmp1cmVJbm5vY2VudElub2N1bGVySW5vbmRlckluc2NyaXJlSW5zZWN0ZUluc2lnbmVJbnNvbGl0ZUluc3BpcmVySW5zdGluY3RJbnN1bHRlckludGFjdEludGVuc2VJbnRpbWVJbnRyaWd1ZUludHVpdGlmSW51dGlsZUludmFzaW9uSW52ZW50ZXJJbnZpdGVySW52b3F1ZXJJcm9uaXF1ZUlycmFkaWVySXJyZS9lbElycml0ZXJJc29sZXJJdm9pcmVJdnJlc3NlSmFndWFySmFpbGxpckphbWJlSmFudmllckphcmRpbkphdWdlckphdW5lSmF2ZWxvdEpldGFibGVKZXRvbkpldWRpSmV1bmVzc2VKb2luZHJlSm9uY2hlckpvbmdsZXJKb3VldXJKb3Vpc3NpZkpvdXJuYWxKb3ZpYWxKb3lhdUpveWV1eEp1YmlsZXJKdWdlbWVudEp1bmlvckp1cG9uSnVyaXN0ZUp1c3RpY2VKdXRldXhKdXZlL25pbGVLYXlha0tpbW9ub0tpb3NxdWVMYWJlbExhYmlhbExhYm91cmVyTGFjZS9yZXJMYWN0b3NlTGFndW5lTGFpbmVMYWlzc2VyTGFpdGllckxhbWJlYXVMYW1lbGxlTGFtcGVMYW5jZXVyTGFuZ2FnZUxhbnRlcm5lTGFwaW5MYXJnZXVyTGFybWVMYXVyaWVyTGF2YWJvTGF2b2lyTGVjdHVyZUxlL2dhbExlL2dlckxlL2d1bWVMZXNzaXZlTGV0dHJlTGV2aWVyTGV4aXF1ZUxlL3phcmRMaWFzc2VMaWJlL3JlckxpYnJlTGljZW5jZUxpY29ybmVMaWUtZ2VMaWUtdnJlTGlnYXR1cmVMaWdvdGVyTGlndWVMaW1lckxpbWl0ZUxpbW9uYWRlTGltcGlkZUxpbmUvYWlyZUxpbmdvdExpb25jZWF1TGlxdWlkZUxpc2llLXJlTGlzdGVyTGl0aGl1bUxpdGlnZUxpdHRvcmFsTGl2cmV1ckxvZ2lxdWVMb2ludGFpbkxvaXNpckxvbWJyaWNMb3RlcmllTG91ZXJMb3VyZExvdXRyZUxvdXZlTG95YWxMdWJpZUx1Y2lkZUx1Y3JhdGlmTHVldXJMdWd1YnJlTHVpc2FudEx1bWllLXJlTHVuYWlyZUx1bmRpTHVyb25MdXR0ZXJMdXh1ZXV4TWFjaGluZU1hZ2FzaW5NYWdlbnRhTWFnaXF1ZU1haWdyZU1haWxsb25NYWludGllbk1haXJpZU1haXNvbk1ham9yZXJNYWxheGVyTWFsZS9maWNlTWFsaGV1ck1hbGljZU1hbGxldHRlTWFtbW91dGhNYW5kYXRlck1hbmlhYmxlTWFucXVhbnRNYW50ZWF1TWFudWVsTWFyYXRob25NYXJicmVNYXJjaGFuZE1hcmRpTWFyaXRpbWVNYXJxdWV1ck1hcnJvbk1hcnRlbGVyTWFzY290dGVNYXNzaWZNYXRlL3JpZWxNYXRpZS1yZU1hdHJhcXVlTWF1ZGlyZU1hdXNzYWRlTWF1dmVNYXhpbWFsTWUvY2hhbnRNZS9jb25udU1lL2RhaWxsZU1lL2RlY2luTWUvZGl0ZXJNZS9kdXNlTWVpbGxldXJNZS9sYW5nZU1lL2xvZGllTWVtYnJlTWUvbW9pcmVNZW5hY2VyTWVuZXJNZW5oaXJNZW5zb25nZU1lbnRvck1lcmNyZWRpTWUvcml0ZU1lcmxlTWVzc2FnZXJNZXN1cmVNZS90YWxNZS90ZS9vcmVNZS90aG9kZU1lL3RpZXJNZXVibGVNaWF1bGVyTWljcm9iZU1pZXR0ZU1pZ25vbk1pZ3Jlck1pbGlldU1pbGxpb25NaW1pcXVlTWluY2VNaW5lL3JhbE1pbmltYWxNaW5vcmVyTWludXRlTWlyYWNsZU1pcm9pdGVyTWlzc2lsZU1peHRlTW9iaWxlTW9kZXJuZU1vZWxsZXV4TW9uZGlhbE1vbml0ZXVyTW9ubmFpZU1vbm90b25lTW9uc3RyZU1vbnRhZ25lTW9udW1lbnRNb3F1ZXVyTW9yY2VhdU1vcnN1cmVNb3J0aWVyTW90ZXVyTW90aWZNb3VjaGVNb3VmbGVNb3VsaW5Nb3Vzc29uTW91dG9uTW91dmFudE11bHRpcGxlTXVuaXRpb25NdXJhaWxsZU11cmUtbmVNdXJtdXJlTXVzY2xlTXVzZS91bU11c2ljaWVuTXV0YXRpb25NdXRlck11dHVlbE15cmlhZGVNeXJ0aWxsZU15c3RlLXJlTXl0aGlxdWVOYWdldXJOYXBwZU5hcnF1b2lzTmFycmVyTmF0YXRpb25OYXRpb25OYXR1cmVOYXVmcmFnZU5hdXRpcXVlTmF2aXJlTmUvYnVsZXV4TmVjdGFyTmUvZmFzdGVOZS9nYXRpb25OZS9nbGlnZXJOZS9nb2NpZXJOZWlnZU5lcnZldXhOZXR0b3llck5ldXJvbmVOZXV0cm9uTmV2ZXVOaWNoZU5pY2tlbE5pdHJhdGVOaXZlYXVOb2JsZU5vY2lmTm9jdHVybmVOb2lyY2V1ck5vaXNldHRlTm9tYWRlTm9tYnJldXhOb21tZXJOb3JtYXRpZk5vdGFibGVOb3RpZmllck5vdG9pcmVOb3VycmlyTm91dmVhdU5vdmF0ZXVyTm92ZW1icmVOb3ZpY2VOdWFnZU51YW5jZXJOdWlyZU51aXNpYmxlTnVtZS9yb051cHRpYWxOdXF1ZU51dHJpdGlmT2JlL2lyT2JqZWN0aWZPYmxpZ2VyT2JzY3VyT2JzZXJ2ZXJPYnN0YWNsZU9idGVuaXJPYnR1cmVyT2NjYXNpb25PY2N1cGVyT2NlL2FuT2N0b2JyZU9jdHJveWVyT2N0dXBsZXJPY3VsYWlyZU9kZXVyT2RvcmFudE9mZmVuc2VyT2ZmaWNpZXJPZmZyaXJPZ2l2ZU9pc2VhdU9pc2lsbG9uT2xmYWN0aWZPbGl2aWVyT21icmFnZU9tZXR0cmVPbmN0dWV1eE9uZHVsZXJPbmUvcmV1eE9uaXJpcXVlT3BhbGVPcGFxdWVPcGUvcmVyT3Bpbmlvbk9wcG9ydHVuT3BwcmltZXJPcHRlck9wdGlxdWVPcmFnZXV4T3JhbmdlT3JiaXRlT3Jkb25uZXJPcmVpbGxlT3JnYW5lT3JndWVpbE9yaWZpY2VPcm5lbWVudE9ycXVlT3J0aWVPc2NpbGxlck9zbW9zZU9zc2F0dXJlT3RhcmllT3VyYWdhbk91cnNvbk91dGlsT3V0cmFnZXJPdXZyYWdlT3ZhdGlvbk94eWRlT3h5Z2UtbmVPem9uZVBhaXNpYmxlUGFsYWNlUGFsbWFyZS1zUGFsb3VyZGVQYWxwZXJQYW5hY2hlUGFuZGFQYW5nb2xpblBhbmlxdWVyUGFubmVhdVBhbm9yYW1hUGFudGFsb25QYXBheWVQYXBpZXJQYXBvdGVyUGFweXJ1c1BhcmFkb3hlUGFyY2VsbGVQYXJlc3NlUGFyZnVtZXJQYXJsZXJQYXJvbGVQYXJyYWluUGFyc2VtZXJQYXJ0YWdlclBhcnVyZVBhcnZlbmlyUGFzc2lvblBhc3RlLXF1ZVBhdGVybmVsUGF0aWVuY2VQYXRyb25QYXZpbGxvblBhdm9pc2VyUGF5ZXJQYXlzYWdlUGVpZ25lUGVpbnRyZVBlbGFnZVBlL2xpY2FuUGVsbGVQZWxvdXNlUGVsdWNoZVBlbmR1bGVQZS9uZS90cmVyUGUvbmlibGVQZW5zaWZQZS9udXJpZVBlL3BpdGVQZS9wbHVtUGVyZHJpeFBlcmZvcmVyUGUvcmlvZGVQZXJtdXRlclBlcnBsZXhlUGVyc2lsUGVydGVQZXNlclBlL3RhbGVQZXRpdFBlL3RyaXJQZXVwbGVQaGFyYW9uUGhvYmllUGhvcXVlUGhvdG9uUGhyYXNlUGh5c2lxdWVQaWFub1BpY3R1cmFsUGllLWNlUGllcnJlUGlldXZyZVBpbG90ZVBpbmNlYXVQaXBldHRlUGlxdWVyUGlyb2d1ZVBpc2NpbmVQaXN0b25QaXZvdGVyUGl4ZWxQaXp6YVBsYWNhcmRQbGFmb25kUGxhaXNpclBsYW5lclBsYXF1ZVBsYXN0cm9uUGxhdGVhdVBsZXVyZXJQbGV4dXNQbGlhZ2VQbG9tYlBsb25nZXJQbHVpZVBsdW1hZ2VQb2NoZXR0ZVBvZS9zaWVQb2UtdGVQb2ludGVQb2lyaWVyUG9pc3NvblBvaXZyZVBvbGFpcmVQb2xpY2llclBvbGxlblBvbHlnb25lUG9tbWFkZVBvbXBpZXJQb25jdHVlbFBvbmRlL3JlclBvbmV5UG9ydGlxdWVQb3NpdGlvblBvc3NlL2RlclBvc3R1cmVQb3RhZ2VyUG90ZWF1UG90aW9uUG91Y2VQb3VsYWluUG91bW9uUG91cnByZVBvdXNzaW5Qb3V2b2lyUHJhaXJpZVByYXRpcXVlUHJlL2NpZXV4UHJlL2RpcmVQcmUvZml4ZVByZS9sdWRlUHJlL25vbVByZS9zZW5jZVByZS90ZXh0ZVByZS92b2lyUHJpbWl0aWZQcmluY2VQcmlzb25Qcml2ZXJQcm9ibGUtbWVQcm9jZS9kZXJQcm9kaWdlUHJvZm9uZFByb2dyZS1zUHJvaWVQcm9qZXRlclByb2xvZ3VlUHJvbWVuZXJQcm9wcmVQcm9zcGUtcmVQcm90ZS9nZXJQcm91ZXNzZVByb3ZlcmJlUHJ1ZGVuY2VQcnVuZWF1UHN5Y2hvc2VQdWJsaWNQdWNlcm9uUHVpc2VyUHVscGVQdWxzYXJQdW5haXNlUHVuaXRpZlB1cGl0cmVQdXJpZmllclB1enpsZVB5cmFtaWRlUXVhc2FyUXVlcmVsbGVRdWVzdGlvblF1aWUvdHVkZVF1aXR0ZXJRdW90aWVudFJhY2luZVJhY29udGVyUmFkaWV1eFJhZ29uZGluUmFpZGV1clJhaXNpblJhbGVudGlyUmFsbG9uZ2VSYW1hc3NlclJhcGlkZVJhc2FnZVJhdGlzc2VyUmF2YWdlclJhdmluUmF5b25uZXJSZS9hY3RpZlJlL2FnaXJSZS9hbGlzZXJSZS9hbmltZXJSZWNldm9pclJlL2NpdGVyUmUvY2xhbWVyUmUvY29sdGVyUmVjcnV0ZXJSZWN1bGVyUmVjeWNsZXJSZS9kaWdlclJlZG91dGVyUmVmYWlyZVJlL2ZsZXhlUmUvZm9ybWVyUmVmcmFpblJlZnVnZVJlL2dhbGllblJlL2dpb25SZS9nbGFnZVJlL2d1bGllclJlL2l0ZS9yZXJSZWpldGVyUmVqb3VlclJlbGF0aWZSZWxldmVyUmVsaWVmUmVtYXJxdWVSZW1lLWRlUmVtaXNlUmVtb250ZXJSZW1wbGlyUmVtdWVyUmVuYXJkUmVuZm9ydFJlbmlmbGVyUmVub25jZXJSZW50cmVyUmVudm9pUmVwbGllclJlcG9ydGVyUmVwcmlzZVJlcHRpbGVSZXF1aW5SZS9zZXJ2ZVJlL3NpbmV1eFJlL3NvdWRyZVJlc3BlY3RSZXN0ZXJSZS9zdWx0YXRSZS90YWJsaXJSZXRlbmlyUmUvdGljdWxlUmV0b21iZXJSZXRyYWNlclJlL3VuaW9uUmUvdXNzaXJSZXZhbmNoZVJldml2cmVSZS92b2x0ZVJlL3Z1bHNpZlJpY2hlc3NlUmlkZWF1UmlldXJSaWdpZGVSaWdvbGVyUmluY2VyUmlwb3N0ZXJSaXNpYmxlUmlzcXVlUml0dWVsUml2YWxSaXZpZS1yZVJvY2hldXhSb21hbmNlUm9tcHJlUm9uY2VSb25kaW5Sb3NlYXVSb3NpZXJSb3RhdGlmUm90b3JSb3R1bGVSb3VnZVJvdWlsbGVSb3VsZWF1Um91dGluZVJveWF1bWVSdWJhblJ1YmlzUnVjaGVSdWVsbGVSdWd1ZXV4UnVpbmVyUnVpc3NlYXVSdXNlclJ1c3RpcXVlUnl0aG1lU2FibGVyU2Fib3RlclNhYnJlU2Fjb2NoZVNhZmFyaVNhZ2Vzc2VTYWlzaXJTYWxhZGVTYWxpdmVTYWxvblNhbHVlclNhbWVkaVNhbmN0aW9uU2FuZ2xpZXJTYXJjYXNtZVNhcmRpbmVTYXR1cmVyU2F1Z3JlbnVTYXVtb25TYXV0ZXJTYXV2YWdlU2F2YW50U2F2b25uZXJTY2FscGVsU2NhbmRhbGVTY2UvbGUvcmF0U2NlL25hcmlvU2NlcHRyZVNjaGUvbWFTY2llbmNlU2NpbmRlclNjb3JlU2NydXRpblNjdWxwdGVyU2UvYW5jZVNlL2NhYmxlU2UvY2hlclNlY291ZXJTZS9jcmUvdGVyU2UvZGF0aWZTZS9kdWlyZVNlaWduZXVyU2Uvam91clNlL2xlY3RpZlNlbWFpbmVTZW1ibGVyU2VtZW5jZVNlL21pbmFsU2UvbmF0ZXVyU2Vuc2libGVTZW50ZW5jZVNlL3BhcmVyU2UvcXVlbmNlU2VyZWluU2VyZ2VudFNlL3JpZXV4U2VycnVyZVNlL3J1bVNlcnZpY2VTZS9zYW1lU2UvdmlyU2V2cmFnZVNleHR1cGxlU2lkZS9yYWxTaWUtY2xlU2llL2dlclNpZmZsZXJTaWdsZVNpZ25hbFNpbGVuY2VTaWxpY2l1bVNpbXBsZVNpbmNlLXJlU2luaXN0cmVTaXBob25TaXJvcFNpc21pcXVlU2l0dWVyU2tpZXJTb2NpYWxTb2NsZVNvZGl1bVNvaWduZXV4U29sZGF0U29sZWlsU29saXR1ZGVTb2x1YmxlU29tYnJlU29tbWVpbFNvbW5vbGVyU29uZGVTb25nZXVyU29ubmV0dGVTb25vcmVTb3JjaWVyU29ydGlyU29zaWVTb3R0aXNlU291Y2lldXhTb3VkdXJlU291ZmZsZVNvdWxldmVyU291cGFwZVNvdXJjZVNvdXRpcmVyU291dmVuaXJTcGFjaWV1eFNwYXRpYWxTcGUvY2lhbFNwaGUtcmVTcGlyYWxTdGFibGVTdGF0aW9uU3Rlcm51bVN0aW11bHVzU3RpcHVsZXJTdHJpY3RTdHVkaWV1eFN0dXBldXJTdHlsaXN0ZVN1YmxpbWVTdWJzdHJhdFN1YnRpbFN1YnZlbmlyU3VjY2Utc1N1Y3JlU3VmZml4ZVN1Z2dlL3JlclN1aXZldXJTdWxmYXRlU3VwZXJiZVN1cHBsaWVyU3VyZmFjZVN1cmljYXRlU3VybWVuZXJTdXJwcmlzZVN1cnNhdXRTdXJ2aWVTdXNwZWN0U3lsbGFiZVN5bWJvbGVTeW1lL3RyaWVTeW5hcHNlU3ludGF4ZVN5c3RlLW1lVGFiYWNUYWJsaWVyVGFjdGlsZVRhaWxsZXJUYWxlbnRUYWxpc21hblRhbG9ubmVyVGFtYm91clRhbWlzZXJUYW5naWJsZVRhcGlzVGFxdWluZXJUYXJkZXJUYXJpZlRhcnRpbmVUYXNzZVRhdGFtaVRhdG91YWdlVGF1cGVUYXVyZWF1VGF4ZXJUZS9tb2luVGVtcG9yZWxUZW5haWxsZVRlbmRyZVRlbmV1clRlbmlyVGVuc2lvblRlcm1pbmVyVGVybmVUZXJyaWJsZVRlL3RpbmVUZXh0ZVRoZS1tZVRoZS9vcmllVGhlL3JhcGllVGhvcmF4VGliaWFUaWUtZGVUaW1pZGVUaXJlbGlyZVRpcm9pclRpc3N1VGl0YW5lVGl0cmVUaXR1YmVyVG9ib2dnYW5Ub2xlL3JhbnRUb21hdGVUb25pcXVlVG9ubmVhdVRvcG9ueW1lVG9yY2hlVG9yZHJlVG9ybmFkZVRvcnBpbGxlVG9ycmVudFRvcnNlVG9ydHVlVG90ZW1Ub3VjaGVyVG91cm5hZ2VUb3Vzc2VyVG94aW5lVHJhY3Rpb25UcmFmaWNUcmFnaXF1ZVRyYWhpclRyYWluVHJhbmNoZXJUcmF2YWlsVHJlLWZsZVRyZW1wZXJUcmUvc29yVHJldWlsVHJpYWdlVHJpYnVuYWxUcmljb3RlclRyaWxvZ2llVHJpb21waGVUcmlwbGVyVHJpdHVyZXJUcml2aWFsVHJvbWJvbmVUcm9uY1Ryb3BpY2FsVHJvdXBlYXVUdWlsZVR1bGlwZVR1bXVsdGVUdW5uZWxUdXJiaW5lVHV0ZXVyVHV0b3llclR1eWF1VHltcGFuVHlwaG9uVHlwaXF1ZVR5cmFuVWJ1ZXNxdWVVbHRpbWVVbHRyYXNvblVuYW5pbWVVbmlmaWVyVW5pb25VbmlxdWVVbml0YWlyZVVuaXZlcnNVcmFuaXVtVXJiYWluVXJ0aWNhbnRVc2FnZVVzaW5lVXN1ZWxVc3VyZVV0aWxlVXRvcGllVmFjYXJtZVZhY2NpblZhZ2Fib25kVmFndWVWYWlsbGFudFZhaW5jcmVWYWlzc2VhdVZhbGFibGVWYWxpc2VWYWxsb25WYWx2ZVZhbXBpcmVWYW5pbGxlVmFwZXVyVmFyaWVyVmFzZXV4VmFzc2FsVmFzdGVWZWN0ZXVyVmVkZXR0ZVZlL2dlL3RhbFZlL2hpY3VsZVZlaW5hcmRWZS9sb2NlVmVuZHJlZGlWZS9uZS9yZXJWZW5nZXJWZW5pbWV1eFZlbnRvdXNlVmVyZHVyZVZlL3JpblZlcm5pclZlcnJvdVZlcnNlclZlcnR1VmVzdG9uVmUvdGUvcmFuVmUvdHVzdGVWZXhhbnRWZXhlclZpYWR1Y1ZpYW5kZVZpY3RvaXJlVmlkYW5nZVZpZGUvb1ZpZ25ldHRlVmlndWV1clZpbGFpblZpbGxhZ2VWaW5haWdyZVZpb2xvblZpcGUtcmVWaXJlbWVudFZpcnR1b3NlVmlydXNWaXNhZ2VWaXNldXJWaXNpb25WaXNxdWV1eFZpc3VlbFZpdGFsVml0ZXNzZVZpdGljb2xlVml0cmluZVZpdmFjZVZpdmlwYXJlVm9jYXRpb25Wb2d1ZXJWb2lsZVZvaXNpblZvaXR1cmVWb2xhaWxsZVZvbGNhblZvbHRpZ2VyVm9sdW1lVm9yYWNlVm9ydGV4Vm90ZXJWb3Vsb2lyVm95YWdlVm95ZWxsZVdhZ29uWGUvbm9uWWFjaHRaZS1icmVaZS9uaXRoWmVzdGVab29sb2dpZVwiO2xldCB3b3JkbGlzdCQzPW51bGw7Y29uc3QgbG9va3VwJDE9e307ZnVuY3Rpb24gZHJvcERpYWNyaXRpYyQxKHdvcmQpe2xvZ2dlciRrLmNoZWNrTm9ybWFsaXplKCk7cmV0dXJuIHRvVXRmOFN0cmluZyhBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwodG9VdGY4Qnl0ZXMod29yZC5ub3JtYWxpemUoXCJORkRcIikudG9Mb3dlckNhc2UoKSksYz0+e3JldHVybiBjPj02NSYmYzw9OTB8fGM+PTk3JiZjPD0xMjN9KSl9ZnVuY3Rpb24gZXhwYW5kJDEod29yZCl7Y29uc3Qgb3V0cHV0PVtdO0FycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodG9VdGY4Qnl0ZXMod29yZCksYz0+e2lmKGM9PT00Nyl7b3V0cHV0LnB1c2goMjA0KTtvdXRwdXQucHVzaCgxMjkpfWVsc2UgaWYoYz09PTQ1KXtvdXRwdXQucHVzaCgyMDQpO291dHB1dC5wdXNoKDEyOCl9ZWxzZXtvdXRwdXQucHVzaChjKX19KTtyZXR1cm4gdG9VdGY4U3RyaW5nKG91dHB1dCl9ZnVuY3Rpb24gbG9hZFdvcmRzJDMobGFuZyl7aWYod29yZGxpc3QkMyE9bnVsbCl7cmV0dXJufXdvcmRsaXN0JDM9d29yZHMkMy5yZXBsYWNlKC8oW0EtWl0pL2csXCIgJDFcIikudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMSkuc3BsaXQoXCIgXCIpLm1hcCh3PT5leHBhbmQkMSh3KSk7d29yZGxpc3QkMy5mb3JFYWNoKCh3b3JkLGluZGV4KT0+e2xvb2t1cCQxW2Ryb3BEaWFjcml0aWMkMSh3b3JkKV09aW5kZXh9KTtpZihXb3JkbGlzdC5jaGVjayhsYW5nKSE9PVwiMHg1MWRlYjdhZTAwOTE0OWRjNjFhNmJkMThhOTE4ZWI3YWM3OGQyNzc1NzI2YzY4ZTU5OGI5MmQwMDI1MTliMDQ1XCIpe3dvcmRsaXN0JDM9bnVsbDt0aHJvdyBuZXcgRXJyb3IoXCJCSVAzOSBXb3JkbGlzdCBmb3IgZnIgKEZyZW5jaCkgRkFJTEVEXCIpfX1jbGFzcyBMYW5nRnIgZXh0ZW5kcyBXb3JkbGlzdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKFwiZnJcIil9Z2V0V29yZChpbmRleCl7bG9hZFdvcmRzJDModGhpcyk7cmV0dXJuIHdvcmRsaXN0JDNbaW5kZXhdfWdldFdvcmRJbmRleCh3b3JkKXtsb2FkV29yZHMkMyh0aGlzKTtyZXR1cm4gbG9va3VwJDFbZHJvcERpYWNyaXRpYyQxKHdvcmQpXX19Y29uc3QgbGFuZ0ZyPW5ldyBMYW5nRnI7V29yZGxpc3QucmVnaXN0ZXIobGFuZ0ZyKTtcInVzZSBzdHJpY3RcIjtjb25zdCBkYXRhPVtcIkFRUkFTUkFHQkFHVUFJUkFIQkFnaEFVUkFkQkFkY0Fub0FNRUFGQkFGQ0JLRkJRUkJTRkJDWEJDREJDSEJHRkJFUUJwQkJwUUJJa0JITkJlT0JnRkJWQ0JoQkJoTkJtT0JtUkJpSEJpRkJVRkJaREJ2RkJzWEJrRkJsY0JqWUJ3REJNQkJUQkJUUkJXQkJXWFhhUVhhUlhRV1hTUlhDRlhZQlhwSFhPUVhIUlhoUlh1UlhtWFhiUlhsWFh3RFhUUlhyQ1hXUVhXR2FCV2FLY2FZZ2FzRmFkUWFsbWFNQmFjQUthUktLQktLWEtLaktRUktEUktDWUtDUktJREtlVktIY0tsWEtqSEtyWU5BSE5CV05hUk5LY05JQk5JT05tWE5zWE5kWE5uQk5NQk5SQk5yWE5XRE5XTU5GT1FBQlFBSFFCclFYQlFYRlFhUlFLWFFLRFFLT1FLRlFOQlFORFFRZ1FDWFFDRFFHQlFHRFFHZFFZWFFwQlFwUVFwSFFMWFFIdVFnQlFoQlFoQ1F1RlFtWFFpRFFVRlFaRFFzRlFkUlFrSFFiUlFsT1FsbVFQRFFqRFF3WFFNQlFNRFFjRlFUQlFUSFFyRERYUURORkRHQkRHUURHUkRwRkRoRkRtWERaWERiUkRNWURSZERUUkRyWFNBaFNCQ1NCclNHUVNFUVNIQlNWUlNoWVNoa1N5UVN1RlNpQlNkY1NvRVNvY1NsbVNNQlNGQlNGS1NGTlNGZFNGY0NCeUNhUkNLY0NTQkNTUkNDckNHYkNFSENZWENwQkNwUUNJQkNJSENlTkNnQkNnRkNWRUNWY0Nta0Ntd0NaWENaRkNkUkNsT0NsbUNsRkNqRENqZENuWEN3QkN3WENjUkNGUUNGakdYaEdOaEdERUdETUdDREdDSEdJRkdnQkdWWEdWRUdWUkdtWEdzWEdkWUdvU0diUkduWEd3WEd3REdXUkdGTkdGTEdGT0dGZEdGa0VBQkVCREVCRkVYT0VhQkVLU0VOQkVOREVZWEVJZ0VJa0VnQkVnUUVnSEVoRkV1ZEV1RkVpQkVpSEVpRkVaREV2QkVzWEVzRkVkWEVkUkVrRkViQkViUkVsRkVQQ0Vma0VGTllBRVlBaFlCTllRZFlEWFlTUllDRVlZb1lnUVlnUll1UlltQ1laVFlkQlliRVlsWFlqUVlSYllXUnBLWHBRb3BRbnBTRnBDWHBJQnBJU3BoTnBkQnBkUnBiUnBjWnBGQnBGTnBGRHBGb3BGckxBRExCdUxYUUxYY0xhRkxDWExFaExwQkxwRkxIWExlVkxoSUxkSExkUkxvRExiUkxyWElBQklCUUlCQ0lCc0lCb0lCTUlCUklYYUlhUklLWUlLUklOQklOdUlDRElHQklJRElJa0lnUkl4Rkl5UUlpSElkUkliWUliUklsSEl3UklNWUljUklSVklUUklGQklGTklGUU9BQk9BRk9CUU9hRk9OQk9OTU9RRk9TRk9DRE9HQk9FUU9wQk9MWE9JQk9JRk9nUU9nRk95UU95Y09tWE9zWE9kSU9rSE9NRU9Na09XV0hCTkhYTkhYV0hOWEhEdUhEUkhTdUhTUkhIb0hoa0htUkhkUkhrUUhsY0hsUkh3QkhXY2dBRWdBZ2dBa2dCTmdCUWdCRWdYT2dZY2dMWGdIamd5UWdpQmdzRmdkYWdNWWdXU2dGUWdGRVZCVFZYRVZLQlZLTlZLRFZLWVZLUlZOQlZOWVZEQlZEeFZTQlZTUlZDalZHTlZMWFZJRlZoQlZoY1ZzWFZkUlZiUlZsUmhCWWhLWWhEWWhHU2h4V2htTmhkYWhka2hiUmhqb2hNWGhUUnhBWHhYU3hLQnhOQnhFUXhlTnhlUXhoWHhzRnhkYnhsSHhqY3hGQnhGTnhGUXhGT3hGb3lOWXlZb3liY3lNWXVCUXVCUnVCcnVETXVDb3VIQnVkUXVra3VvQnVsVnVNWHVGRW1DWW1DUm1wUm1lRG1pTW1qZG1URm1GUWlBRGlCT2lhUmlLUmlOQmlOUmlTRmlHa2lHRmlFUmlwUmlMRmlJRmloWWliSGlqQmlqRWlNWGlXQmlGQmlGQ1VCUVVYRlVhUlVORFVOY1VOUlVORlVEQlVTSFVDRFVHQlVHRlVFcVVMTlVMb1VJUlVlRVVlWVVnQlVoRlV1UlVpRlVzWFVkRlVrSFViQlVqU1VqWVV3WFVNRFVjSFVSZFVUQlVyQlVyWFVyUVpBRlpYWlphUlpLRlpOQlpRRlpDWFpHQlpZZFpwQlpMRFpJRlpIWFpITlplUVpWUlpWRlptWFppQlp2RlpkRlprRlpiSFpiRlp3WFpjQ1pjUlpSQnZCUXZCR3ZCTHZCV3ZDb3ZNWXNBRnNCRHNhUnNLRnNORnNEcnNTSHNTRnNDWHNDUnNFQnNFSHNFZnNwQnNMQnNMRHNJZ3NJUnNlR3NiUnNGQnNGUXNGU2ROQmRTUmRDVmRHSGRZRGRIY2RWYmR5U2R1RGRzWGRsUmR3WGRXWWRXY2RXUmtCTWtYT2thUmtOSWtORmtTRmtDRmtZQmtwUmtlTmtnQmtoVmttWGtzRmtsVmtNQmtXRGtGTm9CTm9hUW9hRm9OQm9OWG9OYW9ORW9TUm9Fcm9ZWG9ZQ29ZYm9wUm9wRm9tWG9qa293WG9yRmJCRWJFSWJkQmJqWWxhUmxERWxNWGxGRGpLampTUmpHQmpZQmpZa2pwUmpMWGpJQmpPRmplVmpiUmp3Qm5YUW5TSG5wRm5MWG5JTm5NQm5UUndYQndYTndYWXdORndRRndTQndHRndMWHdMRHdlTndnQnd1SHdqRHduWE1CWE1wRk1JQk1lTk1USGNhUWNOQmNESGNTRmNDWGNwQmNMWGNMRGNnRmN1RmNuWGN3WGNjRGNUUWNyRlRRRXJYTnJDSHJwRnJnRnJiRnJUSHJGY1dOWVdOYldFSFdNWFdUUlwiLFwiQUJHSEFCSUpBRUFWQVlKUUFMWkpBSWFSQUhOWEFIZGNBSGJSQVpKTUFaSlJBWlRSQWRWSkFrbG1BYmNOQWpkUkFNblJBTVdZQVdwUkFXZ1JBRmdCQUZoQkFGZGNCTkpCQk5KREJRS0JCUWhjQlFsbUJERUpCWUprQllKVEJwTkJCcEpGQklKQkJJSkRCSWNBQk9LWEJPRUpCT1ZKQk9pSkJPWkpCZXBCQmVMWEJlSUZCZWdCQmdHSkJWSlhCdW9jQmlKUkJVSlFCbFhWQmxJVEJ3TkZCTVlWQmNxWEJUbG1CV05GQldpSkJXblJCRkdIQkZ3WFhLR0pYTkpCWE5aSlhEVFRYU0hTWFNWUlhTbEhYQ0pEWEdRSlhFaFhYWVFKWFliUlhPZlhYZU5jWFZKRlhoUUpYaEVKWGRUUlhqZFhYTWhCWGNRVFhSR0JYVEVCWFRuUVhGQ1hYRk9GWEZnRmFCYUZhQk5KYUJDSmFCcEJhQndYYU5KS2FOSkRhUUlCYURwUmFFUERhSE1GYW1ESmFsRUphTVpKYUZhRmFGTkJhRlFKYUZMRGFGVkhLQkNZS0JFQktCSERLWGFGS1hHZEtYRUpLWHBIS1hJQktYWkRLWHdYS0t3TEtOYWNLTllKS05Kb0tOV2NLREdkS0RUUktDaFhLR2FSS0doQktHYlJLRUJUS0VhUktFUFRLTE1ES0xXUktPSERLVkpjS2RCY0tsSUJLbE9QS0ZTQktGRVBLRnBGTkJOSk5KQlFOQkdITkJFUE5CSFhOQmdGTkJWWE5CWkROQnNYTkJ3WE5OYVJOTkpETk5KRU5OSmtORENKTkRWRE5HSlJOSmlETlpKTk5zQ0pOSkZOTkZTQk5GQ1hORkVQTkZMWE5GSUZRSkJGUUNhUlFKRVFRTEpEUUxKRlFJYVJRT3FYUUhhRlFISFFRVkpYUVZKRFFoTkpRbUVJUVpKRlFzSlhRSnJGUVdiUkRKQUJEQllKRFhORkRYQ1hEWExYRFhaRERYc0pEUXFYRFNKRkRKQ1hERVBrREVxWERZbVFEcFNKRE9Da0RPR1FESEVJRFZKRER1RHVEV0VCREpGZ1NCTkRTQlNGU0JHSFNCSUJTQlRRU0tWWVNKUU5TSlFpU0pDWFNFcVhTSllWU0lpSlNPTVlTSEFIU0hhUVNlQ0ZTZXBRU2VnQlNIZEhTSHJGU2hTSlNKdUhTSlVGU2tOUlNyU3JTV0VCU0ZhSFNKRlFTRkNYU0ZHRFNGWVhTRk9EU0ZnQlNGVlhTRmhCU0Z4RlNGa0ZTRmJCU0ZNRkNBRGRDSlhCQ1hhRkNYS0ZDWE5GQ1hDWENYR0JDWEVKQ1hZQkNYTERDWElCQ1hPUENYSFhDWGdCQ1hoQkNYaUJDWGxEQ1hjSENKTkJDSk5GQ0RDSkNER0JDRFZYQ0RoQkNEaURDREpkQ0NtTkNwSkZDSWFSQ09xWENIQ0hDSFpKQ1ZpSkN1Q3VDbWRkQ0ppRkNkTkJDZEhoQ2xFSkNuVUpDcmVTQ1dsZ0NXVFJDRkJGQ0ZOQkNGWUJDRlZGQ0ZoRkNGZFNDRlRCQ0ZXREdCTkJHQlFGR0pCQ0dCRXFHQnBCR0JnUUdOQkVHTkpZR05rT0dOSlJHRFVGR0pwUUdIYUJHSmVOR0plRUdWQmxHVktqR2lKREd2SkhHc1ZKR2tFQkdNSUpHV2pOR0ZCRkdGQ1hHRkdCR0ZZWEdGcEJHRk1GRUFTSkVBV3BFSk5GRUNKVkVJWFNFSVFKRU9xWEVPY0ZFZU5jRUhFSkVIbEZFSmdGRWhsbUVtREpFbVpKRWlNQkVVcVhFb1NSRVBCRkVQWEZFUEtGRVBTRkVQRUZFUHBGRVBMWEVQSUJFSlBkRVBjRkVQVEJFSm5YRXFsSEVNcFJFRkNYRUZPREVGY0ZZQVNKWUpBRllCYUJZQlZYWVhwRllEaEJZQ0pCWUpHRllZYlJZZU5jWUplVllpSUpZWkpjWXZKZ1l2SlJZSnNYWXNKRllNWU1ZcmVWcEJOSHBCRUpwQndYcFF4RnBZRUpwZU5EcEplRHBlU0ZwZUNIcEhVSnBIYkJwSGNIcG1VSnBpaUpwVUpycHNKdXBsSVRwRmFCcEZRcXBGR0JwRkVmcEZZQnBGcEJwRkxKcEZJRHBGZ0JwRlZYcEZ5UXBGdUZwRmxGcEZqRHBGblhwRndYcEpGTXBGVEJMWENKTFhFRkxYaEZMWFVKTFhiRkxhbG1MTkpCTFNKUUxDTENMR0pCTExESkxIYUZMZU5GTGVTSExlQ1hMZXBGTGhhUkxac0pMc0pETHNKckxvY2FMbExsTE1kYkxGTkJMRlNCTEZFSExGa0ZJQkJGSUJYRklCYVFJQktYSUJTRklCcEhJQkxYSUJnQklCaEJJQnVISUJtWElCaUZJQlpYSUJ2RklCYkZJQmpRSUJ3WElCV0ZJS1RSSVFVSklER0ZJQ2pRSVlTUklJTlhJSmVDSVZhUkltRWtJWkpGSXZKUklzSlhJZENKSUpvUkliQlFJallCSWNxWElURlZJcmVWSUZLRklGU0ZJRkNKSUZHRklGTERJRklCSUpGT0lGZ0JJRlZYSUpGaElGeEZJRm1YSUZkSElGYkJJSkZySUpGV09CR0JPUWZYT09Lak9VcVhPZlhCT3FYRU9jcVhPUlZKT0ZJQk9GbERIQklPSFhpRkhOVFJIQ0pYSElhUkhISkRISEVKSFZiUkhaSllIYklCSFJzSkhSa0RIV2xtZ0JLRmdCU0JnQkNEZ0JHSGdCcEJnQklCZ0JWSmdCdUJnQnZGZ0tEVGdRVlhnRFVKZ0dTSmdPcVhnbVVNZ1pJSmdUVUpnV0lFZ0ZCRmdGTkJnRkRKZ0ZTRmdGR0JnRllYZ0pGT2dGZ1FnRlZYZ0ZoQmdGYkhnSkZXVkpBQlZRS2NWRGdGVk9mWFZlREZWaGFSVm1HZFZpSllWTWFSVkZOSGhCTkRoQkNYaEJFcWhCcEZoQkxYaE5KQmhTSlJoZVZYaGhLRWh4bG1oWklKaGRCUWhrSUpoYk1OaE1VSmhNWkp4TkpneFFVSnhERWt4RGRGeFNKUnhwbG14ZVNCeGVDWHhlR0Z4ZVlYeGVwUXhlZ0J4V1ZjeEZFUXhGTFh4RklCeEZnQnhGeER4Rlp0eEZkY3hGYkJ4RndYeURKWHlEbGN1QVNKdURKcHVESUJ1Q3BKdUdTSnVJSkZ1ZUVGdVpJSnVzSlh1ZFdFdW9JQnVXR0p1RkJjdUZLRXVGTkZ1RlFGdUZESnVGR0p1RlZKdUZVdHVGZEh1RlRCbUJZSm1OSlltUWhrbUxKRG1MSm9tSWRYbWlKWW12SlJtc0pSbWtsbW1NQnltTXVDbWNsbW1jblFpSkFCaUpCTmlKQkRpQlNGaUJDSmlCRUZpQllCaUJwRmlCTFhpQlRIaUpOY2lERWZpQ1pKaUVDSmlKRXFpT2tIaUhLRmllTkRpSEpRaWVRY2llREhpZVNGaWVDWGllR0ZpZUVGaWVJSGllZ0ZpaFVKaXhOb2lvTlhpRmFCaUZLRmlGTkRpRkVQaUZZWGl0Rk9pdEZIaUZnQmlGVkVpRm1YaUZpdGlGYkJpRk1GaUZyRlVDWFFVSW9RVUlKY1VIUUpVZUNFVUh3WFVVSkRVVXFYVWRXY1VjcVhVcm5RVUZORFVGU0hVRkNGVUZFZlVGTFhVdEZPWkJYT1pYU0JaWHBGWlhWWFpFUUpaRUprWnBESlpPcVhaZU5IWmVDRFpVcVhaRkJRWkZFSFpGTFh2QkFGdkJLRnZCQ1h2QkVQdkJwSHZCSUR2QmdGdkJ1SHZRTkp2Rk5GdkZHQnZGSUJ2SkZjc1hDRHNYTFhzWHNYc1hsRnNYY0hzUXFYc0pRRnNFcVhzZUlGc0ZFSHNGakRkQnhPZE5wUmROSlJkRUpiZHBKUmRoWkpkblNKZHJqTmRGTkpkRlFIZEZoTmtOSkRrWWFSa0hOUmtIU1JrVmJSa3VNUmtqU0prY3FEb1NKRm9FaUpvWVpKb09mWG9oRUJvTUdRb2NxWGJCQUZiQlhGYkJhRmJCTkRiQkdCYkJMWGJCVEJiQldEYkdKWWJJSkhiRlFxYkZwUWxEZ1FsT3JGbFZKUmpHRUJqWkpSblh2Sm5YYkJuRWZIbk9QRG5nSlJueGZYblVKV3dYRUp3TnBKd0RwQndFZlh3ckVCTURDSk1ER0hNRElKTUxKRGNRR0RjUXBIY3FYY2NxTkZjcUNYY0ZDSlJCU0JSQkdCUkJFSlJCcFFUQk5GVEJRSlRCcEJUQlZYVEZBQlRGU0JURkNGVEZHQlRGTURyWENKclhMRHJETkpyRWZIckZRSnJGaXRXTmpkV05UUlwiLFwiQUtMSk1BTk9QRkFTTkpJQUVKV1hBWUpOUkFJSWJSQUljZGFBZUVmREFnaWRSQWRqTllBTVlFSkFNSWJSQUZOSkJBRnBKRkJCSUpZQkRaSkZCU2lKaEJHZEVCQkVKZlhCRUpxWEJFSldSQnBhVUpCTFhyWEJJWUpNQk9jZlhCZUVmRkJlc3RYQmpOSlJCY0RKT0JGRXFYWE52SlJYRE1CaFhDSk5ZWE9BV3BYT05KV1hIREVCWGVJYVJYaFlKRFhaSlNKWE1ESk9YY0FTSlhGVkpYYUJRcVhhQlpKRmFzWGRRYUZTSlFhRkVmWGFGcEpIYUZPcVhLQk5TUktYdkpCS1FKaFhLRUpRSktFSkdGS0lOSkJLSUpqTktnSk5TS1ZFbG1LVmhFQktpSkdGS2xCZ0pLam5VSkt3c0pZS01GSUpLRk5KREtGSUpGS0ZPZlhOSkJTRk5KQkNYTkJwSkZOSkJ2UU5KQk1CTkpMSlhOSk9xWE5KZUNYTkplR0ZOZHNKQ05iVEtGTndYVUpRTkZFUFFEaUpjUURNU0pRU0ZwQlFHTVFKUUplT2NReUNKRVFVSkVCUUpGQnJRRkVKcURYREpGREpYcEJESlhJTURHaUpoRElKR1JESmVZY0RIckRKRFZYZ0ZEa0FXcERrSWdSRGpERXFETXZKUkRKRk5GREpGSUJTS2NsbVNKUU9GU0pRVkhTSlFqRFNKR0pCU0pHSkZTRUNKb1NIRUpxU0pIVEJTSlZKRFNWaUpZU1pKTkJTSnNKRFNGU0pGU0ZFZlhTSkZMWENCVUpWQ0pYU0JDSlhwQkNYVkpYQ0pYc1hDSlhkRkNKTkpIQ0xJSmdDSGlKRkNWTkpNQ2hDSmhDVUhFSkNzSlRSQ0pkWWNDb1FKQ0NGRWZYQ0ZJSmdDRlVKeENGc3RGR0pCYVFHSkJJREdRSnFYR1lKTlJHSkhLRkdlUXFER0hFSkZHSmVMWEdISWlKR0hkQmxHVUpFQkdrSUpUR0ZRUERHSkZFcUVBR2VnRUpJSkJFSlZKWEVoUUpURWlKTmNFSlpKRkVKb0VxRWpERXFFUERzWEVQR0pCRVBPcVhFUGVRRkVmRGlERUpmRUZFZmVwUUVmTWlKRXFYTkJFcURJREVxZVNGRXFWSlhFTXZKUllYTkpEWVhFSkhZS1ZKY1lZSkVCWUplRWNZSlVxWFlGcEpGWUZzdFhwQVpKTXBCU0pGcE5CTkZwZVFQRHBITEpEcEhJSkZwSGdKRnBlaXRGcEhaSkZwSkZBRHBGU0pGcEpGQ0pwRk9xWHBGaXRCcEpGWkpMWElKRkxJSmdSTFZOSldMVkhKTUx3TnBKTEZHSkJMRkxKRExGT3FYTEpGVUpJQkRKWElCR0pCSUpCWVFJSkJJQklCT3FYSUJjcURJRUdKRklMTkpUSUlKRUJJT2lKaElKZU5CSUplSUJJaGlKSUlXb1RSSUpGQUhJSkZwQklKRnVISUZVdEZJSkZUSE9TQllKT0VjcVhPSEVKcU92QnBGT2tWSnJPYkJWSk9uY3FET2NOSmtIaE5KUkh1SEp1SGRNaEJnQlVxWGdCc0pYZ09OSkJnSE5KRGdISEpRZ0plaXRnSHNKWGdKeU5hZ3lESkJnWkpEcmdzVkpRZ2tFSk5na2pTSmdKRkFIZ0ZDSkRnRlp0TVZKWE5GVlhRZlhWSlhESlZYb1FKVlFWSlFWREVmWFZEdkpIVkVxTkZWZVFmWFZIcEpGVkh4ZlhWVkpTUlZWbWFSVmxJSk9oQ1hWSmhIallraHhDSlZoV1ZVSmhXaUpjeEJOSkl4ZUVxRHhmWEJGeGNGRVB4RlNKRnhGWUpYeUJEUUp5ZGFVSnlGT1BEdVlDSll1THZKUnVITEpYdVpKTER1Rk9QRHVGWkpIdUZjcVhtS0hKZG1DUUpjbU9zVkppSkFHRml0TENGaWVPZlhpZXN0WGlaSk1FaWtOSlFpclh6RmlGUXFYaUZJSkZpRlpKRmlGdnRGVUhwSkZVdGVJY1V0ZU9jVVZDSmtVaGRIY1ViRUpFVUpxWFFVTU5KaFVSallrVUZpdEZaREdKSFpKSXhEWkpWSlhaSkZESlpKRnBRdkJOSkJ2QlNKRnZKeEJyc2VRcURzVkZWSmRGTEpEa0VKTkJrbU5KWWtGTEpEb1FKT1BvR3NKUm9FQUhCb0VKZkZiQlFxRGJCWkpIYkZWSlhsRklKQmpZSXJYamVpdGNqakNFQmpXTU5Cd1hRZlh3WE9hRndEc0pYd0NKVFJ3ckNaSk1ETkpRY0RESkZjcURPUFJZaUpGVEJzSlhUUUlKQlRGRWZYVEZMSkRyWEVKRnJFSlhNckZaSkZXRUpkRVdZVGxtXCIsXCJBQkNERUZBQ05KVFJBTUJESmRBY05KVlhCTE5KRUJYU0lkV1JYRXJOSmtYWURKTUJYWkpDSmFYTU5KYVlLS1ZKS2NLREVKcVhLRGNOSmhLVkpyTllLYmdKVlhLRlZKU0JOQllCd0ROSmVRZlhOSmVFcVhOaEdKV0VOSkZpSlJRbElKYkVRSmZYeERRcVhjZlhRRk5ERUpRRndYVUpEWWNuVUpESklCZ1FESVVKVFJESkZFcURTSlFTSkZTSlFJSkZTT1BlWnRTSkZaSkhDSlhRZlhDVERFcUZHSkJTSkZHSkJPZlhHSkJjcVhHSkhOSkRHSlJMaUpFSmZYRXFFSkZFSlBFRnBCRUpZSkJaSkZZQndYVUpZaUpNRUJZSlpKeVRZVE9OSlhwUU1GWEZwZUdJRGRwSkZzdFhwSkZjUERMQlZTSlJMSFFKcVhMSkZaSkZJSkJOSkRJSkJVcVhJQmtGREpJSkVKUFRJWUpHV1JJSmVRUERJSmVFZkhJSkZzSlhPcUdEU0ZIWEVKcVhnSkNzSkNnR1FKcVhnZFFZSkVnRk1GTkJnSkZjcURWSndYVUpWSkZaSmNoSWdKQ0N4T0VKcVh4T3dYVUp5REpCVlJ1c2Npc2NpSkJpSkJpZVV0cVhpSkZESmtpRnNKWFFVR0VaSmNVSkZzSlhadFhJclhaRFpKRHJaSkZOSkRaSkZzdFh2SkZRcVh2SkZDSkVzSlhRSnFraGtOR0JiREpkVFJiWUpNRUJsRHdYVUpNRUZpSkZjZlhOSkRSY05KV01UQkxKWENcIixcIkJyYUZVdEhCRlNKRmRiTkJMSlhWSlFvWUpORUJTSkJFSmZIU0pId1hVSkNKZEFaSk1HamFGVkpYRUpQTkpCbEVKZkZpSkZwRmJGRUpxSUpCVkpDcklCZEhpSmhPUEZDaHZKVkpaSk5KV3hHRk5JRkx1ZUlCUUpxVUhFSmZVRnN0T1pKRHJsWEVBU0pSbFhWSlhTRndWSk5KV0RcIixcIlFKRUpOTkpEUUpFSklCU0ZRSkVKeGVnQlFKRUpmSEVQU0pCbVhFSkZTSkNERUpxWExYTkpGUXFYSWNRc0ZOSkZJRkVKcVhVSmdGc0pYSUpCVUpFSmZITkZ2SnhFcVhOSm5YVUpGUXFEXCIsXCJJSkJFSnFYWkpcIl07Y29uc3QgbWFwcGluZz1cIn5+QXpCflh+YX5LTn5RfkR+U35Dfkd+RX5ZfnB+TH5Jfk9+ZUh+Z35Wfmh4eXVtaX5+VX5+Wn5+dn5+c35+ZGtvYmxQamZucXdNY1JUcn5Xfn5+Rn5+fn5+SnRcIjtsZXQgd29yZGxpc3QkND1udWxsO2Z1bmN0aW9uIGhleCh3b3JkKXtyZXR1cm4gaGV4bGlmeSh0b1V0ZjhCeXRlcyh3b3JkKSl9Y29uc3QgS2lZb0t1PVwiMHhlMzgxOGRlMzgyODRlMzgxOGZcIjtjb25zdCBLeW9LdT1cIjB4ZTM4MThkZTM4MjgzZTM4MThmXCI7ZnVuY3Rpb24gbG9hZFdvcmRzJDQobGFuZyl7aWYod29yZGxpc3QkNCE9PW51bGwpe3JldHVybn13b3JkbGlzdCQ0PVtdO2NvbnN0IHRyYW5zZm9ybT17fTt0cmFuc2Zvcm1bdG9VdGY4U3RyaW5nKFsyMjcsMTMwLDE1NF0pXT1mYWxzZTt0cmFuc2Zvcm1bdG9VdGY4U3RyaW5nKFsyMjcsMTMwLDE1M10pXT1mYWxzZTt0cmFuc2Zvcm1bdG9VdGY4U3RyaW5nKFsyMjcsMTMwLDEzM10pXT10b1V0ZjhTdHJpbmcoWzIyNywxMzAsMTM0XSk7dHJhbnNmb3JtW3RvVXRmOFN0cmluZyhbMjI3LDEyOSwxNjNdKV09dG9VdGY4U3RyaW5nKFsyMjcsMTI5LDE2NF0pO3RyYW5zZm9ybVt0b1V0ZjhTdHJpbmcoWzIyNywxMzAsMTMxXSldPXRvVXRmOFN0cmluZyhbMjI3LDEzMCwxMzJdKTt0cmFuc2Zvcm1bdG9VdGY4U3RyaW5nKFsyMjcsMTMwLDEzNV0pXT10b1V0ZjhTdHJpbmcoWzIyNywxMzAsMTM2XSk7ZnVuY3Rpb24gbm9ybWFsaXplKHdvcmQpe2xldCByZXN1bHQ9XCJcIjtmb3IobGV0IGk9MDtpPHdvcmQubGVuZ3RoO2krKyl7bGV0IGthbmE9d29yZFtpXTtjb25zdCB0YXJnZXQ9dHJhbnNmb3JtW2thbmFdO2lmKHRhcmdldD09PWZhbHNlKXtjb250aW51ZX1pZih0YXJnZXQpe2thbmE9dGFyZ2V0fXJlc3VsdCs9a2FuYX1yZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIHNvcnRKYXBhbmVzZShhLGIpe2E9bm9ybWFsaXplKGEpO2I9bm9ybWFsaXplKGIpO2lmKGE8Yil7cmV0dXJuLTF9aWYoYT5iKXtyZXR1cm4gMX1yZXR1cm4gMH1mb3IobGV0IGxlbmd0aD0zO2xlbmd0aDw9OTtsZW5ndGgrKyl7Y29uc3QgZD1kYXRhW2xlbmd0aC0zXTtmb3IobGV0IG9mZnNldD0wO29mZnNldDxkLmxlbmd0aDtvZmZzZXQrPWxlbmd0aCl7Y29uc3Qgd29yZD1bXTtmb3IobGV0IGk9MDtpPGxlbmd0aDtpKyspe2NvbnN0IGs9bWFwcGluZy5pbmRleE9mKGRbb2Zmc2V0K2ldKTt3b3JkLnB1c2goMjI3KTt3b3JkLnB1c2goayY2ND8xMzA6MTI5KTt3b3JkLnB1c2goKGsmNjMpKzEyOCl9d29yZGxpc3QkNC5wdXNoKHRvVXRmOFN0cmluZyh3b3JkKSl9fXdvcmRsaXN0JDQuc29ydChzb3J0SmFwYW5lc2UpO2lmKGhleCh3b3JkbGlzdCQ0WzQ0Ml0pPT09S2lZb0t1JiZoZXgod29yZGxpc3QkNFs0NDNdKT09PUt5b0t1KXtjb25zdCB0bXA9d29yZGxpc3QkNFs0NDJdO3dvcmRsaXN0JDRbNDQyXT13b3JkbGlzdCQ0WzQ0M107d29yZGxpc3QkNFs0NDNdPXRtcH1pZihXb3JkbGlzdC5jaGVjayhsYW5nKSE9PVwiMHhjYjM2YjA5ZTZiYWE5MzU3ODdmZDc2MmNlNjVlODBiMGM2YThkYWJkZmJjM2E3Zjg2YWMwZTJjNGZkMTExNjAwXCIpe3dvcmRsaXN0JDQ9bnVsbDt0aHJvdyBuZXcgRXJyb3IoXCJCSVAzOSBXb3JkbGlzdCBmb3IgamEgKEphcGFuZXNlKSBGQUlMRURcIil9fWNsYXNzIExhbmdKYSBleHRlbmRzIFdvcmRsaXN0e2NvbnN0cnVjdG9yKCl7c3VwZXIoXCJqYVwiKX1nZXRXb3JkKGluZGV4KXtsb2FkV29yZHMkNCh0aGlzKTtyZXR1cm4gd29yZGxpc3QkNFtpbmRleF19Z2V0V29yZEluZGV4KHdvcmQpe2xvYWRXb3JkcyQ0KHRoaXMpO3JldHVybiB3b3JkbGlzdCQ0LmluZGV4T2Yod29yZCl9c3BsaXQobW5lbW9uaWMpe2xvZ2dlciRrLmNoZWNrTm9ybWFsaXplKCk7cmV0dXJuIG1uZW1vbmljLnNwbGl0KC8oPzpcXHUzMDAwfCApKy9nKX1qb2luKHdvcmRzKXtyZXR1cm4gd29yZHMuam9pbihcIlx1MzAwMFwiKX19Y29uc3QgbGFuZ0phPW5ldyBMYW5nSmE7V29yZGxpc3QucmVnaXN0ZXIobGFuZ0phKTtcInVzZSBzdHJpY3RcIjtjb25zdCBkYXRhJDE9W1wiT1lBYVwiLFwiQVRBWm9BVEJsM0FUQ1RyQVRDbDhBVERsb0FUR2czQVRIVDhBVEpUOEFUSmwzQVRMbHZBVExuNEFUTVQ4QVRNWDhBVE1ib0FUTWdvQVRvTGJBVG9NVEFUckhnQVR2SG5BVDNBbkFUM0piQVQzTVRBVDhEYkFUOEpUQVQ4TG1BVDhNWUFUOE1iQVQjTG5BVUhUOEFVSFp2QVVKWHJBVUpYOEFVTG5yQVhKbnZBWExVb0FYTGd2QVhNbjZBWFJnM0FYck1iQVgzSlRBWDNRYkFZTG4zQVpMZ3ZBWnJTVUFadkFjQVo4QWFBWjhBYkFaOEFuQVo4SG5BWjhMZ0FaOE1ZQVo4TWdBWjhPbkFhQWJvQWFEVHJBYUZUckFhSlRyQWFKYm9BYUxWb0FhTVh2QWFPbDhBYVNlb0FiQVVvQWJBZzhBYkFsNEFiR25yQWJNVDhBYk1YckFiTW40QWJRYjhBYlNWOEFidlJsQWI4QVVBYjhBbkFiOEhnQWI4SlRBYjhOVEFiOFJiQWNHYm9BY0xudkFjTVQ4QWNNWDhBY1NUb0FjckFhQWNyRm5BYzhBYkFjOE1nQWZHZ3JBZkhib0FmSm52QWZMVjhBZkxrb0FmTVQ4QWZNbm9BZlFiOEFmU2NyQWZTZ3JBZ0FaOEFnRmwzQWdHWDhBZ0hadkFnSGdyQWdKWG9BZ0pYOEFnSmJvQWdMWm9BZ0xuNEFnT1g4QWdvQVRBZ29BbkFnb0NVQWdvSmdBZ29MWEFnb01ZQWdvU2VBZ3JEVUFnckpUQWhyRm5BaHJMakFoclFnQWpBZ29BakpuckFrTVg4QWtPbm9BbENUdkFsQ1Y4QWxDbHZBbEZnNEFsRmw2QWxGbjNBbG9TbkFsckFYQWxyQWZBbHJGVUFsckZiQWxyR2dBbHJPWEFsdktuQWx2TVRBbDNBYkFsM01uQW5BVHJBbkFjckFuQ1ozQW5DbDhBbkRnOEFuRmJvQW5GbDNBbkhYNEFuSGJyQW5IZ3JBbklsM0FuSmd2QW5MWG9BbkxYNEFuTGJyQW5MZ3JBbkxockFuTVhvQW5NZ3JBbk9uM0FuU2JyQW5TZW9BbnZMbkFuM09uQ1RHZ3ZDVFNsdkNUdkFVQ1R2S25DVHZOVENUM0NaQ1QzR1VDVDNNVENUOEhuQ1VDWnJDVUxmOENVTG52Q1UzSG5DVTNKVUNZNk5VQ2JEYjhDYkZab0NiTG5yQ2JvT1RDYm9TY0NickZuQ2J2TG5DYjhBZ0NiOEhnQ2IkTG5Da0xmb0NsQm4zQ2xvRFVEVEhUOERUTGwzRFRTVThEVHJBYURUckxYRFRyTGpEVHJPWURUck9nRFR2RlhEVHZGbkRUM0hVRFQzTGZEVUNUOURVRFQ0RFVGVm9EVUZWOERVRmtvRFVHZ3JEVUpuckRVTGw4RFVNVDhEVU1YckRVTVg0RFVNZzhEVU9Vb0RVT2d2RFVPZzhEVVNUb0RVU1o4RGJEWG9EYkRnb0RiR1Q4RGJKbjNEYkxnM0RiTG40RGJNWHJEYk1nOERiT1RvRGJvSlhHVENsdkdURFQ4R1RGWnJHVExWb0dUTGx2R1RMbDNHVE1nOEdUT1R2R1RTbHJHVG9DVUdUckRnR1RySllHVHJTY0dUdExuR1R2QW5HVHZRZ0dVQ1pyR1VEVHZHVUZab0dVSFhyR1VMbnZHVU1UOEdVb01nR1hvTG5HWHJNWEdYck1uR1h2Rm5HWUxudkdaT252R1p2T25HWjhMYUdaOExtR2JBbDNHYkRZdkdiRGxyR2JIWDNHYkpsNEdiTFY4R2JMbjNHYk1uNEdib0pUR2JvUmZHYnZGVUdiM0dVR2I0Sm5HZ0RYM0dnRmwkR2dKbHJHZ0xYNkdnTFpvR2dMZjhHZ09Yb0dnckFnR2dySlhHZ3JNWUdnclNjR2d2QVRHZ3ZPWUduQWdvR25KZ3ZHbkxab0duTGczR25MbnJHblFuOEduU2JyR25yTWdIVENsdkhURFRvSFRGVDNIVFFUOEhUb0pUSFRvSmdIVHJEVUhUck1uSFR2RllIVHZSZkhUOE1uSFQ4U1VIVUFaOEhVQmI0SFVEVHZIVW9NWUhYRmw2SFhKWDZIWFFsckhYckFVSFhyTW5IWHJTYkhYdkZZSFh2S1hIWDNMakhYM01lSFl2UWxIWnJTY0hadkRiSGJBY3JIYkZUM0hiRmwzSGJKVDhIYkxUckhiTVQ4SGJNWHJIYk1ickhiUWI4SGJTWDNIYm9EYkhib0pUSGJyRlVIYnJIZ0hickpUSGI4SlRIYjhNbkhiOFFnSGdBbHJIZ0RUM0hnR2dySGdIZ3JIZ0pUckhnSlQ4SGdMWEBIZ0xuckhnTVQ4SGdNWDhIZ01ib0hnT25ySGdRVG9IZ1JnM0hnb0hnSGdyQ2JIZ3JGbkhnckxWSGd2QWNIZ3ZBZkhuQWxvSG5DVHJIbkNudkhuR1RySG5HWjhIbkdudkhuSlQ4SG5MZjhIbkxrdkhuTWc4SG5SVHJJVHZGVUlUdkZuSlRBWHJKVENWOEpURlQzSlRGVDhKVEZuNEpUR2d2SlRIVDhKVEpUOEpUSlh2SlRKbDNKVEpudkpUTFg0SlRMZjhKVExodkpUTVQ4SlRNWHJKVE1uckpUT2JySlRRVDhKVFNsdkpUOERVSlQ4RmtKVDhNVEpUOE9YSlQ4T2dKVDhRVUpUOFJmSlVIWm9KWEZUNEpYRmxySlhHWjhKWEduckpYTFY4SlhMZ3ZKWE1Yb0pYTVgzSlhOYm9KWFBsdkpYb0pUSlhvTGtKWHJBWEpYckhVSlhySmdKWHZKVEpYdk9uSlg0S25KWUFsM0pZSlQ4SllMaHZKWVFUb0pZclFYSlk2TlVKYkFsM0piQ1pySmJEbG9KYkdUOEpiR2dySmJKWHZKYkpib0piTGY4SmJMaHJKYkxsM0piTW52SmJSZzhKYlNaOEpib0RiSmJyQ1pKYnJTVUpiM0tuSmI4TG5KZlJuOEpnQVhySmdDWnJKZ0RUckpnR1pySmdHWjhKZ0hUb0pnSlQ4SmdKWG9KZ0pndkpnTFg0SmdMWjNKZ0xaOEpnTG40SmdNZ3JKZ01uNEpnT2d2SmdQWDZKZ1JudkpnU1RvSmdvQ1pKZ29KYkpnb01ZSmdySlhKZ3JKZ0pnckxqSmc2TVRKbENuM0psR2d2SmxKbDhKbDRBbkpsOEZuSmw4SGdKbkFUb0puQVRySm5BYnZKbkRVb0puR25ySm5KWHJKbkpYdkpuTGh2Sm5MbnJKbkxudkpuTVRvSm5NVDhKbk1YdkpuTVgzSm5NZzhKbk1sckpuTW40Sm5PWDhKblNUNEpuU1gzSm5vQWdKbm9Bbkpub0pUSm5vT2JKbnJBYkpuckFrSm5ySG5KbnJKVEpuckpZSm5yT1lKbnJTY0pudkNVSm52RmFKbnZKZ0pudkpuSm52T1lKbnZRVUpudlJVSm4zRm5KbjNKVEtuRmwzS25MVDZMVERsdkxUTW5vTFRPbjNMVFJsM0xUU2I0TFRTbHJMVG9BbkxUb0pnTFRyQVVMVHJBY0xUckNVTFRySGdMVHJNZ0xUM0puTFVMbnJMVU1YOExVb0pnTFZBVHJMVkRUckxWTGI4TFZvSmdMVjhNZ0xWOFJUTFhEZzNMWEZsckxYckNuTFhyTFhMWDNHVExYNEdnTFg0T1lMWkFYckxaQWNyTFpBZ3JMWkFockxaRFh5TFpEbHJMWkZickxaRmwzTFpKWDZMWkpYOExaTGM4TFpMbnJMWlNVOExab0pUTFpvSm5MWnJBZ0xackFuTFpySllMWnJMVUxack1nTFpyU2tMWnZBbkxadkdVTFp2SmVMWnZPVExaM0ZaTFo0SlhMWjhTVExaOFNjTGFBVDNMYUFsM0xhSFQ4TGFKVHJMYUpUOExhSlhyTGFKZ3ZMYUpsNExhTFZvTGFNWHJMYU1YdkxhTVg4TGJDbHZMYkZUb0xiSGxyTGJKbjRMYkxaM0xiTGh2TGJNWHJMYk1ub0xidlNVTGNMbnJMYzhIbkxjOE1UTGRyTW5MZUFnb0xlT2d2TGVPbjNMZkFsM0xmTG52TGZNbDNMZk9YOExmOEFuTGY4SlhMZjhMWExnSlRyTGdKWHJMZ0psOExnTVg4TGdSWnJMaENUb0xockFiTGhyRlVMaHJKWExodkpZTGpIVHJMakhYNExqSlg4TGpMaHJMalNYM0xqU1o0TGtGWDRMa0daOExrR2d2TGtKVHJMa01Yb0xrU1RvTGtTVThMa1NaOExrb09ZTGwzRmZMbDNNZ0xtQVpyTG1DYnJMbUdnckxtSGJvTG1Kbm9MbUpuM0xtTGZvTG1MaHJMbVNUb0xuQVg2TG5BYjZMbkNaM0xuQ2IzTG5EVHZMbkRiOExuRmwzTG5HbnJMbkhadkxuSGd2TG5JVHZMbkpUOExuSlg4TG5KbHZMbkxmOExuTGc2TG5MaHZMbkxub0xuTVhyTG5NZzhMblFsdkxuU2JyTG5yQWdMbnJBbkxuckRiTG5yRmtMbnJKZExuck1VTG5yT1lMbnJTVExudkFuTG52RFVMbnZIZ0xudk9ZTG52T25MbjNHZ0xuNERVTG40SlRMbjRKbk1UQVpvTVRBbG9NVERiOE1URlQ4TVRKbm9NVEpuck1UTFpyTVRMaHJNVExrdk1UTVg4TVRSVHJNVG9BVE1UckRuTVRyT25NVDNKbk1UNE1uTVQ4RlVNVDhGYU1UOEZsTVQ4R1RNVDhHYk1UOEduTVQ4SG5NVDhKVE1UOEpiTVQ4T1RNVUNsOE1VSlRyTVVKVThNVU1YOE1VUlRyTVVTVG9NWEFYNk1YQWI2TVhDWm9NWEZYck1YSFhyTVhMZ3ZNWE9nb01YckFVTVhyQW5NWHJIZ01YckpZTVhySm5NWHJNVE1Yck1nTVhyT1lNWHJTWk1YclNnTVh2RFVNWHZPVE1YM0pnTVgzT1RNWDRKbk1YOERiTVg4Rm5NWDhIYk1YOEhnTVg4SG5NWDhMYk1YOE1uTVg4T25NWUFiOE1ZR2JvTVlIVHZNWUhYNE1ZTFRyTVlMbnZNWU1Ub01ZT2d2TVlSZzNNWVNUck1iQVRvTWJBWHJNYkFsM01iQW44TWJHWjhNYkpUOE1iSlhyTWJNWHZNYk1YOE1iTW5vTWJyTVVNYjhBZk1iOEZiTWI4RmtNY0pYb01lTG5yTWdGbDNNZ0dUdk1nR1hvTWdHZ3JNZ0duck1nSFQ4TWdIWnJNZ0pub01nTG5yTWdMbnZNZ01UOE1nUVVvTWdySG5NZ3ZBbk1nOEhnTWc4SllNZzhMZk1sb0puTWw4QVRNbDhBWE1sOEpZTW5BVG9NbkFUNE1uQVo4TW5BbDNNbkFsNE1uQ2w4TW5IVDhNbkhnOE1uSm5vTW5MWm9Nbkxock1uTVhvTW5NWDNNbk1uck1uT2d2TW5yRmJNbnJGZk1uckZuTW5yTlRNbnZKWE5UTWw4T1RDVDNPVEZWOE9URm4zT1RIWnZPVEpYck9UT2wzT1QzQVRPVDNKVU9UM0xaT1QzTGVPVDNNYk9UOEFUT1Q4QWJPVDhBZ09UOE1iT1VDWHZPVU1YM09YSFh2T1hMbDNPWHJNVU9YdkRiT1g2TlVPWDhKYk9ZRlpvT1lMYnJPWUxrb09ZTWc4T1lTWDNPYkhUck9iSFQ0T2JKZ3JPYkxock9iTVgzT2JPWDhPYjhGbk9lQWxyT2VKVDhPZUpYck9lSm5yT2VMVG9PZU1iOE9nSlhvT2dMWG9PZ01uck9nT1hyT2dPbG9PZ29BZ09nb0piT2dvTVlPZ29TVE9nOEFiT2pMWDRPak1ub09qU1Y4T25MVm9PbnJBZ09uM0RVUFhRbHJQWHZGWFBidkZUUGRBVDNQbEZuM1BudkZiUVRMbjRRVG9BZ1FUb01UUVVMVjhRVVJnOFFVb0puUVhDWHZRYkZiclFiOEFhUWI4QWNRYjhGYlFiOE1ZUWI4U2NRZUFsclFlTGhyUWpBbjNRbEZYb1Fsb0pnUWxvU25SVExudlJUckdVUlRySlRSVUpaclJVb0psUlVyUW5SWnJMbVJack1uUlpyU25SWjhBVFJaOEpiUlo4U2NSYk1UOFJiU1QzUmZHWnJSZk1YOFJmTWdyUmZTWnJSbkFiclJuR1Q4Um52SmdSbnZMZlJudk1UUm44QWFTVENsdlNUSmdyU1RPWHJTVFJnM1NUUm52U1RvQWNTVG9BZlNUb0FuU1RvSG5TVG9MalNUb01UU1RyQWFTVHJFVVNUM0JZU1Q4QWdTVDhMbVNVQVp2U1VBZ3JTVURUNFNVRFQ4U1VHZ3ZTVUpYb1NVSlh2U1VMVHJTVThKVFNVOExqU1Y4QW5TVjhKZ1NYRlRvU1hMZjhTWXZBblNackRVU1pyTVVTWnJNblNaOEhnU1o4SlRTWjhKZ1NaOE1ZU1o4UVVTYVFVb1NiQ1QzU2JIVG9TYlFZdlNiU2w0U2JvSm5TYnZGYlNiOEhiU2I4SmdTYjhPVFNjR1pyU2NIZ3JTY0pUdlNjTVQ4U2NTVG9TY29IYlNjck1UU2N2QW5TZUFaclNlQWNyU2VIYm9TZUpVb1NlTGhyU2VNVDhTZU1YclNlNkpnU2dIVHJTa0pub1NrTG52U2s4Q1VTbEZsM1NsclNuU2w4R25TbUFib1NtR1Q4U21KVThcIixcIkFUTG5EbEFUckFab0FUckpYNEFUck1UOEFUck1YNEFUclJUckFUdkRsOEFUdkpVb0FUdk1sOEFUM0FUb0FUM01YOEFUOENUM0FUOERUOEFUOEhackFUOEhnb0FVQWdGbkFVQ1RGbkFYb01YOEFYckFUOEFYckdndkFYckpYdkFYck9nb0FYdkxsM0FadkFnb0FadkZickFadkpYb0FadkpsOEFadkpuM0Fadk1YOEFadlNickFaOEZab0FaOExaOEFaOE1VOEFaOE9UdkFaOFNWOEFaOFNYM0FiQWdGWkFib0pub0Fidkdib0FiOEFUckFiOEFab0FiOEFnckFiOEFsNEFiOERiOEFiOEpub0FiOExYNEFiOExackFiOExockFiOE1UOEFiOE9Vb0FiOFFiOEFiOFNUOEFjckFVb0FjckFjOEFjckNaM0FjckZUM0FjckZackFjckpsNEFjckpuM0Fjck1YM0Fjck9UdkFjOEFaOEFjOE1UOEFmQWNKWEFnb0ZuNEFnb0dndkFnb0duckFnb0xjOEFnb01Yb0FnckxuckFrclNaOEFsRlhDVEFsb0hib0FsckhickFsckxockFsckxrb0FsM0NackFsM0xVb0FsM0xackFuckFsNEFuck1UOEFuM0hUNEJUM0lUb0JYNE1udkJiIUxuJENUR1hNbkNUb0xaNENUckhUOENUM0pUckNUM1JackNUI0dUdkNVNkdndkNVOERiOENVOEdackNVOEhUOENib0xsM0NickdnckNick1VOENiOERUM0NiOEduckNiOExYNENiOE1UOENiOE9ickNnckdndkNncktYNENsOEZab0RUckFidkRUckRib0RUckdUNkRUckpnckRUck1YM0RUclJackRUclJnOERUdkFWdkRUdkZab0RUM0RUOERUM0xuM0RUNEhackRUNE1UOERUOEFsckRUOE1UOERVQWtHYkRVRGJKbkRZTG5RbERiRFVPWURiTVRBbkRiTVhTbkRib0FUM0Rib0ZuNERib0xudkRqNkpUckdUQ2dGVEdUR2dGbkdUSlRNbkdUTG5QbEdUb0pUOEdUckNUM0dUckxWb0dUckxudkdUck1YM0dUck1ib0dUdktsM0daQ2xGbkdackRUM0daOERUckdaOEZaOEdaOE1YdkdaOE9uOEdaOFNUM0diQ25RWEdiTWJGbkdib0Zib0dib0pnM0dib01Yb0diM0pUdkdiM0pib0diM01uNkdiM1FiOEdnRFhMakdnTW5BVUdnckRsb0dnckhYNEdnclNUb0dndkFYckdndkFadkdndkZickdndkxsM0dndk1udkduRG5MWEduckFUckduck1ib0dudUxsM0hUQVRNbkhUQWdDbkhUQ1RDVEhUckdUdkhUckhUdkhUckpYOEhUckxsOEhUck1UOEhUck1nb0hUck9UckhUdU9uM0hUdkFackhUdkRUdkhUdkdib0hUdkpVOEhUdkxsM0hUdk1YckhUdlFiNEhUNEdUNkhUNEpUOEhUNEpiI0hUOEFsM0hUOEdackhUOEdnckhUOEhYNEhUOEpiOEhUOEpub0hUOExUckhUOExndkhUOFNUb0hUOFNWOEhVb0pVb0hVb0pYOEhVb0xuckhYckxab0hYdkFsM0hYM0xuckhYNEZrdkhYNExockhYNE1Yb0hYNE9ub0hackFaOEhackRiOEhackdaOEhackpuckhadkdaOEhadkxudkhaOEpudkhaOExockhiQ1hKbEhiTVRBbkhib0psNEhicExsM0hickpYOEhickxuckhick1udkhidlJZckhnb1NUckhnckZWOEhnckdaOEhnckpYb0hnclJudkhndkJiIUhndkdUckhndkhYNEhndkhuIUhndkxUckhndlNVOEhuRG5MYkhuRmJKYkhudkRuOEhuNkdndkhuIUJUdkpUQ1RMbkpUUWdGbkpUckFudkpUckxYNEpUck9Vb0pUdkZuM0pUdkxuckpUdk5Ub0pUM0Fnb0pUM0puNEpUM0xodkpUM09ickpUOEFjckpUOEFsM0pUOEpUOEpUOEpub0pUOExYNEpUOExuckpUOE1YM0pUOFJnM0pUOFNjOEpVb0JUdkpVOEFUb0pVOEdaOEpVOEdndkpVOEpUckpVOEpYckpVOEpuckpVOExudkpVOFNjdkpYSG5KbEpYckdndkpYckpVOEpYckxockpYck1UOEpYck1YckpYclFVb0pYdkNUdkpYdkdaOEpYdkdnckpYdlFUOEpYOEFiOEpYOERUOEpYOEdaOEpYOEhadkpYOExuckpYOE1UOEpYOE1Yb0pYOE1udkpYOFNUM0pZR25DVEpiQWtHYkpiQ1RBbkpiTFRBY0pib0RUM0pib0xiNkpickFudkpickNuM0pickRsOEpickdib0picklab0pickpudkpick1udkpiclFiNEpiOFJackplQWJBbkpnSm5GYkpnU2NBbkpnckFUckpndkhaOEpndk1uNEpsSmxGYkpsTGlRWEpsTGpPbkpsUmJPbEpsdk5Yb0psdlJsM0psNEFjckpsOEFVb0psOE1uckpuRm5NbEpuSGdHYkpub0RUOEpub0ZWOEpub0dndkpub0lUOEpub1FUb0pub1JnM0puckNaM0puckdnckpuckhUdkpuckxmOEpuck9YOEpudkFUM0pudkZab0pudkdUOEpudkpsNEpudk1UOEpudk1YOEpudk9YckpudlBYNkpudlNYM0pudlNackpuM01UOEpuM01YOEpuM1JUckxUQVRLbkxUSm5MVExUTVhLbkxUUlRRbExUb0diOExUckFaOExUckNaOExUckRiOExUckhUOExUM1BYNkxUNEZab0xUJENUdkxUJEdnckxVdkhYM0xWb0FUckxWb0Fnb0xWb0pib0xWb01YM0xWb1JnM0xWOENaM0xWOEZab0xWOEdUdkxYckRYb0xYckZickxYdkFndkxYdkZsckxYdkxsM0xYdlJuNkxYNE1iOExYOEdUOExZQ1hNbkxZck1uckxab1NUdkxackFadkxackFsb0xackZUb0xackpYdkxackpib0xackpsNExackxuckxack1UOExack9ndkxaclJudkxaclNUNExadk1YOExadlNsdkxaOEFnb0xaOENUM0xaOEpUOExaOExWOExaOExab0xaOExnOExaOFNWOExaOFNickxaJEhUOExaJE1uNExhNkNUdkxiRmJNbkxiUllGVExiU25GWkxib0pUOExickFUOUxickdiM0xiclFiOExjckpYOExjck1YckxlckhUdkxlckpickxlck5ib0xnckRiOExnckdaOExnckhUckxnck1YckxnclNVOExndkpUckxndkxsM0xnNkxsM0xockxuckxock1UOExodkFsNExpTG5RWExrb0Fnckxrb0pUOExrb0puNExsclNVOExsM0Zab0xsM0hUckxsM0pYOExsM0pub0xsM0xUb0xtTGVGYkxuRFVGYkxuTFZBbkxuckFUckxuckFab0xuckFiOExuckFsckxuckdndkxuckpVOExuckxackxuckxockxuck1iOExuck9YckxuclNaOExudkFiNExudkRUckxudkRsOExudkhUckxudkhickxudkpUOExudkpVOExudkpickxudkxodkxudk1YOExudk1iOExudk5ub0xudlNVOExuM0FsM0xuNEZab0xuNEdUNkxuNEpndkxuNExockxuNE1UOExuNFNUb01Ub0Nack1Ub0pYOE1Ub0xYNE1Ub0xmOE1Ub1JnM01UckVsb01UdkdiNk1UM0JUck1UM0xiNk1UOEFjck1UOEFnck1UOEdack1UOEpub01UOExuck1UOE1YM01VT1VBbk1YQWJGbk1Yb0Fsb01Yb0pYOE1Yb0xmOE1Yb0xsOE1YckFiOE1YckRUdk1YckdUOE1Yckdnck1YckhUck1YckxmOE1Yck1VOE1Yck9Ydk1YclFiOE1YdkdUOE1YdkhUck1YdkxWb01YM0FYM01YM0puM01YM0xock1YM01YM01YNEFsck1YNE9ib01YOEdUdk1YOEdack1YOEdnck1YOEpUOE1YOEpYOE1YOExock1YOE1UOE1ZRFVGYk1ZTWdEYk1iR25GZk1idkxYNE1idkxsM01iOE1iOE1iOFNUNE1nR1hDbk1nOEFUck1nOEFnb01nOENack1nOERUck1nOERib01nOEhUck1nOEpnck1nOExUOE1sb0pYb01sOEFock1sOEpUOE1uTGdBVU1ub0pYck1ub0xYNE1ub0xock1ub01UOE1uckFsNE1uckRiOE1uck9Udk1uck9ndk1uclFiOE1uclNVOE1udkdnck1udkhaOE1uM01Ub01uNERUck1uNExUck1uNE1nOE5uQlhBbk9URlRGbk9Ub0FUb09Uckdndk9UckpYOE9UM0pYb09UNk1Uck9UOEdnck9UOEhUcE9UOE1Ub09Vb0hUOE9Vb0pUOE9Vb0xuM09YckFnb09YckRnOE9Yck1UOE9YdlNUb09YNkNUdk9YOENack9YOE9nck9iNkhndk9iOEFUb09iOE1UOE9jdkxaOE9ndkFsck9ndkhUdk9ndkpUck9ndkpuck9ndkxack9ndkxuNE9ndk1UOE9ndlJUck9nOEFab09nOERidk9uck9Yb09udkpuNE9udkxodk9udlJUck9uM0dnb09uM0pudk9uNkpidk9uOE9UclBUR1lGVFBiQm5GblBiR25EblBnRFlRVFBsckFudlBsckVUdlBsckxudlBsck1YdlBsdkZYNFFUTVRBblFUckpVOFFZQ25KbFFZSmxRbFFiR1RRYlFiOEpuclFiOExab1FiOExudlFiOE1UOFFiOE1sOFFiOFNUNFFsb0FsNFFsb0hadlFsb0pYOFFsb01uOFFuSlpPbFJUckFadlJUckRUclJUdkpuNFJUdkxodlJUNEpiOFJackFaclJaOEFrclJaOEpVOFJaOExWOFJaOExudlJiSmxRWFJnM0dib1JnM01udlJnOEFaOFJnOEpib1JnOEpsNFJuTFRDYlJudkZsM1JudlFiOFNUb0FsNFNUb0NaclNUb0Zab1NUb0hYclNUb0pVOFNUb0pndlNUb0psNFNUb0xoclNUb01YM1NUckFsdlNUckNUOVNUckNnclNUckdnclNUckhYclNUckhib1NUckpub1NUck5ib1NUdkxuclNUNEFab1NUOEFiOFNUOEpUOFNVb0puM1NVNkhaI1NVNkpUdlNVOERiOFNVOEhib1NVOExnclNWOEpUOFNackFjclNackFsM1NackpUOFNackpudlNack1UOFNadkxVb1NaNEZab1NaOEpub1NaOFJaclNjb0xuclNjb01UOFNjb01YOFNjckFUNFNjckFaOFNjckxaOFNjckxrdlNjdkRiOFNjdkxmOFNjdk5Ub1NnckZaclNodktuclNsb0hVb1Nsb0xuclNsck1Yb1NsOEhnclNtckpVb1NuM0JYNlwiLFwiQVRGbE9uM0FUTGdyRFlBVDRNVEFuQVQ4TFRNbkFZSm5SVHJBYkdnSm5yQWJMVjhMbkFidk5UQW5BZUZiTGczQWdPWU1Yb0FsUWJGYm9BbkRib0FmQW5KZ29KVEJUb0RnQW5CVUpiQWwzQmJvRFVBbkNURGx2TG5DVEZUclNuQ1lvUVRMbkRUd0FiQW5EVURUclNuRFVIZ0hnckRYOExYRm5EYkpYQWNyRVR2TFRMbkdURlRRYnJHVE1uR1RvR1QzRFVGYkdVSmxQWDNHYlFnOExuR2JvSmJGbkdiM0dnQVlHZ0FnOFNjR2dNYkFYckdndkFiQW5HbkpUTG52R252QVRGZ0hURFQ2QVRIVHJEbEpuSFlMbk1uOEhaclNiSlRIWjhMVEZuSGJGVEpVb0hnU2VNVDhIZ3JMakFuSGd2QWJBbkhsRlVyRGxIbkRndkFuSG5IVEZUM0huUVRHbnJKVEFhTVh2SlRHYkNuM0pUT2dyQW5KWHZBWE1uSmJNZzhTbkpiTW5SZzNKYjhMVE1uSm5BbDNPbkpuR1lyUWxKbkpsUVkzTFREbENuM0xUSmpMZzNMVExndkZYTFRNZzNHVExWOEhVT2dMWEZaTGczTFhOWHJNbkxYOFFYRm5MWDlBbE1ZTFlMWFBYckxaQWJKVThMWkRVSlU4TFpNWHJTbkxaJEFnRm5MYVBYckRVTGJGWXJNbkxiTW44TFhMYm9KZ0pnTGVGYkxnM0xnTFpyU25MZ09ZQWdvTGhyUm5KbExrQ1RyU25Ma09uTGhyTG5GWCVBWUxuRlpvSlhMbkhUdkpiTG5MbG9BYk1UQVRMZjhNVEhnSm4zTVRNWHJBWE1UM01URm5NVUlUdkZuTVhGWCVBWU1YTVh2RmJNWHJGVERiTVlBY01YM01iTGY4U25NYjhKYkZuTWdNWHJNVE1ndkFYRm5NZ3ZHZ0NtTW5BbG9Tbk1uRm5KVHJPWHZNWFNuT1g4SFRNbk9iSlQ4U2NPYkxaRmwzT2JNWENab1BUTGdyUVhQVUZub1FYUFUzUlhKbFBYM1JrUVhQYnJKWFFsUGxySmJGblFVQWhyRGJRWEduQ1h2UVlMbkhsdlFiTGZMbnZSVE9ndkpiUlhKWXJRbFJZTG5yUWxSYkxuclFsUmxGVDhKbFJsRm5yUVhTVENsQ24zU1RIVHJBblNUTFpRbHJTVE1uR1RyU1RvSGdHYlNUckdURG5TVHZHWENuU1QzSGdGYlNVM0hYQVhTYkFuSm4zU2JGVDhMblNjTGZMbnZcIixcIkFUM0pnSlg4QVQ4RlpvU25BVDhKZ0ZWOEFUOExockRiQVo4SlQ4RGJBYjhHZ0xockFiOFNrTG52QWU4TVQ4U25BbE1ZSlhMVkFsM0dZRFR2QWwzTGZMbnZCVURUdkxsM0NUT24zSFRyQ1QzRFVHZ3JDVThNVDhBYkNiRlRySlVvQ2dyRGI4TVREVExWOEpYOERUTG5MWFFsRFQ4TFpyU25EVVFiOEZaOERVU1Q0Sm52RGI4U2NPVW9EajZHYkpsNEdUTGZDWU1sR1RvQVh2Rm5HYm9BWHZMbkdnQWNySm4zR2d2Rm5TVG9HbkxmOEpudkduI0hURFRvSFRMbkZYSmxIVHZBVEZUb0hUdkhURFRvSFR2TVRBZ29IVDNTVENsdkhUNEFsRmw2SFQ4SFREVG9IVW9EZ0pUckhVb1NjTVgzSGJSWnJNWG9IYm9KZzhMVEhnRGI4SlRySGdNVG9MZjhIZ3ZMbkxub0huSG4zSFQ0SG42TWd2QW5KVEpVOFNjdkpUM0FhUVQ4SlQ4SFRyQW5KWHJSZzhBbkpiQWxvTVhvSmJyQVRGVG9KYnZNbm9TbkpnRGI2R2d2SmdEYjhNWG9KZ1NYM0pVOEpndUFURlRvSmxQWUxuUWxKbFFrRG5MYkpsUWxGWUpsSmw4TGY4T1RKbkNURm5MYkpuTFRIWE1uSm5MWEdYQ25Kbm9GZlJnM0puck1ZUmczSm4zSGdGbDNLVDhEZzhMbkxUUmxGblBUTFR2UGJMYnZMVm9TYnJDWkxYTVk2SFQzTFhOVTdEbHJMWE5YRFRBVExYOERYOExuTFpEYjhKVThMWk1ub0xockxaU1RvSlU4TFpyTGFMbnJMWnZKbjNTbkxaOExoclNuTGFKbm9NVDhMYkZsckhUdkxickZUTG5yTGJ2QVRMbHZMYjZPVEZuM0xjTG5KWk9sTGVBVDZNbjRMZUpUM09ickxnNkxYRmxyTGhySmc4TG5MaHZEbFBYNExodkxmTG52TGo2SlRGVDNMbkZick1Yb0xuUWx1Q1R2TG5yUVhDWTZMbnZMZkxudkxudk1nTG52TG52U2VMZjhNVE1ickpuM01UM0pnU1QzTVQ4QW5BVHJNVDhMVUxuck1VTVRvQ1pyTVVTY3ZMZjhNWG9EVDhTbk1YNkFURlRvTVg4QVhNVDhNWDhGa01UOE1YOEhUckRVTVg4U2NvU25NWUpUNkNUdk1nQWNyTVhvTWc4U1RvQWZNbHZBWExnM01uRmwzQW52T1QzQW5GbDNPVW9BVEhUOE9VM1JuTFhyT1hyT1hyU25PYlBidkZuNk9nOEhnclNuT2c4T1g4RGJQVHZBZ29KZ1BVM1JZTG5yUFhyRG5KWnJQYjhDVEdndlBsckxURGx2UGx2RlVKbm9RVXZGWHJRbFFlTW5vQWwzUWxyUWxyU25SVEZUckpVb1NURGxMaUxYU1RGZzZIVDNTVEpnb01uNFNUckZUSlRyU1RyTFpGbDNTVDRGbk1Yb1NVckRsSFVvU2N2SFR2U25TZkxrdk1Yb1wiLFwiQVVvQWNyTVhvQVo4SGJvQWc4QWJPZzZBVEZnQWc4QWxvTVhvQWwzQVQ4SlRyQWw4TVg4TVhvQ1QzU1RvSlU4Q2w4RGI4TVhvRFQ4SGdyQVRyRGJvT1Q4TVhvR1RPVHJBVE1uR1Q4TGhyQVo4R252Rm5HblFYSFRvR2d2QWNySFR2QVh2TGwzSGJyQVpvTVhvSGdCbEZYTGczSGdNbkZYclNuSGdyU2I4SlVvSG42SFQ4TGd2SVR2QVRySlVvSlVvTFpyUm52SlU4SFQ4SmI4Slh2Rlg4UVQ4Slh2TFRvSlRySllyUW5HblFYSmdySm5vQVRySm5vSlU4U2N2Sm52TW52TVhvTFRDVExnckpYTFRKbFJUdlFsTGJSbkpsUVl2TGJyTWI4TG52TGJ2Rm4zUm5vTGRDVlNUR1pyTGVTVHZHWENuTGczTW5vTG4zTVRvTGxyRVR2TVQ4U1RvQWwzTWJyRFU2R1R2TWI4TFg0TGhyUGxyTFhHWENuU1RvTGY4UmczU1RyRGI4TFRyU1R2TFRIWE1uU2IzUllMbk1uU2dPZzZBVEZnXCIsXCJIVURsR25yUVhySlRySGdMbnJBY0pZTWI4RFVMYzhMVHZGZ0duQ2szTWc4SmJBbkxYNFFZdkZZSG5NWHJSVW9KbkdudkZuUmx2RlRKbFFub1NUckJYSFhyTFlTVUpnTGZvTVQ4U2U4RFRySGJEYlwiLFwiQWJEbDhTVG9KVThBbjNSYkFiOFNUOERVU1RyR25yQWdvTGJGVTZEYjhMVHJNZzhBYUhUOEpiOE9iRGw4U1RvSlU4UGIzUmx2RllvSmxcIl07Y29uc3QgY29kZXM9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSFAIyQlXiYqXCI7ZnVuY3Rpb24gZ2V0SGFuZ3VsKGNvZGUpe2lmKGNvZGU+PTQwKXtjb2RlPWNvZGUrMTY4LTQwfWVsc2UgaWYoY29kZT49MTkpe2NvZGU9Y29kZSs5Ny0xOX1yZXR1cm4gdG9VdGY4U3RyaW5nKFsyMjUsKGNvZGU+PjYpKzEzMiwoY29kZSY2MykrMTI4XSl9bGV0IHdvcmRsaXN0JDU9bnVsbDtmdW5jdGlvbiBsb2FkV29yZHMkNShsYW5nKXtpZih3b3JkbGlzdCQ1IT1udWxsKXtyZXR1cm59d29yZGxpc3QkNT1bXTtkYXRhJDEuZm9yRWFjaCgoZGF0YSxsZW5ndGgpPT57bGVuZ3RoKz00O2ZvcihsZXQgaT0wO2k8ZGF0YS5sZW5ndGg7aSs9bGVuZ3RoKXtsZXQgd29yZD1cIlwiO2ZvcihsZXQgaj0wO2o8bGVuZ3RoO2orKyl7d29yZCs9Z2V0SGFuZ3VsKGNvZGVzLmluZGV4T2YoZGF0YVtpK2pdKSl9d29yZGxpc3QkNS5wdXNoKHdvcmQpfX0pO3dvcmRsaXN0JDUuc29ydCgpO2lmKFdvcmRsaXN0LmNoZWNrKGxhbmcpIT09XCIweGY5ZWRkZWFjZTljNWQzZGE5YzkzY2Y3ZDNjZDM4ZjZhMTNlZDNhZmZiOTMzMjU5YWU4NjU3MTRlOGEzYWU3MWFcIil7d29yZGxpc3QkNT1udWxsO3Rocm93IG5ldyBFcnJvcihcIkJJUDM5IFdvcmRsaXN0IGZvciBrbyAoS29yZWFuKSBGQUlMRURcIil9fWNsYXNzIExhbmdLbyBleHRlbmRzIFdvcmRsaXN0e2NvbnN0cnVjdG9yKCl7c3VwZXIoXCJrb1wiKX1nZXRXb3JkKGluZGV4KXtsb2FkV29yZHMkNSh0aGlzKTtyZXR1cm4gd29yZGxpc3QkNVtpbmRleF19Z2V0V29yZEluZGV4KHdvcmQpe2xvYWRXb3JkcyQ1KHRoaXMpO3JldHVybiB3b3JkbGlzdCQ1LmluZGV4T2Yod29yZCl9fWNvbnN0IGxhbmdLbz1uZXcgTGFuZ0tvO1dvcmRsaXN0LnJlZ2lzdGVyKGxhbmdLbyk7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgd29yZHMkND1cIkFiYWNvQWJiYWdsaW9BYmJpbmF0b0FiZXRlQWJpc3NvQWJvbGlyZUFicmFzaXZvQWJyb2dhdG9BY2NhZGVyZUFjY2Vubm9BY2N1c2F0b0FjZXRvbmVBY2hpbGxlQWNpZG9BY3F1YUFjcmVBY3JpbGljb0Fjcm9iYXRhQWN1dG9BZGFnaW9BZGRlYml0b0FkZG9tZUFkZWd1YXRvQWRlcmlyZUFkaXBlQWRvdHRhcmVBZHVsYXJlQWZmYWJpbGVBZmZldHRvQWZmaXNzb0FmZnJhbnRvQWZvcmlzbWFBZm9zb0FmcmljYW5vQWdhdmVBZ2VudGVBZ2V2b2xlQWdnYW5jaW9BZ2lyZUFnaXRhcmVBZ29uaXNtb0Fncmljb2xvQWdydW1ldG9BZ3V6em9BbGFiYXJkYUFsYXRvQWxiYXRyb0FsYmVyYXRvQWxib0FsYnVtZUFsY2VBbGNvbGljb0FsZXR0b25lQWxmYUFsZ2VicmFBbGlhbnRlQWxpYmlBbGltZW50b0FsbGFnYXRvQWxsZWdyb0FsbGlldm9BbGxvZG9sYUFsbHVzaXZvQWxtZW5vQWxvZ2Vub0FscGFjYUFscGVzdHJlQWx0YWxlbmFBbHRlcm5vQWx0aWNjaW9BbHRyb3ZlQWx1bm5vQWx2ZW9sb0FsemFyZUFtYWxnYW1hQW1hbml0YUFtYXJlbmFBbWJpdG9BbWJyYXRvQW1lYmFBbWVyaWNhQW1ldGlzdGFBbWljb0FtbWFzc29BbW1lbmRhQW1taXJhcmVBbW1vbml0b0Ftb3JlQW1waW9BbXBsaWFyZUFtdWxldG9BbmFjYXJkb0FuYWdyYWZlQW5hbGlzdGFBbmFyY2hpYUFuYXRyYUFuY2FBbmNlbGxhQW5jb3JhQW5kYXJlQW5kcmVhQW5lbGxvQW5nZWxvQW5nb2xhcmVBbmd1c3RvQW5pbWFBbm5lZ2FyZUFubmlkYXRvQW5ub0FubnVuY2lvQW5vbmltb0FudGljaXBvQW56aUFwYXRpY29BcGVydHVyYUFwb2RlQXBwYXJpcmVBcHBldGl0b0FwcG9nZ2lvQXBwcm9kb0FwcHVudG9BcHJpbGVBcmFiaWNhQXJhY2hpZGVBcmFnb3N0YUFyYWxkaWNhQXJhbmNpb0FyYXR1cmFBcmF6em9BcmJpdHJvQXJjaGl2aW9BcmRpdG9BcmVuaWxlQXJnZW50b0FyZ2luZUFyZ3V0b0FyaWFBcm1vbmlhQXJuZXNlQXJyZWRhdG9BcnJpbmdhQXJyb3N0b0Fyc2VuaWNvQXJzb0FydGVmaWNlQXJ6aWxsb0FzY2l1dHRvQXNjb2x0b0FzZXBzaUFzZXR0aWNvQXNmYWx0b0FzaW5vQXNvbGFBc3BpcmF0b0FzcHJvQXNzYWdnaW9Bc3NlQXNzb2x1dG9Bc3N1cmRvQXN0YUFzdGVudXRvQXN0aWNlQXN0cmF0dG9BdGF2aWNvQXRlaXNtb0F0b21pY29BdG9ub0F0dGVzYUF0dGl2YXJlQXR0b3Jub0F0dHJpdG9BdHR1YWxlQXVzaWxpb0F1c3RyaWFBdXRpc3RhQXV0b25vbW9BdXR1bm5vQXZhbnphdG9BdmVyZUF2dmVuaXJlQXZ2aXNvQXZ2b2xnZXJlQXppb25lQXpvdG9BenppbW9Benp1cnJvQmFiZWxlQmFjY2Fub0JhY2lub0JhY29CYWRlc3NhQmFkaWxhdGFCYWduYXRvQmFpdGFCYWxjb25lQmFsZG9CYWxlbmFCYWxsYXRhQmFsemFub0JhbWJpbm9CYW5kaXJlQmFyYW9uZGFCYXJiYXJvQmFyY2FCYXJpdG9ub0Jhcmx1bWVCYXJvY2NvQmFzaWxpY29CYXNzb0JhdG9zdGFCYXR0dXRvQmF1bGVCYXZhQmF2b3NhQmVjY29CZWZmYUJlbGdpb0JlbHZhQmVuZGFCZW5ldm9sZUJlbmlnbm9CZW56aW5hQmVyZUJlcmxpbmFCZXRhQmliaXRhQmljaUJpZG9uZUJpZmlkb0JpZ2FCaWxhbmNpYUJpbWJvQmlub2NvbG9CaW9sb2dvQmlwZWRlQmlwb2xhcmVCaXJiYW50ZUJpcnJhQmlzY290dG9CaXNlc3RvQmlzbm9ubm9CaXNvbnRlQmlzdHVyaUJpenphcnJvQmxhbmRvQmxhdHRhQm9sbGl0b0JvbmlmaWNvQm9yZG9Cb3Njb0JvdGFuaWNvQm90dGlub0JvenpvbG9CcmFjY2lvQnJhZGlwb0JyYW1hQnJhbmNhQnJhdnVyYUJyZXRlbGxhQnJldmV0dG9CcmV6emFCcmlnbGlhQnJpbGxhbnRlQnJpbmRhcmVCcm9jY29sb0Jyb2RvQnJvbnppbmFCcnVsbG9CcnVub0J1YmJvbmVCdWNhQnVkaW5vQnVmZm9uZUJ1aW9CdWxib0J1b25vQnVybG9uZUJ1cnJhc2NhQnVzc29sYUJ1c3RhQ2FkZXR0b0NhZHVjb0NhbGFtYXJvQ2FsY29sb0NhbGVzc2VDYWxpYnJvQ2FsbW9DYWxvcmlhQ2FtYnVzYUNhbWVyYXRhQ2FtaWNpYUNhbW1pbm9DYW1vbGFDYW1wYWxlQ2FuYXBhQ2FuZGVsYUNhbmVDYW5pbm9DYW5vdHRvQ2FudGluYUNhcGFjZUNhcGVsbG9DYXBpdG9sb0NhcG9naXJvQ2FwcGVyb0NhcHJhQ2Fwc3VsYUNhcmFwYWNlQ2FyY2Fzc2FDYXJkb0NhcmlzbWFDYXJvdmFuYUNhcnJldHRvQ2FydG9saW5hQ2FzYWNjaW9DYXNjYXRhQ2FzZXJtYUNhc29DYXNzb25lQ2FzdGVsbG9DYXN1YWxlQ2F0YXN0YUNhdGVuYUNhdHJhbWVDYXV0b0NhdmlsbG9DZWRpYmlsZUNlZHJhdGFDZWZhbG9DZWxlYnJlQ2VsbHVsYXJlQ2VuYUNlbm9uZUNlbnRlc2ltb0NlcmFtaWNhQ2VyY2FyZUNlcnRvQ2VydW1lQ2VydmVsbG9DZXNvaWFDZXNwb0NldG9DaGVsYUNoaWFyb0NoaWNjYUNoaWVkZXJlQ2hpbWVyYUNoaW5hQ2hpcnVyZ29DaGl0YXJyYUNpYW9DaWNsaXNtb0NpZnJhcmVDaWdub0NpbGluZHJvQ2lvdHRvbG9DaXJjYUNpcnJvc2lDaXRyaWNvQ2l0dGFkaW5vQ2l1ZmZvQ2l2ZXR0YUNpdmlsZUNsYXNzaWNvQ2xpbmljYUNsb3JvQ29jY29Db2RhcmRvQ29kaWNlQ29lcmVudGVDb2dub21lQ29sbGFyZUNvbG1hdG9Db2xvcmVDb2xwb3NvQ29sdGl2YXRvQ29semFDb21hQ29tZXRhQ29tbWFuZG9Db21vZG9Db21wdXRlckNvbXVuZUNvbmNpc29Db25kdXJyZUNvbmZlcm1hQ29uZ2VsYXJlQ29uaXVnZUNvbm5lc3NvQ29ub3NjZXJlQ29uc3Vtb0NvbnRpbnVvQ29udmVnbm9Db3BlcnRvQ29waW9uZUNvcHBpYUNvcHJpY2Fwb0NvcmF6emFDb3JkYXRhQ29yaWNhdG9Db3JuaWNlQ29yb2xsYUNvcnBvQ29ycmVkb0NvcnNpYUNvcnRlc2VDb3NtaWNvQ29zdGFudGVDb3R0dXJhQ292YXRvQ3JhdGVyZUNyYXZhdHRhQ3JlYXRvQ3JlZGVyZUNyZW1vc29DcmVzY2l0YUNyZXRhQ3JpY2V0b0NyaW5hbGVDcmlzaUNyaXRpY29Dcm9jZUNyb25hY2FDcm9zdGF0YUNydWNpYWxlQ3J1c2NhQ3VjaXJlQ3VjdWxvQ3VnaW5vQ3VsbGF0b0N1cG9sYUN1cmF0b3JlQ3Vyc29yZUN1cnZvQ3VzY2lub0N1c3RvZGVEYWRvRGFpbm9EYWxtYXRhRGFtZXJpbm9EYW5pZWxhRGFubm9zb0RhbnphcmVEYXRhdG9EYXZhbnRpRGF2dmVyb0RlYnV0dG9EZWNlbm5pb0RlY2lzb0RlY2xpbm9EZWNvbGxvRGVjcmV0b0RlZGljYXRvRGVmaW5pdG9EZWZvcm1lRGVnbm9EZWxlZ2FyZURlbGZpbm9EZWxpcmlvRGVsdGFEZW1lbnphRGVub3RhdG9EZW50cm9EZXBvc2l0b0RlcmFwYXRhRGVyaXZhcmVEZXJvZ2FEZXNjcml0dG9EZXNlcnRvRGVzaWRlcmlvRGVzdW1lcmVEZXRlcnNpdm9EZXZvdG9EaWFtZXRyb0RpY2VtYnJlRGllZHJvRGlmZXNvRGlmZnVzb0RpZ2VyaXJlRGlnaXRhbGVEaWx1dmlvRGluYW1pY29EaW5uYW56aURpcGludG9EaXBsb21hRGlwb2xvRGlyYWRhcmVEaXJlRGlyb3R0b0RpcnVwb0Rpc2FnaW9EaXNjcmV0b0Rpc2ZhcmVEaXNnZWxvRGlzcG9zdG9EaXN0YW56YURpc3VtYW5vRGl0b0RpdmFub0RpdmVsdG9EaXZpZGVyZURpdm9yYXRvRG9ibG9uZURvY2VudGVEb2dhbmFsZURvZ21hRG9sY2VEb21hdG9Eb21lbmljYURvbWluYXJlRG9uZG9sb0Rvbm9Eb3JtaXJlRG90ZURvdHRvcmVEb3Z1dG9Eb3p6aW5hRHJhZ29EcnVpZG9EdWJiaW9EdWJpdGFyZUR1Y2FsZUR1bmFEdW9tb0R1cGxpY2VEdXJhdHVyb0ViYW5vRWNjZXNzb0VjY29FY2xpc3NpRWNvbm9taWFFZGVyYUVkaWNvbGFFZGlsZUVkaXRvcmlhRWR1Y2FyZUVnZW1vbmlhRWdsaUVnb2lzbW9FZ3JlZ2lvRWxhYm9yYXRvRWxhcmdpcmVFbGVnYW50ZUVsZW5jYXRvRWxldHRvRWxldmFyZUVsZmljb0VsaWNhRWxtb0Vsc2FFbHVzb0VtYW5hdG9FbWJsZW1hRW1lc3NvRW1pcm9FbW90aXZvRW1vemlvbmVFbXBpcmljb0VtdWxvRW5kZW1pY29FbmR1cm9FbmVyZ2lhRW5mYXNpRW5vdGVjYUVudHJhcmVFbnppbWFFcGF0aXRlRXBpbG9nb0VwaXNvZGlvRXBvY2FsZUVwcHVyZUVxdWF0b3JlRXJhcmlvRXJiYUVyYm9zb0VyZWRlRXJlbWl0YUVyaWdlcmVFcm1ldGljb0Vyb2VFcm9zaXZvRXJyYW50ZUVzYWdvbm9Fc2FtZUVzYW5pbWVFc2F1ZGlyZUVzY2FFc2VtcGlvRXNlcmNpdG9Fc2liaXRvRXNpZ2VudGVFc2lzdGVyZUVzaXRvRXNvZmFnb0Vzb3J0YXRvRXNvc29Fc3BhbnNvRXNwcmVzc29Fc3NlbnphRXNzb0VzdGVzb0VzdGltYXJlRXN0b25pYUVzdHJvc29Fc3VsdGFyZUV0aWxpY29FdG5pY29FdHJ1c2NvRXR0b0V1Y2xpZGVvRXVyb3BhRXZhc29FdmlkZW56YUV2aXRhdG9Fdm9sdXRvRXZ2aXZhRmFiYnJpY2FGYWNjZW5kYUZhY2hpcm9GYWxjb0ZhbWlnbGlhRmFuYWxlRmFuZmFyYUZhbmdvRmFudGFzbWFGYXJlRmFyZmFsbGFGYXJpbm9zb0Zhcm1hY29GYXNjaWFGYXN0b3NvRmFzdWxsb0ZhdGljYXJlRmF0b0Zhdm9sb3NvRmViYnJlRmVjb2xhRmVkZUZlZ2F0b0ZlbHBhRmVsdHJvRmVtbWluYUZlbmRlcmVGZW5vbWVub0Zlcm1lbnRvRmVycm9GZXJ0aWxlRmVzc3VyYUZlc3Rpdm9GZXR0YUZldWRvRmlhYmFGaWR1Y2lhRmlmYUZpZ3VyYXRvRmlsb0ZpbmFuemFGaW5lc3RyYUZpbmlyZUZpb3JlRmlzY2FsZUZpc2ljb0ZpdW1lRmxhY29uZUZsYW1lbmNvRmxlYm9GbGVtbWFGbG9yaWRvRmx1ZW50ZUZsdW9yb0ZvYmljb0ZvY2FjY2lhRm9jb3NvRm9kZXJhdG9Gb2dsaW9Gb2xhdGFGb2xjbG9yZUZvbGdvcmVGb25kZW50ZUZvbmV0aWNvRm9uaWFGb250YW5hRm9yYml0b0ZvcmNoZXR0YUZvcmVzdGFGb3JtaWNhRm9ybmFpb0Zvcm9Gb3J0ZXp6YUZvcnphcmVGb3NmYXRvRm9zc29GcmFjYXNzb0ZyYW5hRnJhc3Npbm9GcmF0ZWxsb0ZyZWNjZXR0YUZyZW5hdGFGcmVzY29Gcmlnb0Zyb2xsaW5vRnJvbmRlRnJ1Z2FsZUZydXR0YUZ1Y2lsYXRhRnVjc2lhRnVnZ2VudGVGdWxtaW5lRnVsdm9GdW1hbnRlRnVtZXR0b0Z1bW9zb0Z1bmVGdW56aW9uZUZ1b2NvRnVyYm9GdXJnb25lRnVyb3JlRnVzb0Z1dGlsZUdhYmJpYW5vR2FmZmVHYWxhdGVvR2FsbGluYUdhbG9wcG9HYW1iZXJvR2FtbWFHYXJhbnppYUdhcmJvR2Fyb2Zhbm9HYXJ6b25lR2FzZG90dG9HYXNvbGlvR2FzdHJpY29HYXR0b0dhdWRpb0dhemVib0dhenplbGxhR2Vjb0dlbGF0aW5hR2Vsc29HZW1lbGxvR2VtbWF0b0dlbmVHZW5pdG9yZUdlbm5haW9HZW5vdGlwb0dlcmdvR2hlcGFyZG9HaGlhY2Npb0doaXNhR2lhbGxvR2lsZGFHaW5lcHJvR2lvY2FyZUdpb2llbGxvR2lvcm5vR2lvdmVHaXJhdG9HaXJvbmVHaXR0YXRhR2l1ZGl6aW9HaXVyYXRvR2l1c3RvR2xvYnVsb0dsdXRpbmVHbm9tb0dvYmJhR29sZkdvbWl0b0dvbW1vbmVHb25maW9Hb25uYUdvdmVybm9HcmFjaWxlR3JhZG9HcmFmaWNvR3JhbW1vR3JhbmRlR3JhdHRhcmVHcmF2b3NvR3JhemlhR3JlY2FHcmVnZ2VHcmlmb25lR3JpZ2lvR3JpbnphR3JvdHRhR3J1cHBvR3VhZGFnbm9HdWFpb0d1YW50b0d1YXJkYXJlR3Vmb0d1aWRhcmVJYmVybmF0b0ljb25hSWRlbnRpY29JZGlsbGlvSWRvbG9JZHJhSWRyaWNvSWRyb2dlbm9JZ2llbmVJZ25hcm9JZ25vcmF0b0lsYXJlSWxsZXNvSWxsb2dpY29JbGx1ZGVyZUltYmFsbG9JbWJldnV0b0ltYm9jY29JbWJ1dG9JbW1hbmVJbW1lcnNvSW1tb2xhdG9JbXBhY2NvSW1wZXRvSW1waWVnb0ltcG9ydG9JbXByb250YUluYWxhcmVJbmFyY2FyZUluYXR0aXZvSW5jYW50b0luY2VuZGlvSW5jaGlub0luY2lzaXZvSW5jbHVzb0luY29udHJvSW5jcm9jaW9JbmN1Ym9JbmRhZ2luZUluZGlhSW5kb2xlSW5lZGl0b0luZmF0dGlJbmZpbGFyZUluZmxpdHRvSW5nYWdnaW9JbmdlZ25vSW5nbGVzZUluZ29yZG9Jbmdyb3Nzb0lubmVzY29Jbm9kb3JlSW5vbHRyYXJlSW5vbmRhdG9JbnNhbm9JbnNldHRvSW5zaWVtZUluc29ubmlhSW5zdWxpbmFJbnRhc2F0b0ludGVyb0ludG9uYWNvSW50dWl0b0ludW1pZGlyZUludmFsaWRvSW52ZWNlSW52aXRvSXBlcmJvbGVJcG5vdGljb0lwb3Rlc2lJcHBpY2FJcmlkZUlybGFuZGFJcm9uaWNvSXJyaWdhdG9JcnJvcmFyZUlzb2xhdG9Jc290b3BvSXN0ZXJpY29Jc3RpdHV0b0lzdHJpY2VJdGFsaWFJdGVyYXJlTGFiYnJvTGFiaXJpbnRvTGFjY2FMYWNlcmF0b0xhY3JpbWFMYWN1bmFMYWRkb3ZlTGFnb0xhbXBvTGFuY2V0dGFMYW50ZXJuYUxhcmRvc29MYXJnYUxhcmluZ2VMYXN0cmFMYXRlbnphTGF0aW5vTGF0dHVnYUxhdmFnbmFMYXZvcm9MZWdhbGVMZWdnZXJvTGVtYm9MZW50ZXp6YUxlbnphTGVvbmVMZXByZUxlc2l2b0xlc3NhdG9MZXN0b0xldHRlcmFsZUxldmFMZXZpZ2F0b0xpYmVyb0xpZG9MaWV2aXRvTGlsbGFMaW1hdHVyYUxpbWl0YXJlTGltcGlkb0xpbmVhcmVMaW5ndWFMaXF1aWRvTGlyYUxpcmljYUxpc2NhTGl0ZUxpdGlnaW9MaXZyZWFMb2NhbmRhTG9kZUxvZ2ljYUxvbWJhcmVMb25kcmFMb25nZXZvTG9xdWFjZUxvcmVuem9Mb3RvTG90dGVyaWFMdWNlTHVjaWRhdG9MdW1hY2FMdW1pbm9zb0x1bmdvTHVwb0x1cHBvbG9MdXNpbmdhTHVzc29MdXR0b01hY2Ficm9NYWNjaGluYU1hY2Vyb01hY2luYXRvTWFkYW1hTWFnaWNvTWFnbGlhTWFnbmV0ZU1hZ3JvTWFpb2xpY2FNYWxhZmVkZU1hbGdyYWRvTWFsaW50ZXNvTWFsc2Fub01hbHRvTWFsdW1vcmVNYW5hTWFuY2lhTWFuZG9ybGFNYW5naWFyZU1hbmlmZXN0b01hbm5hcm9NYW5vdnJhTWFuc2FyZGFNYW50aWRlTWFudWJyaW9NYXBwYU1hcmF0b25hTWFyY2lyZU1hcmV0dGFNYXJtb01hcnN1cGlvTWFzY2hlcmFNYXNzYWlhTWFzdGlub01hdGVyYXNzb01hdHJpY29sYU1hdHRvbmVNYXR1cm9NYXp1cmNhTWVhbmRyb01lY2Nhbmljb01lY2VuYXRlTWVkZXNpbW9NZWRpdGFyZU1lZ2FNZWxhc3NhTWVsaXNNZWxvZGlhTWVuaW5nZU1lbm9NZW5zb2xhTWVyY3VyaW9NZXJlbmRhTWVybG9NZXNjaGlub01lc2VNZXNzZXJlTWVzdG9sb01ldGFsbG9NZXRvZG9NZXR0ZXJlTWlhZ29sYXJlTWljYU1pY2VsaW9NaWNoZWxlTWljcm9ib01pZG9sbG9NaWVsZU1pZ2xpb3JlTWlsYW5vTWlsaXRlTWltb3NhTWluZXJhbGVNaW5pTWlub3JlTWlyaW5vTWlydGlsbG9NaXNjZWxhTWlzc2l2YU1pc3RvTWlzdXJhcmVNaXRlenphTWl0aWdhcmVNaXRyYU1pdHRlbnRlTW5lbW9uaWNvTW9kZWxsb01vZGlmaWNhTW9kdWxvTW9nYW5vTW9naW9Nb2xlTW9sb3Nzb01vbmFzdGVyb01vbmNvTW9uZGluYU1vbmV0YXJpb01vbmlsZU1vbm90b25vTW9uc29uZU1vbnRhdG9Nb252aXNvTW9yYU1vcmRlcmVNb3JzaWNhdG9Nb3N0cm9Nb3RpdmF0b01vdG9zZWdhTW90dG9Nb3ZlbnphTW92aW1lbnRvTW96em9NdWNjYU11Y29zYU11ZmZhTXVnaGV0dG9NdWduYWlvTXVsYXR0b011bGluZWxsb011bHRpcGxvTXVtbWlhTXVudG9NdW92ZXJlTXVyYWxlTXVzYU11c2NvbG9NdXNpY2FNdXRldm9sZU11dG9OYWJhYmJvTmFmdGFOYW5vbWV0cm9OYXJjaXNvTmFyaWNlTmFycmF0b05hc2NlcmVOYXN0cmFyZU5hdHVyYWxlTmF1dGljYU5hdmlnbGlvTmVidWxvc2FOZWNyb3NpTmVnYXRpdm9OZWdvemlvTmVtbWVub05lb2ZpdGFOZXJldHRvTmVydm9OZXNzdW5vTmV0dHVub05ldXRyYWxlTmV2ZU5ldnJvdGljb05pY2NoaWFOaW5mYU5pdGlkb05vYmlsZU5vY2l2b05vZG9Ob21lTm9taW5hTm9yZGljb05vcm1hbGVOb3J2ZWdlc2VOb3N0cmFub05vdGFyZU5vdGl6aWFOb3R0dXJub05vdmVsbGFOdWNsZW9OdWxsYU51bWVyb051b3ZvTnV0cmlyZU51dm9sYU51emlhbGVPYXNpT2JiZWRpcmVPYmJsaWdvT2JlbGlzY29PYmxpb09ib2xvT2Jzb2xldG9PY2Nhc2lvbmVPY2NoaW9PY2NpZGVudGVPY2NvcnJlcmVPY2N1bHRhcmVPY3JhT2N1bGF0b09kaWVybm9PZG9yYXJlT2ZmZXJ0YU9mZnJpcmVPZmZ1c2NhdG9PZ2dldHRvT2dnaU9nbnVub09sYW5kZXNlT2xmYXR0b09saWF0b09saXZhT2xvZ3JhbW1hT2x0cmVPbWFnZ2lvT21iZWxpY29PbWJyYU9tZWdhT21pc3Npb25lT25kb3NvT25lcmVPbmljZU9ubml2b3JvT25vcmV2b2xlT250YU9wZXJhdG9PcGluaW9uZU9wcG9zdG9PcmFjb2xvT3JhZm9PcmRpbmVPcmVjY2hpbm9PcmVmaWNlT3JmYW5vT3JnYW5pY29PcmlnaW5lT3JpenpvbnRlT3JtYU9ybWVnZ2lvT3JuYXRpdm9Pcm9sb2dpb09ycmVuZG9PcnJpYmlsZU9ydGVuc2lhT3J0aWNhT3J6YXRhT3J6b09zYXJlT3NjdXJhcmVPc21vc2lPc3BlZGFsZU9zcGl0ZU9zc2FPc3NpZGFyZU9zdGFjb2xvT3N0ZU90aXRlT3RyZU90dGFnb25vT3R0aW1vT3R0b2JyZU92YWxlT3Zlc3RPdmlub092aXBhcm9Pdm9jaXRvT3Z1bnF1ZU92dmlhcmVPemlvUGFjY2hldHRvUGFjZVBhY2lmaWNvUGFkZWxsYVBhZHJvbmVQYWVzZVBhZ2FQYWdpbmFQYWxhenppbmFQYWxlc2FyZVBhbGxpZG9QYWxvUGFsdWRlUGFuZG9yb1Bhbm5lbGxvUGFvbG9QYW9uYXp6b1BhcHJpY2FQYXJhYm9sYVBhcmNlbGxhUGFyZXJlUGFyZ29sb1BhcmlQYXJsYXRvUGFyb2xhUGFydGlyZVBhcnZlbnphUGFyemlhbGVQYXNzaXZvUGFzdGljY2FQYXRhY2NhUGF0b2xvZ2lhUGF0dHVtZVBhdm9uZVBlY2NhdG9QZWRhbGFyZVBlZG9uYWxlUGVnZ2lvUGVsb3NvUGVuYXJlUGVuZGljZVBlbmlzb2xhUGVubnV0b1Blbm9tYnJhUGVuc2FyZVBlbnRvbGFQZXBlUGVwaXRhUGVyYmVuZVBlcmNvcnNvUGVyZG9uYXRvUGVyZm9yYXJlUGVyZ2FtZW5hUGVyaW9kb1Blcm1lc3NvUGVybm9QZXJwbGVzc29QZXJzdWFzb1BlcnR1Z2lvUGVydmFzb1Blc2F0b3JlUGVzaXN0YVBlc29QZXN0aWZlcm9QZXRhbG9QZXR0aW5lUGV0dWxhbnRlUGV6em9QaWFjZXJlUGlhbnRhUGlhdHRpbm9QaWNjaW5vUGljb3p6YVBpZWdhUGlldHJhUGlmZmVyb1BpZ2lhbWFQaWdvbGlvUGlncm9QaWxhUGlsaWZlcm9QaWxsb2xhUGlsb3RhUGltcGFudGVQaW5ldGFQaW5uYVBpbm9sb1Bpb2dnaWFQaW9tYm9QaXJhbWlkZVBpcmV0aWNvUGlyaXRlUGlyb2xpc2lQaXRvbmVQaXp6aWNvUGxhY2Vib1BsYW5hcmVQbGFzbWFQbGF0YW5vUGxlbmFyaW9Qb2NoZXp6YVBvZGVyb3NvUG9kaXNtb1BvZXNpYVBvZ2dpYXJlUG9sZW50YVBvbGlnb25vUG9sbGljZVBvbG1vbml0ZVBvbHBldHRhUG9sc29Qb2x0cm9uYVBvbHZlcmVQb21pY2VQb21vZG9yb1BvbnRlUG9wb2xvc29Qb3JmaWRvUG9yb3NvUG9ycG9yYVBvcnJlUG9ydGF0YVBvc2FQb3NpdGl2b1Bvc3Nlc3NvUG9zdHVsYXRvUG90YXNzaW9Qb3RlcmVQcmFuem9QcmFzc2lQcmF0aWNhUHJlY2x1c29QcmVkaWNhUHJlZmlzc29QcmVnaWF0b1ByZWxpZXZvUHJlbWVyZVByZW5vdGFyZVByZXBhcmF0b1ByZXNlbnphUHJldGVzdG9QcmV2YWxzb1ByaW1hUHJpbmNpcGVQcml2YXRvUHJvYmxlbWFQcm9jdXJhUHJvZHVycmVQcm9mdW1vUHJvZ2V0dG9Qcm9sdW5nYVByb21lc3NhUHJvbm9tZVByb3Bvc3RhUHJvcm9nYVByb3Rlc29Qcm92YVBydWRlbnRlUHJ1Z25hUHJ1cml0b1BzaWNoZVB1YmJsaWNvUHVkaWNhUHVnaWxhdG9QdWdub1B1bGNlUHVsaXRvUHVsc2FudGVQdW50YXJlUHVwYXp6b1B1cGlsbGFQdXJvUXVhZHJvUXVhbGNvc2FRdWFzaVF1ZXJlbGFRdW90YVJhY2NvbHRvUmFkZG9wcGlvUmFkaWNhbGVSYWR1bmF0b1JhZmZpY2FSYWdhenpvUmFnaW9uZVJhZ25vUmFtYXJyb1JhbWluZ29SYW1vUmFuZGFnaW9SYW50b2xhcmVSYXBhdG9SYXBpbmFSYXBwcmVzb1Jhc2F0dXJhUmFzY2hpYXRvUmFzZW50ZVJhc3NlZ25hUmFzdHJlbGxvUmF0YVJhdnZlZHV0b1JlYWxlUmVjZXBpcmVSZWNpbnRvUmVjbHV0YVJlY29uZGl0b1JlY3VwZXJvUmVkZGl0b1JlZGltZXJlUmVnYWxhdG9SZWdpc3Ryb1JlZ29sYVJlZ3Jlc3NvUmVsYXppb25lUmVtYXJlUmVtb3RvUmVubmFSZXBsaWNhUmVwcmltZXJlUmVwdXRhcmVSZXNhUmVzaWRlbnRlUmVzcG9uc29SZXN0YXVyb1JldGVSZXRpbmFSZXRvcmljYVJldHRpZmljYVJldm9jYXRvUmlhc3N1bnRvUmliYWRpcmVSaWJlbGxlUmlicmV6em9SaWNhcmljYVJpY2NvUmljZXZlcmVSaWNpY2xhdG9SaWNvcmRvUmljcmVkdXRvUmlkaWNvbG9SaWR1cnJlUmlmYXNhcmVSaWZsZXNzb1JpZm9ybWFSaWZ1Z2lvUmlnYXJlUmlnZXR0YXRvUmlnaGVsbG9SaWxhc3NhdG9SaWxldmF0b1JpbWFuZXJlUmltYmFsem9SaW1lZGlvUmltb3JjaGlvUmluYXNjaXRhUmluY2Fyb1JpbmZvcnpvUmlubm92b1Jpbm9tYXRvUmluc2F2aXRvUmludG9jY29SaW51bmNpYVJpbnZlbmlyZVJpcGFyYXRvUmlwZXR1dG9SaXBpZW5vUmlwb3J0YXJlUmlwcmVzYVJpcHVsaXJlUmlzYXRhUmlzY2hpb1Jpc2VydmFSaXNpYmlsZVJpc29SaXNwZXR0b1Jpc3Rvcm9SaXN1bHRhdG9SaXN2b2x0b1JpdGFyZG9SaXRlZ25vUml0bWljb1JpdHJvdm9SaXVuaW9uZVJpdmFSaXZlcnNvUml2aW5jaXRhUml2b2x0b1Jpem9tYVJvYmFSb2JvdGljb1JvYnVzdG9Sb2NjaWFSb2NvUm9kYWdnaW9Sb2RlcmVSb2RpdG9yZVJvZ2l0b1JvbGxpb1JvbWFudGljb1JvbXBlcmVSb256aW9Sb3NvbGFyZVJvc3BvUm90YW50ZVJvdG9uZG9Sb3R1bGFSb3Zlc2Npb1J1Yml6em9SdWJyaWNhUnVnYVJ1bGxpbm9SdW1pbmVSdW1vcm9zb1J1b2xvUnVwZVJ1c3NhcmVSdXN0aWNvU2FiYXRvU2FiYmlhcmVTYWJvdGF0b1NhZ29tYVNhbGFzc29TYWxkYXR1cmFTYWxnZW1tYVNhbGl2YXJlU2FsbW9uZVNhbG9uZVNhbHRhcmVTYWx1dG9TYWx2b1NhcGVyZVNhcGlkb1NhcG9yaXRvU2FyYWNlbm9TYXJjYXNtb1NhcnRvU2Fzc29zb1NhdGVsbGl0ZVNhdGlyYVNhdG9sbG9TYXR1cm5vU2F2YW5hU2F2aW9TYXppYXRvU2JhZGlnbGlvU2JhbHpvU2JhbmNhdG9TYmFycmFTYmF0dGVyZVNiYXZhcmVTYmVuZGFyZVNiaXJjaWFyZVNibG9jY2F0b1Nib2NjaWF0b1NicmluYXJlU2JydWZmb25lU2J1ZmZhcmVTY2Ficm9zb1NjYWRlbnphU2NhbGFTY2FtYmlhcmVTY2FuZGFsb1NjYXBvbGFTY2Fyc29TY2F0ZW5hcmVTY2F2YXRvU2NlbHRvU2Nlbmljb1NjZXR0cm9TY2hlZGFTY2hpZW5hU2NpYXJwYVNjaWVuemFTY2luZGVyZVNjaXBwb1NjaXJvcHBvU2Npdm9sb1NjbGVyYXJlU2NvZGVsbGFTY29scGl0b1Njb21wYXJ0b1Njb25mb3J0b1Njb3ByaXJlU2NvcnRhU2Nvc3NvbmVTY296emVzZVNjcmliYVNjcm9sbGFyZVNjcnV0aW5pb1NjdWRlcmlhU2N1bHRvcmVTY3VvbGFTY3Vyb1NjdXNhcmVTZGViaXRhcmVTZG9nYW5hcmVTZWNjYXR1cmFTZWNvbmRvU2VkYW5vU2VnZ2lvbGFTZWduYWxhdG9TZWdyZWdhdG9TZWd1aXRvU2VsY2lhdG9TZWxldHRpdm9TZWxsYVNlbHZhZ2dpb1NlbWFmb3JvU2VtYnJhcmVTZW1lU2VtaW5hdG9TZW1wcmVTZW5zb1NlbnRpcmVTZXBvbHRvU2VxdWVuemFTZXJhdGFTZXJiYXRvU2VyZW5vU2VyaW9TZXJwZW50ZVNlcnJhZ2xpb1NlcnZpcmVTZXN0aW5hU2V0b2xhU2V0dGltYW5hU2ZhY2Vsb1NmYWxkYXJlU2ZhbWF0b1NmYXJ6b3NvU2ZhdGljYXRvU2ZlcmFTZmlkYVNmaWxhdG9TZmluZ2VTZm9jYXRvU2ZvZGVyYXJlU2ZvZ29TZm9sdGlyZVNmb3J6YXRvU2ZyYXR0b1NmcnV0dGF0b1NmdWdnaXRvU2Z1bWFyZVNmdXNvU2dhYmVsbG9TZ2FyYmF0b1Nnb25maWFyZVNnb3JiaW9TZ3Jhc3NhdG9TZ3VhcmRvU2liaWxvU2ljY29tZVNpZXJyYVNpZ2xhU2lnbm9yZVNpbGVuemlvU2lsbGFiYVNpbWJvbG9TaW1wYXRpY29TaW11bGF0b1NpbmZvbmlhU2luZ29sb1NpbmlzdHJvU2lub1NpbnRlc2lTaW51c29pZGVTaXBhcmlvU2lzbWFTaXN0b2xlU2l0dWF0b1NsaXR0YVNsb2dhdHVyYVNsb3Zlbm9TbWFycml0b1NtZW1vcmF0b1NtZW50aXRvU21lcmFsZG9TbWlsem9TbW9udGFyZVNtb3R0YXRvU211c3NhdG9TbmVsbGlyZVNuZXJ2YXRvU25vZG9Tb2JiYWx6b1NvYnJpb1NvY2NvcnNvU29jaWFsZVNvZGFsZVNvZmZpdHRvU29nbm9Tb2xkYXRvU29sZW5uZVNvbGlkb1NvbGxhenpvU29sb1NvbHViaWxlU29sdmVudGVTb21hdGljb1NvbW1hU29uZGFTb25ldHRvU29ubmlmZXJvU29waXJlU29wcGVzb1NvcHJhU29yZ2VyZVNvcnBhc3NvU29ycmlzb1NvcnNvU29ydGVnZ2lvU29ydm9sYXRvU29zcGlyb1Nvc3RhU290dGlsZVNwYWRhU3BhbGxhU3BhcmdlcmVTcGF0b2xhU3BhdmVudG9TcGF6em9sYVNwZWNpZVNwZWRpcmVTcGVnbmVyZVNwZWxhdHVyYVNwZXJhbnphU3Blc3NvcmVTcGV0dHJhbGVTcGV6emF0b1NwaWFTcGlnb2xvc29TcGlsbGF0b1NwaW5vc29TcGlyYWxlU3BsZW5kaWRvU3BvcnRpdm9TcG9zb1NwcmFuZ2FTcHJlY2FyZVNwcm9uYXRvU3BydXp6b1NwdW50aW5vU3F1aWxsb1NyYWRpY2FyZVNyb3RvbGF0b1N0YWJpbGVTdGFjY29TdGFmZmFTdGFnbmFyZVN0YW1wYXRvU3RhbnRpb1N0YXJudXRvU3Rhc2VyYVN0YXR1dG9TdGVsb1N0ZXBwYVN0ZXJ6b1N0aWxldHRvU3RpbWFTdGlycGVTdGl2YWxlU3Rpenpvc29TdG9uYXRvU3Rvcmljb1N0cmFwcG9TdHJlZ2F0b1N0cmlkdWxvU3Ryb3p6YXJlU3RydXR0b1N0dWNjYXJlU3R1Zm9TdHVwZW5kb1N1YmVudHJvU3VjY29zb1N1ZG9yZVN1Z2dlcml0b1N1Z29TdWx0YW5vU3VvbmFyZVN1cGVyYm9TdXBwb3J0b1N1cmdlbGF0b1N1cnJvZ2F0b1N1c3N1cnJvU3V0dXJhU3ZhZ2FyZVN2ZWRlc2VTdmVnbGlvU3ZlbGFyZVN2ZW51dG9TdmV6aWFTdmlsdXBwb1N2aXN0YVN2aXp6ZXJhU3ZvbHRhU3Z1b3RhcmVUYWJhY2NvVGFidWxhdG9UYWNjaWFyZVRhY2l0dXJub1RhbGVUYWxpc21hbm9UYW1wb25lVGFubmlub1RhcmFUYXJkaXZvVGFyZ2F0b1RhcmlmZmFUYXJwYXJlVGFydGFydWdhVGFzdG9UYXR0aWNvVGF2ZXJuYVRhdm9sYXRhVGF6emFUZWNhVGVjbmljb1RlbGVmb25vVGVtZXJhcmlvVGVtcG9UZW11dG9UZW5kb25lVGVuZXJvVGVuc2lvbmVUZW50YWNvbG9UZW9yZW1hVGVybWVUZXJyYXp6b1RlcnpldHRvVGVzaVRlc3NlcmF0b1Rlc3RhdG9UZXRyb1RldHRvaWFUaWZhcmVUaWdlbGxhVGltYnJvVGludG9UaXBpY29UaXBvZ3JhZm9UaXJhZ2dpb1Rpcm9UaXRhbmlvVGl0b2xvVGl0dWJhbnRlVGl6aW9UaXp6b25lVG9jY2FyZVRvbGxlcmFyZVRvbHRvVG9tYm9sYVRvbW9Ub25mb1RvbnNpbGxhVG9wYXppb1RvcG9sb2dpYVRvcHBhVG9yYmFUb3JuYXJlVG9ycm9uZVRvcnRvcmFUb3NjYW5vVG9zc2lyZVRvc3RhdHVyYVRvdGFub1RyYWJvY2NvVHJhY2hlYVRyYWZpbGFUcmFnZWRpYVRyYWxjaW9UcmFtb250b1RyYW5zaXRvVHJhcGFub1RyYXJyZVRyYXNsb2NvVHJhdHRhdG9UcmF2ZVRyZWNjaWFUcmVtb2xpb1RyZXNwb2xvVHJpYnV0b1RyaWNoZWNvVHJpZm9nbGlvVHJpbGxvVHJpbmNlYVRyaW9UcmlzdGV6emFUcml0dXJhdG9Ucml2ZWxsYVRyb21iYVRyb25vVHJvcHBvVHJvdHRvbGFUcm92YXJlVHJ1Y2NhdG9UdWJhdHVyYVR1ZmZhdG9UdWxpcGFub1R1bXVsdG9UdW5pc2lhVHVyYmFyZVR1cmNoaW5vVHV0YVR1dGVsYVViaWNhdG9VY2NlbGxvVWNjaXNvcmVVZGlyZVVkaXRpdm9VZmZhVWZmaWNpb1VndWFsZVVsaXNzZVVsdGltYXRvVW1hbm9VbWlsZVVtb3Jpc21vVW5jaW5ldHRvVW5nZXJlVW5naGVyZXNlVW5pY29ybm9VbmlmaWNhdG9Vbmlzb25vVW5pdGFyaW9VbnRlVW92b1VwdXBhVXJhZ2Fub1VyZ2VuemFVcmxvVXNhbnphVXNhdG9Vc2NpdG9Vc2lnbm9sb1VzdXJhaW9VdGVuc2lsZVV0aWxpenpvVXRvcGlhVmFjYW50ZVZhY2NpbmF0b1ZhZ2Fib25kb1ZhZ2xpYXRvVmFsYW5nYVZhbGdvVmFsaWNvVmFsbGV0dGFWYWxvcm9zb1ZhbHV0YXJlVmFsdm9sYVZhbXBhdGFWYW5nYXJlVmFuaXRvc29WYW5vVmFudGFnZ2lvVmFudmVyYVZhcG9yZVZhcmFub1ZhcmNhdG9WYXJpYW50ZVZhc2NhVmVkZXR0YVZlZG92YVZlZHV0b1ZlZ2V0YWxlVmVpY29sb1ZlbGNyb1ZlbGluYVZlbGx1dG9WZWxvY2VWZW5hdG9WZW5kZW1taWFWZW50b1ZlcmFjZVZlcmJhbGVWZXJnb2duYVZlcmlmaWNhVmVyb1ZlcnJ1Y2FWZXJ0aWNhbGVWZXNjaWNhVmVzc2lsbG9WZXN0YWxlVmV0ZXJhbm9WZXRyaW5hVmV0dXN0b1ZpYW5kYW50ZVZpYnJhbnRlVmljZW5kYVZpY2hpbmdvVmljaW5hbnphVmlkaW1hcmVWaWdpbGlhVmlnbmV0b1ZpZ29yZVZpbGVWaWxsYW5vVmltaW5pVmluY2l0b3JlVmlvbGFWaXBlcmFWaXJnb2xhVmlyb2xvZ29WaXJ1bGVudG9WaXNjb3NvVmlzaW9uZVZpc3BvVmlzc3V0b1Zpc3VyYVZpdGFWaXRlbGxvVml0dGltYVZpdmFuZGFWaXZpZG9WaXppYXJlVm9jZVZvZ2FWb2xhdGlsZVZvbGVyZVZvbHBlVm9yYWdpbmVWdWxjYW5vWmFtcG9nbmFaYW5uYVphcHBhdG9aYXR0ZXJhWmF2b3JyYVplZmlyb1plbGFudGVaZWxvWmVuemVyb1plcmJpbm9aaWJldHRvWmluY29aaXJjb25lWml0dG9ab2xsYVpvdGljb1p1Y2NoZXJvWnVmb2xvWnVsdVp1cHBhXCI7bGV0IHdvcmRsaXN0JDY9bnVsbDtmdW5jdGlvbiBsb2FkV29yZHMkNihsYW5nKXtpZih3b3JkbGlzdCQ2IT1udWxsKXtyZXR1cm59d29yZGxpc3QkNj13b3JkcyQ0LnJlcGxhY2UoLyhbQS1aXSkvZyxcIiAkMVwiKS50b0xvd2VyQ2FzZSgpLnN1YnN0cmluZygxKS5zcGxpdChcIiBcIik7aWYoV29yZGxpc3QuY2hlY2sobGFuZykhPT1cIjB4NWMxMzYyZDg4ZmQ0Y2Y2MTRhOTZmMzIzNDk0MWQyOWY3ZDM3YzA4YzUyOTJmZGUwM2JmNjJjMmRiNmZmNzYyMFwiKXt3b3JkbGlzdCQ2PW51bGw7dGhyb3cgbmV3IEVycm9yKFwiQklQMzkgV29yZGxpc3QgZm9yIGl0IChJdGFsaWFuKSBGQUlMRURcIil9fWNsYXNzIExhbmdJdCBleHRlbmRzIFdvcmRsaXN0e2NvbnN0cnVjdG9yKCl7c3VwZXIoXCJpdFwiKX1nZXRXb3JkKGluZGV4KXtsb2FkV29yZHMkNih0aGlzKTtyZXR1cm4gd29yZGxpc3QkNltpbmRleF19Z2V0V29yZEluZGV4KHdvcmQpe2xvYWRXb3JkcyQ2KHRoaXMpO3JldHVybiB3b3JkbGlzdCQ2LmluZGV4T2Yod29yZCl9fWNvbnN0IGxhbmdJdD1uZXcgTGFuZ0l0O1dvcmRsaXN0LnJlZ2lzdGVyKGxhbmdJdCk7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgZGF0YSQyPVwifWFFIzRBPVl2JmNvIzROIzZHPWNKJlNNIzY2fC9aIzR0JmtufjQ2IzRLfjRxJWI5PUlSIzdsLG1CIzdXX1gyKmRsfVVvfjdzfVVmJkl3IzljJmN3fjZPJkg2Jnd4JklHJXY1PUlRfjhhJlB2IzQ3JFBSJjUwJUtvJlFNJjNsIzVmLEQ5IzRMfC9IJnRRO3YwfjZuXW5OPGRpLEFNPVc1JVFPJmthJnVhLGhNXnRtPXpWPUpBPXdSJitYXTdQJk5CIzRKIzVMfC9iW2RBfXRKPERvJjZtJnUyW1UxJktiLkhNJm1DPXcwJk1XPHJZLEhxIzZNfVFHLDEzJndQfUpwXU93JXVlJktnPEhQPEQ5fjRrfjlUJkkyX2M2JDlUIzkvW0M1fjdPfjRhPWNzJk83PUtLPUFuJmw5JDZVJDhBJnVEJlFJfC9ZJmJnfVV4JkYyIzZifUUyJkpOJmtXJmtwPVUvJmJiPVhsPENqfWsrfjVKIzZMJjV6JjlpfWI0JkZvLGhvKFgwX2czfjRPJEZ6JlFFPEhOPVd3XTYvJUdGLVZ3PXRqJi9EJlBOIzlnPVlPfWNMJk9mJlBJfjVJJklwPXZVPUlXIzlHOzBvLXdVfXNzJlFSPEJUJlI5PXRrJFBZX2RoJlBxLXloXTdULG5qLlh1PUVQJjc2PWNJJkZzKlhnfXo3JEdiJitJPURGLEFGPWNBfXJMIzdqPUR6JjN5PEFhJDUyPVBRfWIwKGlZJEZhfW9MJnhWIzZVPWVjPVdaLHhoJVJZPGRwIzlOJkZsJjQ0PVdIKkE3PXNoJlRCJjhQPTA3O3UrJlBLfXVofUo1IzcyKVYvPXhDLEFCJGswJmY2OzFFfCs1PTFCLDN2XTZuJndSJWIrJnh4XTdmPU9sfWZsOytEXndHXTdFO25CO3VoXklyJmw1PUpMLG5TPWNmPWc1O3U2fC9RJEdjPU1IJUhnIzVkJU02Xjg2PVUrJEd6LGwvLGlyXjV5JkJhJi9GLUlZJkZJJmJlJUlaIzc3JlBXX051JGtFKFlmJk5YXTdaLEp5JkZKKFhvJk56Iy9kPXk3Jk1YPEFnfVorO25FXUR0KGlHIzREPTEzJlBqfjRjJXY4JlpvJU9MJi9YIzRXPEhSJmllfjZKXzFPKFkyPXk1PUFkKmN2X2VCIzZrJlBYOkJVIzdBO3VrJkZ0JkZ4X2REPVUyO3ZCPVU1PTRGfStPJkdOLkhIOjlzPWIwJU5WKGpPJklIPUpUfVo5PVZaPEFmLEt4XjRtJnVKJWM2LDZyOzltIytMfWNmJUtoJkYzfjRIPXZQfWJ1LEh6fCsrLDF3XW52fWs2O3V1JGp3KktsKldYJnVNW3g3JkZyW203JE5PJlFOXWh1PUpOfW5SXjhnIy9oKHBzfEtDO3ZkfXh6PVYwfXA2JkZEJEcxIzdLPGJHXzRwfjhnJmNmO3U0PXRsfStrJTUvfWZ6O3V3PGNBPXUxfWdVfVZNPUxKPWVYJitMJlByIzRVfXAyOm5DLDJLXTdIOmpGJjl4fXVYIzlPPU1CPGZ6fjhYfjVtJjREJmtOJnU1JUUvKGg3KFpGJlZHPGRlKHFNfC9lLVd0PTN4KGErLC9SXWYvJk5EJFJvJm5VfTBnPUtBJWtIJk5LJEtlPGRTfWNCJklYfjVnJFROXTZtPVV2LElzJlB5PUVmJUt6IysvJWJpJitBPEY0JE9HJjRDJkZMIzlWPFprPTJJX2VFJjZjXW53JmtxJEhHfXkrJkE4JFAzfU9IPVhQXTcwJUlTKEFKX2dIJUdaJnRZJkFaPXZifjZ5Ji9yPVZJPVd2PFppPWZsPXhmJmVMfWM4fU9MPU1KPWc4JEY3PVlUfTl1PTArXnhDfUpIJm5MXk4wfjRUXUsyLEN5JU9DIzZzO3ZHKEFDXnhlXmNHJk1GfUJyIzlQO3dELTdoJE8vJnhBfUZuXlBDXTZpXTdHJjhWJFFzO3ZsKFRCfjczfjRsPG1XJjZWPTJ5JnVZJiszKWFQfVhGO0xQJmt4JHdVPXQ3O3V5PEZOJmx6KTdFPU9vKlkrO3dJfTlxfWxlO0o2JlJpJjR0JlFyIzhCPWNiJnZHPUo1fFFsKGg1PFl5fjQrfVFELEx4PXduJUsvJlJLPWRPJlB3LFE5PWNvJTR1Ozl1fWcwQDZhXjRJJWIwPXpvfC9jJnRYPWRRPU9TIytiPXl6X0FCJndCJlBtPVc5JEhQX2dSPTYyPUFPPXRpPWhJLG9BJmpyJmRIPXRtJmI2JFAyKHg4PXppO25HfjdGOzA1XTBuW0l4JjNtfXJnPVhwPWNkJnV6XTd0Ozk3PWNOO3ZWPGpmJkZGJkYxPTZRJklrKktrJlA0LDJ6PWZRXTdEJjN1LEgwPWQvfVV3PFpOPDdSfUt2OzBmJEg3LE1EXTduJEYwIzg4fjlaJWRhPWJ5OytUIy91PVZGJmZPJmtyXmtmPEFCXXNVLEk1JE5nJlB6OzBpJlFEJnZNPVlsOkJNO25KX3hKXVU3JktmJjMwLDNmfFo5KmRDKWplX2pBJlE0JktwJE5IKFl6IzZTJklkJUliPUtYLEFEPUtWJWRQfXRXJlBrXitFX05pPWNxLDNSfVZaKFNpPWIrfXJ2OzBqfXJaXXVBLC93KFN4Jkp2JHc5JjRkJndFLE5KJEd5PUovXUxzIzdrPFpRPFkvJnVqXU92JFBNO3YzLDJGJit1OnVwPU9uJjNlLEp2OzkwPUorJlFtXTZxfWJLIytkfjhZKGgyXWhBOzk5JkFTPUkvfXFCJmRRfXlKLVZNfVZsJnVpLGlCJkczfERjXTdkPWVRJWRYJUpDXzFMfjRkXk5QO3ZKJi8xKVpJIzdOXTlYW2JRJlBMPTBMKFVaLExtJmtjJklSfW43KGlSPEFRPGRnPTMzPXZOfWZ0fWF1XTdJLEJhPXg5PWRSfjZSJlRxPVhpLDNkJE5yJkJjfURJJmt1JnZmXURuLC9GJmlELExsJk53PTB5Jkk3PUxzPS9BJnRVPVFlfVVhJnVrJitGPWc0PWdoPVZqIysxJlFufVV5KjQ0IzVGLFBjJlJ6KlhuPW9oPTVXOzBuX05mKGlFPFk3PXZyPVp1XW96IzVaJW1JPWtOPUJ2X0pwKFQyO3Z0X01sPEZTJnVJPUwvJjZQXTY0JE03fTg2PGJvJVFYKFNJJUlZJlZLPUFsJlV4O3Z2O3V0KkUvJXVoPFpFfE8zLE0yKHljXXl1PVdrJnRwOkV4fWhyLENsJldFKStaPThVfUkyXzRRLGhBX3NpPWl3PU9NPXRNPXlaJUlhPVU3O3dUfWIrO3VvPVphfXlTITV4fUhEfWZiIzVPX2RBO052JXVCKHlCOzAxKFNmfUZrO3Y3fVB0Izh2PG1aIzdMLC9yJlBsfjR3JmY1PVBoJEZ3X0xGJjhtLGJMPXlKJkJIfXAvKkpufXRVfjVRO3dCKGg2XURmXThwXitCO0U0JldjPWQrO0VhJmJ3JDhDJkZOLERNPVlmfW1QfjV3PWZUIzZWPW1DPUZpPUFWfWpCJkFOfWxXfWFIIy9EKWRaO2hsO3ZFfS83LENKOzMxJnc4LGhqJXU5X0pzPWpKJjRNfjhrPVROJmVDfW5MJnVjLXdpJmxYfWRqPU12PWUyIzZ1PWNyJHVxJDZHXThXfUpiOm5tPVlnPGIzKFVBO3ZYJjZuJnhGPUtULGpDLERlJlI4Jm9ZPVp2Jm9CXTcvPVoyJk9hfWJmLGhoKDRoXnRaJjcyJk54O0QyJnhMfjVofjQwKVpHKWgrPU9KJlJBXUJ2JHlCPU9xPWRmLEFRJUpufU9KOzExLDN6JlRsJnRqO3YrXkh2LERoKGlkPXMrXTdOJk4zKTlRfjhmLFM0PXVXPXc0JnVYLExYJjNkXUNKJnlwJjh4PGIyX2RvJmxQPXkvPGN5X2RHPU9pPTdSKFZIKGx0XzFULElxX0FBOzEyXjZUJWs2IzhLW0Ixe29PPEFVW0J0OzFiJDlTJlBzPDhUPVN0e2JZLGpCKFpwJjYzJlV2JDlWLFBNXTZ2JkFmfXpXW2JXX29xfXNtfW5CJktxJmdDJmZmX2VxXzJtJjVGJlRJfXJmfUdmO1pyX3o5O0VSJmprfWl6X3NuPEJOfituJnZvPVZpJTk3fFpSPVdjLFdFJjZ0XTZ6JTg1KGx5Izg0PUtZKTZtXzUvPWFYLE4zfVRtJmhlJjZLXXRSX0IyLUkzO3UvJmhVJmxIPEFQPWlCJklBPVhMOy81Jk5oPXd2PEJIIzc5PXZTPXpsPEFBPTBYX1JHfUJ3JjlwJE5XLEFYJmtQX0xwJi9aKFRjXU11fWhzIzZJfTVCJmNJPGJxJkg5IzZtPUs5fXZIKFkxKFkwIzRCJnc2LC85JmdHPGJFLC9PPXpifUk0X2w4PEIvO3dMJVFvPEhPW01xPVhYfTB2JkJQJkY0KG1HfTBpfW5tLEVDPTl1e0kzLHhHJi85PUpZKkRLJmhSKUJYPUVJPWN4PWIvezZrfXlYJUErJndhfVhiPWxhO3dpXmxMOzB0fWpvJlFiPXhnPVhCfWlPPHFve2JSPU5WJjhmPWEwJkp5OzB2PXVLKUhLO3ZOIzZoJmpCKGgvJXVkJk5JJXdZLlg3PVB0fUN1LXVMJkdzX2hsJW1ILHRtXTc4PUxiXlEwIzdZPTF1PEJ0JitRPUNvX1JILHczOzFlfXV4PGFVO3VpfVUzJlE1JWJ0XTYzJlVRfDBsJnVMfU83JjNvLEFWJmRtfE5qKFh0KjUrKFV1JkhoKHA3KFVGPVZSPUJwXkpsJkhkW2l4KTkvPUlxXUM4PDY3XTY2fW1CJTZmfWJifUpJXThUJEhBfWRiPVlNJnBhPTJKfXRTJlkwPVBTJnk0PWNYJDZFLGhYLFhQJm5SOzA0LEZRJmwwJlZtX0R2IzVZfjhaPUJpJU1BXTZ4PUpPOitwLEF6JjlxLEhqfjYvfVNEPUsxOkVKfW5BO1FvIy9FXTlSLEllJjZYJVczXTYxJnY0PXhYX01DPTBxOzA2KFhxPWZzfUlHfUR2PTBsfW83JGlaOzl2JkxIJkRQLTdhJk9ZLFNaLEt6LEN2JmRoPWZ4fE5oLEYvfjdxPVhGJncrOzluJkd3OzBofVo3PDdPJkpLKFM3JkxTPEFEPGFjPXdvPER0Jnp3JTRCPTR2IzhQOzlvfjZwKnZWPVRtLE9yJkk2PTFxfW5ZPVAwPWdxJkJsJlV1LENoJXlifVVZPXpofWRofXJsKFQ0X3hrKFlBIzhSKnhILElOfUpuXTdWfUM0JlR5fWozXTdwPWNMPTNoJndXJVF2PFozPWYwJlJJJitTKGljX3pxfW9OJi9ZPXoxO1RkPUxXPTBlPU9JKFZjLCtiXmp1KFVMOzByOlphJTh2PVJwPXp3JjU4JjczJndLfXFYXTZ5JjhFKWEyfVdSPXdQXnVyJm5RPGNIfVJlPUFxJndrfVEwJitxPVBQLEdjfC9kXms1LEZ3XThZfVBnXXAzPWp1PWVkfXI1X3lmJkNzXTd6JC9HPENtJkpwJjU0XzFHX2dQX0xsfUpaOzB1XWs4XzdrKFNnXTY1ezlpPUxOJlN4JldLLGlXJmZEJkxrezlhfUVtLTljIzhOJmlvPXN5XThkJm5UJklLKGx4IzcvJGxXKFRkPHM4fjQ5LDNvPDdZPU1XKFQrX0pyJldkLGlMfUN0PXhoJjVWO3Y0JjhuJUt4PWlGJmwyXzBCe0IrLElmKEowLEx2O3U4PUt4LXZCPUhDJnZTPVo2JmZVJnZFXnhLOzNEPTRoPU1SIzQ1Okp3OzBkfWl3PUxVfUk1PUkwXWdCKmltLEs5fUdVLDFrXzRVJlR0PVZzKGlYJmxVKFRGIzd5LFpPfW9BJm01IzVQfVBOfVV6PWhNPEIxJkZCPGFHLGU2fjdUPHRQKFVRX1pUPXd1JkY4KWFRXWlOLDFyX0xvJi9nOkNEfTg0e0oxX0tpJk5hJjNuJGp6JkZFPWRjO3V2O3ZhfWlufWxsPWZ2KGgxJjNofWZwPUN5fUJNKCtFfjhtfWxvJXY3PWhDKFQ2JGNqPUJRPUJ3KERSLDJqPUtzLE5TfEYrOzAwPWZVPTcwfU1iKFlVOytHJm03JmhyPVNrJUNvXXQrKFg1X0p3fTByfWdDKEFTLUlQJlFLPFoyIzhRJFdDXVdYfVQyJnBHX0thLEhDPVI0Ji9OO1orO2NoKEM3LEQ0JDNwX01rJkIyJDhEPW45JUt5IzV6KENUJlFKIzdCXURDXWdXfW5mfjVNO0l3IzgwfVRjXzFGIzRaLWFDfUhsPXBoPWZ6LC8zPWFXfUpNfW5uO0RHO3ZtfXduLDRQfVQzO3d4JlJHJHUrfXpLPTBiOytKX0Vre3JlPGFaPUFTfXlZIzVEXTdxLENwfXhOPVZQKjJDfUdafWFHfittX0NzPU9ZIzZyXTZnPEdTfUxDKFVCPTNBPUJvfUp5PGM0fUlzOzFQPEFHfU9wPFoxfWxkfW5TPTFaLHlNJjk1Jjk4PUNKKDR0OjJMJEhrPVpvfVZjOytJfW5wJk4xfTl5PWl2fUNPKjdwPWpMKXB4XXRiXnpoJkdTJlZsJXYvO3ZSPTE0PXpKJjQ5fC9mXWhGfVdHOzAzPThQfW8vJkdnJnJwO0RCLEt2fUppJlBiO2FBXmxsKDRqJXl0fStLJEh0IzR5JmhZXTdZPEYxLGVOfWJHKFVoJTZaXXQ1JUc3OytGX1JFO2l0fXRMPUxTJkRhPVh4KFMrKDRmPThHPXlJfWNKfVdQPTM3PWpTfXBYfWhkKWZwPEE4PUp0fitvJEhKPU02fWlYPWc5fUNTPWR2PUNqKG1QJUtkLHhxfCs5JkxEKDQvPVhtJlFQPUxjfUxYJmZMOytLPU9wKGx1PVFzLnFDOitlJkwrPUpqIzh3O1NMXTdTKGIrIzRJPWMxJm5HX0xmJnVIOytSKVpWPGJWJUIvLFRFJjBIJkpxJkFoJU9GJlNzKHAyLFd2JkkzPVdsfVZxOzFMJmxKIzliXzFIPThyPWI4PUpIKFNaPWhEPUoyIzdVLC9VIy9YfjZQLEZVPGVMPWp4LG1HPWhHPUNFJlBVPVNlKHFYJkxZPVg2PXk0JnRrJlFRJnRmPTRnJnhJfVcrJm1aPURjIzd3fUxnO0RBO3dRX0tiKGNKPWhSJXlYJlliLGh3e2JYXzRYO0VQOzFXXzJNfVVjPWI1KFlGLENNJlRwXk9Ke0REXTZzPXZGPVlvfjhxfVhIfUZ1JVA1KFNKPVF0O01PXXM4PEYzJkIzJjhUKFVsLUJTKmR3JmRSPDg3fS84XTYyJFBaXUx4PEF1fTlRXTdjPWphPUtSLEdvLFVzJnY2KHFrfXBHJkcyPWV2XkdNJXc0Jkg0XTdGJmR2XUo2fUV3Ojl3PXNqLVpMfVltJCtoKFV0KFVtfjRuPVhzKFU3JWVFPVFjX0pSPENBIzZ0PEZ2fC9JLElTLEVHPEYyKFh5JC9uPEZhKGg5fSs5XzJvJk40IzdYPFpxfCtmX0RwPWR0Jm5hLENhPU5KKWpZPThDPVlHPXM2JlErPERPfUQzPXhCJlIxKGx3O1FuPGJGKEN1fC9CfUhWPVNTJm43LDEwJnUwXURtJUE2XjRRPVdSKFREPVhvPEdILFJqKGw4KWJQJm4vPUxNJkNGLEY1Jm1sPVBKOzBrPUxHPXRxLFJoLEQ2QDRpPTFwJis5PVlDJWVyX01oO25JOzBxPUZ3XTgwPXhxPUZNJEd2O3Y2Jm5jO3dLJUgyJktqO3ZzLEFBPVlQLDY2fWJJKHFSfjVVPTZxfjRiJE5pPUs1LlgzJFNvJkl1KHArXThHPUNmPVJZKFRTX08zKGlIJjU3PWZFPURnX0RvIzl6IzdIO0ZLe3FkXzJrJUpSfWVuJmdoX3o4O1J4fTlwPGNOX05lLERPO0xOXzdvfi9wPU5GPTVZfWdOPGNlPEMxLFFFXVd2PTN1PEJDfUdLXXlxfURZJnUvX2hqPUlJKHB6JnJDLGpWJitafXV0PU5RO0NnLVNSX1pTLCtvPXUvO095X1JLX1FGKEZ4JnhQfVdyJlRBLFVoJmcxPXlye2F4W1ZGJFBnKFlCO094PVZ5OytXKFNwfVhWJWRkJjMzKGwvXWw0IzRZfU9FPTZjPWJ3KEE3Jjl0JXdkJk4vJm1vLEpIJlFlKWZtPUFvfWZ1PXRIXCI7Y29uc3QgZGVsdGFEYXRhPVwiRkFaREM2QkFMY0xaQ0ErR0JBUkNXOHdOQ2NERFo4TFZGQk9xcURVaW91K000MlRGQXlFUlhGYjdFamhQK3ZtQkZwRnJVcGZEVjJGN2VCK2VDbHRDSEpGV0xGQ0VEK3BXVG9qRUlIRlhjM2FGbjRGNjh6cWpFdUtpZFMxUUJWUERFaEU3TkE0bWhNRjdvVGhENDlvdDNGZ3R6SEZDSzBhY1cxeDhESDFFbUxvSWxyV0ZCTEUreTUrTkEzQ3g2NXdKSFRhRVpWYUsxbVdBbVBHeGdZQ2R4d09qVERJdC9mYU9FaFRsMXZxTnNLdEpDT2hKV3VpbzJnMDdLTFpFUXNGQlVwTnR3RUJ5Qmd4RnNsRmhlRmJpRVB2aTYxbXNEdkFweEN6QjZyQkN6b3g3am9ZQTVVZERjK0NiNEZTZ0lhYnBYRkFqM2Jqa21GQXhDWkUrbUQvU0ZmLzBFTGVjWUN0M25Mb3hDNldFWmYydEtEQjRvWnZyRW1xRmtLazdCd0lMQTdndFlCcHNUcS8vRDRqRDBGMHdFQjlweVExQkQ1QmEwb1lIREkrc2JERmh2ckhYZERIZmdGRUlKTGk1cjhxZXJjTkZCZ0ZMQzRibzVFUkp0YW1XQkRGeTczS0NFYjZNOFZwbUV0MzMweWdDVEs1OEVJSUZrWWdGODRndEdBOVV5aDNtNjhpVnJGYldGYmNicWlDWUhaOUoxamVSUGJMOHlzd2hNaURiaEVoZE5vU3dGYlpyTFQ3NDBBQkVxZ0NrTzhKMUJMZDFWaEtLUjRzRDF5VW8weitGRjU5TXZnNzFDRmJ5RWhiSFNGQktFSUt5b1FOZ1FwcHE5VDBLQXFlUHUwWkZHclhPSGRLSnFrb1RGaFl2cEROeXV1em5yTjg0dGhKYnNDb082Q3U2WGx2bnR2eTBRWXVBRXhRRVl0VFVCZjNDb0Nxd2dHRlo0dTFISkZ6RFZ3RXkzY2pjcFY0UXZzUGFCQzNyQ0d5Q0YyM280SzNwcDJnYmVyR2dGRUpFSG80bkhJQ3R5S0gyWnF5eGhOMDVLQkJKSVFsS2gvT3Vqdi9ESDMyVnJscUZkSUZDN0Z6OUN0NGthcUZNRTBVRVRMcHJuTjlrZnkra0ZtdFFCQjArNUNGdTBOOUlqOGwvVnZKRGgyb3EzaFQ2RXpqVEhLRk43Wmpad29Uc0FaNEV4c2tvNkZwYTZXQytzZHV6OGp5ckxwZWdUdjJoMUVCZVlwTHBtMmN6UVcwS29DY1MwYkNWWENtdVdKREJqTjFuUU5MZEY1OFNGSjBoN2kzcEMzb0VPS3kvRmpCa2xMNzBYdkJFRUlXcDJ5WjA0eE9iekFXRERKRzdmK0RicUJFQTdMeWlSOTVqN01EVmREVml6MlJFNXZXbEJNdjVlNCtWZmhQM2FYTlBodkxTeW5iOU8yeDR1RkJWKzNqcXU2ZDVwQ0cyOC9zRVRCeXZtdS8rSUowTDN3YjRyajlETk9MQkY2WFBJT0RyNEwxOVU5UlJvZkFHNk54eWRpOEJraThCaEdKYkJBSkt6Ykp4a1pTbEY5UTJDdThvS3FnZ0I5aEJBcndMTHFFQldFdEZvd3k4WEs4YkV5dzlzblQrQmV5RmsxWkNTcmRtZ2ZFd0ZlUFRnQ2pFTEJFbkliamFERFBKbTM2ckc5cHp0Y0V6VDhkR2syM1NCaFhCQjFINHorT1d6ZTBvb0Z6ejhwREJZRnZwOWo5dHZGQnlmOXk0RUZkVm56MDI2Q0dSNXFNcjdmeE1ITjhVVWRseUpBemxUQkRSQzI4aytMNEZCODA3OGxqeUQ5MXRVajFvY25Uczh2ZEVmN3puYnptK0dJakVabm9aRTVybkxMNzAwWGM3eUhmejA1bld4eTAzdkJCOVlHSFlPV3hnTVFHQkNSMjRDVllORTFocGZLeE4wektuZkpEbW1NZ01tQldxTmJqZlN5RkNCV1NDR0NnUjh5RlhpSHlFaitWdEQxRkIzRnBDMXpJMGtGYnppZmlLVExtOXlxNXpGbXVyK3E4Rkhxam9PQldzQlBpRGJuQ0MyRXJ1blY2Y0o2VHlnWEZZSFlwN01LTjlSVWxTSVM4L3hCQUdZTHplcVVuQkY0UWJzVHVVa1VxR3M2Q2FpRFdLV2pRSzlFSmtqcGtUbU5DUFlYTFwiO2NvbnN0IHdvcmRsaXN0JDc9e3poX2NuOm51bGwsemhfdHc6bnVsbH07Y29uc3QgQ2hlY2tzPXt6aF9jbjpcIjB4MTdiY2M0ZDg1NDdlNWE3MTM1ZTM2NWQxYWI0NDNhYWFlOTVlNzZkODIzMGMyNzgyYzY3MzA1ZDRmMjE0OTdhMVwiLHpoX3R3OlwiMHg1MWU3MjBlOTBjN2I4N2JlYzFkNzBlYjZlNzRhMjFhNDQ5YmQzZWM5YzAyMGIwMWQzYTQwZWQ5OTFiNjBjZTVkXCJ9O2NvbnN0IGNvZGVzJDE9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7Y29uc3Qgc3R5bGU9XCJ+IUAjJCVeJipfLT1bXXt9fDs6LC4oKTw+P1wiO2Z1bmN0aW9uIGxvYWRXb3JkcyQ3KGxhbmcpe2lmKHdvcmRsaXN0JDdbbGFuZy5sb2NhbGVdIT09bnVsbCl7cmV0dXJufXdvcmRsaXN0JDdbbGFuZy5sb2NhbGVdPVtdO2xldCBkZWx0YU9mZnNldD0wO2ZvcihsZXQgaT0wO2k8MjA0ODtpKyspe2NvbnN0IHM9c3R5bGUuaW5kZXhPZihkYXRhJDJbaSozXSk7Y29uc3QgYnl0ZXM9WzIyOCsocz4+MiksMTI4K2NvZGVzJDEuaW5kZXhPZihkYXRhJDJbaSozKzFdKSwxMjgrY29kZXMkMS5pbmRleE9mKGRhdGEkMltpKjMrMl0pXTtpZihsYW5nLmxvY2FsZT09PVwiemhfdHdcIil7Y29uc3QgY29tbW9uPXMlNDtmb3IobGV0IGk9Y29tbW9uO2k8MztpKyspe2J5dGVzW2ldPWNvZGVzJDEuaW5kZXhPZihkZWx0YURhdGFbZGVsdGFPZmZzZXQrK10pKyhpPT0wPzIyODoxMjgpfX13b3JkbGlzdCQ3W2xhbmcubG9jYWxlXS5wdXNoKHRvVXRmOFN0cmluZyhieXRlcykpfWlmKFdvcmRsaXN0LmNoZWNrKGxhbmcpIT09Q2hlY2tzW2xhbmcubG9jYWxlXSl7d29yZGxpc3QkN1tsYW5nLmxvY2FsZV09bnVsbDt0aHJvdyBuZXcgRXJyb3IoXCJCSVAzOSBXb3JkbGlzdCBmb3IgXCIrbGFuZy5sb2NhbGUrXCIgKENoaW5lc2UpIEZBSUxFRFwiKX19Y2xhc3MgTGFuZ1poIGV4dGVuZHMgV29yZGxpc3R7Y29uc3RydWN0b3IoY291bnRyeSl7c3VwZXIoXCJ6aF9cIitjb3VudHJ5KX1nZXRXb3JkKGluZGV4KXtsb2FkV29yZHMkNyh0aGlzKTtyZXR1cm4gd29yZGxpc3QkN1t0aGlzLmxvY2FsZV1baW5kZXhdfWdldFdvcmRJbmRleCh3b3JkKXtsb2FkV29yZHMkNyh0aGlzKTtyZXR1cm4gd29yZGxpc3QkN1t0aGlzLmxvY2FsZV0uaW5kZXhPZih3b3JkKX1zcGxpdChtbmVtb25pYyl7bW5lbW9uaWM9bW5lbW9uaWMucmVwbGFjZSgvKD86XFx1MzAwMHwgKSsvZyxcIlwiKTtyZXR1cm4gbW5lbW9uaWMuc3BsaXQoXCJcIil9fWNvbnN0IGxhbmdaaENuPW5ldyBMYW5nWmgoXCJjblwiKTtXb3JkbGlzdC5yZWdpc3RlcihsYW5nWmhDbik7V29yZGxpc3QucmVnaXN0ZXIobGFuZ1poQ24sXCJ6aFwiKTtjb25zdCBsYW5nWmhUdz1uZXcgTGFuZ1poKFwidHdcIik7V29yZGxpc3QucmVnaXN0ZXIobGFuZ1poVHcpO2NvbnN0IHdvcmRsaXN0cz17Y3o6bGFuZ0N6LGVuOmxhbmdFbixlczpsYW5nRXMsZnI6bGFuZ0ZyLGl0OmxhbmdJdCxqYTpsYW5nSmEsa286bGFuZ0tvLHpoOmxhbmdaaENuLHpoX2NuOmxhbmdaaENuLHpoX3R3OmxhbmdaaFR3fTtcInVzZSBzdHJpY3RcIjtjb25zdCB2ZXJzaW9uJGc9XCJoZG5vZGUvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkbD1uZXcgTG9nZ2VyKHZlcnNpb24kZyk7Y29uc3QgTj1CaWdOdW1iZXIuZnJvbShcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmViYWFlZGNlNmFmNDhhMDNiYmZkMjVlOGNkMDM2NDE0MVwiKTtjb25zdCBNYXN0ZXJTZWNyZXQ9dG9VdGY4Qnl0ZXMoXCJCaXRjb2luIHNlZWRcIik7Y29uc3QgSGFyZGVuZWRCaXQ9MjE0NzQ4MzY0ODtmdW5jdGlvbiBnZXRVcHBlck1hc2soYml0cyl7cmV0dXJuKDE8PGJpdHMpLTE8PDgtYml0c31mdW5jdGlvbiBnZXRMb3dlck1hc2soYml0cyl7cmV0dXJuKDE8PGJpdHMpLTF9ZnVuY3Rpb24gYnl0ZXMzMih2YWx1ZSl7cmV0dXJuIGhleFplcm9QYWQoaGV4bGlmeSh2YWx1ZSksMzIpfWZ1bmN0aW9uIGJhc2U1OGNoZWNrKGRhdGEpe3JldHVybiBCYXNlNTguZW5jb2RlKGNvbmNhdChbZGF0YSxoZXhEYXRhU2xpY2Uoc2hhMjU2JDEoc2hhMjU2JDEoZGF0YSkpLDAsNCldKSl9ZnVuY3Rpb24gZ2V0V29yZGxpc3Qod29yZGxpc3Qpe2lmKHdvcmRsaXN0PT1udWxsKXtyZXR1cm4gd29yZGxpc3RzW1wiZW5cIl19aWYodHlwZW9mIHdvcmRsaXN0PT09XCJzdHJpbmdcIil7Y29uc3Qgd29yZHM9d29yZGxpc3RzW3dvcmRsaXN0XTtpZih3b3Jkcz09bnVsbCl7bG9nZ2VyJGwudGhyb3dBcmd1bWVudEVycm9yKFwidW5rbm93biBsb2NhbGVcIixcIndvcmRsaXN0XCIsd29yZGxpc3QpfXJldHVybiB3b3Jkc31yZXR1cm4gd29yZGxpc3R9Y29uc3QgX2NvbnN0cnVjdG9yR3VhcmQkMz17fTtjb25zdCBkZWZhdWx0UGF0aD1cIm0vNDQnLzYwJy8wJy8wLzBcIjtjbGFzcyBIRE5vZGV7Y29uc3RydWN0b3IoY29uc3RydWN0b3JHdWFyZCxwcml2YXRlS2V5LHB1YmxpY0tleSxwYXJlbnRGaW5nZXJwcmludCxjaGFpbkNvZGUsaW5kZXgsZGVwdGgsbW5lbW9uaWNPclBhdGgpe2xvZ2dlciRsLmNoZWNrTmV3KG5ldy50YXJnZXQsSEROb2RlKTtpZihjb25zdHJ1Y3Rvckd1YXJkIT09X2NvbnN0cnVjdG9yR3VhcmQkMyl7dGhyb3cgbmV3IEVycm9yKFwiSEROb2RlIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgZGlyZWN0bHlcIil9aWYocHJpdmF0ZUtleSl7Y29uc3Qgc2lnbmluZ0tleT1uZXcgU2lnbmluZ0tleShwcml2YXRlS2V5KTtkZWZpbmVSZWFkT25seSh0aGlzLFwicHJpdmF0ZUtleVwiLHNpZ25pbmdLZXkucHJpdmF0ZUtleSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInB1YmxpY0tleVwiLHNpZ25pbmdLZXkuY29tcHJlc3NlZFB1YmxpY0tleSl9ZWxzZXtkZWZpbmVSZWFkT25seSh0aGlzLFwicHJpdmF0ZUtleVwiLG51bGwpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwdWJsaWNLZXlcIixoZXhsaWZ5KHB1YmxpY0tleSkpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJwYXJlbnRGaW5nZXJwcmludFwiLHBhcmVudEZpbmdlcnByaW50KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiZmluZ2VycHJpbnRcIixoZXhEYXRhU2xpY2UocmlwZW1kMTYwJDEoc2hhMjU2JDEodGhpcy5wdWJsaWNLZXkpKSwwLDQpKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiYWRkcmVzc1wiLGNvbXB1dGVBZGRyZXNzKHRoaXMucHVibGljS2V5KSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImNoYWluQ29kZVwiLGNoYWluQ29kZSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImluZGV4XCIsaW5kZXgpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJkZXB0aFwiLGRlcHRoKTtpZihtbmVtb25pY09yUGF0aD09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIm1uZW1vbmljXCIsbnVsbCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInBhdGhcIixudWxsKX1lbHNlIGlmKHR5cGVvZiBtbmVtb25pY09yUGF0aD09PVwic3RyaW5nXCIpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJtbmVtb25pY1wiLG51bGwpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwYXRoXCIsbW5lbW9uaWNPclBhdGgpfWVsc2V7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIm1uZW1vbmljXCIsbW5lbW9uaWNPclBhdGgpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwYXRoXCIsbW5lbW9uaWNPclBhdGgucGF0aCl9fWdldCBleHRlbmRlZEtleSgpe2lmKHRoaXMuZGVwdGg+PTI1Nil7dGhyb3cgbmV3IEVycm9yKFwiRGVwdGggdG9vIGxhcmdlIVwiKX1yZXR1cm4gYmFzZTU4Y2hlY2soY29uY2F0KFt0aGlzLnByaXZhdGVLZXkhPW51bGw/XCIweDA0ODhBREU0XCI6XCIweDA0ODhCMjFFXCIsaGV4bGlmeSh0aGlzLmRlcHRoKSx0aGlzLnBhcmVudEZpbmdlcnByaW50LGhleFplcm9QYWQoaGV4bGlmeSh0aGlzLmluZGV4KSw0KSx0aGlzLmNoYWluQ29kZSx0aGlzLnByaXZhdGVLZXkhPW51bGw/Y29uY2F0KFtcIjB4MDBcIix0aGlzLnByaXZhdGVLZXldKTp0aGlzLnB1YmxpY0tleV0pKX1uZXV0ZXIoKXtyZXR1cm4gbmV3IEhETm9kZShfY29uc3RydWN0b3JHdWFyZCQzLG51bGwsdGhpcy5wdWJsaWNLZXksdGhpcy5wYXJlbnRGaW5nZXJwcmludCx0aGlzLmNoYWluQ29kZSx0aGlzLmluZGV4LHRoaXMuZGVwdGgsdGhpcy5wYXRoKX1fZGVyaXZlKGluZGV4KXtpZihpbmRleD40Mjk0OTY3Mjk1KXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGluZGV4IC0gXCIrU3RyaW5nKGluZGV4KSl9bGV0IHBhdGg9dGhpcy5wYXRoO2lmKHBhdGgpe3BhdGgrPVwiL1wiKyhpbmRleCZ+SGFyZGVuZWRCaXQpfWNvbnN0IGRhdGE9bmV3IFVpbnQ4QXJyYXkoMzcpO2lmKGluZGV4JkhhcmRlbmVkQml0KXtpZighdGhpcy5wcml2YXRlS2V5KXt0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZGVyaXZlIGNoaWxkIG9mIG5ldXRlcmVkIG5vZGVcIil9ZGF0YS5zZXQoYXJyYXlpZnkodGhpcy5wcml2YXRlS2V5KSwxKTtpZihwYXRoKXtwYXRoKz1cIidcIn19ZWxzZXtkYXRhLnNldChhcnJheWlmeSh0aGlzLnB1YmxpY0tleSkpfWZvcihsZXQgaT0yNDtpPj0wO2ktPTgpe2RhdGFbMzMrKGk+PjMpXT1pbmRleD4+MjQtaSYyNTV9Y29uc3QgST1hcnJheWlmeShjb21wdXRlSG1hYyhTdXBwb3J0ZWRBbGdvcml0aG0uc2hhNTEyLHRoaXMuY2hhaW5Db2RlLGRhdGEpKTtjb25zdCBJTD1JLnNsaWNlKDAsMzIpO2NvbnN0IElSPUkuc2xpY2UoMzIpO2xldCBraT1udWxsO2xldCBLaT1udWxsO2lmKHRoaXMucHJpdmF0ZUtleSl7a2k9Ynl0ZXMzMihCaWdOdW1iZXIuZnJvbShJTCkuYWRkKHRoaXMucHJpdmF0ZUtleSkubW9kKE4pKX1lbHNle2NvbnN0IGVrPW5ldyBTaWduaW5nS2V5KGhleGxpZnkoSUwpKTtLaT1lay5fYWRkUG9pbnQodGhpcy5wdWJsaWNLZXkpfWxldCBtbmVtb25pY09yUGF0aD1wYXRoO2NvbnN0IHNyY01uZW1vbmljPXRoaXMubW5lbW9uaWM7aWYoc3JjTW5lbW9uaWMpe21uZW1vbmljT3JQYXRoPU9iamVjdC5mcmVlemUoe3BocmFzZTpzcmNNbmVtb25pYy5waHJhc2UscGF0aDpwYXRoLGxvY2FsZTpzcmNNbmVtb25pYy5sb2NhbGV8fFwiZW5cIn0pfXJldHVybiBuZXcgSEROb2RlKF9jb25zdHJ1Y3Rvckd1YXJkJDMsa2ksS2ksdGhpcy5maW5nZXJwcmludCxieXRlczMyKElSKSxpbmRleCx0aGlzLmRlcHRoKzEsbW5lbW9uaWNPclBhdGgpfWRlcml2ZVBhdGgocGF0aCl7Y29uc3QgY29tcG9uZW50cz1wYXRoLnNwbGl0KFwiL1wiKTtpZihjb21wb25lbnRzLmxlbmd0aD09PTB8fGNvbXBvbmVudHNbMF09PT1cIm1cIiYmdGhpcy5kZXB0aCE9PTApe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgcGF0aCAtIFwiK3BhdGgpfWlmKGNvbXBvbmVudHNbMF09PT1cIm1cIil7Y29tcG9uZW50cy5zaGlmdCgpfWxldCByZXN1bHQ9dGhpcztmb3IobGV0IGk9MDtpPGNvbXBvbmVudHMubGVuZ3RoO2krKyl7Y29uc3QgY29tcG9uZW50PWNvbXBvbmVudHNbaV07aWYoY29tcG9uZW50Lm1hdGNoKC9eWzAtOV0rJyQvKSl7Y29uc3QgaW5kZXg9cGFyc2VJbnQoY29tcG9uZW50LnN1YnN0cmluZygwLGNvbXBvbmVudC5sZW5ndGgtMSkpO2lmKGluZGV4Pj1IYXJkZW5lZEJpdCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXRoIGluZGV4IC0gXCIrY29tcG9uZW50KX1yZXN1bHQ9cmVzdWx0Ll9kZXJpdmUoSGFyZGVuZWRCaXQraW5kZXgpfWVsc2UgaWYoY29tcG9uZW50Lm1hdGNoKC9eWzAtOV0rJC8pKXtjb25zdCBpbmRleD1wYXJzZUludChjb21wb25lbnQpO2lmKGluZGV4Pj1IYXJkZW5lZEJpdCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXRoIGluZGV4IC0gXCIrY29tcG9uZW50KX1yZXN1bHQ9cmVzdWx0Ll9kZXJpdmUoaW5kZXgpfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXRoIGNvbXBvbmVudCAtIFwiK2NvbXBvbmVudCl9fXJldHVybiByZXN1bHR9c3RhdGljIF9mcm9tU2VlZChzZWVkLG1uZW1vbmljKXtjb25zdCBzZWVkQXJyYXk9YXJyYXlpZnkoc2VlZCk7aWYoc2VlZEFycmF5Lmxlbmd0aDwxNnx8c2VlZEFycmF5Lmxlbmd0aD42NCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzZWVkXCIpfWNvbnN0IEk9YXJyYXlpZnkoY29tcHV0ZUhtYWMoU3VwcG9ydGVkQWxnb3JpdGhtLnNoYTUxMixNYXN0ZXJTZWNyZXQsc2VlZEFycmF5KSk7cmV0dXJuIG5ldyBIRE5vZGUoX2NvbnN0cnVjdG9yR3VhcmQkMyxieXRlczMyKEkuc2xpY2UoMCwzMikpLG51bGwsXCIweDAwMDAwMDAwXCIsYnl0ZXMzMihJLnNsaWNlKDMyKSksMCwwLG1uZW1vbmljKX1zdGF0aWMgZnJvbU1uZW1vbmljKG1uZW1vbmljLHBhc3N3b3JkLHdvcmRsaXN0KXt3b3JkbGlzdD1nZXRXb3JkbGlzdCh3b3JkbGlzdCk7bW5lbW9uaWM9ZW50cm9weVRvTW5lbW9uaWMobW5lbW9uaWNUb0VudHJvcHkobW5lbW9uaWMsd29yZGxpc3QpLHdvcmRsaXN0KTtyZXR1cm4gSEROb2RlLl9mcm9tU2VlZChtbmVtb25pY1RvU2VlZChtbmVtb25pYyxwYXNzd29yZCkse3BocmFzZTptbmVtb25pYyxwYXRoOlwibVwiLGxvY2FsZTp3b3JkbGlzdC5sb2NhbGV9KX1zdGF0aWMgZnJvbVNlZWQoc2VlZCl7cmV0dXJuIEhETm9kZS5fZnJvbVNlZWQoc2VlZCxudWxsKX1zdGF0aWMgZnJvbUV4dGVuZGVkS2V5KGV4dGVuZGVkS2V5KXtjb25zdCBieXRlcz1CYXNlNTguZGVjb2RlKGV4dGVuZGVkS2V5KTtpZihieXRlcy5sZW5ndGghPT04Mnx8YmFzZTU4Y2hlY2soYnl0ZXMuc2xpY2UoMCw3OCkpIT09ZXh0ZW5kZWRLZXkpe2xvZ2dlciRsLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZXh0ZW5kZWQga2V5XCIsXCJleHRlbmRlZEtleVwiLFwiW1JFREFDVEVEXVwiKX1jb25zdCBkZXB0aD1ieXRlc1s0XTtjb25zdCBwYXJlbnRGaW5nZXJwcmludD1oZXhsaWZ5KGJ5dGVzLnNsaWNlKDUsOSkpO2NvbnN0IGluZGV4PXBhcnNlSW50KGhleGxpZnkoYnl0ZXMuc2xpY2UoOSwxMykpLnN1YnN0cmluZygyKSwxNik7Y29uc3QgY2hhaW5Db2RlPWhleGxpZnkoYnl0ZXMuc2xpY2UoMTMsNDUpKTtjb25zdCBrZXk9Ynl0ZXMuc2xpY2UoNDUsNzgpO3N3aXRjaChoZXhsaWZ5KGJ5dGVzLnNsaWNlKDAsNCkpKXtjYXNlXCIweDA0ODhiMjFlXCI6Y2FzZVwiMHgwNDM1ODdjZlwiOnJldHVybiBuZXcgSEROb2RlKF9jb25zdHJ1Y3Rvckd1YXJkJDMsbnVsbCxoZXhsaWZ5KGtleSkscGFyZW50RmluZ2VycHJpbnQsY2hhaW5Db2RlLGluZGV4LGRlcHRoLG51bGwpO2Nhc2VcIjB4MDQ4OGFkZTRcIjpjYXNlXCIweDA0MzU4Mzk0IFwiOmlmKGtleVswXSE9PTApe2JyZWFrfXJldHVybiBuZXcgSEROb2RlKF9jb25zdHJ1Y3Rvckd1YXJkJDMsaGV4bGlmeShrZXkuc2xpY2UoMSkpLG51bGwscGFyZW50RmluZ2VycHJpbnQsY2hhaW5Db2RlLGluZGV4LGRlcHRoLG51bGwpfXJldHVybiBsb2dnZXIkbC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGV4dGVuZGVkIGtleVwiLFwiZXh0ZW5kZWRLZXlcIixcIltSRURBQ1RFRF1cIil9fWZ1bmN0aW9uIG1uZW1vbmljVG9TZWVkKG1uZW1vbmljLHBhc3N3b3JkKXtpZighcGFzc3dvcmQpe3Bhc3N3b3JkPVwiXCJ9Y29uc3Qgc2FsdD10b1V0ZjhCeXRlcyhcIm1uZW1vbmljXCIrcGFzc3dvcmQsVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLk5GS0QpO3JldHVybiBwYmtkZjIodG9VdGY4Qnl0ZXMobW5lbW9uaWMsVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLk5GS0QpLHNhbHQsMjA0OCw2NCxcInNoYTUxMlwiKX1mdW5jdGlvbiBtbmVtb25pY1RvRW50cm9weShtbmVtb25pYyx3b3JkbGlzdCl7d29yZGxpc3Q9Z2V0V29yZGxpc3Qod29yZGxpc3QpO2xvZ2dlciRsLmNoZWNrTm9ybWFsaXplKCk7Y29uc3Qgd29yZHM9d29yZGxpc3Quc3BsaXQobW5lbW9uaWMpO2lmKHdvcmRzLmxlbmd0aCUzIT09MCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBtbmVtb25pY1wiKX1jb25zdCBlbnRyb3B5PWFycmF5aWZ5KG5ldyBVaW50OEFycmF5KE1hdGguY2VpbCgxMSp3b3Jkcy5sZW5ndGgvOCkpKTtsZXQgb2Zmc2V0PTA7Zm9yKGxldCBpPTA7aTx3b3Jkcy5sZW5ndGg7aSsrKXtsZXQgaW5kZXg9d29yZGxpc3QuZ2V0V29yZEluZGV4KHdvcmRzW2ldLm5vcm1hbGl6ZShcIk5GS0RcIikpO2lmKGluZGV4PT09LTEpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgbW5lbW9uaWNcIil9Zm9yKGxldCBiaXQ9MDtiaXQ8MTE7Yml0Kyspe2lmKGluZGV4JjE8PDEwLWJpdCl7ZW50cm9weVtvZmZzZXQ+PjNdfD0xPDw3LW9mZnNldCU4fW9mZnNldCsrfX1jb25zdCBlbnRyb3B5Qml0cz0zMip3b3Jkcy5sZW5ndGgvMztjb25zdCBjaGVja3N1bUJpdHM9d29yZHMubGVuZ3RoLzM7Y29uc3QgY2hlY2tzdW1NYXNrPWdldFVwcGVyTWFzayhjaGVja3N1bUJpdHMpO2NvbnN0IGNoZWNrc3VtPWFycmF5aWZ5KHNoYTI1NiQxKGVudHJvcHkuc2xpY2UoMCxlbnRyb3B5Qml0cy84KSkpWzBdJmNoZWNrc3VtTWFzaztpZihjaGVja3N1bSE9PShlbnRyb3B5W2VudHJvcHkubGVuZ3RoLTFdJmNoZWNrc3VtTWFzaykpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgY2hlY2tzdW1cIil9cmV0dXJuIGhleGxpZnkoZW50cm9weS5zbGljZSgwLGVudHJvcHlCaXRzLzgpKX1mdW5jdGlvbiBlbnRyb3B5VG9NbmVtb25pYyhlbnRyb3B5LHdvcmRsaXN0KXt3b3JkbGlzdD1nZXRXb3JkbGlzdCh3b3JkbGlzdCk7ZW50cm9weT1hcnJheWlmeShlbnRyb3B5KTtpZihlbnRyb3B5Lmxlbmd0aCU0IT09MHx8ZW50cm9weS5sZW5ndGg8MTZ8fGVudHJvcHkubGVuZ3RoPjMyKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGVudHJvcHlcIil9Y29uc3QgaW5kaWNlcz1bMF07bGV0IHJlbWFpbmluZ0JpdHM9MTE7Zm9yKGxldCBpPTA7aTxlbnRyb3B5Lmxlbmd0aDtpKyspe2lmKHJlbWFpbmluZ0JpdHM+OCl7aW5kaWNlc1tpbmRpY2VzLmxlbmd0aC0xXTw8PTg7aW5kaWNlc1tpbmRpY2VzLmxlbmd0aC0xXXw9ZW50cm9weVtpXTtyZW1haW5pbmdCaXRzLT04fWVsc2V7aW5kaWNlc1tpbmRpY2VzLmxlbmd0aC0xXTw8PXJlbWFpbmluZ0JpdHM7aW5kaWNlc1tpbmRpY2VzLmxlbmd0aC0xXXw9ZW50cm9weVtpXT4+OC1yZW1haW5pbmdCaXRzO2luZGljZXMucHVzaChlbnRyb3B5W2ldJmdldExvd2VyTWFzayg4LXJlbWFpbmluZ0JpdHMpKTtyZW1haW5pbmdCaXRzKz0zfX1jb25zdCBjaGVja3N1bUJpdHM9ZW50cm9weS5sZW5ndGgvNDtjb25zdCBjaGVja3N1bT1hcnJheWlmeShzaGEyNTYkMShlbnRyb3B5KSlbMF0mZ2V0VXBwZXJNYXNrKGNoZWNrc3VtQml0cyk7aW5kaWNlc1tpbmRpY2VzLmxlbmd0aC0xXTw8PWNoZWNrc3VtQml0cztpbmRpY2VzW2luZGljZXMubGVuZ3RoLTFdfD1jaGVja3N1bT4+OC1jaGVja3N1bUJpdHM7cmV0dXJuIHdvcmRsaXN0LmpvaW4oaW5kaWNlcy5tYXAoaW5kZXg9PndvcmRsaXN0LmdldFdvcmQoaW5kZXgpKSl9ZnVuY3Rpb24gaXNWYWxpZE1uZW1vbmljKG1uZW1vbmljLHdvcmRsaXN0KXt0cnl7bW5lbW9uaWNUb0VudHJvcHkobW5lbW9uaWMsd29yZGxpc3QpO3JldHVybiB0cnVlfWNhdGNoKGVycm9yKXt9cmV0dXJuIGZhbHNlfWNvbnN0IHZlcnNpb24kaD1cInJhbmRvbS81LjEuMFwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRtPW5ldyBMb2dnZXIodmVyc2lvbiRoKTtsZXQgYW55R2xvYmFsPW51bGw7dHJ5e2FueUdsb2JhbD13aW5kb3c7aWYoYW55R2xvYmFsPT1udWxsKXt0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgbmV4dFwiKX19Y2F0Y2goZXJyb3Ipe3RyeXthbnlHbG9iYWw9Z2xvYmFsO2lmKGFueUdsb2JhbD09bnVsbCl7dGhyb3cgbmV3IEVycm9yKFwidHJ5IG5leHRcIil9fWNhdGNoKGVycm9yKXthbnlHbG9iYWw9e319fWxldCBjcnlwdG89YW55R2xvYmFsLmNyeXB0b3x8YW55R2xvYmFsLm1zQ3J5cHRvO2lmKCFjcnlwdG98fCFjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKXtsb2dnZXIkbS53YXJuKFwiV0FSTklORzogTWlzc2luZyBzdHJvbmcgcmFuZG9tIG51bWJlciBzb3VyY2VcIik7Y3J5cHRvPXtnZXRSYW5kb21WYWx1ZXM6ZnVuY3Rpb24oYnVmZmVyKXtyZXR1cm4gbG9nZ2VyJG0udGhyb3dFcnJvcihcIm5vIHNlY3VyZSByYW5kb20gc291cmNlIGF2YWlhbGJsZVwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXCJ9KX19fWZ1bmN0aW9uIHJhbmRvbUJ5dGVzKGxlbmd0aCl7aWYobGVuZ3RoPD0wfHxsZW5ndGg+MTAyNHx8bGVuZ3RoJTEpe2xvZ2dlciRtLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbGVuZ3RoXCIsXCJsZW5ndGhcIixsZW5ndGgpfWNvbnN0IHJlc3VsdD1uZXcgVWludDhBcnJheShsZW5ndGgpO2NyeXB0by5nZXRSYW5kb21WYWx1ZXMocmVzdWx0KTtyZXR1cm4gYXJyYXlpZnkocmVzdWx0KX1cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBzaHVmZmxlZChhcnJheSl7YXJyYXk9YXJyYXkuc2xpY2UoKTtmb3IobGV0IGk9YXJyYXkubGVuZ3RoLTE7aT4wO2ktLSl7Y29uc3Qgaj1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGkrMSkpO2NvbnN0IHRtcD1hcnJheVtpXTthcnJheVtpXT1hcnJheVtqXTthcnJheVtqXT10bXB9cmV0dXJuIGFycmF5fVwidXNlIHN0cmljdFwiO3ZhciBhZXNKcz1jcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7XCJ1c2Ugc3RyaWN0XCI7KGZ1bmN0aW9uKHJvb3Qpe2Z1bmN0aW9uIGNoZWNrSW50KHZhbHVlKXtyZXR1cm4gcGFyc2VJbnQodmFsdWUpPT09dmFsdWV9ZnVuY3Rpb24gY2hlY2tJbnRzKGFycmF5aXNoKXtpZighY2hlY2tJbnQoYXJyYXlpc2gubGVuZ3RoKSl7cmV0dXJuIGZhbHNlfWZvcih2YXIgaT0wO2k8YXJyYXlpc2gubGVuZ3RoO2krKyl7aWYoIWNoZWNrSW50KGFycmF5aXNoW2ldKXx8YXJyYXlpc2hbaV08MHx8YXJyYXlpc2hbaV0+MjU1KXtyZXR1cm4gZmFsc2V9fXJldHVybiB0cnVlfWZ1bmN0aW9uIGNvZXJjZUFycmF5KGFyZyxjb3B5KXtpZihhcmcuYnVmZmVyJiZBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKSYmYXJnLm5hbWU9PT1cIlVpbnQ4QXJyYXlcIil7aWYoY29weSl7aWYoYXJnLnNsaWNlKXthcmc9YXJnLnNsaWNlKCl9ZWxzZXthcmc9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJnKX19cmV0dXJuIGFyZ31pZihBcnJheS5pc0FycmF5KGFyZykpe2lmKCFjaGVja0ludHMoYXJnKSl7dGhyb3cgbmV3IEVycm9yKFwiQXJyYXkgY29udGFpbnMgaW52YWxpZCB2YWx1ZTogXCIrYXJnKX1yZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXJnKX1pZihjaGVja0ludChhcmcubGVuZ3RoKSYmY2hlY2tJbnRzKGFyZykpe3JldHVybiBuZXcgVWludDhBcnJheShhcmcpfXRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIGFycmF5LWxpa2Ugb2JqZWN0XCIpfWZ1bmN0aW9uIGNyZWF0ZUFycmF5KGxlbmd0aCl7cmV0dXJuIG5ldyBVaW50OEFycmF5KGxlbmd0aCl9ZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZUFycmF5LHRhcmdldEFycmF5LHRhcmdldFN0YXJ0LHNvdXJjZVN0YXJ0LHNvdXJjZUVuZCl7aWYoc291cmNlU3RhcnQhPW51bGx8fHNvdXJjZUVuZCE9bnVsbCl7aWYoc291cmNlQXJyYXkuc2xpY2Upe3NvdXJjZUFycmF5PXNvdXJjZUFycmF5LnNsaWNlKHNvdXJjZVN0YXJ0LHNvdXJjZUVuZCl9ZWxzZXtzb3VyY2VBcnJheT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzb3VyY2VBcnJheSxzb3VyY2VTdGFydCxzb3VyY2VFbmQpfX10YXJnZXRBcnJheS5zZXQoc291cmNlQXJyYXksdGFyZ2V0U3RhcnQpfXZhciBjb252ZXJ0VXRmOD1mdW5jdGlvbigpe2Z1bmN0aW9uIHRvQnl0ZXModGV4dCl7dmFyIHJlc3VsdD1bXSxpPTA7dGV4dD1lbmNvZGVVUkkodGV4dCk7d2hpbGUoaTx0ZXh0Lmxlbmd0aCl7dmFyIGM9dGV4dC5jaGFyQ29kZUF0KGkrKyk7aWYoYz09PTM3KXtyZXN1bHQucHVzaChwYXJzZUludCh0ZXh0LnN1YnN0cihpLDIpLDE2KSk7aSs9Mn1lbHNle3Jlc3VsdC5wdXNoKGMpfX1yZXR1cm4gY29lcmNlQXJyYXkocmVzdWx0KX1mdW5jdGlvbiBmcm9tQnl0ZXMoYnl0ZXMpe3ZhciByZXN1bHQ9W10saT0wO3doaWxlKGk8Ynl0ZXMubGVuZ3RoKXt2YXIgYz1ieXRlc1tpXTtpZihjPDEyOCl7cmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjKSk7aSsrfWVsc2UgaWYoYz4xOTEmJmM8MjI0KXtyZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKChjJjMxKTw8NnxieXRlc1tpKzFdJjYzKSk7aSs9Mn1lbHNle3Jlc3VsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKGMmMTUpPDwxMnwoYnl0ZXNbaSsxXSY2Myk8PDZ8Ynl0ZXNbaSsyXSY2MykpO2krPTN9fXJldHVybiByZXN1bHQuam9pbihcIlwiKX1yZXR1cm57dG9CeXRlczp0b0J5dGVzLGZyb21CeXRlczpmcm9tQnl0ZXN9fSgpO3ZhciBjb252ZXJ0SGV4PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdG9CeXRlcyh0ZXh0KXt2YXIgcmVzdWx0PVtdO2Zvcih2YXIgaT0wO2k8dGV4dC5sZW5ndGg7aSs9Mil7cmVzdWx0LnB1c2gocGFyc2VJbnQodGV4dC5zdWJzdHIoaSwyKSwxNikpfXJldHVybiByZXN1bHR9dmFyIEhleD1cIjAxMjM0NTY3ODlhYmNkZWZcIjtmdW5jdGlvbiBmcm9tQnl0ZXMoYnl0ZXMpe3ZhciByZXN1bHQ9W107Zm9yKHZhciBpPTA7aTxieXRlcy5sZW5ndGg7aSsrKXt2YXIgdj1ieXRlc1tpXTtyZXN1bHQucHVzaChIZXhbKHYmMjQwKT4+NF0rSGV4W3YmMTVdKX1yZXR1cm4gcmVzdWx0LmpvaW4oXCJcIil9cmV0dXJue3RvQnl0ZXM6dG9CeXRlcyxmcm9tQnl0ZXM6ZnJvbUJ5dGVzfX0oKTt2YXIgbnVtYmVyT2ZSb3VuZHM9ezE2OjEwLDI0OjEyLDMyOjE0fTt2YXIgcmNvbj1bMSwyLDQsOCwxNiwzMiw2NCwxMjgsMjcsNTQsMTA4LDIxNiwxNzEsNzcsMTU0LDQ3LDk0LDE4OCw5OSwxOTgsMTUxLDUzLDEwNiwyMTIsMTc5LDEyNSwyNTAsMjM5LDE5NywxNDVdO3ZhciBTPVs5OSwxMjQsMTE5LDEyMywyNDIsMTA3LDExMSwxOTcsNDgsMSwxMDMsNDMsMjU0LDIxNSwxNzEsMTE4LDIwMiwxMzAsMjAxLDEyNSwyNTAsODksNzEsMjQwLDE3MywyMTIsMTYyLDE3NSwxNTYsMTY0LDExNCwxOTIsMTgzLDI1MywxNDcsMzgsNTQsNjMsMjQ3LDIwNCw1MiwxNjUsMjI5LDI0MSwxMTMsMjE2LDQ5LDIxLDQsMTk5LDM1LDE5NSwyNCwxNTAsNSwxNTQsNywxOCwxMjgsMjI2LDIzNSwzOSwxNzgsMTE3LDksMTMxLDQ0LDI2LDI3LDExMCw5MCwxNjAsODIsNTksMjE0LDE3OSw0MSwyMjcsNDcsMTMyLDgzLDIwOSwwLDIzNywzMiwyNTIsMTc3LDkxLDEwNiwyMDMsMTkwLDU3LDc0LDc2LDg4LDIwNywyMDgsMjM5LDE3MCwyNTEsNjcsNzcsNTEsMTMzLDY5LDI0OSwyLDEyNyw4MCw2MCwxNTksMTY4LDgxLDE2Myw2NCwxNDMsMTQ2LDE1Nyw1NiwyNDUsMTg4LDE4MiwyMTgsMzMsMTYsMjU1LDI0MywyMTAsMjA1LDEyLDE5LDIzNiw5NSwxNTEsNjgsMjMsMTk2LDE2NywxMjYsNjEsMTAwLDkzLDI1LDExNSw5NiwxMjksNzksMjIwLDM0LDQyLDE0NCwxMzYsNzAsMjM4LDE4NCwyMCwyMjIsOTQsMTEsMjE5LDIyNCw1MCw1OCwxMCw3Myw2LDM2LDkyLDE5NCwyMTEsMTcyLDk4LDE0NSwxNDksMjI4LDEyMSwyMzEsMjAwLDU1LDEwOSwxNDEsMjEzLDc4LDE2OSwxMDgsODYsMjQ0LDIzNCwxMDEsMTIyLDE3NCw4LDE4NiwxMjAsMzcsNDYsMjgsMTY2LDE4MCwxOTgsMjMyLDIyMSwxMTYsMzEsNzUsMTg5LDEzOSwxMzgsMTEyLDYyLDE4MSwxMDIsNzIsMywyNDYsMTQsOTcsNTMsODcsMTg1LDEzNCwxOTMsMjksMTU4LDIyNSwyNDgsMTUyLDE3LDEwNSwyMTcsMTQyLDE0OCwxNTUsMzAsMTM1LDIzMywyMDYsODUsNDAsMjIzLDE0MCwxNjEsMTM3LDEzLDE5MSwyMzAsNjYsMTA0LDY1LDE1Myw0NSwxNSwxNzYsODQsMTg3LDIyXTt2YXIgU2k9WzgyLDksMTA2LDIxMyw0OCw1NCwxNjUsNTYsMTkxLDY0LDE2MywxNTgsMTI5LDI0MywyMTUsMjUxLDEyNCwyMjcsNTcsMTMwLDE1NSw0NywyNTUsMTM1LDUyLDE0Miw2Nyw2OCwxOTYsMjIyLDIzMywyMDMsODQsMTIzLDE0OCw1MCwxNjYsMTk0LDM1LDYxLDIzOCw3NiwxNDksMTEsNjYsMjUwLDE5NSw3OCw4LDQ2LDE2MSwxMDIsNDAsMjE3LDM2LDE3OCwxMTgsOTEsMTYyLDczLDEwOSwxMzksMjA5LDM3LDExNCwyNDgsMjQ2LDEwMCwxMzQsMTA0LDE1MiwyMiwyMTIsMTY0LDkyLDIwNCw5MywxMDEsMTgyLDE0NiwxMDgsMTEyLDcyLDgwLDI1MywyMzcsMTg1LDIxOCw5NCwyMSw3MCw4NywxNjcsMTQxLDE1NywxMzIsMTQ0LDIxNiwxNzEsMCwxNDAsMTg4LDIxMSwxMCwyNDcsMjI4LDg4LDUsMTg0LDE3OSw2OSw2LDIwOCw0NCwzMCwxNDMsMjAyLDYzLDE1LDIsMTkzLDE3NSwxODksMywxLDE5LDEzOCwxMDcsNTgsMTQ1LDE3LDY1LDc5LDEwMywyMjAsMjM0LDE1MSwyNDIsMjA3LDIwNiwyNDAsMTgwLDIzMCwxMTUsMTUwLDE3MiwxMTYsMzQsMjMxLDE3Myw1MywxMzMsMjI2LDI0OSw1NSwyMzIsMjgsMTE3LDIyMywxMTAsNzEsMjQxLDI2LDExMywyOSw0MSwxOTcsMTM3LDExMSwxODMsOTgsMTQsMTcwLDI0LDE5MCwyNywyNTIsODYsNjIsNzUsMTk4LDIxMCwxMjEsMzIsMTU0LDIxOSwxOTIsMjU0LDEyMCwyMDUsOTAsMjQ0LDMxLDIyMSwxNjgsNTEsMTM2LDcsMTk5LDQ5LDE3NywxOCwxNiw4OSwzOSwxMjgsMjM2LDk1LDk2LDgxLDEyNywxNjksMjUsMTgxLDc0LDEzLDQ1LDIyOSwxMjIsMTU5LDE0NywyMDEsMTU2LDIzOSwxNjAsMjI0LDU5LDc3LDE3NCw0MiwyNDUsMTc2LDIwMCwyMzUsMTg3LDYwLDEzMSw4MywxNTMsOTcsMjMsNDMsNCwxMjYsMTg2LDExOSwyMTQsMzgsMjI1LDEwNSwyMCw5OSw4NSwzMywxMiwxMjVdO3ZhciBUMT1bMzMyODQwMjM0MSw0MTY4OTA3OTA4LDQwMDA4MDY4MDksNDEzNTI4NzY5Myw0Mjk0MTExNzU3LDM1OTczNjQxNTcsMzczMTg0NTA0MSwyNDQ1NjU3NDI4LDE2MTM3NzA4MzIsMzM2MjAyMjcsMzQ2Mjg4MzI0MSwxNDQ1NjY5NzU3LDM4OTIyNDgwODksMzA1MDgyMTQ3NCwxMzAzMDk2Mjk0LDM5NjcxODY1ODYsMjQxMjQzMTk0MSw1Mjg2NDY4MTMsMjMxMTcwMjg0OCw0MjAyNTI4MTM1LDQwMjYyMDI2NDUsMjk5MjIwMDE3MSwyMzg3MDM2MTA1LDQyMjY4NzEzMDcsMTEwMTkwMTI5MiwzMDE3MDY5NjcxLDE2MDQ0OTQwNzcsMTE2OTE0MTczOCw1OTc0NjYzMDMsMTQwMzI5OTA2MywzODMyNzA1Njg2LDI2MTMxMDA2MzUsMTk3NDk3NDQwMiwzNzkxNTE5MDA0LDEwMzMwODE3NzQsMTI3NzU2ODYxOCwxODE1NDkyMTg2LDIxMTgwNzQxNzcsNDEyNjY2ODU0NiwyMjExMjM2OTQzLDE3NDgyNTE3NDAsMTM2OTgxMDQyMCwzNTIxNTA0NTY0LDQxOTMzODI2NjQsMzc5OTA4NTQ1OSwyODgzMTE1MTIzLDE2NDczOTEwNTksNzA2MDI0NzY3LDEzNDQ4MDkwOCwyNTEyODk3ODc0LDExNzY3MDc5NDEsMjY0Njg1MjQ0Niw4MDY4ODU0MTYsOTMyNjE1ODQxLDE2ODEwMTEzNSw3OTg2NjEzMDEsMjM1MzQxNTc3LDYwNTE2NDA4Niw0NjE0MDYzNjMsMzc1NjE4ODIyMSwzNDU0NzkwNDM4LDEzMTExODg4NDEsMjE0MjQxNzYxMywzOTMzNTY2MzY3LDMwMjU4MjA0Myw0OTUxNTgxNzQsMTQ3OTI4OTk3Miw4NzQxMjU4NzAsOTA3NzQ2MDkzLDM2OTgyMjQ4MTgsMzAyNTgyMDM5OCwxNTM3MjUzNjI3LDI3NTY4NTg2MTQsMTk4MzU5MzI5MywzMDg0MzEwMTEzLDIxMDg5Mjg5NzQsMTM3ODQyOTMwNywzNzIyNjk5NTgyLDE1ODAxNTA2NDEsMzI3NDUxNzk5LDI3OTA0Nzg4MzcsMzExNzUzNTU5MiwwLDMyNTM1OTU0MzYsMTA3NTg0NzI2NCwzODI1MDA3NjQ3LDIwNDE2ODg1MjAsMzA1OTQ0MDYyMSwzNTYzNzQzOTM0LDIzNzg5NDMzMDIsMTc0MDU1Mzk0NSwxOTE2MzUyODQzLDI0ODc4OTY3OTgsMjU1NTEzNzIzNiwyOTU4NTc5OTQ0LDIyNDQ5ODg3NDYsMzE1MTAyNDIzNSwzMzIwODM1ODgyLDEzMzY1ODQ5MzMsMzk5MjcxNDAwNiwyMjUyNTU1MjA1LDI1ODg3NTc0NjMsMTcxNDYzMTUwOSwyOTM5NjMxNTYsMjMxOTc5NTY2MywzOTI1NDczNTUyLDY3MjQwNDU0LDQyNjk3Njg1NzcsMjY4OTYxODE2MCwyMDE3MjEzNTA4LDYzMTIxODEwNiwxMjY5MzQ0NDgzLDI3MjMyMzgzODcsMTU3MTAwNTQzOCwyMTUxNjk0NTI4LDkzMjk0NDc0LDEwNjY1NzA0MTMsNTYzOTc3NjYwLDE4ODI3MzI2MTYsNDA1OTQyODEwMCwxNjczMzEzNTAzLDIwMDg0NjMwNDEsMjk1MDM1NTU3MywxMTA5NDY3NDkxLDUzNzkyMzYzMiwzODU4NzU5NDUwLDQyNjA2MjMxMTgsMzIxODI2NDY4NSwyMTc3NzQ4MzAwLDQwMzQ0MjcwOCw2Mzg3ODQzMDksMzI4NzA4NDA3OSwzMTkzOTIxNTA1LDg5OTEyNzIwMiwyMjg2MTc1NDM2LDc3MzI2NTIwOSwyNDc5MTQ2MDcxLDE0MzcwNTA4NjYsNDIzNjE0ODM1NCwyMDUwODMzNzM1LDMzNjIwMjI1NzIsMzEyNjY4MTA2Myw4NDA1MDU2NDMsMzg2NjMyNTkwOSwzMjI3NTQxNjY0LDQyNzkxNzcyMCwyNjU1OTk3OTA1LDI3NDkxNjA1NzUsMTE0MzA4NzcxOCwxNDEyMDQ5NTM0LDk5OTMyOTk2MywxOTM0OTcyMTksMjM1MzQxNTg4MiwzMzU0MzI0NTIxLDE4MDcyNjgwNTEsNjcyNDA0NTQwLDI4MTY0MDEwMTcsMzE2MDMwMTI4MiwzNjk4MjI0OTMsMjkxNjg2NjkzNCwzNjg4OTQ3NzcxLDE2ODEwMTEyODYsMTk0OTk3MzA3MCwzMzYyMDIyNzAsMjQ1NDI3NjU3MSwyMDE3MjEzNTQsMTIxMDMyODE3MiwzMDkzMDYwODM2LDI2ODAzNDEwODUsMzE4NDc3NjA0NiwxMTM1Mzg5OTM1LDMyOTQ3ODIxMTgsOTY1ODQxMzIwLDgzMTg4Njc1NiwzNTU0OTkzMjA3LDQwNjgwNDcyNDMsMzU4ODc0NTAxMCwyMzQ1MTkxNDkxLDE4NDkxMTI0MDksMzY2NDYwNDU5OSwyNjA1NDAyOCwyOTgzNTgxMDI4LDI2MjIzNzc2ODIsMTIzNTg1NTg0MCwzNjMwOTg0MzcyLDI4OTEzMzk1MTQsNDA5MjkxNjc0MywzNDg4Mjc5MDc3LDMzOTU2NDI3OTksNDEwMTY2NzQ3MCwxMjAyNjMwMzc3LDI2ODk2MTgxNiwxODc0NTA4NTAxLDQwMzQ0MjcwMTYsMTI0Mzk0ODM5OSwxNTQ2NTMwNDE4LDk0MTM2NjMwOCwxNDcwNTM5NTA1LDE5NDEyMjI1OTksMjU0NjM4NjUxMywzNDIxMDM4NjI3LDI3MTU2NzE5MzIsMzg5OTk0NjE0MCwxMDQyMjI2OTc3LDI1MjE1MTcwMjEsMTYzOTgyNDg2MCwyMjcyNDkwMzAsMjYwNzM3NjY5LDM3NjU0NjUyMzIsMjA4NDQ1Mzk1NCwxOTA3NzMzOTU2LDM0MjkyNjMwMTgsMjQyMDY1NjM0NCwxMDA4NjA2NzcsNDE2MDE1NzE4NSw0NzA2ODMxNTQsMzI2MTE2MTg5MSwxNzgxODcxOTY3LDI5MjQ5NTk3MzcsMTc3Mzc3OTQwOCwzOTQ2OTIyNDEsMjU3OTYxMTk5Miw5NzQ5ODY1MzUsNjY0NzA2NzQ1LDM2NTU0NTkxMjgsMzk1ODk2MjE5NSw3MzE0MjA4NTEsNTcxNTQzODU5LDM1MzAxMjM3MDcsMjg0OTYyNjQ4MCwxMjY3ODMxMTMsODY1Mzc1Mzk5LDc2NTE3MjY2MiwxMDA4NjA2NzU0LDM2MTIwMzYwMiwzMzg3NTQ5OTg0LDIyNzg0NzczODUsMjg1NzcxOTI5NSwxMzQ0ODA5MDgwLDI3ODI5MTIzNzgsNTk1NDI2NzEsMTUwMzc2NDk4NCwxNjAwMDg1NzYsNDM3MDYyOTM1LDE3MDcwNjUzMDYsMzYyMjIzMzY0OSwyMjE4OTM0OTgyLDM0OTY1MDM0ODAsMjE4NTMxNDc1NSw2OTc5MzIyMDgsMTUxMjkxMDE5OSw1MDQzMDMzNzcsMjA3NTE3NzE2MywyODI0MDk5MDY4LDE4NDEwMTk4NjIsNzM5NjQ0OTg2XTt2YXIgVDI9WzI3ODEyNDIyMTEsMjIzMDg3NzMwOCwyNTgyNTQyMTk5LDIzODE3NDA5MjMsMjM0ODc3NjgyLDMxODQ5NDYwMjcsMjk4NDE0NDc1MSwxNDE4ODM5NDkzLDEzNDg0ODEwNzIsNTA0NjI5NzcsMjg0ODg3NjM5MSwyMTAyNzk5MTQ3LDQzNDYzNDQ5NCwxNjU2MDg0NDM5LDM4NjM4NDk4OTksMjU5OTE4ODA4NiwxMTY3MDUxNDY2LDI2MzYwODc5MzgsMTA4Mjc3MTkxMywyMjgxMzQwMjg1LDM2ODA0ODg5MCwzOTU0MzM0MDQxLDMzODE1NDQ3NzUsMjAxMDYwNTkyLDM5NjM3MjcyNzcsMTczOTgzODY3Niw0MjUwOTAzMjAyLDM5MzA0MzU1MDMsMzIwNjc4MjEwOCw0MTQ5NDUzOTg4LDI1MzE1NTM5MDYsMTUzNjkzNDA4MCwzMjYyNDk0NjQ3LDQ4NDU3MjY2OSwyOTIzMjcxMDU5LDE3ODMzNzUzOTgsMTUxNzA0MTIwNiwxMDk4NzkyNzY3LDQ5Njc0MjMxLDEzMzQwMzc3MDgsMTU1MDMzMjk4MCw0MDk4OTkxNTI1LDg4NjE3MTEwOSwxNTA1OTgxMjksMjQ4MTA5MDkyOSwxOTQwNjQyMDA4LDEzOTg5NDQwNDksMTA1OTcyMjUxNywyMDE4NTE5MDgsMTM4NTU0NzcxOSwxNjk5MDk1MzMxLDE1ODczOTc1NzEsNjc0MjQwNTM2LDI3MDQ3NzQ4MDYsMjUyMzE0ODg1LDMwMzk3OTU4NjYsMTUxOTE0MjQ3LDkwODMzMzU4NiwyNjAyMjcwODQ4LDEwMzgwODI3ODYsNjUxMDI5NDgzLDE3NjY3Mjk1MTEsMzQ0NzY5ODA5OCwyNjgyOTQyODM3LDQ1NDE2Njc5MywyNjUyNzM0MzM5LDE5NTE5MzU1MzIsNzc1MTY2NDkwLDc1ODUyMDYwMywzMDAwNzkwNjM4LDQwMDQ3OTcwMTgsNDIxNzA4NjExMiw0MTM3OTY0MTE0LDEyOTk1OTQwNDMsMTYzOTQzODAzOCwzNDY0MzQ0NDk5LDIwNjg5ODIwNTcsMTA1NDcyOTE4NywxOTAxOTk3ODcxLDI1MzQ2Mzg3MjQsNDEyMTMxODIyNywxNzU3MDA4MzM3LDAsNzUwOTA2ODYxLDE2MTQ4MTUyNjQsNTM1MDM1MTMyLDMzNjM0MTg1NDUsMzk4ODE1MTEzMSwzMjAxNTkxOTE0LDExODM2OTc4NjcsMzY0NzQ1NDkxMCwxMjY1Nzc2OTUzLDM3MzQyNjAyOTgsMzU2Njc1MDc5NiwzOTAzODcxMDY0LDEyNTAyODM0NzEsMTgwNzQ3MDgwMCw3MTc2MTUwODcsMzg0NzIwMzQ5OCwzODQ2OTUyOTEsMzMxMzkxMDU5NSwzNjE3MjEzNzczLDE0MzI3NjExMzksMjQ4NDE3NjI2MSwzNDgxOTQ1NDEzLDI4Mzc2OTMzNywxMDA5MjU5NTQsMjE4MDkzOTY0Nyw0MDM3MDM4MTYwLDExNDg3MzA0MjgsMzEyMzAyNzg3MSwzODEzMzg2NDA4LDQwODc1MDExMzcsNDI2NzU0OTYwMywzMjI5NjMwNTI4LDIzMTU2MjAyMzksMjkwNjYyNDY1OCwzMTU2MzE5NjQ1LDEyMTUzMTM5NzYsODI5NjYwMDUsMzc0Nzg1NTU0OCwzMjQ1ODQ4MjQ2LDE5NzQ0NTkwOTgsMTY2NTI3ODI0MSw4MDc0MDc2MzIsNDUxMjgwODk1LDI1MTUyNDA4MywxODQxMjg3ODkwLDEyODM1NzUyNDUsMzM3MTIwMjY4LDg5MTY4NzY5OSw4MDEzNjkzMjQsMzc4NzM0OTg1NSwyNzIxNDIxMjA3LDM0MzE0ODI0MzYsOTU5MzIxODc5LDE0NjkzMDE5NTYsNDA2NTY5OTc1MSwyMTk3NTg1NTM0LDExOTkxOTM0MDUsMjg5ODgxNDA1MiwzODg3NzUwNDkzLDcyNDcwMzUxMywyNTE0OTA4MDE5LDI2OTY5NjIxNDQsMjU1MTgwODM4NSwzNTE2ODEzMTM1LDIxNDE0NDUzNDAsMTcxNTc0MTIxOCwyMTE5NDQ1MDM0LDI4NzI4MDc1NjgsMjE5ODU3MTE0NCwzMzk4MTkwNjYyLDcwMDk2ODY4NiwzNTQ3MDUyMjE2LDEwMDkyNTk1NDAsMjA0MTA0NDcwMiwzODAzOTk1NzQyLDQ4Nzk4Mzg4MywxOTkxMTA1NDk5LDEwMDQyNjU2OTYsMTQ0OTQwNzAyNiwxMzE2MjM5OTMwLDUwNDYyOTc3MCwzNjgzNzk3MzIxLDE2ODU2MDEzNCwxODE2NjY3MTcyLDM4MzcyODc1MTYsMTU3MDc1MTE3MCwxODU3OTM0MjkxLDQwMTQxODk3NDAsMjc5Nzg4ODA5OCwyODIyMzQ1MTA1LDI3NTQ3MTI5ODEsOTM2NjMzNTcyLDIzNDc5MjM4MzMsODUyODc5MzM1LDExMzMyMzQzNzYsMTUwMDM5NTMxOSwzMDg0NTQ1Mzg5LDIzNDg5MTIwMTMsMTY4OTM3NjIxMywzNTMzNDU5MDIyLDM3NjI5MjM5NDUsMzAzNDA4MjQxMiw0MjA1NTk4Mjk0LDEzMzQyODQ2OCw2MzQzODMwODIsMjk0OTI3NzAyOSwyMzk4Mzg2ODEwLDM5MTM3ODkxMDIsNDAzNzAzODE2LDM1ODA4NjkzMDYsMjI5NzQ2MDg1NiwxODY3MTMwMTQ5LDE5MTg2NDM3NTgsNjA3NjU2OTg4LDQwNDkwNTMzNTAsMzM0NjI0ODg4NCwxMzY4OTAxMzE4LDYwMDU2NTk5MiwyMDkwOTgyODc3LDI2MzI0Nzk4NjAsNTU3NzE5MzI3LDM3MTc2MTQ0MTEsMzY5NzM5MzA4NSwyMjQ5MDM0NjM1LDIyMzIzODgyMzQsMjQzMDYyNzk1MiwxMTE1NDM4NjU0LDMyOTU3ODY0MjEsMjg2NTUyMjI3OCwzNjMzMzM0MzQ0LDg0MjgwMDY3LDMzMDI3ODMwLDMwMzgyODQ5NCwyNzQ3NDI1MTIxLDE2MDA3OTU5NTcsNDE4ODk1MjQwNywzNDk2NTg5NzUzLDI0MzQyMzgwODYsMTQ4NjQ3MTYxNyw2NTgxMTk5NjUsMzEwNjM4MTQ3MCw5NTM4MDMyMzMsMzM0MjMxODAwLDMwMDU5Nzg3NzYsODU3ODcwNjA5LDMxNTExMjg5MzcsMTg5MDE3OTU0NSwyMjk4OTczODM4LDI4MDUxNzU0NDQsMzA1NjQ0MjI2Nyw1NzQzNjUyMTQsMjQ1MDg4NDQ4Nyw1NTAxMDM1MjksMTIzMzYzNzA3MCw0Mjg5MzUzMDQ1LDIwMTg1MTkwODAsMjA1NzY5MTEwMywyMzk5Mzc0NDc2LDQxNjY2MjM2NDksMjE0ODEwODY4MSwzODc1ODMyNDUsMzY2NDEwMTMxMSw4MzYyMzI5MzQsMzMzMDU1NjQ4MiwzMTAwNjY1OTYwLDMyODAwOTM1MDUsMjk1NTUxNjMxMywyMDAyMzk4NTA5LDI4NzE4MjYwNywzNDEzODgxMDA4LDQyMzg4OTAwNjgsMzU5NzUxNTcwNyw5NzU5Njc3NjZdO3ZhciBUMz1bMTY3MTgwODYxMSwyMDg5MDg5MTQ4LDIwMDY1NzY3NTksMjA3MjkwMTI0Myw0MDYxMDAzNzYyLDE4MDc2MDMzMDcsMTg3MzkyNzc5MSwzMzEwNjUzODkzLDgxMDU3Mzg3MiwxNjk3NDMzNywxNzM5MTgxNjcxLDcyOTYzNDM0Nyw0MjYzMTEwNjU0LDM2MTM1NzA1MTksMjg4Mzk5NzA5OSwxOTg5ODY0NTY2LDMzOTM1NTY0MjYsMjE5MTMzNTI5OCwzMzc2NDQ5OTkzLDIxMDYwNjM0ODUsNDE5NTc0MTY5MCwxNTA4NjE4ODQxLDEyMDQzOTE0OTUsNDAyNzMxNzIzMiwyOTE3OTQxNjc3LDM1NjM1NjYwMzYsMjczNDUxNDA4MiwyOTUxMzY2MDYzLDI2Mjk3NzIxODgsMjc2NzY3MjIyOCwxOTIyNDkxNTA2LDMyMjcyMjkxMjAsMzA4Mjk3NDY0Nyw0MjQ2NTI4NTA5LDI0Nzc2Njk3NzksNjQ0NTAwNTE4LDkxMTg5NTYwNiwxMDYxMjU2NzY3LDQxNDQxNjYzOTEsMzQyNzc2MzE0OCw4Nzg0NzEyMjAsMjc4NDI1MjMyNSwzODQ1NDQ0MDY5LDQwNDM4OTczMjksMTkwNTUxNzE2OSwzNjMxNDU5Mjg4LDgyNzU0ODIwOSwzNTY0NjEwNzcsNjc4OTczNDgsMzM0NDA3ODI3OSw1OTM4Mzk2NTEsMzI3Nzc1Nzg5MSw0MDUyODY5MzYsMjUyNzE0NzkyNiw4NDg3MTY4NSwyNTk1NTY1NDY2LDExODAzMzkyNywzMDU1MzgwNjYsMjE1NzY0ODc2OCwzNzk1NzA1ODI2LDM5NDUxODg4NDMsNjYxMjEyNzExLDI5OTk4MTIwMTgsMTk3MzQxNDUxNywxNTI3NjkwMzMsMjIwODE3NzUzOSw3NDU4MjIyNTIsNDM5MjM1NjEwLDQ1NTk0NzgwMywxODU3MjE1NTk4LDE1MjU1OTMxNzgsMjcwMDgyNzU1MiwxMzkxODk1NjM0LDk5NDkzMjI4MywzNTk2NzI4Mjc4LDMwMTY2NTQyNTksNjk1OTQ3ODE3LDM4MTI1NDgwNjcsNzk1OTU4ODMxLDIyMjQ0OTM0NDQsMTQwODYwNzgyNywzNTEzMzAxNDU3LDAsMzk3OTEzMzQyMSw1NDMxNzg3ODQsNDIyOTk0ODQxMiwyOTgyNzA1NTg1LDE1NDIzMDUzNzEsMTc5MDg5MTExNCwzNDEwMzk4NjY3LDMyMDE5MTg5MTAsOTYxMjQ1NzUzLDEyNTYxMDA5MzgsMTI4OTAwMTAzNiwxNDkxNjQ0NTA0LDM0Nzc3Njc2MzEsMzQ5NjcyMTM2MCw0MDEyNTU3ODA3LDI4NjcxNTQ4NTgsNDIxMjU4MzkzMSwxMTM3MDE4NDM1LDEzMDU5NzUzNzMsODYxMjM0NzM5LDIyNDEwNzM1NDEsMTE3MTIyOTI1Myw0MTc4NjM1MjU3LDMzOTQ4Njc0LDIxMzkyMjU3MjcsMTM1Nzk0Njk2MCwxMDExMTIwMTg4LDI2Nzk3NzY2NzEsMjgzMzQ2ODMyOCwxMzc0OTIxMjk3LDI3NTEzNTYzMjMsMTA4NjM1NzU2OCwyNDA4MTg3Mjc5LDI0NjA4Mjc1MzgsMjY0NjM1MjI4NSw5NDQyNzE0MTYsNDExMDc0MjAwNSwzMTY4NzU2NjY4LDMwNjYxMzI0MDYsMzY2NTE0NTgxOCw1NjAxNTMxMjEsMjcxNTg5MzkyLDQyNzk5NTI4OTUsNDA3Nzg0NjAwMywzNTMwNDA3ODkwLDM0NDQzNDMyNDUsMjAyNjQzNDY4LDMyMjI1MDI1OSwzOTYyNTUzMzI0LDE2MDg2Mjk4NTUsMjU0Mzk5MDE2NywxMTU0MjU0OTE2LDM4OTYyMzMxOSwzMjk0MDczNzk2LDI4MTc2NzY3MTEsMjEyMjUxMzUzNCwxMDI4MDk0NTI1LDE2ODkwNDUwOTIsMTU3NTQ2NzYxMyw0MjIyNjEyNzMsMTkzOTIwMzY5OSwxNjIxMTQ3NzQ0LDIxNzQyMjg4NjUsMTMzOTEzNzYxNSwzNjk5MzUyNTQwLDU3NzEyNzQ1OCw3MTI5MjIxNTQsMjQyNzE0MTAwOCwyMjkwMjg5NTQ0LDExODc2NzkzMDIsMzk5NTcxNTU2NiwzMTAwODYzNDE2LDMzOTQ4Njc0MCwzNzMyNTE0NzgyLDE1OTE5MTc2NjIsMTg2NDU1NTYzLDM2ODE5ODgwNTksMzc2MjAxOTI5Niw4NDQ1MjI1NDYsOTc4MjIwMDkwLDE2OTc0MzM3MCwxMjM5MTI2NjAxLDEwMTMyMTczNCw2MTEwNzYxMzIsMTU1ODQ5MzI3NiwzMjYwOTE1NjUwLDM1NDcyNTAxMzEsMjkwMTM2MTU4MCwxNjU1MDk2NDE4LDI0NDM3MjExMDUsMjUxMDU2NTc4MSwzODI4ODYzOTcyLDIwMzkyMTQ3MTMsMzg3ODg2ODQ1NSwzMzU5ODY5ODk2LDkyODYwNzc5OSwxODQwNzY1NTQ5LDIzNzQ3NjI4OTMsMzU4MDE0NjEzMywxMzIyNDI1NDIyLDI4NTAwNDg0MjUsMTgyMzc5MTIxMiwxNDU5MjY4Njk0LDQwOTQxNjE5MDgsMzkyODM0NjYwMiwxNzA2MDE5NDI5LDIwNTYxODkwNTAsMjkzNDUyMzgyMiwxMzU3OTQ2OTYsMzEzNDU0OTk0NiwyMDIyMjQwMzc2LDYyODA1MDQ2OSw3NzkyNDY2MzgsNDcyMTM1NzA4LDI4MDA4MzQ0NzAsMzAzMjk3MDE2NCwzMzI3MjM2MDM4LDM4OTQ2NjAwNzIsMzcxNTkzMjYzNywxOTU2NDQwMTgwLDUyMjI3MjI4NywxMjcyODEzMTMxLDMxODUzMzY3NjUsMjM0MDgxODMxNSwyMzIzOTc2MDc0LDE4ODg1NDI4MzIsMTA0NDU0NDU3NCwzMDQ5NTUwMjYxLDE3MjI0Njk0NzgsMTIyMjE1MjI2NCw1MDY2MDg2Nyw0MTI3MzI0MTUwLDIzNjA2Nzg1NCwxNjM4MTIyMDgxLDg5NTQ0NTU1NywxNDc1OTgwODg3LDMxMTc0NDM1MTMsMjI1NzY1NTY4NiwzMjQzODA5MjE3LDQ4OTExMDA0NSwyNjYyOTM0NDMwLDM3Nzg1OTkzOTMsNDE2MjA1NTE2MCwyNTYxODc4OTM2LDI4ODU2MzcyOSwxNzczOTE2Nzc3LDM2NDgwMzkzODUsMjM5MTM0NTAzOCwyNDkzOTg1Njg0LDI2MTI0MDc3MDcsNTA1NTYwMDk0LDIyNzQ0OTc5MjcsMzkxMTI0MDE2OSwzNDYwOTI1MzkwLDE0NDI4MTg2NDUsNjc4OTczNDgwLDM3NDkzNTcwMjMsMjM1ODE4Mjc5NiwyNzE3NDA3NjQ5LDIzMDY4Njk2NDEsMjE5NjE3ODA1LDMyMTg3NjExNTEsMzg2MjAyNjIxNCwxMTIwMzA2MjQyLDE3NTY5NDI0NDAsMTEwMzMzMTkwNSwyNTc4NDU5MDMzLDc2Mjc5NjU4OSwyNTI3ODAwNDcsMjk2NjEyNTQ4OCwxNDI1ODQ0MzA4LDMxNTEzOTIxODcsMzcyOTExMTI2XTt2YXIgVDQ9WzE2Njc0NzQ4ODYsMjA4ODUzNTI4OCwyMDA0MzI2ODk0LDIwNzE2OTQ4MzgsNDA3NTk0OTU2NywxODAyMjIzMDYyLDE4Njk1OTEwMDYsMzMxODA0Mzc5Myw4MDg0NzI2NzIsMTY4NDM1MjIsMTczNDg0NjkyNiw3MjQyNzA0MjIsNDI3ODA2NTYzOSwzNjIxMjE2OTQ5LDI4ODAxNjk1NDksMTk4NzQ4NDM5NiwzNDAyMjUzNzExLDIxODk1OTc5ODMsMzM4NTQwOTY3MywyMTA1Mzc4ODEwLDQyMTA2OTM2MTUsMTQ5OTA2NTI2NiwxMTk1ODg2OTkwLDQwNDIyNjM1NDcsMjkxMzg1NjU3NywzNTcwNjg5OTcxLDI3Mjg1OTA2ODcsMjk0NzU0MTU3MywyNjI3NTE4MjQzLDI3NjIyNzQ2NDMsMTkyMDExMjM1NiwzMjMzODMxODM1LDMwODIyNzMzOTcsNDI2MTIyMzY0OSwyNDc1OTI5MTQ5LDY0MDA1MTc4OCw5MDk1MzE3NTYsMTA2MTExMDE0Miw0MTYwMTYwNTAxLDM0MzU5NDE3NjMsODc1ODQ2NzYwLDI3NzkxMTY2MjUsMzg1NzAwMzcyOSw0MDU5MTA1NTI5LDE5MDMyNjg4MzQsMzYzODA2NDA0Myw4MjUzMTYxOTQsMzUzNzEzOTYyLDY3Mzc0MDg4LDMzNTE3Mjg3ODksNTg5NTIyMjQ2LDMyODQzNjA4NjEsNDA0MjM2MzM2LDI1MjY0NTQwNzEsODQyMTc2MTAsMjU5MzgzMDE5MSwxMTc5MDE1ODIsMzAzMTgzMzk2LDIxNTU5MTE5NjMsMzgwNjQ3Nzc5MSwzOTU4MDU2NjUzLDY1Njg5NDI4NiwyOTk4MDYyNDYzLDE5NzA2NDI5MjIsMTUxNTkxNjk4LDIyMDY0NDA5ODksNzQxMTEwODcyLDQzNzkyMzM4MCw0NTQ3NjU4NzgsMTg1Mjc0ODUwOCwxNTE1OTA4Nzg4LDI2OTQ5MDQ2NjcsMTM4MTE2ODgwNCw5OTM3NDIxOTgsMzYwNDM3Mzk0MywzMDE0OTA1NDY5LDY5MDU4NDQwMiwzODIzMzIwNzk3LDc5MTYzODM2NiwyMjIzMjgxOTM5LDEzOTgwMTEzMDIsMzUyMDE2MTk3NywwLDM5OTE3NDM2ODEsNTM4OTkyNzA0LDQyNDQzODE2NjcsMjk4MTIxODQyNSwxNTMyNzUxMjg2LDE3ODUzODA1NjQsMzQxOTA5NjcxNywzMjAwMTc4NTM1LDk2MDA1NjE3OCwxMjQ2NDIwNjI4LDEyODAxMDM1NzYsMTQ4MjIyMTc0NCwzNDg2NDY4NzQxLDM1MDMzMTk5OTUsNDAyNTQyODY3NywyODYzMzI2NTQzLDQyMjc1MzY2MjEsMTEyODUxNDk1MCwxMjk2OTQ3MDk4LDg1OTAwMjIxNCwyMjQwMTIzOTIxLDExNjIyMDMwMTgsNDE5Mzg0OTU3NywzMzY4NzA0NCwyMTM5MDYyNzgyLDEzNDc0ODE3NjAsMTAxMDU4MjY0OCwyNjc4MDQ1MjIxLDI4Mjk2NDA1MjMsMTM2NDMyNTI4MiwyNzQ1NDMzNjkzLDEwNzc5ODU0MDgsMjQwODU0ODg2OSwyNDU5MDg2MTQzLDI2NDQzNjAyMjUsOTQzMjEyNjU2LDQxMjY0NzU1MDUsMzE2NjQ5NDU2MywzMDY1NDMwMzkxLDM2NzE3NTAwNjMsNTU1ODM2MjI2LDI2OTQ5NjM1Miw0Mjk0OTA4NjQ1LDQwOTI3OTI1NzMsMzUzNzAwNjAxNSwzNDUyNzgzNzQ1LDIwMjExODE2OCwzMjAwMjU4OTQsMzk3NDkwMTY5OSwxNjAwMTE5MjMwLDI1NDMyOTcwNzcsMTE0NTM1OTQ5NiwzODczOTc5MzQsMzMwMTIwMTgxMSwyODEyODAxNjIxLDIxMjIyMjAyODQsMTAyNzQyNjE3MCwxNjg0MzE5NDMyLDE1NjY0MzUyNTgsNDIxMDc5ODU4LDE5MzY5NTQ4NTQsMTYxNjk0NTM0NCwyMTcyNzUzOTQ1LDEzMzA2MzEwNzAsMzcwNTQzODExNSw1NzI2Nzk3NDgsNzA3NDI3OTI0LDI0MjU0MDAxMjMsMjI5MDY0NzgxOSwxMTc5MDQ0NDkyLDQwMDg1ODU2NzEsMzA5OTEyMDQ5MSwzMzY4NzA0NDAsMzczOTEyMjA4NywxNTgzMjc2NzMyLDE4NTI3NzcxOCwzNjg4NTkzMDY5LDM3NzI3OTE3NzEsODQyMTU5NzE2LDk3Njg5OTcwMCwxNjg0MzUyMjAsMTIyOTU3NzEwNiwxMDEwNTkwODQsNjA2MzY2NzkyLDE1NDk1OTE3MzYsMzI2NzUxNzg1NSwzNTUzODQ5MDIxLDI4OTcwMTQ1OTUsMTY1MDYzMjM4OCwyNDQyMjQyMTA1LDI1MDk2MTIwODEsMzg0MDE2MTc0NywyMDM4MDA4ODE4LDM4OTA2ODg3MjUsMzM2ODU2NzY5MSw5MjYzNzQyNTQsMTgzNTkwNzAzNCwyMzc0ODYzODczLDM1ODc1MzE5NTMsMTMxMzc4ODU3MiwyODQ2NDgyNTA1LDE4MTkwNjM1MTIsMTQ0ODU0MDg0NCw0MTA5NjMzNTIzLDM5NDEyMTM2NDcsMTcwMTE2Mjk1NCwyMDU0ODUyMzQwLDI5MzA2OTg1NjcsMTM0NzQ4MTc2LDMxMzI4MDY1MTEsMjAyMTE2NTI5Niw2MjMyMTAzMTQsNzc0Nzk1ODY4LDQ3MTYwNjMyOCwyNzk1OTU4NjE1LDMwMzE3NDY0MTksMzMzNDg4NTc4MywzOTA3NTI3NjI3LDM3MjIyODAwOTcsMTk1Mzc5OTQwMCw1MjIxMzM4MjIsMTI2MzI2MzEyNiwzMTgzMzM2NTQ1LDIzNDExNzY4NDUsMjMyNDMzMzgzOSwxODg2NDI1MzEyLDEwNDQyNjc2NDQsMzA0ODU4ODQwMSwxNzE4MDA0NDI4LDEyMTI3MzM1ODQsNTA1Mjk1NDIsNDE0MzMxNzQ5NSwyMzU4MDMxNjQsMTYzMzc4ODg2Niw4OTI2OTAyODIsMTQ2NTM4MzM0MiwzMTE1OTYyNDczLDIyNTY5NjU5MTEsMzI1MDY3MzgxNyw0ODg0NDk4NTAsMjY2MTIwMjIxNSwzNzg5NjMzNzUzLDQxNzcwMDc1OTUsMjU2MDE0NDE3MSwyODYzMzk4NzQsMTc2ODUzNzA0MiwzNjU0OTA2MDI1LDIzOTE3MDU4NjMsMjQ5Mjc3MDA5OSwyNjEwNjczMTk3LDUwNTI5MTMyNCwyMjczODA4OTE3LDM5MjQzNjk2MDksMzQ2OTYyNTczNSwxNDMxNjk5MzcwLDY3Mzc0MDg4MCwzNzU1OTY1MDkzLDIzNTgwMjE4OTEsMjcxMTc0NjY0OSwyMzA3NDg5ODAxLDIxODk2MTY5MCwzMjE3MDIxNTQxLDM4NzM4NDU3MTksMTExMTY3MjQ1MiwxNzUxNjkzNTIwLDEwOTQ4Mjg5MzAsMjU3Njk4NjE1Myw3NTc5NTQzOTQsMjUyNjQ1NjYyLDI5NjQzNzY0NDMsMTQxNDg1NTg0OCwzMTQ5NjQ5NTE3LDM3MDU1NTQzNl07dmFyIFQ1PVsxMzc0OTg4MTEyLDIxMTgyMTQ5OTUsNDM3NzU3MTIzLDk3NTY1ODY0NiwxMDAxMDg5OTk1LDUzMDQwMDc1MywyOTAyMDg3ODUxLDEyNzMxNjg3ODcsNTQwMDgwNzI1LDI5MTAyMTk3NjYsMjI5NTEwMTA3Myw0MTEwNTY4NDg1LDEzNDA0NjMxMDAsMzMwNzkxNjI0Nyw2NDEwMjUxNTIsMzA0MzE0MDQ5NSwzNzM2MTY0OTM3LDYzMjk1MzcwMywxMTcyOTY3MDY0LDE1NzY5NzY2MDksMzI3NDY2NzI2NiwyMTY5MzAzMDU4LDIzNzAyMTM3OTUsMTgwOTA1NDE1MCw1OTcyNzg0NywzNjE5Mjk4NzcsMzIxMTYyMzE0NywyNTA1MjAyMTM4LDM1NjkyNTUyMTMsMTQ4NDAwNTg0MywxMjM5NDQzNzUzLDIzOTU1ODg2NzYsMTk3NTY4MzQzNCw0MTAyOTc3OTEyLDI1NzI2OTcxOTUsNjY2NDY0NzMzLDMyMDI0MzcwNDYsNDAzNTQ4OTA0NywzMzc0MzYxNzAyLDIxMTA2Njc0NDQsMTY3NTU3Nzg4MCwzODQzNjk5MDc0LDI1Mzg2ODExODQsMTY0OTYzOTIzNywyOTc2MTUxNTIwLDMxNDQzOTY0MjAsNDI2OTkwNzk5Niw0MTc4MDYyMjI4LDE4ODM3OTM0OTYsMjQwMzcyODY2NSwyNDk3NjA0NzQzLDEzODM4NTYzMTEsMjg3NjQ5NDYyNywxOTE3NTE4NTYyLDM4MTA0OTYzNDMsMTcxNjg5MDQxMCwzMDAxNzU1NjU1LDgwMDQ0MDgzNSwyMjYxMDg5MTc4LDM1NDM1OTkyNjksODA3OTYyNjEwLDU5OTc2MjM1NCwzMzc3ODM2MiwzOTc3Njc1MzU2LDIzMjg4Mjg5NzEsMjgwOTc3MTE1NCw0MDc3Mzg0NDMyLDEzMTU1NjIxNDUsMTcwODg0ODMzMywxMDEwMzk4MjksMzUwOTg3MTEzNSwzMjk5Mjc4NDc0LDg3NTQ1MTI5MywyNzMzODU2MTYwLDkyOTg3Njk4LDI3Njc2NDU1NTcsMTkzMTk1MDY1LDEwODAwOTQ2MzQsMTU4NDUwNDU4MiwzMTc4MTA2OTYxLDEwNDIzODU2NTcsMjUzMTA2NzQ1MywzNzExODI5NDIyLDEzMDY5NjczNjYsMjQzODIzNzYyMSwxOTA4Njk0Mjc3LDY3NTU2NDYzLDE2MTU4NjEyNDcsNDI5NDU2MTY0LDM2MDI3NzAzMjcsMjMwMjY5MDI1MiwxNzQyMzE1MTI3LDI5NjgwMTE0NTMsMTI2NDU0NjY0LDM4NzcxOTg2NDgsMjA0MzIxMTQ4MywyNzA5MjYwODcxLDIwODQ3MDQyMzMsNDE2OTQwODIwMSwwLDE1OTQxNzk4Nyw4NDE3Mzk1OTIsNTA0NDU5NDM2LDE4MTc4NjY4MzAsNDI0NTYxODY4MywyNjAzODg5NTAsMTAzNDg2Nzk5OCw5MDg5MzM0MTUsMTY4ODEwODUyLDE3NTA5MDIzMDUsMjYwNjQ1Mzk2OSw2MDc1MzA1NTQsMjAyMDA4NDk3LDI0NzIwMTE1MzUsMzAzNTUzNTA1OCw0NjMxODAxOTAsMjE2MDExNzA3MSwxNjQxODE2MjI2LDE1MTc3Njc1MjksNDcwOTQ4Mzc0LDM4MDEzMzIyMzQsMzIzMTcyMjIxMywxMDA4OTE4NTk1LDMwMzc2NTI3NywyMzU0NzQxODcsNDA2OTI0Njg5Myw3NjY5NDU0NjUsMzM3NTUzODY0LDE0NzU0MTg1MDEsMjk0MzY4MjM4MCw0MDAzMDYxMTc5LDI3NDMwMzQxMDksNDE0NDA0Nzc3NSwxNTUxMDM3ODg0LDExNDc1NTA2NjEsMTU0MzIwODUwMCwyMzM2NDM0NTUwLDM0MDgxMTk1MTYsMzA2OTA0OTk2MCwzMTAyMDExNzQ3LDM2MTAzNjkyMjYsMTExMzgxODM4NCwzMjg2NzE4MDgsMjIyNzU3MzAyNCwyMjM2MjI4NzMzLDM1MzU0ODY0NTYsMjkzNTU2Njg2NSwzMzQxMzk0Mjg1LDQ5NjkwNjA1OSwzNzAyNjY1NDU5LDIyNjkwNjg2MCwyMDA5MTk1NDcyLDczMzE1Njk3MiwyODQyNzM3MDQ5LDI5NDkzMDY4MiwxMjA2NDc3ODU4LDI4MzUxMjMzOTYsMjcwMDA5OTM1NCwxNDUxMDQ0MDU2LDU3MzgwNDc4MywyMjY5NzI4NDU1LDM2NDQzNzk1ODUsMjM2MjA5MDIzOCwyNTY0MDMzMzM0LDI4MDExMDc0MDcsMjc3NjI5MjkwNCwzNjY5NDYyNTY2LDEwNjgzNTEzOTYsNzQyMDM5MDEyLDEzNTAwNzg5ODksMTc4NDY2MzE5NSwxNDE3NTYxNjk4LDQxMzY0NDA3NzAsMjQzMDEyMjIxNiw3NzU1NTA4MTQsMjE5Mzg2MjY0NSwyNjczNzA1MTUwLDE3NzUyNzY5MjQsMTg3NjI0MTgzMywzNDc1MzEzMzMxLDMzNjY3NTQ2MTksMjcwMDQwNDg3LDM5MDI1NjMxODIsMzY3ODEyNDkyMywzNDQxODUwMzc3LDE4NTEzMzI4NTIsMzk2OTU2MjM2OSwyMjAzMDMyMjMyLDM4Njg1NTI4MDUsMjg2ODg5NzQwNiw1NjYwMjE4OTYsNDAxMTE5MDUwMiwzMTM1NzQwODg5LDEyNDg4MDI1MTAsMzkzNjI5MTI4NCw2OTk0MzIxNTAsODMyODc3MjMxLDcwODc4MDg0OSwzMzMyNzQwMTQ0LDg5OTgzNTU4NCwxOTUxMzE3MDQ3LDQyMzY0Mjk5OTAsMzc2NzU4Njk5Miw4NjY2Mzc4NDUsNDA0MzYxMDE4NiwxMTA2MDQxNTkxLDIxNDQxNjE4MDYsMzk1NDQxNzExLDE5ODQ4MTI2ODUsMTEzOTc4MTcwOSwzNDMzNzEyOTgwLDM4MzUwMzY4OTUsMjY2NDU0MzcxNSwxMjgyMDUwMDc1LDMyNDA4OTQzOTIsMTE4MTA0NTExOSwyNjQwMjQzMjA0LDI1OTY1OTE3LDQyMDMxODExNzEsNDIxMTgxODc5OCwzMDA5ODc5Mzg2LDI0NjM4Nzk3NjIsMzkxMDE2MTk3MSwxODQyNzU5NDQzLDI1OTc4MDY0NzYsOTMzMzAxMzcwLDE1MDk0MzA0MTQsMzk0MzkwNjQ0MSwzNDY3MTkyMzAyLDMwNzY2MzkwMjksMzc3Njc2NzQ2OSwyMDUxNTE4NzgwLDI2MzEwNjU0MzMsMTQ0MTk1MjU3NSw0MDQwMTY3NjEsMTk0MjQzNTc3NSwxNDA4NzQ5MDM0LDE2MTA0NTk3MzksMzc0NTM0NTMwMCwyMDE3Nzc4NTY2LDM0MDA1Mjg3NjksMzExMDY1MDk0Miw5NDE4OTY3NDgsMzI2NTQ3ODc1MSwzNzEwNDkzMzAsMzE2ODkzNzIyOCw2NzUwMzk2MjcsNDI3OTA4MDI1Nyw5NjczMTE3MjksMTM1MDUwMjA2LDM2MzU3MzM2NjAsMTY4MzQwNzI0OCwyMDc2OTM1MjY1LDM1NzY4NzA1MTIsMTIxNTA2MTEwOCwzNTAxNzQxODkwXTt2YXIgVDY9WzEzNDc1NDgzMjcsMTQwMDc4MzIwNSwzMjczMjY3MTA4LDI1MjAzOTM1NjYsMzQwOTY4NTM1NSw0MDQ1MzgwOTMzLDI4ODAyNDAyMTYsMjQ3MTIyNDA2NywxNDI4MTczMDUwLDQxMzg1NjMxODEsMjQ0MTY2MTU1OCw2MzY4MTM5MDAsNDIzMzA5NDYxNSwzNjIwMDIyOTg3LDIxNDk5ODc2NTIsMjQxMTAyOTE1NSwxMjM5MzMxMTYyLDE3MzA1MjU3MjMsMjU1NDcxODczNCwzNzgxMDMzNjY0LDQ2MzQ2MTAxLDMxMDQ2MzcyOCwyNzQzOTQ0ODU1LDMzMjg5NTUzODUsMzg3NTc3MDIwNywyNTAxMjE4OTcyLDM5NTUxOTExNjIsMzY2NzIxOTAzMyw3Njg5MTcxMjMsMzU0NTc4OTQ3Myw2OTI3MDc0MzMsMTE1MDIwODQ1NiwxNzg2MTAyNDA5LDIwMjkyOTMxNzcsMTgwNTIxMTcxMCwzNzEwMzY4MTEzLDMwNjU5NjI4MzEsNDAxNjM5NTk3LDE3MjQ0NTcxMzIsMzAyODE0MzY3NCw0MDkxOTg0MTAsMjE5NjA1MjUyOSwxNjIwNTI5NDU5LDExNjQwNzE4MDcsMzc2OTcyMTk3NSwyMjI2ODc1MzEwLDQ4NjQ0MTM3NiwyNDk5MzQ4NTIzLDE0ODM3NTM1NzYsNDI4ODE5OTY1LDIyNzQ2ODA0MjgsMzA3NTYzNjIxNiw1OTg0Mzg4NjcsMzc5OTE0MTEyMiwxNDc0NTAyNTQzLDcxMTM0OTY3NSwxMjkxNjYxMjAsNTM0NTgzNzAsMjU5MjUyMzY0MywyNzgyMDgyODI0LDQwNjMyNDIzNzUsMjk4ODY4NzI2OSwzMTIwNjk0MTIyLDE1NTkwNDE2NjYsNzMwNTE3Mjc2LDI0NjA0NDkyMDQsNDA0MjQ1OTEyMiwyNzA2MjcwNjkwLDM0NDYwMDQ0NjgsMzU3Mzk0MTY5NCw1MzM4MDQxMzAsMjMyODE0MzYxNCwyNjM3NDQyNjQzLDI2OTUwMzM2ODUsODM5MjI0MDMzLDE5NzM3NDUzODcsOTU3MDU1OTgwLDI4NTYzNDU4MzksMTA2ODUyNzY3LDEzNzEzNjg5NzYsNDE4MTU5ODYwMiwxMDMzMjk3MTU4LDI5MzM3MzQ5MTcsMTE3OTUxMDQ2MSwzMDQ2MjAwNDYxLDkxMzQxOTE3LDE4NjI1MzQ4NjgsNDI4NDUwMjAzNyw2MDU2NTczMzksMjU0NzQzMjkzNywzNDMxNTQ2OTQ3LDIwMDMyOTQ2MjIsMzE4MjQ4NzYxOCwyMjgyMTk1MzM5LDk1NDY2OTQwMywzNjgyMTkxNTk4LDEyMDE3NjUzODYsMzkxNzIzNDcwMywzMzg4NTA3MTY2LDAsMjE5ODQzODAyMiwxMjExMjQ3NTk3LDI4ODc2NTE2OTYsMTMxNTcyMzg5MCw0MjI3NjY1NjYzLDE0NDM4NTc3MjAsNTA3MzU4OTMzLDY1Nzg2MTk0NSwxNjc4MzgxMDE3LDU2MDQ4NzU5MCwzNTE2NjE5NjA0LDk3NTQ1MTY5NCwyOTcwMzU2MzI3LDI2MTMxNDUzNSwzNTM1MDcyOTE4LDI2NTI2MDk0MjUsMTMzMzgzODAyMSwyNzI0MzIyMzM2LDE3Njc1MzY0NTksMzcwOTM4Mzk0LDE4MjYyMTExNCwzODU0NjA2Mzc4LDExMjgwMTQ1NjAsNDg3NzI1ODQ3LDE4NTQ2OTE5NywyOTE4MzUzODYzLDMxMDY3ODA4NDAsMzM1Njc2MTc2OSwyMjM3MTMzMDgxLDEyODY1NjcxNzUsMzE1Mjk3NjM0OSw0MjU1MzUwNjI0LDI2ODM3NjUwMzAsMzE2MDE3NTM0OSwzMzA5NTk0MTcxLDg3ODQ0MzM5MCwxOTg4ODM4MTg1LDM3MDQzMDA0ODYsMTc1NjgxODk0MCwxNjczMDYxNjE3LDM0MDMxMDA2MzYsMjcyNzg2MzA5LDEwNzUwMjU2OTgsNTQ1NTcyMzY5LDIxMDU4ODcyNjgsNDE3NDU2MDA2MSwyOTY2Nzk3MzAsMTg0MTc2ODg2NSwxMjYwMjMyMjM5LDQwOTEzMjcwMjQsMzk2MDMwOTMzMCwzNDk3NTA5MzQ3LDE4MTQ4MDMyMjIsMjU3ODAxODQ4OSw0MTk1NDU2MDcyLDU3NTEzODE0OCwzMjk5NDA5MDM2LDQ0Njc1NDg3OSwzNjI5NTQ2Nzk2LDQwMTE5OTYwNDgsMzM0NzUzMjExMCwzMjUyMjM4NTQ1LDQyNzA2Mzk3NzgsOTE1OTg1NDE5LDM0ODM4MjU1MzcsNjgxOTMzNTM0LDY1MTg2ODA0NiwyNzU1NjM2NjcxLDM4MjgxMDM4MzcsMjIzMzc3NTU0LDI2MDc0Mzk4MjAsMTY0OTcwNDUxOCwzMjcwOTM3ODc1LDM5MDE4MDY3NzYsMTU4MDA4Nzc5OSw0MTE4OTg3Njk1LDMxOTgxMTUyMDAsMjA4NzMwOTQ1OSwyODQyNjc4NTczLDMwMTY2OTcxMDYsMTAwMzAwNzEyOSwyODAyODQ5OTE3LDE4NjA3MzgxNDcsMjA3Nzk2NTI0MywxNjQ0Mzk2NzIsNDEwMDg3MjQ3MiwzMjI4MzMxOSwyODI3MTc3ODgyLDE3MDk2MTAzNTAsMjEyNTEzNTg0NiwxMzY0Mjg3NTEsMzg3NDQyODM5MiwzNjUyOTA0ODU5LDM0NjA5ODQ2MzAsMzU3MjE0NTkyOSwzNTkzMDU2MzgwLDI5MzkyNjYyMjYsODI0ODUyMjU5LDgxODMyNDg4NCwzMjI0NzQwNDU0LDkzMDM2OTIxMiwyODAxNTY2NDEwLDI5Njc1MDcxNTIsMzU1NzA2ODQwLDEyNTczMDkzMzYsNDE0ODI5MjgyNiwyNDMyNTY2NTYsNzkwMDczODQ2LDIzNzMzNDA2MzAsMTI5NjI5NzkwNCwxNDIyNjk5MDg1LDM3NTYyOTk3ODAsMzgxODgzNjQwNSw0NTc5OTI4NDAsMzA5OTY2NzQ4NywyMTM1MzE5ODg5LDc3NDIyMzE0LDE1NjAzODI1MTcsMTk0NTc5ODUxNiw3ODgyMDQzNTMsMTUyMTcwNjc4MSwxMzg1MzU2MjQyLDg3MDkxMjA4NiwzMjU5NjUzODMsMjM1ODk1NzkyMSwyMDUwNDY2MDYwLDIzODgyNjA4ODQsMjMxMzg4NDQ3Niw0MDA2NTIxMTI3LDkwMTIxMDU2OSwzOTkwOTUzMTg5LDEwMTQ2NDY3MDUsMTUwMzQ0OTgyMywxMDYyNTk3MjM1LDIwMzE2MjEzMjYsMzIxMjAzNTg5NSwzOTMxMzcxNDY5LDE1MzMwMTc1MTQsMzUwMTc0NTc1LDIyNTYwMjg4OTEsMjE3NzU0NDE3OSwxMDUyMzM4MzcyLDc0MTg3Njc4OCwxNjA2NTkxMjk2LDE5MTQwNTIwMzUsMjEzNzA1MjUzLDIzMzQ2Njk4OTcsMTEwNzIzNDE5NywxODk5NjAzOTY5LDM3MjUwNjk0OTEsMjYzMTQ0Nzc4MCwyNDIyNDk0OTEzLDE2MzU1MDI5ODAsMTg5MzAyMDM0MiwxOTUwOTAzMzg4LDExMjA5NzQ5MzVdO3ZhciBUNz1bMjgwNzA1ODkzMiwxNjk5OTcwNjI1LDI3NjQyNDk2MjMsMTU4NjkwMzU5MSwxODA4NDgxMTk1LDExNzM0MzAxNzMsMTQ4NzY0NTk0Niw1OTk4NDg2Nyw0MTk5ODgyODAwLDE4NDQ4ODI4MDYsMTk4OTI0OTIyOCwxMjc3NTU1OTcwLDM2MjM2MzY5NjUsMzQxOTkxNTU2MiwxMTQ5MjQ5MDc3LDI3NDQxMDQyOTAsMTUxNDc5MDU3Nyw0NTk3NDQ2OTgsMjQ0ODYwMzk0LDMyMzU5OTUxMzQsMTk2MzExNTMxMSw0MDI3NzQ0NTg4LDI1NDQwNzgxNTAsNDE5MDUzMDUxNSwxNjA4OTc1MjQ3LDI2MjcwMTYwODIsMjA2MjI3MDMxNywxNTA3NDk3Mjk4LDIyMDA4MTg4NzgsNTY3NDk4ODY4LDE3NjQzMTM1NjgsMzM1OTkzNjIwMSwyMzA1NDU1NTU0LDIwMzc5NzAwNjIsMTA0NzIzOWUzLDE5MTAzMTkwMzMsMTMzNzM3NjQ4MSwyOTA0MDI3MjcyLDI4OTI0MTczMTIsOTg0OTA3MjE0LDEyNDMxMTI0MTUsODMwNjYxOTE0LDg2MTk2ODIwOSwyMTM1MjUzNTg3LDIwMTEyMTQxODAsMjkyNzkzNDMxNSwyNjg2MjU0NzIxLDczMTE4MzM2OCwxNzUwNjI2Mzc2LDQyNDYzMTA3MjUsMTgyMDgyNDc5OCw0MTcyNzYzNzcxLDM1NDIzMzAyMjcsNDgzOTQ4MjcsMjQwNDkwMTY2MywyODcxNjgyNjQ1LDY3MTU5MzE5NSwzMjU0OTg4NzI1LDIwNzM3MjQ2MTMsMTQ1MDg1MjM5LDIyODA3OTYyMDAsMjc3OTkxNTE5OSwxNzkwNTc1MTA3LDIxODcxMjgwODYsNDcyNjE1NjMxLDMwMjk1MTAwMDksNDA3NTg3NzEyNywzODAyMjIyMTg1LDQxMDcxMDE2NTgsMzIwMTYzMTc0OSwxNjQ2MjUyMzQwLDQyNzA1MDcxNzQsMTQwMjgxMTQzOCwxNDM2NTkwODM1LDM3NzgxNTE4MTgsMzk1MDM1NTcwMiwzOTYzMTYxNDc1LDQwMjA5MTIyMjQsMjY2Nzk5NDczNywyNzM3OTIzNjYsMjMzMTU5MDE3NywxMDQ2OTk2MTMsOTUzNDU5ODIsMzE3NTUwMTI4NiwyMzc3NDg2Njc2LDE1NjA2Mzc4OTIsMzU2NDA0NTMxOCwzNjkwNTc4NzIsNDIxMzQ0NzA2NCwzOTE5MDQyMjM3LDExMzc0Nzc5NTIsMjY1ODYyNTQ5NywxMTE5NzI3ODQ4LDIzNDA5NDc4NDksMTUzMDQ1NTgzMyw0MDA3MzYwOTY4LDE3MjQ2NjU1NiwyNjY5NTk5MzgsNTE2NTUyODM2LDAsMjI1NjczNDU5MiwzOTgwOTMxNjI3LDE4OTAzMjgwODEsMTkxNzc0MjE3MCw0Mjk0NzA0Mzk4LDk0NTE2NDE2NSwzNTc1NTI4ODc4LDk1ODg3MTA4NSwzNjQ3MjEyMDQ3LDI3ODcyMDcyNjAsMTQyMzAyMjkzOSw3NzU1NjIyOTQsMTczOTY1NjIwMiwzODc2NTU3NjU1LDI1MzAzOTEyNzgsMjQ0MzA1ODA3NSwzMzEwMzIxODU2LDU0NzUxMjc5NiwxMjY1MTk1NjM5LDQzNzY1NjU5NCwzMTIxMjc1NTM5LDcxOTcwMDEyOCwzNzYyNTAyNjkwLDM4Nzc4MTE0NywyMTg4MjgyOTcsMzM1MDA2NTgwMywyODMwNzA4MTUwLDI4NDg0NjE4NTQsNDI4MTY5MjAxLDEyMjQ2NjE2NSwzNzIwMDgxMDQ5LDE2MjcyMzUxOTksNjQ4MDE3NjY1LDQxMjI3NjIzNTQsMTAwMjc4Mzg0NiwyMTE3MzYwNjM1LDY5NTYzNDc1NSwzMzM2MzU4NjkxLDQyMzQ3MjEwMDUsNDA0OTg0NDQ1MiwzNzA0MjgwODgxLDIyMzI0MzUyOTksNTc0NjI0NjYzLDI4NzM0MzgxNCw2MTIyMDU4OTgsMTAzOTcxNzA1MSw4NDAwMTk3MDUsMjcwODMyNjE4NSw3OTM0NTE5MzQsODIxMjg4MTE0LDEzOTEyMDE2NzAsMzgyMjA5MDE3NywzNzYxODc4MjcsMzExMzg1NTM0NCwxMjI0MzQ4MDUyLDE2Nzk5NjgyMzMsMjM2MTY5ODU1NiwxMDU4NzA5NzQ0LDc1MjM3NTQyMSwyNDMxNTkwOTYzLDEzMjE2OTkxNDUsMzUxOTE0MjIwMCwyNzM0NTkxMTc4LDE4ODEyNzQ0NCwyMTc3ODY5NTU3LDM3MjcyMDU3NTQsMjM4NDkxMTAzMSwzMjE1MjEyNDYxLDI2NDg5NzY0NDIsMjQ1MDM0NjEwNCwzNDMyNzM3Mzc1LDExODA4NDkyNzgsMzMxNTQ0MjA1LDMxMDIyNDkxNzYsNDE1MDE0NDU2OSwyOTUyMTAyNTk1LDIxNTk5NzYyODUsMjQ3NDQwNDMwNCw3NjYwNzg5MzMsMzEzNzczODYxLDI1NzA4MzIwNDQsMjEwODEwMDYzMiwxNjY4MjEyODkyLDMxNDU0NTY0NDMsMjAxMzkwODI2Miw0MTg2NzIyMTcsMzA3MDM1NjYzNCwyNTk0NzM0OTI3LDE4NTIxNzE5MjUsMzg2NzA2MDk5MSwzNDczNDE2NjM2LDM5MDc0NDg1OTcsMjYxNDczNzYzOSw5MTk0ODkxMzUsMTY0OTQ4NjM5LDIwOTQ0MTAxNjAsMjk5NzgyNTk1Niw1OTA0MjQ2MzksMjQ4NjIyNDU0OSwxNzIzODcyNjc0LDMxNTc3NTA4NjIsMzM5OTk0MTI1MCwzNTAxMjUyNzUyLDM2MjUyNjgxMzUsMjU1NTA0ODE5NiwzNjczNjM3MzU2LDEzNDMxMjc1MDEsNDEzMDI4MTM2MSwzNTk5NTk1MDg1LDI5NTc4NTM2NzksMTI5NzQwMzA1MCw4MTc4MTkxMCwzMDUxNTkzNDI1LDIyODM0OTA0MTAsNTMyMjAxNzcyLDEzNjcyOTU1ODksMzkyNjE3MDk3NCw4OTUyODc2OTIsMTk1Mzc1NzgzMSwxMDkzNTk3OTYzLDQ5MjQ4MzQzMSwzNTI4NjI2OTA3LDE0NDYyNDI1NzYsMTE5MjQ1NTYzOCwxNjM2NjA0NjMxLDIwOTMzNjIyNSwzNDQ4NzM0NjQsMTAxNTY3MTU3MSw2Njk5NjE4OTcsMzM3NTc0MDc2OSwzODU3NTcyMTI0LDI5NzM1MzA2OTUsMzc0NzE5MjAxOCwxOTMzNTMwNjEwLDM0NjQwNDI1MTYsOTM1MjkzODk1LDM0NTQ2ODYxOTksMjg1ODExNTA2OSwxODYzNjM4ODQ1LDM2ODMwMjI5MTYsNDA4NTM2OTUxOSwzMjkyNDQ1MDMyLDg3NTMxMzE4OCwxMDgwMDE3NTcxLDMyNzkwMzM4ODUsNjIxNTkxNzc4LDEyMzM4NTY1NzIsMjUwNDEzMDMxNywyNDE5NzU0NCwzMDE3NjcyNzE2LDM4MzU0ODQzNDAsMzI0NzQ2NTU1OCwyMjIwOTgxMTk1LDMwNjA4NDc5MjIsMTU1MTEyNDU4OCwxNDYzOTk2NjAwXTt2YXIgVDg9WzQxMDQ2MDU3NzcsMTA5NzE1OTU1MCwzOTY2NzM4MTgsNjYwNTEwMjY2LDI4NzU5NjgzMTUsMjYzODYwNjYyMyw0MjAwMTE1MTE2LDM4MDg2NjIzNDcsODIxNzEyMTYwLDE5ODY5MTgwNjEsMzQzMDMyMjU2OCwzODU0NDg4NSwzODU2MTM3Mjk1LDcxODAwMjExNyw4OTM2ODE3MDIsMTY1NDg4NjMyNSwyOTc1NDg0MzgyLDMxMjIzNTgwNTMsMzkyNjgyNTAyOSw0Mjc0MDUzNDY5LDc5NjE5NzU3MSwxMjkwODAxNzkzLDExODQzNDI5MjUsMzU1NjM2MTgzNSwyNDA1NDI2OTQ3LDI0NTk3MzUzMTcsMTgzNjc3MjI4NywxMzgxNjIwMzczLDMxOTYyNjc5ODgsMTk0ODM3Mzg0OCwzNzY0OTg4MjMzLDMzODUzNDUxNjYsMzI2Mzc4NTU4OSwyMzkwMzI1NDkyLDE0ODA0ODU3ODUsMzExMTI0NzE0MywzNzgwMDk3NzI2LDIyOTMwNDUyMzIsNTQ4MTY5NDE3LDM0NTk5NTM3ODksMzc0NjE3NTA3NSw0Mzk0NTIzODksMTM2MjMyMTU1OSwxNDAwODQ5NzYyLDE2ODU1Nzc5MDUsMTgwNjU5OTM1NSwyMTc0NzU0MDQ2LDEzNzA3MzkxMywxMjE0Nzk3OTM2LDExNzQyMTUwNTUsMzczMTY1NDU0OCwyMDc5ODk3NDI2LDE5NDMyMTcwNjcsMTI1ODQ4MDI0Miw1Mjk0ODc4NDMsMTQzNzI4MDg3MCwzOTQ1MjY5MTcwLDMwNDkzOTA4OTUsMzMxMzIxMjAzOCw5MjMzMTM2MTksNjc5OTk4ZTMsMzIxNTMwNzI5OSw1NzMyNjA4MiwzNzc2NDIyMjEsMzQ3NDcyOTg2NiwyMDQxODc3MTU5LDEzMzM2MTkwNywxNzc2NDYwMTEwLDM2NzM0NzY0NTMsOTYzOTI0NTQsODc4ODQ1OTA1LDI4MDE2OTk1MjQsNzc3MjMxNjY4LDQwODI0NzUxNzAsMjMzMDAxNDIxMyw0MTQyNjI2MjEyLDIyMTMyOTYzOTUsMTYyNjMxOTQyNCwxOTA2MjQ3MjYyLDE4NDY1NjMyNjEsNTYyNzU1OTAyLDM3MDgxNzM3MTgsMTA0MDU1OTgzNywzODcxMTYzOTgxLDE0MTg1NzMyMDEsMzI5NDQzMDU3NywxMTQ1ODUzNDgsMTM0MzYxODkxMiwyNTY2NTk1NjA5LDMxODYyMDI1ODIsMTA3ODE4NTA5NywzNjUxMDQxMTI3LDM4OTY2ODgwNDgsMjMwNzYyMjkxOSw0MjU0MDg3NDMsMzM3MTA5Njk1MywyMDgxMDQ4NDgxLDExMDgzMzkwNjgsMjIxNjYxMDI5NiwwLDIxNTYyOTkwMTcsNzM2OTcwODAyLDI5MjU5Njc2NiwxNTE3NDQwNjIwLDI1MTY1NzIxMywyMjM1MDYxNzc1LDI5MzMyMDI0OTMsNzU4NzIwMzEwLDI2NTkwNTE2MiwxNTU0MzkxNDAwLDE1MzIyODUzMzksOTA4OTk5MjA0LDE3NDU2NzY5MiwxNDc0NzYwNTk1LDQwMDI4NjE3NDgsMjYxMDAxMTY3NSwzMjM0MTU2NDE2LDM2OTMxMjYyNDEsMjAwMTQzMDg3NCwzMDM2OTk0ODQsMjQ3ODQ0MzIzNCwyNjg3MTY1ODg4LDU4NTEyMjYyMCw0NTQ0OTk2MDIsMTUxODQ5NzQyLDIzNDUxMTkyMTgsMzA2NDUxMDc2NSw1MTQ0NDMyODQsNDA0NDk4MTU5MSwxOTYzNDEyNjU1LDI1ODE0NDU2MTQsMjEzNzA2MjgxOSwxOTMwODUzNSwxOTI4NzA3MTY0LDE3MTUxOTMxNTYsNDIxOTM1MjE1NSwxMTI2NzkwNzk1LDYwMDIzNTIxMSwzOTkyNzQyMDcwLDM4NDEwMjQ5NTIsODM2NTUzNDMxLDE2Njk2NjQ4MzQsMjUzNTYwNDI0MywzMzIzMDExMjA0LDEyNDM5MDU0MTMsMzE0MTQwMDc4Niw0MTgwODA4MTEwLDY5ODQ0NTI1NSwyNjUzODk5NTQ5LDI5ODk1NTI2MDQsMjI1MzU4MTMyNSwzMjUyOTMyNzI3LDMwMDQ1OTExNDcsMTg5MTIxMTY4OSwyNDg3ODEwNTc3LDM5MTU2NTM3MDMsNDIzNzA4MzgxNiw0MDMwNjY3NDI0LDIxMDAwOTA5NjYsODY1MTM2NDE4LDEyMjk4OTk2NTUsOTUzMjcwNzQ1LDMzOTk2Nzk2MjgsMzU1NzUwNDY2NCw0MTE4OTI1MjIyLDIwNjEzNzk3NDksMzA3OTU0NjU4NiwyOTE1MDE3NzkxLDk4MzQyNjA5MiwyMDIyODM3NTg0LDE2MDcyNDQ2NTAsMjExODU0MTkwOCwyMzY2ODgyNTUwLDM2MzU5OTY4MTYsOTcyNTEyODE0LDMyODMwODg3NzAsMTU2ODcxODQ5NSwzNDk5MzI2NTY5LDM1NzY1Mzk1MDMsNjIxOTgyNjcxLDI4OTU3MjM0NjQsNDEwODg3OTUyLDI2MjM3NjIxNTIsMTAwMjE0MjY4Myw2NDU0MDEwMzcsMTQ5NDgwNzY2MiwyNTk1Njg0ODQ0LDEzMzU1MzU3NDcsMjUwNzA0MDIzMCw0MjkzMjk1Nzg2LDMxNjc2ODQ2NDEsMzY3NTg1MDA3LDM4ODU3NTA3MTQsMTg2NTg2MjczMCwyNjY4MjIxNjc0LDI5NjA5NzEzMDUsMjc2MzE3MzY4MSwxMDU5MjcwOTU0LDI3Nzc5NTI0NTQsMjcyNDY0Mjg2OSwxMzIwOTU3ODEyLDIxOTQzMTkxMDAsMjQyOTU5NTg3MiwyODE1OTU2Mjc1LDc3MDg5NTIxLDM5NzM3NzMxMjEsMzQ0NDU3NTg3MSwyNDQ4ODMwMjMxLDEzMDU5MDY1NTAsNDAyMTMwODczOSwyODU3MTk0NzAwLDI1MTY5MDE4NjAsMzUxODM1ODQzMCwxNzg3MzA0NzgwLDc0MDI3NjQxNywxNjk5ODM5ODE0LDE1OTIzOTQ5MDksMjM1MjMwNzQ1NywyMjcyNTU2MDI2LDE4ODgyMTI0MywxNzI5OTc3MDExLDM2ODc5OTQwMDIsMjc0MDg0ODQxLDM1OTQ5ODIyNTMsMzYxMzQ5NDQyNiwyNzAxOTQ5NDk1LDQxNjIwOTY3MjksMzIyNzM0NTcxLDI4Mzc5NjY1NDIsMTY0MDU3NjQzOSw0ODQ4MzA2ODksMTIwMjc5NzY5MCwzNTM3ODUyODI4LDQwNjc2MzkxMjUsMzQ5MDc1NzM2LDMzNDIzMTk0NzUsNDE1NzQ2NzIxOSw0MjU1ODAwMTU5LDEwMzA2OTAwMTUsMTE1NTIzNzQ5NiwyOTUxOTcxMjc0LDE3NTc2OTE1NzcsNjA3Mzk4OTY4LDI3Mzg5MDUwMjYsNDk5MzQ3OTkwLDM3OTQwNzg5MDgsMTAxMTQ1MjcxMiwyMjc4ODU1NjcsMjgxODY2NjgwOSwyMTMxMTQzNzYsMzAzNDg4MTI0MCwxNDU1NTI1OTg4LDM0MTQ0NTA1NTUsODUwODE3MjM3LDE4MTc5OTg0MDgsMzA5MjcyNjQ4MF07dmFyIFUxPVswLDIzNTQ3NDE4Nyw0NzA5NDgzNzQsMzAzNzY1Mjc3LDk0MTg5Njc0OCw5MDg5MzM0MTUsNjA3NTMwNTU0LDcwODc4MDg0OSwxODgzNzkzNDk2LDIxMTgyMTQ5OTUsMTgxNzg2NjgzMCwxNjQ5NjM5MjM3LDEyMTUwNjExMDgsMTE4MTA0NTExOSwxNDE3NTYxNjk4LDE1MTc3Njc1MjksMzc2NzU4Njk5Miw0MDAzMDYxMTc5LDQyMzY0Mjk5OTAsNDA2OTI0Njg5MywzNjM1NzMzNjYwLDM2MDI3NzAzMjcsMzI5OTI3ODQ3NCwzNDAwNTI4NzY5LDI0MzAxMjIyMTYsMjY2NDU0MzcxNSwyMzYyMDkwMjM4LDIxOTM4NjI2NDUsMjgzNTEyMzM5NiwyODAxMTA3NDA3LDMwMzU1MzUwNTgsMzEzNTc0MDg4OSwzNjc4MTI0OTIzLDM1NzY4NzA1MTIsMzM0MTM5NDI4NSwzMzc0MzYxNzAyLDM4MTA0OTYzNDMsMzk3NzY3NTM1Niw0Mjc5MDgwMjU3LDQwNDM2MTAxODYsMjg3NjQ5NDYyNywyNzc2MjkyOTA0LDMwNzY2MzkwMjksMzExMDY1MDk0MiwyNDcyMDExNTM1LDI2NDAyNDMyMDQsMjQwMzcyODY2NSwyMTY5MzAzMDU4LDEwMDEwODk5OTUsODk5ODM1NTg0LDY2NjQ2NDczMyw2OTk0MzIxNTAsNTk3Mjc4NDcsMjI2OTA2ODYwLDUzMDQwMDc1MywyOTQ5MzA2ODIsMTI3MzE2ODc4NywxMTcyOTY3MDY0LDE0NzU0MTg1MDEsMTUwOTQzMDQxNCwxOTQyNDM1Nzc1LDIxMTA2Njc0NDQsMTg3NjI0MTgzMywxNjQxODE2MjI2LDI5MTAyMTk3NjYsMjc0MzAzNDEwOSwyOTc2MTUxNTIwLDMyMTE2MjMxNDcsMjUwNTIwMjEzOCwyNjA2NDUzOTY5LDIzMDI2OTAyNTIsMjI2OTcyODQ1NSwzNzExODI5NDIyLDM1NDM1OTkyNjksMzI0MDg5NDM5MiwzNDc1MzEzMzMxLDM4NDM2OTkwNzQsMzk0MzkwNjQ0MSw0MTc4MDYyMjI4LDQxNDQwNDc3NzUsMTMwNjk2NzM2NiwxMTM5NzgxNzA5LDEzNzQ5ODgxMTIsMTYxMDQ1OTczOSwxOTc1NjgzNDM0LDIwNzY5MzUyNjUsMTc3NTI3NjkyNCwxNzQyMzE1MTI3LDEwMzQ4Njc5OTgsODY2NjM3ODQ1LDU2NjAyMTg5Niw4MDA0NDA4MzUsOTI5ODc2OTgsMTkzMTk1MDY1LDQyOTQ1NjE2NCwzOTU0NDE3MTEsMTk4NDgxMjY4NSwyMDE3Nzc4NTY2LDE3ODQ2NjMxOTUsMTY4MzQwNzI0OCwxMzE1NTYyMTQ1LDEwODAwOTQ2MzQsMTM4Mzg1NjMxMSwxNTUxMDM3ODg0LDEwMTAzOTgyOSwxMzUwNTAyMDYsNDM3NzU3MTIzLDMzNzU1Mzg2NCwxMDQyMzg1NjU3LDgwNzk2MjYxMCw1NzM4MDQ3ODMsNzQyMDM5MDEyLDI1MzEwNjc0NTMsMjU2NDAzMzMzNCwyMzI4ODI4OTcxLDIyMjc1NzMwMjQsMjkzNTU2Njg2NSwyNzAwMDk5MzU0LDMwMDE3NTU2NTUsMzE2ODkzNzIyOCwzODY4NTUyODA1LDM5MDI1NjMxODIsNDIwMzE4MTE3MSw0MTAyOTc3OTEyLDM3MzYxNjQ5MzcsMzUwMTc0MTg5MCwzMjY1NDc4NzUxLDM0MzM3MTI5ODAsMTEwNjA0MTU5MSwxMzQwNDYzMTAwLDE1NzY5NzY2MDksMTQwODc0OTAzNCwyMDQzMjExNDgzLDIwMDkxOTU0NzIsMTcwODg0ODMzMywxODA5MDU0MTUwLDgzMjg3NzIzMSwxMDY4MzUxMzk2LDc2Njk0NTQ2NSw1OTk3NjIzNTQsMTU5NDE3OTg3LDEyNjQ1NDY2NCwzNjE5Mjk4NzcsNDYzMTgwMTkwLDI3MDkyNjA4NzEsMjk0MzY4MjM4MCwzMTc4MTA2OTYxLDMwMDk4NzkzODYsMjU3MjY5NzE5NSwyNTM4NjgxMTg0LDIyMzYyMjg3MzMsMjMzNjQzNDU1MCwzNTA5ODcxMTM1LDM3NDUzNDUzMDAsMzQ0MTg1MDM3NywzMjc0NjY3MjY2LDM5MTAxNjE5NzEsMzg3NzE5ODY0OCw0MTEwNTY4NDg1LDQyMTE4MTg3OTgsMjU5NzgwNjQ3NiwyNDk3NjA0NzQzLDIyNjEwODkxNzgsMjI5NTEwMTA3MywyNzMzODU2MTYwLDI5MDIwODc4NTEsMzIwMjQzNzA0NiwyOTY4MDExNDUzLDM5MzYyOTEyODQsMzgzNTAzNjg5NSw0MTM2NDQwNzcwLDQxNjk0MDgyMDEsMzUzNTQ4NjQ1NiwzNzAyNjY1NDU5LDM0NjcxOTIzMDIsMzIzMTcyMjIxMywyMDUxNTE4NzgwLDE5NTEzMTcwNDcsMTcxNjg5MDQxMCwxNzUwOTAyMzA1LDExMTM4MTgzODQsMTI4MjA1MDA3NSwxNTg0NTA0NTgyLDEzNTAwNzg5ODksMTY4ODEwODUyLDY3NTU2NDYzLDM3MTA0OTMzMCw0MDQwMTY3NjEsODQxNzM5NTkyLDEwMDg5MTg1OTUsNzc1NTUwODE0LDU0MDA4MDcyNSwzOTY5NTYyMzY5LDM4MDEzMzIyMzQsNDAzNTQ4OTA0Nyw0MjY5OTA3OTk2LDM1NjkyNTUyMTMsMzY2OTQ2MjU2NiwzMzY2NzU0NjE5LDMzMzI3NDAxNDQsMjYzMTA2NTQzMywyNDYzODc5NzYyLDIxNjAxMTcwNzEsMjM5NTU4ODY3NiwyNzY3NjQ1NTU3LDI4Njg4OTc0MDYsMzEwMjAxMTc0NywzMDY5MDQ5OTYwLDIwMjAwODQ5NywzMzc3ODM2MiwyNzAwNDA0ODcsNTA0NDU5NDM2LDg3NTQ1MTI5Myw5NzU2NTg2NDYsNjc1MDM5NjI3LDY0MTAyNTE1MiwyMDg0NzA0MjMzLDE5MTc1MTg1NjIsMTYxNTg2MTI0NywxODUxMzMyODUyLDExNDc1NTA2NjEsMTI0ODgwMjUxMCwxNDg0MDA1ODQzLDE0NTEwNDQwNTYsOTMzMzAxMzcwLDk2NzMxMTcyOSw3MzMxNTY5NzIsNjMyOTUzNzAzLDI2MDM4ODk1MCwyNTk2NTkxNywzMjg2NzE4MDgsNDk2OTA2MDU5LDEyMDY0Nzc4NTgsMTIzOTQ0Mzc1MywxNTQzMjA4NTAwLDE0NDE5NTI1NzUsMjE0NDE2MTgwNiwxOTA4Njk0Mjc3LDE2NzU1Nzc4ODAsMTg0Mjc1OTQ0MywzNjEwMzY5MjI2LDM2NDQzNzk1ODUsMzQwODExOTUxNiwzMzA3OTE2MjQ3LDQwMTExOTA1MDIsMzc3Njc2NzQ2OSw0MDc3Mzg0NDMyLDQyNDU2MTg2ODMsMjgwOTc3MTE1NCwyODQyNzM3MDQ5LDMxNDQzOTY0MjAsMzA0MzE0MDQ5NSwyNjczNzA1MTUwLDI0MzgyMzc2MjEsMjIwMzAzMjIzMiwyMzcwMjEzNzk1XTt2YXIgVTI9WzAsMTg1NDY5MTk3LDM3MDkzODM5NCw0ODc3MjU4NDcsNzQxODc2Nzg4LDY1Nzg2MTk0NSw5NzU0NTE2OTQsODI0ODUyMjU5LDE0ODM3NTM1NzYsMTQwMDc4MzIwNSwxMzE1NzIzODkwLDExNjQwNzE4MDcsMTk1MDkwMzM4OCwyMTM1MzE5ODg5LDE2NDk3MDQ1MTgsMTc2NzUzNjQ1OSwyOTY3NTA3MTUyLDMxNTI5NzYzNDksMjgwMTU2NjQxMCwyOTE4MzUzODYzLDI2MzE0NDc3ODAsMjU0NzQzMjkzNywyMzI4MTQzNjE0LDIxNzc1NDQxNzksMzkwMTgwNjc3NiwzODE4ODM2NDA1LDQyNzA2Mzk3NzgsNDExODk4NzY5NSwzMjk5NDA5MDM2LDM0ODM4MjU1MzcsMzUzNTA3MjkxOCwzNjUyOTA0ODU5LDIwNzc5NjUyNDMsMTg5MzAyMDM0MiwxODQxNzY4ODY1LDE3MjQ0NTcxMzIsMTQ3NDUwMjU0MywxNTU5MDQxNjY2LDExMDcyMzQxOTcsMTI1NzMwOTMzNiw1OTg0Mzg4NjcsNjgxOTMzNTM0LDkwMTIxMDU2OSwxMDUyMzM4MzcyLDI2MTMxNDUzNSw3NzQyMjMxNCw0Mjg4MTk5NjUsMzEwNDYzNzI4LDM0MDk2ODUzNTUsMzIyNDc0MDQ1NCwzNzEwMzY4MTEzLDM1OTMwNTYzODAsMzg3NTc3MDIwNywzOTYwMzA5MzMwLDQwNDUzODA5MzMsNDE5NTQ1NjA3MiwyNDcxMjI0MDY3LDI1NTQ3MTg3MzQsMjIzNzEzMzA4MSwyMzg4MjYwODg0LDMyMTIwMzU4OTUsMzAyODE0MzY3NCwyODQyNjc4NTczLDI3MjQzMjIzMzYsNDEzODU2MzE4MSw0MjU1MzUwNjI0LDM3Njk3MjE5NzUsMzk1NTE5MTE2MiwzNjY3MjE5MDMzLDM1MTY2MTk2MDQsMzQzMTU0Njk0NywzMzQ3NTMyMTEwLDI5MzM3MzQ5MTcsMjc4MjA4MjgyNCwzMDk5NjY3NDg3LDMwMTY2OTcxMDYsMjE5NjA1MjUyOSwyMzEzODg0NDc2LDI0OTkzNDg1MjMsMjY4Mzc2NTAzMCwxMTc5NTEwNDYxLDEyOTYyOTc5MDQsMTM0NzU0ODMyNywxNTMzMDE3NTE0LDE3ODYxMDI0MDksMTYzNTUwMjk4MCwyMDg3MzA5NDU5LDIwMDMyOTQ2MjIsNTA3MzU4OTMzLDM1NTcwNjg0MCwxMzY0Mjg3NTEsNTM0NTgzNzAsODM5MjI0MDMzLDk1NzA1NTk4MCw2MDU2NTczMzksNzkwMDczODQ2LDIzNzMzNDA2MzAsMjI1NjAyODg5MSwyNjA3NDM5ODIwLDI0MjI0OTQ5MTMsMjcwNjI3MDY5MCwyODU2MzQ1ODM5LDMwNzU2MzYyMTYsMzE2MDE3NTM0OSwzNTczOTQxNjk0LDM3MjUwNjk0OTEsMzI3MzI2NzEwOCwzMzU2NzYxNzY5LDQxODE1OTg2MDIsNDA2MzI0MjM3NSw0MDExOTk2MDQ4LDM4MjgxMDM4MzcsMTAzMzI5NzE1OCw5MTU5ODU0MTksNzMwNTE3Mjc2LDU0NTU3MjM2OSwyOTY2Nzk3MzAsNDQ2NzU0ODc5LDEyOTE2NjEyMCwyMTM3MDUyNTMsMTcwOTYxMDM1MCwxODYwNzM4MTQ3LDE5NDU3OTg1MTYsMjAyOTI5MzE3NywxMjM5MzMxMTYyLDExMjA5NzQ5MzUsMTYwNjU5MTI5NiwxNDIyNjk5MDg1LDQxNDgyOTI4MjYsNDIzMzA5NDYxNSwzNzgxMDMzNjY0LDM5MzEzNzE0NjksMzY4MjE5MTU5OCwzNDk3NTA5MzQ3LDM0NDYwMDQ0NjgsMzMyODk1NTM4NSwyOTM5MjY2MjI2LDI3NTU2MzY2NzEsMzEwNjc4MDg0MCwyOTg4Njg3MjY5LDIxOTg0MzgwMjIsMjI4MjE5NTMzOSwyNTAxMjE4OTcyLDI2NTI2MDk0MjUsMTIwMTc2NTM4NiwxMjg2NTY3MTc1LDEzNzEzNjg5NzYsMTUyMTcwNjc4MSwxODA1MjExNzEwLDE2MjA1Mjk0NTksMjEwNTg4NzI2OCwxOTg4ODM4MTg1LDUzMzgwNDEzMCwzNTAxNzQ1NzUsMTY0NDM5NjcyLDQ2MzQ2MTAxLDg3MDkxMjA4Niw5NTQ2Njk0MDMsNjM2ODEzOTAwLDc4ODIwNDM1MywyMzU4OTU3OTIxLDIyNzQ2ODA0MjgsMjU5MjUyMzY0MywyNDQxNjYxNTU4LDI2OTUwMzM2ODUsMjg4MDI0MDIxNiwzMDY1OTYyODMxLDMxODI0ODc2MTgsMzU3MjE0NTkyOSwzNzU2Mjk5NzgwLDMyNzA5Mzc4NzUsMzM4ODUwNzE2Niw0MTc0NTYwMDYxLDQwOTEzMjcwMjQsNDAwNjUyMTEyNywzODU0NjA2Mzc4LDEwMTQ2NDY3MDUsOTMwMzY5MjEyLDcxMTM0OTY3NSw1NjA0ODc1OTAsMjcyNzg2MzA5LDQ1Nzk5Mjg0MCwxMDY4NTI3NjcsMjIzMzc3NTU0LDE2NzgzODEwMTcsMTg2MjUzNDg2OCwxOTE0MDUyMDM1LDIwMzE2MjEzMjYsMTIxMTI0NzU5NywxMTI4MDE0NTYwLDE1ODAwODc3OTksMTQyODE3MzA1MCwzMjI4MzMxOSwxODI2MjExMTQsNDAxNjM5NTk3LDQ4NjQ0MTM3Niw3Njg5MTcxMjMsNjUxODY4MDQ2LDEwMDMwMDcxMjksODE4MzI0ODg0LDE1MDM0NDk4MjMsMTM4NTM1NjI0MiwxMzMzODM4MDIxLDExNTAyMDg0NTYsMTk3Mzc0NTM4NywyMTI1MTM1ODQ2LDE2NzMwNjE2MTcsMTc1NjgxODk0MCwyOTcwMzU2MzI3LDMxMjA2OTQxMjIsMjgwMjg0OTkxNywyODg3NjUxNjk2LDI2Mzc0NDI2NDMsMjUyMDM5MzU2NiwyMzM0NjY5ODk3LDIxNDk5ODc2NTIsMzkxNzIzNDcwMywzNzk5MTQxMTIyLDQyODQ1MDIwMzcsNDEwMDg3MjQ3MiwzMzA5NTk0MTcxLDM0NjA5ODQ2MzAsMzU0NTc4OTQ3MywzNjI5NTQ2Nzk2LDIwNTA0NjYwNjAsMTg5OTYwMzk2OSwxODE0ODAzMjIyLDE3MzA1MjU3MjMsMTQ0Mzg1NzcyMCwxNTYwMzgyNTE3LDEwNzUwMjU2OTgsMTI2MDIzMjIzOSw1NzUxMzgxNDgsNjkyNzA3NDMzLDg3ODQ0MzM5MCwxMDYyNTk3MjM1LDI0MzI1NjY1Niw5MTM0MTkxNyw0MDkxOTg0MTAsMzI1OTY1MzgzLDM0MDMxMDA2MzYsMzI1MjIzODU0NSwzNzA0MzAwNDg2LDM2MjAwMjI5ODcsMzg3NDQyODM5MiwzOTkwOTUzMTg5LDQwNDI0NTkxMjIsNDIyNzY2NTY2MywyNDYwNDQ5MjA0LDI1NzgwMTg0ODksMjIyNjg3NTMxMCwyNDExMDI5MTU1LDMxOTgxMTUyMDAsMzA0NjIwMDQ2MSwyODI3MTc3ODgyLDI3NDM5NDQ4NTVdO3ZhciBVMz1bMCwyMTg4MjgyOTcsNDM3NjU2NTk0LDM4Nzc4MTE0Nyw4NzUzMTMxODgsOTU4ODcxMDg1LDc3NTU2MjI5NCw1OTA0MjQ2MzksMTc1MDYyNjM3NiwxNjk5OTcwNjI1LDE5MTc3NDIxNzAsMjEzNTI1MzU4NywxNTUxMTI0NTg4LDEzNjcyOTU1ODksMTE4MDg0OTI3OCwxMjY1MTk1NjM5LDM1MDEyNTI3NTIsMzcyMDA4MTA0OSwzMzk5OTQxMjUwLDMzNTAwNjU4MDMsMzgzNTQ4NDM0MCwzOTE5MDQyMjM3LDQyNzA1MDcxNzQsNDA4NTM2OTUxOSwzMTAyMjQ5MTc2LDMwNTE1OTM0MjUsMjczNDU5MTE3OCwyOTUyMTAyNTk1LDIzNjE2OTg1NTYsMjE3Nzg2OTU1NywyNTMwMzkxMjc4LDI2MTQ3Mzc2MzksMzE0NTQ1NjQ0MywzMDYwODQ3OTIyLDI3MDgzMjYxODUsMjg5MjQxNzMxMiwyNDA0OTAxNjYzLDIxODcxMjgwODYsMjUwNDEzMDMxNywyNTU1MDQ4MTk2LDM1NDIzMzAyMjcsMzcyNzIwNTc1NCwzMzc1NzQwNzY5LDMyOTI0NDUwMzIsMzg3NjU1NzY1NSwzOTI2MTcwOTc0LDQyNDYzMTA3MjUsNDAyNzc0NDU4OCwxODA4NDgxMTk1LDE3MjM4NzI2NzQsMTkxMDMxOTAzMywyMDk0NDEwMTYwLDE2MDg5NzUyNDcsMTM5MTIwMTY3MCwxMTczNDMwMTczLDEyMjQzNDgwNTIsNTk5ODQ4NjcsMjQ0ODYwMzk0LDQyODE2OTIwMSwzNDQ4NzM0NjQsOTM1MjkzODk1LDk4NDkwNzIxNCw3NjYwNzg5MzMsNTQ3NTEyNzk2LDE4NDQ4ODI4MDYsMTYyNzIzNTE5OSwyMDExMjE0MTgwLDIwNjIyNzAzMTcsMTUwNzQ5NzI5OCwxNDIzMDIyOTM5LDExMzc0Nzc5NTIsMTMyMTY5OTE0NSw5NTM0NTk4MiwxNDUwODUyMzksNTMyMjAxNzcyLDMxMzc3Mzg2MSw4MzA2NjE5MTQsMTAxNTY3MTU3MSw3MzExODMzNjgsNjQ4MDE3NjY1LDMxNzU1MDEyODYsMjk1Nzg1MzY3OSwyODA3MDU4OTMyLDI4NTgxMTUwNjksMjMwNTQ1NTU1NCwyMjIwOTgxMTk1LDI0NzQ0MDQzMDQsMjY1ODYyNTQ5NywzNTc1NTI4ODc4LDM2MjUyNjgxMzUsMzQ3MzQxNjYzNiwzMjU0OTg4NzI1LDM3NzgxNTE4MTgsMzk2MzE2MTQ3NSw0MjEzNDQ3MDY0LDQxMzAyODEzNjEsMzU5OTU5NTA4NSwzNjgzMDIyOTE2LDM0MzI3MzczNzUsMzI0NzQ2NTU1OCwzODAyMjIyMTg1LDQwMjA5MTIyMjQsNDE3Mjc2Mzc3MSw0MTIyNzYyMzU0LDMyMDE2MzE3NDksMzAxNzY3MjcxNiwyNzY0MjQ5NjIzLDI4NDg0NjE4NTQsMjMzMTU5MDE3NywyMjgwNzk2MjAwLDI0MzE1OTA5NjMsMjY0ODk3NjQ0MiwxMDQ2OTk2MTMsMTg4MTI3NDQ0LDQ3MjYxNTYzMSwyODczNDM4MTQsODQwMDE5NzA1LDEwNTg3MDk3NDQsNjcxNTkzMTk1LDYyMTU5MTc3OCwxODUyMTcxOTI1LDE2NjgyMTI4OTIsMTk1Mzc1NzgzMSwyMDM3OTcwMDYyLDE1MTQ3OTA1NzcsMTQ2Mzk5NjYwMCwxMDgwMDE3NTcxLDEyOTc0MDMwNTAsMzY3MzYzNzM1NiwzNjIzNjM2OTY1LDMyMzU5OTUxMzQsMzQ1NDY4NjE5OSw0MDA3MzYwOTY4LDM4MjIwOTAxNzcsNDEwNzEwMTY1OCw0MTkwNTMwNTE1LDI5OTc4MjU5NTYsMzIxNTIxMjQ2MSwyODMwNzA4MTUwLDI3Nzk5MTUxOTksMjI1NjczNDU5MiwyMzQwOTQ3ODQ5LDI2MjcwMTYwODIsMjQ0MzA1ODA3NSwxNzI0NjY1NTYsMTIyNDY2MTY1LDI3Mzc5MjM2Niw0OTI0ODM0MzEsMTA0NzIzOWUzLDg2MTk2ODIwOSw2MTIyMDU4OTgsNjk1NjM0NzU1LDE2NDYyNTIzNDAsMTg2MzYzODg0NSwyMDEzOTA4MjYyLDE5NjMxMTUzMTEsMTQ0NjI0MjU3NiwxNTMwNDU1ODMzLDEyNzc1NTU5NzAsMTA5MzU5Nzk2MywxNjM2NjA0NjMxLDE4MjA4MjQ3OTgsMjA3MzcyNDYxMywxOTg5MjQ5MjI4LDE0MzY1OTA4MzUsMTQ4NzY0NTk0NiwxMzM3Mzc2NDgxLDExMTk3Mjc4NDgsMTY0OTQ4NjM5LDgxNzgxOTEwLDMzMTU0NDIwNSw1MTY1NTI4MzYsMTAzOTcxNzA1MSw4MjEyODgxMTQsNjY5OTYxODk3LDcxOTcwMDEyOCwyOTczNTMwNjk1LDMxNTc3NTA4NjIsMjg3MTY4MjY0NSwyNzg3MjA3MjYwLDIyMzI0MzUyOTksMjI4MzQ5MDQxMCwyNjY3OTk0NzM3LDI0NTAzNDYxMDQsMzY0NzIxMjA0NywzNTY0MDQ1MzE4LDMyNzkwMzM4ODUsMzQ2NDA0MjUxNiwzOTgwOTMxNjI3LDM3NjI1MDI2OTAsNDE1MDE0NDU2OSw0MTk5ODgyODAwLDMwNzAzNTY2MzQsMzEyMTI3NTUzOSwyOTA0MDI3MjcyLDI2ODYyNTQ3MjEsMjIwMDgxODg3OCwyMzg0OTExMDMxLDI1NzA4MzIwNDQsMjQ4NjIyNDU0OSwzNzQ3MTkyMDE4LDM1Mjg2MjY5MDcsMzMxMDMyMTg1NiwzMzU5OTM2MjAxLDM5NTAzNTU3MDIsMzg2NzA2MDk5MSw0MDQ5ODQ0NDUyLDQyMzQ3MjEwMDUsMTczOTY1NjIwMiwxNzkwNTc1MTA3LDIxMDgxMDA2MzIsMTg5MDMyODA4MSwxNDAyODExNDM4LDE1ODY5MDM1OTEsMTIzMzg1NjU3MiwxMTQ5MjQ5MDc3LDI2Njk1OTkzOCw0ODM5NDgyNywzNjkwNTc4NzIsNDE4NjcyMjE3LDEwMDI3ODM4NDYsOTE5NDg5MTM1LDU2NzQ5ODg2OCw3NTIzNzU0MjEsMjA5MzM2MjI1LDI0MTk3NTQ0LDM3NjE4NzgyNyw0NTk3NDQ2OTgsOTQ1MTY0MTY1LDg5NTI4NzY5Miw1NzQ2MjQ2NjMsNzkzNDUxOTM0LDE2Nzk5NjgyMzMsMTc2NDMxMzU2OCwyMTE3MzYwNjM1LDE5MzM1MzA2MTAsMTM0MzEyNzUwMSwxNTYwNjM3ODkyLDEyNDMxMTI0MTUsMTE5MjQ1NTYzOCwzNzA0MjgwODgxLDM1MTkxNDIyMDAsMzMzNjM1ODY5MSwzNDE5OTE1NTYyLDM5MDc0NDg1OTcsMzg1NzU3MjEyNCw0MDc1ODc3MTI3LDQyOTQ3MDQzOTgsMzAyOTUxMDAwOSwzMTEzODU1MzQ0LDI5Mjc5MzQzMTUsMjc0NDEwNDI5MCwyMTU5OTc2Mjg1LDIzNzc0ODY2NzYsMjU5NDczNDkyNywyNTQ0MDc4MTUwXTt2YXIgVTQ9WzAsMTUxODQ5NzQyLDMwMzY5OTQ4NCw0NTQ0OTk2MDIsNjA3Mzk4OTY4LDc1ODcyMDMxMCw5MDg5OTkyMDQsMTA1OTI3MDk1NCwxMjE0Nzk3OTM2LDEwOTcxNTk1NTAsMTUxNzQ0MDYyMCwxNDAwODQ5NzYyLDE4MTc5OTg0MDgsMTY5OTgzOTgxNCwyMTE4NTQxOTA4LDIwMDE0MzA4NzQsMjQyOTU5NTg3MiwyNTgxNDQ1NjE0LDIxOTQzMTkxMDAsMjM0NTExOTIxOCwzMDM0ODgxMjQwLDMxODYyMDI1ODIsMjgwMTY5OTUyNCwyOTUxOTcxMjc0LDM2MzU5OTY4MTYsMzUxODM1ODQzMCwzMzk5Njc5NjI4LDMyODMwODg3NzAsNDIzNzA4MzgxNiw0MTE4OTI1MjIyLDQwMDI4NjE3NDgsMzg4NTc1MDcxNCwxMDAyMTQyNjgzLDg1MDgxNzIzNyw2OTg0NDUyNTUsNTQ4MTY5NDE3LDUyOTQ4Nzg0MywzNzc2NDIyMjEsMjI3ODg1NTY3LDc3MDg5NTIxLDE5NDMyMTcwNjcsMjA2MTM3OTc0OSwxNjQwNTc2NDM5LDE3NTc2OTE1NzcsMTQ3NDc2MDU5NSwxNTkyMzk0OTA5LDExNzQyMTUwNTUsMTI5MDgwMTc5MywyODc1OTY4MzE1LDI3MjQ2NDI4NjksMzExMTI0NzE0MywyOTYwOTcxMzA1LDI0MDU0MjY5NDcsMjI1MzU4MTMyNSwyNjM4NjA2NjIzLDI0ODc4MTA1NzcsMzgwODY2MjM0NywzOTI2ODI1MDI5LDQwNDQ5ODE1OTEsNDE2MjA5NjcyOSwzMzQyMzE5NDc1LDM0NTk5NTM3ODksMzU3NjUzOTUwMywzNjkzMTI2MjQxLDE5ODY5MTgwNjEsMjEzNzA2MjgxOSwxNjg1NTc3OTA1LDE4MzY3NzIyODcsMTM4MTYyMDM3MywxNTMyMjg1MzM5LDEwNzgxODUwOTcsMTIyOTg5OTY1NSwxMDQwNTU5ODM3LDkyMzMxMzYxOSw3NDAyNzY0MTcsNjIxOTgyNjcxLDQzOTQ1MjM4OSwzMjI3MzQ1NzEsMTM3MDczOTEzLDE5MzA4NTM1LDM4NzExNjM5ODEsNDAyMTMwODczOSw0MTA0NjA1Nzc3LDQyNTU4MDAxNTksMzI2Mzc4NTU4OSwzNDE0NDUwNTU1LDM0OTkzMjY1NjksMzY1MTA0MTEyNywyOTMzMjAyNDkzLDI4MTU5NTYyNzUsMzE2NzY4NDY0MSwzMDQ5MzkwODk1LDIzMzAwMTQyMTMsMjIxMzI5NjM5NSwyNTY2NTk1NjA5LDI0NDg4MzAyMzEsMTMwNTkwNjU1MCwxMTU1MjM3NDk2LDE2MDcyNDQ2NTAsMTQ1NTUyNTk4OCwxNzc2NDYwMTEwLDE2MjYzMTk0MjQsMjA3OTg5NzQyNiwxOTI4NzA3MTY0LDk2MzkyNDU0LDIxMzExNDM3NiwzOTY2NzM4MTgsNTE0NDQzMjg0LDU2Mjc1NTkwMiw2Nzk5OThlMyw4NjUxMzY0MTgsOTgzNDI2MDkyLDM3MDgxNzM3MTgsMzU1NzUwNDY2NCwzNDc0NzI5ODY2LDMzMjMwMTEyMDQsNDE4MDgwODExMCw0MDMwNjY3NDI0LDM5NDUyNjkxNzAsMzc5NDA3ODkwOCwyNTA3MDQwMjMwLDI2MjM3NjIxNTIsMjI3MjU1NjAyNiwyMzkwMzI1NDkyLDI5NzU0ODQzODIsMzA5MjcyNjQ4MCwyNzM4OTA1MDI2LDI4NTcxOTQ3MDAsMzk3Mzc3MzEyMSwzODU2MTM3Mjk1LDQyNzQwNTM0NjksNDE1NzQ2NzIxOSwzMzcxMDk2OTUzLDMyNTI5MzI3MjcsMzY3MzQ3NjQ1MywzNTU2MzYxODM1LDI3NjMxNzM2ODEsMjkxNTAxNzc5MSwzMDY0NTEwNzY1LDMyMTUzMDcyOTksMjE1NjI5OTAxNywyMzA3NjIyOTE5LDI0NTk3MzUzMTcsMjYxMDAxMTY3NSwyMDgxMDQ4NDgxLDE5NjM0MTI2NTUsMTg0NjU2MzI2MSwxNzI5OTc3MDExLDE0ODA0ODU3ODUsMTM2MjMyMTU1OSwxMjQzOTA1NDEzLDExMjY3OTA3OTUsODc4ODQ1OTA1LDEwMzA2OTAwMTUsNjQ1NDAxMDM3LDc5NjE5NzU3MSwyNzQwODQ4NDEsNDI1NDA4NzQzLDM4NTQ0ODg1LDE4ODgyMTI0MywzNjEzNDk0NDI2LDM3MzE2NTQ1NDgsMzMxMzIxMjAzOCwzNDMwMzIyNTY4LDQwODI0NzUxNzAsNDIwMDExNTExNiwzNzgwMDk3NzI2LDM4OTY2ODgwNDgsMjY2ODIyMTY3NCwyNTE2OTAxODYwLDIzNjY4ODI1NTAsMjIxNjYxMDI5NiwzMTQxNDAwNzg2LDI5ODk1NTI2MDQsMjgzNzk2NjU0MiwyNjg3MTY1ODg4LDEyMDI3OTc2OTAsMTMyMDk1NzgxMiwxNDM3MjgwODcwLDE1NTQzOTE0MDAsMTY2OTY2NDgzNCwxNzg3MzA0NzgwLDE5MDYyNDcyNjIsMjAyMjgzNzU4NCwyNjU5MDUxNjIsMTE0NTg1MzQ4LDQ5OTM0Nzk5MCwzNDkwNzU3MzYsNzM2OTcwODAyLDU4NTEyMjYyMCw5NzI1MTI4MTQsODIxNzEyMTYwLDI1OTU2ODQ4NDQsMjQ3ODQ0MzIzNCwyMjkzMDQ1MjMyLDIxNzQ3NTQwNDYsMzE5NjI2Nzk4OCwzMDc5NTQ2NTg2LDI4OTU3MjM0NjQsMjc3Nzk1MjQ1NCwzNTM3ODUyODI4LDM2ODc5OTQwMDIsMzIzNDE1NjQxNiwzMzg1MzQ1MTY2LDQxNDI2MjYyMTIsNDI5MzI5NTc4NiwzODQxMDI0OTUyLDM5OTI3NDIwNzAsMTc0NTY3NjkyLDU3MzI2MDgyLDQxMDg4Nzk1MiwyOTI1OTY3NjYsNzc3MjMxNjY4LDY2MDUxMDI2NiwxMDExNDUyNzEyLDg5MzY4MTcwMiwxMTA4MzM5MDY4LDEyNTg0ODAyNDIsMTM0MzYxODkxMiwxNDk0ODA3NjYyLDE3MTUxOTMxNTYsMTg2NTg2MjczMCwxOTQ4MzczODQ4LDIxMDAwOTA5NjYsMjcwMTk0OTQ5NSwyODE4NjY2ODA5LDMwMDQ1OTExNDcsMzEyMjM1ODA1MywyMjM1MDYxNzc1LDIzNTIzMDc0NTcsMjUzNTYwNDI0MywyNjUzODk5NTQ5LDM5MTU2NTM3MDMsMzc2NDk4ODIzMyw0MjE5MzUyMTU1LDQwNjc2MzkxMjUsMzQ0NDU3NTg3MSwzMjk0NDMwNTc3LDM3NDYxNzUwNzUsMzU5NDk4MjI1Myw4MzY1NTM0MzEsOTUzMjcwNzQ1LDYwMDIzNTIxMSw3MTgwMDIxMTcsMzY3NTg1MDA3LDQ4NDgzMDY4OSwxMzMzNjE5MDcsMjUxNjU3MjEzLDIwNDE4NzcxNTksMTg5MTIxMTY4OSwxODA2NTk5MzU1LDE2NTQ4ODYzMjUsMTU2ODcxODQ5NSwxNDE4NTczMjAxLDEzMzU1MzU3NDcsMTE4NDM0MjkyNV07ZnVuY3Rpb24gY29udmVydFRvSW50MzIoYnl0ZXMpe3ZhciByZXN1bHQ9W107Zm9yKHZhciBpPTA7aTxieXRlcy5sZW5ndGg7aSs9NCl7cmVzdWx0LnB1c2goYnl0ZXNbaV08PDI0fGJ5dGVzW2krMV08PDE2fGJ5dGVzW2krMl08PDh8Ynl0ZXNbaSszXSl9cmV0dXJuIHJlc3VsdH12YXIgQUVTPWZ1bmN0aW9uKGtleSl7aWYoISh0aGlzIGluc3RhbmNlb2YgQUVTKSl7dGhyb3cgRXJyb3IoXCJBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YFwiKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImtleVwiLHt2YWx1ZTpjb2VyY2VBcnJheShrZXksdHJ1ZSl9KTt0aGlzLl9wcmVwYXJlKCl9O0FFUy5wcm90b3R5cGUuX3ByZXBhcmU9ZnVuY3Rpb24oKXt2YXIgcm91bmRzPW51bWJlck9mUm91bmRzW3RoaXMua2V5Lmxlbmd0aF07aWYocm91bmRzPT1udWxsKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGtleSBzaXplIChtdXN0IGJlIDE2LCAyNCBvciAzMiBieXRlcylcIil9dGhpcy5fS2U9W107dGhpcy5fS2Q9W107Zm9yKHZhciBpPTA7aTw9cm91bmRzO2krKyl7dGhpcy5fS2UucHVzaChbMCwwLDAsMF0pO3RoaXMuX0tkLnB1c2goWzAsMCwwLDBdKX12YXIgcm91bmRLZXlDb3VudD0ocm91bmRzKzEpKjQ7dmFyIEtDPXRoaXMua2V5Lmxlbmd0aC80O3ZhciB0az1jb252ZXJ0VG9JbnQzMih0aGlzLmtleSk7dmFyIGluZGV4O2Zvcih2YXIgaT0wO2k8S0M7aSsrKXtpbmRleD1pPj4yO3RoaXMuX0tlW2luZGV4XVtpJTRdPXRrW2ldO3RoaXMuX0tkW3JvdW5kcy1pbmRleF1baSU0XT10a1tpXX12YXIgcmNvbnBvaW50ZXI9MDt2YXIgdD1LQyx0dDt3aGlsZSh0PHJvdW5kS2V5Q291bnQpe3R0PXRrW0tDLTFdO3RrWzBdXj1TW3R0Pj4xNiYyNTVdPDwyNF5TW3R0Pj44JjI1NV08PDE2XlNbdHQmMjU1XTw8OF5TW3R0Pj4yNCYyNTVdXnJjb25bcmNvbnBvaW50ZXJdPDwyNDtyY29ucG9pbnRlcis9MTtpZihLQyE9OCl7Zm9yKHZhciBpPTE7aTxLQztpKyspe3RrW2ldXj10a1tpLTFdfX1lbHNle2Zvcih2YXIgaT0xO2k8S0MvMjtpKyspe3RrW2ldXj10a1tpLTFdfXR0PXRrW0tDLzItMV07dGtbS0MvMl1ePVNbdHQmMjU1XV5TW3R0Pj44JjI1NV08PDheU1t0dD4+MTYmMjU1XTw8MTZeU1t0dD4+MjQmMjU1XTw8MjQ7Zm9yKHZhciBpPUtDLzIrMTtpPEtDO2krKyl7dGtbaV1ePXRrW2ktMV19fXZhciBpPTAscixjO3doaWxlKGk8S0MmJnQ8cm91bmRLZXlDb3VudCl7cj10Pj4yO2M9dCU0O3RoaXMuX0tlW3JdW2NdPXRrW2ldO3RoaXMuX0tkW3JvdW5kcy1yXVtjXT10a1tpKytdO3QrK319Zm9yKHZhciByPTE7cjxyb3VuZHM7cisrKXtmb3IodmFyIGM9MDtjPDQ7YysrKXt0dD10aGlzLl9LZFtyXVtjXTt0aGlzLl9LZFtyXVtjXT1VMVt0dD4+MjQmMjU1XV5VMlt0dD4+MTYmMjU1XV5VM1t0dD4+OCYyNTVdXlU0W3R0JjI1NV19fX07QUVTLnByb3RvdHlwZS5lbmNyeXB0PWZ1bmN0aW9uKHBsYWludGV4dCl7aWYocGxhaW50ZXh0Lmxlbmd0aCE9MTYpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpXCIpfXZhciByb3VuZHM9dGhpcy5fS2UubGVuZ3RoLTE7dmFyIGE9WzAsMCwwLDBdO3ZhciB0PWNvbnZlcnRUb0ludDMyKHBsYWludGV4dCk7Zm9yKHZhciBpPTA7aTw0O2krKyl7dFtpXV49dGhpcy5fS2VbMF1baV19Zm9yKHZhciByPTE7cjxyb3VuZHM7cisrKXtmb3IodmFyIGk9MDtpPDQ7aSsrKXthW2ldPVQxW3RbaV0+PjI0JjI1NV1eVDJbdFsoaSsxKSU0XT4+MTYmMjU1XV5UM1t0WyhpKzIpJTRdPj44JjI1NV1eVDRbdFsoaSszKSU0XSYyNTVdXnRoaXMuX0tlW3JdW2ldfXQ9YS5zbGljZSgpfXZhciByZXN1bHQ9Y3JlYXRlQXJyYXkoMTYpLHR0O2Zvcih2YXIgaT0wO2k8NDtpKyspe3R0PXRoaXMuX0tlW3JvdW5kc11baV07cmVzdWx0WzQqaV09KFNbdFtpXT4+MjQmMjU1XV50dD4+MjQpJjI1NTtyZXN1bHRbNCppKzFdPShTW3RbKGkrMSklNF0+PjE2JjI1NV1edHQ+PjE2KSYyNTU7cmVzdWx0WzQqaSsyXT0oU1t0WyhpKzIpJTRdPj44JjI1NV1edHQ+PjgpJjI1NTtyZXN1bHRbNCppKzNdPShTW3RbKGkrMyklNF0mMjU1XV50dCkmMjU1fXJldHVybiByZXN1bHR9O0FFUy5wcm90b3R5cGUuZGVjcnlwdD1mdW5jdGlvbihjaXBoZXJ0ZXh0KXtpZihjaXBoZXJ0ZXh0Lmxlbmd0aCE9MTYpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKVwiKX12YXIgcm91bmRzPXRoaXMuX0tkLmxlbmd0aC0xO3ZhciBhPVswLDAsMCwwXTt2YXIgdD1jb252ZXJ0VG9JbnQzMihjaXBoZXJ0ZXh0KTtmb3IodmFyIGk9MDtpPDQ7aSsrKXt0W2ldXj10aGlzLl9LZFswXVtpXX1mb3IodmFyIHI9MTtyPHJvdW5kcztyKyspe2Zvcih2YXIgaT0wO2k8NDtpKyspe2FbaV09VDVbdFtpXT4+MjQmMjU1XV5UNlt0WyhpKzMpJTRdPj4xNiYyNTVdXlQ3W3RbKGkrMiklNF0+PjgmMjU1XV5UOFt0WyhpKzEpJTRdJjI1NV1edGhpcy5fS2Rbcl1baV19dD1hLnNsaWNlKCl9dmFyIHJlc3VsdD1jcmVhdGVBcnJheSgxNiksdHQ7Zm9yKHZhciBpPTA7aTw0O2krKyl7dHQ9dGhpcy5fS2Rbcm91bmRzXVtpXTtyZXN1bHRbNCppXT0oU2lbdFtpXT4+MjQmMjU1XV50dD4+MjQpJjI1NTtyZXN1bHRbNCppKzFdPShTaVt0WyhpKzMpJTRdPj4xNiYyNTVdXnR0Pj4xNikmMjU1O3Jlc3VsdFs0KmkrMl09KFNpW3RbKGkrMiklNF0+PjgmMjU1XV50dD4+OCkmMjU1O3Jlc3VsdFs0KmkrM109KFNpW3RbKGkrMSklNF0mMjU1XV50dCkmMjU1fXJldHVybiByZXN1bHR9O3ZhciBNb2RlT2ZPcGVyYXRpb25FQ0I9ZnVuY3Rpb24oa2V5KXtpZighKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25FQ0IpKXt0aHJvdyBFcnJvcihcIkFFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgXCIpfXRoaXMuZGVzY3JpcHRpb249XCJFbGVjdHJvbmljIENvZGUgQmxvY2tcIjt0aGlzLm5hbWU9XCJlY2JcIjt0aGlzLl9hZXM9bmV3IEFFUyhrZXkpfTtNb2RlT2ZPcGVyYXRpb25FQ0IucHJvdG90eXBlLmVuY3J5cHQ9ZnVuY3Rpb24ocGxhaW50ZXh0KXtwbGFpbnRleHQ9Y29lcmNlQXJyYXkocGxhaW50ZXh0KTtpZihwbGFpbnRleHQubGVuZ3RoJTE2IT09MCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwbGFpbnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIil9dmFyIGNpcGhlcnRleHQ9Y3JlYXRlQXJyYXkocGxhaW50ZXh0Lmxlbmd0aCk7dmFyIGJsb2NrPWNyZWF0ZUFycmF5KDE2KTtmb3IodmFyIGk9MDtpPHBsYWludGV4dC5sZW5ndGg7aSs9MTYpe2NvcHlBcnJheShwbGFpbnRleHQsYmxvY2ssMCxpLGkrMTYpO2Jsb2NrPXRoaXMuX2Flcy5lbmNyeXB0KGJsb2NrKTtjb3B5QXJyYXkoYmxvY2ssY2lwaGVydGV4dCxpKX1yZXR1cm4gY2lwaGVydGV4dH07TW9kZU9mT3BlcmF0aW9uRUNCLnByb3RvdHlwZS5kZWNyeXB0PWZ1bmN0aW9uKGNpcGhlcnRleHQpe2NpcGhlcnRleHQ9Y29lcmNlQXJyYXkoY2lwaGVydGV4dCk7aWYoY2lwaGVydGV4dC5sZW5ndGglMTYhPT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIil9dmFyIHBsYWludGV4dD1jcmVhdGVBcnJheShjaXBoZXJ0ZXh0Lmxlbmd0aCk7dmFyIGJsb2NrPWNyZWF0ZUFycmF5KDE2KTtmb3IodmFyIGk9MDtpPGNpcGhlcnRleHQubGVuZ3RoO2krPTE2KXtjb3B5QXJyYXkoY2lwaGVydGV4dCxibG9jaywwLGksaSsxNik7YmxvY2s9dGhpcy5fYWVzLmRlY3J5cHQoYmxvY2spO2NvcHlBcnJheShibG9jayxwbGFpbnRleHQsaSl9cmV0dXJuIHBsYWludGV4dH07dmFyIE1vZGVPZk9wZXJhdGlvbkNCQz1mdW5jdGlvbihrZXksaXYpe2lmKCEodGhpcyBpbnN0YW5jZW9mIE1vZGVPZk9wZXJhdGlvbkNCQykpe3Rocm93IEVycm9yKFwiQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2BcIil9dGhpcy5kZXNjcmlwdGlvbj1cIkNpcGhlciBCbG9jayBDaGFpbmluZ1wiO3RoaXMubmFtZT1cImNiY1wiO2lmKCFpdil7aXY9Y3JlYXRlQXJyYXkoMTYpfWVsc2UgaWYoaXYubGVuZ3RoIT0xNil7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBpbml0aWFsYXRpb24gdmVjdG9yIHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpXCIpfXRoaXMuX2xhc3RDaXBoZXJibG9jaz1jb2VyY2VBcnJheShpdix0cnVlKTt0aGlzLl9hZXM9bmV3IEFFUyhrZXkpfTtNb2RlT2ZPcGVyYXRpb25DQkMucHJvdG90eXBlLmVuY3J5cHQ9ZnVuY3Rpb24ocGxhaW50ZXh0KXtwbGFpbnRleHQ9Y29lcmNlQXJyYXkocGxhaW50ZXh0KTtpZihwbGFpbnRleHQubGVuZ3RoJTE2IT09MCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwbGFpbnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIil9dmFyIGNpcGhlcnRleHQ9Y3JlYXRlQXJyYXkocGxhaW50ZXh0Lmxlbmd0aCk7dmFyIGJsb2NrPWNyZWF0ZUFycmF5KDE2KTtmb3IodmFyIGk9MDtpPHBsYWludGV4dC5sZW5ndGg7aSs9MTYpe2NvcHlBcnJheShwbGFpbnRleHQsYmxvY2ssMCxpLGkrMTYpO2Zvcih2YXIgaj0wO2o8MTY7aisrKXtibG9ja1tqXV49dGhpcy5fbGFzdENpcGhlcmJsb2NrW2pdfXRoaXMuX2xhc3RDaXBoZXJibG9jaz10aGlzLl9hZXMuZW5jcnlwdChibG9jayk7Y29weUFycmF5KHRoaXMuX2xhc3RDaXBoZXJibG9jayxjaXBoZXJ0ZXh0LGkpfXJldHVybiBjaXBoZXJ0ZXh0fTtNb2RlT2ZPcGVyYXRpb25DQkMucHJvdG90eXBlLmRlY3J5cHQ9ZnVuY3Rpb24oY2lwaGVydGV4dCl7Y2lwaGVydGV4dD1jb2VyY2VBcnJheShjaXBoZXJ0ZXh0KTtpZihjaXBoZXJ0ZXh0Lmxlbmd0aCUxNiE9PTApe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKVwiKX12YXIgcGxhaW50ZXh0PWNyZWF0ZUFycmF5KGNpcGhlcnRleHQubGVuZ3RoKTt2YXIgYmxvY2s9Y3JlYXRlQXJyYXkoMTYpO2Zvcih2YXIgaT0wO2k8Y2lwaGVydGV4dC5sZW5ndGg7aSs9MTYpe2NvcHlBcnJheShjaXBoZXJ0ZXh0LGJsb2NrLDAsaSxpKzE2KTtibG9jaz10aGlzLl9hZXMuZGVjcnlwdChibG9jayk7Zm9yKHZhciBqPTA7ajwxNjtqKyspe3BsYWludGV4dFtpK2pdPWJsb2NrW2pdXnRoaXMuX2xhc3RDaXBoZXJibG9ja1tqXX1jb3B5QXJyYXkoY2lwaGVydGV4dCx0aGlzLl9sYXN0Q2lwaGVyYmxvY2ssMCxpLGkrMTYpfXJldHVybiBwbGFpbnRleHR9O3ZhciBNb2RlT2ZPcGVyYXRpb25DRkI9ZnVuY3Rpb24oa2V5LGl2LHNlZ21lbnRTaXplKXtpZighKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25DRkIpKXt0aHJvdyBFcnJvcihcIkFFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgXCIpfXRoaXMuZGVzY3JpcHRpb249XCJDaXBoZXIgRmVlZGJhY2tcIjt0aGlzLm5hbWU9XCJjZmJcIjtpZighaXYpe2l2PWNyZWF0ZUFycmF5KDE2KX1lbHNlIGlmKGl2Lmxlbmd0aCE9MTYpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgaW5pdGlhbGF0aW9uIHZlY3RvciBzaXplIChtdXN0IGJlIDE2IHNpemUpXCIpfWlmKCFzZWdtZW50U2l6ZSl7c2VnbWVudFNpemU9MX10aGlzLnNlZ21lbnRTaXplPXNlZ21lbnRTaXplO3RoaXMuX3NoaWZ0UmVnaXN0ZXI9Y29lcmNlQXJyYXkoaXYsdHJ1ZSk7dGhpcy5fYWVzPW5ldyBBRVMoa2V5KX07TW9kZU9mT3BlcmF0aW9uQ0ZCLnByb3RvdHlwZS5lbmNyeXB0PWZ1bmN0aW9uKHBsYWludGV4dCl7aWYocGxhaW50ZXh0Lmxlbmd0aCV0aGlzLnNlZ21lbnRTaXplIT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIHNlZ21lbnRTaXplIGJ5dGVzKVwiKX12YXIgZW5jcnlwdGVkPWNvZXJjZUFycmF5KHBsYWludGV4dCx0cnVlKTt2YXIgeG9yU2VnbWVudDtmb3IodmFyIGk9MDtpPGVuY3J5cHRlZC5sZW5ndGg7aSs9dGhpcy5zZWdtZW50U2l6ZSl7eG9yU2VnbWVudD10aGlzLl9hZXMuZW5jcnlwdCh0aGlzLl9zaGlmdFJlZ2lzdGVyKTtmb3IodmFyIGo9MDtqPHRoaXMuc2VnbWVudFNpemU7aisrKXtlbmNyeXB0ZWRbaStqXV49eG9yU2VnbWVudFtqXX1jb3B5QXJyYXkodGhpcy5fc2hpZnRSZWdpc3Rlcix0aGlzLl9zaGlmdFJlZ2lzdGVyLDAsdGhpcy5zZWdtZW50U2l6ZSk7Y29weUFycmF5KGVuY3J5cHRlZCx0aGlzLl9zaGlmdFJlZ2lzdGVyLDE2LXRoaXMuc2VnbWVudFNpemUsaSxpK3RoaXMuc2VnbWVudFNpemUpfXJldHVybiBlbmNyeXB0ZWR9O01vZGVPZk9wZXJhdGlvbkNGQi5wcm90b3R5cGUuZGVjcnlwdD1mdW5jdGlvbihjaXBoZXJ0ZXh0KXtpZihjaXBoZXJ0ZXh0Lmxlbmd0aCV0aGlzLnNlZ21lbnRTaXplIT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBzZWdtZW50U2l6ZSBieXRlcylcIil9dmFyIHBsYWludGV4dD1jb2VyY2VBcnJheShjaXBoZXJ0ZXh0LHRydWUpO3ZhciB4b3JTZWdtZW50O2Zvcih2YXIgaT0wO2k8cGxhaW50ZXh0Lmxlbmd0aDtpKz10aGlzLnNlZ21lbnRTaXplKXt4b3JTZWdtZW50PXRoaXMuX2Flcy5lbmNyeXB0KHRoaXMuX3NoaWZ0UmVnaXN0ZXIpO2Zvcih2YXIgaj0wO2o8dGhpcy5zZWdtZW50U2l6ZTtqKyspe3BsYWludGV4dFtpK2pdXj14b3JTZWdtZW50W2pdfWNvcHlBcnJheSh0aGlzLl9zaGlmdFJlZ2lzdGVyLHRoaXMuX3NoaWZ0UmVnaXN0ZXIsMCx0aGlzLnNlZ21lbnRTaXplKTtjb3B5QXJyYXkoY2lwaGVydGV4dCx0aGlzLl9zaGlmdFJlZ2lzdGVyLDE2LXRoaXMuc2VnbWVudFNpemUsaSxpK3RoaXMuc2VnbWVudFNpemUpfXJldHVybiBwbGFpbnRleHR9O3ZhciBNb2RlT2ZPcGVyYXRpb25PRkI9ZnVuY3Rpb24oa2V5LGl2KXtpZighKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25PRkIpKXt0aHJvdyBFcnJvcihcIkFFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgXCIpfXRoaXMuZGVzY3JpcHRpb249XCJPdXRwdXQgRmVlZGJhY2tcIjt0aGlzLm5hbWU9XCJvZmJcIjtpZighaXYpe2l2PWNyZWF0ZUFycmF5KDE2KX1lbHNlIGlmKGl2Lmxlbmd0aCE9MTYpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgaW5pdGlhbGF0aW9uIHZlY3RvciBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKVwiKX10aGlzLl9sYXN0UHJlY2lwaGVyPWNvZXJjZUFycmF5KGl2LHRydWUpO3RoaXMuX2xhc3RQcmVjaXBoZXJJbmRleD0xNjt0aGlzLl9hZXM9bmV3IEFFUyhrZXkpfTtNb2RlT2ZPcGVyYXRpb25PRkIucHJvdG90eXBlLmVuY3J5cHQ9ZnVuY3Rpb24ocGxhaW50ZXh0KXt2YXIgZW5jcnlwdGVkPWNvZXJjZUFycmF5KHBsYWludGV4dCx0cnVlKTtmb3IodmFyIGk9MDtpPGVuY3J5cHRlZC5sZW5ndGg7aSsrKXtpZih0aGlzLl9sYXN0UHJlY2lwaGVySW5kZXg9PT0xNil7dGhpcy5fbGFzdFByZWNpcGhlcj10aGlzLl9hZXMuZW5jcnlwdCh0aGlzLl9sYXN0UHJlY2lwaGVyKTt0aGlzLl9sYXN0UHJlY2lwaGVySW5kZXg9MH1lbmNyeXB0ZWRbaV1ePXRoaXMuX2xhc3RQcmVjaXBoZXJbdGhpcy5fbGFzdFByZWNpcGhlckluZGV4KytdfXJldHVybiBlbmNyeXB0ZWR9O01vZGVPZk9wZXJhdGlvbk9GQi5wcm90b3R5cGUuZGVjcnlwdD1Nb2RlT2ZPcGVyYXRpb25PRkIucHJvdG90eXBlLmVuY3J5cHQ7dmFyIENvdW50ZXI9ZnVuY3Rpb24oaW5pdGlhbFZhbHVlKXtpZighKHRoaXMgaW5zdGFuY2VvZiBDb3VudGVyKSl7dGhyb3cgRXJyb3IoXCJDb3VudGVyIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2BcIil9aWYoaW5pdGlhbFZhbHVlIT09MCYmIWluaXRpYWxWYWx1ZSl7aW5pdGlhbFZhbHVlPTF9aWYodHlwZW9mIGluaXRpYWxWYWx1ZT09PVwibnVtYmVyXCIpe3RoaXMuX2NvdW50ZXI9Y3JlYXRlQXJyYXkoMTYpO3RoaXMuc2V0VmFsdWUoaW5pdGlhbFZhbHVlKX1lbHNle3RoaXMuc2V0Qnl0ZXMoaW5pdGlhbFZhbHVlKX19O0NvdW50ZXIucHJvdG90eXBlLnNldFZhbHVlPWZ1bmN0aW9uKHZhbHVlKXtpZih0eXBlb2YgdmFsdWUhPT1cIm51bWJlclwifHxwYXJzZUludCh2YWx1ZSkhPXZhbHVlKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNvdW50ZXIgdmFsdWUgKG11c3QgYmUgYW4gaW50ZWdlcilcIil9Zm9yKHZhciBpbmRleD0xNTtpbmRleD49MDstLWluZGV4KXt0aGlzLl9jb3VudGVyW2luZGV4XT12YWx1ZSUyNTY7dmFsdWU9dmFsdWU+Pjh9fTtDb3VudGVyLnByb3RvdHlwZS5zZXRCeXRlcz1mdW5jdGlvbihieXRlcyl7Ynl0ZXM9Y29lcmNlQXJyYXkoYnl0ZXMsdHJ1ZSk7aWYoYnl0ZXMubGVuZ3RoIT0xNil7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjb3VudGVyIGJ5dGVzIHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpXCIpfXRoaXMuX2NvdW50ZXI9Ynl0ZXN9O0NvdW50ZXIucHJvdG90eXBlLmluY3JlbWVudD1mdW5jdGlvbigpe2Zvcih2YXIgaT0xNTtpPj0wO2ktLSl7aWYodGhpcy5fY291bnRlcltpXT09PTI1NSl7dGhpcy5fY291bnRlcltpXT0wfWVsc2V7dGhpcy5fY291bnRlcltpXSsrO2JyZWFrfX19O3ZhciBNb2RlT2ZPcGVyYXRpb25DVFI9ZnVuY3Rpb24oa2V5LGNvdW50ZXIpe2lmKCEodGhpcyBpbnN0YW5jZW9mIE1vZGVPZk9wZXJhdGlvbkNUUikpe3Rocm93IEVycm9yKFwiQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2BcIil9dGhpcy5kZXNjcmlwdGlvbj1cIkNvdW50ZXJcIjt0aGlzLm5hbWU9XCJjdHJcIjtpZighKGNvdW50ZXIgaW5zdGFuY2VvZiBDb3VudGVyKSl7Y291bnRlcj1uZXcgQ291bnRlcihjb3VudGVyKX10aGlzLl9jb3VudGVyPWNvdW50ZXI7dGhpcy5fcmVtYWluaW5nQ291bnRlcj1udWxsO3RoaXMuX3JlbWFpbmluZ0NvdW50ZXJJbmRleD0xNjt0aGlzLl9hZXM9bmV3IEFFUyhrZXkpfTtNb2RlT2ZPcGVyYXRpb25DVFIucHJvdG90eXBlLmVuY3J5cHQ9ZnVuY3Rpb24ocGxhaW50ZXh0KXt2YXIgZW5jcnlwdGVkPWNvZXJjZUFycmF5KHBsYWludGV4dCx0cnVlKTtmb3IodmFyIGk9MDtpPGVuY3J5cHRlZC5sZW5ndGg7aSsrKXtpZih0aGlzLl9yZW1haW5pbmdDb3VudGVySW5kZXg9PT0xNil7dGhpcy5fcmVtYWluaW5nQ291bnRlcj10aGlzLl9hZXMuZW5jcnlwdCh0aGlzLl9jb3VudGVyLl9jb3VudGVyKTt0aGlzLl9yZW1haW5pbmdDb3VudGVySW5kZXg9MDt0aGlzLl9jb3VudGVyLmluY3JlbWVudCgpfWVuY3J5cHRlZFtpXV49dGhpcy5fcmVtYWluaW5nQ291bnRlclt0aGlzLl9yZW1haW5pbmdDb3VudGVySW5kZXgrK119cmV0dXJuIGVuY3J5cHRlZH07TW9kZU9mT3BlcmF0aW9uQ1RSLnByb3RvdHlwZS5kZWNyeXB0PU1vZGVPZk9wZXJhdGlvbkNUUi5wcm90b3R5cGUuZW5jcnlwdDtmdW5jdGlvbiBwa2NzN3BhZChkYXRhKXtkYXRhPWNvZXJjZUFycmF5KGRhdGEsdHJ1ZSk7dmFyIHBhZGRlcj0xNi1kYXRhLmxlbmd0aCUxNjt2YXIgcmVzdWx0PWNyZWF0ZUFycmF5KGRhdGEubGVuZ3RoK3BhZGRlcik7Y29weUFycmF5KGRhdGEscmVzdWx0KTtmb3IodmFyIGk9ZGF0YS5sZW5ndGg7aTxyZXN1bHQubGVuZ3RoO2krKyl7cmVzdWx0W2ldPXBhZGRlcn1yZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIHBrY3M3c3RyaXAoZGF0YSl7ZGF0YT1jb2VyY2VBcnJheShkYXRhLHRydWUpO2lmKGRhdGEubGVuZ3RoPDE2KXt0aHJvdyBuZXcgRXJyb3IoXCJQS0NTIzcgaW52YWxpZCBsZW5ndGhcIil9dmFyIHBhZGRlcj1kYXRhW2RhdGEubGVuZ3RoLTFdO2lmKHBhZGRlcj4xNil7dGhyb3cgbmV3IEVycm9yKFwiUEtDUyM3IHBhZGRpbmcgYnl0ZSBvdXQgb2YgcmFuZ2VcIil9dmFyIGxlbmd0aD1kYXRhLmxlbmd0aC1wYWRkZXI7Zm9yKHZhciBpPTA7aTxwYWRkZXI7aSsrKXtpZihkYXRhW2xlbmd0aCtpXSE9PXBhZGRlcil7dGhyb3cgbmV3IEVycm9yKFwiUEtDUyM3IGludmFsaWQgcGFkZGluZyBieXRlXCIpfX12YXIgcmVzdWx0PWNyZWF0ZUFycmF5KGxlbmd0aCk7Y29weUFycmF5KGRhdGEscmVzdWx0LDAsMCxsZW5ndGgpO3JldHVybiByZXN1bHR9dmFyIGFlc2pzPXtBRVM6QUVTLENvdW50ZXI6Q291bnRlcixNb2RlT2ZPcGVyYXRpb246e2VjYjpNb2RlT2ZPcGVyYXRpb25FQ0IsY2JjOk1vZGVPZk9wZXJhdGlvbkNCQyxjZmI6TW9kZU9mT3BlcmF0aW9uQ0ZCLG9mYjpNb2RlT2ZPcGVyYXRpb25PRkIsY3RyOk1vZGVPZk9wZXJhdGlvbkNUUn0sdXRpbHM6e2hleDpjb252ZXJ0SGV4LHV0Zjg6Y29udmVydFV0Zjh9LHBhZGRpbmc6e3BrY3M3OntwYWQ6cGtjczdwYWQsc3RyaXA6cGtjczdzdHJpcH19LF9hcnJheVRlc3Q6e2NvZXJjZUFycmF5OmNvZXJjZUFycmF5LGNyZWF0ZUFycmF5OmNyZWF0ZUFycmF5LGNvcHlBcnJheTpjb3B5QXJyYXl9fTtpZihcIm9iamVjdFwiIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9YWVzanN9ZWxzZSBpZih0eXBlb2YgdW5kZWZpbmVkPT09XCJmdW5jdGlvblwiJiZ1bmRlZmluZWQuYW1kKXt1bmRlZmluZWQoYWVzanMpfWVsc2V7aWYocm9vdC5hZXNqcyl7YWVzanMuX2Flc2pzPXJvb3QuYWVzanN9cm9vdC5hZXNqcz1hZXNqc319KShjb21tb25qc0dsb2JhbCl9KTtjb25zdCB2ZXJzaW9uJGk9XCJqc29uLXdhbGxldHMvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBsb29zZUFycmF5aWZ5KGhleFN0cmluZyl7aWYodHlwZW9mIGhleFN0cmluZz09PVwic3RyaW5nXCImJmhleFN0cmluZy5zdWJzdHJpbmcoMCwyKSE9PVwiMHhcIil7aGV4U3RyaW5nPVwiMHhcIitoZXhTdHJpbmd9cmV0dXJuIGFycmF5aWZ5KGhleFN0cmluZyl9ZnVuY3Rpb24genBhZCh2YWx1ZSxsZW5ndGgpe3ZhbHVlPVN0cmluZyh2YWx1ZSk7d2hpbGUodmFsdWUubGVuZ3RoPGxlbmd0aCl7dmFsdWU9XCIwXCIrdmFsdWV9cmV0dXJuIHZhbHVlfWZ1bmN0aW9uIGdldFBhc3N3b3JkKHBhc3N3b3JkKXtpZih0eXBlb2YgcGFzc3dvcmQ9PT1cInN0cmluZ1wiKXtyZXR1cm4gdG9VdGY4Qnl0ZXMocGFzc3dvcmQsVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLk5GS0MpfXJldHVybiBhcnJheWlmeShwYXNzd29yZCl9ZnVuY3Rpb24gc2VhcmNoUGF0aChvYmplY3QscGF0aCl7bGV0IGN1cnJlbnRDaGlsZD1vYmplY3Q7Y29uc3QgY29tcHM9cGF0aC50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiL1wiKTtmb3IobGV0IGk9MDtpPGNvbXBzLmxlbmd0aDtpKyspe2xldCBtYXRjaGluZ0NoaWxkPW51bGw7Zm9yKGNvbnN0IGtleSBpbiBjdXJyZW50Q2hpbGQpe2lmKGtleS50b0xvd2VyQ2FzZSgpPT09Y29tcHNbaV0pe21hdGNoaW5nQ2hpbGQ9Y3VycmVudENoaWxkW2tleV07YnJlYWt9fWlmKG1hdGNoaW5nQ2hpbGQ9PT1udWxsKXtyZXR1cm4gbnVsbH1jdXJyZW50Q2hpbGQ9bWF0Y2hpbmdDaGlsZH1yZXR1cm4gY3VycmVudENoaWxkfWZ1bmN0aW9uIHV1aWRWNChyYW5kb21CeXRlcyl7Y29uc3QgYnl0ZXM9YXJyYXlpZnkocmFuZG9tQnl0ZXMpO2J5dGVzWzZdPWJ5dGVzWzZdJjE1fDY0O2J5dGVzWzhdPWJ5dGVzWzhdJjYzfDEyODtjb25zdCB2YWx1ZT1oZXhsaWZ5KGJ5dGVzKTtyZXR1cm5bdmFsdWUuc3Vic3RyaW5nKDIsMTApLHZhbHVlLnN1YnN0cmluZygxMCwxNCksdmFsdWUuc3Vic3RyaW5nKDE0LDE4KSx2YWx1ZS5zdWJzdHJpbmcoMTgsMjIpLHZhbHVlLnN1YnN0cmluZygyMiwzNCldLmpvaW4oXCItXCIpfVwidXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRuPW5ldyBMb2dnZXIodmVyc2lvbiRpKTtjbGFzcyBDcm93ZHNhbGVBY2NvdW50IGV4dGVuZHMgRGVzY3JpcHRpb257aXNDcm93ZHNhbGVBY2NvdW50KHZhbHVlKXtyZXR1cm4hISh2YWx1ZSYmdmFsdWUuX2lzQ3Jvd2RzYWxlQWNjb3VudCl9fWZ1bmN0aW9uIGRlY3J5cHQoanNvbixwYXNzd29yZCl7Y29uc3QgZGF0YT1KU09OLnBhcnNlKGpzb24pO3Bhc3N3b3JkPWdldFBhc3N3b3JkKHBhc3N3b3JkKTtjb25zdCBldGhhZGRyPWdldEFkZHJlc3Moc2VhcmNoUGF0aChkYXRhLFwiZXRoYWRkclwiKSk7Y29uc3QgZW5jc2VlZD1sb29zZUFycmF5aWZ5KHNlYXJjaFBhdGgoZGF0YSxcImVuY3NlZWRcIikpO2lmKCFlbmNzZWVkfHxlbmNzZWVkLmxlbmd0aCUxNiE9PTApe2xvZ2dlciRuLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZW5jc2VlZFwiLFwianNvblwiLGpzb24pfWNvbnN0IGtleT1hcnJheWlmeShwYmtkZjIocGFzc3dvcmQscGFzc3dvcmQsMmUzLDMyLFwic2hhMjU2XCIpKS5zbGljZSgwLDE2KTtjb25zdCBpdj1lbmNzZWVkLnNsaWNlKDAsMTYpO2NvbnN0IGVuY3J5cHRlZFNlZWQ9ZW5jc2VlZC5zbGljZSgxNik7Y29uc3QgYWVzQ2JjPW5ldyBhZXNKcy5Nb2RlT2ZPcGVyYXRpb24uY2JjKGtleSxpdik7Y29uc3Qgc2VlZD1hZXNKcy5wYWRkaW5nLnBrY3M3LnN0cmlwKGFycmF5aWZ5KGFlc0NiYy5kZWNyeXB0KGVuY3J5cHRlZFNlZWQpKSk7bGV0IHNlZWRIZXg9XCJcIjtmb3IobGV0IGk9MDtpPHNlZWQubGVuZ3RoO2krKyl7c2VlZEhleCs9U3RyaW5nLmZyb21DaGFyQ29kZShzZWVkW2ldKX1jb25zdCBzZWVkSGV4Qnl0ZXM9dG9VdGY4Qnl0ZXMoc2VlZEhleCk7Y29uc3QgcHJpdmF0ZUtleT1rZWNjYWsyNTYoc2VlZEhleEJ5dGVzKTtyZXR1cm4gbmV3IENyb3dkc2FsZUFjY291bnQoe19pc0Nyb3dkc2FsZUFjY291bnQ6dHJ1ZSxhZGRyZXNzOmV0aGFkZHIscHJpdmF0ZUtleTpwcml2YXRlS2V5fSl9XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaXNDcm93ZHNhbGVXYWxsZXQoanNvbil7bGV0IGRhdGE9bnVsbDt0cnl7ZGF0YT1KU09OLnBhcnNlKGpzb24pfWNhdGNoKGVycm9yKXtyZXR1cm4gZmFsc2V9cmV0dXJuIGRhdGEuZW5jc2VlZCYmZGF0YS5ldGhhZGRyfWZ1bmN0aW9uIGlzS2V5c3RvcmVXYWxsZXQoanNvbil7bGV0IGRhdGE9bnVsbDt0cnl7ZGF0YT1KU09OLnBhcnNlKGpzb24pfWNhdGNoKGVycm9yKXtyZXR1cm4gZmFsc2V9aWYoIWRhdGEudmVyc2lvbnx8cGFyc2VJbnQoZGF0YS52ZXJzaW9uKSE9PWRhdGEudmVyc2lvbnx8cGFyc2VJbnQoZGF0YS52ZXJzaW9uKSE9PTMpe3JldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX1mdW5jdGlvbiBnZXRKc29uV2FsbGV0QWRkcmVzcyhqc29uKXtpZihpc0Nyb3dkc2FsZVdhbGxldChqc29uKSl7dHJ5e3JldHVybiBnZXRBZGRyZXNzKEpTT04ucGFyc2UoanNvbikuZXRoYWRkcil9Y2F0Y2goZXJyb3Ipe3JldHVybiBudWxsfX1pZihpc0tleXN0b3JlV2FsbGV0KGpzb24pKXt0cnl7cmV0dXJuIGdldEFkZHJlc3MoSlNPTi5wYXJzZShqc29uKS5hZGRyZXNzKX1jYXRjaChlcnJvcil7cmV0dXJuIG51bGx9fXJldHVybiBudWxsfXZhciBzY3J5cHQ9Y3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe1widXNlIHN0cmljdFwiOyhmdW5jdGlvbihyb290KXtjb25zdCBNQVhfVkFMVUU9MjE0NzQ4MzY0NztmdW5jdGlvbiBTSEEyNTYobSl7Y29uc3QgSz1uZXcgVWludDMyQXJyYXkoWzExMTYzNTI0MDgsMTg5OTQ0NzQ0MSwzMDQ5MzIzNDcxLDM5MjEwMDk1NzMsOTYxOTg3MTYzLDE1MDg5NzA5OTMsMjQ1MzYzNTc0OCwyODcwNzYzMjIxLDM2MjQzODEwODAsMzEwNTk4NDAxLDYwNzIyNTI3OCwxNDI2ODgxOTg3LDE5MjUwNzgzODgsMjE2MjA3ODIwNiwyNjE0ODg4MTAzLDMyNDgyMjI1ODAsMzgzNTM5MDQwMSw0MDIyMjI0Nzc0LDI2NDM0NzA3OCw2MDQ4MDc2MjgsNzcwMjU1OTgzLDEyNDkxNTAxMjIsMTU1NTA4MTY5MiwxOTk2MDY0OTg2LDI1NTQyMjA4ODIsMjgyMTgzNDM0OSwyOTUyOTk2ODA4LDMyMTAzMTM2NzEsMzMzNjU3MTg5MSwzNTg0NTI4NzExLDExMzkyNjk5MywzMzgyNDE4OTUsNjY2MzA3MjA1LDc3MzUyOTkxMiwxMjk0NzU3MzcyLDEzOTYxODIyOTEsMTY5NTE4MzcwMCwxOTg2NjYxMDUxLDIxNzcwMjYzNTAsMjQ1Njk1NjAzNywyNzMwNDg1OTIxLDI4MjAzMDI0MTEsMzI1OTczMDgwMCwzMzQ1NzY0NzcxLDM1MTYwNjU4MTcsMzYwMDM1MjgwNCw0MDk0NTcxOTA5LDI3NTQyMzM0NCw0MzAyMjc3MzQsNTA2OTQ4NjE2LDY1OTA2MDU1Niw4ODM5OTc4NzcsOTU4MTM5NTcxLDEzMjI4MjIyMTgsMTUzNzAwMjA2MywxNzQ3ODczNzc5LDE5NTU1NjIyMjIsMjAyNDEwNDgxNSwyMjI3NzMwNDUyLDIzNjE4NTI0MjQsMjQyODQzNjQ3NCwyNzU2NzM0MTg3LDMyMDQwMzE0NzksMzMyOTMyNTI5OF0pO2xldCBoMD0xNzc5MDMzNzAzLGgxPTMxNDQxMzQyNzcsaDI9MTAxMzkwNDI0MixoMz0yNzczNDgwNzYyO2xldCBoND0xMzU5ODkzMTE5LGg1PTI2MDA4MjI5MjQsaDY9NTI4NzM0NjM1LGg3PTE1NDE0NTkyMjU7Y29uc3Qgdz1uZXcgVWludDMyQXJyYXkoNjQpO2Z1bmN0aW9uIGJsb2NrcyhwKXtsZXQgb2ZmPTAsbGVuPXAubGVuZ3RoO3doaWxlKGxlbj49NjQpe2xldCBhPWgwLGI9aDEsYz1oMixkPWgzLGU9aDQsZj1oNSxnPWg2LGg9aDcsdSxpLGosdDEsdDI7Zm9yKGk9MDtpPDE2O2krKyl7aj1vZmYraSo0O3dbaV09KHBbal0mMjU1KTw8MjR8KHBbaisxXSYyNTUpPDwxNnwocFtqKzJdJjI1NSk8PDh8cFtqKzNdJjI1NX1mb3IoaT0xNjtpPDY0O2krKyl7dT13W2ktMl07dDE9KHU+Pj4xN3x1PDwzMi0xNyleKHU+Pj4xOXx1PDwzMi0xOSledT4+PjEwO3U9d1tpLTE1XTt0Mj0odT4+Pjd8dTw8MzItNyleKHU+Pj4xOHx1PDwzMi0xOCledT4+PjM7d1tpXT0odDErd1tpLTddfDApKyh0Mit3W2ktMTZdfDApfDB9Zm9yKGk9MDtpPDY0O2krKyl7dDE9KCgoZT4+PjZ8ZTw8MzItNileKGU+Pj4xMXxlPDwzMi0xMSleKGU+Pj4yNXxlPDwzMi0yNSkpKyhlJmZefmUmZyl8MCkrKGgrKEtbaV0rd1tpXXwwKXwwKXwwO3QyPSgoYT4+PjJ8YTw8MzItMileKGE+Pj4xM3xhPDwzMi0xMyleKGE+Pj4yMnxhPDwzMi0yMikpKyhhJmJeYSZjXmImYyl8MDtoPWc7Zz1mO2Y9ZTtlPWQrdDF8MDtkPWM7Yz1iO2I9YTthPXQxK3QyfDB9aDA9aDArYXwwO2gxPWgxK2J8MDtoMj1oMitjfDA7aDM9aDMrZHwwO2g0PWg0K2V8MDtoNT1oNStmfDA7aDY9aDYrZ3wwO2g3PWg3K2h8MDtvZmYrPTY0O2xlbi09NjR9fWJsb2NrcyhtKTtsZXQgaSxieXRlc0xlZnQ9bS5sZW5ndGglNjQsYml0TGVuSGk9bS5sZW5ndGgvNTM2ODcwOTEyfDAsYml0TGVuTG89bS5sZW5ndGg8PDMsbnVtWmVyb3M9Ynl0ZXNMZWZ0PDU2PzU2OjEyMCxwPW0uc2xpY2UobS5sZW5ndGgtYnl0ZXNMZWZ0LG0ubGVuZ3RoKTtwLnB1c2goMTI4KTtmb3IoaT1ieXRlc0xlZnQrMTtpPG51bVplcm9zO2krKyl7cC5wdXNoKDApfXAucHVzaChiaXRMZW5IaT4+PjI0JjI1NSk7cC5wdXNoKGJpdExlbkhpPj4+MTYmMjU1KTtwLnB1c2goYml0TGVuSGk+Pj44JjI1NSk7cC5wdXNoKGJpdExlbkhpPj4+MCYyNTUpO3AucHVzaChiaXRMZW5Mbz4+PjI0JjI1NSk7cC5wdXNoKGJpdExlbkxvPj4+MTYmMjU1KTtwLnB1c2goYml0TGVuTG8+Pj44JjI1NSk7cC5wdXNoKGJpdExlbkxvPj4+MCYyNTUpO2Jsb2NrcyhwKTtyZXR1cm5baDA+Pj4yNCYyNTUsaDA+Pj4xNiYyNTUsaDA+Pj44JjI1NSxoMD4+PjAmMjU1LGgxPj4+MjQmMjU1LGgxPj4+MTYmMjU1LGgxPj4+OCYyNTUsaDE+Pj4wJjI1NSxoMj4+PjI0JjI1NSxoMj4+PjE2JjI1NSxoMj4+PjgmMjU1LGgyPj4+MCYyNTUsaDM+Pj4yNCYyNTUsaDM+Pj4xNiYyNTUsaDM+Pj44JjI1NSxoMz4+PjAmMjU1LGg0Pj4+MjQmMjU1LGg0Pj4+MTYmMjU1LGg0Pj4+OCYyNTUsaDQ+Pj4wJjI1NSxoNT4+PjI0JjI1NSxoNT4+PjE2JjI1NSxoNT4+PjgmMjU1LGg1Pj4+MCYyNTUsaDY+Pj4yNCYyNTUsaDY+Pj4xNiYyNTUsaDY+Pj44JjI1NSxoNj4+PjAmMjU1LGg3Pj4+MjQmMjU1LGg3Pj4+MTYmMjU1LGg3Pj4+OCYyNTUsaDc+Pj4wJjI1NV19ZnVuY3Rpb24gUEJLREYyX0hNQUNfU0hBMjU2X09uZUl0ZXIocGFzc3dvcmQsc2FsdCxka0xlbil7cGFzc3dvcmQ9cGFzc3dvcmQubGVuZ3RoPD02ND9wYXNzd29yZDpTSEEyNTYocGFzc3dvcmQpO2NvbnN0IGlubmVyTGVuPTY0K3NhbHQubGVuZ3RoKzQ7Y29uc3QgaW5uZXI9bmV3IEFycmF5KGlubmVyTGVuKTtjb25zdCBvdXRlcktleT1uZXcgQXJyYXkoNjQpO2xldCBpO2xldCBkaz1bXTtmb3IoaT0wO2k8NjQ7aSsrKXtpbm5lcltpXT01NH1mb3IoaT0wO2k8cGFzc3dvcmQubGVuZ3RoO2krKyl7aW5uZXJbaV1ePXBhc3N3b3JkW2ldfWZvcihpPTA7aTxzYWx0Lmxlbmd0aDtpKyspe2lubmVyWzY0K2ldPXNhbHRbaV19Zm9yKGk9aW5uZXJMZW4tNDtpPGlubmVyTGVuO2krKyl7aW5uZXJbaV09MH1mb3IoaT0wO2k8NjQ7aSsrKW91dGVyS2V5W2ldPTkyO2ZvcihpPTA7aTxwYXNzd29yZC5sZW5ndGg7aSsrKW91dGVyS2V5W2ldXj1wYXNzd29yZFtpXTtmdW5jdGlvbiBpbmNyZW1lbnRDb3VudGVyKCl7Zm9yKGxldCBpPWlubmVyTGVuLTE7aT49aW5uZXJMZW4tNDtpLS0pe2lubmVyW2ldKys7aWYoaW5uZXJbaV08PTI1NSlyZXR1cm47aW5uZXJbaV09MH19d2hpbGUoZGtMZW4+PTMyKXtpbmNyZW1lbnRDb3VudGVyKCk7ZGs9ZGsuY29uY2F0KFNIQTI1NihvdXRlcktleS5jb25jYXQoU0hBMjU2KGlubmVyKSkpKTtka0xlbi09MzJ9aWYoZGtMZW4+MCl7aW5jcmVtZW50Q291bnRlcigpO2RrPWRrLmNvbmNhdChTSEEyNTYob3V0ZXJLZXkuY29uY2F0KFNIQTI1Nihpbm5lcikpKS5zbGljZSgwLGRrTGVuKSl9cmV0dXJuIGRrfWZ1bmN0aW9uIGJsb2NrbWl4X3NhbHNhOChCWSxZaSxyLHgsX1gpe2xldCBpO2FycmF5Y29weShCWSwoMipyLTEpKjE2LF9YLDAsMTYpO2ZvcihpPTA7aTwyKnI7aSsrKXtibG9ja3hvcihCWSxpKjE2LF9YLDE2KTtzYWxzYTIwXzgoX1gseCk7YXJyYXljb3B5KF9YLDAsQlksWWkraSoxNiwxNil9Zm9yKGk9MDtpPHI7aSsrKXthcnJheWNvcHkoQlksWWkraSoyKjE2LEJZLGkqMTYsMTYpfWZvcihpPTA7aTxyO2krKyl7YXJyYXljb3B5KEJZLFlpKyhpKjIrMSkqMTYsQlksKGkrcikqMTYsMTYpfX1mdW5jdGlvbiBSKGEsYil7cmV0dXJuIGE8PGJ8YT4+PjMyLWJ9ZnVuY3Rpb24gc2Fsc2EyMF84KEIseCl7YXJyYXljb3B5KEIsMCx4LDAsMTYpO2ZvcihsZXQgaT04O2k+MDtpLT0yKXt4WzRdXj1SKHhbMF0reFsxMl0sNyk7eFs4XV49Uih4WzRdK3hbMF0sOSk7eFsxMl1ePVIoeFs4XSt4WzRdLDEzKTt4WzBdXj1SKHhbMTJdK3hbOF0sMTgpO3hbOV1ePVIoeFs1XSt4WzFdLDcpO3hbMTNdXj1SKHhbOV0reFs1XSw5KTt4WzFdXj1SKHhbMTNdK3hbOV0sMTMpO3hbNV1ePVIoeFsxXSt4WzEzXSwxOCk7eFsxNF1ePVIoeFsxMF0reFs2XSw3KTt4WzJdXj1SKHhbMTRdK3hbMTBdLDkpO3hbNl1ePVIoeFsyXSt4WzE0XSwxMyk7eFsxMF1ePVIoeFs2XSt4WzJdLDE4KTt4WzNdXj1SKHhbMTVdK3hbMTFdLDcpO3hbN11ePVIoeFszXSt4WzE1XSw5KTt4WzExXV49Uih4WzddK3hbM10sMTMpO3hbMTVdXj1SKHhbMTFdK3hbN10sMTgpO3hbMV1ePVIoeFswXSt4WzNdLDcpO3hbMl1ePVIoeFsxXSt4WzBdLDkpO3hbM11ePVIoeFsyXSt4WzFdLDEzKTt4WzBdXj1SKHhbM10reFsyXSwxOCk7eFs2XV49Uih4WzVdK3hbNF0sNyk7eFs3XV49Uih4WzZdK3hbNV0sOSk7eFs0XV49Uih4WzddK3hbNl0sMTMpO3hbNV1ePVIoeFs0XSt4WzddLDE4KTt4WzExXV49Uih4WzEwXSt4WzldLDcpO3hbOF1ePVIoeFsxMV0reFsxMF0sOSk7eFs5XV49Uih4WzhdK3hbMTFdLDEzKTt4WzEwXV49Uih4WzldK3hbOF0sMTgpO3hbMTJdXj1SKHhbMTVdK3hbMTRdLDcpO3hbMTNdXj1SKHhbMTJdK3hbMTVdLDkpO3hbMTRdXj1SKHhbMTNdK3hbMTJdLDEzKTt4WzE1XV49Uih4WzE0XSt4WzEzXSwxOCl9Zm9yKGxldCBpPTA7aTwxNjsrK2kpe0JbaV0rPXhbaV19fWZ1bmN0aW9uIGJsb2NreG9yKFMsU2ksRCxsZW4pe2ZvcihsZXQgaT0wO2k8bGVuO2krKyl7RFtpXV49U1tTaStpXX19ZnVuY3Rpb24gYXJyYXljb3B5KHNyYyxzcmNQb3MsZGVzdCxkZXN0UG9zLGxlbmd0aCl7d2hpbGUobGVuZ3RoLS0pe2Rlc3RbZGVzdFBvcysrXT1zcmNbc3JjUG9zKytdfX1mdW5jdGlvbiBjaGVja0J1ZmZlcmlzaChvKXtpZighb3x8dHlwZW9mIG8ubGVuZ3RoIT09XCJudW1iZXJcIil7cmV0dXJuIGZhbHNlfWZvcihsZXQgaT0wO2k8by5sZW5ndGg7aSsrKXtjb25zdCB2PW9baV07aWYodHlwZW9mIHYhPT1cIm51bWJlclwifHx2JTF8fHY8MHx8dj49MjU2KXtyZXR1cm4gZmFsc2V9fXJldHVybiB0cnVlfWZ1bmN0aW9uIGVuc3VyZUludGVnZXIodmFsdWUsbmFtZSl7aWYodHlwZW9mIHZhbHVlIT09XCJudW1iZXJcInx8dmFsdWUlMSl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBcIituYW1lKX1yZXR1cm4gdmFsdWV9ZnVuY3Rpb24gX3NjcnlwdChwYXNzd29yZCxzYWx0LE4scixwLGRrTGVuLGNhbGxiYWNrKXtOPWVuc3VyZUludGVnZXIoTixcIk5cIik7cj1lbnN1cmVJbnRlZ2VyKHIsXCJyXCIpO3A9ZW5zdXJlSW50ZWdlcihwLFwicFwiKTtka0xlbj1lbnN1cmVJbnRlZ2VyKGRrTGVuLFwiZGtMZW5cIik7aWYoTj09PTB8fChOJk4tMSkhPT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJOIG11c3QgYmUgcG93ZXIgb2YgMlwiKX1pZihOPk1BWF9WQUxVRS8xMjgvcil7dGhyb3cgbmV3IEVycm9yKFwiTiB0b28gbGFyZ2VcIil9aWYocj5NQVhfVkFMVUUvMTI4L3Ape3Rocm93IG5ldyBFcnJvcihcInIgdG9vIGxhcmdlXCIpfWlmKCFjaGVja0J1ZmZlcmlzaChwYXNzd29yZCkpe3Rocm93IG5ldyBFcnJvcihcInBhc3N3b3JkIG11c3QgYmUgYW4gYXJyYXkgb3IgYnVmZmVyXCIpfXBhc3N3b3JkPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHBhc3N3b3JkKTtpZighY2hlY2tCdWZmZXJpc2goc2FsdCkpe3Rocm93IG5ldyBFcnJvcihcInNhbHQgbXVzdCBiZSBhbiBhcnJheSBvciBidWZmZXJcIil9c2FsdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzYWx0KTtsZXQgYj1QQktERjJfSE1BQ19TSEEyNTZfT25lSXRlcihwYXNzd29yZCxzYWx0LHAqMTI4KnIpO2NvbnN0IEI9bmV3IFVpbnQzMkFycmF5KHAqMzIqcik7Zm9yKGxldCBpPTA7aTxCLmxlbmd0aDtpKyspe2NvbnN0IGo9aSo0O0JbaV09KGJbaiszXSYyNTUpPDwyNHwoYltqKzJdJjI1NSk8PDE2fChiW2orMV0mMjU1KTw8OHwoYltqKzBdJjI1NSk8PDB9Y29uc3QgWFk9bmV3IFVpbnQzMkFycmF5KDY0KnIpO2NvbnN0IFY9bmV3IFVpbnQzMkFycmF5KDMyKnIqTik7Y29uc3QgWWk9MzIqcjtjb25zdCB4PW5ldyBVaW50MzJBcnJheSgxNik7Y29uc3QgX1g9bmV3IFVpbnQzMkFycmF5KDE2KTtjb25zdCB0b3RhbE9wcz1wKk4qMjtsZXQgY3VycmVudE9wPTA7bGV0IGxhc3RQZXJjZW50MTA9bnVsbDtsZXQgc3RvcD1mYWxzZTtsZXQgc3RhdGU9MDtsZXQgaTA9MCxpMTtsZXQgQmk7Y29uc3QgbGltaXQ9Y2FsbGJhY2s/cGFyc2VJbnQoMWUzL3IpOjQyOTQ5NjcyOTU7Y29uc3QgbmV4dFRpY2s9dHlwZW9mIHNldEltbWVkaWF0ZSE9PVwidW5kZWZpbmVkXCI/c2V0SW1tZWRpYXRlOnNldFRpbWVvdXQ7Y29uc3QgaW5jcmVtZW50YWxTTWl4PWZ1bmN0aW9uKCl7aWYoc3RvcCl7cmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcImNhbmNlbGxlZFwiKSxjdXJyZW50T3AvdG90YWxPcHMpfWxldCBzdGVwcztzd2l0Y2goc3RhdGUpe2Nhc2UgMDpCaT1pMCozMipyO2FycmF5Y29weShCLEJpLFhZLDAsWWkpO3N0YXRlPTE7aTE9MDtjYXNlIDE6c3RlcHM9Ti1pMTtpZihzdGVwcz5saW1pdCl7c3RlcHM9bGltaXR9Zm9yKGxldCBpPTA7aTxzdGVwcztpKyspe2FycmF5Y29weShYWSwwLFYsKGkxK2kpKllpLFlpKTtibG9ja21peF9zYWxzYTgoWFksWWkscix4LF9YKX1pMSs9c3RlcHM7Y3VycmVudE9wKz1zdGVwcztpZihjYWxsYmFjayl7Y29uc3QgcGVyY2VudDEwPXBhcnNlSW50KDFlMypjdXJyZW50T3AvdG90YWxPcHMpO2lmKHBlcmNlbnQxMCE9PWxhc3RQZXJjZW50MTApe3N0b3A9Y2FsbGJhY2sobnVsbCxjdXJyZW50T3AvdG90YWxPcHMpO2lmKHN0b3Ape2JyZWFrfWxhc3RQZXJjZW50MTA9cGVyY2VudDEwfX1pZihpMTxOKXticmVha31pMT0wO3N0YXRlPTI7Y2FzZSAyOnN0ZXBzPU4taTE7aWYoc3RlcHM+bGltaXQpe3N0ZXBzPWxpbWl0fWZvcihsZXQgaT0wO2k8c3RlcHM7aSsrKXtjb25zdCBvZmZzZXQ9KDIqci0xKSoxNjtjb25zdCBqPVhZW29mZnNldF0mTi0xO2Jsb2NreG9yKFYsaipZaSxYWSxZaSk7YmxvY2ttaXhfc2Fsc2E4KFhZLFlpLHIseCxfWCl9aTErPXN0ZXBzO2N1cnJlbnRPcCs9c3RlcHM7aWYoY2FsbGJhY2spe2NvbnN0IHBlcmNlbnQxMD1wYXJzZUludCgxZTMqY3VycmVudE9wL3RvdGFsT3BzKTtpZihwZXJjZW50MTAhPT1sYXN0UGVyY2VudDEwKXtzdG9wPWNhbGxiYWNrKG51bGwsY3VycmVudE9wL3RvdGFsT3BzKTtpZihzdG9wKXticmVha31sYXN0UGVyY2VudDEwPXBlcmNlbnQxMH19aWYoaTE8Til7YnJlYWt9YXJyYXljb3B5KFhZLDAsQixCaSxZaSk7aTArKztpZihpMDxwKXtzdGF0ZT0wO2JyZWFrfWI9W107Zm9yKGxldCBpPTA7aTxCLmxlbmd0aDtpKyspe2IucHVzaChCW2ldPj4wJjI1NSk7Yi5wdXNoKEJbaV0+PjgmMjU1KTtiLnB1c2goQltpXT4+MTYmMjU1KTtiLnB1c2goQltpXT4+MjQmMjU1KX1jb25zdCBkZXJpdmVkS2V5PVBCS0RGMl9ITUFDX1NIQTI1Nl9PbmVJdGVyKHBhc3N3b3JkLGIsZGtMZW4pO2lmKGNhbGxiYWNrKXtjYWxsYmFjayhudWxsLDEsZGVyaXZlZEtleSl9cmV0dXJuIGRlcml2ZWRLZXl9aWYoY2FsbGJhY2spe25leHRUaWNrKGluY3JlbWVudGFsU01peCl9fTtpZighY2FsbGJhY2spe3doaWxlKHRydWUpe2NvbnN0IGRlcml2ZWRLZXk9aW5jcmVtZW50YWxTTWl4KCk7aWYoZGVyaXZlZEtleSE9dW5kZWZpbmVkKXtyZXR1cm4gZGVyaXZlZEtleX19fWluY3JlbWVudGFsU01peCgpfWNvbnN0IGxpYj17c2NyeXB0OmZ1bmN0aW9uKHBhc3N3b3JkLHNhbHQsTixyLHAsZGtMZW4scHJvZ3Jlc3NDYWxsYmFjayl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtsZXQgbGFzdFByb2dyZXNzPTA7aWYocHJvZ3Jlc3NDYWxsYmFjayl7cHJvZ3Jlc3NDYWxsYmFjaygwKX1fc2NyeXB0KHBhc3N3b3JkLHNhbHQsTixyLHAsZGtMZW4sZnVuY3Rpb24oZXJyb3IscHJvZ3Jlc3Msa2V5KXtpZihlcnJvcil7cmVqZWN0KGVycm9yKX1lbHNlIGlmKGtleSl7aWYocHJvZ3Jlc3NDYWxsYmFjayYmbGFzdFByb2dyZXNzIT09MSl7cHJvZ3Jlc3NDYWxsYmFjaygxKX1yZXNvbHZlKG5ldyBVaW50OEFycmF5KGtleSkpfWVsc2UgaWYocHJvZ3Jlc3NDYWxsYmFjayYmcHJvZ3Jlc3MhPT1sYXN0UHJvZ3Jlc3Mpe2xhc3RQcm9ncmVzcz1wcm9ncmVzcztyZXR1cm4gcHJvZ3Jlc3NDYWxsYmFjayhwcm9ncmVzcyl9fSl9KX0sc3luY1NjcnlwdDpmdW5jdGlvbihwYXNzd29yZCxzYWx0LE4scixwLGRrTGVuKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoX3NjcnlwdChwYXNzd29yZCxzYWx0LE4scixwLGRrTGVuKSl9fTtpZihcIm9iamVjdFwiIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9bGlifWVsc2UgaWYodHlwZW9mIHVuZGVmaW5lZD09PVwiZnVuY3Rpb25cIiYmdW5kZWZpbmVkLmFtZCl7dW5kZWZpbmVkKGxpYil9ZWxzZSBpZihyb290KXtpZihyb290LnNjcnlwdCl7cm9vdC5fc2NyeXB0PXJvb3Quc2NyeXB0fXJvb3Quc2NyeXB0PWxpYn19KShjb21tb25qc0dsb2JhbCl9KTtcInVzZSBzdHJpY3RcIjt2YXIgX19hd2FpdGVyJDQ9d2luZG93JiZ3aW5kb3cuX19hd2FpdGVyfHxmdW5jdGlvbih0aGlzQXJnLF9hcmd1bWVudHMsUCxnZW5lcmF0b3Ipe2Z1bmN0aW9uIGFkb3B0KHZhbHVlKXtyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQP3ZhbHVlOm5ldyBQKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUodmFsdWUpfSl9cmV0dXJuIG5ldyhQfHwoUD1Qcm9taXNlKSkoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe2Z1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gc3RlcChyZXN1bHQpe3Jlc3VsdC5kb25lP3Jlc29sdmUocmVzdWx0LnZhbHVlKTphZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLHJlamVjdGVkKX1zdGVwKChnZW5lcmF0b3I9Z2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsX2FyZ3VtZW50c3x8W10pKS5uZXh0KCkpfSl9O2NvbnN0IGxvZ2dlciRvPW5ldyBMb2dnZXIodmVyc2lvbiRpKTtmdW5jdGlvbiBoYXNNbmVtb25pYyh2YWx1ZSl7cmV0dXJuIHZhbHVlIT1udWxsJiZ2YWx1ZS5tbmVtb25pYyYmdmFsdWUubW5lbW9uaWMucGhyYXNlfWNsYXNzIEtleXN0b3JlQWNjb3VudCBleHRlbmRzIERlc2NyaXB0aW9ue2lzS2V5c3RvcmVBY2NvdW50KHZhbHVlKXtyZXR1cm4hISh2YWx1ZSYmdmFsdWUuX2lzS2V5c3RvcmVBY2NvdW50KX19ZnVuY3Rpb24gX2RlY3J5cHQoZGF0YSxrZXksY2lwaGVydGV4dCl7Y29uc3QgY2lwaGVyPXNlYXJjaFBhdGgoZGF0YSxcImNyeXB0by9jaXBoZXJcIik7aWYoY2lwaGVyPT09XCJhZXMtMTI4LWN0clwiKXtjb25zdCBpdj1sb29zZUFycmF5aWZ5KHNlYXJjaFBhdGgoZGF0YSxcImNyeXB0by9jaXBoZXJwYXJhbXMvaXZcIikpO2NvbnN0IGNvdW50ZXI9bmV3IGFlc0pzLkNvdW50ZXIoaXYpO2NvbnN0IGFlc0N0cj1uZXcgYWVzSnMuTW9kZU9mT3BlcmF0aW9uLmN0cihrZXksY291bnRlcik7cmV0dXJuIGFycmF5aWZ5KGFlc0N0ci5kZWNyeXB0KGNpcGhlcnRleHQpKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBfZ2V0QWNjb3VudChkYXRhLGtleSl7Y29uc3QgY2lwaGVydGV4dD1sb29zZUFycmF5aWZ5KHNlYXJjaFBhdGgoZGF0YSxcImNyeXB0by9jaXBoZXJ0ZXh0XCIpKTtjb25zdCBjb21wdXRlZE1BQz1oZXhsaWZ5KGtlY2NhazI1Nihjb25jYXQoW2tleS5zbGljZSgxNiwzMiksY2lwaGVydGV4dF0pKSkuc3Vic3RyaW5nKDIpO2lmKGNvbXB1dGVkTUFDIT09c2VhcmNoUGF0aChkYXRhLFwiY3J5cHRvL21hY1wiKS50b0xvd2VyQ2FzZSgpKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBhc3N3b3JkXCIpfWNvbnN0IHByaXZhdGVLZXk9X2RlY3J5cHQoZGF0YSxrZXkuc2xpY2UoMCwxNiksY2lwaGVydGV4dCk7aWYoIXByaXZhdGVLZXkpe2xvZ2dlciRvLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCBjaXBoZXJcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwiZGVjcnlwdFwifSl9Y29uc3QgbW5lbW9uaWNLZXk9a2V5LnNsaWNlKDMyLDY0KTtjb25zdCBhZGRyZXNzPWNvbXB1dGVBZGRyZXNzKHByaXZhdGVLZXkpO2lmKGRhdGEuYWRkcmVzcyl7bGV0IGNoZWNrPWRhdGEuYWRkcmVzcy50b0xvd2VyQ2FzZSgpO2lmKGNoZWNrLnN1YnN0cmluZygwLDIpIT09XCIweFwiKXtjaGVjaz1cIjB4XCIrY2hlY2t9aWYoZ2V0QWRkcmVzcyhjaGVjaykhPT1hZGRyZXNzKXt0aHJvdyBuZXcgRXJyb3IoXCJhZGRyZXNzIG1pc21hdGNoXCIpfX1jb25zdCBhY2NvdW50PXtfaXNLZXlzdG9yZUFjY291bnQ6dHJ1ZSxhZGRyZXNzOmFkZHJlc3MscHJpdmF0ZUtleTpoZXhsaWZ5KHByaXZhdGVLZXkpfTtpZihzZWFyY2hQYXRoKGRhdGEsXCJ4LWV0aGVycy92ZXJzaW9uXCIpPT09XCIwLjFcIil7Y29uc3QgbW5lbW9uaWNDaXBoZXJ0ZXh0PWxvb3NlQXJyYXlpZnkoc2VhcmNoUGF0aChkYXRhLFwieC1ldGhlcnMvbW5lbW9uaWNDaXBoZXJ0ZXh0XCIpKTtjb25zdCBtbmVtb25pY0l2PWxvb3NlQXJyYXlpZnkoc2VhcmNoUGF0aChkYXRhLFwieC1ldGhlcnMvbW5lbW9uaWNDb3VudGVyXCIpKTtjb25zdCBtbmVtb25pY0NvdW50ZXI9bmV3IGFlc0pzLkNvdW50ZXIobW5lbW9uaWNJdik7Y29uc3QgbW5lbW9uaWNBZXNDdHI9bmV3IGFlc0pzLk1vZGVPZk9wZXJhdGlvbi5jdHIobW5lbW9uaWNLZXksbW5lbW9uaWNDb3VudGVyKTtjb25zdCBwYXRoPXNlYXJjaFBhdGgoZGF0YSxcIngtZXRoZXJzL3BhdGhcIil8fGRlZmF1bHRQYXRoO2NvbnN0IGxvY2FsZT1zZWFyY2hQYXRoKGRhdGEsXCJ4LWV0aGVycy9sb2NhbGVcIil8fFwiZW5cIjtjb25zdCBlbnRyb3B5PWFycmF5aWZ5KG1uZW1vbmljQWVzQ3RyLmRlY3J5cHQobW5lbW9uaWNDaXBoZXJ0ZXh0KSk7dHJ5e2NvbnN0IG1uZW1vbmljPWVudHJvcHlUb01uZW1vbmljKGVudHJvcHksbG9jYWxlKTtjb25zdCBub2RlPUhETm9kZS5mcm9tTW5lbW9uaWMobW5lbW9uaWMsbnVsbCxsb2NhbGUpLmRlcml2ZVBhdGgocGF0aCk7aWYobm9kZS5wcml2YXRlS2V5IT1hY2NvdW50LnByaXZhdGVLZXkpe3Rocm93IG5ldyBFcnJvcihcIm1uZW1vbmljIG1pc21hdGNoXCIpfWFjY291bnQubW5lbW9uaWM9bm9kZS5tbmVtb25pY31jYXRjaChlcnJvcil7aWYoZXJyb3IuY29kZSE9PUxvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVHx8ZXJyb3IuYXJndW1lbnQhPT1cIndvcmRsaXN0XCIpe3Rocm93IGVycm9yfX19cmV0dXJuIG5ldyBLZXlzdG9yZUFjY291bnQoYWNjb3VudCl9ZnVuY3Rpb24gcGJrZGYyU3luYyhwYXNzd29yZEJ5dGVzLHNhbHQsY291bnQsZGtMZW4scHJmRnVuYyl7cmV0dXJuIGFycmF5aWZ5KHBia2RmMihwYXNzd29yZEJ5dGVzLHNhbHQsY291bnQsZGtMZW4scHJmRnVuYykpfWZ1bmN0aW9uIHBia2RmMiQxKHBhc3N3b3JkQnl0ZXMsc2FsdCxjb3VudCxka0xlbixwcmZGdW5jKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBia2RmMlN5bmMocGFzc3dvcmRCeXRlcyxzYWx0LGNvdW50LGRrTGVuLHByZkZ1bmMpKX1mdW5jdGlvbiBfY29tcHV0ZUtkZktleShkYXRhLHBhc3N3b3JkLHBia2RmMkZ1bmMsc2NyeXB0RnVuYyxwcm9ncmVzc0NhbGxiYWNrKXtjb25zdCBwYXNzd29yZEJ5dGVzPWdldFBhc3N3b3JkKHBhc3N3b3JkKTtjb25zdCBrZGY9c2VhcmNoUGF0aChkYXRhLFwiY3J5cHRvL2tkZlwiKTtpZihrZGYmJnR5cGVvZiBrZGY9PT1cInN0cmluZ1wiKXtjb25zdCB0aHJvd0Vycm9yPWZ1bmN0aW9uKG5hbWUsdmFsdWUpe3JldHVybiBsb2dnZXIkby50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGtleS1kZXJpdmF0aW9uIGZ1bmN0aW9uIHBhcmFtZXRlcnNcIixuYW1lLHZhbHVlKX07aWYoa2RmLnRvTG93ZXJDYXNlKCk9PT1cInNjcnlwdFwiKXtjb25zdCBzYWx0PWxvb3NlQXJyYXlpZnkoc2VhcmNoUGF0aChkYXRhLFwiY3J5cHRvL2tkZnBhcmFtcy9zYWx0XCIpKTtjb25zdCBOPXBhcnNlSW50KHNlYXJjaFBhdGgoZGF0YSxcImNyeXB0by9rZGZwYXJhbXMvblwiKSk7Y29uc3Qgcj1wYXJzZUludChzZWFyY2hQYXRoKGRhdGEsXCJjcnlwdG8va2RmcGFyYW1zL3JcIikpO2NvbnN0IHA9cGFyc2VJbnQoc2VhcmNoUGF0aChkYXRhLFwiY3J5cHRvL2tkZnBhcmFtcy9wXCIpKTtpZighTnx8IXJ8fCFwKXt0aHJvd0Vycm9yKFwia2RmXCIsa2RmKX1pZigoTiZOLTEpIT09MCl7dGhyb3dFcnJvcihcIk5cIixOKX1jb25zdCBka0xlbj1wYXJzZUludChzZWFyY2hQYXRoKGRhdGEsXCJjcnlwdG8va2RmcGFyYW1zL2RrbGVuXCIpKTtpZihka0xlbiE9PTMyKXt0aHJvd0Vycm9yKFwiZGtsZW5cIixka0xlbil9cmV0dXJuIHNjcnlwdEZ1bmMocGFzc3dvcmRCeXRlcyxzYWx0LE4scixwLDY0LHByb2dyZXNzQ2FsbGJhY2spfWVsc2UgaWYoa2RmLnRvTG93ZXJDYXNlKCk9PT1cInBia2RmMlwiKXtjb25zdCBzYWx0PWxvb3NlQXJyYXlpZnkoc2VhcmNoUGF0aChkYXRhLFwiY3J5cHRvL2tkZnBhcmFtcy9zYWx0XCIpKTtsZXQgcHJmRnVuYz1udWxsO2NvbnN0IHByZj1zZWFyY2hQYXRoKGRhdGEsXCJjcnlwdG8va2RmcGFyYW1zL3ByZlwiKTtpZihwcmY9PT1cImhtYWMtc2hhMjU2XCIpe3ByZkZ1bmM9XCJzaGEyNTZcIn1lbHNlIGlmKHByZj09PVwiaG1hYy1zaGE1MTJcIil7cHJmRnVuYz1cInNoYTUxMlwifWVsc2V7dGhyb3dFcnJvcihcInByZlwiLHByZil9Y29uc3QgY291bnQ9cGFyc2VJbnQoc2VhcmNoUGF0aChkYXRhLFwiY3J5cHRvL2tkZnBhcmFtcy9jXCIpKTtjb25zdCBka0xlbj1wYXJzZUludChzZWFyY2hQYXRoKGRhdGEsXCJjcnlwdG8va2RmcGFyYW1zL2RrbGVuXCIpKTtpZihka0xlbiE9PTMyKXt0aHJvd0Vycm9yKFwiZGtsZW5cIixka0xlbil9cmV0dXJuIHBia2RmMkZ1bmMocGFzc3dvcmRCeXRlcyxzYWx0LGNvdW50LGRrTGVuLHByZkZ1bmMpfX1yZXR1cm4gbG9nZ2VyJG8udGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQga2V5LWRlcml2YXRpb24gZnVuY3Rpb25cIixcImtkZlwiLGtkZil9ZnVuY3Rpb24gZGVjcnlwdFN5bmMoanNvbixwYXNzd29yZCl7Y29uc3QgZGF0YT1KU09OLnBhcnNlKGpzb24pO2NvbnN0IGtleT1fY29tcHV0ZUtkZktleShkYXRhLHBhc3N3b3JkLHBia2RmMlN5bmMsc2NyeXB0LnN5bmNTY3J5cHQpO3JldHVybiBfZ2V0QWNjb3VudChkYXRhLGtleSl9ZnVuY3Rpb24gZGVjcnlwdCQxKGpzb24scGFzc3dvcmQscHJvZ3Jlc3NDYWxsYmFjayl7cmV0dXJuIF9fYXdhaXRlciQ0KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBkYXRhPUpTT04ucGFyc2UoanNvbik7Y29uc3Qga2V5PXlpZWxkIF9jb21wdXRlS2RmS2V5KGRhdGEscGFzc3dvcmQscGJrZGYyJDEsc2NyeXB0LnNjcnlwdCxwcm9ncmVzc0NhbGxiYWNrKTtyZXR1cm4gX2dldEFjY291bnQoZGF0YSxrZXkpfSl9ZnVuY3Rpb24gZW5jcnlwdChhY2NvdW50LHBhc3N3b3JkLG9wdGlvbnMscHJvZ3Jlc3NDYWxsYmFjayl7dHJ5e2lmKGdldEFkZHJlc3MoYWNjb3VudC5hZGRyZXNzKSE9PWNvbXB1dGVBZGRyZXNzKGFjY291bnQucHJpdmF0ZUtleSkpe3Rocm93IG5ldyBFcnJvcihcImFkZHJlc3MvcHJpdmF0ZUtleSBtaXNtYXRjaFwiKX1pZihoYXNNbmVtb25pYyhhY2NvdW50KSl7Y29uc3QgbW5lbW9uaWM9YWNjb3VudC5tbmVtb25pYztjb25zdCBub2RlPUhETm9kZS5mcm9tTW5lbW9uaWMobW5lbW9uaWMucGhyYXNlLG51bGwsbW5lbW9uaWMubG9jYWxlKS5kZXJpdmVQYXRoKG1uZW1vbmljLnBhdGh8fGRlZmF1bHRQYXRoKTtpZihub2RlLnByaXZhdGVLZXkhPWFjY291bnQucHJpdmF0ZUtleSl7dGhyb3cgbmV3IEVycm9yKFwibW5lbW9uaWMgbWlzbWF0Y2hcIil9fX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9aWYodHlwZW9mIG9wdGlvbnM9PT1cImZ1bmN0aW9uXCImJiFwcm9ncmVzc0NhbGxiYWNrKXtwcm9ncmVzc0NhbGxiYWNrPW9wdGlvbnM7b3B0aW9ucz17fX1pZighb3B0aW9ucyl7b3B0aW9ucz17fX1jb25zdCBwcml2YXRlS2V5PWFycmF5aWZ5KGFjY291bnQucHJpdmF0ZUtleSk7Y29uc3QgcGFzc3dvcmRCeXRlcz1nZXRQYXNzd29yZChwYXNzd29yZCk7bGV0IGVudHJvcHk9bnVsbDtsZXQgcGF0aD1udWxsO2xldCBsb2NhbGU9bnVsbDtpZihoYXNNbmVtb25pYyhhY2NvdW50KSl7Y29uc3Qgc3JjTW5lbW9uaWM9YWNjb3VudC5tbmVtb25pYztlbnRyb3B5PWFycmF5aWZ5KG1uZW1vbmljVG9FbnRyb3B5KHNyY01uZW1vbmljLnBocmFzZSxzcmNNbmVtb25pYy5sb2NhbGV8fFwiZW5cIikpO3BhdGg9c3JjTW5lbW9uaWMucGF0aHx8ZGVmYXVsdFBhdGg7bG9jYWxlPXNyY01uZW1vbmljLmxvY2FsZXx8XCJlblwifWxldCBjbGllbnQ9b3B0aW9ucy5jbGllbnQ7aWYoIWNsaWVudCl7Y2xpZW50PVwiZXRoZXJzLmpzXCJ9bGV0IHNhbHQ9bnVsbDtpZihvcHRpb25zLnNhbHQpe3NhbHQ9YXJyYXlpZnkob3B0aW9ucy5zYWx0KX1lbHNle3NhbHQ9cmFuZG9tQnl0ZXMoMzIpfWxldCBpdj1udWxsO2lmKG9wdGlvbnMuaXYpe2l2PWFycmF5aWZ5KG9wdGlvbnMuaXYpO2lmKGl2Lmxlbmd0aCE9PTE2KXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGl2XCIpfX1lbHNle2l2PXJhbmRvbUJ5dGVzKDE2KX1sZXQgdXVpZFJhbmRvbT1udWxsO2lmKG9wdGlvbnMudXVpZCl7dXVpZFJhbmRvbT1hcnJheWlmeShvcHRpb25zLnV1aWQpO2lmKHV1aWRSYW5kb20ubGVuZ3RoIT09MTYpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgdXVpZFwiKX19ZWxzZXt1dWlkUmFuZG9tPXJhbmRvbUJ5dGVzKDE2KX1sZXQgTj0xPDwxNyxyPTgscD0xO2lmKG9wdGlvbnMuc2NyeXB0KXtpZihvcHRpb25zLnNjcnlwdC5OKXtOPW9wdGlvbnMuc2NyeXB0Lk59aWYob3B0aW9ucy5zY3J5cHQucil7cj1vcHRpb25zLnNjcnlwdC5yfWlmKG9wdGlvbnMuc2NyeXB0LnApe3A9b3B0aW9ucy5zY3J5cHQucH19cmV0dXJuIHNjcnlwdC5zY3J5cHQocGFzc3dvcmRCeXRlcyxzYWx0LE4scixwLDY0LHByb2dyZXNzQ2FsbGJhY2spLnRoZW4oa2V5PT57a2V5PWFycmF5aWZ5KGtleSk7Y29uc3QgZGVyaXZlZEtleT1rZXkuc2xpY2UoMCwxNik7Y29uc3QgbWFjUHJlZml4PWtleS5zbGljZSgxNiwzMik7Y29uc3QgbW5lbW9uaWNLZXk9a2V5LnNsaWNlKDMyLDY0KTtjb25zdCBjb3VudGVyPW5ldyBhZXNKcy5Db3VudGVyKGl2KTtjb25zdCBhZXNDdHI9bmV3IGFlc0pzLk1vZGVPZk9wZXJhdGlvbi5jdHIoZGVyaXZlZEtleSxjb3VudGVyKTtjb25zdCBjaXBoZXJ0ZXh0PWFycmF5aWZ5KGFlc0N0ci5lbmNyeXB0KHByaXZhdGVLZXkpKTtjb25zdCBtYWM9a2VjY2FrMjU2KGNvbmNhdChbbWFjUHJlZml4LGNpcGhlcnRleHRdKSk7Y29uc3QgZGF0YT17YWRkcmVzczphY2NvdW50LmFkZHJlc3Muc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCksaWQ6dXVpZFY0KHV1aWRSYW5kb20pLHZlcnNpb246MyxDcnlwdG86e2NpcGhlcjpcImFlcy0xMjgtY3RyXCIsY2lwaGVycGFyYW1zOntpdjpoZXhsaWZ5KGl2KS5zdWJzdHJpbmcoMil9LGNpcGhlcnRleHQ6aGV4bGlmeShjaXBoZXJ0ZXh0KS5zdWJzdHJpbmcoMiksa2RmOlwic2NyeXB0XCIsa2RmcGFyYW1zOntzYWx0OmhleGxpZnkoc2FsdCkuc3Vic3RyaW5nKDIpLG46Tixka2xlbjozMixwOnAscjpyfSxtYWM6bWFjLnN1YnN0cmluZygyKX19O2lmKGVudHJvcHkpe2NvbnN0IG1uZW1vbmljSXY9cmFuZG9tQnl0ZXMoMTYpO2NvbnN0IG1uZW1vbmljQ291bnRlcj1uZXcgYWVzSnMuQ291bnRlcihtbmVtb25pY0l2KTtjb25zdCBtbmVtb25pY0Flc0N0cj1uZXcgYWVzSnMuTW9kZU9mT3BlcmF0aW9uLmN0cihtbmVtb25pY0tleSxtbmVtb25pY0NvdW50ZXIpO2NvbnN0IG1uZW1vbmljQ2lwaGVydGV4dD1hcnJheWlmeShtbmVtb25pY0Flc0N0ci5lbmNyeXB0KGVudHJvcHkpKTtjb25zdCBub3c9bmV3IERhdGU7Y29uc3QgdGltZXN0YW1wPW5vdy5nZXRVVENGdWxsWWVhcigpK1wiLVwiK3pwYWQobm93LmdldFVUQ01vbnRoKCkrMSwyKStcIi1cIit6cGFkKG5vdy5nZXRVVENEYXRlKCksMikrXCJUXCIrenBhZChub3cuZ2V0VVRDSG91cnMoKSwyKStcIi1cIit6cGFkKG5vdy5nZXRVVENNaW51dGVzKCksMikrXCItXCIrenBhZChub3cuZ2V0VVRDU2Vjb25kcygpLDIpK1wiLjBaXCI7ZGF0YVtcIngtZXRoZXJzXCJdPXtjbGllbnQ6Y2xpZW50LGdldGhGaWxlbmFtZTpcIlVUQy0tXCIrdGltZXN0YW1wK1wiLS1cIitkYXRhLmFkZHJlc3MsbW5lbW9uaWNDb3VudGVyOmhleGxpZnkobW5lbW9uaWNJdikuc3Vic3RyaW5nKDIpLG1uZW1vbmljQ2lwaGVydGV4dDpoZXhsaWZ5KG1uZW1vbmljQ2lwaGVydGV4dCkuc3Vic3RyaW5nKDIpLHBhdGg6cGF0aCxsb2NhbGU6bG9jYWxlLHZlcnNpb246XCIwLjFcIn19cmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpfSl9XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZGVjcnlwdEpzb25XYWxsZXQoanNvbixwYXNzd29yZCxwcm9ncmVzc0NhbGxiYWNrKXtpZihpc0Nyb3dkc2FsZVdhbGxldChqc29uKSl7aWYocHJvZ3Jlc3NDYWxsYmFjayl7cHJvZ3Jlc3NDYWxsYmFjaygwKX1jb25zdCBhY2NvdW50PWRlY3J5cHQoanNvbixwYXNzd29yZCk7aWYocHJvZ3Jlc3NDYWxsYmFjayl7cHJvZ3Jlc3NDYWxsYmFjaygxKX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGFjY291bnQpfWlmKGlzS2V5c3RvcmVXYWxsZXQoanNvbikpe3JldHVybiBkZWNyeXB0JDEoanNvbixwYXNzd29yZCxwcm9ncmVzc0NhbGxiYWNrKX1yZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiaW52YWxpZCBKU09OIHdhbGxldFwiKSl9ZnVuY3Rpb24gZGVjcnlwdEpzb25XYWxsZXRTeW5jKGpzb24scGFzc3dvcmQpe2lmKGlzQ3Jvd2RzYWxlV2FsbGV0KGpzb24pKXtyZXR1cm4gZGVjcnlwdChqc29uLHBhc3N3b3JkKX1pZihpc0tleXN0b3JlV2FsbGV0KGpzb24pKXtyZXR1cm4gZGVjcnlwdFN5bmMoanNvbixwYXNzd29yZCl9dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBKU09OIHdhbGxldFwiKX1jb25zdCB2ZXJzaW9uJGo9XCJ3YWxsZXQvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjt2YXIgX19hd2FpdGVyJDU9d2luZG93JiZ3aW5kb3cuX19hd2FpdGVyfHxmdW5jdGlvbih0aGlzQXJnLF9hcmd1bWVudHMsUCxnZW5lcmF0b3Ipe2Z1bmN0aW9uIGFkb3B0KHZhbHVlKXtyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQP3ZhbHVlOm5ldyBQKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUodmFsdWUpfSl9cmV0dXJuIG5ldyhQfHwoUD1Qcm9taXNlKSkoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe2Z1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gc3RlcChyZXN1bHQpe3Jlc3VsdC5kb25lP3Jlc29sdmUocmVzdWx0LnZhbHVlKTphZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLHJlamVjdGVkKX1zdGVwKChnZW5lcmF0b3I9Z2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsX2FyZ3VtZW50c3x8W10pKS5uZXh0KCkpfSl9O2NvbnN0IGxvZ2dlciRwPW5ldyBMb2dnZXIodmVyc2lvbiRqKTtmdW5jdGlvbiBpc0FjY291bnQodmFsdWUpe3JldHVybiB2YWx1ZSE9bnVsbCYmaXNIZXhTdHJpbmcodmFsdWUucHJpdmF0ZUtleSwzMikmJnZhbHVlLmFkZHJlc3MhPW51bGx9ZnVuY3Rpb24gaGFzTW5lbW9uaWMkMSh2YWx1ZSl7Y29uc3QgbW5lbW9uaWM9dmFsdWUubW5lbW9uaWM7cmV0dXJuIG1uZW1vbmljJiZtbmVtb25pYy5waHJhc2V9Y2xhc3MgV2FsbGV0IGV4dGVuZHMgU2lnbmVye2NvbnN0cnVjdG9yKHByaXZhdGVLZXkscHJvdmlkZXIpe2xvZ2dlciRwLmNoZWNrTmV3KG5ldy50YXJnZXQsV2FsbGV0KTtzdXBlcigpO2lmKGlzQWNjb3VudChwcml2YXRlS2V5KSl7Y29uc3Qgc2lnbmluZ0tleT1uZXcgU2lnbmluZ0tleShwcml2YXRlS2V5LnByaXZhdGVLZXkpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfc2lnbmluZ0tleVwiLCgpPT5zaWduaW5nS2V5KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiYWRkcmVzc1wiLGNvbXB1dGVBZGRyZXNzKHRoaXMucHVibGljS2V5KSk7aWYodGhpcy5hZGRyZXNzIT09Z2V0QWRkcmVzcyhwcml2YXRlS2V5LmFkZHJlc3MpKXtsb2dnZXIkcC50aHJvd0FyZ3VtZW50RXJyb3IoXCJwcml2YXRlS2V5L2FkZHJlc3MgbWlzbWF0Y2hcIixcInByaXZhdGVLZXlcIixcIltSRURBQ1RFRF1cIil9aWYoaGFzTW5lbW9uaWMkMShwcml2YXRlS2V5KSl7Y29uc3Qgc3JjTW5lbW9uaWM9cHJpdmF0ZUtleS5tbmVtb25pYztkZWZpbmVSZWFkT25seSh0aGlzLFwiX21uZW1vbmljXCIsKCk9Pih7cGhyYXNlOnNyY01uZW1vbmljLnBocmFzZSxwYXRoOnNyY01uZW1vbmljLnBhdGh8fGRlZmF1bHRQYXRoLGxvY2FsZTpzcmNNbmVtb25pYy5sb2NhbGV8fFwiZW5cIn0pKTtjb25zdCBtbmVtb25pYz10aGlzLm1uZW1vbmljO2NvbnN0IG5vZGU9SEROb2RlLmZyb21NbmVtb25pYyhtbmVtb25pYy5waHJhc2UsbnVsbCxtbmVtb25pYy5sb2NhbGUpLmRlcml2ZVBhdGgobW5lbW9uaWMucGF0aCk7aWYoY29tcHV0ZUFkZHJlc3Mobm9kZS5wcml2YXRlS2V5KSE9PXRoaXMuYWRkcmVzcyl7bG9nZ2VyJHAudGhyb3dBcmd1bWVudEVycm9yKFwibW5lbW9uaWMvYWRkcmVzcyBtaXNtYXRjaFwiLFwicHJpdmF0ZUtleVwiLFwiW1JFREFDVEVEXVwiKX19ZWxzZXtkZWZpbmVSZWFkT25seSh0aGlzLFwiX21uZW1vbmljXCIsKCk9Pm51bGwpfX1lbHNle2lmKFNpZ25pbmdLZXkuaXNTaWduaW5nS2V5KHByaXZhdGVLZXkpKXtpZihwcml2YXRlS2V5LmN1cnZlIT09XCJzZWNwMjU2azFcIil7bG9nZ2VyJHAudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgY3VydmU7IG11c3QgYmUgc2VjcDI1NmsxXCIsXCJwcml2YXRlS2V5XCIsXCJbUkVEQUNURURdXCIpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJfc2lnbmluZ0tleVwiLCgpPT5wcml2YXRlS2V5KX1lbHNle2lmKHR5cGVvZiBwcml2YXRlS2V5PT09XCJzdHJpbmdcIil7aWYocHJpdmF0ZUtleS5tYXRjaCgvXlswLTlhLWZdKiQvaSkmJnByaXZhdGVLZXkubGVuZ3RoPT09NjQpe3ByaXZhdGVLZXk9XCIweFwiK3ByaXZhdGVLZXl9fWNvbnN0IHNpZ25pbmdLZXk9bmV3IFNpZ25pbmdLZXkocHJpdmF0ZUtleSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9zaWduaW5nS2V5XCIsKCk9PnNpZ25pbmdLZXkpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJfbW5lbW9uaWNcIiwoKT0+bnVsbCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFkZHJlc3NcIixjb21wdXRlQWRkcmVzcyh0aGlzLnB1YmxpY0tleSkpfWlmKHByb3ZpZGVyJiYhUHJvdmlkZXIuaXNQcm92aWRlcihwcm92aWRlcikpe2xvZ2dlciRwLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgcHJvdmlkZXJcIixcInByb3ZpZGVyXCIscHJvdmlkZXIpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJwcm92aWRlclwiLHByb3ZpZGVyfHxudWxsKX1nZXQgbW5lbW9uaWMoKXtyZXR1cm4gdGhpcy5fbW5lbW9uaWMoKX1nZXQgcHJpdmF0ZUtleSgpe3JldHVybiB0aGlzLl9zaWduaW5nS2V5KCkucHJpdmF0ZUtleX1nZXQgcHVibGljS2V5KCl7cmV0dXJuIHRoaXMuX3NpZ25pbmdLZXkoKS5wdWJsaWNLZXl9Z2V0QWRkcmVzcygpe3JldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5hZGRyZXNzKX1jb25uZWN0KHByb3ZpZGVyKXtyZXR1cm4gbmV3IFdhbGxldCh0aGlzLHByb3ZpZGVyKX1zaWduVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pe3JldHVybiByZXNvbHZlUHJvcGVydGllcyh0cmFuc2FjdGlvbikudGhlbih0eD0+e2lmKHR4LmZyb20hPW51bGwpe2lmKGdldEFkZHJlc3ModHguZnJvbSkhPT10aGlzLmFkZHJlc3Mpe2xvZ2dlciRwLnRocm93QXJndW1lbnRFcnJvcihcInRyYW5zYWN0aW9uIGZyb20gYWRkcmVzcyBtaXNtYXRjaFwiLFwidHJhbnNhY3Rpb24uZnJvbVwiLHRyYW5zYWN0aW9uLmZyb20pfWRlbGV0ZSB0eC5mcm9tfWNvbnN0IHNpZ25hdHVyZT10aGlzLl9zaWduaW5nS2V5KCkuc2lnbkRpZ2VzdChrZWNjYWsyNTYoc2VyaWFsaXplKHR4KSkpO3JldHVybiBzZXJpYWxpemUodHgsc2lnbmF0dXJlKX0pfXNpZ25NZXNzYWdlKG1lc3NhZ2Upe3JldHVybiBfX2F3YWl0ZXIkNSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7cmV0dXJuIGpvaW5TaWduYXR1cmUodGhpcy5fc2lnbmluZ0tleSgpLnNpZ25EaWdlc3QoaGFzaE1lc3NhZ2UobWVzc2FnZSkpKX0pfV9zaWduVHlwZWREYXRhKGRvbWFpbix0eXBlcyx2YWx1ZSl7cmV0dXJuIF9fYXdhaXRlciQ1KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBwb3B1bGF0ZWQ9eWllbGQgVHlwZWREYXRhRW5jb2Rlci5yZXNvbHZlTmFtZXMoZG9tYWluLHR5cGVzLHZhbHVlLG5hbWU9PntpZih0aGlzLnByb3ZpZGVyPT1udWxsKXtsb2dnZXIkcC50aHJvd0Vycm9yKFwiY2Fubm90IHJlc29sdmUgRU5TIG5hbWVzIHdpdGhvdXQgYSBwcm92aWRlclwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJyZXNvbHZlTmFtZVwiLHZhbHVlOm5hbWV9KX1yZXR1cm4gdGhpcy5wcm92aWRlci5yZXNvbHZlTmFtZShuYW1lKX0pO3JldHVybiBqb2luU2lnbmF0dXJlKHRoaXMuX3NpZ25pbmdLZXkoKS5zaWduRGlnZXN0KFR5cGVkRGF0YUVuY29kZXIuaGFzaChwb3B1bGF0ZWQuZG9tYWluLHR5cGVzLHBvcHVsYXRlZC52YWx1ZSkpKX0pfWVuY3J5cHQocGFzc3dvcmQsb3B0aW9ucyxwcm9ncmVzc0NhbGxiYWNrKXtpZih0eXBlb2Ygb3B0aW9ucz09PVwiZnVuY3Rpb25cIiYmIXByb2dyZXNzQ2FsbGJhY2spe3Byb2dyZXNzQ2FsbGJhY2s9b3B0aW9ucztvcHRpb25zPXt9fWlmKHByb2dyZXNzQ2FsbGJhY2smJnR5cGVvZiBwcm9ncmVzc0NhbGxiYWNrIT09XCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrXCIpfWlmKCFvcHRpb25zKXtvcHRpb25zPXt9fXJldHVybiBlbmNyeXB0KHRoaXMscGFzc3dvcmQsb3B0aW9ucyxwcm9ncmVzc0NhbGxiYWNrKX1zdGF0aWMgY3JlYXRlUmFuZG9tKG9wdGlvbnMpe2xldCBlbnRyb3B5PXJhbmRvbUJ5dGVzKDE2KTtpZighb3B0aW9ucyl7b3B0aW9ucz17fX1pZihvcHRpb25zLmV4dHJhRW50cm9weSl7ZW50cm9weT1hcnJheWlmeShoZXhEYXRhU2xpY2Uoa2VjY2FrMjU2KGNvbmNhdChbZW50cm9weSxvcHRpb25zLmV4dHJhRW50cm9weV0pKSwwLDE2KSl9Y29uc3QgbW5lbW9uaWM9ZW50cm9weVRvTW5lbW9uaWMoZW50cm9weSxvcHRpb25zLmxvY2FsZSk7cmV0dXJuIFdhbGxldC5mcm9tTW5lbW9uaWMobW5lbW9uaWMsb3B0aW9ucy5wYXRoLG9wdGlvbnMubG9jYWxlKX1zdGF0aWMgZnJvbUVuY3J5cHRlZEpzb24oanNvbixwYXNzd29yZCxwcm9ncmVzc0NhbGxiYWNrKXtyZXR1cm4gZGVjcnlwdEpzb25XYWxsZXQoanNvbixwYXNzd29yZCxwcm9ncmVzc0NhbGxiYWNrKS50aGVuKGFjY291bnQ9PntyZXR1cm4gbmV3IFdhbGxldChhY2NvdW50KX0pfXN0YXRpYyBmcm9tRW5jcnlwdGVkSnNvblN5bmMoanNvbixwYXNzd29yZCl7cmV0dXJuIG5ldyBXYWxsZXQoZGVjcnlwdEpzb25XYWxsZXRTeW5jKGpzb24scGFzc3dvcmQpKX1zdGF0aWMgZnJvbU1uZW1vbmljKG1uZW1vbmljLHBhdGgsd29yZGxpc3Qpe2lmKCFwYXRoKXtwYXRoPWRlZmF1bHRQYXRofXJldHVybiBuZXcgV2FsbGV0KEhETm9kZS5mcm9tTW5lbW9uaWMobW5lbW9uaWMsbnVsbCx3b3JkbGlzdCkuZGVyaXZlUGF0aChwYXRoKSl9fWZ1bmN0aW9uIHZlcmlmeU1lc3NhZ2UobWVzc2FnZSxzaWduYXR1cmUpe3JldHVybiByZWNvdmVyQWRkcmVzcyhoYXNoTWVzc2FnZShtZXNzYWdlKSxzaWduYXR1cmUpfWZ1bmN0aW9uIHZlcmlmeVR5cGVkRGF0YShkb21haW4sdHlwZXMsdmFsdWUsc2lnbmF0dXJlKXtyZXR1cm4gcmVjb3ZlckFkZHJlc3MoVHlwZWREYXRhRW5jb2Rlci5oYXNoKGRvbWFpbix0eXBlcyx2YWx1ZSksc2lnbmF0dXJlKX1jb25zdCB2ZXJzaW9uJGs9XCJuZXR3b3Jrcy81LjEuMFwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRxPW5ldyBMb2dnZXIodmVyc2lvbiRrKTtmdW5jdGlvbiBpc1JlbmV0d29ya2FibGUodmFsdWUpe3JldHVybiB2YWx1ZSYmdHlwZW9mIHZhbHVlLnJlbmV0d29yaz09PVwiZnVuY3Rpb25cIn1mdW5jdGlvbiBldGhEZWZhdWx0UHJvdmlkZXIobmV0d29yayl7Y29uc3QgZnVuYz1mdW5jdGlvbihwcm92aWRlcnMsb3B0aW9ucyl7aWYob3B0aW9ucz09bnVsbCl7b3B0aW9ucz17fX1jb25zdCBwcm92aWRlckxpc3Q9W107aWYocHJvdmlkZXJzLkluZnVyYVByb3ZpZGVyKXt0cnl7cHJvdmlkZXJMaXN0LnB1c2gobmV3IHByb3ZpZGVycy5JbmZ1cmFQcm92aWRlcihuZXR3b3JrLG9wdGlvbnMuaW5mdXJhKSl9Y2F0Y2goZXJyb3Ipe319aWYocHJvdmlkZXJzLkV0aGVyc2NhblByb3ZpZGVyKXt0cnl7cHJvdmlkZXJMaXN0LnB1c2gobmV3IHByb3ZpZGVycy5FdGhlcnNjYW5Qcm92aWRlcihuZXR3b3JrLG9wdGlvbnMuZXRoZXJzY2FuKSl9Y2F0Y2goZXJyb3Ipe319aWYocHJvdmlkZXJzLkFsY2hlbXlQcm92aWRlcil7Y29uc3Qgc2tpcD1bXCJnb2VybGlcIixcInJvcHN0ZW5cIixcInJpbmtlYnlcIl07dHJ5e2NvbnN0IHByb3ZpZGVyPW5ldyBwcm92aWRlcnMuQWxjaGVteVByb3ZpZGVyKG5ldHdvcmssb3B0aW9ucy5hbGNoZW15KTtpZihwcm92aWRlci5uZXR3b3JrJiZza2lwLmluZGV4T2YocHJvdmlkZXIubmV0d29yay5uYW1lKT09PS0xKXtwcm92aWRlckxpc3QucHVzaChwcm92aWRlcil9fWNhdGNoKGVycm9yKXt9fWlmKHByb3ZpZGVycy5Qb2NrZXRQcm92aWRlcil7Y29uc3Qgc2tpcD1bXCJnb2VybGlcIixcInJvcHN0ZW5cIixcInJpbmtlYnlcIl07dHJ5e2NvbnN0IHByb3ZpZGVyPW5ldyBwcm92aWRlcnMuUG9ja2V0UHJvdmlkZXIobmV0d29yayk7aWYocHJvdmlkZXIubmV0d29yayYmc2tpcC5pbmRleE9mKHByb3ZpZGVyLm5ldHdvcmsubmFtZSk9PT0tMSl7cHJvdmlkZXJMaXN0LnB1c2gocHJvdmlkZXIpfX1jYXRjaChlcnJvcil7fX1pZihwcm92aWRlcnMuQ2xvdWRmbGFyZVByb3ZpZGVyKXt0cnl7cHJvdmlkZXJMaXN0LnB1c2gobmV3IHByb3ZpZGVycy5DbG91ZGZsYXJlUHJvdmlkZXIobmV0d29yaykpfWNhdGNoKGVycm9yKXt9fWlmKHByb3ZpZGVyTGlzdC5sZW5ndGg9PT0wKXtyZXR1cm4gbnVsbH1pZihwcm92aWRlcnMuRmFsbGJhY2tQcm92aWRlcil7bGV0IHF1b3J1bT0xO2lmKG9wdGlvbnMucXVvcnVtIT1udWxsKXtxdW9ydW09b3B0aW9ucy5xdW9ydW19ZWxzZSBpZihuZXR3b3JrPT09XCJob21lc3RlYWRcIil7cXVvcnVtPTJ9cmV0dXJuIG5ldyBwcm92aWRlcnMuRmFsbGJhY2tQcm92aWRlcihwcm92aWRlckxpc3QscXVvcnVtKX1yZXR1cm4gcHJvdmlkZXJMaXN0WzBdfTtmdW5jLnJlbmV0d29yaz1mdW5jdGlvbihuZXR3b3JrKXtyZXR1cm4gZXRoRGVmYXVsdFByb3ZpZGVyKG5ldHdvcmspfTtyZXR1cm4gZnVuY31mdW5jdGlvbiBldGNEZWZhdWx0UHJvdmlkZXIodXJsLG5ldHdvcmspe2NvbnN0IGZ1bmM9ZnVuY3Rpb24ocHJvdmlkZXJzLG9wdGlvbnMpe2lmKHByb3ZpZGVycy5Kc29uUnBjUHJvdmlkZXIpe3JldHVybiBuZXcgcHJvdmlkZXJzLkpzb25ScGNQcm92aWRlcih1cmwsbmV0d29yayl9cmV0dXJuIG51bGx9O2Z1bmMucmVuZXR3b3JrPWZ1bmN0aW9uKG5ldHdvcmspe3JldHVybiBldGNEZWZhdWx0UHJvdmlkZXIodXJsLG5ldHdvcmspfTtyZXR1cm4gZnVuY31jb25zdCBob21lc3RlYWQ9e2NoYWluSWQ6MSxlbnNBZGRyZXNzOlwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsbmFtZTpcImhvbWVzdGVhZFwiLF9kZWZhdWx0UHJvdmlkZXI6ZXRoRGVmYXVsdFByb3ZpZGVyKFwiaG9tZXN0ZWFkXCIpfTtjb25zdCByb3BzdGVuPXtjaGFpbklkOjMsZW5zQWRkcmVzczpcIjB4MDAwMDAwMDAwMDBDMkUwNzRlQzY5QTBkRmIyOTk3QkE2QzdkMmUxZVwiLG5hbWU6XCJyb3BzdGVuXCIsX2RlZmF1bHRQcm92aWRlcjpldGhEZWZhdWx0UHJvdmlkZXIoXCJyb3BzdGVuXCIpfTtjb25zdCBjbGFzc2ljTW9yZG9yPXtjaGFpbklkOjYzLG5hbWU6XCJjbGFzc2ljTW9yZG9yXCIsX2RlZmF1bHRQcm92aWRlcjpldGNEZWZhdWx0UHJvdmlkZXIoXCJodHRwczovL3d3dy5ldGhlcmNsdXN0ZXIuY29tL21vcmRvclwiLFwiY2xhc3NpY01vcmRvclwiKX07Y29uc3QgbmV0d29ya3M9e3Vuc3BlY2lmaWVkOntjaGFpbklkOjAsbmFtZTpcInVuc3BlY2lmaWVkXCJ9LGhvbWVzdGVhZDpob21lc3RlYWQsbWFpbm5ldDpob21lc3RlYWQsbW9yZGVuOntjaGFpbklkOjIsbmFtZTpcIm1vcmRlblwifSxyb3BzdGVuOnJvcHN0ZW4sdGVzdG5ldDpyb3BzdGVuLHJpbmtlYnk6e2NoYWluSWQ6NCxlbnNBZGRyZXNzOlwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsbmFtZTpcInJpbmtlYnlcIixfZGVmYXVsdFByb3ZpZGVyOmV0aERlZmF1bHRQcm92aWRlcihcInJpbmtlYnlcIil9LGtvdmFuOntjaGFpbklkOjQyLG5hbWU6XCJrb3ZhblwiLF9kZWZhdWx0UHJvdmlkZXI6ZXRoRGVmYXVsdFByb3ZpZGVyKFwia292YW5cIil9LGdvZXJsaTp7Y2hhaW5JZDo1LGVuc0FkZHJlc3M6XCIweDAwMDAwMDAwMDAwQzJFMDc0ZUM2OUEwZEZiMjk5N0JBNkM3ZDJlMWVcIixuYW1lOlwiZ29lcmxpXCIsX2RlZmF1bHRQcm92aWRlcjpldGhEZWZhdWx0UHJvdmlkZXIoXCJnb2VybGlcIil9LGNsYXNzaWM6e2NoYWluSWQ6NjEsbmFtZTpcImNsYXNzaWNcIixfZGVmYXVsdFByb3ZpZGVyOmV0Y0RlZmF1bHRQcm92aWRlcihcImh0dHBzOi8vd3d3LmV0aGVyY2x1c3Rlci5jb20vZXRjXCIsXCJjbGFzc2ljXCIpfSxjbGFzc2ljTW9yZGVuOntjaGFpbklkOjYyLG5hbWU6XCJjbGFzc2ljTW9yZGVuXCJ9LGNsYXNzaWNNb3Jkb3I6Y2xhc3NpY01vcmRvcixjbGFzc2ljVGVzdG5ldDpjbGFzc2ljTW9yZG9yLGNsYXNzaWNLb3R0aTp7Y2hhaW5JZDo2LG5hbWU6XCJjbGFzc2ljS290dGlcIixfZGVmYXVsdFByb3ZpZGVyOmV0Y0RlZmF1bHRQcm92aWRlcihcImh0dHBzOi8vd3d3LmV0aGVyY2x1c3Rlci5jb20va290dGlcIixcImNsYXNzaWNLb3R0aVwiKX19O2Z1bmN0aW9uIGdldE5ldHdvcmsobmV0d29yayl7aWYobmV0d29yaz09bnVsbCl7cmV0dXJuIG51bGx9aWYodHlwZW9mIG5ldHdvcms9PT1cIm51bWJlclwiKXtmb3IoY29uc3QgbmFtZSBpbiBuZXR3b3Jrcyl7Y29uc3Qgc3RhbmRhcmQ9bmV0d29ya3NbbmFtZV07aWYoc3RhbmRhcmQuY2hhaW5JZD09PW5ldHdvcmspe3JldHVybntuYW1lOnN0YW5kYXJkLm5hbWUsY2hhaW5JZDpzdGFuZGFyZC5jaGFpbklkLGVuc0FkZHJlc3M6c3RhbmRhcmQuZW5zQWRkcmVzc3x8bnVsbCxfZGVmYXVsdFByb3ZpZGVyOnN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXJ8fG51bGx9fX1yZXR1cm57Y2hhaW5JZDpuZXR3b3JrLG5hbWU6XCJ1bmtub3duXCJ9fWlmKHR5cGVvZiBuZXR3b3JrPT09XCJzdHJpbmdcIil7Y29uc3Qgc3RhbmRhcmQ9bmV0d29ya3NbbmV0d29ya107aWYoc3RhbmRhcmQ9PW51bGwpe3JldHVybiBudWxsfXJldHVybntuYW1lOnN0YW5kYXJkLm5hbWUsY2hhaW5JZDpzdGFuZGFyZC5jaGFpbklkLGVuc0FkZHJlc3M6c3RhbmRhcmQuZW5zQWRkcmVzcyxfZGVmYXVsdFByb3ZpZGVyOnN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXJ8fG51bGx9fWNvbnN0IHN0YW5kYXJkPW5ldHdvcmtzW25ldHdvcmsubmFtZV07aWYoIXN0YW5kYXJkKXtpZih0eXBlb2YgbmV0d29yay5jaGFpbklkIT09XCJudW1iZXJcIil7bG9nZ2VyJHEudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBuZXR3b3JrIGNoYWluSWRcIixcIm5ldHdvcmtcIixuZXR3b3JrKX1yZXR1cm4gbmV0d29ya31pZihuZXR3b3JrLmNoYWluSWQhPT0wJiZuZXR3b3JrLmNoYWluSWQhPT1zdGFuZGFyZC5jaGFpbklkKXtsb2dnZXIkcS50aHJvd0FyZ3VtZW50RXJyb3IoXCJuZXR3b3JrIGNoYWluSWQgbWlzbWF0Y2hcIixcIm5ldHdvcmtcIixuZXR3b3JrKX1sZXQgZGVmYXVsdFByb3ZpZGVyPW5ldHdvcmsuX2RlZmF1bHRQcm92aWRlcnx8bnVsbDtpZihkZWZhdWx0UHJvdmlkZXI9PW51bGwmJnN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXIpe2lmKGlzUmVuZXR3b3JrYWJsZShzdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyKSl7ZGVmYXVsdFByb3ZpZGVyPXN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXIucmVuZXR3b3JrKG5ldHdvcmspfWVsc2V7ZGVmYXVsdFByb3ZpZGVyPXN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXJ9fXJldHVybntuYW1lOm5ldHdvcmsubmFtZSxjaGFpbklkOnN0YW5kYXJkLmNoYWluSWQsZW5zQWRkcmVzczpuZXR3b3JrLmVuc0FkZHJlc3N8fHN0YW5kYXJkLmVuc0FkZHJlc3N8fG51bGwsX2RlZmF1bHRQcm92aWRlcjpkZWZhdWx0UHJvdmlkZXJ9fVwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGRlY29kZSQxKHRleHREYXRhKXt0ZXh0RGF0YT1hdG9iKHRleHREYXRhKTtjb25zdCBkYXRhPVtdO2ZvcihsZXQgaT0wO2k8dGV4dERhdGEubGVuZ3RoO2krKyl7ZGF0YS5wdXNoKHRleHREYXRhLmNoYXJDb2RlQXQoaSkpfXJldHVybiBhcnJheWlmeShkYXRhKX1mdW5jdGlvbiBlbmNvZGUkMShkYXRhKXtkYXRhPWFycmF5aWZ5KGRhdGEpO2xldCB0ZXh0RGF0YT1cIlwiO2ZvcihsZXQgaT0wO2k8ZGF0YS5sZW5ndGg7aSsrKXt0ZXh0RGF0YSs9U3RyaW5nLmZyb21DaGFyQ29kZShkYXRhW2ldKX1yZXR1cm4gYnRvYSh0ZXh0RGF0YSl9XCJ1c2Ugc3RyaWN0XCI7dmFyIGluZGV4JDI9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZGVjb2RlOmRlY29kZSQxLGVuY29kZTplbmNvZGUkMX0pO2NvbnN0IHZlcnNpb24kbD1cIndlYi81LjEuMFwiO1widXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXIkNj13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07ZnVuY3Rpb24gZ2V0VXJsKGhyZWYsb3B0aW9ucyl7cmV0dXJuIF9fYXdhaXRlciQ2KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtpZihvcHRpb25zPT1udWxsKXtvcHRpb25zPXt9fWNvbnN0IHJlcXVlc3Q9e21ldGhvZDpvcHRpb25zLm1ldGhvZHx8XCJHRVRcIixoZWFkZXJzOm9wdGlvbnMuaGVhZGVyc3x8e30sYm9keTpvcHRpb25zLmJvZHl8fHVuZGVmaW5lZCxtb2RlOlwiY29yc1wiLGNhY2hlOlwibm8tY2FjaGVcIixjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCIscmVkaXJlY3Q6XCJmb2xsb3dcIixyZWZlcnJlcjpcImNsaWVudFwifTtjb25zdCByZXNwb25zZT15aWVsZCBmZXRjaChocmVmLHJlcXVlc3QpO2NvbnN0IGJvZHk9eWllbGQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtjb25zdCBoZWFkZXJzPXt9O2lmKHJlc3BvbnNlLmhlYWRlcnMuZm9yRWFjaCl7cmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSxrZXkpPT57aGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV09dmFsdWV9KX1lbHNle3Jlc3BvbnNlLmhlYWRlcnMua2V5cygpLmZvckVhY2goa2V5PT57aGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV09cmVzcG9uc2UuaGVhZGVycy5nZXQoa2V5KX0pfXJldHVybntoZWFkZXJzOmhlYWRlcnMsc3RhdHVzQ29kZTpyZXNwb25zZS5zdGF0dXMsc3RhdHVzTWVzc2FnZTpyZXNwb25zZS5zdGF0dXNUZXh0LGJvZHk6YXJyYXlpZnkobmV3IFVpbnQ4QXJyYXkoYm9keSkpfX0pfVwidXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXIkNz13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07Y29uc3QgbG9nZ2VyJHI9bmV3IExvZ2dlcih2ZXJzaW9uJGwpO2Z1bmN0aW9uIHN0YWxsZXIoZHVyYXRpb24pe3JldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlPT57c2V0VGltZW91dChyZXNvbHZlLGR1cmF0aW9uKX0pfWZ1bmN0aW9uIGJvZHlpZnkodmFsdWUsdHlwZSl7aWYodmFsdWU9PW51bGwpe3JldHVybiBudWxsfWlmKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpe3JldHVybiB2YWx1ZX1pZihpc0J5dGVzTGlrZSh2YWx1ZSkpe2lmKHR5cGUmJih0eXBlLnNwbGl0KFwiL1wiKVswXT09PVwidGV4dFwifHx0eXBlLnNwbGl0KFwiO1wiKVswXS50cmltKCk9PT1cImFwcGxpY2F0aW9uL2pzb25cIikpe3RyeXtyZXR1cm4gdG9VdGY4U3RyaW5nKHZhbHVlKX1jYXRjaChlcnJvcil7fX1yZXR1cm4gaGV4bGlmeSh2YWx1ZSl9cmV0dXJuIHZhbHVlfWZ1bmN0aW9uIF9mZXRjaERhdGEoY29ubmVjdGlvbixib2R5LHByb2Nlc3NGdW5jKXtjb25zdCBhdHRlbXB0TGltaXQ9dHlwZW9mIGNvbm5lY3Rpb249PT1cIm9iamVjdFwiJiZjb25uZWN0aW9uLnRocm90dGxlTGltaXQhPW51bGw/Y29ubmVjdGlvbi50aHJvdHRsZUxpbWl0OjEyO2xvZ2dlciRyLmFzc2VydEFyZ3VtZW50KGF0dGVtcHRMaW1pdD4wJiZhdHRlbXB0TGltaXQlMT09PTAsXCJpbnZhbGlkIGNvbm5lY3Rpb24gdGhyb3R0bGUgbGltaXRcIixcImNvbm5lY3Rpb24udGhyb3R0bGVMaW1pdFwiLGF0dGVtcHRMaW1pdCk7Y29uc3QgdGhyb3R0bGVDYWxsYmFjaz10eXBlb2YgY29ubmVjdGlvbj09PVwib2JqZWN0XCI/Y29ubmVjdGlvbi50aHJvdHRsZUNhbGxiYWNrOm51bGw7Y29uc3QgdGhyb3R0bGVTbG90SW50ZXJ2YWw9dHlwZW9mIGNvbm5lY3Rpb249PT1cIm9iamVjdFwiJiZ0eXBlb2YgY29ubmVjdGlvbi50aHJvdHRsZVNsb3RJbnRlcnZhbD09PVwibnVtYmVyXCI/Y29ubmVjdGlvbi50aHJvdHRsZVNsb3RJbnRlcnZhbDoxMDA7bG9nZ2VyJHIuYXNzZXJ0QXJndW1lbnQodGhyb3R0bGVTbG90SW50ZXJ2YWw+MCYmdGhyb3R0bGVTbG90SW50ZXJ2YWwlMT09PTAsXCJpbnZhbGlkIGNvbm5lY3Rpb24gdGhyb3R0bGUgc2xvdCBpbnRlcnZhbFwiLFwiY29ubmVjdGlvbi50aHJvdHRsZVNsb3RJbnRlcnZhbFwiLHRocm90dGxlU2xvdEludGVydmFsKTtjb25zdCBoZWFkZXJzPXt9O2xldCB1cmw9bnVsbDtjb25zdCBvcHRpb25zPXttZXRob2Q6XCJHRVRcIn07bGV0IGFsbG93MzA0PWZhbHNlO2xldCB0aW1lb3V0PTIqNjAqMWUzO2lmKHR5cGVvZiBjb25uZWN0aW9uPT09XCJzdHJpbmdcIil7dXJsPWNvbm5lY3Rpb259ZWxzZSBpZih0eXBlb2YgY29ubmVjdGlvbj09PVwib2JqZWN0XCIpe2lmKGNvbm5lY3Rpb249PW51bGx8fGNvbm5lY3Rpb24udXJsPT1udWxsKXtsb2dnZXIkci50aHJvd0FyZ3VtZW50RXJyb3IoXCJtaXNzaW5nIFVSTFwiLFwiY29ubmVjdGlvbi51cmxcIixjb25uZWN0aW9uKX11cmw9Y29ubmVjdGlvbi51cmw7aWYodHlwZW9mIGNvbm5lY3Rpb24udGltZW91dD09PVwibnVtYmVyXCImJmNvbm5lY3Rpb24udGltZW91dD4wKXt0aW1lb3V0PWNvbm5lY3Rpb24udGltZW91dH1pZihjb25uZWN0aW9uLmhlYWRlcnMpe2Zvcihjb25zdCBrZXkgaW4gY29ubmVjdGlvbi5oZWFkZXJzKXtoZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXT17a2V5OmtleSx2YWx1ZTpTdHJpbmcoY29ubmVjdGlvbi5oZWFkZXJzW2tleV0pfTtpZihbXCJpZi1ub25lLW1hdGNoXCIsXCJpZi1tb2RpZmllZC1zaW5jZVwiXS5pbmRleE9mKGtleS50b0xvd2VyQ2FzZSgpKT49MCl7YWxsb3czMDQ9dHJ1ZX19fW9wdGlvbnMuYWxsb3dHemlwPSEhY29ubmVjdGlvbi5hbGxvd0d6aXA7aWYoY29ubmVjdGlvbi51c2VyIT1udWxsJiZjb25uZWN0aW9uLnBhc3N3b3JkIT1udWxsKXtpZih1cmwuc3Vic3RyaW5nKDAsNikhPT1cImh0dHBzOlwiJiZjb25uZWN0aW9uLmFsbG93SW5zZWN1cmVBdXRoZW50aWNhdGlvbiE9PXRydWUpe2xvZ2dlciRyLnRocm93RXJyb3IoXCJiYXNpYyBhdXRoZW50aWNhdGlvbiByZXF1aXJlcyBhIHNlY3VyZSBodHRwcyB1cmxcIixMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQse2FyZ3VtZW50OlwidXJsXCIsdXJsOnVybCx1c2VyOmNvbm5lY3Rpb24udXNlcixwYXNzd29yZDpcIltSRURBQ1RFRF1cIn0pfWNvbnN0IGF1dGhvcml6YXRpb249Y29ubmVjdGlvbi51c2VyK1wiOlwiK2Nvbm5lY3Rpb24ucGFzc3dvcmQ7aGVhZGVyc1tcImF1dGhvcml6YXRpb25cIl09e2tleTpcIkF1dGhvcml6YXRpb25cIix2YWx1ZTpcIkJhc2ljIFwiK2VuY29kZSQxKHRvVXRmOEJ5dGVzKGF1dGhvcml6YXRpb24pKX19fWlmKGJvZHkpe29wdGlvbnMubWV0aG9kPVwiUE9TVFwiO29wdGlvbnMuYm9keT1ib2R5O2lmKGhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl09PW51bGwpe2hlYWRlcnNbXCJjb250ZW50LXR5cGVcIl09e2tleTpcIkNvbnRlbnQtVHlwZVwiLHZhbHVlOlwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJ9fWlmKGhlYWRlcnNbXCJjb250ZW50LWxlbmd0aFwiXT09bnVsbCl7aGVhZGVyc1tcImNvbnRlbnQtbGVuZ3RoXCJdPXtrZXk6XCJDb250ZW50LUxlbmd0aFwiLHZhbHVlOlN0cmluZyhib2R5Lmxlbmd0aCl9fX1jb25zdCBmbGF0SGVhZGVycz17fTtPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKGtleT0+e2NvbnN0IGhlYWRlcj1oZWFkZXJzW2tleV07ZmxhdEhlYWRlcnNbaGVhZGVyLmtleV09aGVhZGVyLnZhbHVlfSk7b3B0aW9ucy5oZWFkZXJzPWZsYXRIZWFkZXJzO2NvbnN0IHJ1bm5pbmdUaW1lb3V0PWZ1bmN0aW9uKCl7bGV0IHRpbWVyPW51bGw7Y29uc3QgcHJvbWlzZT1uZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7aWYodGltZW91dCl7dGltZXI9c2V0VGltZW91dCgoKT0+e2lmKHRpbWVyPT1udWxsKXtyZXR1cm59dGltZXI9bnVsbDtyZWplY3QobG9nZ2VyJHIubWFrZUVycm9yKFwidGltZW91dFwiLExvZ2dlci5lcnJvcnMuVElNRU9VVCx7cmVxdWVzdEJvZHk6Ym9keWlmeShvcHRpb25zLmJvZHksZmxhdEhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0pLHJlcXVlc3RNZXRob2Q6b3B0aW9ucy5tZXRob2QsdGltZW91dDp0aW1lb3V0LHVybDp1cmx9KSl9LHRpbWVvdXQpfX0pO2NvbnN0IGNhbmNlbD1mdW5jdGlvbigpe2lmKHRpbWVyPT1udWxsKXtyZXR1cm59Y2xlYXJUaW1lb3V0KHRpbWVyKTt0aW1lcj1udWxsfTtyZXR1cm57cHJvbWlzZTpwcm9taXNlLGNhbmNlbDpjYW5jZWx9fSgpO2NvbnN0IHJ1bm5pbmdGZXRjaD1mdW5jdGlvbigpe3JldHVybiBfX2F3YWl0ZXIkNyh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Zm9yKGxldCBhdHRlbXB0PTA7YXR0ZW1wdDxhdHRlbXB0TGltaXQ7YXR0ZW1wdCsrKXtsZXQgcmVzcG9uc2U9bnVsbDt0cnl7cmVzcG9uc2U9eWllbGQgZ2V0VXJsKHVybCxvcHRpb25zKTtpZihyZXNwb25zZS5zdGF0dXNDb2RlPT09NDI5JiZhdHRlbXB0PGF0dGVtcHRMaW1pdCl7bGV0IHRyeUFnYWluPXRydWU7aWYodGhyb3R0bGVDYWxsYmFjayl7dHJ5QWdhaW49eWllbGQgdGhyb3R0bGVDYWxsYmFjayhhdHRlbXB0LHVybCl9aWYodHJ5QWdhaW4pe2xldCBzdGFsbD0wO2NvbnN0IHJldHJ5QWZ0ZXI9cmVzcG9uc2UuaGVhZGVyc1tcInJldHJ5LWFmdGVyXCJdO2lmKHR5cGVvZiByZXRyeUFmdGVyPT09XCJzdHJpbmdcIiYmcmV0cnlBZnRlci5tYXRjaCgvXlsxLTldWzAtOV0qJC8pKXtzdGFsbD1wYXJzZUludChyZXRyeUFmdGVyKSoxZTN9ZWxzZXtzdGFsbD10aHJvdHRsZVNsb3RJbnRlcnZhbCpwYXJzZUludChTdHJpbmcoTWF0aC5yYW5kb20oKSpNYXRoLnBvdygyLGF0dGVtcHQpKSl9eWllbGQgc3RhbGxlcihzdGFsbCk7Y29udGludWV9fX1jYXRjaChlcnJvcil7cmVzcG9uc2U9ZXJyb3IucmVzcG9uc2U7aWYocmVzcG9uc2U9PW51bGwpe3J1bm5pbmdUaW1lb3V0LmNhbmNlbCgpO2xvZ2dlciRyLnRocm93RXJyb3IoXCJtaXNzaW5nIHJlc3BvbnNlXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise3JlcXVlc3RCb2R5OmJvZHlpZnkob3B0aW9ucy5ib2R5LGZsYXRIZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSxyZXF1ZXN0TWV0aG9kOm9wdGlvbnMubWV0aG9kLHNlcnZlckVycm9yOmVycm9yLHVybDp1cmx9KX19bGV0IGJvZHk9cmVzcG9uc2UuYm9keTtpZihhbGxvdzMwNCYmcmVzcG9uc2Uuc3RhdHVzQ29kZT09PTMwNCl7Ym9keT1udWxsfWVsc2UgaWYocmVzcG9uc2Uuc3RhdHVzQ29kZTwyMDB8fHJlc3BvbnNlLnN0YXR1c0NvZGU+PTMwMCl7cnVubmluZ1RpbWVvdXQuY2FuY2VsKCk7bG9nZ2VyJHIudGhyb3dFcnJvcihcImJhZCByZXNwb25zZVwiLExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLHtzdGF0dXM6cmVzcG9uc2Uuc3RhdHVzQ29kZSxoZWFkZXJzOnJlc3BvbnNlLmhlYWRlcnMsYm9keTpib2R5aWZ5KGJvZHkscmVzcG9uc2UuaGVhZGVycz9yZXNwb25zZS5oZWFkZXJzW1wiY29udGVudC10eXBlXCJdOm51bGwpLHJlcXVlc3RCb2R5OmJvZHlpZnkob3B0aW9ucy5ib2R5LGZsYXRIZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSxyZXF1ZXN0TWV0aG9kOm9wdGlvbnMubWV0aG9kLHVybDp1cmx9KX1pZihwcm9jZXNzRnVuYyl7dHJ5e2NvbnN0IHJlc3VsdD15aWVsZCBwcm9jZXNzRnVuYyhib2R5LHJlc3BvbnNlKTtydW5uaW5nVGltZW91dC5jYW5jZWwoKTtyZXR1cm4gcmVzdWx0fWNhdGNoKGVycm9yKXtpZihlcnJvci50aHJvdHRsZVJldHJ5JiZhdHRlbXB0PGF0dGVtcHRMaW1pdCl7bGV0IHRyeUFnYWluPXRydWU7aWYodGhyb3R0bGVDYWxsYmFjayl7dHJ5QWdhaW49eWllbGQgdGhyb3R0bGVDYWxsYmFjayhhdHRlbXB0LHVybCl9aWYodHJ5QWdhaW4pe2NvbnN0IHRpbWVvdXQ9dGhyb3R0bGVTbG90SW50ZXJ2YWwqcGFyc2VJbnQoU3RyaW5nKE1hdGgucmFuZG9tKCkqTWF0aC5wb3coMixhdHRlbXB0KSkpO3lpZWxkIHN0YWxsZXIodGltZW91dCk7Y29udGludWV9fXJ1bm5pbmdUaW1lb3V0LmNhbmNlbCgpO2xvZ2dlciRyLnRocm93RXJyb3IoXCJwcm9jZXNzaW5nIHJlc3BvbnNlIGVycm9yXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise2JvZHk6Ym9keWlmeShib2R5LHJlc3BvbnNlLmhlYWRlcnM/cmVzcG9uc2UuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXTpudWxsKSxlcnJvcjplcnJvcixyZXF1ZXN0Qm9keTpib2R5aWZ5KG9wdGlvbnMuYm9keSxmbGF0SGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSkscmVxdWVzdE1ldGhvZDpvcHRpb25zLm1ldGhvZCx1cmw6dXJsfSl9fXJ1bm5pbmdUaW1lb3V0LmNhbmNlbCgpO3JldHVybiBib2R5fXJldHVybiBsb2dnZXIkci50aHJvd0Vycm9yKFwiZmFpbGVkIHJlc3BvbnNlXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise3JlcXVlc3RCb2R5OmJvZHlpZnkob3B0aW9ucy5ib2R5LGZsYXRIZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSxyZXF1ZXN0TWV0aG9kOm9wdGlvbnMubWV0aG9kLHVybDp1cmx9KX0pfSgpO3JldHVybiBQcm9taXNlLnJhY2UoW3J1bm5pbmdUaW1lb3V0LnByb21pc2UscnVubmluZ0ZldGNoXSl9ZnVuY3Rpb24gZmV0Y2hKc29uKGNvbm5lY3Rpb24sanNvbixwcm9jZXNzRnVuYyl7bGV0IHByb2Nlc3NKc29uRnVuYz0odmFsdWUscmVzcG9uc2UpPT57bGV0IHJlc3VsdD1udWxsO2lmKHZhbHVlIT1udWxsKXt0cnl7cmVzdWx0PUpTT04ucGFyc2UodG9VdGY4U3RyaW5nKHZhbHVlKSl9Y2F0Y2goZXJyb3Ipe2xvZ2dlciRyLnRocm93RXJyb3IoXCJpbnZhbGlkIEpTT05cIixMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUix7Ym9keTp2YWx1ZSxlcnJvcjplcnJvcn0pfX1pZihwcm9jZXNzRnVuYyl7cmVzdWx0PXByb2Nlc3NGdW5jKHJlc3VsdCxyZXNwb25zZSl9cmV0dXJuIHJlc3VsdH07bGV0IGJvZHk9bnVsbDtpZihqc29uIT1udWxsKXtib2R5PXRvVXRmOEJ5dGVzKGpzb24pO2NvbnN0IHVwZGF0ZWQ9dHlwZW9mIGNvbm5lY3Rpb249PT1cInN0cmluZ1wiP3t1cmw6Y29ubmVjdGlvbn06c2hhbGxvd0NvcHkoY29ubmVjdGlvbik7aWYodXBkYXRlZC5oZWFkZXJzKXtjb25zdCBoYXNDb250ZW50VHlwZT1PYmplY3Qua2V5cyh1cGRhdGVkLmhlYWRlcnMpLmZpbHRlcihrPT5rLnRvTG93ZXJDYXNlKCk9PT1cImNvbnRlbnQtdHlwZVwiKS5sZW5ndGghPT0wO2lmKCFoYXNDb250ZW50VHlwZSl7dXBkYXRlZC5oZWFkZXJzPXNoYWxsb3dDb3B5KHVwZGF0ZWQuaGVhZGVycyk7dXBkYXRlZC5oZWFkZXJzW1wiY29udGVudC10eXBlXCJdPVwiYXBwbGljYXRpb24vanNvblwifX1lbHNle3VwZGF0ZWQuaGVhZGVycz17XCJjb250ZW50LXR5cGVcIjpcImFwcGxpY2F0aW9uL2pzb25cIn19Y29ubmVjdGlvbj11cGRhdGVkfXJldHVybiBfZmV0Y2hEYXRhKGNvbm5lY3Rpb24sYm9keSxwcm9jZXNzSnNvbkZ1bmMpfWZ1bmN0aW9uIHBvbGwoZnVuYyxvcHRpb25zKXtpZighb3B0aW9ucyl7b3B0aW9ucz17fX1vcHRpb25zPXNoYWxsb3dDb3B5KG9wdGlvbnMpO2lmKG9wdGlvbnMuZmxvb3I9PW51bGwpe29wdGlvbnMuZmxvb3I9MH1pZihvcHRpb25zLmNlaWxpbmc9PW51bGwpe29wdGlvbnMuY2VpbGluZz0xZTR9aWYob3B0aW9ucy5pbnRlcnZhbD09bnVsbCl7b3B0aW9ucy5pbnRlcnZhbD0yNTB9cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtsZXQgdGltZXI9bnVsbDtsZXQgZG9uZT1mYWxzZTtjb25zdCBjYW5jZWw9KCk9PntpZihkb25lKXtyZXR1cm4gZmFsc2V9ZG9uZT10cnVlO2lmKHRpbWVyKXtjbGVhclRpbWVvdXQodGltZXIpfXJldHVybiB0cnVlfTtpZihvcHRpb25zLnRpbWVvdXQpe3RpbWVyPXNldFRpbWVvdXQoKCk9PntpZihjYW5jZWwoKSl7cmVqZWN0KG5ldyBFcnJvcihcInRpbWVvdXRcIikpfX0sb3B0aW9ucy50aW1lb3V0KX1jb25zdCByZXRyeUxpbWl0PW9wdGlvbnMucmV0cnlMaW1pdDtsZXQgYXR0ZW1wdD0wO2Z1bmN0aW9uIGNoZWNrKCl7cmV0dXJuIGZ1bmMoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7aWYocmVzdWx0IT09dW5kZWZpbmVkKXtpZihjYW5jZWwoKSl7cmVzb2x2ZShyZXN1bHQpfX1lbHNlIGlmKG9wdGlvbnMub25jZVBvbGwpe29wdGlvbnMub25jZVBvbGwub25jZShcInBvbGxcIixjaGVjayl9ZWxzZSBpZihvcHRpb25zLm9uY2VCbG9jayl7b3B0aW9ucy5vbmNlQmxvY2sub25jZShcImJsb2NrXCIsY2hlY2spfWVsc2UgaWYoIWRvbmUpe2F0dGVtcHQrKztpZihhdHRlbXB0PnJldHJ5TGltaXQpe2lmKGNhbmNlbCgpKXtyZWplY3QobmV3IEVycm9yKFwicmV0cnkgbGltaXQgcmVhY2hlZFwiKSl9cmV0dXJufWxldCB0aW1lb3V0PW9wdGlvbnMuaW50ZXJ2YWwqcGFyc2VJbnQoU3RyaW5nKE1hdGgucmFuZG9tKCkqTWF0aC5wb3coMixhdHRlbXB0KSkpO2lmKHRpbWVvdXQ8b3B0aW9ucy5mbG9vcil7dGltZW91dD1vcHRpb25zLmZsb29yfWlmKHRpbWVvdXQ+b3B0aW9ucy5jZWlsaW5nKXt0aW1lb3V0PW9wdGlvbnMuY2VpbGluZ31zZXRUaW1lb3V0KGNoZWNrLHRpbWVvdXQpfXJldHVybiBudWxsfSxmdW5jdGlvbihlcnJvcil7aWYoY2FuY2VsKCkpe3JlamVjdChlcnJvcil9fSl9Y2hlY2soKX0pfVwidXNlIHN0cmljdFwiO3ZhciBBTFBIQUJFVD1cInFwenJ5OXg4Z2YydHZkdzBzM2puNTRraGNlNm11YTdsXCI7dmFyIEFMUEhBQkVUX01BUD17fTtmb3IodmFyIHo9MDt6PEFMUEhBQkVULmxlbmd0aDt6Kyspe3ZhciB4PUFMUEhBQkVULmNoYXJBdCh6KTtpZihBTFBIQUJFVF9NQVBbeF0hPT11bmRlZmluZWQpdGhyb3cgbmV3IFR5cGVFcnJvcih4K1wiIGlzIGFtYmlndW91c1wiKTtBTFBIQUJFVF9NQVBbeF09en1mdW5jdGlvbiBwb2x5bW9kU3RlcChwcmUpe3ZhciBiPXByZT4+MjU7cmV0dXJuKHByZSYzMzU1NDQzMSk8PDVeLShiPj4wJjEpJjk5NjgyNTAxMF4tKGI+PjEmMSkmNjQyODEzNTQ5Xi0oYj4+MiYxKSY1MTM4NzQ0MjZeLShiPj4zJjEpJjEwMjc3NDg4MjleLShiPj40JjEpJjcwNTk3OTA1OX1mdW5jdGlvbiBwcmVmaXhDaGsocHJlZml4KXt2YXIgY2hrPTE7Zm9yKHZhciBpPTA7aTxwcmVmaXgubGVuZ3RoOysraSl7dmFyIGM9cHJlZml4LmNoYXJDb2RlQXQoaSk7aWYoYzwzM3x8Yz4xMjYpcmV0dXJuXCJJbnZhbGlkIHByZWZpeCAoXCIrcHJlZml4K1wiKVwiO2Noaz1wb2x5bW9kU3RlcChjaGspXmM+PjV9Y2hrPXBvbHltb2RTdGVwKGNoayk7Zm9yKGk9MDtpPHByZWZpeC5sZW5ndGg7KytpKXt2YXIgdj1wcmVmaXguY2hhckNvZGVBdChpKTtjaGs9cG9seW1vZFN0ZXAoY2hrKV52JjMxfXJldHVybiBjaGt9ZnVuY3Rpb24gZW5jb2RlJDIocHJlZml4LHdvcmRzLExJTUlUKXtMSU1JVD1MSU1JVHx8OTA7aWYocHJlZml4Lmxlbmd0aCs3K3dvcmRzLmxlbmd0aD5MSU1JVCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhjZWVkcyBsZW5ndGggbGltaXRcIik7cHJlZml4PXByZWZpeC50b0xvd2VyQ2FzZSgpO3ZhciBjaGs9cHJlZml4Q2hrKHByZWZpeCk7aWYodHlwZW9mIGNoaz09PVwic3RyaW5nXCIpdGhyb3cgbmV3IEVycm9yKGNoayk7dmFyIHJlc3VsdD1wcmVmaXgrXCIxXCI7Zm9yKHZhciBpPTA7aTx3b3Jkcy5sZW5ndGg7KytpKXt2YXIgeD13b3Jkc1tpXTtpZih4Pj41IT09MCl0aHJvdyBuZXcgRXJyb3IoXCJOb24gNS1iaXQgd29yZFwiKTtjaGs9cG9seW1vZFN0ZXAoY2hrKV54O3Jlc3VsdCs9QUxQSEFCRVQuY2hhckF0KHgpfWZvcihpPTA7aTw2OysraSl7Y2hrPXBvbHltb2RTdGVwKGNoayl9Y2hrXj0xO2ZvcihpPTA7aTw2OysraSl7dmFyIHY9Y2hrPj4oNS1pKSo1JjMxO3Jlc3VsdCs9QUxQSEFCRVQuY2hhckF0KHYpfXJldHVybiByZXN1bHR9ZnVuY3Rpb24gX19kZWNvZGUoc3RyLExJTUlUKXtMSU1JVD1MSU1JVHx8OTA7aWYoc3RyLmxlbmd0aDw4KXJldHVybiBzdHIrXCIgdG9vIHNob3J0XCI7aWYoc3RyLmxlbmd0aD5MSU1JVClyZXR1cm5cIkV4Y2VlZHMgbGVuZ3RoIGxpbWl0XCI7dmFyIGxvd2VyZWQ9c3RyLnRvTG93ZXJDYXNlKCk7dmFyIHVwcGVyZWQ9c3RyLnRvVXBwZXJDYXNlKCk7aWYoc3RyIT09bG93ZXJlZCYmc3RyIT09dXBwZXJlZClyZXR1cm5cIk1peGVkLWNhc2Ugc3RyaW5nIFwiK3N0cjtzdHI9bG93ZXJlZDt2YXIgc3BsaXQ9c3RyLmxhc3RJbmRleE9mKFwiMVwiKTtpZihzcGxpdD09PS0xKXJldHVyblwiTm8gc2VwYXJhdG9yIGNoYXJhY3RlciBmb3IgXCIrc3RyO2lmKHNwbGl0PT09MClyZXR1cm5cIk1pc3NpbmcgcHJlZml4IGZvciBcIitzdHI7dmFyIHByZWZpeD1zdHIuc2xpY2UoMCxzcGxpdCk7dmFyIHdvcmRDaGFycz1zdHIuc2xpY2Uoc3BsaXQrMSk7aWYod29yZENoYXJzLmxlbmd0aDw2KXJldHVyblwiRGF0YSB0b28gc2hvcnRcIjt2YXIgY2hrPXByZWZpeENoayhwcmVmaXgpO2lmKHR5cGVvZiBjaGs9PT1cInN0cmluZ1wiKXJldHVybiBjaGs7dmFyIHdvcmRzPVtdO2Zvcih2YXIgaT0wO2k8d29yZENoYXJzLmxlbmd0aDsrK2kpe3ZhciBjPXdvcmRDaGFycy5jaGFyQXQoaSk7dmFyIHY9QUxQSEFCRVRfTUFQW2NdO2lmKHY9PT11bmRlZmluZWQpcmV0dXJuXCJVbmtub3duIGNoYXJhY3RlciBcIitjO2Noaz1wb2x5bW9kU3RlcChjaGspXnY7aWYoaSs2Pj13b3JkQ2hhcnMubGVuZ3RoKWNvbnRpbnVlO3dvcmRzLnB1c2godil9aWYoY2hrIT09MSlyZXR1cm5cIkludmFsaWQgY2hlY2tzdW0gZm9yIFwiK3N0cjtyZXR1cm57cHJlZml4OnByZWZpeCx3b3Jkczp3b3Jkc319ZnVuY3Rpb24gZGVjb2RlVW5zYWZlKCl7dmFyIHJlcz1fX2RlY29kZS5hcHBseShudWxsLGFyZ3VtZW50cyk7aWYodHlwZW9mIHJlcz09PVwib2JqZWN0XCIpcmV0dXJuIHJlc31mdW5jdGlvbiBkZWNvZGUkMihzdHIpe3ZhciByZXM9X19kZWNvZGUuYXBwbHkobnVsbCxhcmd1bWVudHMpO2lmKHR5cGVvZiByZXM9PT1cIm9iamVjdFwiKXJldHVybiByZXM7dGhyb3cgbmV3IEVycm9yKHJlcyl9ZnVuY3Rpb24gY29udmVydChkYXRhLGluQml0cyxvdXRCaXRzLHBhZCl7dmFyIHZhbHVlPTA7dmFyIGJpdHM9MDt2YXIgbWF4Vj0oMTw8b3V0Qml0cyktMTt2YXIgcmVzdWx0PVtdO2Zvcih2YXIgaT0wO2k8ZGF0YS5sZW5ndGg7KytpKXt2YWx1ZT12YWx1ZTw8aW5CaXRzfGRhdGFbaV07Yml0cys9aW5CaXRzO3doaWxlKGJpdHM+PW91dEJpdHMpe2JpdHMtPW91dEJpdHM7cmVzdWx0LnB1c2godmFsdWU+PmJpdHMmbWF4Vil9fWlmKHBhZCl7aWYoYml0cz4wKXtyZXN1bHQucHVzaCh2YWx1ZTw8b3V0Qml0cy1iaXRzJm1heFYpfX1lbHNle2lmKGJpdHM+PWluQml0cylyZXR1cm5cIkV4Y2VzcyBwYWRkaW5nXCI7aWYodmFsdWU8PG91dEJpdHMtYml0cyZtYXhWKXJldHVyblwiTm9uLXplcm8gcGFkZGluZ1wifXJldHVybiByZXN1bHR9ZnVuY3Rpb24gdG9Xb3Jkc1Vuc2FmZShieXRlcyl7dmFyIHJlcz1jb252ZXJ0KGJ5dGVzLDgsNSx0cnVlKTtpZihBcnJheS5pc0FycmF5KHJlcykpcmV0dXJuIHJlc31mdW5jdGlvbiB0b1dvcmRzKGJ5dGVzKXt2YXIgcmVzPWNvbnZlcnQoYnl0ZXMsOCw1LHRydWUpO2lmKEFycmF5LmlzQXJyYXkocmVzKSlyZXR1cm4gcmVzO3Rocm93IG5ldyBFcnJvcihyZXMpfWZ1bmN0aW9uIGZyb21Xb3Jkc1Vuc2FmZSh3b3Jkcyl7dmFyIHJlcz1jb252ZXJ0KHdvcmRzLDUsOCxmYWxzZSk7aWYoQXJyYXkuaXNBcnJheShyZXMpKXJldHVybiByZXN9ZnVuY3Rpb24gZnJvbVdvcmRzKHdvcmRzKXt2YXIgcmVzPWNvbnZlcnQod29yZHMsNSw4LGZhbHNlKTtpZihBcnJheS5pc0FycmF5KHJlcykpcmV0dXJuIHJlczt0aHJvdyBuZXcgRXJyb3IocmVzKX12YXIgYmVjaDMyPXtkZWNvZGVVbnNhZmU6ZGVjb2RlVW5zYWZlLGRlY29kZTpkZWNvZGUkMixlbmNvZGU6ZW5jb2RlJDIsdG9Xb3Jkc1Vuc2FmZTp0b1dvcmRzVW5zYWZlLHRvV29yZHM6dG9Xb3Jkcyxmcm9tV29yZHNVbnNhZmU6ZnJvbVdvcmRzVW5zYWZlLGZyb21Xb3Jkczpmcm9tV29yZHN9O2NvbnN0IHZlcnNpb24kbT1cInByb3ZpZGVycy81LjEuMlwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRzPW5ldyBMb2dnZXIodmVyc2lvbiRtKTtjbGFzcyBGb3JtYXR0ZXJ7Y29uc3RydWN0b3IoKXtsb2dnZXIkcy5jaGVja05ldyhuZXcudGFyZ2V0LEZvcm1hdHRlcik7dGhpcy5mb3JtYXRzPXRoaXMuZ2V0RGVmYXVsdEZvcm1hdHMoKX1nZXREZWZhdWx0Rm9ybWF0cygpe2NvbnN0IGZvcm1hdHM9e307Y29uc3QgYWRkcmVzcz10aGlzLmFkZHJlc3MuYmluZCh0aGlzKTtjb25zdCBiaWdOdW1iZXI9dGhpcy5iaWdOdW1iZXIuYmluZCh0aGlzKTtjb25zdCBibG9ja1RhZz10aGlzLmJsb2NrVGFnLmJpbmQodGhpcyk7Y29uc3QgZGF0YT10aGlzLmRhdGEuYmluZCh0aGlzKTtjb25zdCBoYXNoPXRoaXMuaGFzaC5iaW5kKHRoaXMpO2NvbnN0IGhleD10aGlzLmhleC5iaW5kKHRoaXMpO2NvbnN0IG51bWJlcj10aGlzLm51bWJlci5iaW5kKHRoaXMpO2NvbnN0IHN0cmljdERhdGE9dj0+e3JldHVybiB0aGlzLmRhdGEodix0cnVlKX07Zm9ybWF0cy50cmFuc2FjdGlvbj17aGFzaDpoYXNoLHR5cGU6Rm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIsbnVsbCksYWNjZXNzTGlzdDpGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMuYWNjZXNzTGlzdC5iaW5kKHRoaXMpLG51bGwpLGJsb2NrSGFzaDpGb3JtYXR0ZXIuYWxsb3dOdWxsKGhhc2gsbnVsbCksYmxvY2tOdW1iZXI6Rm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIsbnVsbCksdHJhbnNhY3Rpb25JbmRleDpGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlcixudWxsKSxjb25maXJtYXRpb25zOkZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyLG51bGwpLGZyb206YWRkcmVzcyxnYXNQcmljZTpiaWdOdW1iZXIsZ2FzTGltaXQ6YmlnTnVtYmVyLHRvOkZvcm1hdHRlci5hbGxvd051bGwoYWRkcmVzcyxudWxsKSx2YWx1ZTpiaWdOdW1iZXIsbm9uY2U6bnVtYmVyLGRhdGE6ZGF0YSxyOkZvcm1hdHRlci5hbGxvd051bGwodGhpcy51aW50MjU2KSxzOkZvcm1hdHRlci5hbGxvd051bGwodGhpcy51aW50MjU2KSx2OkZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyKSxjcmVhdGVzOkZvcm1hdHRlci5hbGxvd051bGwoYWRkcmVzcyxudWxsKSxyYXc6Rm9ybWF0dGVyLmFsbG93TnVsbChkYXRhKX07Zm9ybWF0cy50cmFuc2FjdGlvblJlcXVlc3Q9e2Zyb206Rm9ybWF0dGVyLmFsbG93TnVsbChhZGRyZXNzKSxub25jZTpGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlciksZ2FzTGltaXQ6Rm9ybWF0dGVyLmFsbG93TnVsbChiaWdOdW1iZXIpLGdhc1ByaWNlOkZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSx0bzpGb3JtYXR0ZXIuYWxsb3dOdWxsKGFkZHJlc3MpLHZhbHVlOkZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxkYXRhOkZvcm1hdHRlci5hbGxvd051bGwoc3RyaWN0RGF0YSksdHlwZTpGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlciksYWNjZXNzTGlzdDpGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMuYWNjZXNzTGlzdC5iaW5kKHRoaXMpLG51bGwpfTtmb3JtYXRzLnJlY2VpcHRMb2c9e3RyYW5zYWN0aW9uSW5kZXg6bnVtYmVyLGJsb2NrTnVtYmVyOm51bWJlcix0cmFuc2FjdGlvbkhhc2g6aGFzaCxhZGRyZXNzOmFkZHJlc3MsdG9waWNzOkZvcm1hdHRlci5hcnJheU9mKGhhc2gpLGRhdGE6ZGF0YSxsb2dJbmRleDpudW1iZXIsYmxvY2tIYXNoOmhhc2h9O2Zvcm1hdHMucmVjZWlwdD17dG86Rm9ybWF0dGVyLmFsbG93TnVsbCh0aGlzLmFkZHJlc3MsbnVsbCksZnJvbTpGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMuYWRkcmVzcyxudWxsKSxjb250cmFjdEFkZHJlc3M6Rm9ybWF0dGVyLmFsbG93TnVsbChhZGRyZXNzLG51bGwpLHRyYW5zYWN0aW9uSW5kZXg6bnVtYmVyLHJvb3Q6Rm9ybWF0dGVyLmFsbG93TnVsbChoZXgpLGdhc1VzZWQ6YmlnTnVtYmVyLGxvZ3NCbG9vbTpGb3JtYXR0ZXIuYWxsb3dOdWxsKGRhdGEpLGJsb2NrSGFzaDpoYXNoLHRyYW5zYWN0aW9uSGFzaDpoYXNoLGxvZ3M6Rm9ybWF0dGVyLmFycmF5T2YodGhpcy5yZWNlaXB0TG9nLmJpbmQodGhpcykpLGJsb2NrTnVtYmVyOm51bWJlcixjb25maXJtYXRpb25zOkZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyLG51bGwpLGN1bXVsYXRpdmVHYXNVc2VkOmJpZ051bWJlcixzdGF0dXM6Rm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIpfTtmb3JtYXRzLmJsb2NrPXtoYXNoOmhhc2gscGFyZW50SGFzaDpoYXNoLG51bWJlcjpudW1iZXIsdGltZXN0YW1wOm51bWJlcixub25jZTpGb3JtYXR0ZXIuYWxsb3dOdWxsKGhleCksZGlmZmljdWx0eTp0aGlzLmRpZmZpY3VsdHkuYmluZCh0aGlzKSxnYXNMaW1pdDpiaWdOdW1iZXIsZ2FzVXNlZDpiaWdOdW1iZXIsbWluZXI6YWRkcmVzcyxleHRyYURhdGE6ZGF0YSx0cmFuc2FjdGlvbnM6Rm9ybWF0dGVyLmFsbG93TnVsbChGb3JtYXR0ZXIuYXJyYXlPZihoYXNoKSl9O2Zvcm1hdHMuYmxvY2tXaXRoVHJhbnNhY3Rpb25zPXNoYWxsb3dDb3B5KGZvcm1hdHMuYmxvY2spO2Zvcm1hdHMuYmxvY2tXaXRoVHJhbnNhY3Rpb25zLnRyYW5zYWN0aW9ucz1Gb3JtYXR0ZXIuYWxsb3dOdWxsKEZvcm1hdHRlci5hcnJheU9mKHRoaXMudHJhbnNhY3Rpb25SZXNwb25zZS5iaW5kKHRoaXMpKSk7Zm9ybWF0cy5maWx0ZXI9e2Zyb21CbG9jazpGb3JtYXR0ZXIuYWxsb3dOdWxsKGJsb2NrVGFnLHVuZGVmaW5lZCksdG9CbG9jazpGb3JtYXR0ZXIuYWxsb3dOdWxsKGJsb2NrVGFnLHVuZGVmaW5lZCksYmxvY2tIYXNoOkZvcm1hdHRlci5hbGxvd051bGwoaGFzaCx1bmRlZmluZWQpLGFkZHJlc3M6Rm9ybWF0dGVyLmFsbG93TnVsbChhZGRyZXNzLHVuZGVmaW5lZCksdG9waWNzOkZvcm1hdHRlci5hbGxvd051bGwodGhpcy50b3BpY3MuYmluZCh0aGlzKSx1bmRlZmluZWQpfTtmb3JtYXRzLmZpbHRlckxvZz17YmxvY2tOdW1iZXI6Rm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIpLGJsb2NrSGFzaDpGb3JtYXR0ZXIuYWxsb3dOdWxsKGhhc2gpLHRyYW5zYWN0aW9uSW5kZXg6bnVtYmVyLHJlbW92ZWQ6Rm9ybWF0dGVyLmFsbG93TnVsbCh0aGlzLmJvb2xlYW4uYmluZCh0aGlzKSksYWRkcmVzczphZGRyZXNzLGRhdGE6Rm9ybWF0dGVyLmFsbG93RmFsc2lzaChkYXRhLFwiMHhcIiksdG9waWNzOkZvcm1hdHRlci5hcnJheU9mKGhhc2gpLHRyYW5zYWN0aW9uSGFzaDpoYXNoLGxvZ0luZGV4Om51bWJlcn07cmV0dXJuIGZvcm1hdHN9YWNjZXNzTGlzdChhY2Nlc3NMaXN0KXtyZXR1cm4gYWNjZXNzTGlzdGlmeShhY2Nlc3NMaXN0fHxbXSl9bnVtYmVyKG51bWJlcil7aWYobnVtYmVyPT09XCIweFwiKXtyZXR1cm4gMH1yZXR1cm4gQmlnTnVtYmVyLmZyb20obnVtYmVyKS50b051bWJlcigpfWJpZ051bWJlcih2YWx1ZSl7cmV0dXJuIEJpZ051bWJlci5mcm9tKHZhbHVlKX1ib29sZWFuKHZhbHVlKXtpZih0eXBlb2YgdmFsdWU9PT1cImJvb2xlYW5cIil7cmV0dXJuIHZhbHVlfWlmKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpe3ZhbHVlPXZhbHVlLnRvTG93ZXJDYXNlKCk7aWYodmFsdWU9PT1cInRydWVcIil7cmV0dXJuIHRydWV9aWYodmFsdWU9PT1cImZhbHNlXCIpe3JldHVybiBmYWxzZX19dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBib29sZWFuIC0gXCIrdmFsdWUpfWhleCh2YWx1ZSxzdHJpY3Qpe2lmKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpe2lmKCFzdHJpY3QmJnZhbHVlLnN1YnN0cmluZygwLDIpIT09XCIweFwiKXt2YWx1ZT1cIjB4XCIrdmFsdWV9aWYoaXNIZXhTdHJpbmcodmFsdWUpKXtyZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKX19cmV0dXJuIGxvZ2dlciRzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgaGFzaFwiLFwidmFsdWVcIix2YWx1ZSl9ZGF0YSh2YWx1ZSxzdHJpY3Qpe2NvbnN0IHJlc3VsdD10aGlzLmhleCh2YWx1ZSxzdHJpY3QpO2lmKHJlc3VsdC5sZW5ndGglMiE9PTApe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgZGF0YTsgb2RkLWxlbmd0aCAtIFwiK3ZhbHVlKX1yZXR1cm4gcmVzdWx0fWFkZHJlc3ModmFsdWUpe3JldHVybiBnZXRBZGRyZXNzKHZhbHVlKX1jYWxsQWRkcmVzcyh2YWx1ZSl7aWYoIWlzSGV4U3RyaW5nKHZhbHVlLDMyKSl7cmV0dXJuIG51bGx9Y29uc3QgYWRkcmVzcz1nZXRBZGRyZXNzKGhleERhdGFTbGljZSh2YWx1ZSwxMikpO3JldHVybiBhZGRyZXNzPT09QWRkcmVzc1plcm8/bnVsbDphZGRyZXNzfWNvbnRyYWN0QWRkcmVzcyh2YWx1ZSl7cmV0dXJuIGdldENvbnRyYWN0QWRkcmVzcyh2YWx1ZSl9YmxvY2tUYWcoYmxvY2tUYWcpe2lmKGJsb2NrVGFnPT1udWxsKXtyZXR1cm5cImxhdGVzdFwifWlmKGJsb2NrVGFnPT09XCJlYXJsaWVzdFwiKXtyZXR1cm5cIjB4MFwifWlmKGJsb2NrVGFnPT09XCJsYXRlc3RcInx8YmxvY2tUYWc9PT1cInBlbmRpbmdcIil7cmV0dXJuIGJsb2NrVGFnfWlmKHR5cGVvZiBibG9ja1RhZz09PVwibnVtYmVyXCJ8fGlzSGV4U3RyaW5nKGJsb2NrVGFnKSl7cmV0dXJuIGhleFZhbHVlKGJsb2NrVGFnKX10aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJsb2NrVGFnXCIpfWhhc2godmFsdWUsc3RyaWN0KXtjb25zdCByZXN1bHQ9dGhpcy5oZXgodmFsdWUsc3RyaWN0KTtpZihoZXhEYXRhTGVuZ3RoKHJlc3VsdCkhPT0zMil7cmV0dXJuIGxvZ2dlciRzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgaGFzaFwiLFwidmFsdWVcIix2YWx1ZSl9cmV0dXJuIHJlc3VsdH1kaWZmaWN1bHR5KHZhbHVlKXtpZih2YWx1ZT09bnVsbCl7cmV0dXJuIG51bGx9Y29uc3Qgdj1CaWdOdW1iZXIuZnJvbSh2YWx1ZSk7dHJ5e3JldHVybiB2LnRvTnVtYmVyKCl9Y2F0Y2goZXJyb3Ipe31yZXR1cm4gbnVsbH11aW50MjU2KHZhbHVlKXtpZighaXNIZXhTdHJpbmcodmFsdWUpKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHVpbnQyNTZcIil9cmV0dXJuIGhleFplcm9QYWQodmFsdWUsMzIpfV9ibG9jayh2YWx1ZSxmb3JtYXQpe2lmKHZhbHVlLmF1dGhvciE9bnVsbCYmdmFsdWUubWluZXI9PW51bGwpe3ZhbHVlLm1pbmVyPXZhbHVlLmF1dGhvcn1yZXR1cm4gRm9ybWF0dGVyLmNoZWNrKGZvcm1hdCx2YWx1ZSl9YmxvY2sodmFsdWUpe3JldHVybiB0aGlzLl9ibG9jayh2YWx1ZSx0aGlzLmZvcm1hdHMuYmxvY2spfWJsb2NrV2l0aFRyYW5zYWN0aW9ucyh2YWx1ZSl7cmV0dXJuIHRoaXMuX2Jsb2NrKHZhbHVlLHRoaXMuZm9ybWF0cy5ibG9ja1dpdGhUcmFuc2FjdGlvbnMpfXRyYW5zYWN0aW9uUmVxdWVzdCh2YWx1ZSl7cmV0dXJuIEZvcm1hdHRlci5jaGVjayh0aGlzLmZvcm1hdHMudHJhbnNhY3Rpb25SZXF1ZXN0LHZhbHVlKX10cmFuc2FjdGlvblJlc3BvbnNlKHRyYW5zYWN0aW9uKXtpZih0cmFuc2FjdGlvbi5nYXMhPW51bGwmJnRyYW5zYWN0aW9uLmdhc0xpbWl0PT1udWxsKXt0cmFuc2FjdGlvbi5nYXNMaW1pdD10cmFuc2FjdGlvbi5nYXN9aWYodHJhbnNhY3Rpb24udG8mJkJpZ051bWJlci5mcm9tKHRyYW5zYWN0aW9uLnRvKS5pc1plcm8oKSl7dHJhbnNhY3Rpb24udG89XCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIn1pZih0cmFuc2FjdGlvbi5pbnB1dCE9bnVsbCYmdHJhbnNhY3Rpb24uZGF0YT09bnVsbCl7dHJhbnNhY3Rpb24uZGF0YT10cmFuc2FjdGlvbi5pbnB1dH1pZih0cmFuc2FjdGlvbi50bz09bnVsbCYmdHJhbnNhY3Rpb24uY3JlYXRlcz09bnVsbCl7dHJhbnNhY3Rpb24uY3JlYXRlcz10aGlzLmNvbnRyYWN0QWRkcmVzcyh0cmFuc2FjdGlvbil9aWYodHJhbnNhY3Rpb24udHlwZT09PTEmJnRyYW5zYWN0aW9uLmFjY2Vzc0xpc3Q9PW51bGwpe3RyYW5zYWN0aW9uLmFjY2Vzc0xpc3Q9W119Y29uc3QgcmVzdWx0PUZvcm1hdHRlci5jaGVjayh0aGlzLmZvcm1hdHMudHJhbnNhY3Rpb24sdHJhbnNhY3Rpb24pO2lmKHRyYW5zYWN0aW9uLmNoYWluSWQhPW51bGwpe2xldCBjaGFpbklkPXRyYW5zYWN0aW9uLmNoYWluSWQ7aWYoaXNIZXhTdHJpbmcoY2hhaW5JZCkpe2NoYWluSWQ9QmlnTnVtYmVyLmZyb20oY2hhaW5JZCkudG9OdW1iZXIoKX1yZXN1bHQuY2hhaW5JZD1jaGFpbklkfWVsc2V7bGV0IGNoYWluSWQ9dHJhbnNhY3Rpb24ubmV0d29ya0lkO2lmKGNoYWluSWQ9PW51bGwmJnJlc3VsdC52PT1udWxsKXtjaGFpbklkPXRyYW5zYWN0aW9uLmNoYWluSWR9aWYoaXNIZXhTdHJpbmcoY2hhaW5JZCkpe2NoYWluSWQ9QmlnTnVtYmVyLmZyb20oY2hhaW5JZCkudG9OdW1iZXIoKX1pZih0eXBlb2YgY2hhaW5JZCE9PVwibnVtYmVyXCImJnJlc3VsdC52IT1udWxsKXtjaGFpbklkPShyZXN1bHQudi0zNSkvMjtpZihjaGFpbklkPDApe2NoYWluSWQ9MH1jaGFpbklkPXBhcnNlSW50KGNoYWluSWQpfWlmKHR5cGVvZiBjaGFpbklkIT09XCJudW1iZXJcIil7Y2hhaW5JZD0wfXJlc3VsdC5jaGFpbklkPWNoYWluSWR9aWYocmVzdWx0LmJsb2NrSGFzaCYmcmVzdWx0LmJsb2NrSGFzaC5yZXBsYWNlKC8wL2csXCJcIik9PT1cInhcIil7cmVzdWx0LmJsb2NrSGFzaD1udWxsfXJldHVybiByZXN1bHR9dHJhbnNhY3Rpb24odmFsdWUpe3JldHVybiBwYXJzZSh2YWx1ZSl9cmVjZWlwdExvZyh2YWx1ZSl7cmV0dXJuIEZvcm1hdHRlci5jaGVjayh0aGlzLmZvcm1hdHMucmVjZWlwdExvZyx2YWx1ZSl9cmVjZWlwdCh2YWx1ZSl7Y29uc3QgcmVzdWx0PUZvcm1hdHRlci5jaGVjayh0aGlzLmZvcm1hdHMucmVjZWlwdCx2YWx1ZSk7aWYocmVzdWx0LnJvb3QhPW51bGwpe2lmKHJlc3VsdC5yb290Lmxlbmd0aDw9NCl7Y29uc3QgdmFsdWU9QmlnTnVtYmVyLmZyb20ocmVzdWx0LnJvb3QpLnRvTnVtYmVyKCk7aWYodmFsdWU9PT0wfHx2YWx1ZT09PTEpe2lmKHJlc3VsdC5zdGF0dXMhPW51bGwmJnJlc3VsdC5zdGF0dXMhPT12YWx1ZSl7bG9nZ2VyJHMudGhyb3dBcmd1bWVudEVycm9yKFwiYWx0LXJvb3Qtc3RhdHVzL3N0YXR1cyBtaXNtYXRjaFwiLFwidmFsdWVcIix7cm9vdDpyZXN1bHQucm9vdCxzdGF0dXM6cmVzdWx0LnN0YXR1c30pfXJlc3VsdC5zdGF0dXM9dmFsdWU7ZGVsZXRlIHJlc3VsdC5yb290fWVsc2V7bG9nZ2VyJHMudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhbHQtcm9vdC1zdGF0dXNcIixcInZhbHVlLnJvb3RcIixyZXN1bHQucm9vdCl9fWVsc2UgaWYocmVzdWx0LnJvb3QubGVuZ3RoIT09NjYpe2xvZ2dlciRzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgcm9vdCBoYXNoXCIsXCJ2YWx1ZS5yb290XCIscmVzdWx0LnJvb3QpfX1pZihyZXN1bHQuc3RhdHVzIT1udWxsKXtyZXN1bHQuYnl6YW50aXVtPXRydWV9cmV0dXJuIHJlc3VsdH10b3BpY3ModmFsdWUpe2lmKEFycmF5LmlzQXJyYXkodmFsdWUpKXtyZXR1cm4gdmFsdWUubWFwKHY9PnRoaXMudG9waWNzKHYpKX1lbHNlIGlmKHZhbHVlIT1udWxsKXtyZXR1cm4gdGhpcy5oYXNoKHZhbHVlLHRydWUpfXJldHVybiBudWxsfWZpbHRlcih2YWx1ZSl7cmV0dXJuIEZvcm1hdHRlci5jaGVjayh0aGlzLmZvcm1hdHMuZmlsdGVyLHZhbHVlKX1maWx0ZXJMb2codmFsdWUpe3JldHVybiBGb3JtYXR0ZXIuY2hlY2sodGhpcy5mb3JtYXRzLmZpbHRlckxvZyx2YWx1ZSl9c3RhdGljIGNoZWNrKGZvcm1hdCxvYmplY3Qpe2NvbnN0IHJlc3VsdD17fTtmb3IoY29uc3Qga2V5IGluIGZvcm1hdCl7dHJ5e2NvbnN0IHZhbHVlPWZvcm1hdFtrZXldKG9iamVjdFtrZXldKTtpZih2YWx1ZSE9PXVuZGVmaW5lZCl7cmVzdWx0W2tleV09dmFsdWV9fWNhdGNoKGVycm9yKXtlcnJvci5jaGVja0tleT1rZXk7ZXJyb3IuY2hlY2tWYWx1ZT1vYmplY3Rba2V5XTt0aHJvdyBlcnJvcn19cmV0dXJuIHJlc3VsdH1zdGF0aWMgYWxsb3dOdWxsKGZvcm1hdCxudWxsVmFsdWUpe3JldHVybiBmdW5jdGlvbih2YWx1ZSl7aWYodmFsdWU9PW51bGwpe3JldHVybiBudWxsVmFsdWV9cmV0dXJuIGZvcm1hdCh2YWx1ZSl9fXN0YXRpYyBhbGxvd0ZhbHNpc2goZm9ybWF0LHJlcGxhY2VWYWx1ZSl7cmV0dXJuIGZ1bmN0aW9uKHZhbHVlKXtpZighdmFsdWUpe3JldHVybiByZXBsYWNlVmFsdWV9cmV0dXJuIGZvcm1hdCh2YWx1ZSl9fXN0YXRpYyBhcnJheU9mKGZvcm1hdCl7cmV0dXJuIGZ1bmN0aW9uKGFycmF5KXtpZighQXJyYXkuaXNBcnJheShhcnJheSkpe3Rocm93IG5ldyBFcnJvcihcIm5vdCBhbiBhcnJheVwiKX1jb25zdCByZXN1bHQ9W107YXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7cmVzdWx0LnB1c2goZm9ybWF0KHZhbHVlKSl9KTtyZXR1cm4gcmVzdWx0fX19ZnVuY3Rpb24gaXNDb21tdW5pdHlSZXNvdXJjYWJsZSh2YWx1ZSl7cmV0dXJuIHZhbHVlJiZ0eXBlb2YgdmFsdWUuaXNDb21tdW5pdHlSZXNvdXJjZT09PVwiZnVuY3Rpb25cIn1mdW5jdGlvbiBpc0NvbW11bml0eVJlc291cmNlKHZhbHVlKXtyZXR1cm4gaXNDb21tdW5pdHlSZXNvdXJjYWJsZSh2YWx1ZSkmJnZhbHVlLmlzQ29tbXVuaXR5UmVzb3VyY2UoKX1sZXQgdGhyb3R0bGVNZXNzYWdlPWZhbHNlO2Z1bmN0aW9uIHNob3dUaHJvdHRsZU1lc3NhZ2UoKXtpZih0aHJvdHRsZU1lc3NhZ2Upe3JldHVybn10aHJvdHRsZU1lc3NhZ2U9dHJ1ZTtjb25zb2xlLmxvZyhcIj09PT09PT09PSBOT1RJQ0UgPT09PT09PT09XCIpO2NvbnNvbGUubG9nKFwiUmVxdWVzdC1SYXRlIEV4Y2VlZGVkICAodGhpcyBtZXNzYWdlIHdpbGwgbm90IGJlIHJlcGVhdGVkKVwiKTtjb25zb2xlLmxvZyhcIlwiKTtjb25zb2xlLmxvZyhcIlRoZSBkZWZhdWx0IEFQSSBrZXlzIGZvciBlYWNoIHNlcnZpY2UgYXJlIHByb3ZpZGVkIGFzIGEgaGlnaGx5LXRocm90dGxlZCxcIik7Y29uc29sZS5sb2coXCJjb21tdW5pdHkgcmVzb3VyY2UgZm9yIGxvdy10cmFmZmljIHByb2plY3RzIGFuZCBlYXJseSBwcm90b3R5cGluZy5cIik7Y29uc29sZS5sb2coXCJcIik7Y29uc29sZS5sb2coXCJXaGlsZSB5b3VyIGFwcGxpY2F0aW9uIHdpbGwgY29udGludWUgdG8gZnVuY3Rpb24sIHdlIGhpZ2hseSByZWNvbW1lbmRlZFwiKTtjb25zb2xlLmxvZyhcInNpZ25pbmcgdXAgZm9yIHlvdXIgb3duIEFQSSBrZXlzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UsIGluY3JlYXNlIHlvdXJcIik7Y29uc29sZS5sb2coXCJyZXF1ZXN0IHJhdGUvbGltaXQgYW5kIGVuYWJsZSBvdGhlciBwZXJrcywgc3VjaCBhcyBtZXRyaWNzIGFuZCBhZHZhbmNlZCBBUElzLlwiKTtjb25zb2xlLmxvZyhcIlwiKTtjb25zb2xlLmxvZyhcIkZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vZG9jcy5ldGhlcnMuaW8vYXBpLWtleXMvXCIpO2NvbnNvbGUubG9nKFwiPT09PT09PT09PT09PT09PT09PT09PT09PT1cIil9XCJ1c2Ugc3RyaWN0XCI7dmFyIF9fYXdhaXRlciQ4PXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkdD1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7ZnVuY3Rpb24gY2hlY2tUb3BpYyh0b3BpYyl7aWYodG9waWM9PW51bGwpe3JldHVyblwibnVsbFwifWlmKGhleERhdGFMZW5ndGgodG9waWMpIT09MzIpe2xvZ2dlciR0LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdG9waWNcIixcInRvcGljXCIsdG9waWMpfXJldHVybiB0b3BpYy50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIHNlcmlhbGl6ZVRvcGljcyh0b3BpY3Mpe3RvcGljcz10b3BpY3Muc2xpY2UoKTt3aGlsZSh0b3BpY3MubGVuZ3RoPjAmJnRvcGljc1t0b3BpY3MubGVuZ3RoLTFdPT1udWxsKXt0b3BpY3MucG9wKCl9cmV0dXJuIHRvcGljcy5tYXAodG9waWM9PntpZihBcnJheS5pc0FycmF5KHRvcGljKSl7Y29uc3QgdW5pcXVlPXt9O3RvcGljLmZvckVhY2godG9waWM9Pnt1bmlxdWVbY2hlY2tUb3BpYyh0b3BpYyldPXRydWV9KTtjb25zdCBzb3J0ZWQ9T2JqZWN0LmtleXModW5pcXVlKTtzb3J0ZWQuc29ydCgpO3JldHVybiBzb3J0ZWQuam9pbihcInxcIil9ZWxzZXtyZXR1cm4gY2hlY2tUb3BpYyh0b3BpYyl9fSkuam9pbihcIiZcIil9ZnVuY3Rpb24gZGVzZXJpYWxpemVUb3BpY3MoZGF0YSl7aWYoZGF0YT09PVwiXCIpe3JldHVybltdfXJldHVybiBkYXRhLnNwbGl0KC8mL2cpLm1hcCh0b3BpYz0+e2lmKHRvcGljPT09XCJcIil7cmV0dXJuW119Y29uc3QgY29tcHM9dG9waWMuc3BsaXQoXCJ8XCIpLm1hcCh0b3BpYz0+e3JldHVybiB0b3BpYz09PVwibnVsbFwiP251bGw6dG9waWN9KTtyZXR1cm4gY29tcHMubGVuZ3RoPT09MT9jb21wc1swXTpjb21wc30pfWZ1bmN0aW9uIGdldEV2ZW50VGFnJDEoZXZlbnROYW1lKXtpZih0eXBlb2YgZXZlbnROYW1lPT09XCJzdHJpbmdcIil7ZXZlbnROYW1lPWV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO2lmKGhleERhdGFMZW5ndGgoZXZlbnROYW1lKT09PTMyKXtyZXR1cm5cInR4OlwiK2V2ZW50TmFtZX1pZihldmVudE5hbWUuaW5kZXhPZihcIjpcIik9PT0tMSl7cmV0dXJuIGV2ZW50TmFtZX19ZWxzZSBpZihBcnJheS5pc0FycmF5KGV2ZW50TmFtZSkpe3JldHVyblwiZmlsdGVyOio6XCIrc2VyaWFsaXplVG9waWNzKGV2ZW50TmFtZSl9ZWxzZSBpZihGb3JrRXZlbnQuaXNGb3JrRXZlbnQoZXZlbnROYW1lKSl7bG9nZ2VyJHQud2FybihcIm5vdCBpbXBsZW1lbnRlZFwiKTt0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIil9ZWxzZSBpZihldmVudE5hbWUmJnR5cGVvZiBldmVudE5hbWU9PT1cIm9iamVjdFwiKXtyZXR1cm5cImZpbHRlcjpcIisoZXZlbnROYW1lLmFkZHJlc3N8fFwiKlwiKStcIjpcIitzZXJpYWxpemVUb3BpY3MoZXZlbnROYW1lLnRvcGljc3x8W10pfXRocm93IG5ldyBFcnJvcihcImludmFsaWQgZXZlbnQgLSBcIitldmVudE5hbWUpfWZ1bmN0aW9uIGdldFRpbWUoKXtyZXR1cm4obmV3IERhdGUpLmdldFRpbWUoKX1mdW5jdGlvbiBzdGFsbChkdXJhdGlvbil7cmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmU9PntzZXRUaW1lb3V0KHJlc29sdmUsZHVyYXRpb24pfSl9Y29uc3QgUG9sbGFibGVFdmVudHM9W1wiYmxvY2tcIixcIm5ldHdvcmtcIixcInBlbmRpbmdcIixcInBvbGxcIl07Y2xhc3MgRXZlbnR7Y29uc3RydWN0b3IodGFnLGxpc3RlbmVyLG9uY2Upe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJ0YWdcIix0YWcpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJsaXN0ZW5lclwiLGxpc3RlbmVyKTtkZWZpbmVSZWFkT25seSh0aGlzLFwib25jZVwiLG9uY2UpfWdldCBldmVudCgpe3N3aXRjaCh0aGlzLnR5cGUpe2Nhc2VcInR4XCI6cmV0dXJuIHRoaXMuaGFzaDtjYXNlXCJmaWx0ZXJcIjpyZXR1cm4gdGhpcy5maWx0ZXJ9cmV0dXJuIHRoaXMudGFnfWdldCB0eXBlKCl7cmV0dXJuIHRoaXMudGFnLnNwbGl0KFwiOlwiKVswXX1nZXQgaGFzaCgpe2NvbnN0IGNvbXBzPXRoaXMudGFnLnNwbGl0KFwiOlwiKTtpZihjb21wc1swXSE9PVwidHhcIil7cmV0dXJuIG51bGx9cmV0dXJuIGNvbXBzWzFdfWdldCBmaWx0ZXIoKXtjb25zdCBjb21wcz10aGlzLnRhZy5zcGxpdChcIjpcIik7aWYoY29tcHNbMF0hPT1cImZpbHRlclwiKXtyZXR1cm4gbnVsbH1jb25zdCBhZGRyZXNzPWNvbXBzWzFdO2NvbnN0IHRvcGljcz1kZXNlcmlhbGl6ZVRvcGljcyhjb21wc1syXSk7Y29uc3QgZmlsdGVyPXt9O2lmKHRvcGljcy5sZW5ndGg+MCl7ZmlsdGVyLnRvcGljcz10b3BpY3N9aWYoYWRkcmVzcyYmYWRkcmVzcyE9PVwiKlwiKXtmaWx0ZXIuYWRkcmVzcz1hZGRyZXNzfXJldHVybiBmaWx0ZXJ9cG9sbGFibGUoKXtyZXR1cm4gdGhpcy50YWcuaW5kZXhPZihcIjpcIik+PTB8fFBvbGxhYmxlRXZlbnRzLmluZGV4T2YodGhpcy50YWcpPj0wfX1jb25zdCBjb2luSW5mb3M9ezA6e3N5bWJvbDpcImJ0Y1wiLHAycGtoOjAscDJzaDo1LHByZWZpeDpcImJjXCJ9LDI6e3N5bWJvbDpcImx0Y1wiLHAycGtoOjQ4LHAyc2g6NTAscHJlZml4OlwibHRjXCJ9LDM6e3N5bWJvbDpcImRvZ2VcIixwMnBraDozMCxwMnNoOjIyfSw2MDp7c3ltYm9sOlwiZXRoXCIsaWxrOlwiZXRoXCJ9LDYxOntzeW1ib2w6XCJldGNcIixpbGs6XCJldGhcIn0sNzAwOntzeW1ib2w6XCJ4ZGFpXCIsaWxrOlwiZXRoXCJ9fTtmdW5jdGlvbiBieXRlczMyaWZ5KHZhbHVlKXtyZXR1cm4gaGV4WmVyb1BhZChCaWdOdW1iZXIuZnJvbSh2YWx1ZSkudG9IZXhTdHJpbmcoKSwzMil9ZnVuY3Rpb24gYmFzZTU4RW5jb2RlKGRhdGEpe3JldHVybiBCYXNlNTguZW5jb2RlKGNvbmNhdChbZGF0YSxoZXhEYXRhU2xpY2Uoc2hhMjU2JDEoc2hhMjU2JDEoZGF0YSkpLDAsNCldKSl9Y2xhc3MgUmVzb2x2ZXJ7Y29uc3RydWN0b3IocHJvdmlkZXIsYWRkcmVzcyxuYW1lKXtkZWZpbmVSZWFkT25seSh0aGlzLFwicHJvdmlkZXJcIixwcm92aWRlcik7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIm5hbWVcIixuYW1lKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiYWRkcmVzc1wiLHByb3ZpZGVyLmZvcm1hdHRlci5hZGRyZXNzKGFkZHJlc3MpKX1fZmV0Y2hCeXRlcyhzZWxlY3RvcixwYXJhbWV0ZXJzKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IHRyYW5zYWN0aW9uPXt0bzp0aGlzLmFkZHJlc3MsZGF0YTpoZXhDb25jYXQoW3NlbGVjdG9yLG5hbWVoYXNoKHRoaXMubmFtZSkscGFyYW1ldGVyc3x8XCIweFwiXSl9O2NvbnN0IHJlc3VsdD15aWVsZCB0aGlzLnByb3ZpZGVyLmNhbGwodHJhbnNhY3Rpb24pO2lmKHJlc3VsdD09PVwiMHhcIil7cmV0dXJuIG51bGx9Y29uc3Qgb2Zmc2V0PUJpZ051bWJlci5mcm9tKGhleERhdGFTbGljZShyZXN1bHQsMCwzMikpLnRvTnVtYmVyKCk7Y29uc3QgbGVuZ3RoPUJpZ051bWJlci5mcm9tKGhleERhdGFTbGljZShyZXN1bHQsb2Zmc2V0LG9mZnNldCszMikpLnRvTnVtYmVyKCk7cmV0dXJuIGhleERhdGFTbGljZShyZXN1bHQsb2Zmc2V0KzMyLG9mZnNldCszMitsZW5ndGgpfSl9X2dldEFkZHJlc3MoY29pblR5cGUsaGV4Qnl0ZXMpe2NvbnN0IGNvaW5JbmZvPWNvaW5JbmZvc1tTdHJpbmcoY29pblR5cGUpXTtpZihjb2luSW5mbz09bnVsbCl7bG9nZ2VyJHQudGhyb3dFcnJvcihgdW5zdXBwb3J0ZWQgY29pbiB0eXBlOiAke2NvaW5UeXBlfWAsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpgZ2V0QWRkcmVzcygke2NvaW5UeXBlfSlgfSl9aWYoY29pbkluZm8uaWxrPT09XCJldGhcIil7cmV0dXJuIHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmFkZHJlc3MoaGV4Qnl0ZXMpfWNvbnN0IGJ5dGVzPWFycmF5aWZ5KGhleEJ5dGVzKTtpZihjb2luSW5mby5wMnBraCE9bnVsbCl7Y29uc3QgcDJwa2g9aGV4Qnl0ZXMubWF0Y2goL14weDc2YTkoWzAtOWEtZl1bMC05YS1mXSkoWzAtOWEtZl0qKTg4YWMkLyk7aWYocDJwa2gpe2NvbnN0IGxlbmd0aD1wYXJzZUludChwMnBraFsxXSwxNik7aWYocDJwa2hbMl0ubGVuZ3RoPT09bGVuZ3RoKjImJmxlbmd0aD49MSYmbGVuZ3RoPD03NSl7cmV0dXJuIGJhc2U1OEVuY29kZShjb25jYXQoW1tjb2luSW5mby5wMnBraF0sXCIweFwiK3AycGtoWzJdXSkpfX19aWYoY29pbkluZm8ucDJzaCE9bnVsbCl7Y29uc3QgcDJzaD1oZXhCeXRlcy5tYXRjaCgvXjB4YTkoWzAtOWEtZl1bMC05YS1mXSkoWzAtOWEtZl0qKTg3JC8pO2lmKHAyc2gpe2NvbnN0IGxlbmd0aD1wYXJzZUludChwMnNoWzFdLDE2KTtpZihwMnNoWzJdLmxlbmd0aD09PWxlbmd0aCoyJiZsZW5ndGg+PTEmJmxlbmd0aDw9NzUpe3JldHVybiBiYXNlNThFbmNvZGUoY29uY2F0KFtbY29pbkluZm8ucDJzaF0sXCIweFwiK3Ayc2hbMl1dKSl9fX1pZihjb2luSW5mby5wcmVmaXghPW51bGwpe2NvbnN0IGxlbmd0aD1ieXRlc1sxXTtsZXQgdmVyc2lvbj1ieXRlc1swXTtpZih2ZXJzaW9uPT09MCl7aWYobGVuZ3RoIT09MjAmJmxlbmd0aCE9PTMyKXt2ZXJzaW9uPS0xfX1lbHNle3ZlcnNpb249LTF9aWYodmVyc2lvbj49MCYmYnl0ZXMubGVuZ3RoPT09MitsZW5ndGgmJmxlbmd0aD49MSYmbGVuZ3RoPD03NSl7Y29uc3Qgd29yZHM9YmVjaDMyLnRvV29yZHMoYnl0ZXMuc2xpY2UoMikpO3dvcmRzLnVuc2hpZnQodmVyc2lvbik7cmV0dXJuIGJlY2gzMi5lbmNvZGUoY29pbkluZm8ucHJlZml4LHdvcmRzKX19cmV0dXJuIG51bGx9Z2V0QWRkcmVzcyhjb2luVHlwZSl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtpZihjb2luVHlwZT09bnVsbCl7Y29pblR5cGU9NjB9aWYoY29pblR5cGU9PT02MCl7Y29uc3QgdHJhbnNhY3Rpb249e3RvOnRoaXMuYWRkcmVzcyxkYXRhOlwiMHgzYjNiNTdkZVwiK25hbWVoYXNoKHRoaXMubmFtZSkuc3Vic3RyaW5nKDIpfTtjb25zdCBoZXhCeXRlcz15aWVsZCB0aGlzLnByb3ZpZGVyLmNhbGwodHJhbnNhY3Rpb24pO2lmKGhleEJ5dGVzPT09XCIweFwifHxoZXhCeXRlcz09PUhhc2haZXJvKXtyZXR1cm4gbnVsbH1yZXR1cm4gdGhpcy5wcm92aWRlci5mb3JtYXR0ZXIuY2FsbEFkZHJlc3MoaGV4Qnl0ZXMpfWNvbnN0IGhleEJ5dGVzPXlpZWxkIHRoaXMuX2ZldGNoQnl0ZXMoXCIweGYxY2I3ZTA2XCIsYnl0ZXMzMmlmeShjb2luVHlwZSkpO2lmKGhleEJ5dGVzPT1udWxsfHxoZXhCeXRlcz09PVwiMHhcIil7cmV0dXJuIG51bGx9Y29uc3QgYWRkcmVzcz10aGlzLl9nZXRBZGRyZXNzKGNvaW5UeXBlLGhleEJ5dGVzKTtpZihhZGRyZXNzPT1udWxsKXtsb2dnZXIkdC50aHJvd0Vycm9yKGBpbnZhbGlkIG9yIHVuc3VwcG9ydGVkIGNvaW4gZGF0YWAsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpgZ2V0QWRkcmVzcygke2NvaW5UeXBlfSlgLGNvaW5UeXBlOmNvaW5UeXBlLGRhdGE6aGV4Qnl0ZXN9KX1yZXR1cm4gYWRkcmVzc30pfWdldENvbnRlbnRIYXNoKCl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBoZXhCeXRlcz15aWVsZCB0aGlzLl9mZXRjaEJ5dGVzKFwiMHhiYzFjNThkMVwiKTtpZihoZXhCeXRlcz09bnVsbHx8aGV4Qnl0ZXM9PT1cIjB4XCIpe3JldHVybiBudWxsfWNvbnN0IGlwZnM9aGV4Qnl0ZXMubWF0Y2goL14weGUzMDEwMTcwKChbMC05YS1mXVswLTlhLWZdKShbMC05YS1mXVswLTlhLWZdKShbMC05YS1mXSopKSQvKTtpZihpcGZzKXtjb25zdCBsZW5ndGg9cGFyc2VJbnQoaXBmc1szXSwxNik7aWYoaXBmc1s0XS5sZW5ndGg9PT1sZW5ndGgqMil7cmV0dXJuXCJpcGZzOi8vXCIrQmFzZTU4LmVuY29kZShcIjB4XCIraXBmc1sxXSl9fWNvbnN0IHN3YXJtPWhleEJ5dGVzLm1hdGNoKC9eMHhlNDAxMDFmYTAxMWIyMChbMC05YS1mXSopJC8pO2lmKHN3YXJtKXtpZihzd2FybVsxXS5sZW5ndGg9PT0zMioyKXtyZXR1cm5cImJ6ejovL1wiK3N3YXJtWzFdfX1yZXR1cm4gbG9nZ2VyJHQudGhyb3dFcnJvcihgaW52YWxpZCBvciB1bnN1cHBvcnRlZCBjb250ZW50IGhhc2ggZGF0YWAsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcImdldENvbnRlbnRIYXNoKClcIixkYXRhOmhleEJ5dGVzfSl9KX1nZXRUZXh0KGtleSl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtsZXQga2V5Qnl0ZXM9dG9VdGY4Qnl0ZXMoa2V5KTtrZXlCeXRlcz1jb25jYXQoW2J5dGVzMzJpZnkoNjQpLGJ5dGVzMzJpZnkoa2V5Qnl0ZXMubGVuZ3RoKSxrZXlCeXRlc10pO2lmKGtleUJ5dGVzLmxlbmd0aCUzMiE9PTApe2tleUJ5dGVzPWNvbmNhdChba2V5Qnl0ZXMsaGV4WmVyb1BhZChcIjB4XCIsMzIta2V5Lmxlbmd0aCUzMildKX1jb25zdCBoZXhCeXRlcz15aWVsZCB0aGlzLl9mZXRjaEJ5dGVzKFwiMHg1OWQxZDQzY1wiLGhleGxpZnkoa2V5Qnl0ZXMpKTtpZihoZXhCeXRlcz09bnVsbHx8aGV4Qnl0ZXM9PT1cIjB4XCIpe3JldHVybiBudWxsfXJldHVybiB0b1V0ZjhTdHJpbmcoaGV4Qnl0ZXMpfSl9fWxldCBkZWZhdWx0Rm9ybWF0dGVyPW51bGw7bGV0IG5leHRQb2xsSWQ9MTtjbGFzcyBCYXNlUHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlcntjb25zdHJ1Y3RvcihuZXR3b3JrKXtsb2dnZXIkdC5jaGVja05ldyhuZXcudGFyZ2V0LFByb3ZpZGVyKTtzdXBlcigpO3RoaXMuX2V2ZW50cz1bXTt0aGlzLl9lbWl0dGVkPXtibG9jazotMn07dGhpcy5mb3JtYXR0ZXI9bmV3LnRhcmdldC5nZXRGb3JtYXR0ZXIoKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiYW55TmV0d29ya1wiLG5ldHdvcms9PT1cImFueVwiKTtpZih0aGlzLmFueU5ldHdvcmspe25ldHdvcms9dGhpcy5kZXRlY3ROZXR3b3JrKCl9aWYobmV0d29yayBpbnN0YW5jZW9mIFByb21pc2Upe3RoaXMuX25ldHdvcmtQcm9taXNlPW5ldHdvcms7bmV0d29yay5jYXRjaChlcnJvcj0+e30pO3RoaXMuX3JlYWR5KCkuY2F0Y2goZXJyb3I9Pnt9KX1lbHNle2NvbnN0IGtub3duTmV0d29yaz1nZXRTdGF0aWMobmV3LnRhcmdldCxcImdldE5ldHdvcmtcIikobmV0d29yayk7aWYoa25vd25OZXR3b3JrKXtkZWZpbmVSZWFkT25seSh0aGlzLFwiX25ldHdvcmtcIixrbm93bk5ldHdvcmspO3RoaXMuZW1pdChcIm5ldHdvcmtcIixrbm93bk5ldHdvcmssbnVsbCl9ZWxzZXtsb2dnZXIkdC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIG5ldHdvcmtcIixcIm5ldHdvcmtcIixuZXR3b3JrKX19dGhpcy5fbWF4SW50ZXJuYWxCbG9ja051bWJlcj0tMTAyNDt0aGlzLl9sYXN0QmxvY2tOdW1iZXI9LTI7dGhpcy5fcG9sbGluZ0ludGVydmFsPTRlMzt0aGlzLl9mYXN0UXVlcnlEYXRlPTB9X3JlYWR5KCl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtpZih0aGlzLl9uZXR3b3JrPT1udWxsKXtsZXQgbmV0d29yaz1udWxsO2lmKHRoaXMuX25ldHdvcmtQcm9taXNlKXt0cnl7bmV0d29yaz15aWVsZCB0aGlzLl9uZXR3b3JrUHJvbWlzZX1jYXRjaChlcnJvcil7fX1pZihuZXR3b3JrPT1udWxsKXtuZXR3b3JrPXlpZWxkIHRoaXMuZGV0ZWN0TmV0d29yaygpfWlmKCFuZXR3b3JrKXtsb2dnZXIkdC50aHJvd0Vycm9yKFwibm8gbmV0d29yayBkZXRlY3RlZFwiLExvZ2dlci5lcnJvcnMuVU5LTk9XTl9FUlJPUix7fSl9aWYodGhpcy5fbmV0d29yaz09bnVsbCl7aWYodGhpcy5hbnlOZXR3b3JrKXt0aGlzLl9uZXR3b3JrPW5ldHdvcmt9ZWxzZXtkZWZpbmVSZWFkT25seSh0aGlzLFwiX25ldHdvcmtcIixuZXR3b3JrKX10aGlzLmVtaXQoXCJuZXR3b3JrXCIsbmV0d29yayxudWxsKX19cmV0dXJuIHRoaXMuX25ldHdvcmt9KX1nZXQgcmVhZHkoKXtyZXR1cm4gcG9sbCgoKT0+e3JldHVybiB0aGlzLl9yZWFkeSgpLnRoZW4obmV0d29yaz0+e3JldHVybiBuZXR3b3JrfSxlcnJvcj0+e2lmKGVycm9yLmNvZGU9PT1Mb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1ImJmVycm9yLmV2ZW50PT09XCJub05ldHdvcmtcIil7cmV0dXJuIHVuZGVmaW5lZH10aHJvdyBlcnJvcn0pfSl9c3RhdGljIGdldEZvcm1hdHRlcigpe2lmKGRlZmF1bHRGb3JtYXR0ZXI9PW51bGwpe2RlZmF1bHRGb3JtYXR0ZXI9bmV3IEZvcm1hdHRlcn1yZXR1cm4gZGVmYXVsdEZvcm1hdHRlcn1zdGF0aWMgZ2V0TmV0d29yayhuZXR3b3JrKXtyZXR1cm4gZ2V0TmV0d29yayhuZXR3b3JrPT1udWxsP1wiaG9tZXN0ZWFkXCI6bmV0d29yayl9X2dldEludGVybmFsQmxvY2tOdW1iZXIobWF4QWdlKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3lpZWxkIHRoaXMuX3JlYWR5KCk7aWYobWF4QWdlPjApe3doaWxlKHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIpe2NvbnN0IGludGVybmFsQmxvY2tOdW1iZXI9dGhpcy5faW50ZXJuYWxCbG9ja051bWJlcjt0cnl7Y29uc3QgcmVzdWx0PXlpZWxkIGludGVybmFsQmxvY2tOdW1iZXI7aWYoZ2V0VGltZSgpLXJlc3VsdC5yZXNwVGltZTw9bWF4QWdlKXtyZXR1cm4gcmVzdWx0LmJsb2NrTnVtYmVyfWJyZWFrfWNhdGNoKGVycm9yKXtpZih0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyPT09aW50ZXJuYWxCbG9ja051bWJlcil7YnJlYWt9fX19Y29uc3QgcmVxVGltZT1nZXRUaW1lKCk7Y29uc3QgY2hlY2tJbnRlcm5hbEJsb2NrTnVtYmVyPXJlc29sdmVQcm9wZXJ0aWVzKHtibG9ja051bWJlcjp0aGlzLnBlcmZvcm0oXCJnZXRCbG9ja051bWJlclwiLHt9KSxuZXR3b3JrRXJyb3I6dGhpcy5nZXROZXR3b3JrKCkudGhlbihuZXR3b3JrPT5udWxsLGVycm9yPT5lcnJvcil9KS50aGVuKCh7YmxvY2tOdW1iZXI6YmxvY2tOdW1iZXIsbmV0d29ya0Vycm9yOm5ldHdvcmtFcnJvcn0pPT57aWYobmV0d29ya0Vycm9yKXtpZih0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyPT09Y2hlY2tJbnRlcm5hbEJsb2NrTnVtYmVyKXt0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyPW51bGx9dGhyb3cgbmV0d29ya0Vycm9yfWNvbnN0IHJlc3BUaW1lPWdldFRpbWUoKTtibG9ja051bWJlcj1CaWdOdW1iZXIuZnJvbShibG9ja051bWJlcikudG9OdW1iZXIoKTtpZihibG9ja051bWJlcjx0aGlzLl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyKXtibG9ja051bWJlcj10aGlzLl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyfXRoaXMuX21heEludGVybmFsQmxvY2tOdW1iZXI9YmxvY2tOdW1iZXI7dGhpcy5fc2V0RmFzdEJsb2NrTnVtYmVyKGJsb2NrTnVtYmVyKTtyZXR1cm57YmxvY2tOdW1iZXI6YmxvY2tOdW1iZXIscmVxVGltZTpyZXFUaW1lLHJlc3BUaW1lOnJlc3BUaW1lfX0pO3RoaXMuX2ludGVybmFsQmxvY2tOdW1iZXI9Y2hlY2tJbnRlcm5hbEJsb2NrTnVtYmVyO2NoZWNrSW50ZXJuYWxCbG9ja051bWJlci5jYXRjaChlcnJvcj0+e2lmKHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXI9PT1jaGVja0ludGVybmFsQmxvY2tOdW1iZXIpe3RoaXMuX2ludGVybmFsQmxvY2tOdW1iZXI9bnVsbH19KTtyZXR1cm4oeWllbGQgY2hlY2tJbnRlcm5hbEJsb2NrTnVtYmVyKS5ibG9ja051bWJlcn0pfXBvbGwoKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IHBvbGxJZD1uZXh0UG9sbElkKys7Y29uc3QgcnVubmVycz1bXTtsZXQgYmxvY2tOdW1iZXI9bnVsbDt0cnl7YmxvY2tOdW1iZXI9eWllbGQgdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDArdGhpcy5wb2xsaW5nSW50ZXJ2YWwvMil9Y2F0Y2goZXJyb3Ipe3RoaXMuZW1pdChcImVycm9yXCIsZXJyb3IpO3JldHVybn10aGlzLl9zZXRGYXN0QmxvY2tOdW1iZXIoYmxvY2tOdW1iZXIpO3RoaXMuZW1pdChcInBvbGxcIixwb2xsSWQsYmxvY2tOdW1iZXIpO2lmKGJsb2NrTnVtYmVyPT09dGhpcy5fbGFzdEJsb2NrTnVtYmVyKXt0aGlzLmVtaXQoXCJkaWRQb2xsXCIscG9sbElkKTtyZXR1cm59aWYodGhpcy5fZW1pdHRlZC5ibG9jaz09PS0yKXt0aGlzLl9lbWl0dGVkLmJsb2NrPWJsb2NrTnVtYmVyLTF9aWYoTWF0aC5hYnModGhpcy5fZW1pdHRlZC5ibG9jay1ibG9ja051bWJlcik+MWUzKXtsb2dnZXIkdC53YXJuKFwibmV0d29yayBibG9jayBza2V3IGRldGVjdGVkOyBza2lwcGluZyBibG9jayBldmVudHNcIik7dGhpcy5lbWl0KFwiZXJyb3JcIixsb2dnZXIkdC5tYWtlRXJyb3IoXCJuZXR3b3JrIGJsb2NrIHNrZXcgZGV0ZWN0ZWRcIixMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1Ise2Jsb2NrTnVtYmVyOmJsb2NrTnVtYmVyLGV2ZW50OlwiYmxvY2tTa2V3XCIscHJldmlvdXNCbG9ja051bWJlcjp0aGlzLl9lbWl0dGVkLmJsb2NrfSkpO3RoaXMuZW1pdChcImJsb2NrXCIsYmxvY2tOdW1iZXIpfWVsc2V7Zm9yKGxldCBpPXRoaXMuX2VtaXR0ZWQuYmxvY2srMTtpPD1ibG9ja051bWJlcjtpKyspe3RoaXMuZW1pdChcImJsb2NrXCIsaSl9fWlmKHRoaXMuX2VtaXR0ZWQuYmxvY2shPT1ibG9ja051bWJlcil7dGhpcy5fZW1pdHRlZC5ibG9jaz1ibG9ja051bWJlcjtPYmplY3Qua2V5cyh0aGlzLl9lbWl0dGVkKS5mb3JFYWNoKGtleT0+e2lmKGtleT09PVwiYmxvY2tcIil7cmV0dXJufWNvbnN0IGV2ZW50QmxvY2tOdW1iZXI9dGhpcy5fZW1pdHRlZFtrZXldO2lmKGV2ZW50QmxvY2tOdW1iZXI9PT1cInBlbmRpbmdcIil7cmV0dXJufWlmKGJsb2NrTnVtYmVyLWV2ZW50QmxvY2tOdW1iZXI+MTIpe2RlbGV0ZSB0aGlzLl9lbWl0dGVkW2tleV19fSl9aWYodGhpcy5fbGFzdEJsb2NrTnVtYmVyPT09LTIpe3RoaXMuX2xhc3RCbG9ja051bWJlcj1ibG9ja051bWJlci0xfXRoaXMuX2V2ZW50cy5mb3JFYWNoKGV2ZW50PT57c3dpdGNoKGV2ZW50LnR5cGUpe2Nhc2VcInR4XCI6e2NvbnN0IGhhc2g9ZXZlbnQuaGFzaDtsZXQgcnVubmVyPXRoaXMuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KGhhc2gpLnRoZW4ocmVjZWlwdD0+e2lmKCFyZWNlaXB0fHxyZWNlaXB0LmJsb2NrTnVtYmVyPT1udWxsKXtyZXR1cm4gbnVsbH10aGlzLl9lbWl0dGVkW1widDpcIitoYXNoXT1yZWNlaXB0LmJsb2NrTnVtYmVyO3RoaXMuZW1pdChoYXNoLHJlY2VpcHQpO3JldHVybiBudWxsfSkuY2F0Y2goZXJyb3I9Pnt0aGlzLmVtaXQoXCJlcnJvclwiLGVycm9yKX0pO3J1bm5lcnMucHVzaChydW5uZXIpO2JyZWFrfWNhc2VcImZpbHRlclwiOntjb25zdCBmaWx0ZXI9ZXZlbnQuZmlsdGVyO2ZpbHRlci5mcm9tQmxvY2s9dGhpcy5fbGFzdEJsb2NrTnVtYmVyKzE7ZmlsdGVyLnRvQmxvY2s9YmxvY2tOdW1iZXI7Y29uc3QgcnVubmVyPXRoaXMuZ2V0TG9ncyhmaWx0ZXIpLnRoZW4obG9ncz0+e2lmKGxvZ3MubGVuZ3RoPT09MCl7cmV0dXJufWxvZ3MuZm9yRWFjaChsb2c9Pnt0aGlzLl9lbWl0dGVkW1wiYjpcIitsb2cuYmxvY2tIYXNoXT1sb2cuYmxvY2tOdW1iZXI7dGhpcy5fZW1pdHRlZFtcInQ6XCIrbG9nLnRyYW5zYWN0aW9uSGFzaF09bG9nLmJsb2NrTnVtYmVyO3RoaXMuZW1pdChmaWx0ZXIsbG9nKX0pfSkuY2F0Y2goZXJyb3I9Pnt0aGlzLmVtaXQoXCJlcnJvclwiLGVycm9yKX0pO3J1bm5lcnMucHVzaChydW5uZXIpO2JyZWFrfX19KTt0aGlzLl9sYXN0QmxvY2tOdW1iZXI9YmxvY2tOdW1iZXI7UHJvbWlzZS5hbGwocnVubmVycykudGhlbigoKT0+e3RoaXMuZW1pdChcImRpZFBvbGxcIixwb2xsSWQpfSkuY2F0Y2goZXJyb3I9Pnt0aGlzLmVtaXQoXCJlcnJvclwiLGVycm9yKX0pO3JldHVybn0pfXJlc2V0RXZlbnRzQmxvY2soYmxvY2tOdW1iZXIpe3RoaXMuX2xhc3RCbG9ja051bWJlcj1ibG9ja051bWJlci0xO2lmKHRoaXMucG9sbGluZyl7dGhpcy5wb2xsKCl9fWdldCBuZXR3b3JrKCl7cmV0dXJuIHRoaXMuX25ldHdvcmt9ZGV0ZWN0TmV0d29yaygpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7cmV0dXJuIGxvZ2dlciR0LnRocm93RXJyb3IoXCJwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IG5ldHdvcmsgZGV0ZWN0aW9uXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcInByb3ZpZGVyLmRldGVjdE5ldHdvcmtcIn0pfSl9Z2V0TmV0d29yaygpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgbmV0d29yaz15aWVsZCB0aGlzLl9yZWFkeSgpO2NvbnN0IGN1cnJlbnROZXR3b3JrPXlpZWxkIHRoaXMuZGV0ZWN0TmV0d29yaygpO2lmKG5ldHdvcmsuY2hhaW5JZCE9PWN1cnJlbnROZXR3b3JrLmNoYWluSWQpe2lmKHRoaXMuYW55TmV0d29yayl7dGhpcy5fbmV0d29yaz1jdXJyZW50TmV0d29yazt0aGlzLl9sYXN0QmxvY2tOdW1iZXI9LTI7dGhpcy5fZmFzdEJsb2NrTnVtYmVyPW51bGw7dGhpcy5fZmFzdEJsb2NrTnVtYmVyUHJvbWlzZT1udWxsO3RoaXMuX2Zhc3RRdWVyeURhdGU9MDt0aGlzLl9lbWl0dGVkLmJsb2NrPS0yO3RoaXMuX21heEludGVybmFsQmxvY2tOdW1iZXI9LTEwMjQ7dGhpcy5faW50ZXJuYWxCbG9ja051bWJlcj1udWxsO3RoaXMuZW1pdChcIm5ldHdvcmtcIixjdXJyZW50TmV0d29yayxuZXR3b3JrKTt5aWVsZCBzdGFsbCgwKTtyZXR1cm4gdGhpcy5fbmV0d29ya31jb25zdCBlcnJvcj1sb2dnZXIkdC5tYWtlRXJyb3IoXCJ1bmRlcmx5aW5nIG5ldHdvcmsgY2hhbmdlZFwiLExvZ2dlci5lcnJvcnMuTkVUV09SS19FUlJPUix7ZXZlbnQ6XCJjaGFuZ2VkXCIsbmV0d29yazpuZXR3b3JrLGRldGVjdGVkTmV0d29yazpjdXJyZW50TmV0d29ya30pO3RoaXMuZW1pdChcImVycm9yXCIsZXJyb3IpO3Rocm93IGVycm9yfXJldHVybiBuZXR3b3JrfSl9Z2V0IGJsb2NrTnVtYmVyKCl7dGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDArdGhpcy5wb2xsaW5nSW50ZXJ2YWwvMikudGhlbihibG9ja051bWJlcj0+e3RoaXMuX3NldEZhc3RCbG9ja051bWJlcihibG9ja051bWJlcil9LGVycm9yPT57fSk7cmV0dXJuIHRoaXMuX2Zhc3RCbG9ja051bWJlciE9bnVsbD90aGlzLl9mYXN0QmxvY2tOdW1iZXI6LTF9Z2V0IHBvbGxpbmcoKXtyZXR1cm4gdGhpcy5fcG9sbGVyIT1udWxsfXNldCBwb2xsaW5nKHZhbHVlKXtpZih2YWx1ZSYmIXRoaXMuX3BvbGxlcil7dGhpcy5fcG9sbGVyPXNldEludGVydmFsKCgpPT57dGhpcy5wb2xsKCl9LHRoaXMucG9sbGluZ0ludGVydmFsKTtpZighdGhpcy5fYm9vdHN0cmFwUG9sbCl7dGhpcy5fYm9vdHN0cmFwUG9sbD1zZXRUaW1lb3V0KCgpPT57dGhpcy5wb2xsKCk7dGhpcy5fYm9vdHN0cmFwUG9sbD1zZXRUaW1lb3V0KCgpPT57aWYoIXRoaXMuX3BvbGxlcil7dGhpcy5wb2xsKCl9dGhpcy5fYm9vdHN0cmFwUG9sbD1udWxsfSx0aGlzLnBvbGxpbmdJbnRlcnZhbCl9LDApfX1lbHNlIGlmKCF2YWx1ZSYmdGhpcy5fcG9sbGVyKXtjbGVhckludGVydmFsKHRoaXMuX3BvbGxlcik7dGhpcy5fcG9sbGVyPW51bGx9fWdldCBwb2xsaW5nSW50ZXJ2YWwoKXtyZXR1cm4gdGhpcy5fcG9sbGluZ0ludGVydmFsfXNldCBwb2xsaW5nSW50ZXJ2YWwodmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwibnVtYmVyXCJ8fHZhbHVlPD0wfHxwYXJzZUludChTdHJpbmcodmFsdWUpKSE9dmFsdWUpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgcG9sbGluZyBpbnRlcnZhbFwiKX10aGlzLl9wb2xsaW5nSW50ZXJ2YWw9dmFsdWU7aWYodGhpcy5fcG9sbGVyKXtjbGVhckludGVydmFsKHRoaXMuX3BvbGxlcik7dGhpcy5fcG9sbGVyPXNldEludGVydmFsKCgpPT57dGhpcy5wb2xsKCl9LHRoaXMuX3BvbGxpbmdJbnRlcnZhbCl9fV9nZXRGYXN0QmxvY2tOdW1iZXIoKXtjb25zdCBub3c9Z2V0VGltZSgpO2lmKG5vdy10aGlzLl9mYXN0UXVlcnlEYXRlPjIqdGhpcy5fcG9sbGluZ0ludGVydmFsKXt0aGlzLl9mYXN0UXVlcnlEYXRlPW5vdzt0aGlzLl9mYXN0QmxvY2tOdW1iZXJQcm9taXNlPXRoaXMuZ2V0QmxvY2tOdW1iZXIoKS50aGVuKGJsb2NrTnVtYmVyPT57aWYodGhpcy5fZmFzdEJsb2NrTnVtYmVyPT1udWxsfHxibG9ja051bWJlcj50aGlzLl9mYXN0QmxvY2tOdW1iZXIpe3RoaXMuX2Zhc3RCbG9ja051bWJlcj1ibG9ja051bWJlcn1yZXR1cm4gdGhpcy5fZmFzdEJsb2NrTnVtYmVyfSl9cmV0dXJuIHRoaXMuX2Zhc3RCbG9ja051bWJlclByb21pc2V9X3NldEZhc3RCbG9ja051bWJlcihibG9ja051bWJlcil7aWYodGhpcy5fZmFzdEJsb2NrTnVtYmVyIT1udWxsJiZibG9ja051bWJlcjx0aGlzLl9mYXN0QmxvY2tOdW1iZXIpe3JldHVybn10aGlzLl9mYXN0UXVlcnlEYXRlPWdldFRpbWUoKTtpZih0aGlzLl9mYXN0QmxvY2tOdW1iZXI9PW51bGx8fGJsb2NrTnVtYmVyPnRoaXMuX2Zhc3RCbG9ja051bWJlcil7dGhpcy5fZmFzdEJsb2NrTnVtYmVyPWJsb2NrTnVtYmVyO3RoaXMuX2Zhc3RCbG9ja051bWJlclByb21pc2U9UHJvbWlzZS5yZXNvbHZlKGJsb2NrTnVtYmVyKX19d2FpdEZvclRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCxjb25maXJtYXRpb25zLHRpbWVvdXQpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYoY29uZmlybWF0aW9ucz09bnVsbCl7Y29uZmlybWF0aW9ucz0xfWNvbnN0IHJlY2VpcHQ9eWllbGQgdGhpcy5nZXRUcmFuc2FjdGlvblJlY2VpcHQodHJhbnNhY3Rpb25IYXNoKTtpZigocmVjZWlwdD9yZWNlaXB0LmNvbmZpcm1hdGlvbnM6MCk+PWNvbmZpcm1hdGlvbnMpe3JldHVybiByZWNlaXB0fXJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSxyZWplY3QpPT57bGV0IHRpbWVyPW51bGw7bGV0IGRvbmU9ZmFsc2U7Y29uc3QgaGFuZGxlcj1yZWNlaXB0PT57aWYocmVjZWlwdC5jb25maXJtYXRpb25zPGNvbmZpcm1hdGlvbnMpe3JldHVybn1pZih0aW1lcil7Y2xlYXJUaW1lb3V0KHRpbWVyKX1pZihkb25lKXtyZXR1cm59ZG9uZT10cnVlO3RoaXMucmVtb3ZlTGlzdGVuZXIodHJhbnNhY3Rpb25IYXNoLGhhbmRsZXIpO3Jlc29sdmUocmVjZWlwdCl9O3RoaXMub24odHJhbnNhY3Rpb25IYXNoLGhhbmRsZXIpO2lmKHR5cGVvZiB0aW1lb3V0PT09XCJudW1iZXJcIiYmdGltZW91dD4wKXt0aW1lcj1zZXRUaW1lb3V0KCgpPT57aWYoZG9uZSl7cmV0dXJufXRpbWVyPW51bGw7ZG9uZT10cnVlO3RoaXMucmVtb3ZlTGlzdGVuZXIodHJhbnNhY3Rpb25IYXNoLGhhbmRsZXIpO3JlamVjdChsb2dnZXIkdC5tYWtlRXJyb3IoXCJ0aW1lb3V0IGV4Y2VlZGVkXCIsTG9nZ2VyLmVycm9ycy5USU1FT1VULHt0aW1lb3V0OnRpbWVvdXR9KSl9LHRpbWVvdXQpO2lmKHRpbWVyLnVucmVmKXt0aW1lci51bnJlZigpfX19KX0pfWdldEJsb2NrTnVtYmVyKCl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtyZXR1cm4gdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigwKX0pfWdldEdhc1ByaWNlKCl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtjb25zdCByZXN1bHQ9eWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0R2FzUHJpY2VcIix7fSk7dHJ5e3JldHVybiBCaWdOdW1iZXIuZnJvbShyZXN1bHQpfWNhdGNoKGVycm9yKXtyZXR1cm4gbG9nZ2VyJHQudGhyb3dFcnJvcihcImJhZCByZXN1bHQgZnJvbSBiYWNrZW5kXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise21ldGhvZDpcImdldEdhc1ByaWNlXCIscmVzdWx0OnJlc3VsdCxlcnJvcjplcnJvcn0pfX0pfWdldEJhbGFuY2UoYWRkcmVzc09yTmFtZSxibG9ja1RhZyl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtjb25zdCBwYXJhbXM9eWllbGQgcmVzb2x2ZVByb3BlcnRpZXMoe2FkZHJlc3M6dGhpcy5fZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lKSxibG9ja1RhZzp0aGlzLl9nZXRCbG9ja1RhZyhibG9ja1RhZyl9KTtjb25zdCByZXN1bHQ9eWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0QmFsYW5jZVwiLHBhcmFtcyk7dHJ5e3JldHVybiBCaWdOdW1iZXIuZnJvbShyZXN1bHQpfWNhdGNoKGVycm9yKXtyZXR1cm4gbG9nZ2VyJHQudGhyb3dFcnJvcihcImJhZCByZXN1bHQgZnJvbSBiYWNrZW5kXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise21ldGhvZDpcImdldEJhbGFuY2VcIixwYXJhbXM6cGFyYW1zLHJlc3VsdDpyZXN1bHQsZXJyb3I6ZXJyb3J9KX19KX1nZXRUcmFuc2FjdGlvbkNvdW50KGFkZHJlc3NPck5hbWUsYmxvY2tUYWcpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7Y29uc3QgcGFyYW1zPXlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHthZGRyZXNzOnRoaXMuX2dldEFkZHJlc3MoYWRkcmVzc09yTmFtZSksYmxvY2tUYWc6dGhpcy5fZ2V0QmxvY2tUYWcoYmxvY2tUYWcpfSk7Y29uc3QgcmVzdWx0PXlpZWxkIHRoaXMucGVyZm9ybShcImdldFRyYW5zYWN0aW9uQ291bnRcIixwYXJhbXMpO3RyeXtyZXR1cm4gQmlnTnVtYmVyLmZyb20ocmVzdWx0KS50b051bWJlcigpfWNhdGNoKGVycm9yKXtyZXR1cm4gbG9nZ2VyJHQudGhyb3dFcnJvcihcImJhZCByZXN1bHQgZnJvbSBiYWNrZW5kXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise21ldGhvZDpcImdldFRyYW5zYWN0aW9uQ291bnRcIixwYXJhbXM6cGFyYW1zLHJlc3VsdDpyZXN1bHQsZXJyb3I6ZXJyb3J9KX19KX1nZXRDb2RlKGFkZHJlc3NPck5hbWUsYmxvY2tUYWcpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7Y29uc3QgcGFyYW1zPXlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHthZGRyZXNzOnRoaXMuX2dldEFkZHJlc3MoYWRkcmVzc09yTmFtZSksYmxvY2tUYWc6dGhpcy5fZ2V0QmxvY2tUYWcoYmxvY2tUYWcpfSk7Y29uc3QgcmVzdWx0PXlpZWxkIHRoaXMucGVyZm9ybShcImdldENvZGVcIixwYXJhbXMpO3RyeXtyZXR1cm4gaGV4bGlmeShyZXN1bHQpfWNhdGNoKGVycm9yKXtyZXR1cm4gbG9nZ2VyJHQudGhyb3dFcnJvcihcImJhZCByZXN1bHQgZnJvbSBiYWNrZW5kXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise21ldGhvZDpcImdldENvZGVcIixwYXJhbXM6cGFyYW1zLHJlc3VsdDpyZXN1bHQsZXJyb3I6ZXJyb3J9KX19KX1nZXRTdG9yYWdlQXQoYWRkcmVzc09yTmFtZSxwb3NpdGlvbixibG9ja1RhZyl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtjb25zdCBwYXJhbXM9eWllbGQgcmVzb2x2ZVByb3BlcnRpZXMoe2FkZHJlc3M6dGhpcy5fZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lKSxibG9ja1RhZzp0aGlzLl9nZXRCbG9ja1RhZyhibG9ja1RhZykscG9zaXRpb246UHJvbWlzZS5yZXNvbHZlKHBvc2l0aW9uKS50aGVuKHA9PmhleFZhbHVlKHApKX0pO2NvbnN0IHJlc3VsdD15aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRTdG9yYWdlQXRcIixwYXJhbXMpO3RyeXtyZXR1cm4gaGV4bGlmeShyZXN1bHQpfWNhdGNoKGVycm9yKXtyZXR1cm4gbG9nZ2VyJHQudGhyb3dFcnJvcihcImJhZCByZXN1bHQgZnJvbSBiYWNrZW5kXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise21ldGhvZDpcImdldFN0b3JhZ2VBdFwiLHBhcmFtczpwYXJhbXMscmVzdWx0OnJlc3VsdCxlcnJvcjplcnJvcn0pfX0pfV93cmFwVHJhbnNhY3Rpb24odHgsaGFzaCl7aWYoaGFzaCE9bnVsbCYmaGV4RGF0YUxlbmd0aChoYXNoKSE9PTMyKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3BvbnNlIC0gc2VuZFRyYW5zYWN0aW9uXCIpfWNvbnN0IHJlc3VsdD10eDtpZihoYXNoIT1udWxsJiZ0eC5oYXNoIT09aGFzaCl7bG9nZ2VyJHQudGhyb3dFcnJvcihcIlRyYW5zYWN0aW9uIGhhc2ggbWlzbWF0Y2ggZnJvbSBQcm92aWRlci5zZW5kVHJhbnNhY3Rpb24uXCIsTG9nZ2VyLmVycm9ycy5VTktOT1dOX0VSUk9SLHtleHBlY3RlZEhhc2g6dHguaGFzaCxyZXR1cm5lZEhhc2g6aGFzaH0pfXJlc3VsdC53YWl0PShjb25maXJtYXRpb25zPT5fX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYoY29uZmlybWF0aW9ucyE9PTApe3RoaXMuX2VtaXR0ZWRbXCJ0OlwiK3R4Lmhhc2hdPVwicGVuZGluZ1wifWNvbnN0IHJlY2VpcHQ9eWllbGQgdGhpcy53YWl0Rm9yVHJhbnNhY3Rpb24odHguaGFzaCxjb25maXJtYXRpb25zKTtpZihyZWNlaXB0PT1udWxsJiZjb25maXJtYXRpb25zPT09MCl7cmV0dXJuIG51bGx9dGhpcy5fZW1pdHRlZFtcInQ6XCIrdHguaGFzaF09cmVjZWlwdC5ibG9ja051bWJlcjtpZihyZWNlaXB0LnN0YXR1cz09PTApe2xvZ2dlciR0LnRocm93RXJyb3IoXCJ0cmFuc2FjdGlvbiBmYWlsZWRcIixMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OLHt0cmFuc2FjdGlvbkhhc2g6dHguaGFzaCx0cmFuc2FjdGlvbjp0eCxyZWNlaXB0OnJlY2VpcHR9KX1yZXR1cm4gcmVjZWlwdH0pKTtyZXR1cm4gcmVzdWx0fXNlbmRUcmFuc2FjdGlvbihzaWduZWRUcmFuc2FjdGlvbil7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtjb25zdCBoZXhUeD15aWVsZCBQcm9taXNlLnJlc29sdmUoc2lnbmVkVHJhbnNhY3Rpb24pLnRoZW4odD0+aGV4bGlmeSh0KSk7Y29uc3QgdHg9dGhpcy5mb3JtYXR0ZXIudHJhbnNhY3Rpb24oc2lnbmVkVHJhbnNhY3Rpb24pO3RyeXtjb25zdCBoYXNoPXlpZWxkIHRoaXMucGVyZm9ybShcInNlbmRUcmFuc2FjdGlvblwiLHtzaWduZWRUcmFuc2FjdGlvbjpoZXhUeH0pO3JldHVybiB0aGlzLl93cmFwVHJhbnNhY3Rpb24odHgsaGFzaCl9Y2F0Y2goZXJyb3Ipe2Vycm9yLnRyYW5zYWN0aW9uPXR4O2Vycm9yLnRyYW5zYWN0aW9uSGFzaD10eC5oYXNoO3Rocm93IGVycm9yfX0pfV9nZXRUcmFuc2FjdGlvblJlcXVlc3QodHJhbnNhY3Rpb24pe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgdmFsdWVzPXlpZWxkIHRyYW5zYWN0aW9uO2NvbnN0IHR4PXt9O1tcImZyb21cIixcInRvXCJdLmZvckVhY2goa2V5PT57aWYodmFsdWVzW2tleV09PW51bGwpe3JldHVybn10eFtrZXldPVByb21pc2UucmVzb2x2ZSh2YWx1ZXNba2V5XSkudGhlbih2PT52P3RoaXMuX2dldEFkZHJlc3Modik6bnVsbCl9KTtbXCJnYXNMaW1pdFwiLFwiZ2FzUHJpY2VcIixcInZhbHVlXCJdLmZvckVhY2goa2V5PT57aWYodmFsdWVzW2tleV09PW51bGwpe3JldHVybn10eFtrZXldPVByb21pc2UucmVzb2x2ZSh2YWx1ZXNba2V5XSkudGhlbih2PT52P0JpZ051bWJlci5mcm9tKHYpOm51bGwpfSk7W1widHlwZVwiXS5mb3JFYWNoKGtleT0+e2lmKHZhbHVlc1trZXldPT1udWxsKXtyZXR1cm59dHhba2V5XT1Qcm9taXNlLnJlc29sdmUodmFsdWVzW2tleV0pLnRoZW4odj0+diE9bnVsbD92Om51bGwpfSk7aWYodmFsdWVzLmFjY2Vzc0xpc3Qpe3R4LmFjY2Vzc0xpc3Q9dGhpcy5mb3JtYXR0ZXIuYWNjZXNzTGlzdCh2YWx1ZXMuYWNjZXNzTGlzdCl9W1wiZGF0YVwiXS5mb3JFYWNoKGtleT0+e2lmKHZhbHVlc1trZXldPT1udWxsKXtyZXR1cm59dHhba2V5XT1Qcm9taXNlLnJlc29sdmUodmFsdWVzW2tleV0pLnRoZW4odj0+dj9oZXhsaWZ5KHYpOm51bGwpfSk7cmV0dXJuIHRoaXMuZm9ybWF0dGVyLnRyYW5zYWN0aW9uUmVxdWVzdCh5aWVsZCByZXNvbHZlUHJvcGVydGllcyh0eCkpfSl9X2dldEZpbHRlcihmaWx0ZXIpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7ZmlsdGVyPXlpZWxkIGZpbHRlcjtjb25zdCByZXN1bHQ9e307aWYoZmlsdGVyLmFkZHJlc3MhPW51bGwpe3Jlc3VsdC5hZGRyZXNzPXRoaXMuX2dldEFkZHJlc3MoZmlsdGVyLmFkZHJlc3MpfVtcImJsb2NrSGFzaFwiLFwidG9waWNzXCJdLmZvckVhY2goa2V5PT57aWYoZmlsdGVyW2tleV09PW51bGwpe3JldHVybn1yZXN1bHRba2V5XT1maWx0ZXJba2V5XX0pO1tcImZyb21CbG9ja1wiLFwidG9CbG9ja1wiXS5mb3JFYWNoKGtleT0+e2lmKGZpbHRlcltrZXldPT1udWxsKXtyZXR1cm59cmVzdWx0W2tleV09dGhpcy5fZ2V0QmxvY2tUYWcoZmlsdGVyW2tleV0pfSk7cmV0dXJuIHRoaXMuZm9ybWF0dGVyLmZpbHRlcih5aWVsZCByZXNvbHZlUHJvcGVydGllcyhyZXN1bHQpKX0pfWNhbGwodHJhbnNhY3Rpb24sYmxvY2tUYWcpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7Y29uc3QgcGFyYW1zPXlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHt0cmFuc2FjdGlvbjp0aGlzLl9nZXRUcmFuc2FjdGlvblJlcXVlc3QodHJhbnNhY3Rpb24pLGJsb2NrVGFnOnRoaXMuX2dldEJsb2NrVGFnKGJsb2NrVGFnKX0pO2NvbnN0IHJlc3VsdD15aWVsZCB0aGlzLnBlcmZvcm0oXCJjYWxsXCIscGFyYW1zKTt0cnl7cmV0dXJuIGhleGxpZnkocmVzdWx0KX1jYXRjaChlcnJvcil7cmV0dXJuIGxvZ2dlciR0LnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLHttZXRob2Q6XCJjYWxsXCIscGFyYW1zOnBhcmFtcyxyZXN1bHQ6cmVzdWx0LGVycm9yOmVycm9yfSl9fSl9ZXN0aW1hdGVHYXModHJhbnNhY3Rpb24pe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7Y29uc3QgcGFyYW1zPXlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHt0cmFuc2FjdGlvbjp0aGlzLl9nZXRUcmFuc2FjdGlvblJlcXVlc3QodHJhbnNhY3Rpb24pfSk7Y29uc3QgcmVzdWx0PXlpZWxkIHRoaXMucGVyZm9ybShcImVzdGltYXRlR2FzXCIscGFyYW1zKTt0cnl7cmV0dXJuIEJpZ051bWJlci5mcm9tKHJlc3VsdCl9Y2F0Y2goZXJyb3Ipe3JldHVybiBsb2dnZXIkdC50aHJvd0Vycm9yKFwiYmFkIHJlc3VsdCBmcm9tIGJhY2tlbmRcIixMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUix7bWV0aG9kOlwiZXN0aW1hdGVHYXNcIixwYXJhbXM6cGFyYW1zLHJlc3VsdDpyZXN1bHQsZXJyb3I6ZXJyb3J9KX19KX1fZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IGFkZHJlc3M9eWllbGQgdGhpcy5yZXNvbHZlTmFtZShhZGRyZXNzT3JOYW1lKTtpZihhZGRyZXNzPT1udWxsKXtsb2dnZXIkdC50aHJvd0Vycm9yKFwiRU5TIG5hbWUgbm90IGNvbmZpZ3VyZWRcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOmByZXNvbHZlTmFtZSgke0pTT04uc3RyaW5naWZ5KGFkZHJlc3NPck5hbWUpfSlgfSl9cmV0dXJuIGFkZHJlc3N9KX1fZ2V0QmxvY2soYmxvY2tIYXNoT3JCbG9ja1RhZyxpbmNsdWRlVHJhbnNhY3Rpb25zKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3lpZWxkIHRoaXMuZ2V0TmV0d29yaygpO2Jsb2NrSGFzaE9yQmxvY2tUYWc9eWllbGQgYmxvY2tIYXNoT3JCbG9ja1RhZztsZXQgYmxvY2tOdW1iZXI9LTEyODtjb25zdCBwYXJhbXM9e2luY2x1ZGVUcmFuc2FjdGlvbnM6ISFpbmNsdWRlVHJhbnNhY3Rpb25zfTtpZihpc0hleFN0cmluZyhibG9ja0hhc2hPckJsb2NrVGFnLDMyKSl7cGFyYW1zLmJsb2NrSGFzaD1ibG9ja0hhc2hPckJsb2NrVGFnfWVsc2V7dHJ5e3BhcmFtcy5ibG9ja1RhZz10aGlzLmZvcm1hdHRlci5ibG9ja1RhZyh5aWVsZCB0aGlzLl9nZXRCbG9ja1RhZyhibG9ja0hhc2hPckJsb2NrVGFnKSk7aWYoaXNIZXhTdHJpbmcocGFyYW1zLmJsb2NrVGFnKSl7YmxvY2tOdW1iZXI9cGFyc2VJbnQocGFyYW1zLmJsb2NrVGFnLnN1YnN0cmluZygyKSwxNil9fWNhdGNoKGVycm9yKXtsb2dnZXIkdC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJsb2NrIGhhc2ggb3IgYmxvY2sgdGFnXCIsXCJibG9ja0hhc2hPckJsb2NrVGFnXCIsYmxvY2tIYXNoT3JCbG9ja1RhZyl9fXJldHVybiBwb2xsKCgpPT5fX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgYmxvY2s9eWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0QmxvY2tcIixwYXJhbXMpO2lmKGJsb2NrPT1udWxsKXtpZihwYXJhbXMuYmxvY2tIYXNoIT1udWxsKXtpZih0aGlzLl9lbWl0dGVkW1wiYjpcIitwYXJhbXMuYmxvY2tIYXNoXT09bnVsbCl7cmV0dXJuIG51bGx9fWlmKHBhcmFtcy5ibG9ja1RhZyE9bnVsbCl7aWYoYmxvY2tOdW1iZXI+dGhpcy5fZW1pdHRlZC5ibG9jayl7cmV0dXJuIG51bGx9fXJldHVybiB1bmRlZmluZWR9aWYoaW5jbHVkZVRyYW5zYWN0aW9ucyl7bGV0IGJsb2NrTnVtYmVyPW51bGw7Zm9yKGxldCBpPTA7aTxibG9jay50cmFuc2FjdGlvbnMubGVuZ3RoO2krKyl7Y29uc3QgdHg9YmxvY2sudHJhbnNhY3Rpb25zW2ldO2lmKHR4LmJsb2NrTnVtYmVyPT1udWxsKXt0eC5jb25maXJtYXRpb25zPTB9ZWxzZSBpZih0eC5jb25maXJtYXRpb25zPT1udWxsKXtpZihibG9ja051bWJlcj09bnVsbCl7YmxvY2tOdW1iZXI9eWllbGQgdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDArMip0aGlzLnBvbGxpbmdJbnRlcnZhbCl9bGV0IGNvbmZpcm1hdGlvbnM9YmxvY2tOdW1iZXItdHguYmxvY2tOdW1iZXIrMTtpZihjb25maXJtYXRpb25zPD0wKXtjb25maXJtYXRpb25zPTF9dHguY29uZmlybWF0aW9ucz1jb25maXJtYXRpb25zfX1yZXR1cm4gdGhpcy5mb3JtYXR0ZXIuYmxvY2tXaXRoVHJhbnNhY3Rpb25zKGJsb2NrKX1yZXR1cm4gdGhpcy5mb3JtYXR0ZXIuYmxvY2soYmxvY2spfSkse29uY2VQb2xsOnRoaXN9KX0pfWdldEJsb2NrKGJsb2NrSGFzaE9yQmxvY2tUYWcpe3JldHVybiB0aGlzLl9nZXRCbG9jayhibG9ja0hhc2hPckJsb2NrVGFnLGZhbHNlKX1nZXRCbG9ja1dpdGhUcmFuc2FjdGlvbnMoYmxvY2tIYXNoT3JCbG9ja1RhZyl7cmV0dXJuIHRoaXMuX2dldEJsb2NrKGJsb2NrSGFzaE9yQmxvY2tUYWcsdHJ1ZSl9Z2V0VHJhbnNhY3Rpb24odHJhbnNhY3Rpb25IYXNoKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3lpZWxkIHRoaXMuZ2V0TmV0d29yaygpO3RyYW5zYWN0aW9uSGFzaD15aWVsZCB0cmFuc2FjdGlvbkhhc2g7Y29uc3QgcGFyYW1zPXt0cmFuc2FjdGlvbkhhc2g6dGhpcy5mb3JtYXR0ZXIuaGFzaCh0cmFuc2FjdGlvbkhhc2gsdHJ1ZSl9O3JldHVybiBwb2xsKCgpPT5fX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgcmVzdWx0PXlpZWxkIHRoaXMucGVyZm9ybShcImdldFRyYW5zYWN0aW9uXCIscGFyYW1zKTtpZihyZXN1bHQ9PW51bGwpe2lmKHRoaXMuX2VtaXR0ZWRbXCJ0OlwiK3RyYW5zYWN0aW9uSGFzaF09PW51bGwpe3JldHVybiBudWxsfXJldHVybiB1bmRlZmluZWR9Y29uc3QgdHg9dGhpcy5mb3JtYXR0ZXIudHJhbnNhY3Rpb25SZXNwb25zZShyZXN1bHQpO2lmKHR4LmJsb2NrTnVtYmVyPT1udWxsKXt0eC5jb25maXJtYXRpb25zPTB9ZWxzZSBpZih0eC5jb25maXJtYXRpb25zPT1udWxsKXtjb25zdCBibG9ja051bWJlcj15aWVsZCB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCsyKnRoaXMucG9sbGluZ0ludGVydmFsKTtsZXQgY29uZmlybWF0aW9ucz1ibG9ja051bWJlci10eC5ibG9ja051bWJlcisxO2lmKGNvbmZpcm1hdGlvbnM8PTApe2NvbmZpcm1hdGlvbnM9MX10eC5jb25maXJtYXRpb25zPWNvbmZpcm1hdGlvbnN9cmV0dXJuIHRoaXMuX3dyYXBUcmFuc2FjdGlvbih0eCl9KSx7b25jZVBvbGw6dGhpc30pfSl9Z2V0VHJhbnNhY3Rpb25SZWNlaXB0KHRyYW5zYWN0aW9uSGFzaCl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTt0cmFuc2FjdGlvbkhhc2g9eWllbGQgdHJhbnNhY3Rpb25IYXNoO2NvbnN0IHBhcmFtcz17dHJhbnNhY3Rpb25IYXNoOnRoaXMuZm9ybWF0dGVyLmhhc2godHJhbnNhY3Rpb25IYXNoLHRydWUpfTtyZXR1cm4gcG9sbCgoKT0+X19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IHJlc3VsdD15aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRUcmFuc2FjdGlvblJlY2VpcHRcIixwYXJhbXMpO2lmKHJlc3VsdD09bnVsbCl7aWYodGhpcy5fZW1pdHRlZFtcInQ6XCIrdHJhbnNhY3Rpb25IYXNoXT09bnVsbCl7cmV0dXJuIG51bGx9cmV0dXJuIHVuZGVmaW5lZH1pZihyZXN1bHQuYmxvY2tIYXNoPT1udWxsKXtyZXR1cm4gdW5kZWZpbmVkfWNvbnN0IHJlY2VpcHQ9dGhpcy5mb3JtYXR0ZXIucmVjZWlwdChyZXN1bHQpO2lmKHJlY2VpcHQuYmxvY2tOdW1iZXI9PW51bGwpe3JlY2VpcHQuY29uZmlybWF0aW9ucz0wfWVsc2UgaWYocmVjZWlwdC5jb25maXJtYXRpb25zPT1udWxsKXtjb25zdCBibG9ja051bWJlcj15aWVsZCB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCsyKnRoaXMucG9sbGluZ0ludGVydmFsKTtsZXQgY29uZmlybWF0aW9ucz1ibG9ja051bWJlci1yZWNlaXB0LmJsb2NrTnVtYmVyKzE7aWYoY29uZmlybWF0aW9uczw9MCl7Y29uZmlybWF0aW9ucz0xfXJlY2VpcHQuY29uZmlybWF0aW9ucz1jb25maXJtYXRpb25zfXJldHVybiByZWNlaXB0fSkse29uY2VQb2xsOnRoaXN9KX0pfWdldExvZ3MoZmlsdGVyKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3lpZWxkIHRoaXMuZ2V0TmV0d29yaygpO2NvbnN0IHBhcmFtcz15aWVsZCByZXNvbHZlUHJvcGVydGllcyh7ZmlsdGVyOnRoaXMuX2dldEZpbHRlcihmaWx0ZXIpfSk7Y29uc3QgbG9ncz15aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRMb2dzXCIscGFyYW1zKTtsb2dzLmZvckVhY2gobG9nPT57aWYobG9nLnJlbW92ZWQ9PW51bGwpe2xvZy5yZW1vdmVkPWZhbHNlfX0pO3JldHVybiBGb3JtYXR0ZXIuYXJyYXlPZih0aGlzLmZvcm1hdHRlci5maWx0ZXJMb2cuYmluZCh0aGlzLmZvcm1hdHRlcikpKGxvZ3MpfSl9Z2V0RXRoZXJQcmljZSgpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7cmV0dXJuIHRoaXMucGVyZm9ybShcImdldEV0aGVyUHJpY2VcIix7fSl9KX1fZ2V0QmxvY2tUYWcoYmxvY2tUYWcpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7YmxvY2tUYWc9eWllbGQgYmxvY2tUYWc7aWYodHlwZW9mIGJsb2NrVGFnPT09XCJudW1iZXJcIiYmYmxvY2tUYWc8MCl7aWYoYmxvY2tUYWclMSl7bG9nZ2VyJHQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBCbG9ja1RhZ1wiLFwiYmxvY2tUYWdcIixibG9ja1RhZyl9bGV0IGJsb2NrTnVtYmVyPXlpZWxkIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwKzIqdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO2Jsb2NrTnVtYmVyKz1ibG9ja1RhZztpZihibG9ja051bWJlcjwwKXtibG9ja051bWJlcj0wfXJldHVybiB0aGlzLmZvcm1hdHRlci5ibG9ja1RhZyhibG9ja051bWJlcil9cmV0dXJuIHRoaXMuZm9ybWF0dGVyLmJsb2NrVGFnKGJsb2NrVGFnKX0pfWdldFJlc29sdmVyKG5hbWUpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgYWRkcmVzcz15aWVsZCB0aGlzLl9nZXRSZXNvbHZlcihuYW1lKTtpZihhZGRyZXNzPT1udWxsKXtyZXR1cm4gbnVsbH1yZXR1cm4gbmV3IFJlc29sdmVyKHRoaXMsYWRkcmVzcyxuYW1lKX0pfV9nZXRSZXNvbHZlcihuYW1lKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IG5ldHdvcms9eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7aWYoIW5ldHdvcmsuZW5zQWRkcmVzcyl7bG9nZ2VyJHQudGhyb3dFcnJvcihcIm5ldHdvcmsgZG9lcyBub3Qgc3VwcG9ydCBFTlNcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwiRU5TXCIsbmV0d29yazpuZXR3b3JrLm5hbWV9KX1jb25zdCB0cmFuc2FjdGlvbj17dG86bmV0d29yay5lbnNBZGRyZXNzLGRhdGE6XCIweDAxNzhiOGJmXCIrbmFtZWhhc2gobmFtZSkuc3Vic3RyaW5nKDIpfTtyZXR1cm4gdGhpcy5mb3JtYXR0ZXIuY2FsbEFkZHJlc3MoeWllbGQgdGhpcy5jYWxsKHRyYW5zYWN0aW9uKSl9KX1yZXNvbHZlTmFtZShuYW1lKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe25hbWU9eWllbGQgbmFtZTt0cnl7cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmZvcm1hdHRlci5hZGRyZXNzKG5hbWUpKX1jYXRjaChlcnJvcil7aWYoaXNIZXhTdHJpbmcobmFtZSkpe3Rocm93IGVycm9yfX1pZih0eXBlb2YgbmFtZSE9PVwic3RyaW5nXCIpe2xvZ2dlciR0LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgRU5TIG5hbWVcIixcIm5hbWVcIixuYW1lKX1jb25zdCByZXNvbHZlcj15aWVsZCB0aGlzLmdldFJlc29sdmVyKG5hbWUpO2lmKCFyZXNvbHZlcil7cmV0dXJuIG51bGx9cmV0dXJuIHlpZWxkIHJlc29sdmVyLmdldEFkZHJlc3MoKX0pfWxvb2t1cEFkZHJlc3MoYWRkcmVzcyl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXthZGRyZXNzPXlpZWxkIGFkZHJlc3M7YWRkcmVzcz10aGlzLmZvcm1hdHRlci5hZGRyZXNzKGFkZHJlc3MpO2NvbnN0IHJldmVyc2VOYW1lPWFkZHJlc3Muc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCkrXCIuYWRkci5yZXZlcnNlXCI7Y29uc3QgcmVzb2x2ZXJBZGRyZXNzPXlpZWxkIHRoaXMuX2dldFJlc29sdmVyKHJldmVyc2VOYW1lKTtpZighcmVzb2x2ZXJBZGRyZXNzKXtyZXR1cm4gbnVsbH1sZXQgYnl0ZXM9YXJyYXlpZnkoeWllbGQgdGhpcy5jYWxsKHt0bzpyZXNvbHZlckFkZHJlc3MsZGF0YTpcIjB4NjkxZjM0MzFcIituYW1laGFzaChyZXZlcnNlTmFtZSkuc3Vic3RyaW5nKDIpfSkpO2lmKGJ5dGVzLmxlbmd0aDwzMnx8IUJpZ051bWJlci5mcm9tKGJ5dGVzLnNsaWNlKDAsMzIpKS5lcSgzMikpe3JldHVybiBudWxsfWJ5dGVzPWJ5dGVzLnNsaWNlKDMyKTtpZihieXRlcy5sZW5ndGg8MzIpe3JldHVybiBudWxsfWNvbnN0IGxlbmd0aD1CaWdOdW1iZXIuZnJvbShieXRlcy5zbGljZSgwLDMyKSkudG9OdW1iZXIoKTtieXRlcz1ieXRlcy5zbGljZSgzMik7aWYobGVuZ3RoPmJ5dGVzLmxlbmd0aCl7cmV0dXJuIG51bGx9Y29uc3QgbmFtZT10b1V0ZjhTdHJpbmcoYnl0ZXMuc2xpY2UoMCxsZW5ndGgpKTtjb25zdCBhZGRyPXlpZWxkIHRoaXMucmVzb2x2ZU5hbWUobmFtZSk7aWYoYWRkciE9YWRkcmVzcyl7cmV0dXJuIG51bGx9cmV0dXJuIG5hbWV9KX1wZXJmb3JtKG1ldGhvZCxwYXJhbXMpe3JldHVybiBsb2dnZXIkdC50aHJvd0Vycm9yKG1ldGhvZCtcIiBub3QgaW1wbGVtZW50ZWRcIixMb2dnZXIuZXJyb3JzLk5PVF9JTVBMRU1FTlRFRCx7b3BlcmF0aW9uOm1ldGhvZH0pfV9zdGFydEV2ZW50KGV2ZW50KXt0aGlzLnBvbGxpbmc9dGhpcy5fZXZlbnRzLmZpbHRlcihlPT5lLnBvbGxhYmxlKCkpLmxlbmd0aD4wfV9zdG9wRXZlbnQoZXZlbnQpe3RoaXMucG9sbGluZz10aGlzLl9ldmVudHMuZmlsdGVyKGU9PmUucG9sbGFibGUoKSkubGVuZ3RoPjB9X2FkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLGxpc3RlbmVyLG9uY2Upe2NvbnN0IGV2ZW50PW5ldyBFdmVudChnZXRFdmVudFRhZyQxKGV2ZW50TmFtZSksbGlzdGVuZXIsb25jZSk7dGhpcy5fZXZlbnRzLnB1c2goZXZlbnQpO3RoaXMuX3N0YXJ0RXZlbnQoZXZlbnQpO3JldHVybiB0aGlzfW9uKGV2ZW50TmFtZSxsaXN0ZW5lcil7cmV0dXJuIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLGxpc3RlbmVyLGZhbHNlKX1vbmNlKGV2ZW50TmFtZSxsaXN0ZW5lcil7cmV0dXJuIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLGxpc3RlbmVyLHRydWUpfWVtaXQoZXZlbnROYW1lLC4uLmFyZ3Mpe2xldCByZXN1bHQ9ZmFsc2U7bGV0IHN0b3BwZWQ9W107bGV0IGV2ZW50VGFnPWdldEV2ZW50VGFnJDEoZXZlbnROYW1lKTt0aGlzLl9ldmVudHM9dGhpcy5fZXZlbnRzLmZpbHRlcihldmVudD0+e2lmKGV2ZW50LnRhZyE9PWV2ZW50VGFnKXtyZXR1cm4gdHJ1ZX1zZXRUaW1lb3V0KCgpPT57ZXZlbnQubGlzdGVuZXIuYXBwbHkodGhpcyxhcmdzKX0sMCk7cmVzdWx0PXRydWU7aWYoZXZlbnQub25jZSl7c3RvcHBlZC5wdXNoKGV2ZW50KTtyZXR1cm4gZmFsc2V9cmV0dXJuIHRydWV9KTtzdG9wcGVkLmZvckVhY2goZXZlbnQ9Pnt0aGlzLl9zdG9wRXZlbnQoZXZlbnQpfSk7cmV0dXJuIHJlc3VsdH1saXN0ZW5lckNvdW50KGV2ZW50TmFtZSl7aWYoIWV2ZW50TmFtZSl7cmV0dXJuIHRoaXMuX2V2ZW50cy5sZW5ndGh9bGV0IGV2ZW50VGFnPWdldEV2ZW50VGFnJDEoZXZlbnROYW1lKTtyZXR1cm4gdGhpcy5fZXZlbnRzLmZpbHRlcihldmVudD0+e3JldHVybiBldmVudC50YWc9PT1ldmVudFRhZ30pLmxlbmd0aH1saXN0ZW5lcnMoZXZlbnROYW1lKXtpZihldmVudE5hbWU9PW51bGwpe3JldHVybiB0aGlzLl9ldmVudHMubWFwKGV2ZW50PT5ldmVudC5saXN0ZW5lcil9bGV0IGV2ZW50VGFnPWdldEV2ZW50VGFnJDEoZXZlbnROYW1lKTtyZXR1cm4gdGhpcy5fZXZlbnRzLmZpbHRlcihldmVudD0+ZXZlbnQudGFnPT09ZXZlbnRUYWcpLm1hcChldmVudD0+ZXZlbnQubGlzdGVuZXIpfW9mZihldmVudE5hbWUsbGlzdGVuZXIpe2lmKGxpc3RlbmVyPT1udWxsKXtyZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lKX1jb25zdCBzdG9wcGVkPVtdO2xldCBmb3VuZD1mYWxzZTtsZXQgZXZlbnRUYWc9Z2V0RXZlbnRUYWckMShldmVudE5hbWUpO3RoaXMuX2V2ZW50cz10aGlzLl9ldmVudHMuZmlsdGVyKGV2ZW50PT57aWYoZXZlbnQudGFnIT09ZXZlbnRUYWd8fGV2ZW50Lmxpc3RlbmVyIT1saXN0ZW5lcil7cmV0dXJuIHRydWV9aWYoZm91bmQpe3JldHVybiB0cnVlfWZvdW5kPXRydWU7c3RvcHBlZC5wdXNoKGV2ZW50KTtyZXR1cm4gZmFsc2V9KTtzdG9wcGVkLmZvckVhY2goZXZlbnQ9Pnt0aGlzLl9zdG9wRXZlbnQoZXZlbnQpfSk7cmV0dXJuIHRoaXN9cmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZSl7bGV0IHN0b3BwZWQ9W107aWYoZXZlbnROYW1lPT1udWxsKXtzdG9wcGVkPXRoaXMuX2V2ZW50czt0aGlzLl9ldmVudHM9W119ZWxzZXtjb25zdCBldmVudFRhZz1nZXRFdmVudFRhZyQxKGV2ZW50TmFtZSk7dGhpcy5fZXZlbnRzPXRoaXMuX2V2ZW50cy5maWx0ZXIoZXZlbnQ9PntpZihldmVudC50YWchPT1ldmVudFRhZyl7cmV0dXJuIHRydWV9c3RvcHBlZC5wdXNoKGV2ZW50KTtyZXR1cm4gZmFsc2V9KX1zdG9wcGVkLmZvckVhY2goZXZlbnQ9Pnt0aGlzLl9zdG9wRXZlbnQoZXZlbnQpfSk7cmV0dXJuIHRoaXN9fVwidXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXIkOT13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07Y29uc3QgbG9nZ2VyJHU9bmV3IExvZ2dlcih2ZXJzaW9uJG0pO2NvbnN0IGVycm9yR2FzPVtcImNhbGxcIixcImVzdGltYXRlR2FzXCJdO2Z1bmN0aW9uIGNoZWNrRXJyb3IobWV0aG9kLGVycm9yLHBhcmFtcyl7aWYobWV0aG9kPT09XCJjYWxsXCImJmVycm9yLmNvZGU9PT1Mb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUil7Y29uc3QgZT1lcnJvci5lcnJvcjtpZihlJiZlLm1lc3NhZ2UubWF0Y2goXCJyZXZlcnRlZFwiKSYmaXNIZXhTdHJpbmcoZS5kYXRhKSl7cmV0dXJuIGUuZGF0YX19bGV0IG1lc3NhZ2U9ZXJyb3IubWVzc2FnZTtpZihlcnJvci5jb2RlPT09TG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1ImJmVycm9yLmVycm9yJiZ0eXBlb2YgZXJyb3IuZXJyb3IubWVzc2FnZT09PVwic3RyaW5nXCIpe21lc3NhZ2U9ZXJyb3IuZXJyb3IubWVzc2FnZX1lbHNlIGlmKHR5cGVvZiBlcnJvci5ib2R5PT09XCJzdHJpbmdcIil7bWVzc2FnZT1lcnJvci5ib2R5fWVsc2UgaWYodHlwZW9mIGVycm9yLnJlc3BvbnNlVGV4dD09PVwic3RyaW5nXCIpe21lc3NhZ2U9ZXJyb3IucmVzcG9uc2VUZXh0fW1lc3NhZ2U9KG1lc3NhZ2V8fFwiXCIpLnRvTG93ZXJDYXNlKCk7Y29uc3QgdHJhbnNhY3Rpb249cGFyYW1zLnRyYW5zYWN0aW9ufHxwYXJhbXMuc2lnbmVkVHJhbnNhY3Rpb247aWYobWVzc2FnZS5tYXRjaCgvaW5zdWZmaWNpZW50IGZ1bmRzLykpe2xvZ2dlciR1LnRocm93RXJyb3IoXCJpbnN1ZmZpY2llbnQgZnVuZHMgZm9yIGludHJpbnNpYyB0cmFuc2FjdGlvbiBjb3N0XCIsTG9nZ2VyLmVycm9ycy5JTlNVRkZJQ0lFTlRfRlVORFMse2Vycm9yOmVycm9yLG1ldGhvZDptZXRob2QsdHJhbnNhY3Rpb246dHJhbnNhY3Rpb259KX1pZihtZXNzYWdlLm1hdGNoKC9ub25jZSB0b28gbG93Lykpe2xvZ2dlciR1LnRocm93RXJyb3IoXCJub25jZSBoYXMgYWxyZWFkeSBiZWVuIHVzZWRcIixMb2dnZXIuZXJyb3JzLk5PTkNFX0VYUElSRUQse2Vycm9yOmVycm9yLG1ldGhvZDptZXRob2QsdHJhbnNhY3Rpb246dHJhbnNhY3Rpb259KX1pZihtZXNzYWdlLm1hdGNoKC9yZXBsYWNlbWVudCB0cmFuc2FjdGlvbiB1bmRlcnByaWNlZC8pKXtsb2dnZXIkdS50aHJvd0Vycm9yKFwicmVwbGFjZW1lbnQgZmVlIHRvbyBsb3dcIixMb2dnZXIuZXJyb3JzLlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VELHtlcnJvcjplcnJvcixtZXRob2Q6bWV0aG9kLHRyYW5zYWN0aW9uOnRyYW5zYWN0aW9ufSl9aWYobWVzc2FnZS5tYXRjaCgvb25seSByZXBsYXktcHJvdGVjdGVkLykpe2xvZ2dlciR1LnRocm93RXJyb3IoXCJsZWdhY3kgcHJlLWVpcC0xNTUgdHJhbnNhY3Rpb25zIG5vdCBzdXBwb3J0ZWRcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7ZXJyb3I6ZXJyb3IsbWV0aG9kOm1ldGhvZCx0cmFuc2FjdGlvbjp0cmFuc2FjdGlvbn0pfWlmKGVycm9yR2FzLmluZGV4T2YobWV0aG9kKT49MCYmbWVzc2FnZS5tYXRjaCgvZ2FzIHJlcXVpcmVkIGV4Y2VlZHMgYWxsb3dhbmNlfGFsd2F5cyBmYWlsaW5nIHRyYW5zYWN0aW9ufGV4ZWN1dGlvbiByZXZlcnRlZC8pKXtsb2dnZXIkdS50aHJvd0Vycm9yKFwiY2Fubm90IGVzdGltYXRlIGdhczsgdHJhbnNhY3Rpb24gbWF5IGZhaWwgb3IgbWF5IHJlcXVpcmUgbWFudWFsIGdhcyBsaW1pdFwiLExvZ2dlci5lcnJvcnMuVU5QUkVESUNUQUJMRV9HQVNfTElNSVQse2Vycm9yOmVycm9yLG1ldGhvZDptZXRob2QsdHJhbnNhY3Rpb246dHJhbnNhY3Rpb259KX10aHJvdyBlcnJvcn1mdW5jdGlvbiB0aW1lcih0aW1lb3V0KXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSl7c2V0VGltZW91dChyZXNvbHZlLHRpbWVvdXQpfSl9ZnVuY3Rpb24gZ2V0UmVzdWx0KHBheWxvYWQpe2lmKHBheWxvYWQuZXJyb3Ipe2NvbnN0IGVycm9yPW5ldyBFcnJvcihwYXlsb2FkLmVycm9yLm1lc3NhZ2UpO2Vycm9yLmNvZGU9cGF5bG9hZC5lcnJvci5jb2RlO2Vycm9yLmRhdGE9cGF5bG9hZC5lcnJvci5kYXRhO3Rocm93IGVycm9yfXJldHVybiBwYXlsb2FkLnJlc3VsdH1mdW5jdGlvbiBnZXRMb3dlckNhc2UodmFsdWUpe2lmKHZhbHVlKXtyZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKX1yZXR1cm4gdmFsdWV9Y29uc3QgX2NvbnN0cnVjdG9yR3VhcmQkND17fTtjbGFzcyBKc29uUnBjU2lnbmVyIGV4dGVuZHMgU2lnbmVye2NvbnN0cnVjdG9yKGNvbnN0cnVjdG9yR3VhcmQscHJvdmlkZXIsYWRkcmVzc09ySW5kZXgpe2xvZ2dlciR1LmNoZWNrTmV3KG5ldy50YXJnZXQsSnNvblJwY1NpZ25lcik7c3VwZXIoKTtpZihjb25zdHJ1Y3Rvckd1YXJkIT09X2NvbnN0cnVjdG9yR3VhcmQkNCl7dGhyb3cgbmV3IEVycm9yKFwiZG8gbm90IGNhbGwgdGhlIEpzb25ScGNTaWduZXIgY29uc3RydWN0b3IgZGlyZWN0bHk7IHVzZSBwcm92aWRlci5nZXRTaWduZXJcIil9ZGVmaW5lUmVhZE9ubHkodGhpcyxcInByb3ZpZGVyXCIscHJvdmlkZXIpO2lmKGFkZHJlc3NPckluZGV4PT1udWxsKXthZGRyZXNzT3JJbmRleD0wfWlmKHR5cGVvZiBhZGRyZXNzT3JJbmRleD09PVwic3RyaW5nXCIpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfYWRkcmVzc1wiLHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmFkZHJlc3MoYWRkcmVzc09ySW5kZXgpKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2luZGV4XCIsbnVsbCl9ZWxzZSBpZih0eXBlb2YgYWRkcmVzc09ySW5kZXg9PT1cIm51bWJlclwiKXtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2luZGV4XCIsYWRkcmVzc09ySW5kZXgpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfYWRkcmVzc1wiLG51bGwpfWVsc2V7bG9nZ2VyJHUudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhZGRyZXNzIG9yIGluZGV4XCIsXCJhZGRyZXNzT3JJbmRleFwiLGFkZHJlc3NPckluZGV4KX19Y29ubmVjdChwcm92aWRlcil7cmV0dXJuIGxvZ2dlciR1LnRocm93RXJyb3IoXCJjYW5ub3QgYWx0ZXIgSlNPTi1SUEMgU2lnbmVyIGNvbm5lY3Rpb25cIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwiY29ubmVjdFwifSl9Y29ubmVjdFVuY2hlY2tlZCgpe3JldHVybiBuZXcgVW5jaGVja2VkSnNvblJwY1NpZ25lcihfY29uc3RydWN0b3JHdWFyZCQ0LHRoaXMucHJvdmlkZXIsdGhpcy5fYWRkcmVzc3x8dGhpcy5faW5kZXgpfWdldEFkZHJlc3MoKXtpZih0aGlzLl9hZGRyZXNzKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2FkZHJlc3MpfXJldHVybiB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfYWNjb3VudHNcIixbXSkudGhlbihhY2NvdW50cz0+e2lmKGFjY291bnRzLmxlbmd0aDw9dGhpcy5faW5kZXgpe2xvZ2dlciR1LnRocm93RXJyb3IoXCJ1bmtub3duIGFjY291bnQgI1wiK3RoaXMuX2luZGV4LExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJnZXRBZGRyZXNzXCJ9KX1yZXR1cm4gdGhpcy5wcm92aWRlci5mb3JtYXR0ZXIuYWRkcmVzcyhhY2NvdW50c1t0aGlzLl9pbmRleF0pfSl9c2VuZFVuY2hlY2tlZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKXt0cmFuc2FjdGlvbj1zaGFsbG93Q29weSh0cmFuc2FjdGlvbik7Y29uc3QgZnJvbUFkZHJlc3M9dGhpcy5nZXRBZGRyZXNzKCkudGhlbihhZGRyZXNzPT57aWYoYWRkcmVzcyl7YWRkcmVzcz1hZGRyZXNzLnRvTG93ZXJDYXNlKCl9cmV0dXJuIGFkZHJlc3N9KTtpZih0cmFuc2FjdGlvbi5nYXNMaW1pdD09bnVsbCl7Y29uc3QgZXN0aW1hdGU9c2hhbGxvd0NvcHkodHJhbnNhY3Rpb24pO2VzdGltYXRlLmZyb209ZnJvbUFkZHJlc3M7dHJhbnNhY3Rpb24uZ2FzTGltaXQ9dGhpcy5wcm92aWRlci5lc3RpbWF0ZUdhcyhlc3RpbWF0ZSl9cmV0dXJuIHJlc29sdmVQcm9wZXJ0aWVzKHt0eDpyZXNvbHZlUHJvcGVydGllcyh0cmFuc2FjdGlvbiksc2VuZGVyOmZyb21BZGRyZXNzfSkudGhlbigoe3R4OnR4LHNlbmRlcjpzZW5kZXJ9KT0+e2lmKHR4LmZyb20hPW51bGwpe2lmKHR4LmZyb20udG9Mb3dlckNhc2UoKSE9PXNlbmRlcil7bG9nZ2VyJHUudGhyb3dBcmd1bWVudEVycm9yKFwiZnJvbSBhZGRyZXNzIG1pc21hdGNoXCIsXCJ0cmFuc2FjdGlvblwiLHRyYW5zYWN0aW9uKX19ZWxzZXt0eC5mcm9tPXNlbmRlcn1jb25zdCBoZXhUeD10aGlzLnByb3ZpZGVyLmNvbnN0cnVjdG9yLmhleGxpZnlUcmFuc2FjdGlvbih0eCx7ZnJvbTp0cnVlfSk7cmV0dXJuIHRoaXMucHJvdmlkZXIuc2VuZChcImV0aF9zZW5kVHJhbnNhY3Rpb25cIixbaGV4VHhdKS50aGVuKGhhc2g9PntyZXR1cm4gaGFzaH0sZXJyb3I9PntyZXR1cm4gY2hlY2tFcnJvcihcInNlbmRUcmFuc2FjdGlvblwiLGVycm9yLGhleFR4KX0pfSl9c2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKXtyZXR1cm4gbG9nZ2VyJHUudGhyb3dFcnJvcihcInNpZ25pbmcgdHJhbnNhY3Rpb25zIGlzIHVuc3VwcG9ydGVkXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcInNpZ25UcmFuc2FjdGlvblwifSl9c2VuZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKXtyZXR1cm4gdGhpcy5zZW5kVW5jaGVja2VkVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pLnRoZW4oaGFzaD0+e3JldHVybiBwb2xsKCgpPT57cmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb24oaGFzaCkudGhlbih0eD0+e2lmKHR4PT09bnVsbCl7cmV0dXJuIHVuZGVmaW5lZH1yZXR1cm4gdGhpcy5wcm92aWRlci5fd3JhcFRyYW5zYWN0aW9uKHR4LGhhc2gpfSl9LHtvbmNlQmxvY2s6dGhpcy5wcm92aWRlcn0pLmNhdGNoKGVycm9yPT57ZXJyb3IudHJhbnNhY3Rpb25IYXNoPWhhc2g7dGhyb3cgZXJyb3J9KX0pfXNpZ25NZXNzYWdlKG1lc3NhZ2Upe3JldHVybiBfX2F3YWl0ZXIkOSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgZGF0YT10eXBlb2YgbWVzc2FnZT09PVwic3RyaW5nXCI/dG9VdGY4Qnl0ZXMobWVzc2FnZSk6bWVzc2FnZTtjb25zdCBhZGRyZXNzPXlpZWxkIHRoaXMuZ2V0QWRkcmVzcygpO3JldHVybiB5aWVsZCB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfc2lnblwiLFthZGRyZXNzLnRvTG93ZXJDYXNlKCksaGV4bGlmeShkYXRhKV0pfSl9X3NpZ25UeXBlZERhdGEoZG9tYWluLHR5cGVzLHZhbHVlKXtyZXR1cm4gX19hd2FpdGVyJDkodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IHBvcHVsYXRlZD15aWVsZCBUeXBlZERhdGFFbmNvZGVyLnJlc29sdmVOYW1lcyhkb21haW4sdHlwZXMsdmFsdWUsbmFtZT0+e3JldHVybiB0aGlzLnByb3ZpZGVyLnJlc29sdmVOYW1lKG5hbWUpfSk7Y29uc3QgYWRkcmVzcz15aWVsZCB0aGlzLmdldEFkZHJlc3MoKTtyZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX3NpZ25UeXBlZERhdGFfdjRcIixbYWRkcmVzcy50b0xvd2VyQ2FzZSgpLEpTT04uc3RyaW5naWZ5KFR5cGVkRGF0YUVuY29kZXIuZ2V0UGF5bG9hZChwb3B1bGF0ZWQuZG9tYWluLHR5cGVzLHBvcHVsYXRlZC52YWx1ZSkpXSl9KX11bmxvY2socGFzc3dvcmQpe3JldHVybiBfX2F3YWl0ZXIkOSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgcHJvdmlkZXI9dGhpcy5wcm92aWRlcjtjb25zdCBhZGRyZXNzPXlpZWxkIHRoaXMuZ2V0QWRkcmVzcygpO3JldHVybiBwcm92aWRlci5zZW5kKFwicGVyc29uYWxfdW5sb2NrQWNjb3VudFwiLFthZGRyZXNzLnRvTG93ZXJDYXNlKCkscGFzc3dvcmQsbnVsbF0pfSl9fWNsYXNzIFVuY2hlY2tlZEpzb25ScGNTaWduZXIgZXh0ZW5kcyBKc29uUnBjU2lnbmVye3NlbmRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbil7cmV0dXJuIHRoaXMuc2VuZFVuY2hlY2tlZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKS50aGVuKGhhc2g9PntyZXR1cm57aGFzaDpoYXNoLG5vbmNlOm51bGwsZ2FzTGltaXQ6bnVsbCxnYXNQcmljZTpudWxsLGRhdGE6bnVsbCx2YWx1ZTpudWxsLGNoYWluSWQ6bnVsbCxjb25maXJtYXRpb25zOjAsZnJvbTpudWxsLHdhaXQ6Y29uZmlybWF0aW9ucz0+e3JldHVybiB0aGlzLnByb3ZpZGVyLndhaXRGb3JUcmFuc2FjdGlvbihoYXNoLGNvbmZpcm1hdGlvbnMpfX19KX19Y29uc3QgYWxsb3dlZFRyYW5zYWN0aW9uS2V5cyQzPXtjaGFpbklkOnRydWUsZGF0YTp0cnVlLGdhc0xpbWl0OnRydWUsZ2FzUHJpY2U6dHJ1ZSxub25jZTp0cnVlLHRvOnRydWUsdmFsdWU6dHJ1ZSx0eXBlOnRydWUsYWNjZXNzTGlzdDp0cnVlfTtjbGFzcyBKc29uUnBjUHJvdmlkZXIgZXh0ZW5kcyBCYXNlUHJvdmlkZXJ7Y29uc3RydWN0b3IodXJsLG5ldHdvcmspe2xvZ2dlciR1LmNoZWNrTmV3KG5ldy50YXJnZXQsSnNvblJwY1Byb3ZpZGVyKTtsZXQgbmV0d29ya09yUmVhZHk9bmV0d29yaztpZihuZXR3b3JrT3JSZWFkeT09bnVsbCl7bmV0d29ya09yUmVhZHk9bmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e3NldFRpbWVvdXQoKCk9Pnt0aGlzLmRldGVjdE5ldHdvcmsoKS50aGVuKG5ldHdvcms9PntyZXNvbHZlKG5ldHdvcmspfSxlcnJvcj0+e3JlamVjdChlcnJvcil9KX0sMCl9KX1zdXBlcihuZXR3b3JrT3JSZWFkeSk7aWYoIXVybCl7dXJsPWdldFN0YXRpYyh0aGlzLmNvbnN0cnVjdG9yLFwiZGVmYXVsdFVybFwiKSgpfWlmKHR5cGVvZiB1cmw9PT1cInN0cmluZ1wiKXtkZWZpbmVSZWFkT25seSh0aGlzLFwiY29ubmVjdGlvblwiLE9iamVjdC5mcmVlemUoe3VybDp1cmx9KSl9ZWxzZXtkZWZpbmVSZWFkT25seSh0aGlzLFwiY29ubmVjdGlvblwiLE9iamVjdC5mcmVlemUoc2hhbGxvd0NvcHkodXJsKSkpfXRoaXMuX25leHRJZD00Mn1nZXQgX2NhY2hlKCl7aWYodGhpcy5fZXZlbnRMb29wQ2FjaGU9PW51bGwpe3RoaXMuX2V2ZW50TG9vcENhY2hlPXt9fXJldHVybiB0aGlzLl9ldmVudExvb3BDYWNoZX1zdGF0aWMgZGVmYXVsdFVybCgpe3JldHVyblwiaHR0cDovL2xvY2FsaG9zdDo4NTQ1XCJ9ZGV0ZWN0TmV0d29yaygpe2lmKCF0aGlzLl9jYWNoZVtcImRldGVjdE5ldHdvcmtcIl0pe3RoaXMuX2NhY2hlW1wiZGV0ZWN0TmV0d29ya1wiXT10aGlzLl91bmNhY2hlZERldGVjdE5ldHdvcmsoKTtzZXRUaW1lb3V0KCgpPT57dGhpcy5fY2FjaGVbXCJkZXRlY3ROZXR3b3JrXCJdPW51bGx9LDApfXJldHVybiB0aGlzLl9jYWNoZVtcImRldGVjdE5ldHdvcmtcIl19X3VuY2FjaGVkRGV0ZWN0TmV0d29yaygpe3JldHVybiBfX2F3YWl0ZXIkOSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGltZXIoMCk7bGV0IGNoYWluSWQ9bnVsbDt0cnl7Y2hhaW5JZD15aWVsZCB0aGlzLnNlbmQoXCJldGhfY2hhaW5JZFwiLFtdKX1jYXRjaChlcnJvcil7dHJ5e2NoYWluSWQ9eWllbGQgdGhpcy5zZW5kKFwibmV0X3ZlcnNpb25cIixbXSl9Y2F0Y2goZXJyb3Ipe319aWYoY2hhaW5JZCE9bnVsbCl7Y29uc3QgZ2V0TmV0d29yaz1nZXRTdGF0aWModGhpcy5jb25zdHJ1Y3RvcixcImdldE5ldHdvcmtcIik7dHJ5e3JldHVybiBnZXROZXR3b3JrKEJpZ051bWJlci5mcm9tKGNoYWluSWQpLnRvTnVtYmVyKCkpfWNhdGNoKGVycm9yKXtyZXR1cm4gbG9nZ2VyJHUudGhyb3dFcnJvcihcImNvdWxkIG5vdCBkZXRlY3QgbmV0d29ya1wiLExvZ2dlci5lcnJvcnMuTkVUV09SS19FUlJPUix7Y2hhaW5JZDpjaGFpbklkLGV2ZW50OlwiaW52YWxpZE5ldHdvcmtcIixzZXJ2ZXJFcnJvcjplcnJvcn0pfX1yZXR1cm4gbG9nZ2VyJHUudGhyb3dFcnJvcihcImNvdWxkIG5vdCBkZXRlY3QgbmV0d29ya1wiLExvZ2dlci5lcnJvcnMuTkVUV09SS19FUlJPUix7ZXZlbnQ6XCJub05ldHdvcmtcIn0pfSl9Z2V0U2lnbmVyKGFkZHJlc3NPckluZGV4KXtyZXR1cm4gbmV3IEpzb25ScGNTaWduZXIoX2NvbnN0cnVjdG9yR3VhcmQkNCx0aGlzLGFkZHJlc3NPckluZGV4KX1nZXRVbmNoZWNrZWRTaWduZXIoYWRkcmVzc09ySW5kZXgpe3JldHVybiB0aGlzLmdldFNpZ25lcihhZGRyZXNzT3JJbmRleCkuY29ubmVjdFVuY2hlY2tlZCgpfWxpc3RBY2NvdW50cygpe3JldHVybiB0aGlzLnNlbmQoXCJldGhfYWNjb3VudHNcIixbXSkudGhlbihhY2NvdW50cz0+e3JldHVybiBhY2NvdW50cy5tYXAoYT0+dGhpcy5mb3JtYXR0ZXIuYWRkcmVzcyhhKSl9KX1zZW5kKG1ldGhvZCxwYXJhbXMpe2NvbnN0IHJlcXVlc3Q9e21ldGhvZDptZXRob2QscGFyYW1zOnBhcmFtcyxpZDp0aGlzLl9uZXh0SWQrKyxqc29ucnBjOlwiMi4wXCJ9O3RoaXMuZW1pdChcImRlYnVnXCIse2FjdGlvbjpcInJlcXVlc3RcIixyZXF1ZXN0OmRlZXBDb3B5KHJlcXVlc3QpLHByb3ZpZGVyOnRoaXN9KTtjb25zdCBjYWNoZT1bXCJldGhfY2hhaW5JZFwiLFwiZXRoX2Jsb2NrTnVtYmVyXCJdLmluZGV4T2YobWV0aG9kKT49MDtpZihjYWNoZSYmdGhpcy5fY2FjaGVbbWV0aG9kXSl7cmV0dXJuIHRoaXMuX2NhY2hlW21ldGhvZF19Y29uc3QgcmVzdWx0PWZldGNoSnNvbih0aGlzLmNvbm5lY3Rpb24sSlNPTi5zdHJpbmdpZnkocmVxdWVzdCksZ2V0UmVzdWx0KS50aGVuKHJlc3VsdD0+e3RoaXMuZW1pdChcImRlYnVnXCIse2FjdGlvbjpcInJlc3BvbnNlXCIscmVxdWVzdDpyZXF1ZXN0LHJlc3BvbnNlOnJlc3VsdCxwcm92aWRlcjp0aGlzfSk7cmV0dXJuIHJlc3VsdH0sZXJyb3I9Pnt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXNwb25zZVwiLGVycm9yOmVycm9yLHJlcXVlc3Q6cmVxdWVzdCxwcm92aWRlcjp0aGlzfSk7dGhyb3cgZXJyb3J9KTtpZihjYWNoZSl7dGhpcy5fY2FjaGVbbWV0aG9kXT1yZXN1bHQ7c2V0VGltZW91dCgoKT0+e3RoaXMuX2NhY2hlW21ldGhvZF09bnVsbH0sMCl9cmV0dXJuIHJlc3VsdH1wcmVwYXJlUmVxdWVzdChtZXRob2QscGFyYW1zKXtzd2l0Y2gobWV0aG9kKXtjYXNlXCJnZXRCbG9ja051bWJlclwiOnJldHVybltcImV0aF9ibG9ja051bWJlclwiLFtdXTtjYXNlXCJnZXRHYXNQcmljZVwiOnJldHVybltcImV0aF9nYXNQcmljZVwiLFtdXTtjYXNlXCJnZXRCYWxhbmNlXCI6cmV0dXJuW1wiZXRoX2dldEJhbGFuY2VcIixbZ2V0TG93ZXJDYXNlKHBhcmFtcy5hZGRyZXNzKSxwYXJhbXMuYmxvY2tUYWddXTtjYXNlXCJnZXRUcmFuc2FjdGlvbkNvdW50XCI6cmV0dXJuW1wiZXRoX2dldFRyYW5zYWN0aW9uQ291bnRcIixbZ2V0TG93ZXJDYXNlKHBhcmFtcy5hZGRyZXNzKSxwYXJhbXMuYmxvY2tUYWddXTtjYXNlXCJnZXRDb2RlXCI6cmV0dXJuW1wiZXRoX2dldENvZGVcIixbZ2V0TG93ZXJDYXNlKHBhcmFtcy5hZGRyZXNzKSxwYXJhbXMuYmxvY2tUYWddXTtjYXNlXCJnZXRTdG9yYWdlQXRcIjpyZXR1cm5bXCJldGhfZ2V0U3RvcmFnZUF0XCIsW2dldExvd2VyQ2FzZShwYXJhbXMuYWRkcmVzcykscGFyYW1zLnBvc2l0aW9uLHBhcmFtcy5ibG9ja1RhZ11dO2Nhc2VcInNlbmRUcmFuc2FjdGlvblwiOnJldHVybltcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIixbcGFyYW1zLnNpZ25lZFRyYW5zYWN0aW9uXV07Y2FzZVwiZ2V0QmxvY2tcIjppZihwYXJhbXMuYmxvY2tUYWcpe3JldHVybltcImV0aF9nZXRCbG9ja0J5TnVtYmVyXCIsW3BhcmFtcy5ibG9ja1RhZywhIXBhcmFtcy5pbmNsdWRlVHJhbnNhY3Rpb25zXV19ZWxzZSBpZihwYXJhbXMuYmxvY2tIYXNoKXtyZXR1cm5bXCJldGhfZ2V0QmxvY2tCeUhhc2hcIixbcGFyYW1zLmJsb2NrSGFzaCwhIXBhcmFtcy5pbmNsdWRlVHJhbnNhY3Rpb25zXV19cmV0dXJuIG51bGw7Y2FzZVwiZ2V0VHJhbnNhY3Rpb25cIjpyZXR1cm5bXCJldGhfZ2V0VHJhbnNhY3Rpb25CeUhhc2hcIixbcGFyYW1zLnRyYW5zYWN0aW9uSGFzaF1dO2Nhc2VcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiOnJldHVybltcImV0aF9nZXRUcmFuc2FjdGlvblJlY2VpcHRcIixbcGFyYW1zLnRyYW5zYWN0aW9uSGFzaF1dO2Nhc2VcImNhbGxcIjp7Y29uc3QgaGV4bGlmeVRyYW5zYWN0aW9uPWdldFN0YXRpYyh0aGlzLmNvbnN0cnVjdG9yLFwiaGV4bGlmeVRyYW5zYWN0aW9uXCIpO3JldHVybltcImV0aF9jYWxsXCIsW2hleGxpZnlUcmFuc2FjdGlvbihwYXJhbXMudHJhbnNhY3Rpb24se2Zyb206dHJ1ZX0pLHBhcmFtcy5ibG9ja1RhZ11dfWNhc2VcImVzdGltYXRlR2FzXCI6e2NvbnN0IGhleGxpZnlUcmFuc2FjdGlvbj1nZXRTdGF0aWModGhpcy5jb25zdHJ1Y3RvcixcImhleGxpZnlUcmFuc2FjdGlvblwiKTtyZXR1cm5bXCJldGhfZXN0aW1hdGVHYXNcIixbaGV4bGlmeVRyYW5zYWN0aW9uKHBhcmFtcy50cmFuc2FjdGlvbix7ZnJvbTp0cnVlfSldXX1jYXNlXCJnZXRMb2dzXCI6aWYocGFyYW1zLmZpbHRlciYmcGFyYW1zLmZpbHRlci5hZGRyZXNzIT1udWxsKXtwYXJhbXMuZmlsdGVyLmFkZHJlc3M9Z2V0TG93ZXJDYXNlKHBhcmFtcy5maWx0ZXIuYWRkcmVzcyl9cmV0dXJuW1wiZXRoX2dldExvZ3NcIixbcGFyYW1zLmZpbHRlcl1dO2RlZmF1bHQ6YnJlYWt9cmV0dXJuIG51bGx9cGVyZm9ybShtZXRob2QscGFyYW1zKXtyZXR1cm4gX19hd2FpdGVyJDkodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IGFyZ3M9dGhpcy5wcmVwYXJlUmVxdWVzdChtZXRob2QscGFyYW1zKTtpZihhcmdzPT1udWxsKXtsb2dnZXIkdS50aHJvd0Vycm9yKG1ldGhvZCtcIiBub3QgaW1wbGVtZW50ZWRcIixMb2dnZXIuZXJyb3JzLk5PVF9JTVBMRU1FTlRFRCx7b3BlcmF0aW9uOm1ldGhvZH0pfXRyeXtyZXR1cm4geWllbGQgdGhpcy5zZW5kKGFyZ3NbMF0sYXJnc1sxXSl9Y2F0Y2goZXJyb3Ipe3JldHVybiBjaGVja0Vycm9yKG1ldGhvZCxlcnJvcixwYXJhbXMpfX0pfV9zdGFydEV2ZW50KGV2ZW50KXtpZihldmVudC50YWc9PT1cInBlbmRpbmdcIil7dGhpcy5fc3RhcnRQZW5kaW5nKCl9c3VwZXIuX3N0YXJ0RXZlbnQoZXZlbnQpfV9zdGFydFBlbmRpbmcoKXtpZih0aGlzLl9wZW5kaW5nRmlsdGVyIT1udWxsKXtyZXR1cm59Y29uc3Qgc2VsZj10aGlzO2NvbnN0IHBlbmRpbmdGaWx0ZXI9dGhpcy5zZW5kKFwiZXRoX25ld1BlbmRpbmdUcmFuc2FjdGlvbkZpbHRlclwiLFtdKTt0aGlzLl9wZW5kaW5nRmlsdGVyPXBlbmRpbmdGaWx0ZXI7cGVuZGluZ0ZpbHRlci50aGVuKGZ1bmN0aW9uKGZpbHRlcklkKXtmdW5jdGlvbiBwb2xsKCl7c2VsZi5zZW5kKFwiZXRoX2dldEZpbHRlckNoYW5nZXNcIixbZmlsdGVySWRdKS50aGVuKGZ1bmN0aW9uKGhhc2hlcyl7aWYoc2VsZi5fcGVuZGluZ0ZpbHRlciE9cGVuZGluZ0ZpbHRlcil7cmV0dXJuIG51bGx9bGV0IHNlcT1Qcm9taXNlLnJlc29sdmUoKTtoYXNoZXMuZm9yRWFjaChmdW5jdGlvbihoYXNoKXtzZWxmLl9lbWl0dGVkW1widDpcIitoYXNoLnRvTG93ZXJDYXNlKCldPVwicGVuZGluZ1wiO3NlcT1zZXEudGhlbihmdW5jdGlvbigpe3JldHVybiBzZWxmLmdldFRyYW5zYWN0aW9uKGhhc2gpLnRoZW4oZnVuY3Rpb24odHgpe3NlbGYuZW1pdChcInBlbmRpbmdcIix0eCk7cmV0dXJuIG51bGx9KX0pfSk7cmV0dXJuIHNlcS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHRpbWVyKDFlMyl9KX0pLnRoZW4oZnVuY3Rpb24oKXtpZihzZWxmLl9wZW5kaW5nRmlsdGVyIT1wZW5kaW5nRmlsdGVyKXtzZWxmLnNlbmQoXCJldGhfdW5pbnN0YWxsRmlsdGVyXCIsW2ZpbHRlcklkXSk7cmV0dXJufXNldFRpbWVvdXQoZnVuY3Rpb24oKXtwb2xsKCl9LDApO3JldHVybiBudWxsfSkuY2F0Y2goZXJyb3I9Pnt9KX1wb2xsKCk7cmV0dXJuIGZpbHRlcklkfSkuY2F0Y2goZXJyb3I9Pnt9KX1fc3RvcEV2ZW50KGV2ZW50KXtpZihldmVudC50YWc9PT1cInBlbmRpbmdcIiYmdGhpcy5saXN0ZW5lckNvdW50KFwicGVuZGluZ1wiKT09PTApe3RoaXMuX3BlbmRpbmdGaWx0ZXI9bnVsbH1zdXBlci5fc3RvcEV2ZW50KGV2ZW50KX1zdGF0aWMgaGV4bGlmeVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uLGFsbG93RXh0cmEpe2NvbnN0IGFsbG93ZWQ9c2hhbGxvd0NvcHkoYWxsb3dlZFRyYW5zYWN0aW9uS2V5cyQzKTtpZihhbGxvd0V4dHJhKXtmb3IoY29uc3Qga2V5IGluIGFsbG93RXh0cmEpe2lmKGFsbG93RXh0cmFba2V5XSl7YWxsb3dlZFtrZXldPXRydWV9fX1jaGVja1Byb3BlcnRpZXModHJhbnNhY3Rpb24sYWxsb3dlZCk7Y29uc3QgcmVzdWx0PXt9O1tcImdhc0xpbWl0XCIsXCJnYXNQcmljZVwiLFwidHlwZVwiLFwibm9uY2VcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oa2V5KXtpZih0cmFuc2FjdGlvbltrZXldPT1udWxsKXtyZXR1cm59Y29uc3QgdmFsdWU9aGV4VmFsdWUodHJhbnNhY3Rpb25ba2V5XSk7aWYoa2V5PT09XCJnYXNMaW1pdFwiKXtrZXk9XCJnYXNcIn1yZXN1bHRba2V5XT12YWx1ZX0pO1tcImZyb21cIixcInRvXCIsXCJkYXRhXCJdLmZvckVhY2goZnVuY3Rpb24oa2V5KXtpZih0cmFuc2FjdGlvbltrZXldPT1udWxsKXtyZXR1cm59cmVzdWx0W2tleV09aGV4bGlmeSh0cmFuc2FjdGlvbltrZXldKX0pO2lmKHRyYW5zYWN0aW9uLmFjY2Vzc0xpc3Qpe3Jlc3VsdFtcImFjY2Vzc0xpc3RcIl09YWNjZXNzTGlzdGlmeSh0cmFuc2FjdGlvbi5hY2Nlc3NMaXN0KX1yZXR1cm4gcmVzdWx0fX1cInVzZSBzdHJpY3RcIjtsZXQgV1M9bnVsbDt0cnl7V1M9V2ViU29ja2V0O2lmKFdTPT1udWxsKXt0aHJvdyBuZXcgRXJyb3IoXCJpbmplY3QgcGxlYXNlXCIpfX1jYXRjaChlcnJvcil7Y29uc3QgbG9nZ2VyPW5ldyBMb2dnZXIodmVyc2lvbiRtKTtXUz1mdW5jdGlvbigpe2xvZ2dlci50aHJvd0Vycm9yKFwiV2ViU29ja2V0cyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnRcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwibmV3IFdlYlNvY2tldCgpXCJ9KX19XCJ1c2Ugc3RyaWN0XCI7dmFyIF9fYXdhaXRlciRhPXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkdj1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7bGV0IE5leHRJZD0xO2NsYXNzIFdlYlNvY2tldFByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVye2NvbnN0cnVjdG9yKHVybCxuZXR3b3JrKXtpZihuZXR3b3JrPT09XCJhbnlcIil7bG9nZ2VyJHYudGhyb3dFcnJvcihcIldlYlNvY2tldFByb3ZpZGVyIGRvZXMgbm90IHN1cHBvcnQgJ2FueScgbmV0d29yayB5ZXRcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwibmV0d29yazphbnlcIn0pfXN1cGVyKHVybCxuZXR3b3JrKTt0aGlzLl9wb2xsaW5nSW50ZXJ2YWw9LTE7dGhpcy5fd3NSZWFkeT1mYWxzZTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX3dlYnNvY2tldFwiLG5ldyBXUyh0aGlzLmNvbm5lY3Rpb24udXJsKSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9yZXF1ZXN0c1wiLHt9KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX3N1YnNcIix7fSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9zdWJJZHNcIix7fSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9kZXRlY3ROZXR3b3JrXCIsc3VwZXIuZGV0ZWN0TmV0d29yaygpKTt0aGlzLl93ZWJzb2NrZXQub25vcGVuPSgoKT0+e3RoaXMuX3dzUmVhZHk9dHJ1ZTtPYmplY3Qua2V5cyh0aGlzLl9yZXF1ZXN0cykuZm9yRWFjaChpZD0+e3RoaXMuX3dlYnNvY2tldC5zZW5kKHRoaXMuX3JlcXVlc3RzW2lkXS5wYXlsb2FkKX0pfSk7dGhpcy5fd2Vic29ja2V0Lm9ubWVzc2FnZT0obWVzc2FnZUV2ZW50PT57Y29uc3QgZGF0YT1tZXNzYWdlRXZlbnQuZGF0YTtjb25zdCByZXN1bHQ9SlNPTi5wYXJzZShkYXRhKTtpZihyZXN1bHQuaWQhPW51bGwpe2NvbnN0IGlkPVN0cmluZyhyZXN1bHQuaWQpO2NvbnN0IHJlcXVlc3Q9dGhpcy5fcmVxdWVzdHNbaWRdO2RlbGV0ZSB0aGlzLl9yZXF1ZXN0c1tpZF07aWYocmVzdWx0LnJlc3VsdCE9PXVuZGVmaW5lZCl7cmVxdWVzdC5jYWxsYmFjayhudWxsLHJlc3VsdC5yZXN1bHQpO3RoaXMuZW1pdChcImRlYnVnXCIse2FjdGlvbjpcInJlc3BvbnNlXCIscmVxdWVzdDpKU09OLnBhcnNlKHJlcXVlc3QucGF5bG9hZCkscmVzcG9uc2U6cmVzdWx0LnJlc3VsdCxwcm92aWRlcjp0aGlzfSl9ZWxzZXtsZXQgZXJyb3I9bnVsbDtpZihyZXN1bHQuZXJyb3Ipe2Vycm9yPW5ldyBFcnJvcihyZXN1bHQuZXJyb3IubWVzc2FnZXx8XCJ1bmtub3duIGVycm9yXCIpO2RlZmluZVJlYWRPbmx5KGVycm9yLFwiY29kZVwiLHJlc3VsdC5lcnJvci5jb2RlfHxudWxsKTtkZWZpbmVSZWFkT25seShlcnJvcixcInJlc3BvbnNlXCIsZGF0YSl9ZWxzZXtlcnJvcj1uZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpfXJlcXVlc3QuY2FsbGJhY2soZXJyb3IsdW5kZWZpbmVkKTt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXNwb25zZVwiLGVycm9yOmVycm9yLHJlcXVlc3Q6SlNPTi5wYXJzZShyZXF1ZXN0LnBheWxvYWQpLHByb3ZpZGVyOnRoaXN9KX19ZWxzZSBpZihyZXN1bHQubWV0aG9kPT09XCJldGhfc3Vic2NyaXB0aW9uXCIpe2NvbnN0IHN1Yj10aGlzLl9zdWJzW3Jlc3VsdC5wYXJhbXMuc3Vic2NyaXB0aW9uXTtpZihzdWIpe3N1Yi5wcm9jZXNzRnVuYyhyZXN1bHQucGFyYW1zLnJlc3VsdCl9fWVsc2V7Y29uc29sZS53YXJuKFwidGhpcyBzaG91bGQgbm90IGhhcHBlblwiKX19KTtjb25zdCBmYXV4UG9sbD1zZXRJbnRlcnZhbCgoKT0+e3RoaXMuZW1pdChcInBvbGxcIil9LDFlMyk7aWYoZmF1eFBvbGwudW5yZWYpe2ZhdXhQb2xsLnVucmVmKCl9fWRldGVjdE5ldHdvcmsoKXtyZXR1cm4gdGhpcy5fZGV0ZWN0TmV0d29ya31nZXQgcG9sbGluZ0ludGVydmFsKCl7cmV0dXJuIDB9cmVzZXRFdmVudHNCbG9jayhibG9ja051bWJlcil7bG9nZ2VyJHYudGhyb3dFcnJvcihcImNhbm5vdCByZXNldCBldmVudHMgYmxvY2sgb24gV2ViU29ja2V0UHJvdmlkZXJcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwicmVzZXRFdmVudEJsb2NrXCJ9KX1zZXQgcG9sbGluZ0ludGVydmFsKHZhbHVlKXtsb2dnZXIkdi50aHJvd0Vycm9yKFwiY2Fubm90IHNldCBwb2xsaW5nIGludGVydmFsIG9uIFdlYlNvY2tldFByb3ZpZGVyXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcInNldFBvbGxpbmdJbnRlcnZhbFwifSl9cG9sbCgpe3JldHVybiBfX2F3YWl0ZXIkYSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7cmV0dXJuIG51bGx9KX1zZXQgcG9sbGluZyh2YWx1ZSl7aWYoIXZhbHVlKXtyZXR1cm59bG9nZ2VyJHYudGhyb3dFcnJvcihcImNhbm5vdCBzZXQgcG9sbGluZyBvbiBXZWJTb2NrZXRQcm92aWRlclwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJzZXRQb2xsaW5nXCJ9KX1zZW5kKG1ldGhvZCxwYXJhbXMpe2NvbnN0IHJpZD1OZXh0SWQrKztyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e2Z1bmN0aW9uIGNhbGxiYWNrKGVycm9yLHJlc3VsdCl7aWYoZXJyb3Ipe3JldHVybiByZWplY3QoZXJyb3IpfXJldHVybiByZXNvbHZlKHJlc3VsdCl9Y29uc3QgcGF5bG9hZD1KU09OLnN0cmluZ2lmeSh7bWV0aG9kOm1ldGhvZCxwYXJhbXM6cGFyYW1zLGlkOnJpZCxqc29ucnBjOlwiMi4wXCJ9KTt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXF1ZXN0XCIscmVxdWVzdDpKU09OLnBhcnNlKHBheWxvYWQpLHByb3ZpZGVyOnRoaXN9KTt0aGlzLl9yZXF1ZXN0c1tTdHJpbmcocmlkKV09e2NhbGxiYWNrOmNhbGxiYWNrLHBheWxvYWQ6cGF5bG9hZH07aWYodGhpcy5fd3NSZWFkeSl7dGhpcy5fd2Vic29ja2V0LnNlbmQocGF5bG9hZCl9fSl9c3RhdGljIGRlZmF1bHRVcmwoKXtyZXR1cm5cIndzOi8vbG9jYWxob3N0Ojg1NDZcIn1fc3Vic2NyaWJlKHRhZyxwYXJhbSxwcm9jZXNzRnVuYyl7cmV0dXJuIF9fYXdhaXRlciRhKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtsZXQgc3ViSWRQcm9taXNlPXRoaXMuX3N1Yklkc1t0YWddO2lmKHN1YklkUHJvbWlzZT09bnVsbCl7c3ViSWRQcm9taXNlPVByb21pc2UuYWxsKHBhcmFtKS50aGVuKHBhcmFtPT57cmV0dXJuIHRoaXMuc2VuZChcImV0aF9zdWJzY3JpYmVcIixwYXJhbSl9KTt0aGlzLl9zdWJJZHNbdGFnXT1zdWJJZFByb21pc2V9Y29uc3Qgc3ViSWQ9eWllbGQgc3ViSWRQcm9taXNlO3RoaXMuX3N1YnNbc3ViSWRdPXt0YWc6dGFnLHByb2Nlc3NGdW5jOnByb2Nlc3NGdW5jfX0pfV9zdGFydEV2ZW50KGV2ZW50KXtzd2l0Y2goZXZlbnQudHlwZSl7Y2FzZVwiYmxvY2tcIjp0aGlzLl9zdWJzY3JpYmUoXCJibG9ja1wiLFtcIm5ld0hlYWRzXCJdLHJlc3VsdD0+e2NvbnN0IGJsb2NrTnVtYmVyPUJpZ051bWJlci5mcm9tKHJlc3VsdC5udW1iZXIpLnRvTnVtYmVyKCk7dGhpcy5fZW1pdHRlZC5ibG9jaz1ibG9ja051bWJlcjt0aGlzLmVtaXQoXCJibG9ja1wiLGJsb2NrTnVtYmVyKX0pO2JyZWFrO2Nhc2VcInBlbmRpbmdcIjp0aGlzLl9zdWJzY3JpYmUoXCJwZW5kaW5nXCIsW1wibmV3UGVuZGluZ1RyYW5zYWN0aW9uc1wiXSxyZXN1bHQ9Pnt0aGlzLmVtaXQoXCJwZW5kaW5nXCIscmVzdWx0KX0pO2JyZWFrO2Nhc2VcImZpbHRlclwiOnRoaXMuX3N1YnNjcmliZShldmVudC50YWcsW1wibG9nc1wiLHRoaXMuX2dldEZpbHRlcihldmVudC5maWx0ZXIpXSxyZXN1bHQ9PntpZihyZXN1bHQucmVtb3ZlZD09bnVsbCl7cmVzdWx0LnJlbW92ZWQ9ZmFsc2V9dGhpcy5lbWl0KGV2ZW50LmZpbHRlcix0aGlzLmZvcm1hdHRlci5maWx0ZXJMb2cocmVzdWx0KSl9KTticmVhaztjYXNlXCJ0eFwiOntjb25zdCBlbWl0UmVjZWlwdD1ldmVudD0+e2NvbnN0IGhhc2g9ZXZlbnQuaGFzaDt0aGlzLmdldFRyYW5zYWN0aW9uUmVjZWlwdChoYXNoKS50aGVuKHJlY2VpcHQ9PntpZighcmVjZWlwdCl7cmV0dXJufXRoaXMuZW1pdChoYXNoLHJlY2VpcHQpfSl9O2VtaXRSZWNlaXB0KGV2ZW50KTt0aGlzLl9zdWJzY3JpYmUoXCJ0eFwiLFtcIm5ld0hlYWRzXCJdLHJlc3VsdD0+e3RoaXMuX2V2ZW50cy5maWx0ZXIoZT0+ZS50eXBlPT09XCJ0eFwiKS5mb3JFYWNoKGVtaXRSZWNlaXB0KX0pO2JyZWFrfWNhc2VcImRlYnVnXCI6Y2FzZVwicG9sbFwiOmNhc2VcIndpbGxQb2xsXCI6Y2FzZVwiZGlkUG9sbFwiOmNhc2VcImVycm9yXCI6YnJlYWs7ZGVmYXVsdDpjb25zb2xlLmxvZyhcInVuaGFuZGxlZDpcIixldmVudCk7YnJlYWt9fV9zdG9wRXZlbnQoZXZlbnQpe2xldCB0YWc9ZXZlbnQudGFnO2lmKGV2ZW50LnR5cGU9PT1cInR4XCIpe2lmKHRoaXMuX2V2ZW50cy5maWx0ZXIoZT0+ZS50eXBlPT09XCJ0eFwiKS5sZW5ndGgpe3JldHVybn10YWc9XCJ0eFwifWVsc2UgaWYodGhpcy5saXN0ZW5lckNvdW50KGV2ZW50LmV2ZW50KSl7cmV0dXJufWNvbnN0IHN1YklkPXRoaXMuX3N1Yklkc1t0YWddO2lmKCFzdWJJZCl7cmV0dXJufWRlbGV0ZSB0aGlzLl9zdWJJZHNbdGFnXTtzdWJJZC50aGVuKHN1YklkPT57aWYoIXRoaXMuX3N1YnNbc3ViSWRdKXtyZXR1cm59ZGVsZXRlIHRoaXMuX3N1YnNbc3ViSWRdO3RoaXMuc2VuZChcImV0aF91bnN1YnNjcmliZVwiLFtzdWJJZF0pfSl9ZGVzdHJveSgpe3JldHVybiBfX2F3YWl0ZXIkYSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYodGhpcy5fd2Vic29ja2V0LnJlYWR5U3RhdGU9PT1XUy5DT05ORUNUSU5HKXt5aWVsZCBuZXcgUHJvbWlzZShyZXNvbHZlPT57dGhpcy5fd2Vic29ja2V0Lm9ub3Blbj1mdW5jdGlvbigpe3Jlc29sdmUodHJ1ZSl9O3RoaXMuX3dlYnNvY2tldC5vbmVycm9yPWZ1bmN0aW9uKCl7cmVzb2x2ZShmYWxzZSl9fSl9dGhpcy5fd2Vic29ja2V0LmNsb3NlKDFlMyl9KX19XCJ1c2Ugc3RyaWN0XCI7dmFyIF9fYXdhaXRlciRiPXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkdz1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7Y2xhc3MgU3RhdGljSnNvblJwY1Byb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVye2RldGVjdE5ldHdvcmsoKXtjb25zdCBfc3VwZXI9T2JqZWN0LmNyZWF0ZShudWxsLHtkZXRlY3ROZXR3b3JrOntnZXQ6KCk9PnN1cGVyLmRldGVjdE5ldHdvcmt9fSk7cmV0dXJuIF9fYXdhaXRlciRiKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtsZXQgbmV0d29yaz10aGlzLm5ldHdvcms7aWYobmV0d29yaz09bnVsbCl7bmV0d29yaz15aWVsZCBfc3VwZXIuZGV0ZWN0TmV0d29yay5jYWxsKHRoaXMpO2lmKCFuZXR3b3JrKXtsb2dnZXIkdy50aHJvd0Vycm9yKFwibm8gbmV0d29yayBkZXRlY3RlZFwiLExvZ2dlci5lcnJvcnMuVU5LTk9XTl9FUlJPUix7fSl9aWYodGhpcy5fbmV0d29yaz09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9uZXR3b3JrXCIsbmV0d29yayk7dGhpcy5lbWl0KFwibmV0d29ya1wiLG5ldHdvcmssbnVsbCl9fXJldHVybiBuZXR3b3JrfSl9fWNsYXNzIFVybEpzb25ScGNQcm92aWRlciBleHRlbmRzIFN0YXRpY0pzb25ScGNQcm92aWRlcntjb25zdHJ1Y3RvcihuZXR3b3JrLGFwaUtleSl7bG9nZ2VyJHcuY2hlY2tBYnN0cmFjdChuZXcudGFyZ2V0LFVybEpzb25ScGNQcm92aWRlcik7bmV0d29yaz1nZXRTdGF0aWMobmV3LnRhcmdldCxcImdldE5ldHdvcmtcIikobmV0d29yayk7YXBpS2V5PWdldFN0YXRpYyhuZXcudGFyZ2V0LFwiZ2V0QXBpS2V5XCIpKGFwaUtleSk7Y29uc3QgY29ubmVjdGlvbj1nZXRTdGF0aWMobmV3LnRhcmdldCxcImdldFVybFwiKShuZXR3b3JrLGFwaUtleSk7c3VwZXIoY29ubmVjdGlvbixuZXR3b3JrKTtpZih0eXBlb2YgYXBpS2V5PT09XCJzdHJpbmdcIil7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFwaUtleVwiLGFwaUtleSl9ZWxzZSBpZihhcGlLZXkhPW51bGwpe09iamVjdC5rZXlzKGFwaUtleSkuZm9yRWFjaChrZXk9PntkZWZpbmVSZWFkT25seSh0aGlzLGtleSxhcGlLZXlba2V5XSl9KX19X3N0YXJ0UGVuZGluZygpe2xvZ2dlciR3Lndhcm4oXCJXQVJOSU5HOiBBUEkgcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCBwZW5kaW5nIGZpbHRlcnNcIil9aXNDb21tdW5pdHlSZXNvdXJjZSgpe3JldHVybiBmYWxzZX1nZXRTaWduZXIoYWRkcmVzcyl7cmV0dXJuIGxvZ2dlciR3LnRocm93RXJyb3IoXCJBUEkgcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCBzaWduaW5nXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcImdldFNpZ25lclwifSl9bGlzdEFjY291bnRzKCl7cmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSl9c3RhdGljIGdldEFwaUtleShhcGlLZXkpe3JldHVybiBhcGlLZXl9c3RhdGljIGdldFVybChuZXR3b3JrLGFwaUtleSl7cmV0dXJuIGxvZ2dlciR3LnRocm93RXJyb3IoXCJub3QgaW1wbGVtZW50ZWQ7IHN1Yi1jbGFzc2VzIG11c3Qgb3ZlcnJpZGUgZ2V0VXJsXCIsTG9nZ2VyLmVycm9ycy5OT1RfSU1QTEVNRU5URUQse29wZXJhdGlvbjpcImdldFVybFwifSl9fVwidXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciR4PW5ldyBMb2dnZXIodmVyc2lvbiRtKTtjb25zdCBkZWZhdWx0QXBpS2V5PVwiX2dnN3dTU2kwS01Cc2RLbkdWZkhEdWVxNnhNQjlFa0NcIjtjbGFzcyBBbGNoZW15V2ViU29ja2V0UHJvdmlkZXIgZXh0ZW5kcyBXZWJTb2NrZXRQcm92aWRlcntjb25zdHJ1Y3RvcihuZXR3b3JrLGFwaUtleSl7Y29uc3QgcHJvdmlkZXI9bmV3IEFsY2hlbXlQcm92aWRlcihuZXR3b3JrLGFwaUtleSk7Y29uc3QgdXJsPXByb3ZpZGVyLmNvbm5lY3Rpb24udXJsLnJlcGxhY2UoL15odHRwL2ksXCJ3c1wiKS5yZXBsYWNlKFwiLmFsY2hlbXlhcGkuXCIsXCIud3MuYWxjaGVteWFwaS5cIik7c3VwZXIodXJsLHByb3ZpZGVyLm5ldHdvcmspO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJhcGlLZXlcIixwcm92aWRlci5hcGlLZXkpfWlzQ29tbXVuaXR5UmVzb3VyY2UoKXtyZXR1cm4gdGhpcy5hcGlLZXk9PT1kZWZhdWx0QXBpS2V5fX1jbGFzcyBBbGNoZW15UHJvdmlkZXIgZXh0ZW5kcyBVcmxKc29uUnBjUHJvdmlkZXJ7c3RhdGljIGdldFdlYlNvY2tldFByb3ZpZGVyKG5ldHdvcmssYXBpS2V5KXtyZXR1cm4gbmV3IEFsY2hlbXlXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrLGFwaUtleSl9c3RhdGljIGdldEFwaUtleShhcGlLZXkpe2lmKGFwaUtleT09bnVsbCl7cmV0dXJuIGRlZmF1bHRBcGlLZXl9aWYoYXBpS2V5JiZ0eXBlb2YgYXBpS2V5IT09XCJzdHJpbmdcIil7bG9nZ2VyJHgudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhcGlLZXlcIixcImFwaUtleVwiLGFwaUtleSl9cmV0dXJuIGFwaUtleX1zdGF0aWMgZ2V0VXJsKG5ldHdvcmssYXBpS2V5KXtsZXQgaG9zdD1udWxsO3N3aXRjaChuZXR3b3JrLm5hbWUpe2Nhc2VcImhvbWVzdGVhZFwiOmhvc3Q9XCJldGgtbWFpbm5ldC5hbGNoZW15YXBpLmlvL3YyL1wiO2JyZWFrO2Nhc2VcInJvcHN0ZW5cIjpob3N0PVwiZXRoLXJvcHN0ZW4uYWxjaGVteWFwaS5pby92Mi9cIjticmVhaztjYXNlXCJyaW5rZWJ5XCI6aG9zdD1cImV0aC1yaW5rZWJ5LmFsY2hlbXlhcGkuaW8vdjIvXCI7YnJlYWs7Y2FzZVwiZ29lcmxpXCI6aG9zdD1cImV0aC1nb2VybGkuYWxjaGVteWFwaS5pby92Mi9cIjticmVhaztjYXNlXCJrb3ZhblwiOmhvc3Q9XCJldGgta292YW4uYWxjaGVteWFwaS5pby92Mi9cIjticmVhaztkZWZhdWx0OmxvZ2dlciR4LnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIixcIm5ldHdvcmtcIixhcmd1bWVudHNbMF0pfXJldHVybnthbGxvd0d6aXA6dHJ1ZSx1cmw6XCJodHRwczovXCIrXCIvXCIraG9zdCthcGlLZXksdGhyb3R0bGVDYWxsYmFjazooYXR0ZW1wdCx1cmwpPT57aWYoYXBpS2V5PT09ZGVmYXVsdEFwaUtleSl7c2hvd1Rocm90dGxlTWVzc2FnZSgpfXJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSl9fX1pc0NvbW11bml0eVJlc291cmNlKCl7cmV0dXJuIHRoaXMuYXBpS2V5PT09ZGVmYXVsdEFwaUtleX19XCJ1c2Ugc3RyaWN0XCI7dmFyIF9fYXdhaXRlciRjPXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkeT1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7Y2xhc3MgQ2xvdWRmbGFyZVByb3ZpZGVyIGV4dGVuZHMgVXJsSnNvblJwY1Byb3ZpZGVye3N0YXRpYyBnZXRBcGlLZXkoYXBpS2V5KXtpZihhcGlLZXkhPW51bGwpe2xvZ2dlciR5LnRocm93QXJndW1lbnRFcnJvcihcImFwaUtleSBub3Qgc3VwcG9ydGVkIGZvciBjbG91ZGZsYXJlXCIsXCJhcGlLZXlcIixhcGlLZXkpfXJldHVybiBudWxsfXN0YXRpYyBnZXRVcmwobmV0d29yayxhcGlLZXkpe2xldCBob3N0PW51bGw7c3dpdGNoKG5ldHdvcmsubmFtZSl7Y2FzZVwiaG9tZXN0ZWFkXCI6aG9zdD1cImh0dHBzOi8vY2xvdWRmbGFyZS1ldGguY29tL1wiO2JyZWFrO2RlZmF1bHQ6bG9nZ2VyJHkudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLFwibmV0d29ya1wiLGFyZ3VtZW50c1swXSl9cmV0dXJuIGhvc3R9cGVyZm9ybShtZXRob2QscGFyYW1zKXtjb25zdCBfc3VwZXI9T2JqZWN0LmNyZWF0ZShudWxsLHtwZXJmb3JtOntnZXQ6KCk9PnN1cGVyLnBlcmZvcm19fSk7cmV0dXJuIF9fYXdhaXRlciRjKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtpZihtZXRob2Q9PT1cImdldEJsb2NrTnVtYmVyXCIpe2NvbnN0IGJsb2NrPXlpZWxkIF9zdXBlci5wZXJmb3JtLmNhbGwodGhpcyxcImdldEJsb2NrXCIse2Jsb2NrVGFnOlwibGF0ZXN0XCJ9KTtyZXR1cm4gYmxvY2subnVtYmVyfXJldHVybiBfc3VwZXIucGVyZm9ybS5jYWxsKHRoaXMsbWV0aG9kLHBhcmFtcyl9KX19XCJ1c2Ugc3RyaWN0XCI7dmFyIF9fYXdhaXRlciRkPXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkej1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7ZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25Qb3N0RGF0YSh0cmFuc2FjdGlvbil7Y29uc3QgcmVzdWx0PXt9O2ZvcihsZXQga2V5IGluIHRyYW5zYWN0aW9uKXtpZih0cmFuc2FjdGlvbltrZXldPT1udWxsKXtjb250aW51ZX1sZXQgdmFsdWU9dHJhbnNhY3Rpb25ba2V5XTtpZih7dHlwZTp0cnVlLGdhc0xpbWl0OnRydWUsZ2FzUHJpY2U6dHJ1ZSxub25jZTp0cnVlLHZhbHVlOnRydWV9W2tleV0pe3ZhbHVlPWhleFZhbHVlKGhleGxpZnkodmFsdWUpKX1lbHNlIGlmKGtleT09PVwiYWNjZXNzTGlzdFwiKXtjb25zdCBzZXRzPWFjY2Vzc0xpc3RpZnkodmFsdWUpO3ZhbHVlPVwiW1wiK3NldHMubWFwKHNldD0+e3JldHVybmB7YWRkcmVzczpcIiR7c2V0LmFkZHJlc3N9XCIsc3RvcmFnZUtleXM6W1wiJHtzZXQuc3RvcmFnZUtleXMuam9pbignXCIsXCInKX1cIl19YH0pLmpvaW4oXCIsXCIpK1wiXVwifWVsc2V7dmFsdWU9aGV4bGlmeSh2YWx1ZSl9cmVzdWx0W2tleV09dmFsdWV9cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiBnZXRSZXN1bHQkMShyZXN1bHQpe2lmKHJlc3VsdC5zdGF0dXM9PTAmJihyZXN1bHQubWVzc2FnZT09PVwiTm8gcmVjb3JkcyBmb3VuZFwifHxyZXN1bHQubWVzc2FnZT09PVwiTm8gdHJhbnNhY3Rpb25zIGZvdW5kXCIpKXtyZXR1cm4gcmVzdWx0LnJlc3VsdH1pZihyZXN1bHQuc3RhdHVzIT0xfHxyZXN1bHQubWVzc2FnZSE9XCJPS1wiKXtjb25zdCBlcnJvcj1uZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3BvbnNlXCIpO2Vycm9yLnJlc3VsdD1KU09OLnN0cmluZ2lmeShyZXN1bHQpO2lmKChyZXN1bHQucmVzdWx0fHxcIlwiKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJyYXRlIGxpbWl0XCIpPj0wKXtlcnJvci50aHJvdHRsZVJldHJ5PXRydWV9dGhyb3cgZXJyb3J9cmV0dXJuIHJlc3VsdC5yZXN1bHR9ZnVuY3Rpb24gZ2V0SnNvblJlc3VsdChyZXN1bHQpe2lmKHJlc3VsdCYmcmVzdWx0LnN0YXR1cz09MCYmcmVzdWx0Lm1lc3NhZ2U9PVwiTk9UT0tcIiYmKHJlc3VsdC5yZXN1bHR8fFwiXCIpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcInJhdGUgbGltaXRcIik+PTApe2NvbnN0IGVycm9yPW5ldyBFcnJvcihcInRocm90dGxlZCByZXNwb25zZVwiKTtlcnJvci5yZXN1bHQ9SlNPTi5zdHJpbmdpZnkocmVzdWx0KTtlcnJvci50aHJvdHRsZVJldHJ5PXRydWU7dGhyb3cgZXJyb3J9aWYocmVzdWx0Lmpzb25ycGMhPVwiMi4wXCIpe2NvbnN0IGVycm9yPW5ldyBFcnJvcihcImludmFsaWQgcmVzcG9uc2VcIik7ZXJyb3IucmVzdWx0PUpTT04uc3RyaW5naWZ5KHJlc3VsdCk7dGhyb3cgZXJyb3J9aWYocmVzdWx0LmVycm9yKXtjb25zdCBlcnJvcj1uZXcgRXJyb3IocmVzdWx0LmVycm9yLm1lc3NhZ2V8fFwidW5rbm93biBlcnJvclwiKTtpZihyZXN1bHQuZXJyb3IuY29kZSl7ZXJyb3IuY29kZT1yZXN1bHQuZXJyb3IuY29kZX1pZihyZXN1bHQuZXJyb3IuZGF0YSl7ZXJyb3IuZGF0YT1yZXN1bHQuZXJyb3IuZGF0YX10aHJvdyBlcnJvcn1yZXR1cm4gcmVzdWx0LnJlc3VsdH1mdW5jdGlvbiBjaGVja0xvZ1RhZyhibG9ja1RhZyl7aWYoYmxvY2tUYWc9PT1cInBlbmRpbmdcIil7dGhyb3cgbmV3IEVycm9yKFwicGVuZGluZyBub3Qgc3VwcG9ydGVkXCIpfWlmKGJsb2NrVGFnPT09XCJsYXRlc3RcIil7cmV0dXJuIGJsb2NrVGFnfXJldHVybiBwYXJzZUludChibG9ja1RhZy5zdWJzdHJpbmcoMiksMTYpfWNvbnN0IGRlZmF1bHRBcGlLZXkkMT1cIjlEMTNaRTdYU0JUSjk0TjlCTkoyTUEzM1ZNQVkyWVBJUkJcIjtmdW5jdGlvbiBjaGVja0Vycm9yJDEobWV0aG9kLGVycm9yLHRyYW5zYWN0aW9uKXtpZihtZXRob2Q9PT1cImNhbGxcIiYmZXJyb3IuY29kZT09PUxvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SKXtjb25zdCBlPWVycm9yLmVycm9yO2lmKGUmJmUubWVzc2FnZS5tYXRjaChcInJldmVydGVkXCIpJiZpc0hleFN0cmluZyhlLmRhdGEpKXtyZXR1cm4gZS5kYXRhfX1sZXQgbWVzc2FnZT1lcnJvci5tZXNzYWdlO2lmKGVycm9yLmNvZGU9PT1Mb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUil7aWYoZXJyb3IuZXJyb3ImJnR5cGVvZiBlcnJvci5lcnJvci5tZXNzYWdlPT09XCJzdHJpbmdcIil7bWVzc2FnZT1lcnJvci5lcnJvci5tZXNzYWdlfWVsc2UgaWYodHlwZW9mIGVycm9yLmJvZHk9PT1cInN0cmluZ1wiKXttZXNzYWdlPWVycm9yLmJvZHl9ZWxzZSBpZih0eXBlb2YgZXJyb3IucmVzcG9uc2VUZXh0PT09XCJzdHJpbmdcIil7bWVzc2FnZT1lcnJvci5yZXNwb25zZVRleHR9fW1lc3NhZ2U9KG1lc3NhZ2V8fFwiXCIpLnRvTG93ZXJDYXNlKCk7aWYobWVzc2FnZS5tYXRjaCgvaW5zdWZmaWNpZW50IGZ1bmRzLykpe2xvZ2dlciR6LnRocm93RXJyb3IoXCJpbnN1ZmZpY2llbnQgZnVuZHMgZm9yIGludHJpbnNpYyB0cmFuc2FjdGlvbiBjb3N0XCIsTG9nZ2VyLmVycm9ycy5JTlNVRkZJQ0lFTlRfRlVORFMse2Vycm9yOmVycm9yLG1ldGhvZDptZXRob2QsdHJhbnNhY3Rpb246dHJhbnNhY3Rpb259KX1pZihtZXNzYWdlLm1hdGNoKC9zYW1lIGhhc2ggd2FzIGFscmVhZHkgaW1wb3J0ZWR8dHJhbnNhY3Rpb24gbm9uY2UgaXMgdG9vIGxvdy8pKXtsb2dnZXIkei50aHJvd0Vycm9yKFwibm9uY2UgaGFzIGFscmVhZHkgYmVlbiB1c2VkXCIsTG9nZ2VyLmVycm9ycy5OT05DRV9FWFBJUkVELHtlcnJvcjplcnJvcixtZXRob2Q6bWV0aG9kLHRyYW5zYWN0aW9uOnRyYW5zYWN0aW9ufSl9aWYobWVzc2FnZS5tYXRjaCgvYW5vdGhlciB0cmFuc2FjdGlvbiB3aXRoIHNhbWUgbm9uY2UvKSl7bG9nZ2VyJHoudGhyb3dFcnJvcihcInJlcGxhY2VtZW50IGZlZSB0b28gbG93XCIsTG9nZ2VyLmVycm9ycy5SRVBMQUNFTUVOVF9VTkRFUlBSSUNFRCx7ZXJyb3I6ZXJyb3IsbWV0aG9kOm1ldGhvZCx0cmFuc2FjdGlvbjp0cmFuc2FjdGlvbn0pfWlmKG1lc3NhZ2UubWF0Y2goL2V4ZWN1dGlvbiBmYWlsZWQgZHVlIHRvIGFuIGV4Y2VwdGlvbi8pKXtsb2dnZXIkei50aHJvd0Vycm9yKFwiY2Fubm90IGVzdGltYXRlIGdhczsgdHJhbnNhY3Rpb24gbWF5IGZhaWwgb3IgbWF5IHJlcXVpcmUgbWFudWFsIGdhcyBsaW1pdFwiLExvZ2dlci5lcnJvcnMuVU5QUkVESUNUQUJMRV9HQVNfTElNSVQse2Vycm9yOmVycm9yLG1ldGhvZDptZXRob2QsdHJhbnNhY3Rpb246dHJhbnNhY3Rpb259KX10aHJvdyBlcnJvcn1jbGFzcyBFdGhlcnNjYW5Qcm92aWRlciBleHRlbmRzIEJhc2VQcm92aWRlcntjb25zdHJ1Y3RvcihuZXR3b3JrLGFwaUtleSl7bG9nZ2VyJHouY2hlY2tOZXcobmV3LnRhcmdldCxFdGhlcnNjYW5Qcm92aWRlcik7c3VwZXIobmV0d29yayk7bGV0IG5hbWU9XCJpbnZhbGlkXCI7aWYodGhpcy5uZXR3b3JrKXtuYW1lPXRoaXMubmV0d29yay5uYW1lfWxldCBiYXNlVXJsPW51bGw7c3dpdGNoKG5hbWUpe2Nhc2VcImhvbWVzdGVhZFwiOmJhc2VVcmw9XCJodHRwczovL2FwaS5ldGhlcnNjYW4uaW9cIjticmVhaztjYXNlXCJyb3BzdGVuXCI6YmFzZVVybD1cImh0dHBzOi8vYXBpLXJvcHN0ZW4uZXRoZXJzY2FuLmlvXCI7YnJlYWs7Y2FzZVwicmlua2VieVwiOmJhc2VVcmw9XCJodHRwczovL2FwaS1yaW5rZWJ5LmV0aGVyc2Nhbi5pb1wiO2JyZWFrO2Nhc2VcImtvdmFuXCI6YmFzZVVybD1cImh0dHBzOi8vYXBpLWtvdmFuLmV0aGVyc2Nhbi5pb1wiO2JyZWFrO2Nhc2VcImdvZXJsaVwiOmJhc2VVcmw9XCJodHRwczovL2FwaS1nb2VybGkuZXRoZXJzY2FuLmlvXCI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJiYXNlVXJsXCIsYmFzZVVybCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFwaUtleVwiLGFwaUtleXx8ZGVmYXVsdEFwaUtleSQxKX1kZXRlY3ROZXR3b3JrKCl7cmV0dXJuIF9fYXdhaXRlciRkKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtyZXR1cm4gdGhpcy5uZXR3b3JrfSl9cGVyZm9ybShtZXRob2QscGFyYW1zKXtjb25zdCBfc3VwZXI9T2JqZWN0LmNyZWF0ZShudWxsLHtwZXJmb3JtOntnZXQ6KCk9PnN1cGVyLnBlcmZvcm19fSk7cmV0dXJuIF9fYXdhaXRlciRkKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtsZXQgdXJsPXRoaXMuYmFzZVVybCtcIi9hcGlcIjtsZXQgYXBpS2V5PVwiXCI7aWYodGhpcy5hcGlLZXkpe2FwaUtleSs9XCImYXBpa2V5PVwiK3RoaXMuYXBpS2V5fWNvbnN0IGdldD0odXJsLHBheWxvYWQscHJvY0Z1bmMpPT5fX2F3YWl0ZXIkZCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVxdWVzdFwiLHJlcXVlc3Q6dXJsLHByb3ZpZGVyOnRoaXN9KTtjb25zdCBjb25uZWN0aW9uPXt1cmw6dXJsLHRocm90dGxlU2xvdEludGVydmFsOjFlMyx0aHJvdHRsZUNhbGxiYWNrOihhdHRlbXB0LHVybCk9PntpZih0aGlzLmlzQ29tbXVuaXR5UmVzb3VyY2UoKSl7c2hvd1Rocm90dGxlTWVzc2FnZSgpfXJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSl9fTtsZXQgcGF5bG9hZFN0cj1udWxsO2lmKHBheWxvYWQpe2Nvbm5lY3Rpb24uaGVhZGVycz17XCJjb250ZW50LXR5cGVcIjpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwifTtwYXlsb2FkU3RyPU9iamVjdC5rZXlzKHBheWxvYWQpLm1hcChrZXk9PntyZXR1cm5gJHtrZXl9PSR7cGF5bG9hZFtrZXldfWB9KS5qb2luKFwiJlwiKX1jb25zdCByZXN1bHQ9eWllbGQgZmV0Y2hKc29uKGNvbm5lY3Rpb24scGF5bG9hZFN0cixwcm9jRnVuY3x8Z2V0SnNvblJlc3VsdCk7dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVzcG9uc2VcIixyZXF1ZXN0OnVybCxyZXNwb25zZTpkZWVwQ29weShyZXN1bHQpLHByb3ZpZGVyOnRoaXN9KTtyZXR1cm4gcmVzdWx0fSk7c3dpdGNoKG1ldGhvZCl7Y2FzZVwiZ2V0QmxvY2tOdW1iZXJcIjp1cmwrPVwiP21vZHVsZT1wcm94eSZhY3Rpb249ZXRoX2Jsb2NrTnVtYmVyXCIrYXBpS2V5O3JldHVybiBnZXQodXJsLG51bGwpO2Nhc2VcImdldEdhc1ByaWNlXCI6dXJsKz1cIj9tb2R1bGU9cHJveHkmYWN0aW9uPWV0aF9nYXNQcmljZVwiK2FwaUtleTtyZXR1cm4gZ2V0KHVybCxudWxsKTtjYXNlXCJnZXRCYWxhbmNlXCI6dXJsKz1cIj9tb2R1bGU9YWNjb3VudCZhY3Rpb249YmFsYW5jZSZhZGRyZXNzPVwiK3BhcmFtcy5hZGRyZXNzO3VybCs9XCImdGFnPVwiK3BhcmFtcy5ibG9ja1RhZythcGlLZXk7cmV0dXJuIGdldCh1cmwsbnVsbCxnZXRSZXN1bHQkMSk7Y2FzZVwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiOnVybCs9XCI/bW9kdWxlPXByb3h5JmFjdGlvbj1ldGhfZ2V0VHJhbnNhY3Rpb25Db3VudCZhZGRyZXNzPVwiK3BhcmFtcy5hZGRyZXNzO3VybCs9XCImdGFnPVwiK3BhcmFtcy5ibG9ja1RhZythcGlLZXk7cmV0dXJuIGdldCh1cmwsbnVsbCk7Y2FzZVwiZ2V0Q29kZVwiOnVybCs9XCI/bW9kdWxlPXByb3h5JmFjdGlvbj1ldGhfZ2V0Q29kZSZhZGRyZXNzPVwiK3BhcmFtcy5hZGRyZXNzO3VybCs9XCImdGFnPVwiK3BhcmFtcy5ibG9ja1RhZythcGlLZXk7cmV0dXJuIGdldCh1cmwsbnVsbCk7Y2FzZVwiZ2V0U3RvcmFnZUF0XCI6dXJsKz1cIj9tb2R1bGU9cHJveHkmYWN0aW9uPWV0aF9nZXRTdG9yYWdlQXQmYWRkcmVzcz1cIitwYXJhbXMuYWRkcmVzczt1cmwrPVwiJnBvc2l0aW9uPVwiK3BhcmFtcy5wb3NpdGlvbjt1cmwrPVwiJnRhZz1cIitwYXJhbXMuYmxvY2tUYWcrYXBpS2V5O3JldHVybiBnZXQodXJsLG51bGwpO2Nhc2VcInNlbmRUcmFuc2FjdGlvblwiOnJldHVybiBnZXQodXJsLHttb2R1bGU6XCJwcm94eVwiLGFjdGlvbjpcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIixoZXg6cGFyYW1zLnNpZ25lZFRyYW5zYWN0aW9uLGFwaWtleTp0aGlzLmFwaUtleX0pLmNhdGNoKGVycm9yPT57cmV0dXJuIGNoZWNrRXJyb3IkMShcInNlbmRUcmFuc2FjdGlvblwiLGVycm9yLHBhcmFtcy5zaWduZWRUcmFuc2FjdGlvbil9KTtjYXNlXCJnZXRCbG9ja1wiOmlmKHBhcmFtcy5ibG9ja1RhZyl7dXJsKz1cIj9tb2R1bGU9cHJveHkmYWN0aW9uPWV0aF9nZXRCbG9ja0J5TnVtYmVyJnRhZz1cIitwYXJhbXMuYmxvY2tUYWc7aWYocGFyYW1zLmluY2x1ZGVUcmFuc2FjdGlvbnMpe3VybCs9XCImYm9vbGVhbj10cnVlXCJ9ZWxzZXt1cmwrPVwiJmJvb2xlYW49ZmFsc2VcIn11cmwrPWFwaUtleTtyZXR1cm4gZ2V0KHVybCxudWxsKX10aHJvdyBuZXcgRXJyb3IoXCJnZXRCbG9jayBieSBibG9ja0hhc2ggbm90IGltcGxlbWVudGVkXCIpO2Nhc2VcImdldFRyYW5zYWN0aW9uXCI6dXJsKz1cIj9tb2R1bGU9cHJveHkmYWN0aW9uPWV0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaCZ0eGhhc2g9XCIrcGFyYW1zLnRyYW5zYWN0aW9uSGFzaDt1cmwrPWFwaUtleTtyZXR1cm4gZ2V0KHVybCxudWxsKTtjYXNlXCJnZXRUcmFuc2FjdGlvblJlY2VpcHRcIjp1cmwrPVwiP21vZHVsZT1wcm94eSZhY3Rpb249ZXRoX2dldFRyYW5zYWN0aW9uUmVjZWlwdCZ0eGhhc2g9XCIrcGFyYW1zLnRyYW5zYWN0aW9uSGFzaDt1cmwrPWFwaUtleTtyZXR1cm4gZ2V0KHVybCxudWxsKTtjYXNlXCJjYWxsXCI6e2lmKHBhcmFtcy5ibG9ja1RhZyE9PVwibGF0ZXN0XCIpe3Rocm93IG5ldyBFcnJvcihcIkV0aGVyc2NhblByb3ZpZGVyIGRvZXMgbm90IHN1cHBvcnQgYmxvY2tUYWcgZm9yIGNhbGxcIil9Y29uc3QgcG9zdERhdGE9Z2V0VHJhbnNhY3Rpb25Qb3N0RGF0YShwYXJhbXMudHJhbnNhY3Rpb24pO3Bvc3REYXRhLm1vZHVsZT1cInByb3h5XCI7cG9zdERhdGEuYWN0aW9uPVwiZXRoX2NhbGxcIjtwb3N0RGF0YS5hcGlrZXk9dGhpcy5hcGlLZXk7dHJ5e3JldHVybiB5aWVsZCBnZXQodXJsLHBvc3REYXRhKX1jYXRjaChlcnJvcil7cmV0dXJuIGNoZWNrRXJyb3IkMShcImNhbGxcIixlcnJvcixwYXJhbXMudHJhbnNhY3Rpb24pfX1jYXNlXCJlc3RpbWF0ZUdhc1wiOntjb25zdCBwb3N0RGF0YT1nZXRUcmFuc2FjdGlvblBvc3REYXRhKHBhcmFtcy50cmFuc2FjdGlvbik7cG9zdERhdGEubW9kdWxlPVwicHJveHlcIjtwb3N0RGF0YS5hY3Rpb249XCJldGhfZXN0aW1hdGVHYXNcIjtwb3N0RGF0YS5hcGlrZXk9dGhpcy5hcGlLZXk7dHJ5e3JldHVybiB5aWVsZCBnZXQodXJsLHBvc3REYXRhKX1jYXRjaChlcnJvcil7cmV0dXJuIGNoZWNrRXJyb3IkMShcImVzdGltYXRlR2FzXCIsZXJyb3IscGFyYW1zLnRyYW5zYWN0aW9uKX19Y2FzZVwiZ2V0TG9nc1wiOnt1cmwrPVwiP21vZHVsZT1sb2dzJmFjdGlvbj1nZXRMb2dzXCI7aWYocGFyYW1zLmZpbHRlci5mcm9tQmxvY2spe3VybCs9XCImZnJvbUJsb2NrPVwiK2NoZWNrTG9nVGFnKHBhcmFtcy5maWx0ZXIuZnJvbUJsb2NrKX1pZihwYXJhbXMuZmlsdGVyLnRvQmxvY2spe3VybCs9XCImdG9CbG9jaz1cIitjaGVja0xvZ1RhZyhwYXJhbXMuZmlsdGVyLnRvQmxvY2spfWlmKHBhcmFtcy5maWx0ZXIuYWRkcmVzcyl7dXJsKz1cIiZhZGRyZXNzPVwiK3BhcmFtcy5maWx0ZXIuYWRkcmVzc31pZihwYXJhbXMuZmlsdGVyLnRvcGljcyYmcGFyYW1zLmZpbHRlci50b3BpY3MubGVuZ3RoPjApe2lmKHBhcmFtcy5maWx0ZXIudG9waWNzLmxlbmd0aD4xKXtsb2dnZXIkei50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgdG9waWMgY291bnRcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7dG9waWNzOnBhcmFtcy5maWx0ZXIudG9waWNzfSl9aWYocGFyYW1zLmZpbHRlci50b3BpY3MubGVuZ3RoPT09MSl7Y29uc3QgdG9waWMwPXBhcmFtcy5maWx0ZXIudG9waWNzWzBdO2lmKHR5cGVvZiB0b3BpYzAhPT1cInN0cmluZ1wifHx0b3BpYzAubGVuZ3RoIT09NjYpe2xvZ2dlciR6LnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCB0b3BpYyBmb3JtYXRcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7dG9waWMwOnRvcGljMH0pfXVybCs9XCImdG9waWMwPVwiK3RvcGljMH19dXJsKz1hcGlLZXk7Y29uc3QgbG9ncz15aWVsZCBnZXQodXJsLG51bGwsZ2V0UmVzdWx0JDEpO2xldCBibG9ja3M9e307Zm9yKGxldCBpPTA7aTxsb2dzLmxlbmd0aDtpKyspe2NvbnN0IGxvZz1sb2dzW2ldO2lmKGxvZy5ibG9ja0hhc2ghPW51bGwpe2NvbnRpbnVlfWlmKGJsb2Nrc1tsb2cuYmxvY2tOdW1iZXJdPT1udWxsKXtjb25zdCBibG9jaz15aWVsZCB0aGlzLmdldEJsb2NrKGxvZy5ibG9ja051bWJlcik7aWYoYmxvY2spe2Jsb2Nrc1tsb2cuYmxvY2tOdW1iZXJdPWJsb2NrLmhhc2h9fWxvZy5ibG9ja0hhc2g9YmxvY2tzW2xvZy5ibG9ja051bWJlcl19cmV0dXJuIGxvZ3N9Y2FzZVwiZ2V0RXRoZXJQcmljZVwiOmlmKHRoaXMubmV0d29yay5uYW1lIT09XCJob21lc3RlYWRcIil7cmV0dXJuIDB9dXJsKz1cIj9tb2R1bGU9c3RhdHMmYWN0aW9uPWV0aHByaWNlXCI7dXJsKz1hcGlLZXk7cmV0dXJuIHBhcnNlRmxvYXQoKHlpZWxkIGdldCh1cmwsbnVsbCxnZXRSZXN1bHQkMSkpLmV0aHVzZCk7ZGVmYXVsdDpicmVha31yZXR1cm4gX3N1cGVyLnBlcmZvcm0uY2FsbCh0aGlzLG1ldGhvZCxwYXJhbXMpfSl9Z2V0SGlzdG9yeShhZGRyZXNzT3JOYW1lLHN0YXJ0QmxvY2ssZW5kQmxvY2spe2xldCB1cmw9dGhpcy5iYXNlVXJsO2xldCBhcGlLZXk9XCJcIjtpZih0aGlzLmFwaUtleSl7YXBpS2V5Kz1cIiZhcGlrZXk9XCIrdGhpcy5hcGlLZXl9aWYoc3RhcnRCbG9jaz09bnVsbCl7c3RhcnRCbG9jaz0wfWlmKGVuZEJsb2NrPT1udWxsKXtlbmRCbG9jaz05OTk5OTk5OX1yZXR1cm4gdGhpcy5yZXNvbHZlTmFtZShhZGRyZXNzT3JOYW1lKS50aGVuKGFkZHJlc3M9Pnt1cmwrPVwiL2FwaT9tb2R1bGU9YWNjb3VudCZhY3Rpb249dHhsaXN0JmFkZHJlc3M9XCIrYWRkcmVzczt1cmwrPVwiJnN0YXJ0YmxvY2s9XCIrc3RhcnRCbG9jazt1cmwrPVwiJmVuZGJsb2NrPVwiK2VuZEJsb2NrO3VybCs9XCImc29ydD1hc2NcIithcGlLZXk7dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVxdWVzdFwiLHJlcXVlc3Q6dXJsLHByb3ZpZGVyOnRoaXN9KTtjb25zdCBjb25uZWN0aW9uPXt1cmw6dXJsLHRocm90dGxlU2xvdEludGVydmFsOjFlMyx0aHJvdHRsZUNhbGxiYWNrOihhdHRlbXB0LHVybCk9PntpZih0aGlzLmFwaUtleT09PWRlZmF1bHRBcGlLZXkkMSl7c2hvd1Rocm90dGxlTWVzc2FnZSgpfXJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSl9fTtyZXR1cm4gZmV0Y2hKc29uKGNvbm5lY3Rpb24sbnVsbCxnZXRSZXN1bHQkMSkudGhlbihyZXN1bHQ9Pnt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXNwb25zZVwiLHJlcXVlc3Q6dXJsLHJlc3BvbnNlOmRlZXBDb3B5KHJlc3VsdCkscHJvdmlkZXI6dGhpc30pO2xldCBvdXRwdXQ9W107cmVzdWx0LmZvckVhY2godHg9PntbXCJjb250cmFjdEFkZHJlc3NcIixcInRvXCJdLmZvckVhY2goZnVuY3Rpb24oa2V5KXtpZih0eFtrZXldPT1cIlwiKXtkZWxldGUgdHhba2V5XX19KTtpZih0eC5jcmVhdGVzPT1udWxsJiZ0eC5jb250cmFjdEFkZHJlc3MhPW51bGwpe3R4LmNyZWF0ZXM9dHguY29udHJhY3RBZGRyZXNzfWxldCBpdGVtPXRoaXMuZm9ybWF0dGVyLnRyYW5zYWN0aW9uUmVzcG9uc2UodHgpO2lmKHR4LnRpbWVTdGFtcCl7aXRlbS50aW1lc3RhbXA9cGFyc2VJbnQodHgudGltZVN0YW1wKX1vdXRwdXQucHVzaChpdGVtKX0pO3JldHVybiBvdXRwdXR9KX0pfWlzQ29tbXVuaXR5UmVzb3VyY2UoKXtyZXR1cm4gdGhpcy5hcGlLZXk9PT1kZWZhdWx0QXBpS2V5JDF9fVwidXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXIkZT13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07Y29uc3QgbG9nZ2VyJEE9bmV3IExvZ2dlcih2ZXJzaW9uJG0pO2Z1bmN0aW9uIG5vdygpe3JldHVybihuZXcgRGF0ZSkuZ2V0VGltZSgpfWZ1bmN0aW9uIGNoZWNrTmV0d29ya3MobmV0d29ya3Mpe2xldCByZXN1bHQ9bnVsbDtmb3IobGV0IGk9MDtpPG5ldHdvcmtzLmxlbmd0aDtpKyspe2NvbnN0IG5ldHdvcms9bmV0d29ya3NbaV07aWYobmV0d29yaz09bnVsbCl7cmV0dXJuIG51bGx9aWYocmVzdWx0KXtpZighKHJlc3VsdC5uYW1lPT09bmV0d29yay5uYW1lJiZyZXN1bHQuY2hhaW5JZD09PW5ldHdvcmsuY2hhaW5JZCYmKHJlc3VsdC5lbnNBZGRyZXNzPT09bmV0d29yay5lbnNBZGRyZXNzfHxyZXN1bHQuZW5zQWRkcmVzcz09bnVsbCYmbmV0d29yay5lbnNBZGRyZXNzPT1udWxsKSkpe2xvZ2dlciRBLnRocm93QXJndW1lbnRFcnJvcihcInByb3ZpZGVyIG1pc21hdGNoXCIsXCJuZXR3b3Jrc1wiLG5ldHdvcmtzKX19ZWxzZXtyZXN1bHQ9bmV0d29ya319cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiBtZWRpYW4odmFsdWVzLG1heERlbHRhKXt2YWx1ZXM9dmFsdWVzLnNsaWNlKCkuc29ydCgpO2NvbnN0IG1pZGRsZT1NYXRoLmZsb29yKHZhbHVlcy5sZW5ndGgvMik7aWYodmFsdWVzLmxlbmd0aCUyKXtyZXR1cm4gdmFsdWVzW21pZGRsZV19Y29uc3QgYT12YWx1ZXNbbWlkZGxlLTFdLGI9dmFsdWVzW21pZGRsZV07aWYobWF4RGVsdGEhPW51bGwmJk1hdGguYWJzKGEtYik+bWF4RGVsdGEpe3JldHVybiBudWxsfXJldHVybihhK2IpLzJ9ZnVuY3Rpb24gc2VyaWFsaXplJDEodmFsdWUpe2lmKHZhbHVlPT09bnVsbCl7cmV0dXJuXCJudWxsXCJ9ZWxzZSBpZih0eXBlb2YgdmFsdWU9PT1cIm51bWJlclwifHx0eXBlb2YgdmFsdWU9PT1cImJvb2xlYW5cIil7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKX1lbHNlIGlmKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpe3JldHVybiB2YWx1ZX1lbHNlIGlmKEJpZ051bWJlci5pc0JpZ051bWJlcih2YWx1ZSkpe3JldHVybiB2YWx1ZS50b1N0cmluZygpfWVsc2UgaWYoQXJyYXkuaXNBcnJheSh2YWx1ZSkpe3JldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZS5tYXAoaT0+c2VyaWFsaXplJDEoaSkpKX1lbHNlIGlmKHR5cGVvZiB2YWx1ZT09PVwib2JqZWN0XCIpe2NvbnN0IGtleXM9T2JqZWN0LmtleXModmFsdWUpO2tleXMuc29ydCgpO3JldHVyblwie1wiK2tleXMubWFwKGtleT0+e2xldCB2PXZhbHVlW2tleV07aWYodHlwZW9mIHY9PT1cImZ1bmN0aW9uXCIpe3Y9XCJbZnVuY3Rpb25dXCJ9ZWxzZXt2PXNlcmlhbGl6ZSQxKHYpfXJldHVybiBKU09OLnN0cmluZ2lmeShrZXkpK1wiOlwiK3Z9KS5qb2luKFwiLFwiKStcIn1cIn10aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHZhbHVlIHR5cGU6IFwiK3R5cGVvZiB2YWx1ZSl9bGV0IG5leHRSaWQ9MTtmdW5jdGlvbiBzdGFsbCQxKGR1cmF0aW9uKXtsZXQgY2FuY2VsPW51bGw7bGV0IHRpbWVyPW51bGw7bGV0IHByb21pc2U9bmV3IFByb21pc2UocmVzb2x2ZT0+e2NhbmNlbD1mdW5jdGlvbigpe2lmKHRpbWVyKXtjbGVhclRpbWVvdXQodGltZXIpO3RpbWVyPW51bGx9cmVzb2x2ZSgpfTt0aW1lcj1zZXRUaW1lb3V0KGNhbmNlbCxkdXJhdGlvbil9KTtjb25zdCB3YWl0PWZ1bmM9Pntwcm9taXNlPXByb21pc2UudGhlbihmdW5jKTtyZXR1cm4gcHJvbWlzZX07ZnVuY3Rpb24gZ2V0UHJvbWlzZSgpe3JldHVybiBwcm9taXNlfXJldHVybntjYW5jZWw6Y2FuY2VsLGdldFByb21pc2U6Z2V0UHJvbWlzZSx3YWl0OndhaXR9fWNvbnN0IEZvcndhcmRFcnJvcnM9W0xvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04sTG9nZ2VyLmVycm9ycy5JTlNVRkZJQ0lFTlRfRlVORFMsTG9nZ2VyLmVycm9ycy5OT05DRV9FWFBJUkVELExvZ2dlci5lcnJvcnMuUkVQTEFDRU1FTlRfVU5ERVJQUklDRUQsTG9nZ2VyLmVycm9ycy5VTlBSRURJQ1RBQkxFX0dBU19MSU1JVF07Y29uc3QgRm9yd2FyZFByb3BlcnRpZXM9W1wiYWRkcmVzc1wiLFwiYXJnc1wiLFwiZXJyb3JBcmdzXCIsXCJlcnJvclNpZ25hdHVyZVwiLFwibWV0aG9kXCIsXCJ0cmFuc2FjdGlvblwiXTtmdW5jdGlvbiBleHBvc2VEZWJ1Z0NvbmZpZyhjb25maWcsbm93KXtjb25zdCByZXN1bHQ9e3dlaWdodDpjb25maWcud2VpZ2h0fTtPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LFwicHJvdmlkZXJcIix7Z2V0OigpPT5jb25maWcucHJvdmlkZXJ9KTtpZihjb25maWcuc3RhcnQpe3Jlc3VsdC5zdGFydD1jb25maWcuc3RhcnR9aWYobm93KXtyZXN1bHQuZHVyYXRpb249bm93LWNvbmZpZy5zdGFydH1pZihjb25maWcuZG9uZSl7aWYoY29uZmlnLmVycm9yKXtyZXN1bHQuZXJyb3I9Y29uZmlnLmVycm9yfWVsc2V7cmVzdWx0LnJlc3VsdD1jb25maWcucmVzdWx0fHxudWxsfX1yZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIG5vcm1hbGl6ZWRUYWxseShub3JtYWxpemUscXVvcnVtKXtyZXR1cm4gZnVuY3Rpb24oY29uZmlncyl7Y29uc3QgdGFsbHk9e307Y29uZmlncy5mb3JFYWNoKGM9Pntjb25zdCB2YWx1ZT1ub3JtYWxpemUoYy5yZXN1bHQpO2lmKCF0YWxseVt2YWx1ZV0pe3RhbGx5W3ZhbHVlXT17Y291bnQ6MCxyZXN1bHQ6Yy5yZXN1bHR9fXRhbGx5W3ZhbHVlXS5jb3VudCsrfSk7Y29uc3Qga2V5cz1PYmplY3Qua2V5cyh0YWxseSk7Zm9yKGxldCBpPTA7aTxrZXlzLmxlbmd0aDtpKyspe2NvbnN0IGNoZWNrPXRhbGx5W2tleXNbaV1dO2lmKGNoZWNrLmNvdW50Pj1xdW9ydW0pe3JldHVybiBjaGVjay5yZXN1bHR9fXJldHVybiB1bmRlZmluZWR9fWZ1bmN0aW9uIGdldFByb2Nlc3NGdW5jKHByb3ZpZGVyLG1ldGhvZCxwYXJhbXMpe2xldCBub3JtYWxpemU9c2VyaWFsaXplJDE7c3dpdGNoKG1ldGhvZCl7Y2FzZVwiZ2V0QmxvY2tOdW1iZXJcIjpyZXR1cm4gZnVuY3Rpb24oY29uZmlncyl7Y29uc3QgdmFsdWVzPWNvbmZpZ3MubWFwKGM9PmMucmVzdWx0KTtsZXQgYmxvY2tOdW1iZXI9bWVkaWFuKGNvbmZpZ3MubWFwKGM9PmMucmVzdWx0KSwyKTtpZihibG9ja051bWJlcj09bnVsbCl7cmV0dXJuIHVuZGVmaW5lZH1ibG9ja051bWJlcj1NYXRoLmNlaWwoYmxvY2tOdW1iZXIpO2lmKHZhbHVlcy5pbmRleE9mKGJsb2NrTnVtYmVyKzEpPj0wKXtibG9ja051bWJlcisrfWlmKGJsb2NrTnVtYmVyPj1wcm92aWRlci5faGlnaGVzdEJsb2NrTnVtYmVyKXtwcm92aWRlci5faGlnaGVzdEJsb2NrTnVtYmVyPWJsb2NrTnVtYmVyfXJldHVybiBwcm92aWRlci5faGlnaGVzdEJsb2NrTnVtYmVyfTtjYXNlXCJnZXRHYXNQcmljZVwiOnJldHVybiBmdW5jdGlvbihjb25maWdzKXtjb25zdCB2YWx1ZXM9Y29uZmlncy5tYXAoYz0+Yy5yZXN1bHQpO3ZhbHVlcy5zb3J0KCk7cmV0dXJuIHZhbHVlc1tNYXRoLmZsb29yKHZhbHVlcy5sZW5ndGgvMildfTtjYXNlXCJnZXRFdGhlclByaWNlXCI6cmV0dXJuIGZ1bmN0aW9uKGNvbmZpZ3Mpe3JldHVybiBtZWRpYW4oY29uZmlncy5tYXAoYz0+Yy5yZXN1bHQpKX07Y2FzZVwiZ2V0QmFsYW5jZVwiOmNhc2VcImdldFRyYW5zYWN0aW9uQ291bnRcIjpjYXNlXCJnZXRDb2RlXCI6Y2FzZVwiZ2V0U3RvcmFnZUF0XCI6Y2FzZVwiY2FsbFwiOmNhc2VcImVzdGltYXRlR2FzXCI6Y2FzZVwiZ2V0TG9nc1wiOmJyZWFrO2Nhc2VcImdldFRyYW5zYWN0aW9uXCI6Y2FzZVwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCI6bm9ybWFsaXplPWZ1bmN0aW9uKHR4KXtpZih0eD09bnVsbCl7cmV0dXJuIG51bGx9dHg9c2hhbGxvd0NvcHkodHgpO3R4LmNvbmZpcm1hdGlvbnM9LTE7cmV0dXJuIHNlcmlhbGl6ZSQxKHR4KX07YnJlYWs7Y2FzZVwiZ2V0QmxvY2tcIjppZihwYXJhbXMuaW5jbHVkZVRyYW5zYWN0aW9ucyl7bm9ybWFsaXplPWZ1bmN0aW9uKGJsb2NrKXtpZihibG9jaz09bnVsbCl7cmV0dXJuIG51bGx9YmxvY2s9c2hhbGxvd0NvcHkoYmxvY2spO2Jsb2NrLnRyYW5zYWN0aW9ucz1ibG9jay50cmFuc2FjdGlvbnMubWFwKHR4PT57dHg9c2hhbGxvd0NvcHkodHgpO3R4LmNvbmZpcm1hdGlvbnM9LTE7cmV0dXJuIHR4fSk7cmV0dXJuIHNlcmlhbGl6ZSQxKGJsb2NrKX19ZWxzZXtub3JtYWxpemU9ZnVuY3Rpb24oYmxvY2spe2lmKGJsb2NrPT1udWxsKXtyZXR1cm4gbnVsbH1yZXR1cm4gc2VyaWFsaXplJDEoYmxvY2spfX1icmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcInVua25vd24gbWV0aG9kOiBcIittZXRob2QpfXJldHVybiBub3JtYWxpemVkVGFsbHkobm9ybWFsaXplLHByb3ZpZGVyLnF1b3J1bSl9ZnVuY3Rpb24gd2FpdEZvclN5bmMoY29uZmlnLGJsb2NrTnVtYmVyKXtyZXR1cm4gX19hd2FpdGVyJGUodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IHByb3ZpZGVyPWNvbmZpZy5wcm92aWRlcjtpZihwcm92aWRlci5ibG9ja051bWJlciE9bnVsbCYmcHJvdmlkZXIuYmxvY2tOdW1iZXI+PWJsb2NrTnVtYmVyfHxibG9ja051bWJlcj09PS0xKXtyZXR1cm4gcHJvdmlkZXJ9cmV0dXJuIHBvbGwoKCk9PntyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpZihwcm92aWRlci5ibG9ja051bWJlcj49YmxvY2tOdW1iZXIpe3JldHVybiByZXNvbHZlKHByb3ZpZGVyKX1pZihjb25maWcuY2FuY2VsbGVkKXtyZXR1cm4gcmVzb2x2ZShudWxsKX1yZXR1cm4gcmVzb2x2ZSh1bmRlZmluZWQpfSwwKX0pfSx7b25jZVBvbGw6cHJvdmlkZXJ9KX0pfWZ1bmN0aW9uIGdldFJ1bm5lcihjb25maWcsY3VycmVudEJsb2NrTnVtYmVyLG1ldGhvZCxwYXJhbXMpe3JldHVybiBfX2F3YWl0ZXIkZSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7bGV0IHByb3ZpZGVyPWNvbmZpZy5wcm92aWRlcjtzd2l0Y2gobWV0aG9kKXtjYXNlXCJnZXRCbG9ja051bWJlclwiOmNhc2VcImdldEdhc1ByaWNlXCI6cmV0dXJuIHByb3ZpZGVyW21ldGhvZF0oKTtjYXNlXCJnZXRFdGhlclByaWNlXCI6aWYocHJvdmlkZXIuZ2V0RXRoZXJQcmljZSl7cmV0dXJuIHByb3ZpZGVyLmdldEV0aGVyUHJpY2UoKX1icmVhaztjYXNlXCJnZXRCYWxhbmNlXCI6Y2FzZVwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiOmNhc2VcImdldENvZGVcIjppZihwYXJhbXMuYmxvY2tUYWcmJmlzSGV4U3RyaW5nKHBhcmFtcy5ibG9ja1RhZykpe3Byb3ZpZGVyPXlpZWxkIHdhaXRGb3JTeW5jKGNvbmZpZyxjdXJyZW50QmxvY2tOdW1iZXIpfXJldHVybiBwcm92aWRlclttZXRob2RdKHBhcmFtcy5hZGRyZXNzLHBhcmFtcy5ibG9ja1RhZ3x8XCJsYXRlc3RcIik7Y2FzZVwiZ2V0U3RvcmFnZUF0XCI6aWYocGFyYW1zLmJsb2NrVGFnJiZpc0hleFN0cmluZyhwYXJhbXMuYmxvY2tUYWcpKXtwcm92aWRlcj15aWVsZCB3YWl0Rm9yU3luYyhjb25maWcsY3VycmVudEJsb2NrTnVtYmVyKX1yZXR1cm4gcHJvdmlkZXIuZ2V0U3RvcmFnZUF0KHBhcmFtcy5hZGRyZXNzLHBhcmFtcy5wb3NpdGlvbixwYXJhbXMuYmxvY2tUYWd8fFwibGF0ZXN0XCIpO2Nhc2VcImdldEJsb2NrXCI6aWYocGFyYW1zLmJsb2NrVGFnJiZpc0hleFN0cmluZyhwYXJhbXMuYmxvY2tUYWcpKXtwcm92aWRlcj15aWVsZCB3YWl0Rm9yU3luYyhjb25maWcsY3VycmVudEJsb2NrTnVtYmVyKX1yZXR1cm4gcHJvdmlkZXJbcGFyYW1zLmluY2x1ZGVUcmFuc2FjdGlvbnM/XCJnZXRCbG9ja1dpdGhUcmFuc2FjdGlvbnNcIjpcImdldEJsb2NrXCJdKHBhcmFtcy5ibG9ja1RhZ3x8cGFyYW1zLmJsb2NrSGFzaCk7Y2FzZVwiY2FsbFwiOmNhc2VcImVzdGltYXRlR2FzXCI6aWYocGFyYW1zLmJsb2NrVGFnJiZpc0hleFN0cmluZyhwYXJhbXMuYmxvY2tUYWcpKXtwcm92aWRlcj15aWVsZCB3YWl0Rm9yU3luYyhjb25maWcsY3VycmVudEJsb2NrTnVtYmVyKX1yZXR1cm4gcHJvdmlkZXJbbWV0aG9kXShwYXJhbXMudHJhbnNhY3Rpb24pO2Nhc2VcImdldFRyYW5zYWN0aW9uXCI6Y2FzZVwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCI6cmV0dXJuIHByb3ZpZGVyW21ldGhvZF0ocGFyYW1zLnRyYW5zYWN0aW9uSGFzaCk7Y2FzZVwiZ2V0TG9nc1wiOntsZXQgZmlsdGVyPXBhcmFtcy5maWx0ZXI7aWYoZmlsdGVyLmZyb21CbG9jayYmaXNIZXhTdHJpbmcoZmlsdGVyLmZyb21CbG9jayl8fGZpbHRlci50b0Jsb2NrJiZpc0hleFN0cmluZyhmaWx0ZXIudG9CbG9jaykpe3Byb3ZpZGVyPXlpZWxkIHdhaXRGb3JTeW5jKGNvbmZpZyxjdXJyZW50QmxvY2tOdW1iZXIpfXJldHVybiBwcm92aWRlci5nZXRMb2dzKGZpbHRlcil9fXJldHVybiBsb2dnZXIkQS50aHJvd0Vycm9yKFwidW5rbm93biBtZXRob2QgZXJyb3JcIixMb2dnZXIuZXJyb3JzLlVOS05PV05fRVJST1Ise21ldGhvZDptZXRob2QscGFyYW1zOnBhcmFtc30pfSl9Y2xhc3MgRmFsbGJhY2tQcm92aWRlciBleHRlbmRzIEJhc2VQcm92aWRlcntjb25zdHJ1Y3Rvcihwcm92aWRlcnMscXVvcnVtKXtsb2dnZXIkQS5jaGVja05ldyhuZXcudGFyZ2V0LEZhbGxiYWNrUHJvdmlkZXIpO2lmKHByb3ZpZGVycy5sZW5ndGg9PT0wKXtsb2dnZXIkQS50aHJvd0FyZ3VtZW50RXJyb3IoXCJtaXNzaW5nIHByb3ZpZGVyc1wiLFwicHJvdmlkZXJzXCIscHJvdmlkZXJzKX1jb25zdCBwcm92aWRlckNvbmZpZ3M9cHJvdmlkZXJzLm1hcCgoY29uZmlnT3JQcm92aWRlcixpbmRleCk9PntpZihQcm92aWRlci5pc1Byb3ZpZGVyKGNvbmZpZ09yUHJvdmlkZXIpKXtjb25zdCBzdGFsbFRpbWVvdXQ9aXNDb21tdW5pdHlSZXNvdXJjZShjb25maWdPclByb3ZpZGVyKT8yZTM6NzUwO2NvbnN0IHByaW9yaXR5PTE7cmV0dXJuIE9iamVjdC5mcmVlemUoe3Byb3ZpZGVyOmNvbmZpZ09yUHJvdmlkZXIsd2VpZ2h0OjEsc3RhbGxUaW1lb3V0OnN0YWxsVGltZW91dCxwcmlvcml0eTpwcmlvcml0eX0pfWNvbnN0IGNvbmZpZz1zaGFsbG93Q29weShjb25maWdPclByb3ZpZGVyKTtpZihjb25maWcucHJpb3JpdHk9PW51bGwpe2NvbmZpZy5wcmlvcml0eT0xfWlmKGNvbmZpZy5zdGFsbFRpbWVvdXQ9PW51bGwpe2NvbmZpZy5zdGFsbFRpbWVvdXQ9aXNDb21tdW5pdHlSZXNvdXJjZShjb25maWdPclByb3ZpZGVyKT8yZTM6NzUwfWlmKGNvbmZpZy53ZWlnaHQ9PW51bGwpe2NvbmZpZy53ZWlnaHQ9MX1jb25zdCB3ZWlnaHQ9Y29uZmlnLndlaWdodDtpZih3ZWlnaHQlMXx8d2VpZ2h0PjUxMnx8d2VpZ2h0PDEpe2xvZ2dlciRBLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgd2VpZ2h0OyBtdXN0IGJlIGludGVnZXIgaW4gWzEsIDUxMl1cIixgcHJvdmlkZXJzWyR7aW5kZXh9XS53ZWlnaHRgLHdlaWdodCl9cmV0dXJuIE9iamVjdC5mcmVlemUoY29uZmlnKX0pO2NvbnN0IHRvdGFsPXByb3ZpZGVyQ29uZmlncy5yZWR1Y2UoKGFjY3VtLGMpPT5hY2N1bStjLndlaWdodCwwKTtpZihxdW9ydW09PW51bGwpe3F1b3J1bT10b3RhbC8yfWVsc2UgaWYocXVvcnVtPnRvdGFsKXtsb2dnZXIkQS50aHJvd0FyZ3VtZW50RXJyb3IoXCJxdW9ydW0gd2lsbCBhbHdheXMgZmFpbDsgbGFyZ2VyIHRoYW4gdG90YWwgd2VpZ2h0XCIsXCJxdW9ydW1cIixxdW9ydW0pfWxldCBuZXR3b3JrT3JSZWFkeT1jaGVja05ldHdvcmtzKHByb3ZpZGVyQ29uZmlncy5tYXAoYz0+Yy5wcm92aWRlci5uZXR3b3JrKSk7aWYobmV0d29ya09yUmVhZHk9PW51bGwpe25ldHdvcmtPclJlYWR5PW5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntzZXRUaW1lb3V0KCgpPT57dGhpcy5kZXRlY3ROZXR3b3JrKCkudGhlbihyZXNvbHZlLHJlamVjdCl9LDApfSl9c3VwZXIobmV0d29ya09yUmVhZHkpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwcm92aWRlckNvbmZpZ3NcIixPYmplY3QuZnJlZXplKHByb3ZpZGVyQ29uZmlncykpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJxdW9ydW1cIixxdW9ydW0pO3RoaXMuX2hpZ2hlc3RCbG9ja051bWJlcj0tMX1kZXRlY3ROZXR3b3JrKCl7cmV0dXJuIF9fYXdhaXRlciRlKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBuZXR3b3Jrcz15aWVsZCBQcm9taXNlLmFsbCh0aGlzLnByb3ZpZGVyQ29uZmlncy5tYXAoYz0+Yy5wcm92aWRlci5nZXROZXR3b3JrKCkpKTtyZXR1cm4gY2hlY2tOZXR3b3JrcyhuZXR3b3Jrcyl9KX1wZXJmb3JtKG1ldGhvZCxwYXJhbXMpe3JldHVybiBfX2F3YWl0ZXIkZSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYobWV0aG9kPT09XCJzZW5kVHJhbnNhY3Rpb25cIil7Y29uc3QgcmVzdWx0cz15aWVsZCBQcm9taXNlLmFsbCh0aGlzLnByb3ZpZGVyQ29uZmlncy5tYXAoYz0+e3JldHVybiBjLnByb3ZpZGVyLnNlbmRUcmFuc2FjdGlvbihwYXJhbXMuc2lnbmVkVHJhbnNhY3Rpb24pLnRoZW4ocmVzdWx0PT57cmV0dXJuIHJlc3VsdC5oYXNofSxlcnJvcj0+e3JldHVybiBlcnJvcn0pfSkpO2ZvcihsZXQgaT0wO2k8cmVzdWx0cy5sZW5ndGg7aSsrKXtjb25zdCByZXN1bHQ9cmVzdWx0c1tpXTtpZih0eXBlb2YgcmVzdWx0PT09XCJzdHJpbmdcIil7cmV0dXJuIHJlc3VsdH19dGhyb3cgcmVzdWx0c1swXX1pZih0aGlzLl9oaWdoZXN0QmxvY2tOdW1iZXI9PT0tMSYmbWV0aG9kIT09XCJnZXRCbG9ja051bWJlclwiKXt5aWVsZCB0aGlzLmdldEJsb2NrTnVtYmVyKCl9Y29uc3QgcHJvY2Vzc0Z1bmM9Z2V0UHJvY2Vzc0Z1bmModGhpcyxtZXRob2QscGFyYW1zKTtjb25zdCBjb25maWdzPXNodWZmbGVkKHRoaXMucHJvdmlkZXJDb25maWdzLm1hcChzaGFsbG93Q29weSkpO2NvbmZpZ3Muc29ydCgoYSxiKT0+YS5wcmlvcml0eS1iLnByaW9yaXR5KTtjb25zdCBjdXJyZW50QmxvY2tOdW1iZXI9dGhpcy5faGlnaGVzdEJsb2NrTnVtYmVyO2xldCBpPTA7bGV0IGZpcnN0PXRydWU7d2hpbGUodHJ1ZSl7Y29uc3QgdDA9bm93KCk7bGV0IGluZmxpZ2h0V2VpZ2h0PWNvbmZpZ3MuZmlsdGVyKGM9PmMucnVubmVyJiZ0MC1jLnN0YXJ0PGMuc3RhbGxUaW1lb3V0KS5yZWR1Y2UoKGFjY3VtLGMpPT5hY2N1bStjLndlaWdodCwwKTt3aGlsZShpbmZsaWdodFdlaWdodDx0aGlzLnF1b3J1bSYmaTxjb25maWdzLmxlbmd0aCl7Y29uc3QgY29uZmlnPWNvbmZpZ3NbaSsrXTtjb25zdCByaWQ9bmV4dFJpZCsrO2NvbmZpZy5zdGFydD1ub3coKTtjb25maWcuc3RhbGxlcj1zdGFsbCQxKGNvbmZpZy5zdGFsbFRpbWVvdXQpO2NvbmZpZy5zdGFsbGVyLndhaXQoKCk9Pntjb25maWcuc3RhbGxlcj1udWxsfSk7Y29uZmlnLnJ1bm5lcj1nZXRSdW5uZXIoY29uZmlnLGN1cnJlbnRCbG9ja051bWJlcixtZXRob2QscGFyYW1zKS50aGVuKHJlc3VsdD0+e2NvbmZpZy5kb25lPXRydWU7Y29uZmlnLnJlc3VsdD1yZXN1bHQ7aWYodGhpcy5saXN0ZW5lckNvdW50KFwiZGVidWdcIikpe3RoaXMuZW1pdChcImRlYnVnXCIse2FjdGlvbjpcInJlcXVlc3RcIixyaWQ6cmlkLGJhY2tlbmQ6ZXhwb3NlRGVidWdDb25maWcoY29uZmlnLG5vdygpKSxyZXF1ZXN0OnttZXRob2Q6bWV0aG9kLHBhcmFtczpkZWVwQ29weShwYXJhbXMpfSxwcm92aWRlcjp0aGlzfSl9fSxlcnJvcj0+e2NvbmZpZy5kb25lPXRydWU7Y29uZmlnLmVycm9yPWVycm9yO2lmKHRoaXMubGlzdGVuZXJDb3VudChcImRlYnVnXCIpKXt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXF1ZXN0XCIscmlkOnJpZCxiYWNrZW5kOmV4cG9zZURlYnVnQ29uZmlnKGNvbmZpZyxub3coKSkscmVxdWVzdDp7bWV0aG9kOm1ldGhvZCxwYXJhbXM6ZGVlcENvcHkocGFyYW1zKX0scHJvdmlkZXI6dGhpc30pfX0pO2lmKHRoaXMubGlzdGVuZXJDb3VudChcImRlYnVnXCIpKXt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXF1ZXN0XCIscmlkOnJpZCxiYWNrZW5kOmV4cG9zZURlYnVnQ29uZmlnKGNvbmZpZyxudWxsKSxyZXF1ZXN0OnttZXRob2Q6bWV0aG9kLHBhcmFtczpkZWVwQ29weShwYXJhbXMpfSxwcm92aWRlcjp0aGlzfSl9aW5mbGlnaHRXZWlnaHQrPWNvbmZpZy53ZWlnaHR9Y29uc3Qgd2FpdGluZz1bXTtjb25maWdzLmZvckVhY2goYz0+e2lmKGMuZG9uZXx8IWMucnVubmVyKXtyZXR1cm59d2FpdGluZy5wdXNoKGMucnVubmVyKTtpZihjLnN0YWxsZXIpe3dhaXRpbmcucHVzaChjLnN0YWxsZXIuZ2V0UHJvbWlzZSgpKX19KTtpZih3YWl0aW5nLmxlbmd0aCl7eWllbGQgUHJvbWlzZS5yYWNlKHdhaXRpbmcpfWNvbnN0IHJlc3VsdHM9Y29uZmlncy5maWx0ZXIoYz0+Yy5kb25lJiZjLmVycm9yPT1udWxsKTtpZihyZXN1bHRzLmxlbmd0aD49dGhpcy5xdW9ydW0pe2NvbnN0IHJlc3VsdD1wcm9jZXNzRnVuYyhyZXN1bHRzKTtpZihyZXN1bHQhPT11bmRlZmluZWQpe2NvbmZpZ3MuZm9yRWFjaChjPT57aWYoYy5zdGFsbGVyKXtjLnN0YWxsZXIuY2FuY2VsKCl9Yy5jYW5jZWxsZWQ9dHJ1ZX0pO3JldHVybiByZXN1bHR9aWYoIWZpcnN0KXt5aWVsZCBzdGFsbCQxKDEwMCkuZ2V0UHJvbWlzZSgpfWZpcnN0PWZhbHNlfWNvbnN0IGVycm9ycz1jb25maWdzLnJlZHVjZSgoYWNjdW0sYyk9PntpZighYy5kb25lfHxjLmVycm9yPT1udWxsKXtyZXR1cm4gYWNjdW19Y29uc3QgY29kZT1jLmVycm9yLmNvZGU7aWYoRm9yd2FyZEVycm9ycy5pbmRleE9mKGNvZGUpPj0wKXtpZighYWNjdW1bY29kZV0pe2FjY3VtW2NvZGVdPXtlcnJvcjpjLmVycm9yLHdlaWdodDowfX1hY2N1bVtjb2RlXS53ZWlnaHQrPWMud2VpZ2h0fXJldHVybiBhY2N1bX0se30pO09iamVjdC5rZXlzKGVycm9ycykuZm9yRWFjaChlcnJvckNvZGU9Pntjb25zdCB0YWxseT1lcnJvcnNbZXJyb3JDb2RlXTtpZih0YWxseS53ZWlnaHQ8dGhpcy5xdW9ydW0pe3JldHVybn1jb25maWdzLmZvckVhY2goYz0+e2lmKGMuc3RhbGxlcil7Yy5zdGFsbGVyLmNhbmNlbCgpfWMuY2FuY2VsbGVkPXRydWV9KTtjb25zdCBlPXRhbGx5LmVycm9yO2NvbnN0IHByb3BzPXt9O0ZvcndhcmRQcm9wZXJ0aWVzLmZvckVhY2gobmFtZT0+e2lmKGVbbmFtZV09PW51bGwpe3JldHVybn1wcm9wc1tuYW1lXT1lW25hbWVdfSk7bG9nZ2VyJEEudGhyb3dFcnJvcihlLnJlYXNvbnx8ZS5tZXNzYWdlLGVycm9yQ29kZSxwcm9wcyl9KTtpZihjb25maWdzLmZpbHRlcihjPT4hYy5kb25lKS5sZW5ndGg9PT0wKXticmVha319Y29uZmlncy5mb3JFYWNoKGM9PntpZihjLnN0YWxsZXIpe2Muc3RhbGxlci5jYW5jZWwoKX1jLmNhbmNlbGxlZD10cnVlfSk7cmV0dXJuIGxvZ2dlciRBLnRocm93RXJyb3IoXCJmYWlsZWQgdG8gbWVldCBxdW9ydW1cIixMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUix7bWV0aG9kOm1ldGhvZCxwYXJhbXM6cGFyYW1zLHJlc3VsdHM6Y29uZmlncy5tYXAoYz0+ZXhwb3NlRGVidWdDb25maWcoYykpLHByb3ZpZGVyOnRoaXN9KX0pfX1cInVzZSBzdHJpY3RcIjtjb25zdCBJcGNQcm92aWRlcj1udWxsO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRCPW5ldyBMb2dnZXIodmVyc2lvbiRtKTtjb25zdCBkZWZhdWx0UHJvamVjdElkPVwiODQ4NDIwNzhiMDk5NDY2MzhjMDMxNTdmODM0MDUyMTNcIjtjbGFzcyBJbmZ1cmFXZWJTb2NrZXRQcm92aWRlciBleHRlbmRzIFdlYlNvY2tldFByb3ZpZGVye2NvbnN0cnVjdG9yKG5ldHdvcmssYXBpS2V5KXtjb25zdCBwcm92aWRlcj1uZXcgSW5mdXJhUHJvdmlkZXIobmV0d29yayxhcGlLZXkpO2NvbnN0IGNvbm5lY3Rpb249cHJvdmlkZXIuY29ubmVjdGlvbjtpZihjb25uZWN0aW9uLnBhc3N3b3JkKXtsb2dnZXIkQi50aHJvd0Vycm9yKFwiSU5GVVJBIFdlYlNvY2tldCBwcm9qZWN0IHNlY3JldHMgdW5zdXBwb3J0ZWRcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwiSW5mdXJhUHJvdmlkZXIuZ2V0V2ViU29ja2V0UHJvdmlkZXIoKVwifSl9Y29uc3QgdXJsPWNvbm5lY3Rpb24udXJsLnJlcGxhY2UoL15odHRwL2ksXCJ3c1wiKS5yZXBsYWNlKFwiL3YzL1wiLFwiL3dzL3YzL1wiKTtzdXBlcih1cmwsbmV0d29yayk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFwaUtleVwiLHByb3ZpZGVyLnByb2plY3RJZCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInByb2plY3RJZFwiLHByb3ZpZGVyLnByb2plY3RJZCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInByb2plY3RTZWNyZXRcIixwcm92aWRlci5wcm9qZWN0U2VjcmV0KX1pc0NvbW11bml0eVJlc291cmNlKCl7cmV0dXJuIHRoaXMucHJvamVjdElkPT09ZGVmYXVsdFByb2plY3RJZH19Y2xhc3MgSW5mdXJhUHJvdmlkZXIgZXh0ZW5kcyBVcmxKc29uUnBjUHJvdmlkZXJ7c3RhdGljIGdldFdlYlNvY2tldFByb3ZpZGVyKG5ldHdvcmssYXBpS2V5KXtyZXR1cm4gbmV3IEluZnVyYVdlYlNvY2tldFByb3ZpZGVyKG5ldHdvcmssYXBpS2V5KX1zdGF0aWMgZ2V0QXBpS2V5KGFwaUtleSl7Y29uc3QgYXBpS2V5T2JqPXthcGlLZXk6ZGVmYXVsdFByb2plY3RJZCxwcm9qZWN0SWQ6ZGVmYXVsdFByb2plY3RJZCxwcm9qZWN0U2VjcmV0Om51bGx9O2lmKGFwaUtleT09bnVsbCl7cmV0dXJuIGFwaUtleU9ian1pZih0eXBlb2YgYXBpS2V5PT09XCJzdHJpbmdcIil7YXBpS2V5T2JqLnByb2plY3RJZD1hcGlLZXl9ZWxzZSBpZihhcGlLZXkucHJvamVjdFNlY3JldCE9bnVsbCl7bG9nZ2VyJEIuYXNzZXJ0QXJndW1lbnQodHlwZW9mIGFwaUtleS5wcm9qZWN0SWQ9PT1cInN0cmluZ1wiLFwicHJvamVjdFNlY3JldCByZXF1aXJlcyBhIHByb2plY3RJZFwiLFwicHJvamVjdElkXCIsYXBpS2V5LnByb2plY3RJZCk7bG9nZ2VyJEIuYXNzZXJ0QXJndW1lbnQodHlwZW9mIGFwaUtleS5wcm9qZWN0U2VjcmV0PT09XCJzdHJpbmdcIixcImludmFsaWQgcHJvamVjdFNlY3JldFwiLFwicHJvamVjdFNlY3JldFwiLFwiW1JFREFDVEVEXVwiKTthcGlLZXlPYmoucHJvamVjdElkPWFwaUtleS5wcm9qZWN0SWQ7YXBpS2V5T2JqLnByb2plY3RTZWNyZXQ9YXBpS2V5LnByb2plY3RTZWNyZXR9ZWxzZSBpZihhcGlLZXkucHJvamVjdElkKXthcGlLZXlPYmoucHJvamVjdElkPWFwaUtleS5wcm9qZWN0SWR9YXBpS2V5T2JqLmFwaUtleT1hcGlLZXlPYmoucHJvamVjdElkO3JldHVybiBhcGlLZXlPYmp9c3RhdGljIGdldFVybChuZXR3b3JrLGFwaUtleSl7bGV0IGhvc3Q9bnVsbDtzd2l0Y2gobmV0d29yaz9uZXR3b3JrLm5hbWU6XCJ1bmtub3duXCIpe2Nhc2VcImhvbWVzdGVhZFwiOmhvc3Q9XCJtYWlubmV0LmluZnVyYS5pb1wiO2JyZWFrO2Nhc2VcInJvcHN0ZW5cIjpob3N0PVwicm9wc3Rlbi5pbmZ1cmEuaW9cIjticmVhaztjYXNlXCJyaW5rZWJ5XCI6aG9zdD1cInJpbmtlYnkuaW5mdXJhLmlvXCI7YnJlYWs7Y2FzZVwia292YW5cIjpob3N0PVwia292YW4uaW5mdXJhLmlvXCI7YnJlYWs7Y2FzZVwiZ29lcmxpXCI6aG9zdD1cImdvZXJsaS5pbmZ1cmEuaW9cIjticmVhaztkZWZhdWx0OmxvZ2dlciRCLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULHthcmd1bWVudDpcIm5ldHdvcmtcIix2YWx1ZTpuZXR3b3JrfSl9Y29uc3QgY29ubmVjdGlvbj17YWxsb3dHemlwOnRydWUsdXJsOlwiaHR0cHM6L1wiK1wiL1wiK2hvc3QrXCIvdjMvXCIrYXBpS2V5LnByb2plY3RJZCx0aHJvdHRsZUNhbGxiYWNrOihhdHRlbXB0LHVybCk9PntpZihhcGlLZXkucHJvamVjdElkPT09ZGVmYXVsdFByb2plY3RJZCl7c2hvd1Rocm90dGxlTWVzc2FnZSgpfXJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSl9fTtpZihhcGlLZXkucHJvamVjdFNlY3JldCE9bnVsbCl7Y29ubmVjdGlvbi51c2VyPVwiXCI7Y29ubmVjdGlvbi5wYXNzd29yZD1hcGlLZXkucHJvamVjdFNlY3JldH1yZXR1cm4gY29ubmVjdGlvbn1pc0NvbW11bml0eVJlc291cmNlKCl7cmV0dXJuIHRoaXMucHJvamVjdElkPT09ZGVmYXVsdFByb2plY3RJZH19Y2xhc3MgSnNvblJwY0JhdGNoUHJvdmlkZXIgZXh0ZW5kcyBKc29uUnBjUHJvdmlkZXJ7c2VuZChtZXRob2QscGFyYW1zKXtjb25zdCByZXF1ZXN0PXttZXRob2Q6bWV0aG9kLHBhcmFtczpwYXJhbXMsaWQ6dGhpcy5fbmV4dElkKyssanNvbnJwYzpcIjIuMFwifTtpZih0aGlzLl9wZW5kaW5nQmF0Y2g9PW51bGwpe3RoaXMuX3BlbmRpbmdCYXRjaD1bXX1jb25zdCBpbmZsaWdodFJlcXVlc3Q9e3JlcXVlc3Q6cmVxdWVzdCxyZXNvbHZlOm51bGwscmVqZWN0Om51bGx9O2NvbnN0IHByb21pc2U9bmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e2luZmxpZ2h0UmVxdWVzdC5yZXNvbHZlPXJlc29sdmU7aW5mbGlnaHRSZXF1ZXN0LnJlamVjdD1yZWplY3R9KTt0aGlzLl9wZW5kaW5nQmF0Y2gucHVzaChpbmZsaWdodFJlcXVlc3QpO2lmKCF0aGlzLl9wZW5kaW5nQmF0Y2hBZ2dyZWdhdG9yKXt0aGlzLl9wZW5kaW5nQmF0Y2hBZ2dyZWdhdG9yPXNldFRpbWVvdXQoKCk9Pntjb25zdCBiYXRjaD10aGlzLl9wZW5kaW5nQmF0Y2g7dGhpcy5fcGVuZGluZ0JhdGNoPW51bGw7dGhpcy5fcGVuZGluZ0JhdGNoQWdncmVnYXRvcj1udWxsO2NvbnN0IHJlcXVlc3Q9YmF0Y2gubWFwKGluZmxpZ2h0PT5pbmZsaWdodC5yZXF1ZXN0KTt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXF1ZXN0QmF0Y2hcIixyZXF1ZXN0OmRlZXBDb3B5KHJlcXVlc3QpLHByb3ZpZGVyOnRoaXN9KTtyZXR1cm4gZmV0Y2hKc29uKHRoaXMuY29ubmVjdGlvbixKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSkudGhlbihyZXN1bHQ9Pnt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXNwb25zZVwiLHJlcXVlc3Q6cmVxdWVzdCxyZXNwb25zZTpyZXN1bHQscHJvdmlkZXI6dGhpc30pO2JhdGNoLmZvckVhY2goKGluZmxpZ2h0UmVxdWVzdCxpbmRleCk9Pntjb25zdCBwYXlsb2FkPXJlc3VsdFtpbmRleF07aWYocGF5bG9hZC5lcnJvcil7Y29uc3QgZXJyb3I9bmV3IEVycm9yKHBheWxvYWQuZXJyb3IubWVzc2FnZSk7ZXJyb3IuY29kZT1wYXlsb2FkLmVycm9yLmNvZGU7ZXJyb3IuZGF0YT1wYXlsb2FkLmVycm9yLmRhdGE7aW5mbGlnaHRSZXF1ZXN0LnJlamVjdChlcnJvcil9ZWxzZXtpbmZsaWdodFJlcXVlc3QucmVzb2x2ZShwYXlsb2FkLnJlc3VsdCl9fSl9LGVycm9yPT57dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVzcG9uc2VcIixlcnJvcjplcnJvcixyZXF1ZXN0OnJlcXVlc3QscHJvdmlkZXI6dGhpc30pO2JhdGNoLmZvckVhY2goaW5mbGlnaHRSZXF1ZXN0PT57aW5mbGlnaHRSZXF1ZXN0LnJlamVjdChlcnJvcil9KX0pfSwxMCl9cmV0dXJuIHByb21pc2V9fVwidXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRDPW5ldyBMb2dnZXIodmVyc2lvbiRtKTtjb25zdCBkZWZhdWx0QXBpS2V5JDI9XCJFVEhFUlNfSlNfU0hBUkVEXCI7Y2xhc3MgTm9kZXNtaXRoUHJvdmlkZXIgZXh0ZW5kcyBVcmxKc29uUnBjUHJvdmlkZXJ7c3RhdGljIGdldEFwaUtleShhcGlLZXkpe2lmKGFwaUtleSYmdHlwZW9mIGFwaUtleSE9PVwic3RyaW5nXCIpe2xvZ2dlciRDLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYXBpS2V5XCIsXCJhcGlLZXlcIixhcGlLZXkpfXJldHVybiBhcGlLZXl8fGRlZmF1bHRBcGlLZXkkMn1zdGF0aWMgZ2V0VXJsKG5ldHdvcmssYXBpS2V5KXtsb2dnZXIkQy53YXJuKFwiTm9kZVNtaXRoIHdpbGwgYmUgZGlzY29udGludWVkIG9uIDIwMTktMTItMjA7IHBsZWFzZSBtaWdyYXRlIHRvIGFub3RoZXIgcGxhdGZvcm0uXCIpO2xldCBob3N0PW51bGw7c3dpdGNoKG5ldHdvcmsubmFtZSl7Y2FzZVwiaG9tZXN0ZWFkXCI6aG9zdD1cImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9tYWlubmV0L2pzb25ycGNcIjticmVhaztjYXNlXCJyb3BzdGVuXCI6aG9zdD1cImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9yb3BzdGVuL2pzb25ycGNcIjticmVhaztjYXNlXCJyaW5rZWJ5XCI6aG9zdD1cImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9yaW5rZWJ5L2pzb25ycGNcIjticmVhaztjYXNlXCJnb2VybGlcIjpob3N0PVwiaHR0cHM6Ly9ldGhlcmV1bS5hcGkubm9kZXNtaXRoLmlvL3YxL2dvZXJsaS9qc29ucnBjXCI7YnJlYWs7Y2FzZVwia292YW5cIjpob3N0PVwiaHR0cHM6Ly9ldGhlcmV1bS5hcGkubm9kZXNtaXRoLmlvL3YxL2tvdmFuL2pzb25ycGNcIjticmVhaztkZWZhdWx0OmxvZ2dlciRDLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIixcIm5ldHdvcmtcIixhcmd1bWVudHNbMF0pfXJldHVybiBob3N0K1wiP2FwaUtleT1cIithcGlLZXl9fVwidXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciREPW5ldyBMb2dnZXIodmVyc2lvbiRtKTtjb25zdCBkZWZhdWx0QXBwbGljYXRpb25JZHM9e2hvbWVzdGVhZDpcIjYwMDRiY2QxMDA0MDI2MTYzM2FkZTk5MFwiLHJvcHN0ZW46XCI2MDA0YmQ0ZDAwNDAyNjE2MzNhZGU5OTFcIixyaW5rZWJ5OlwiNjAwNGJkYTIwMDQwMjYxNjMzYWRlOTk0XCIsZ29lcmxpOlwiNjAwNGJkODYwMDQwMjYxNjMzYWRlOTkyXCJ9O2NsYXNzIFBvY2tldFByb3ZpZGVyIGV4dGVuZHMgVXJsSnNvblJwY1Byb3ZpZGVye2NvbnN0cnVjdG9yKG5ldHdvcmssYXBpS2V5KXtpZihhcGlLZXk9PW51bGwpe2NvbnN0IG49Z2V0U3RhdGljKG5ldy50YXJnZXQsXCJnZXROZXR3b3JrXCIpKG5ldHdvcmspO2lmKG4pe2NvbnN0IGFwcGxpY2F0aW9uSWQ9ZGVmYXVsdEFwcGxpY2F0aW9uSWRzW24ubmFtZV07aWYoYXBwbGljYXRpb25JZCl7YXBpS2V5PXthcHBsaWNhdGlvbklkOmFwcGxpY2F0aW9uSWQsbG9hZEJhbGFuY2VyOnRydWV9fX1pZihhcGlLZXk9PW51bGwpe2xvZ2dlciRELnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULHthcmd1bWVudDpcIm5ldHdvcmtcIix2YWx1ZTpuZXR3b3JrfSl9fXN1cGVyKG5ldHdvcmssYXBpS2V5KX1zdGF0aWMgZ2V0QXBpS2V5KGFwaUtleSl7aWYoYXBpS2V5PT1udWxsKXtsb2dnZXIkRC50aHJvd0FyZ3VtZW50RXJyb3IoXCJQb2NrZXRQcm92aWRlci5nZXRBcGlLZXkgZG9lcyBub3Qgc3VwcG9ydCBudWxsIGFwaUtleVwiLFwiYXBpS2V5XCIsYXBpS2V5KX1jb25zdCBhcGlLZXlPYmo9e2FwcGxpY2F0aW9uSWQ6bnVsbCxsb2FkQmFsYW5jZXI6ZmFsc2UsYXBwbGljYXRpb25TZWNyZXRLZXk6bnVsbH07aWYodHlwZW9mIGFwaUtleT09PVwic3RyaW5nXCIpe2FwaUtleU9iai5hcHBsaWNhdGlvbklkPWFwaUtleX1lbHNlIGlmKGFwaUtleS5hcHBsaWNhdGlvblNlY3JldEtleSE9bnVsbCl7bG9nZ2VyJEQuYXNzZXJ0QXJndW1lbnQodHlwZW9mIGFwaUtleS5hcHBsaWNhdGlvbklkPT09XCJzdHJpbmdcIixcImFwcGxpY2F0aW9uU2VjcmV0S2V5IHJlcXVpcmVzIGFuIGFwcGxpY2F0aW9uSWRcIixcImFwcGxpY2F0aW9uSWRcIixhcGlLZXkuYXBwbGljYXRpb25JZCk7bG9nZ2VyJEQuYXNzZXJ0QXJndW1lbnQodHlwZW9mIGFwaUtleS5hcHBsaWNhdGlvblNlY3JldEtleT09PVwic3RyaW5nXCIsXCJpbnZhbGlkIGFwcGxpY2F0aW9uU2VjcmV0S2V5XCIsXCJhcHBsaWNhdGlvblNlY3JldEtleVwiLFwiW1JFREFDVEVEXVwiKTthcGlLZXlPYmouYXBwbGljYXRpb25JZD1hcGlLZXkuYXBwbGljYXRpb25JZDthcGlLZXlPYmouYXBwbGljYXRpb25TZWNyZXRLZXk9YXBpS2V5LmFwcGxpY2F0aW9uU2VjcmV0S2V5O2FwaUtleU9iai5sb2FkQmFsYW5jZXI9ISFhcGlLZXkubG9hZEJhbGFuY2VyfWVsc2UgaWYoYXBpS2V5LmFwcGxpY2F0aW9uSWQpe2xvZ2dlciRELmFzc2VydEFyZ3VtZW50KHR5cGVvZiBhcGlLZXkuYXBwbGljYXRpb25JZD09PVwic3RyaW5nXCIsXCJhcGlLZXkuYXBwbGljYXRpb25JZCBtdXN0IGJlIGEgc3RyaW5nXCIsXCJhcGlLZXkuYXBwbGljYXRpb25JZFwiLGFwaUtleS5hcHBsaWNhdGlvbklkKTthcGlLZXlPYmouYXBwbGljYXRpb25JZD1hcGlLZXkuYXBwbGljYXRpb25JZDthcGlLZXlPYmoubG9hZEJhbGFuY2VyPSEhYXBpS2V5LmxvYWRCYWxhbmNlcn1lbHNle2xvZ2dlciRELnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIFBvY2tldFByb3ZpZGVyIGFwaUtleVwiLFwiYXBpS2V5XCIsYXBpS2V5KX1yZXR1cm4gYXBpS2V5T2JqfXN0YXRpYyBnZXRVcmwobmV0d29yayxhcGlLZXkpe2xldCBob3N0PW51bGw7c3dpdGNoKG5ldHdvcms/bmV0d29yay5uYW1lOlwidW5rbm93blwiKXtjYXNlXCJob21lc3RlYWRcIjpob3N0PVwiZXRoLW1haW5uZXQuZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjticmVhaztjYXNlXCJyb3BzdGVuXCI6aG9zdD1cImV0aC1yb3BzdGVuLmdhdGV3YXkucG9rdC5uZXR3b3JrXCI7YnJlYWs7Y2FzZVwicmlua2VieVwiOmhvc3Q9XCJldGgtcmlua2VieS5nYXRld2F5LnBva3QubmV0d29ya1wiO2JyZWFrO2Nhc2VcImdvZXJsaVwiOmhvc3Q9XCJldGgtZ29lcmxpLmdhdGV3YXkucG9rdC5uZXR3b3JrXCI7YnJlYWs7ZGVmYXVsdDpsb2dnZXIkRC50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCx7YXJndW1lbnQ6XCJuZXR3b3JrXCIsdmFsdWU6bmV0d29ya30pfWxldCB1cmw9bnVsbDtpZihhcGlLZXkubG9hZEJhbGFuY2VyKXt1cmw9YGh0dHBzOi8vJHtob3N0fS92MS9sYi8ke2FwaUtleS5hcHBsaWNhdGlvbklkfWB9ZWxzZXt1cmw9YGh0dHBzOi8vJHtob3N0fS92MS8ke2FwaUtleS5hcHBsaWNhdGlvbklkfWB9Y29uc3QgY29ubmVjdGlvbj17dXJsOnVybH07Y29ubmVjdGlvbi5oZWFkZXJzPXt9O2lmKGFwaUtleS5hcHBsaWNhdGlvblNlY3JldEtleSE9bnVsbCl7Y29ubmVjdGlvbi51c2VyPVwiXCI7Y29ubmVjdGlvbi5wYXNzd29yZD1hcGlLZXkuYXBwbGljYXRpb25TZWNyZXRLZXl9cmV0dXJuIGNvbm5lY3Rpb259aXNDb21tdW5pdHlSZXNvdXJjZSgpe3JldHVybiB0aGlzLmFwcGxpY2F0aW9uSWQ9PT1kZWZhdWx0QXBwbGljYXRpb25JZHNbdGhpcy5uZXR3b3JrLm5hbWVdfX1cInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkRT1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7bGV0IF9uZXh0SWQ9MTtmdW5jdGlvbiBidWlsZFdlYjNMZWdhY3lGZXRjaGVyKHByb3ZpZGVyLHNlbmRGdW5jKXtyZXR1cm4gZnVuY3Rpb24obWV0aG9kLHBhcmFtcyl7aWYobWV0aG9kPT1cImV0aF9zaWduXCImJihwcm92aWRlci5pc01ldGFNYXNrfHxwcm92aWRlci5pc1N0YXR1cykpe21ldGhvZD1cInBlcnNvbmFsX3NpZ25cIjtwYXJhbXM9W3BhcmFtc1sxXSxwYXJhbXNbMF1dfWNvbnN0IHJlcXVlc3Q9e21ldGhvZDptZXRob2QscGFyYW1zOnBhcmFtcyxpZDpfbmV4dElkKyssanNvbnJwYzpcIjIuMFwifTtyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e3NlbmRGdW5jKHJlcXVlc3QsZnVuY3Rpb24oZXJyb3IscmVzdWx0KXtpZihlcnJvcil7cmV0dXJuIHJlamVjdChlcnJvcil9aWYocmVzdWx0LmVycm9yKXtjb25zdCBlcnJvcj1uZXcgRXJyb3IocmVzdWx0LmVycm9yLm1lc3NhZ2UpO2Vycm9yLmNvZGU9cmVzdWx0LmVycm9yLmNvZGU7ZXJyb3IuZGF0YT1yZXN1bHQuZXJyb3IuZGF0YTtyZXR1cm4gcmVqZWN0KGVycm9yKX1yZXNvbHZlKHJlc3VsdC5yZXN1bHQpfSl9KX19ZnVuY3Rpb24gYnVpbGRFaXAxMTkzRmV0Y2hlcihwcm92aWRlcil7cmV0dXJuIGZ1bmN0aW9uKG1ldGhvZCxwYXJhbXMpe2lmKHBhcmFtcz09bnVsbCl7cGFyYW1zPVtdfWlmKG1ldGhvZD09XCJldGhfc2lnblwiJiYocHJvdmlkZXIuaXNNZXRhTWFza3x8cHJvdmlkZXIuaXNTdGF0dXMpKXttZXRob2Q9XCJwZXJzb25hbF9zaWduXCI7cGFyYW1zPVtwYXJhbXNbMV0scGFyYW1zWzBdXX1yZXR1cm4gcHJvdmlkZXIucmVxdWVzdCh7bWV0aG9kOm1ldGhvZCxwYXJhbXM6cGFyYW1zfSl9fWNsYXNzIFdlYjNQcm92aWRlciBleHRlbmRzIEpzb25ScGNQcm92aWRlcntjb25zdHJ1Y3Rvcihwcm92aWRlcixuZXR3b3JrKXtsb2dnZXIkRS5jaGVja05ldyhuZXcudGFyZ2V0LFdlYjNQcm92aWRlcik7aWYocHJvdmlkZXI9PW51bGwpe2xvZ2dlciRFLnRocm93QXJndW1lbnRFcnJvcihcIm1pc3NpbmcgcHJvdmlkZXJcIixcInByb3ZpZGVyXCIscHJvdmlkZXIpfWxldCBwYXRoPW51bGw7bGV0IGpzb25ScGNGZXRjaEZ1bmM9bnVsbDtsZXQgc3VicHJvdmlkZXI9bnVsbDtpZih0eXBlb2YgcHJvdmlkZXI9PT1cImZ1bmN0aW9uXCIpe3BhdGg9XCJ1bmtub3duOlwiO2pzb25ScGNGZXRjaEZ1bmM9cHJvdmlkZXJ9ZWxzZXtwYXRoPXByb3ZpZGVyLmhvc3R8fHByb3ZpZGVyLnBhdGh8fFwiXCI7aWYoIXBhdGgmJnByb3ZpZGVyLmlzTWV0YU1hc2spe3BhdGg9XCJtZXRhbWFza1wifXN1YnByb3ZpZGVyPXByb3ZpZGVyO2lmKHByb3ZpZGVyLnJlcXVlc3Qpe2lmKHBhdGg9PT1cIlwiKXtwYXRoPVwiZWlwLTExOTM6XCJ9anNvblJwY0ZldGNoRnVuYz1idWlsZEVpcDExOTNGZXRjaGVyKHByb3ZpZGVyKX1lbHNlIGlmKHByb3ZpZGVyLnNlbmRBc3luYyl7anNvblJwY0ZldGNoRnVuYz1idWlsZFdlYjNMZWdhY3lGZXRjaGVyKHByb3ZpZGVyLHByb3ZpZGVyLnNlbmRBc3luYy5iaW5kKHByb3ZpZGVyKSl9ZWxzZSBpZihwcm92aWRlci5zZW5kKXtqc29uUnBjRmV0Y2hGdW5jPWJ1aWxkV2ViM0xlZ2FjeUZldGNoZXIocHJvdmlkZXIscHJvdmlkZXIuc2VuZC5iaW5kKHByb3ZpZGVyKSl9ZWxzZXtsb2dnZXIkRS50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBwcm92aWRlclwiLFwicHJvdmlkZXJcIixwcm92aWRlcil9aWYoIXBhdGgpe3BhdGg9XCJ1bmtub3duOlwifX1zdXBlcihwYXRoLG5ldHdvcmspO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJqc29uUnBjRmV0Y2hGdW5jXCIsanNvblJwY0ZldGNoRnVuYyk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInByb3ZpZGVyXCIsc3VicHJvdmlkZXIpfXNlbmQobWV0aG9kLHBhcmFtcyl7cmV0dXJuIHRoaXMuanNvblJwY0ZldGNoRnVuYyhtZXRob2QscGFyYW1zKX19XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJEY9bmV3IExvZ2dlcih2ZXJzaW9uJG0pO2Z1bmN0aW9uIGdldERlZmF1bHRQcm92aWRlcihuZXR3b3JrLG9wdGlvbnMpe2lmKG5ldHdvcms9PW51bGwpe25ldHdvcms9XCJob21lc3RlYWRcIn1pZih0eXBlb2YgbmV0d29yaz09PVwic3RyaW5nXCIpe2NvbnN0IG1hdGNoPW5ldHdvcmsubWF0Y2goL14od3N8aHR0cClzPzovaSk7aWYobWF0Y2gpe3N3aXRjaChtYXRjaFsxXSl7Y2FzZVwiaHR0cFwiOnJldHVybiBuZXcgSnNvblJwY1Byb3ZpZGVyKG5ldHdvcmspO2Nhc2VcIndzXCI6cmV0dXJuIG5ldyBXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrKTtkZWZhdWx0OmxvZ2dlciRGLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIFVSTCBzY2hlbWVcIixcIm5ldHdvcmtcIixuZXR3b3JrKX19fWNvbnN0IG49Z2V0TmV0d29yayhuZXR3b3JrKTtpZighbnx8IW4uX2RlZmF1bHRQcm92aWRlcil7bG9nZ2VyJEYudGhyb3dFcnJvcihcInVuc3VwcG9ydGVkIGdldERlZmF1bHRQcm92aWRlciBuZXR3b3JrXCIsTG9nZ2VyLmVycm9ycy5ORVRXT1JLX0VSUk9SLHtvcGVyYXRpb246XCJnZXREZWZhdWx0UHJvdmlkZXJcIixuZXR3b3JrOm5ldHdvcmt9KX1yZXR1cm4gbi5fZGVmYXVsdFByb3ZpZGVyKHtGYWxsYmFja1Byb3ZpZGVyOkZhbGxiYWNrUHJvdmlkZXIsQWxjaGVteVByb3ZpZGVyOkFsY2hlbXlQcm92aWRlcixDbG91ZGZsYXJlUHJvdmlkZXI6Q2xvdWRmbGFyZVByb3ZpZGVyLEV0aGVyc2NhblByb3ZpZGVyOkV0aGVyc2NhblByb3ZpZGVyLEluZnVyYVByb3ZpZGVyOkluZnVyYVByb3ZpZGVyLEpzb25ScGNQcm92aWRlcjpKc29uUnBjUHJvdmlkZXIsTm9kZXNtaXRoUHJvdmlkZXI6Tm9kZXNtaXRoUHJvdmlkZXIsUG9ja2V0UHJvdmlkZXI6UG9ja2V0UHJvdmlkZXIsV2ViM1Byb3ZpZGVyOldlYjNQcm92aWRlcixJcGNQcm92aWRlcjpJcGNQcm92aWRlcn0sb3B0aW9ucyl9dmFyIGluZGV4JDM9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsUHJvdmlkZXI6UHJvdmlkZXIsQmFzZVByb3ZpZGVyOkJhc2VQcm92aWRlcixSZXNvbHZlcjpSZXNvbHZlcixVcmxKc29uUnBjUHJvdmlkZXI6VXJsSnNvblJwY1Byb3ZpZGVyLEZhbGxiYWNrUHJvdmlkZXI6RmFsbGJhY2tQcm92aWRlcixBbGNoZW15UHJvdmlkZXI6QWxjaGVteVByb3ZpZGVyLEFsY2hlbXlXZWJTb2NrZXRQcm92aWRlcjpBbGNoZW15V2ViU29ja2V0UHJvdmlkZXIsQ2xvdWRmbGFyZVByb3ZpZGVyOkNsb3VkZmxhcmVQcm92aWRlcixFdGhlcnNjYW5Qcm92aWRlcjpFdGhlcnNjYW5Qcm92aWRlcixJbmZ1cmFQcm92aWRlcjpJbmZ1cmFQcm92aWRlcixJbmZ1cmFXZWJTb2NrZXRQcm92aWRlcjpJbmZ1cmFXZWJTb2NrZXRQcm92aWRlcixKc29uUnBjUHJvdmlkZXI6SnNvblJwY1Byb3ZpZGVyLEpzb25ScGNCYXRjaFByb3ZpZGVyOkpzb25ScGNCYXRjaFByb3ZpZGVyLE5vZGVzbWl0aFByb3ZpZGVyOk5vZGVzbWl0aFByb3ZpZGVyLFBvY2tldFByb3ZpZGVyOlBvY2tldFByb3ZpZGVyLFN0YXRpY0pzb25ScGNQcm92aWRlcjpTdGF0aWNKc29uUnBjUHJvdmlkZXIsV2ViM1Byb3ZpZGVyOldlYjNQcm92aWRlcixXZWJTb2NrZXRQcm92aWRlcjpXZWJTb2NrZXRQcm92aWRlcixJcGNQcm92aWRlcjpJcGNQcm92aWRlcixKc29uUnBjU2lnbmVyOkpzb25ScGNTaWduZXIsZ2V0RGVmYXVsdFByb3ZpZGVyOmdldERlZmF1bHRQcm92aWRlcixnZXROZXR3b3JrOmdldE5ldHdvcmssaXNDb21tdW5pdHlSZXNvdXJjZTppc0NvbW11bml0eVJlc291cmNlLGlzQ29tbXVuaXR5UmVzb3VyY2FibGU6aXNDb21tdW5pdHlSZXNvdXJjYWJsZSxzaG93VGhyb3R0bGVNZXNzYWdlOnNob3dUaHJvdHRsZU1lc3NhZ2UsRm9ybWF0dGVyOkZvcm1hdHRlcn0pO1widXNlIHN0cmljdFwiO2NvbnN0IHJlZ2V4Qnl0ZXM9bmV3IFJlZ0V4cChcIl5ieXRlcyhbMC05XSspJFwiKTtjb25zdCByZWdleE51bWJlcj1uZXcgUmVnRXhwKFwiXih1P2ludCkoWzAtOV0qKSRcIik7Y29uc3QgcmVnZXhBcnJheT1uZXcgUmVnRXhwKFwiXiguKilcXFxcWyhbMC05XSopXFxcXF0kXCIpO2NvbnN0IFplcm9zJDE9XCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7ZnVuY3Rpb24gX3BhY2sodHlwZSx2YWx1ZSxpc0FycmF5KXtzd2l0Y2godHlwZSl7Y2FzZVwiYWRkcmVzc1wiOmlmKGlzQXJyYXkpe3JldHVybiB6ZXJvUGFkKHZhbHVlLDMyKX1yZXR1cm4gYXJyYXlpZnkodmFsdWUpO2Nhc2VcInN0cmluZ1wiOnJldHVybiB0b1V0ZjhCeXRlcyh2YWx1ZSk7Y2FzZVwiYnl0ZXNcIjpyZXR1cm4gYXJyYXlpZnkodmFsdWUpO2Nhc2VcImJvb2xcIjp2YWx1ZT12YWx1ZT9cIjB4MDFcIjpcIjB4MDBcIjtpZihpc0FycmF5KXtyZXR1cm4gemVyb1BhZCh2YWx1ZSwzMil9cmV0dXJuIGFycmF5aWZ5KHZhbHVlKX1sZXQgbWF0Y2g9dHlwZS5tYXRjaChyZWdleE51bWJlcik7aWYobWF0Y2gpe2xldCBzaXplPXBhcnNlSW50KG1hdGNoWzJdfHxcIjI1NlwiKTtpZihtYXRjaFsyXSYmU3RyaW5nKHNpemUpIT09bWF0Y2hbMl18fHNpemUlOCE9PTB8fHNpemU9PT0wfHxzaXplPjI1Nil7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBudW1iZXIgdHlwZSAtIFwiK3R5cGUpfWlmKGlzQXJyYXkpe3NpemU9MjU2fXZhbHVlPUJpZ051bWJlci5mcm9tKHZhbHVlKS50b1R3b3Moc2l6ZSk7cmV0dXJuIHplcm9QYWQodmFsdWUsc2l6ZS84KX1tYXRjaD10eXBlLm1hdGNoKHJlZ2V4Qnl0ZXMpO2lmKG1hdGNoKXtjb25zdCBzaXplPXBhcnNlSW50KG1hdGNoWzFdKTtpZihTdHJpbmcoc2l6ZSkhPT1tYXRjaFsxXXx8c2l6ZT09PTB8fHNpemU+MzIpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgYnl0ZXMgdHlwZSAtIFwiK3R5cGUpfWlmKGFycmF5aWZ5KHZhbHVlKS5ieXRlTGVuZ3RoIT09c2l6ZSl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB2YWx1ZSBmb3IgXCIrdHlwZSl9aWYoaXNBcnJheSl7cmV0dXJuIGFycmF5aWZ5KCh2YWx1ZStaZXJvcyQxKS5zdWJzdHJpbmcoMCw2NikpfXJldHVybiB2YWx1ZX1tYXRjaD10eXBlLm1hdGNoKHJlZ2V4QXJyYXkpO2lmKG1hdGNoJiZBcnJheS5pc0FycmF5KHZhbHVlKSl7Y29uc3QgYmFzZVR5cGU9bWF0Y2hbMV07Y29uc3QgY291bnQ9cGFyc2VJbnQobWF0Y2hbMl18fFN0cmluZyh2YWx1ZS5sZW5ndGgpKTtpZihjb3VudCE9dmFsdWUubGVuZ3RoKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHZhbHVlIGZvciBcIit0eXBlKX1jb25zdCByZXN1bHQ9W107dmFsdWUuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7cmVzdWx0LnB1c2goX3BhY2soYmFzZVR5cGUsdmFsdWUsdHJ1ZSkpfSk7cmV0dXJuIGNvbmNhdChyZXN1bHQpfXRocm93IG5ldyBFcnJvcihcImludmFsaWQgdHlwZSAtIFwiK3R5cGUpfWZ1bmN0aW9uIHBhY2skMSh0eXBlcyx2YWx1ZXMpe2lmKHR5cGVzLmxlbmd0aCE9dmFsdWVzLmxlbmd0aCl7dGhyb3cgbmV3IEVycm9yKFwidHlwZS92YWx1ZSBjb3VudCBtaXNtYXRjaFwiKX1jb25zdCB0aWdodD1bXTt0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsaW5kZXgpe3RpZ2h0LnB1c2goX3BhY2sodHlwZSx2YWx1ZXNbaW5kZXhdKSl9KTtyZXR1cm4gaGV4bGlmeShjb25jYXQodGlnaHQpKX1mdW5jdGlvbiBrZWNjYWsyNTYkMSh0eXBlcyx2YWx1ZXMpe3JldHVybiBrZWNjYWsyNTYocGFjayQxKHR5cGVzLHZhbHVlcykpfWZ1bmN0aW9uIHNoYTI1NiQyKHR5cGVzLHZhbHVlcyl7cmV0dXJuIHNoYTI1NiQxKHBhY2skMSh0eXBlcyx2YWx1ZXMpKX1jb25zdCB2ZXJzaW9uJG49XCJ1bml0cy81LjEuMFwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRHPW5ldyBMb2dnZXIodmVyc2lvbiRuKTtjb25zdCBuYW1lcz1bXCJ3ZWlcIixcImt3ZWlcIixcIm13ZWlcIixcImd3ZWlcIixcInN6YWJvXCIsXCJmaW5uZXlcIixcImV0aGVyXCJdO2Z1bmN0aW9uIGNvbW1pZnkodmFsdWUpe2NvbnN0IGNvbXBzPVN0cmluZyh2YWx1ZSkuc3BsaXQoXCIuXCIpO2lmKGNvbXBzLmxlbmd0aD4yfHwhY29tcHNbMF0ubWF0Y2goL14tP1swLTldKiQvKXx8Y29tcHNbMV0mJiFjb21wc1sxXS5tYXRjaCgvXlswLTldKiQvKXx8dmFsdWU9PT1cIi5cInx8dmFsdWU9PT1cIi0uXCIpe2xvZ2dlciRHLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdmFsdWVcIixcInZhbHVlXCIsdmFsdWUpfWxldCB3aG9sZT1jb21wc1swXTtsZXQgbmVnYXRpdmU9XCJcIjtpZih3aG9sZS5zdWJzdHJpbmcoMCwxKT09PVwiLVwiKXtuZWdhdGl2ZT1cIi1cIjt3aG9sZT13aG9sZS5zdWJzdHJpbmcoMSl9d2hpbGUod2hvbGUuc3Vic3RyaW5nKDAsMSk9PT1cIjBcIil7d2hvbGU9d2hvbGUuc3Vic3RyaW5nKDEpfWlmKHdob2xlPT09XCJcIil7d2hvbGU9XCIwXCJ9bGV0IHN1ZmZpeD1cIlwiO2lmKGNvbXBzLmxlbmd0aD09PTIpe3N1ZmZpeD1cIi5cIisoY29tcHNbMV18fFwiMFwiKX13aGlsZShzdWZmaXgubGVuZ3RoPjImJnN1ZmZpeFtzdWZmaXgubGVuZ3RoLTFdPT09XCIwXCIpe3N1ZmZpeD1zdWZmaXguc3Vic3RyaW5nKDAsc3VmZml4Lmxlbmd0aC0xKX1jb25zdCBmb3JtYXR0ZWQ9W107d2hpbGUod2hvbGUubGVuZ3RoKXtpZih3aG9sZS5sZW5ndGg8PTMpe2Zvcm1hdHRlZC51bnNoaWZ0KHdob2xlKTticmVha31lbHNle2NvbnN0IGluZGV4PXdob2xlLmxlbmd0aC0zO2Zvcm1hdHRlZC51bnNoaWZ0KHdob2xlLnN1YnN0cmluZyhpbmRleCkpO3dob2xlPXdob2xlLnN1YnN0cmluZygwLGluZGV4KX19cmV0dXJuIG5lZ2F0aXZlK2Zvcm1hdHRlZC5qb2luKFwiLFwiKStzdWZmaXh9ZnVuY3Rpb24gZm9ybWF0VW5pdHModmFsdWUsdW5pdE5hbWUpe2lmKHR5cGVvZiB1bml0TmFtZT09PVwic3RyaW5nXCIpe2NvbnN0IGluZGV4PW5hbWVzLmluZGV4T2YodW5pdE5hbWUpO2lmKGluZGV4IT09LTEpe3VuaXROYW1lPTMqaW5kZXh9fXJldHVybiBmb3JtYXRGaXhlZCh2YWx1ZSx1bml0TmFtZSE9bnVsbD91bml0TmFtZToxOCl9ZnVuY3Rpb24gcGFyc2VVbml0cyh2YWx1ZSx1bml0TmFtZSl7aWYodHlwZW9mIHZhbHVlIT09XCJzdHJpbmdcIil7bG9nZ2VyJEcudGhyb3dBcmd1bWVudEVycm9yKFwidmFsdWUgbXVzdCBiZSBhIHN0cmluZ1wiLFwidmFsdWVcIix2YWx1ZSl9aWYodHlwZW9mIHVuaXROYW1lPT09XCJzdHJpbmdcIil7Y29uc3QgaW5kZXg9bmFtZXMuaW5kZXhPZih1bml0TmFtZSk7aWYoaW5kZXghPT0tMSl7dW5pdE5hbWU9MyppbmRleH19cmV0dXJuIHBhcnNlRml4ZWQodmFsdWUsdW5pdE5hbWUhPW51bGw/dW5pdE5hbWU6MTgpfWZ1bmN0aW9uIGZvcm1hdEV0aGVyKHdlaSl7cmV0dXJuIGZvcm1hdFVuaXRzKHdlaSwxOCl9ZnVuY3Rpb24gcGFyc2VFdGhlcihldGhlcil7cmV0dXJuIHBhcnNlVW5pdHMoZXRoZXIsMTgpfVwidXNlIHN0cmljdFwiO3ZhciB1dGlscyQxPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLEFiaUNvZGVyOkFiaUNvZGVyLGRlZmF1bHRBYmlDb2RlcjpkZWZhdWx0QWJpQ29kZXIsRnJhZ21lbnQ6RnJhZ21lbnQsRXZlbnRGcmFnbWVudDpFdmVudEZyYWdtZW50LEZ1bmN0aW9uRnJhZ21lbnQ6RnVuY3Rpb25GcmFnbWVudCxQYXJhbVR5cGU6UGFyYW1UeXBlLEZvcm1hdFR5cGVzOkZvcm1hdFR5cGVzLGNoZWNrUmVzdWx0RXJyb3JzOmNoZWNrUmVzdWx0RXJyb3JzLExvZ2dlcjpMb2dnZXIsUkxQOmluZGV4LF9mZXRjaERhdGE6X2ZldGNoRGF0YSxmZXRjaEpzb246ZmV0Y2hKc29uLHBvbGw6cG9sbCxjaGVja1Byb3BlcnRpZXM6Y2hlY2tQcm9wZXJ0aWVzLGRlZXBDb3B5OmRlZXBDb3B5LGRlZmluZVJlYWRPbmx5OmRlZmluZVJlYWRPbmx5LGdldFN0YXRpYzpnZXRTdGF0aWMscmVzb2x2ZVByb3BlcnRpZXM6cmVzb2x2ZVByb3BlcnRpZXMsc2hhbGxvd0NvcHk6c2hhbGxvd0NvcHksYXJyYXlpZnk6YXJyYXlpZnksY29uY2F0OmNvbmNhdCxzdHJpcFplcm9zOnN0cmlwWmVyb3MsemVyb1BhZDp6ZXJvUGFkLGlzQnl0ZXM6aXNCeXRlcyxpc0J5dGVzTGlrZTppc0J5dGVzTGlrZSxkZWZhdWx0UGF0aDpkZWZhdWx0UGF0aCxIRE5vZGU6SEROb2RlLFNpZ25pbmdLZXk6U2lnbmluZ0tleSxJbnRlcmZhY2U6SW50ZXJmYWNlLExvZ0Rlc2NyaXB0aW9uOkxvZ0Rlc2NyaXB0aW9uLFRyYW5zYWN0aW9uRGVzY3JpcHRpb246VHJhbnNhY3Rpb25EZXNjcmlwdGlvbixiYXNlNTg6QmFzZTU4LGJhc2U2NDppbmRleCQyLGhleGxpZnk6aGV4bGlmeSxpc0hleFN0cmluZzppc0hleFN0cmluZyxoZXhDb25jYXQ6aGV4Q29uY2F0LGhleFN0cmlwWmVyb3M6aGV4U3RyaXBaZXJvcyxoZXhWYWx1ZTpoZXhWYWx1ZSxoZXhaZXJvUGFkOmhleFplcm9QYWQsaGV4RGF0YUxlbmd0aDpoZXhEYXRhTGVuZ3RoLGhleERhdGFTbGljZTpoZXhEYXRhU2xpY2UsbmFtZXByZXA6bmFtZXByZXAsX3RvRXNjYXBlZFV0ZjhTdHJpbmc6X3RvRXNjYXBlZFV0ZjhTdHJpbmcsdG9VdGY4Qnl0ZXM6dG9VdGY4Qnl0ZXMsdG9VdGY4Q29kZVBvaW50czp0b1V0ZjhDb2RlUG9pbnRzLHRvVXRmOFN0cmluZzp0b1V0ZjhTdHJpbmcsVXRmOEVycm9yRnVuY3M6VXRmOEVycm9yRnVuY3MsZm9ybWF0Qnl0ZXMzMlN0cmluZzpmb3JtYXRCeXRlczMyU3RyaW5nLHBhcnNlQnl0ZXMzMlN0cmluZzpwYXJzZUJ5dGVzMzJTdHJpbmcsaGFzaE1lc3NhZ2U6aGFzaE1lc3NhZ2UsbmFtZWhhc2g6bmFtZWhhc2gsaXNWYWxpZE5hbWU6aXNWYWxpZE5hbWUsaWQ6aWQsX1R5cGVkRGF0YUVuY29kZXI6VHlwZWREYXRhRW5jb2RlcixnZXRBZGRyZXNzOmdldEFkZHJlc3MsZ2V0SWNhcEFkZHJlc3M6Z2V0SWNhcEFkZHJlc3MsZ2V0Q29udHJhY3RBZGRyZXNzOmdldENvbnRyYWN0QWRkcmVzcyxnZXRDcmVhdGUyQWRkcmVzczpnZXRDcmVhdGUyQWRkcmVzcyxpc0FkZHJlc3M6aXNBZGRyZXNzLGZvcm1hdEV0aGVyOmZvcm1hdEV0aGVyLHBhcnNlRXRoZXI6cGFyc2VFdGhlcixmb3JtYXRVbml0czpmb3JtYXRVbml0cyxwYXJzZVVuaXRzOnBhcnNlVW5pdHMsY29tbWlmeTpjb21taWZ5LGNvbXB1dGVIbWFjOmNvbXB1dGVIbWFjLGtlY2NhazI1NjprZWNjYWsyNTYscmlwZW1kMTYwOnJpcGVtZDE2MCQxLHNoYTI1NjpzaGEyNTYkMSxzaGE1MTI6c2hhNTEyJDEscmFuZG9tQnl0ZXM6cmFuZG9tQnl0ZXMsc2h1ZmZsZWQ6c2h1ZmZsZWQsc29saWRpdHlQYWNrOnBhY2skMSxzb2xpZGl0eUtlY2NhazI1NjprZWNjYWsyNTYkMSxzb2xpZGl0eVNoYTI1NjpzaGEyNTYkMixzcGxpdFNpZ25hdHVyZTpzcGxpdFNpZ25hdHVyZSxqb2luU2lnbmF0dXJlOmpvaW5TaWduYXR1cmUsYWNjZXNzTGlzdGlmeTphY2Nlc3NMaXN0aWZ5LHBhcnNlVHJhbnNhY3Rpb246cGFyc2Usc2VyaWFsaXplVHJhbnNhY3Rpb246c2VyaWFsaXplLGdldEpzb25XYWxsZXRBZGRyZXNzOmdldEpzb25XYWxsZXRBZGRyZXNzLGNvbXB1dGVBZGRyZXNzOmNvbXB1dGVBZGRyZXNzLHJlY292ZXJBZGRyZXNzOnJlY292ZXJBZGRyZXNzLGNvbXB1dGVQdWJsaWNLZXk6Y29tcHV0ZVB1YmxpY0tleSxyZWNvdmVyUHVibGljS2V5OnJlY292ZXJQdWJsaWNLZXksdmVyaWZ5TWVzc2FnZTp2ZXJpZnlNZXNzYWdlLHZlcmlmeVR5cGVkRGF0YTp2ZXJpZnlUeXBlZERhdGEsbW5lbW9uaWNUb0VudHJvcHk6bW5lbW9uaWNUb0VudHJvcHksZW50cm9weVRvTW5lbW9uaWM6ZW50cm9weVRvTW5lbW9uaWMsaXNWYWxpZE1uZW1vbmljOmlzVmFsaWRNbmVtb25pYyxtbmVtb25pY1RvU2VlZDptbmVtb25pY1RvU2VlZCxnZXQgU3VwcG9ydGVkQWxnb3JpdGhtKCl7cmV0dXJuIFN1cHBvcnRlZEFsZ29yaXRobX0sZ2V0IFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybSgpe3JldHVybiBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm19LGdldCBVdGY4RXJyb3JSZWFzb24oKXtyZXR1cm4gVXRmOEVycm9yUmVhc29ufSxJbmRleGVkOkluZGV4ZWR9KTtjb25zdCB2ZXJzaW9uJG89XCJldGhlcnMvNS4xLjRcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkSD1uZXcgTG9nZ2VyKHZlcnNpb24kbyk7dmFyIGV0aGVycz1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxTaWduZXI6U2lnbmVyLFdhbGxldDpXYWxsZXQsVm9pZFNpZ25lcjpWb2lkU2lnbmVyLGdldERlZmF1bHRQcm92aWRlcjpnZXREZWZhdWx0UHJvdmlkZXIscHJvdmlkZXJzOmluZGV4JDMsQmFzZUNvbnRyYWN0OkJhc2VDb250cmFjdCxDb250cmFjdDpDb250cmFjdCxDb250cmFjdEZhY3Rvcnk6Q29udHJhY3RGYWN0b3J5LEJpZ051bWJlcjpCaWdOdW1iZXIsRml4ZWROdW1iZXI6Rml4ZWROdW1iZXIsY29uc3RhbnRzOmluZGV4JDEsZ2V0IGVycm9ycygpe3JldHVybiBFcnJvckNvZGV9LGxvZ2dlcjpsb2dnZXIkSCx1dGlsczp1dGlscyQxLHdvcmRsaXN0czp3b3JkbGlzdHMsdmVyc2lvbjp2ZXJzaW9uJG8sV29yZGxpc3Q6V29yZGxpc3R9KTtcInVzZSBzdHJpY3RcIjt0cnl7Y29uc3QgYW55R2xvYmFsPXdpbmRvdztpZihhbnlHbG9iYWwuX2V0aGVycz09bnVsbCl7YW55R2xvYmFsLl9ldGhlcnM9ZXRoZXJzfX1jYXRjaChlcnJvcil7fWV4cG9ydHtCYXNlQ29udHJhY3QsQmlnTnVtYmVyLENvbnRyYWN0LENvbnRyYWN0RmFjdG9yeSxGaXhlZE51bWJlcixTaWduZXIsVm9pZFNpZ25lcixXYWxsZXQsV29yZGxpc3QsaW5kZXgkMSBhcyBjb25zdGFudHMsRXJyb3JDb2RlIGFzIGVycm9ycyxldGhlcnMsZ2V0RGVmYXVsdFByb3ZpZGVyLGxvZ2dlciRIIGFzIGxvZ2dlcixpbmRleCQzIGFzIHByb3ZpZGVycyx1dGlscyQxIGFzIHV0aWxzLHZlcnNpb24kbyBhcyB2ZXJzaW9uLHdvcmRsaXN0c307XG4iLCAiaW1wb3J0IHtldGhlcnN9IGZyb20gXCIuLi8uLi92ZW5kb3IvZXRoZXJzXCJcblxuY29uc3Qgd2ViM1Byb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuV2ViM1Byb3ZpZGVyKHdpbmRvdy5ldGhlcmV1bSlcblxuZXhwb3J0IGNvbnN0IE1ldGFtYXNrID0ge1xuICAgIG1vdW50ZWQoKSB7XG4gICAgICAgIGxldCBzaWduZXIgPSB3ZWIzUHJvdmlkZXIuZ2V0U2lnbmVyKClcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHdlYjNQcm92aWRlci5saXN0QWNjb3VudHMoKS50aGVuKChhY2NvdW50cykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhY2NvdW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25lciA9IHdlYjNQcm92aWRlci5nZXRTaWduZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmVyLmdldEFkZHJlc3MoKS50aGVuKChhZGRyZXNzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2hFdmVudChcImFjY291bnQtY2hlY2tcIiwge2Nvbm5lY3RlZDogdHJ1ZSwgY3VycmVudF93YWxsZXRfYWRkcmVzczogYWRkcmVzc30pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoRXZlbnQoXCJhY2NvdW50LWNoZWNrXCIsIHtjb25uZWN0ZWQ6IGZhbHNlLCBjdXJyZW50X3dhbGxldF9hZGRyZXNzOiBudWxsfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGBwaHg6Z2V0LWN1cnJlbnQtd2FsbGV0YCwgKGUpID0+IHtcbiAgICAgICAgICAgIHNpZ25lci5nZXRBZGRyZXNzKCkudGhlbigoYWRkcmVzcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgWW91IGFyZSBzaWduaW5nIHRoaXMgbWVzc2FnZSB0byBzaWduIGluIHdpdGggRG9yYS4gTm9uY2U6ICR7ZS5kZXRhaWwubm9uY2V9YFxuXG4gICAgICAgICAgICAgICAgc2lnbmVyLnNpZ25NZXNzYWdlKG1lc3NhZ2UpLnRoZW4oKHNpZ25hdHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2hFdmVudChcInZlcmlmeS1zaWduYXR1cmVcIiwge3B1YmxpY19hZGRyZXNzOiBhZGRyZXNzLCBzaWduYXR1cmU6IHNpZ25hdHVyZX0pXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGBwaHg6Y29ubmVjdC1tZXRhbWFza2AsIChlKSA9PiB7XG4gICAgICAgICAgICB3ZWIzUHJvdmlkZXIucHJvdmlkZXIucmVxdWVzdCh7bWV0aG9kOiAnZXRoX3JlcXVlc3RBY2NvdW50cyd9KS50aGVuKChhY2NvdW50cykgPT4ge1xuICAgICAgICAgICAgICBpZiAoYWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNpZ25lci5nZXRBZGRyZXNzKCkudGhlbigoYWRkcmVzcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2hFdmVudChcIndhbGxldC1jb25uZWN0ZWRcIiwge3B1YmxpY19hZGRyZXNzOiBhZGRyZXNzfSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiBjb25zb2xlLmxvZyhlcnJvcikpXG4gICAgICAgIH0pXG4gICAgfSxcbn1c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QUFFLEtBQUc7QUFBQSxVQUFFLFdBQVMsS0FBRyxJQUFHO0FBQUMsa0JBQUcsSUFBRSxLQUFHO0FBQUEsVUFBRSxPQUFLO0FBQUMsa0JBQUc7QUFBQSxVQUFDO0FBQUEsUUFBQztBQUFDLGVBQU87QUFBQSxNQUFDO0FBQUMsVUFBRyxVQUFVLGFBQVcsb0JBQW9CLFFBQU8sT0FBSyxPQUFNO0FBQUMsYUFBSyxRQUFNLENBQUMsQ0FBQztBQUFFLGFBQUssU0FBTztBQUFFLGlCQUFRLFVBQVEsR0FBRSxVQUFRLEdBQUUsV0FBUyxVQUFTLFdBQVMsT0FBSztBQUFDO0FBQUEsUUFBUztBQUFDO0FBQVUsa0JBQVEsVUFBUSxRQUFLO0FBQUUsWUFBSSxRQUFNLE9BQU8sU0FBTztBQUFNLFlBQUksTUFBSSxRQUFNO0FBQVEsWUFBSSxNQUFJLEtBQUssSUFBSSxPQUFNLFFBQU0sR0FBRyxJQUFFO0FBQU0sWUFBSSxPQUFLO0FBQUUsaUJBQVEsSUFBRSxPQUFNLElBQUUsS0FBSSxLQUFHLFNBQVE7QUFBQyxpQkFBSyxVQUFVLFFBQU8sR0FBRSxJQUFFLFNBQVEsS0FBSTtBQUFFLGVBQUssTUFBTSxPQUFPO0FBQUUsY0FBRyxLQUFLLE1BQU0sS0FBRyxPQUFLLFVBQVM7QUFBQyxpQkFBSyxNQUFNLE1BQUk7QUFBQSxVQUFJLE9BQUs7QUFBQyxpQkFBSyxPQUFPLElBQUk7QUFBQSxVQUFDO0FBQUEsUUFBQztBQUFDLFlBQUcsUUFBTSxHQUFFO0FBQUMsY0FBSSxNQUFJO0FBQUUsaUJBQUssVUFBVSxRQUFPLEdBQUUsT0FBTyxRQUFPLEtBQUk7QUFBRSxlQUFJLElBQUUsR0FBRSxJQUFFLEtBQUksS0FBSTtBQUFDLG1CQUFLO0FBQUEsVUFBSTtBQUFDLGVBQUssTUFBTSxHQUFHO0FBQUUsY0FBRyxLQUFLLE1BQU0sS0FBRyxPQUFLLFVBQVM7QUFBQyxpQkFBSyxNQUFNLE1BQUk7QUFBQSxVQUFJLE9BQUs7QUFBQyxpQkFBSyxPQUFPLElBQUk7QUFBQSxVQUFDO0FBQUEsUUFBQztBQUFDLGFBQUssTUFBTTtBQUFBLE1B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STtBQUFPLGlCQUFPLEtBQUssTUFBTSxFQUFFLEtBQUssR0FBRztBQUFFLGVBQU8sSUFBSSxNQUFNLEVBQUUsS0FBSyxJQUFJO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxRQUFNLGVBQWUsS0FBSTtBQUFDLFlBQUk7QUFBRSxZQUFHLEtBQUssU0FBTyxJQUFJLFFBQU87QUFBQyxjQUFFO0FBQUEsUUFBRyxPQUFLO0FBQUMsY0FBRTtBQUFBLFFBQUk7QUFBQyxpQkFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLGVBQUssTUFBTSxLQUFHLEtBQUssTUFBTSxLQUFHLElBQUksTUFBTTtBQUFBLFFBQUU7QUFBQyxhQUFLLFNBQU8sRUFBRTtBQUFPLGVBQU8sS0FBSyxNQUFNO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxPQUFLLGNBQWMsS0FBSTtBQUFDLGdCQUFRLE1BQUssV0FBUyxJQUFJLGNBQVksQ0FBQztBQUFFLGVBQU8sS0FBSyxNQUFNLEdBQUc7QUFBQSxNQUFDO0FBQUUsVUFBRyxVQUFVLE1BQUksYUFBYSxLQUFJO0FBQUMsWUFBRyxLQUFLLFNBQU8sSUFBSTtBQUFPLGlCQUFPLEtBQUssTUFBTSxFQUFFLEtBQUssR0FBRztBQUFFLGVBQU8sSUFBSSxNQUFNLEVBQUUsS0FBSyxJQUFJO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxPQUFLLGNBQWMsS0FBSTtBQUFDLFlBQUcsS0FBSyxTQUFPLElBQUk7QUFBTyxpQkFBTyxLQUFLLE1BQU0sRUFBRSxNQUFNLEdBQUc7QUFBRSxlQUFPLElBQUksTUFBTSxFQUFFLE1BQU0sSUFBSTtBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsUUFBTSxlQUFlLEtBQUk7QUFBQyxZQUFJO0FBQUUsWUFBSTtBQUFFLFlBQUcsS0FBSyxTQUFPLElBQUksUUFBTztBQUFDLGNBQUU7QUFBSyxjQUFFO0FBQUEsUUFBRyxPQUFLO0FBQUMsY0FBRTtBQUFJLGNBQUU7QUFBQSxRQUFJO0FBQUMsaUJBQVEsSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPLEtBQUk7QUFBQyxlQUFLLE1BQU0sS0FBRyxFQUFFLE1BQU0sS0FBRyxFQUFFLE1BQU07QUFBQSxRQUFFO0FBQUMsWUFBRyxTQUFPLEdBQUU7QUFBQyxpQkFBSyxJQUFFLEVBQUUsUUFBTyxLQUFJO0FBQUMsaUJBQUssTUFBTSxLQUFHLEVBQUUsTUFBTTtBQUFBLFVBQUU7QUFBQSxRQUFDO0FBQUMsYUFBSyxTQUFPLEVBQUU7QUFBTyxlQUFPLEtBQUssTUFBTTtBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsT0FBSyxjQUFjLEtBQUk7QUFBQyxnQkFBUSxNQUFLLFdBQVMsSUFBSSxjQUFZLENBQUM7QUFBRSxlQUFPLEtBQUssTUFBTSxHQUFHO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxNQUFJLGFBQWEsS0FBSTtBQUFDLFlBQUcsS0FBSyxTQUFPLElBQUk7QUFBTyxpQkFBTyxLQUFLLE1BQU0sRUFBRSxLQUFLLEdBQUc7QUFBRSxlQUFPLElBQUksTUFBTSxFQUFFLEtBQUssSUFBSTtBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsT0FBSyxjQUFjLEtBQUk7QUFBQyxZQUFHLEtBQUssU0FBTyxJQUFJO0FBQU8saUJBQU8sS0FBSyxNQUFNLEVBQUUsTUFBTSxHQUFHO0FBQUUsZUFBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLElBQUk7QUFBQSxNQUFDO0FBQUUsVUFBRyxVQUFVLFFBQU0sZUFBZSxPQUFNO0FBQUMsZ0JBQU8sT0FBTyxVQUFRLFlBQVUsU0FBTyxDQUFDO0FBQUUsWUFBSSxjQUFZLEtBQUssS0FBSyxRQUFNLEVBQUUsSUFBRTtBQUFFLFlBQUksV0FBUyxRQUFNO0FBQUcsYUFBSyxRQUFRLFdBQVc7QUFBRSxZQUFHLFdBQVMsR0FBRTtBQUFDO0FBQUEsUUFBYTtBQUFDLGlCQUFRLElBQUUsR0FBRSxJQUFFLGFBQVksS0FBSTtBQUFDLGVBQUssTUFBTSxLQUFHLENBQUMsS0FBSyxNQUFNLEtBQUc7QUFBQSxRQUFRO0FBQUMsWUFBRyxXQUFTLEdBQUU7QUFBQyxlQUFLLE1BQU0sS0FBRyxDQUFDLEtBQUssTUFBTSxLQUFHLFlBQVUsS0FBRztBQUFBLFFBQVE7QUFBQyxlQUFPLEtBQUssTUFBTTtBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsT0FBSyxjQUFjLE9BQU07QUFBQyxlQUFPLEtBQUssTUFBTSxFQUFFLE1BQU0sS0FBSztBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsT0FBSyxjQUFjLEtBQUksS0FBSTtBQUFDLGdCQUFPLE9BQU8sUUFBTSxZQUFVLE9BQUssQ0FBQztBQUFFLFlBQUksTUFBSSxNQUFJLEtBQUc7QUFBRSxZQUFJLE9BQUssTUFBSTtBQUFHLGFBQUssUUFBUSxNQUFJLENBQUM7QUFBRSxZQUFHLEtBQUk7QUFBQyxlQUFLLE1BQU0sT0FBSyxLQUFLLE1BQU0sT0FBSyxLQUFHO0FBQUEsUUFBSSxPQUFLO0FBQUMsZUFBSyxNQUFNLE9BQUssS0FBSyxNQUFNLE9BQUssQ0FBRSxNQUFHO0FBQUEsUUFBSztBQUFDLGVBQU8sS0FBSyxNQUFNO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxPQUFLLGNBQWMsS0FBSTtBQUFDLFlBQUk7QUFBRSxZQUFHLEtBQUssYUFBVyxLQUFHLElBQUksYUFBVyxHQUFFO0FBQUMsZUFBSyxXQUFTO0FBQUUsZUFBRSxLQUFLLEtBQUssR0FBRztBQUFFLGVBQUssWUFBVTtBQUFFLGlCQUFPLEtBQUssVUFBVTtBQUFBLFFBQUMsV0FBUyxLQUFLLGFBQVcsS0FBRyxJQUFJLGFBQVcsR0FBRTtBQUFDLGNBQUksV0FBUztBQUFFLGVBQUUsS0FBSyxLQUFLLEdBQUc7QUFBRSxjQUFJLFdBQVM7QUFBRSxpQkFBTyxHQUFFLFVBQVU7QUFBQSxRQUFDO0FBQUMsWUFBSSxHQUFFO0FBQUUsWUFBRyxLQUFLLFNBQU8sSUFBSSxRQUFPO0FBQUMsY0FBRTtBQUFLLGNBQUU7QUFBQSxRQUFHLE9BQUs7QUFBQyxjQUFFO0FBQUksY0FBRTtBQUFBLFFBQUk7QUFBQyxZQUFJLFFBQU07QUFBRSxpQkFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLGVBQUcsR0FBRSxN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QUFJLElBQUUsSUFBSTtBQUFNLFlBQUksSUFBRTtBQUFFLFlBQUk7QUFBRyxZQUFJO0FBQUksWUFBSTtBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLEtBQUcsRUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEtBQUc7QUFBSyxZQUFJLE1BQUksT0FBSztBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLEtBQUcsRUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEtBQUc7QUFBSyxZQUFJLE1BQUksT0FBSztBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLEtBQUcsRUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEtBQUc7QUFBSyxZQUFJLE1BQUksT0FBSztBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLEtBQUcsRUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEtBQUc7QUFBSyxZQUFJLE1BQUksT0FBSztBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLEtBQUcsRUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEtBQUc7QUFBSyxZQUFJLE1BQUksT0FBSztBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLEtBQUcsRUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEtBQUc7QUFBSyxZQUFJLE1BQUksT0FBSztBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLFdBQVMsTUFBSyxXQUFTLElBQUk7QUFBUyxZQUFJLFNBQU87QUFBRyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLFlBQUksS0FBSSxLQUFFLEtBQUcsS0FBSyxRQUFJLFNBQU8sTUFBSTtBQUFFLFlBQUcsTUFBSSxTQUFNLE1BQUksS0FBSSxRQUFLLE1BQUk7QUFBRSxjQUFJO0FBQVMsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLFlBQUksS0FBSSxLQUFFLEtBQUcsS0FBSyxRQUFJLFNBQU8sTUFBSTtBQUFFLFlBQUcsTUFBSSxTQUFNLE1BQUksS0FBSSxRQUFLLE1BQUk7QUFBRSxjQUFJO0FBQVMsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLFlBQUksS0FBSSxLQUFFLEtBQUcsS0FBSyxRQUFJLFNBQU8sTUFBSTtBQUFFLFlBQUcsTUFBSSxTQUFNLE1BQUksS0FBSSxRQUFLLE1BQUk7QUFBRSxjQUFJO0FBQVMsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxZQUFJLE1BQUssS0FBRSxLQUFHLEtBQUssUUFBSSxTQUFPLE1BQUk7QUFBRSxZQUFHLE1BQUksU0FBTSxNQUFJLEtBQUksU0FBTSxNQUFJO0FBQUUsZUFBSztBQUFTLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxZQUFJLE1BQUssS0FBRSxLQUFHLEtBQUssUUFBSSxTQUFPLE1BQUk7QUFBRSxZQUFHLE1BQUksU0FBTSxNQUFJLEtBQUksU0FBTSxNQUFJO0FBQUUsZUFBSztBQUFTLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxZQUFJLE1BQUssS0FBRSxLQUFHLEtBQUssUUFBSSxTQUFPLE1BQUk7QUFBRSxZQUFHLE1BQUksU0FBTSxNQUFJLEtBQUksU0FBTSxNQUFJO0FBQUUsZUFBSztBQUFTLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxVQUFFLEtBQUc7QUFBRyxVQUFFLEtBQUc7QUFBRyxVQUFFLEtBQUc7QUFBRyxVQUFFLEtBQUc7QUFBRyxVQUFFLEtBQUc7QUFBRyxVQUFFLEtBQUc7QUFBRyxVQUFFLEtBQUc7QUFBRyxVQUFFLEtBQUc7QUFBRyxVQUFFLEtBQUc7QUFBRyxVQUFFLEtBQUc7QUFBRyxVQUFFLE1BQUk7QUFBSSxVQUFFLE1BQUk7QUFBSSxVQUFFLE1BQUk7QUFBSSxVQUFFLE1BQUk7QUFBSSxVQUFFLE1BQUk7QUFBSSxVQUFFLE1BQUk7QUFBSSxVQUFFLE1BQUk7QUFBSSxV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QUssVUFBVSxLQUFJLEdBQUUsTUFBSyxNQUFLLElBQUUsR0FBRztBQUFFLGFBQUssVUFBVSxNQUFLLEdBQUUsT0FBTSxPQUFNLElBQUUsR0FBRztBQUFFLGlCQUFRLElBQUUsR0FBRSxJQUFFLElBQUUsS0FBSTtBQUFDLGNBQUksS0FBRyxLQUFLLEtBQUcsTUFBTSxLQUFHLEtBQUssS0FBRyxNQUFNO0FBQUcsZUFBSyxLQUFHLEtBQUssS0FBRyxNQUFNLEtBQUcsS0FBSyxLQUFHLE1BQU07QUFBRyxlQUFLLEtBQUc7QUFBQSxRQUFFO0FBQUMsYUFBSyxVQUFVLE1BQUssTUFBSyxFQUFDO0FBQUUsYUFBSyxVQUFVLE1BQUssTUFBSyxNQUFLLEdBQUUsSUFBRSxHQUFHO0FBQUUsYUFBSyxVQUFVLE1BQUssR0FBRSxFQUFDO0FBQUUsYUFBSyxhQUFhLE1BQUssRUFBQztBQUFFLFlBQUksV0FBUyxFQUFFLFdBQVMsRUFBRTtBQUFTLFlBQUksU0FBTyxFQUFFLFNBQU8sRUFBRTtBQUFPLGVBQU8sSUFBSSxNQUFNO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxNQUFJLGNBQWEsS0FBSTtBQUFDLFlBQUksTUFBSSxJQUFJLElBQUcsSUFBSTtBQUFFLFlBQUksUUFBTSxJQUFJLE1BQU0sS0FBSyxTQUFPLElBQUksTUFBTTtBQUFFLGVBQU8sS0FBSyxNQUFNLEtBQUksR0FBRztBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsT0FBSyxjQUFjLEtBQUk7QUFBQyxZQUFJLE1BQUksSUFBSSxJQUFHLElBQUk7QUFBRSxZQUFJLFFBQU0sSUFBSSxNQUFNLEtBQUssU0FBTyxJQUFJLE1BQU07QUFBRSxlQUFPLFdBQVcsTUFBSyxLQUFJLEdBQUc7QUFBQSxNQUFDO0FBQUUsVUFBRyxVQUFVLE9BQUssY0FBYyxLQUFJO0FBQUMsZUFBTyxLQUFLLE1BQU0sRUFBRSxNQUFNLEtBQUksSUFBSTtBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsUUFBTSxlQUFlLEtBQUk7QUFBQyxnQkFBTyxPQUFPLFFBQU0sUUFBUTtBQUFFLGdCQUFP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QUk7QUFBTyxpQkFBTztBQUFFLFlBQUcsS0FBSyxTQUFPLElBQUk7QUFBTyxpQkFBTTtBQUFHLFlBQUksTUFBSTtBQUFFLGlCQUFRLElBQUUsS0FBSyxTQUFPLEdBQUUsS0FBRyxHQUFFLEtBQUk7QUFBQyxjQUFJLElBQUUsS0FBSyxNQUFNLEtBQUc7QUFBRSxjQUFJLElBQUUsSUFBSSxNQUFNLEtBQUc7QUFBRSxjQUFHLE1BQUk7QUFBRTtBQUFTLGNBQUcsSUFBRSxHQUFFO0FBQUMsa0JBQUk7QUFBQSxVQUFFLFdBQVMsSUFBRSxHQUFFO0FBQUMsa0JBQUk7QUFBQSxVQUFDO0FBQUM7QUFBQSxRQUFLO0FBQUMsZUFBTztBQUFBLE1BQUc7QUFBRSxVQUFHLFVBQVUsTUFBSSxhQUFhLEtBQUk7QUFBQyxlQUFPLEtBQUssS0FBSyxHQUFHLE1BQUk7QUFBQSxNQUFDO0FBQUUsVUFBRyxVQUFVLEtBQUcsWUFBWSxLQUFJO0FBQUMsZUFBTyxLQUFLLElBQUksR0FBRyxNQUFJO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxPQUFLLGNBQWMsS0FBSTtBQUFDLGVBQU8sS0FBSyxLQUFLLEdBQUcsS0FBRztBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsTUFBSSxhQUFhLEtBQUk7QUFBQyxlQUFPLEtBQUssSUFBSSxHQUFHLEtBQUc7QUFBQSxNQUFDO0FBQUUsVUFBRyxVQUFVLE1BQUksYUFBYSxLQUFJO0FBQUMsZUFBTyxLQUFLLEtBQUssR0FBRyxNQUFJO0FBQUEsTUFBRTtBQUFFLFVBQUcsVUFBVSxLQUFHLFlBQVksS0FBSTtBQUFDLGVBQU8sS0FBSyxJQUFJLEdBQUcsTUFBSTtBQUFBLE1BQUU7QUFBRSxVQUFHLFVBQVUsT0FBSyxjQUFjLEtBQUk7QUFBQyxlQUFPLEtBQUssS0FBSyxHQUFHLEtBQUc7QUFBQSxNQUFDO0FBQUUsVUFBRyxVQUFVLE1BQUksYUFBYSxLQUFJO0FBQUMsZUFBTyxLQUFLLElBQUksR0FBRyxLQUFHO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxNQUFJLGFBQWEsS0FBSTtBQUFDLGVB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QUFBLFFBQUM7QUFBQyxlQUFPLElBQUksVUFBVSxJQUFJO0FBQUEsTUFBQztBQUFFLFVBQUksVUFBVSxPQUFLLGNBQWMsR0FBRSxHQUFFO0FBQUMsYUFBSyxTQUFTLEdBQUUsQ0FBQztBQUFFLFlBQUksTUFBSSxFQUFFLEtBQUssQ0FBQztBQUFFLFlBQUcsSUFBSSxLQUFLLENBQUMsSUFBRSxHQUFFO0FBQUMsY0FBSSxLQUFLLEtBQUssQ0FBQztBQUFBLFFBQUM7QUFBQyxlQUFPO0FBQUEsTUFBRztBQUFFLFVBQUksVUFBVSxNQUFJLGFBQWEsR0FBRSxLQUFJO0FBQUMsYUFBSyxTQUFTLENBQUM7QUFBRSxlQUFPLEtBQUssS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFBQztBQUFFLFVBQUksVUFBVSxPQUFLLGNBQWMsR0FBRSxHQUFFO0FBQUMsYUFBSyxTQUFTLEdBQUUsQ0FBQztBQUFFLGVBQU8sS0FBSyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFBQSxNQUFDO0FBQUUsVUFBSSxVQUFVLE1BQUksY0FBYSxHQUFFLEdBQUU7QUFBQyxhQUFLLFNBQVMsR0FBRSxDQUFDO0FBQUUsZUFBTyxLQUFLLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBRSxVQUFJLFVBQVUsT0FBSyxjQUFjLEdBQUU7QUFBQyxlQUFPLEtBQUssS0FBSyxHQUFFLEVBQUUsTUFBTSxDQUFDO0FBQUEsTUFBQztBQUFFLFVBQUksVUFBVSxNQUFJLGFBQWEsR0FBRTtBQUFDLGVBQU8sS0FBSyxJQUFJLEdBQUUsQ0FBQztBQUFBLE1BQUM7QUFBRSxVQUFJLFVBQVUsT0FBSyxjQUFjLEdBQUU7QUFBQyxZQUFHLEVBQUUsT0FBTztBQUFFLGlCQUFPLEVBQUUsTUFBTTtBQUFFLFlBQUksT0FBSyxLQUFLLEVBQUUsTUFBTSxDQUFDO0FBQUUsZ0JBQU8sT0FBSyxNQUFJLENBQUM7QUFBRSxZQUFHLFNBQU8sR0FBRTtBQUFDLGNBQUksTUFBSSxLQUFLLEVBQUUsSUFBSSxJQUFJLElBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDO0FBQUUsaUJBQU8sS0FBSyxJQUFJLEdBQUUsR0FBRztBQUFBLFFBQUM7QUFBQyxZQUFJLElBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztBQUFFLFlBQUksS0FBRTtBQUFFLGVBQU0sQ0FBQyxFQUFFLE9BQU8sS0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFJLEdBQUU7QUFBQztBQUFJLFlBQUUsT0FBTyxDQUFDO0FBQUEsUUFBQztBQUFDLGdCQUFPLENBQUMsRUFBRSxPQUFPLENBQUM7QUFBRSxZQUFJLE1BQUksSUFBSSxJQUFHLENBQUMsRUFBRSxNQUFNLElBQUk7QUFBRSxZQUFJLE9BQUssSUFBSSxPQUFPO0FBQUUsWUFBSSxPQUFLLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUM7QUFBRSxZQUFJLElBQUUsS0FBSyxFQUFFLFVBQVU7QUFBRSxZQUFFLElBQUksSUFBRyxJQUFFLElBQUUsQ0FBQyxFQUFFLE1BQU0sSUFBSTtBQUFFLGVBQU0sS0FBSyxJQUFJLEdBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxNQUFJLEdBQUU7QUFBQyxZQUFFLFFBQVEsSUFBSTtBQUFBLFFBQUM7QUFBQyxZQUFJLElBQUUsS0FBSyxJQUFJLEdBQUUsQ0FBQztBQUFFLFlBQUksS0FBRSxLQUFLLElBQUksR0FBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQUUsWUFBSSxJQUFFLEtBQUssSUFBSSxHQUFFLENBQUM7QUFBRSxZQUFJLElBQUU7QUFBRSxlQUFNLEVBQUUsSUFBSSxHQUFHLE1BQUksR0FBRTtBQUFDLGNBQUksTUFBSTtBQUFFLG1CQUFRLElBQUUsR0FBRSxJQUFJLElBQUksR0FBRyxNQUFJLEdBQUUsS0FBSTtBQUFDLGtCQUFJLElBQUksT0FBTztBQUFBLFVBQUM7QUFBQyxrQkFBTyxJQUFFLENBQUM7QUFBRSxjQUFJLElBQUUsS0FBSyxJQUFJLEdBQUUsSUFBSSxJQUFHLENBQUMsRUFBRSxPQUFPLElBQUUsSUFBRSxDQUFDLENBQUM7QUFBRSxlQUFF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Q0FBQyxFQUFFLElBQUksS0FBSyxDQUFDO0FBQUUsYUFBSyxPQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssQ0FBQztBQUFFLGFBQUssT0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLElBQUk7QUFBQSxNQUFDO0FBQUMsZ0JBQVMsTUFBSyxHQUFHO0FBQUUsV0FBSyxVQUFVLFlBQVUsbUJBQW1CLEtBQUk7QUFBQyxlQUFPLEtBQUssS0FBSyxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFBQSxNQUFDO0FBQUUsV0FBSyxVQUFVLGNBQVkscUJBQXFCLEtBQUk7QUFBQyxZQUFJLEtBQUUsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQztBQUFFLFdBQUUsTUFBSTtBQUFLLGVBQU87QUFBQSxNQUFDO0FBQUUsV0FBSyxVQUFVLE9BQUssY0FBYyxHQUFFLEdBQUU7QUFBQyxZQUFHLEVBQUUsT0FBTyxLQUFHLEVBQUUsT0FBTyxHQUFFO0FBQUMsWUFBRSxNQUFNLEtBQUc7QUFBRSxZQUFFLFNBQU87QUFBRSxpQkFBTztBQUFBLFFBQUM7QUFBQyxZQUFJLElBQUUsRUFBRSxLQUFLLENBQUM7QUFBRSxZQUFJLElBQUUsRUFBRSxNQUFNLEtBQUssS0FBSyxFQUFFLElBQUksS0FBSyxJQUFJLEVBQUUsT0FBTyxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssQ0FBQztBQUFFLFlBQUksSUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sS0FBSyxLQUFLO0FBQUUsWUFBSSxNQUFJO0FBQUUsWUFBRyxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUcsR0FBRTtBQUFDLGdCQUFJLEVBQUUsS0FBSyxLQUFLLENBQUM7QUFBQSxRQUFDLFdBQVMsRUFBRSxLQUFLLENBQUMsSUFBRSxHQUFFO0FBQUMsZ0JBQUksRUFBRSxLQUFLLEtBQUssQ0FBQztBQUFBLFFBQUM7QUFBQyxlQUFPLElBQUksVUFBVSxJQUFJO0FBQUEsTUFBQztBQUFFLFdBQUssVUFBVSxNQUFJLGNBQWEsR0FBRSxHQUFFO0FBQUMsWUFBRyxFQUFFLE9B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QSxJQUFDLFVBQVUsT0FBTTtBQUFDLFdBQUssYUFBYSxLQUFLO0FBQUUsWUFBTSxJQUFFLFdBQVcsS0FBSyxRQUFPLEtBQUssT0FBTyxRQUFRO0FBQUUsWUFBTSxJQUFFLFdBQVcsTUFBTSxRQUFPLE1BQU0sT0FBTyxRQUFRO0FBQUUsYUFBTyxZQUFZLFVBQVUsRUFBRSxJQUFJLENBQUMsR0FBRSxLQUFLLE9BQU8sVUFBUyxLQUFLLE1BQU07QUFBQSxJQUFDO0FBQUEsSUFBQyxVQUFVLE9BQU07QUFBQyxXQUFLLGFBQWEsS0FBSztBQUFFLFlBQU0sSUFBRSxXQUFXLEtBQUssUUFBTyxLQUFLLE9BQU8sUUFBUTtBQUFFLFlBQU0sSUFBRSxXQUFXLE1BQU0sUUFBTyxNQUFNLE9BQU8sUUFBUTtBQUFFLGFBQU8sWUFBWSxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLE9BQU8sV0FBVyxHQUFFLEtBQUssT0FBTyxVQUFTLEtBQUssTUFBTTtBQUFBLElBQUM7QUFBQSxJQUFDLFVBQVUsT0FBTTtBQUFDLFdBQUssYUFBYSxLQUFLO0FBQUUsWUFBTSxJQUFFLFdBQVcsS0FBSyxRQUFPLEtBQUssT0FBTyxRQUFRO0FBQUUsWUFBTSxJQUFFLFdBQVcsTUFBTSxRQUFPLE1BQU0sT0FBTyxRQUFRO0FBQUUsYUFBTyxZQUFZLFVBQVUsRUFBRSxJQUFJLEtBQUssT0FBTyxXQUFXLEVBQUUsSUFBSSxDQUFDLEdBQUUsS0FBSyxPQUFPLFVBQVMsS0FBSyxNQUFNO0FBQUEsSUFBQztBQUFBLElBQUMsUUFBTztBQUFDLFVBQUksUUFBTSxLQUFLLFNBQVMsRUFBRSxNQUFNLEdBQUc7QUFBRSxVQUFJLFNBQU8sWUFBWSxLQUFLLE1BQU0sSUFBRyxLQUFLLE1BQU07QUFBRSxZQUFNLGNBQVksQ0FBQyxNQUFNLEdBQUcsTUFBTSxRQUFRO0FBQUUsVUFBRyxLQUFLLFdBQVcsS0FBRyxhQUFZO0FBQUMsaUJBQU8sT0FBTyxVQUFVLEdBQUc7QUFBQSxNQUFDO0FBQUMsYUFBTztBQUFBLElBQU07QUFBQSxJQUFDLFVBQVM7QUFBQyxVQUFJLFFBQU0sS0FBSyxTQUFTLEVBQUUsTUFBTSxHQUFHO0FBQUUsVUFBSSxTQUFPLFlBQVksS0FBSyxNQUFNLElBQUcsS0FBSyxNQUFNO0FBQUUsWUFBTSxjQUFZLENBQUMsTUFBTSxHQUFHLE1BQU0sUUFBUTtBQUFFLFVBQUcsQ0FBQyxLQUFLLFdBQVcsS0FBRyxhQUFZO0FBQUMsaUJBQU8sT0FBTyxVQUFVLEdBQUc7QUFBQSxNQUFDO0FBQUMsYUFBTztBQUFBLElBQU07QUFBQSxJQUFDLE1BQU0sVUFBUztBQUFDLFVBQUcsWUFBVSxNQUFLO0FBQUMsbUJBQVM7QUFBQSxNQUFDO0FBQUMsVUFBSSxRQUFNLEtBQUssU0FBUyxFQUFFLE1BQU0sR0FBRztBQUFFLFVBQUcsV0FBUyxLQUFHLFdBQVMsTUFBSSxXQUFTLEdBQUU7QUFBQyxpQkFBUyxtQkFBbUIseUJBQXdCLFlBQVcsUUFBUTtBQUFBLE1BQUM7QUFBQyxVQUFHLE1BQU0sR0FBRyxVQUFRLFVBQVM7QUFBQyxlQUFPO0FBQUEsTUFBSTtBQUFDLFlBQU0sU0FBTyxZQUFZLEtBQUssTUFBSSxNQUFNLFVBQVUsR0FBRSxRQUFRLENBQUM7QUFBRSxhQUFPLEtBQUssVUFBVSxNQUFNLEVBQUUsVUFBVSxJQUFJLEVBQUUsTUFBTSxFQUFFLFVBQVUsTUFBTTtBQUFBLElBQUM7QUFBQSxJQUFDLFNBQVE7QUFBQyxhQUFPLEtBQUssV0FBUztBQUFBLElBQUs7QUFBQSxJQUFDLGFBQVk7QUFBQyxhQUFPLEtBQUssT0FBTyxPQUFLO0FBQUEsSUFBRztBQUFBLElBQUMsV0FBVTtBQUFDLGFBQU8sS0FBSztBQUFBLElBQU07QUFBQSxJQUFDLFlBQVksT0FBTTtBQUFDLFVBQUcsU0FBTyxNQUFLO0FBQUMsZUFBTyxLQUFLO0FBQUEsTUFBSTtBQUFDLFVBQUcsUUFBTSxHQUFFO0FBQUMsaUJBQVMsbUJBQW1CLHNCQUFxQixTQUFRLEtBQUs7QUFBQSxNQUFDO0FBQUMsWUFBTSxPQUFJLFVBQVUsS0FBSyxLQUFLLElBQUksRUFBRSxTQUFTLEtBQUssT0FBTyxLQUFLLEVBQUUsT0FBTyxLQUFLLEVBQUUsWUFBWTtBQUFFLGFBQU8sV0FBVyxNQUFJLFFBQU0sQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLGdCQUFlO0FBQUMsYUFBTyxXQUFXLEtBQUssU0FBUyxDQUFDO0FBQUEsSUFBQztBQUFBLElBQUMsU0FBUyxRQUFPO0FBQUMsYUFBTyxZQUFZLFdBQVcsS0FBSyxRQUFPLE1BQU07QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFVBQVUsT0FBTSxVQUFTLFFBQU87QUFBQyxVQUFHLFVBQVEsUUFBTSxZQUFVLFFBQU0sQ0FBQyxlQUFlLFFBQVEsR0FBRTtBQUFDLGlCQUFPO0FBQVMsbUJBQVM7QUFBQSxNQUFJO0FBQUMsVUFBRyxZQUFVLE1BQUs7QUFBQyxtQkFBUztBQUFBLE1BQUM7QUFBQyxVQUFHLFVBQVEsTUFBSztBQUFDLGlCQUFPO0FBQUEsTUFBTztBQUFDLGFBQU8sWUFBWSxXQUFXLFlBQVksT0FBTSxRQUFRLEdBQUUsWUFBWSxLQUFLLE1BQU0sQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sV0FBVyxPQUFNLFFBQU87QUFBQyxVQUFHLFVBQVEsTUFBSztBQUFDLGlCQUFPO0FBQUEsTUFBTztBQUFDLFlBQU0sY0FBWSxZQUFZLEtBQUssTUFBTTtBQUFFLFlBQU0sVUFBUSxXQUFXLE9BQU0sWUFBWSxRQUFRO0FBQUUsVUFBRyxDQUFDLFlBQVksVUFBUSxRQUFRLEdBQUcsSUFBSSxHQUFFO0FBQUMscUJBQWEscUNBQW9DLFlBQVcsU0FBUSxLQUFLO0FBQUEsTUFBQztBQUFDLFVBQUksT0FBSTtBQUFLLFVBQUcsWUFBWSxRQUFPO0FBQUMsZUFBSSxRQUFRLE9BQU8sWUFBWSxLQUFLLEVBQUUsWUFBWTtBQUFBLE1BQUMsT0FBSztBQUFDLGVBQUksUUFBUSxZQUFZO0FBQUUsZUFBSSxXQUFXLE1BQUksWUFBWSxRQUFNLENBQUM7QUFBQSxNQUFDO0FBQUMsWUFBTSxVQUFRLFlBQVksU0FBUSxZQUFZLFFBQVE7QUFBRSxhQUFPLElBQUksWUFBWSxx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WUFBSSxRQUFNLENBQUMsR0FBRSxRQUFPO0FBQU0sZUFBTSxLQUFFLGNBQWE7QUFBQyxlQUFJLEtBQUUsR0FBRSxLQUFFLGNBQVksS0FBRSxjQUFhLEVBQUUsSUFBRSxFQUFFLElBQUU7QUFBQyxxQkFBTyxNQUFHO0FBQUUsb0JBQU0sR0FBRTtBQUFHLGtCQUFNLFVBQVEsUUFBTTtBQUFJLGtCQUFNLFNBQU8sS0FBRyxTQUFPLElBQUU7QUFBSSxrQkFBTSxTQUFPLEtBQUcsU0FBTyxLQUFHO0FBQUksa0JBQU0sU0FBTyxLQUFHLFNBQU8sS0FBRztBQUFBLFVBQUc7QUFBQyxjQUFHLEtBQUUsZUFBYSxHQUFFO0FBQUMsZUFBRSxFQUFDO0FBQUEsVUFBQztBQUFBLFFBQUM7QUFBQyxZQUFHLFlBQVc7QUFBQyxtQkFBTyxNQUFHO0FBQUUsa0JBQU0sR0FBRTtBQUFHLGNBQUcsYUFBVyxHQUFFO0FBQUMsa0JBQU0sVUFBUSxRQUFNO0FBQUEsVUFBRztBQUFDLGNBQUcsYUFBVyxHQUFFO0FBQUMsa0JBQU0sU0FBTyxLQUFHLFNBQU8sSUFBRTtBQUFBLFVBQUc7QUFBQyxjQUFHLGFBQVcsR0FBRTtBQUFDLGtCQUFNLFNBQU8sS0FBRyxTQUFPLEtBQUc7QUFBQSxVQUFHO0FBQUEsUUFBQztBQUFDLGVBQU87QUFBQSxNQUFLO0FBQUUsVUFBSSxLQUFFLFNBQVMsSUFBRTtBQUFDLFlBQUksR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJO0FBQUksYUFBSSxJQUFFLEdBQUUsSUFBRSxJQUFHLEtBQUcsR0FBRTtBQUFDLGVBQUcsR0FBRSxLQUFHLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUU7QUFBSSxlQUFHLEdBQUUsS0FBRyxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFO0FBQUksZUFBRyxHQUFFLEtBQUcsR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRTtBQUFJLGVBQUcsR0FBRSxLQUFHLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUU7QUFBSSxlQUFHLEdBQUUsS0FBRyxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFO0FBQUksZUFBRyxHQUFFLEtBQUcsR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRTtBQUFJLGVBQUcsR0FBRSxLQUFHLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUU7QUFBSSxlQUFHLEdBQUUsS0FBRyxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFO0FBQUksZUFBRyxHQUFFLEtBQUcsR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRTtBQUFJLGVBQUcsR0FBRSxLQUFHLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUU7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxhQUFFLE1BQUk7QUFBRSxhQUFFLE1BQUk7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxhQUFFLE1BQUk7QUFBRSxhQUFFLE1BQUk7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxhQUFFLE1BQUk7QUFBRSxhQUFFLE1BQUk7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxhQUFFLE1BQUk7QUFBRSxhQUFFLE1BQUk7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxhQUFFLE1BQUk7QUFBRSxhQUFFLE1BQUk7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxlQUFHLEdBQUU7QUFBRyxlQUFHLEdBQUU7QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE1BQUksSUFBRSxHQUFFLE9BQUs7QUFBRyxnQkFBSSxHQUFFLE1BQUksSUFBRSxHQUFFLE9BQUs7QUFBRyxlQUFHLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFHLGVBQUcsR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLElBQUUsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLElBQUUsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxNQUFJLEtBQUcsR0FBRSxPQUFLO0FBQUUsZ0JBQUksR0FBRSxNQUFJLEtBQUcsR0FBRSxPQUFLO0FBQUUsZ0JBQUksR0FBRSxPQUFLLElBQUUsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLElBQUUsR0FBRSxRQUFNO0FBQUcsZUFBRyxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxlQUFHLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFHLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFHLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFHLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGdCQUFJLEdBQUUsTUFBSSxLQUFHLEdBQUUsT0FBSztBQUFFLGdCQUFJLEdBQUUsTUFBSSxLQUFHLEdBQUUsT0FBSztBQUFFLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGVBQUcsR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZUFBRyxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRSxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRSxnQkFBSSxHQUFFLE1BQUksS0FBRyxHQUFFLE9BQUs7QUFBRSxnQkFBSSxHQUFFLE1BQUksS0FBRyxHQUFFLE9BQUs7QUFBRSxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxlQUFHLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFHLGVBQUcsR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLEdBQUc7QUFBRyxhQUFFLE1BQUksR0FBRyxJQUFFO0FBQUEsUUFBRTtBQUFBLE1BQUM7QUFBRSxVQUFHLFdBQVU7QUFBQyxlQUFPLFVBQVE7QUFBQSxNQUFPLE9BQUs7QUFBQyxpQkFBUSxJQUFFLEdBQUUsSUFBRSxZQUFZLFFBQU8sRUFBRSxHQUFFO0FBQUMsZUFBSyxZQUFZLE1BQUksUUFBUSxZQUFZO0FBQUEsUUFBRztBQUFBLE1BQUM7QUFBQSxJQUFDLEdBQUc7QUFBQSxFQUFDLENBQUM7QUFBZSxxQkFBbUIsT0FBSztBQUFDLFdBQU0sT0FBSyxLQUFLLFdBQVcsU0FBUyxLQUFJLENBQUM7QUFBQSxFQUFDO0FBQUMsTUFBTSxZQUFVO0FBQXlCLE1BQU0sV0FBUyxJQUFJLE9BQU8sU0FBUztBQUFFLDJCQUF5QixPQUFNO0FBQUMsVUFBTSxTQUFPLENBQUM7QUFBRSxXQUFNLE9BQU07QUFBQyxhQUFPLFFBQVEsUUFBTSxHQUFHO0FBQUUsZ0JBQVE7QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQU07QUFBQyw2QkFBMkIsT0FBSyxRQUFPLFFBQU87QUFBQyxRQUFJLFNBQU87QUFBRSxhQUFRLElBQUUsR0FBRSxJQUFFLFFBQU8sS0FBSTtBQUFDLGVBQU8sU0FBTyxNQUFJLE1BQUssU0FBTztBQUFBLElBQUU7QUFBQyxXQUFPO0FBQUEsRUFBTTtBQUFDLG1CQUFpQixRQUFPO0FBQUMsUUFBRyxNQUFNLFFBQVEsTUFBTSxHQUFFO0FBQUMsVUFBSSxVQUFRLENBQUM7QUFBRSxhQUFPLFFBQVEsU0FBUyxPQUFNO0FBQUMsa0JBQVEsUUFBUSxPQUFPLFFBQVEsS0FBSyxDQUFDO0FBQUEsTUFBQyxDQUFDO0FBQUUsVUFBRyxRQUFRLFVBQVEsSUFBRztBQUFDLGdCQUFRLFFBQVEsTUFBSSxRQUFRLE1BQU07QUFBRSxlQUFPO0FBQUEsTUFBTztBQUFDLFlBQU0sVUFBTyxnQkFBZ0IsUUFBUSxNQUFNO0FBQUUsY0FBTyxRQUFRLE1BQUksUUFBTyxNQUFNO0FBQUUsYUFBTyxRQUFPLE9BQU8sT0FBTztBQUFBLElBQUM7QUFBQyxRQUFHLENBQUMsWUFBWSxNQUFNLEdBQUU7QUFBQyxlQUFTLG1CQUFtQixnQ0FBK0IsVUFBUyxNQUFNO0FBQUEsSUFBQztBQUFDLFVBQU0sUUFBSyxNQUFNLFVBQVUsTUFBTSxLQUFLLFNBQVMsTUFBTSxDQUFDO0FBQUUsUUFBRyxNQUFLLFdBQVMsS0FBRyxNQUFLLE1BQUksS0FBSTtBQUFDLGFBQU87QUFBQSxJQUFJLFdBQVMsTUFBSyxVQUFRLElBQUc7QUFBQyxZQUFLLFFBQVEsTUFBSSxNQUFLLE1BQU07QUFBRSxhQUFPO0FBQUEsSUFBSTtBQUFDLFVBQU0sU0FBTyxnQkFBZ0IsTUFBSyxNQUFNO0FBQUUsV0FBTyxRQUFRLE1BQUksT0FBTyxNQUFNO0FBQUUsV0FBTyxPQUFPLE9BQU8sS0FBSTtBQUFBLEVBQUM7QUFBQyxrQkFBZ0IsUUFBTztBQUFDLFdBQU8sUUFBUSxRQUFRLE1BQU0sQ0FBQztBQUFBLEVBQUM7QUFBQywyQkFBeUIsT0FBSyxRQUFPLGFBQVksUUFBTztBQUFDLFVBQU0sU0FBTyxDQUFDO0FBQUUsV0FBTSxjQUFZLFNBQU8sSUFBRSxRQUFPO0FBQUMsWUFBTSxVQUFRLFFBQVEsT0FBSyxXQUFXO0FBQUUsYUFBTyxLQUFLLFFBQVEsTUFBTTtBQUFFLHFCQUFhLFFBQVE7QUFBUyxVQUFHLGNBQVksU0FBTyxJQUFFLFFBQU87QUFBQyxpQkFBUyxXQUFXLHdCQUF1QixPQUFPLE9BQU8sZ0JBQWUsQ0FBQyxDQUFDO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQyxXQUFNLEVBQUMsVUFBUyxJQUFFLFFBQU8sT0FBYTtBQUFBLEVBQUM7QUFBQyxtQkFBaUIsT0FBSyxRQUFPO0FBQUMsUUFBRyxNQUFLLFdBQVMsR0FBRTtBQUFDLGVBQVMsV0FBVyxrQkFBaUIsT0FBTyxPQUFPLGdCQUFlLENBQUMsQ0FBQztBQUFBLElBQUM7QUFBQyxRQUFHLE1BQUssV0FBUyxLQUFJO0FBQUMsWUFBTSxlQUFhLE1BQUssVUFBUTtBQUFJLFVBQUcsU0FBTyxJQUFFLGVBQWEsTUFBSyxRQUFPO0FBQUMsaUJBQVMsV0FBVyxnQ0FBK0IsT0FBTyxPQUFPLGdCQUFlLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBQyxZQUFNLFNBQU8sa0JBQWtCLE9BQUssU0FBTyxHQUFFLFlBQVk7QUFBRSxVQUFHLFNBQU8sSUFBRSxlQUFhLFNBQU8sTUFBSyxRQUFPO0FBQUMsaUJBQVMsV0FBVywrQkFBOEIsT0FBTyxPQUFPLGdCQUFlLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBQyxhQUFPLGdCQUFnQixPQUFLLFFBQU8sU0FBTyxJQUFFLGNBQWEsZUFBYSxNQUFNO0FBQUEsSUFBQyxXQUFTLE1BQUssV0FBUyxLQUFJO0FBQUMsWUFBTSxTQUFPLE1BQUssVUFBUTtBQUFJLFVBQUcsU0FBTyxJQUFFLFNBQU8sTUFBSyxRQUFPO0FBQUMsaUJBQVMsV0FBVyx3QkFBdUIsT0FBTyxPQUFPLGdCQUFlLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBQyxhQUFPLGdCQUFnQixPQUFLLFFBQU8sU0FBTyxHQUFFLE1BQU07QUFBQSxJQUFDLFdBQVMsTUFBSyxXQUFTLEtBQUk7QUFBQyxZQUFNLGVBQWEsTUFBSyxVQUFRO0FBQUksVUFBRyxTQUFPLElBQUUsZUFBYSxNQUFLLFFBQU87QUFBQyxpQkFBUyxXQUFXLHdCQUF1QixPQUFPLE9BQU8sZ0JBQWUsQ0FBQyxDQUFDO0FBQUEsTUFBQztBQUFDLFlBQU0sU0FBTyxrQkFBa0IsT0FBSyxTQUFPLEdBQUUsWUFBWTtBQUFFLFVBQUcsU0FBTyxJQUFFLGVBQWEsU0FBTyxNQUFLLFFBQU87QUFBQyxpQkFBUyxXQUFXLHdCQUF1QixPQUFPLE9BQU8sZ0JBQWUsQ0FBQyxDQUFDO0FBQUEsTUFBQztBQUFDLFlBQU0sU0FBTyxRQUFRLE1BQUssTUFBTSxTQUFPLElBQUUsY0FBYSxTQUFPLElBQUUsZUFBYSxNQUFNLENBQUM7QUFBRSxhQUFNLEVBQUMsVUFBUyxJQUFFLGVBQWEsUUFBTyxPQUFhO0FBQUEsSUFBQyxXQUFTLE1BQUssV0FBUyxLQUFJO0FBQUMsWUFBTSxTQUFPLE1BQUssVUFBUTtBQUFJLFVBQUcsU0FBTyxJQUFFLFNBQU8sTUFBSyxRQUFPO0FBQUMsaUJBQVMsV0FBVyxrQkFBaUIsT0FBTyxPQUFPLGdCQUFlLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBQyxZQUFNLFNBQU8sUUFBUSxNQUFLLE1BQU0sU0FBTyxHQUFFLFNBQU8sSUFBRSxNQUFNLENBQUM7QUFBRSxhQUFNLEVBQUMsVUFBUyxJQUFFLFFBQU8sT0FBYTtBQUFBLElBQUM7QUFBQyxXQUFNLEVBQUMsVUFBUyxHQUFFLFFBQU8sUUFBUSxNQUFLLE9BQU8sRUFBQztBQUFBLEVBQUM7QUFBQyxrQkFBZ0IsT0FBSztBQUFDLFVBQU0sUUFBTSxTQUFTLEtBQUk7QUFBRSxVQUFNLFVBQVEsUUFBUSxPQUFNLENBQUM7QUFBRSxRQUFHLFFBQVEsYUFBVyxNQUFNLFFBQU87QUFBQyxlQUFTLG1CQUFtQixvQkFBbUIsUUFBTyxLQUFJO0FBQUEsSUFBQztBQUFDLFdBQU8sUUFBUTtBQUFBLEVBQU07QUFBQyxNQUFJLFFBQU0sT0FBTyxPQUFPLEVBQUMsV0FBVSxNQUFLLFFBQWMsT0FBYSxDQUFDO0FBQUUsTUFBTSxZQUFVO0FBQTZCLE1BQU0sV0FBUyxJQUFJLE9BQU8sU0FBUztBQUFFLDhCQUE0QixTQUFRO0FBQUMsUUFBRyxDQUFDLFlBQVksU0FBUSxFQUFFLEdBQUU7QUFBQyxlQUFTLG1CQUFtQixtQkFBa0IsV0FBVSxPQUFPO0FBQUEsSUFBQztBQUFDLGNBQVEsUUFBUSxZQUFZO0FBQUUsVUFBTSxRQUFNLFFBQVEsVUFBVSxDQUFDLEVBQUUsTUFBTSxFQUFFO0FBQUUsVUFBTSxXQUFTLElBQUksV0FBVyxFQUFFO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxJQUFHLEtBQUk7QUFBQyxlQUFTLEtBQUcsTUFBTSxHQUFHLFdBQVcsQ0FBQztBQUFBLElBQUM7QUFBQyxVQUFNLFNBQU8sU0FBUyxVQUFVLFFBQVEsQ0FBQztBQUFFLGFBQVEsSUFBRSxHQUFFLElBQUUsSUFBRyxLQUFHLEdBQUU7QUFBQyxVQUFHLE9BQU8sS0FBRyxNQUFJLEtBQUcsR0FBRTtBQUFDLGNBQU0sS0FBRyxNQUFNLEdBQUcsWUFBWTtBQUFBLE1BQUM7QUFBQyxVQUFJLFFBQU8sS0FBRyxLQUFHLE9BQUssR0FBRTtBQUFDLGNBQU0sSUFBRSxLQUFHLE1BQU0sSUFBRSxHQUFHLFlBQVk7QUFBQSxNQUFDO0FBQUEsSUFBQztBQUFDLFdBQU0sT0FBSyxNQUFNLEtBQUssRUFBRTtBQUFBLEVBQUM7QUFBQyxNQUFNLG1CQUFpQjtBQUFpQixpQkFBZSxHQUFFO0FBQUMsUUFBRyxLQUFLLE9BQU07QUFBQyxhQUFPLEtBQUssTUFBTSxDQUFDO0FBQUEsSUFBQztBQUFDLFdBQU8sS0FBSyxJQUFJLENBQUMsSUFBRSxLQUFLO0FBQUEsRUFBSTtBQUFDLE1BQU0sYUFBVyxDQUFDO0FBQUUsV0FBUSxJQUFFLEdBQUUsSUFBRSxJQUFHLEtBQUk7QUFBQyxlQUFXLE9BQU8sQ0FBQyxLQUFHLE9BQU8sQ0FBQztBQUFBLEVBQUM7QUFBQyxXQUFRLElBQUUsR0FBRSxJQUFFLElBQUcsS0FBSTtBQUFDLGVBQVcsT0FBTyxhQUFhLEtBQUcsQ0FBQyxLQUFHLE9BQU8sS0FBRyxDQUFDO0FBQUEsRUFBQztBQUFDLE1BQU0sYUFBVyxLQUFLLE1BQU0sTUFBTSxnQkFBZ0IsQ0FBQztBQUFFLHdCQUFzQixTQUFRO0FBQUMsY0FBUSxRQUFRLFlBQVk7QUFBRSxjQUFRLFFBQVEsVUFBVSxDQUFDLElBQUUsUUFBUSxVQUFVLEdBQUUsQ0FBQyxJQUFFO0FBQUssUUFBSSxXQUFTLFFBQVEsTUFBTSxFQUFFLEVBQUUsSUFBSSxPQUFHO0FBQUMsYUFBTyxXQUFXO0FBQUEsSUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFO0FBQUUsV0FBTSxTQUFTLFVBQVEsWUFBVztBQUFDLFVBQUksUUFBTSxTQUFTLFVBQVUsR0FBRSxVQUFVO0FBQUUsaUJBQVMsU0FBUyxPQUFNLEVBQUUsSUFBRSxLQUFHLFNBQVMsVUFBVSxNQUFNLE1BQU07QUFBQSxJQUFDO0FBQUMsUUFBSSxXQUFTLE9BQU8sS0FBRyxTQUFTLFVBQVMsRUFBRSxJQUFFLEVBQUU7QUFBRSxXQUFNLFNBQVMsU0FBTyxHQUFFO0FBQUMsaUJBQVMsTUFBSTtBQUFBLElBQVE7QUFBQyxXQUFPO0FBQUEsRUFBUTtBQUFDLHNCQUFvQixTQUFRO0FBQUMsUUFBSSxTQUFPO0FBQUssUUFBRyxPQUFPLFlBQVUsVUFBUztBQUFDLGVBQVMsbUJBQW1CLG1CQUFrQixXQUFVLE9BQU87QUFBQSxJQUFDO0FBQUMsUUFBRyxRQUFRLE1BQU0sd0JBQXdCLEdBQUU7QUFBQyxVQUFHLFFBQVEsVUFBVSxHQUFFLENBQUMsTUFBSSxNQUFLO0FBQUMsa0JBQVEsT0FBSztBQUFBLE1BQU87QUFBQyxlQUFPLG1CQUFtQixPQUFPO0FBQUUsVUFBRyxRQUFRLE1BQU0sK0JBQStCLEtBQUcsV0FBUyxTQUFRO0FBQUMsaUJBQVMsbUJBQW1CLHdCQUF1QixXQUFVLE9BQU87QUFBQSxNQUFDO0FBQUEsSUFBQyxXQUFTLFFBQVEsTUFBTSxnQ0FBZ0MsR0FBRTtBQUFDLFVBQUcsUUFBUSxVQUFVLEdBQUUsQ0FBQyxNQUFJLGFBQWEsT0FBTyxHQUFFO0FBQUMsaUJBQVMsbUJBQW1CLHFCQUFvQixXQUFVLE9BQU87QUFBQSxNQUFDO0FBQUMsZUFBTyxZQUFZLFFBQVEsVUFBVSxDQUFDLENBQUM7QUFBRSxhQUFNLE9BQU8sU0FBTyxJQUFHO0FBQUMsaUJBQU8sTUFBSTtBQUFBLE1BQU07QUFBQyxlQUFPLG1CQUFtQixPQUFLLE1BQU07QUFBQSxJQUFDLE9BQUs7QUFBQyxlQUFTLG1CQUFtQixtQkFBa0IsV0FBVSxPQUFPO0FBQUEsSUFBQztBQUFDLFdBQU87QUFBQSxFQUFNO0FBQUMscUJBQW1CLFNBQVE7QUFBQyxRQUFHO0FBQUMsaUJBQVcsT0FBTztBQUFFLGFBQU87QUFBQSxJQUFJLFNBQU8sT0FBTjtBQUFBLElBQWE7QUFBQyxXQUFPO0FBQUEsRUFBSztBQUFDLDBCQUF3QixTQUFRO0FBQUMsUUFBSSxTQUFPLFlBQVksV0FBVyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsRUFBRSxZQUFZO0FBQUUsV0FBTSxPQUFPLFNBQU8sSUFBRztBQUFDLGVBQU8sTUFBSTtBQUFBLElBQU07QUFBQyxXQUFNLE9BQUssYUFBYSxTQUFPLE1BQU0sSUFBRTtBQUFBLEVBQU07QUFBQyw4QkFBNEIsYUFBWTtBQUFDLFFBQUksT0FBSztBQUFLLFFBQUc7QUFBQyxhQUFLLFdBQVcsWUFBWSxJQUFJO0FBQUEsSUFBQyxTQUFPLE9BQU47QUFBYSxlQUFTLG1CQUFtQix3QkFBdUIsZUFBYyxXQUFXO0FBQUEsSUFBQztBQUFDLFVBQU0sUUFBTSxXQUFXLFNBQVMsVUFBVSxLQUFLLFlBQVksS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQUUsV0FBTyxXQUFXLGFBQWEsVUFBVSxPQUFPLENBQUMsTUFBSyxLQUFLLENBQUMsQ0FBQyxHQUFFLEVBQUUsQ0FBQztBQUFBLEVBQUM7QUFBQyw2QkFBMkIsTUFBSyxNQUFLLGNBQWE7QUFBQyxRQUFHLGNBQWMsSUFBSSxNQUFJLElBQUc7QUFBQyxlQUFTLG1CQUFtQix5QkFBd0IsUUFBTyxJQUFJO0FBQUEsSUFBQztBQUFDLFFBQUcsY0FBYyxZQUFZLE1BQUksSUFBRztBQUFDLGVBQVMsbUJBQW1CLGlDQUFnQyxnQkFBZSxZQUFZO0FBQUEsSUFBQztBQUFDLFdBQU8sV0FBVyxhQUFhLFVBQVUsT0FBTyxDQUFDLFFBQU8sV0FBVyxJQUFJLEdBQUUsTUFBSyxZQUFZLENBQUMsQ0FBQyxHQUFFLEVBQUUsQ0FBQztBQUFBLEVBQUM7QUFBYyxNQUFNLGVBQU4sY0FBMkIsTUFBSztBQUFBLElBQUMsWUFBWSxXQUFVO0FBQUMsWUFBTSxXQUFVLFdBQVUsV0FBVSxLQUFLO0FBQUEsSUFBQztBQUFBLElBQUMsZUFBYztBQUFDLGFBQU07QUFBQSxJQUE0QztBQUFBLElBQUMsT0FBTyxRQUFPLE9BQU07QUFBQyxVQUFHO0FBQUMsbUJBQVcsS0FBSztBQUFBLE1BQUMsU0FBTyxPQUFOO0FBQWEsYUFBSyxZQUFZLE1BQU0sU0FBUSxLQUFLO0FBQUEsTUFBQztBQUFDLGFBQU8sT0FBTyxXQUFXLEtBQUs7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxhQUFPLFdBQVcsV0FBVyxPQUFPLFVBQVUsRUFBRSxZQUFZLEdBQUUsRUFBRSxDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBYyxNQUFNLGlCQUFOLGNBQTZCLE1BQUs7QUFBQSxJQUFDLFlBQVksT0FBTTtBQUFDLFlBQU0sTUFBTSxNQUFLLE1BQU0sTUFBSyxRQUFVLE1BQU0sT0FBTztBQUFFLFdBQUssUUFBTTtBQUFBLElBQUs7QUFBQSxJQUFDLGVBQWM7QUFBQyxhQUFPLEtBQUssTUFBTSxhQUFhO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxRQUFPLE9BQU07QUFBQyxhQUFPLEtBQUssTUFBTSxPQUFPLFFBQU8sS0FBSztBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sUUFBTztBQUFDLGFBQU8sS0FBSyxNQUFNLE9BQU8sTUFBTTtBQUFBLElBQUM7QUFBQSxFQUFDO0FBQWMsTUFBTSxXQUFTLElBQUksT0FBTyxTQUFTO0FBQUUsZ0JBQWMsUUFBTyxRQUFPLFFBQU87QUFBQyxRQUFJLGNBQVk7QUFBSyxRQUFHLE1BQU0sUUFBUSxNQUFNLEdBQUU7QUFBQyxvQkFBWTtBQUFBLElBQU0sV0FBUyxVQUFRLE9BQU8sV0FBUyxVQUFTO0FBQUMsVUFBSSxTQUFPLENBQUM7QUFBRSxvQkFBWSxPQUFPLElBQUksV0FBTztBQUFDLGNBQU0sUUFBSyxNQUFNO0FBQVUsWUFBRyxDQUFDLE9BQUs7QUFBQyxtQkFBUyxXQUFXLHlEQUF3RCxPQUFPLE9BQU8sa0JBQWlCLEVBQUMsVUFBUyxVQUFTLE9BQVksT0FBTSxPQUFNLENBQUM7QUFBQSxRQUFDO0FBQUMsWUFBRyxPQUFPLFFBQU07QUFBQyxtQkFBUyxXQUFXLDJEQUEwRCxPQUFPLE9BQU8sa0JBQWlCLEVBQUMsVUFBUyxVQUFTLE9BQVksT0FBTSxPQUFNLENBQUM7QUFBQSxRQUFDO0FBQUMsZUFBTyxTQUFNO0FBQUssZUFBTyxPQUFPO0FBQUEsTUFBSyxDQUFDO0FBQUEsSUFBQyxPQUFLO0FBQUMsZUFBUyxtQkFBbUIsdUJBQXNCLFNBQVEsTUFBTTtBQUFBLElBQUM7QUFBQyxRQUFHLE9BQU8sV0FBUyxZQUFZLFFBQU87QUFBQyxlQUFTLG1CQUFtQiwrQkFBOEIsU0FBUSxNQUFNO0FBQUEsSUFBQztBQUFDLFFBQUksZUFBYSxJQUFJLE9BQU8sT0FBTyxRQUFRO0FBQUUsUUFBSSxnQkFBYyxJQUFJLE9BQU8sT0FBTyxRQUFRO0FBQUUsUUFBSSxjQUFZLENBQUM7QUFBRSxXQUFPLFFBQVEsQ0FBQyxPQUFNLFdBQVE7QUFBQyxVQUFJLFFBQU0sWUFBWTtBQUFPLFVBQUcsTUFBTSxTQUFRO0FBQUMsWUFBSSxnQkFBYyxjQUFjO0FBQU8sY0FBTSxPQUFPLGVBQWMsS0FBSztBQUFFLFlBQUksYUFBVyxhQUFhLG9CQUFvQjtBQUFFLG9CQUFZLEtBQUssZ0JBQVk7QUFBQyxxQkFBVyxhQUFXLGFBQWE7QUFBQSxRQUFDLENBQUM7QUFBQSxNQUFDLE9BQUs7QUFBQyxjQUFNLE9BQU8sY0FBYSxLQUFLO0FBQUEsTUFBQztBQUFBLElBQUMsQ0FBQztBQUFFLGdCQUFZLFFBQVEsVUFBTTtBQUFDLFdBQUssYUFBYSxNQUFNO0FBQUEsSUFBQyxDQUFDO0FBQUUsUUFBSSxTQUFPLE9BQU8sYUFBYSxZQUFZO0FBQUUsY0FBUSxPQUFPLGFBQWEsYUFBYTtBQUFFLFdBQU87QUFBQSxFQUFNO0FBQUMsa0JBQWdCLFFBQU8sUUFBTztBQUFDLFFBQUksU0FBTyxDQUFDO0FBQUUsUUFBSSxhQUFXLE9BQU8sVUFBVSxDQUFDO0FBQUUsV0FBTyxRQUFRLFdBQU87QUFBQyxVQUFJLFFBQU07QUFBSyxVQUFHLE1BQU0sU0FBUTtBQUFDLFlBQUksU0FBTyxPQUFPLFVBQVU7QUFBRSxZQUFJLGVBQWEsV0FBVyxVQUFVLE9BQU8sU0FBUyxDQUFDO0FBQUUsWUFBRztBQUFDLGtCQUFNLE1BQU0sT0FBTyxZQUFZO0FBQUEsUUFBQyxTQUFPLE9BQU47QUFBYSxjQUFHLE1BQU0sU0FBTyxPQUFPLE9BQU8sZ0JBQWU7QUFBQyxrQkFBTTtBQUFBLFVBQUs7QUFBQyxrQkFBTTtBQUFNLGdCQUFNLFdBQVMsTUFBTTtBQUFLLGdCQUFNLE9BQUssTUFBTTtBQUFVLGdCQUFNLE9BQUssTUFBTTtBQUFBLFFBQUk7QUFBQSxNQUFDLE9BQUs7QUFBQyxZQUFHO0FBQUMsa0JBQU0sTUFBTSxPQUFPLE1BQU07QUFBQSxRQUFDLFNBQU8sT0FBTjtBQUFhLGNBQUcsTUFBTSxTQUFPLE9BQU8sT0FBTyxnQkFBZTtBQUFDLGtCQUFNO0FBQUEsVUFBSztBQUFDLGtCQUFNO0FBQU0sZ0JBQU0sV0FBUyxNQUFNO0FBQUssZ0JBQU0sT0FBSyxNQUFNO0FBQVUsZ0JBQU0sT0FBSyxNQUFNO0FBQUEsUUFBSTtBQUFBLE1BQUM7QUFBQyxVQUFHLFNBQU8sUUFBVTtBQUFDLGVBQU8sS0FBSyxLQUFLO0FBQUEsTUFBQztBQUFBLElBQUMsQ0FBQztBQUFFLFVBQU0sY0FBWSxPQUFPLE9BQU8sQ0FBQyxPQUFNLFVBQVE7QUFBQyxZQUFNLFFBQUssTUFBTTtBQUFVLFVBQUcsT0FBSztBQUFDLFlBQUcsQ0FBQyxNQUFNLFFBQU07QUFBQyxnQkFBTSxTQUFNO0FBQUEsUUFBQztBQUFDLGNBQU07QUFBQSxNQUFPO0FBQUMsYUFBTztBQUFBLElBQUssR0FBRSxDQUFDLENBQUM7QUFBRSxXQUFPLFFBQVEsQ0FBQyxPQUFNLFdBQVE7QUFBQyxVQUFJLFFBQUssTUFBTTtBQUFVLFVBQUcsQ0FBQyxTQUFNLFlBQVksV0FBUSxHQUFFO0FBQUM7QUFBQSxNQUFNO0FBQUMsVUFBRyxVQUFPLFVBQVM7QUFBQyxnQkFBSztBQUFBLE1BQVM7QUFBQyxVQUFHLE9BQU8sVUFBTyxNQUFLO0FBQUM7QUFBQSxNQUFNO0FBQUMsWUFBTSxRQUFNLE9BQU87QUFBTyxVQUFHLGlCQUFpQixPQUFNO0FBQUMsZUFBTyxlQUFlLFFBQU8sT0FBSyxFQUFDLEtBQUksTUFBSTtBQUFDLGdCQUFNO0FBQUEsUUFBSyxFQUFDLENBQUM7QUFBQSxNQUFDLE9BQUs7QUFBQyxlQUFPLFNBQU07QUFBQSxNQUFLO0FBQUEsSUFBQyxDQUFDO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxPQUFPLFFBQU8sS0FBSTtBQUFDLFlBQU0sUUFBTSxPQUFPO0FBQUcsVUFBRyxpQkFBaUIsT0FBTTtBQUFDLGVBQU8sZUFBZSxRQUFPLEdBQUUsRUFBQyxLQUFJLE1BQUk7QUFBQyxnQkFBTTtBQUFBLFFBQUssRUFBQyxDQUFDO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQyxXQUFPLE9BQU8sT0FBTyxNQUFNO0FBQUEsRUFBQztBQUFDLE1BQU0sYUFBTixjQUF5QixNQUFLO0FBQUEsSUFBQyxZQUFZLE9BQU0sUUFBTyxXQUFVO0FBQUMsWUFBTSxPQUFLLE1BQU0sT0FBSyxNQUFLLFdBQVEsSUFBRSxTQUFPLE1BQUk7QUFBSSxZQUFNLFVBQVEsV0FBUyxNQUFJLE1BQU07QUFBUSxZQUFNLFNBQVEsTUFBSyxXQUFVLE9BQU87QUFBRSxXQUFLLFFBQU07QUFBTSxXQUFLLFNBQU87QUFBQSxJQUFNO0FBQUEsSUFBQyxlQUFjO0FBQUMsWUFBTSxlQUFhLEtBQUssTUFBTSxhQUFhO0FBQUUsWUFBTSxTQUFPLENBQUM7QUFBRSxlQUFRLElBQUUsR0FBRSxJQUFFLEtBQUssUUFBTyxLQUFJO0FBQUMsZUFBTyxLQUFLLFlBQVk7QUFBQSxNQUFDO0FBQUMsYUFBTztBQUFBLElBQU07QUFBQSxJQUFDLE9BQU8sUUFBTyxPQUFNO0FBQUMsVUFBRyxDQUFDLE1BQU0sUUFBUSxLQUFLLEdBQUU7QUFBQyxhQUFLLFlBQVksd0JBQXVCLEtBQUs7QUFBQSxNQUFDO0FBQUMsVUFBSSxRQUFNLEtBQUs7QUFBTyxVQUFHLFVBQVEsSUFBRztBQUFDLGdCQUFNLE1BQU07QUFBTyxlQUFPLFdBQVcsTUFBTSxNQUFNO0FBQUEsTUFBQztBQUFDLGVBQVMsbUJBQW1CLE1BQU0sUUFBTyxPQUFNLGdCQUFlLE1BQUssWUFBVSxNQUFJLEtBQUssWUFBVSxHQUFHO0FBQUUsVUFBSSxTQUFPLENBQUM7QUFBRSxlQUFRLElBQUUsR0FBRSxJQUFFLE1BQU0sUUFBTyxLQUFJO0FBQUMsZUFBTyxLQUFLLEtBQUssS0FBSztBQUFBLE1BQUM7QUFBQyxhQUFPLEtBQUssUUFBTyxRQUFPLEtBQUs7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxVQUFJLFFBQU0sS0FBSztBQUFPLFVBQUcsVUFBUSxJQUFHO0FBQUMsZ0JBQU0sT0FBTyxVQUFVLEVBQUUsU0FBUztBQUFFLFlBQUcsUUFBTSxLQUFHLE9BQU8sTUFBTSxRQUFPO0FBQUMsbUJBQVMsV0FBVyw0QkFBMkIsT0FBTyxPQUFPLGdCQUFlLEVBQUMsUUFBTyxPQUFPLE1BQU0sUUFBTyxNQUFXLENBQUM7QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFDLFVBQUksU0FBTyxDQUFDO0FBQUUsZUFBUSxJQUFFLEdBQUUsSUFBRSxPQUFNLEtBQUk7QUFBQyxlQUFPLEtBQUssSUFBSSxlQUFlLEtBQUssS0FBSyxDQUFDO0FBQUEsTUFBQztBQUFDLGFBQU8sT0FBTyxPQUFPLEtBQUssTUFBSyxPQUFPLFFBQU8sTUFBTSxDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBYyxNQUFNLGVBQU4sY0FBMkIsTUFBSztBQUFBLElBQUMsWUFBWSxXQUFVO0FBQUMsWUFBTSxRQUFPLFFBQU8sV0FBVSxLQUFLO0FBQUEsSUFBQztBQUFBLElBQUMsZUFBYztBQUFDLGFBQU87QUFBQSxJQUFLO0FBQUEsSUFBQyxPQUFPLFFBQU8sT0FBTTtBQUFDLGFBQU8sT0FBTyxXQUFXLFFBQU0sSUFBRSxDQUFDO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxRQUFPO0FBQUMsYUFBTyxPQUFPLE9BQU8sS0FBSyxNQUFLLENBQUMsT0FBTyxVQUFVLEVBQUUsT0FBTyxDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBYyxNQUFNLG9CQUFOLGNBQWdDLE1BQUs7QUFBQSxJQUFDLFlBQVksTUFBSyxXQUFVO0FBQUMsWUFBTSxNQUFLLE1BQUssV0FBVSxJQUFJO0FBQUEsSUFBQztBQUFBLElBQUMsZUFBYztBQUFDLGFBQU07QUFBQSxJQUFJO0FBQUEsSUFBQyxPQUFPLFFBQU8sT0FBTTtBQUFDLGNBQU0sU0FBUyxLQUFLO0FBQUUsVUFBSSxTQUFPLE9BQU8sV0FBVyxNQUFNLE1BQU07QUFBRSxnQkFBUSxPQUFPLFdBQVcsS0FBSztBQUFFLGFBQU87QUFBQSxJQUFNO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxhQUFPLE9BQU8sVUFBVSxPQUFPLFVBQVUsRUFBRSxTQUFTLEdBQUUsSUFBSTtBQUFBLElBQUM7QUFBQSxFQUFDO0FBQUMsTUFBTSxhQUFOLGNBQXlCLGtCQUFpQjtBQUFBLElBQUMsWUFBWSxXQUFVO0FBQUMsWUFBTSxTQUFRLFNBQVM7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxhQUFPLE9BQU8sT0FBTyxLQUFLLE1BQUssUUFBUSxNQUFNLE9BQU8sTUFBTSxDQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsRUFBQztBQUFjLE1BQU0sa0JBQU4sY0FBOEIsTUFBSztBQUFBLElBQUMsWUFBWSxNQUFLLFdBQVU7QUFBQyxVQUFJLFFBQUssVUFBUSxPQUFPLElBQUk7QUFBRSxZQUFNLE9BQUssT0FBSyxXQUFVLEtBQUs7QUFBRSxXQUFLLE9BQUs7QUFBQSxJQUFJO0FBQUEsSUFBQyxlQUFjO0FBQUMsYUFBTSxxRUFBcUUsVUFBVSxHQUFFLElBQUUsS0FBSyxPQUFLLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU8sT0FBTTtBQUFDLFVBQUksUUFBSyxTQUFTLEtBQUs7QUFBRSxVQUFHLE1BQUssV0FBUyxLQUFLLE1BQUs7QUFBQyxhQUFLLFlBQVkseUJBQXdCLEtBQUs7QUFBQSxNQUFDO0FBQUMsYUFBTyxPQUFPLFdBQVcsS0FBSTtBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sUUFBTztBQUFDLGFBQU8sT0FBTyxPQUFPLEtBQUssTUFBSyxRQUFRLE9BQU8sVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBYyxNQUFNLFlBQU4sY0FBd0IsTUFBSztBQUFBLElBQUMsWUFBWSxXQUFVO0FBQUMsWUFBTSxRQUFPLElBQUcsV0FBVSxLQUFLO0FBQUEsSUFBQztBQUFBLElBQUMsZUFBYztBQUFDLGFBQU87QUFBQSxJQUFJO0FBQUEsSUFBQyxPQUFPLFFBQU8sT0FBTTtBQUFDLFVBQUcsU0FBTyxNQUFLO0FBQUMsYUFBSyxZQUFZLFlBQVcsS0FBSztBQUFBLE1BQUM7QUFBQyxhQUFPLE9BQU8sV0FBVyxDQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxhQUFPLFVBQVUsQ0FBQztBQUFFLGFBQU8sT0FBTyxPQUFPLEtBQUssTUFBSyxJQUFJO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBQyxNQUFNLGNBQVk7QUFBNkMsTUFBTSxnQkFBYyxVQUFVLEtBQUssRUFBRTtBQUFFLE1BQU0sU0FBTyxVQUFVLEtBQUssQ0FBQztBQUFFLE1BQU0sTUFBSSxVQUFVLEtBQUssQ0FBQztBQUFFLE1BQU0sTUFBSSxVQUFVLEtBQUssQ0FBQztBQUFFLE1BQU0sY0FBWSxVQUFVLEtBQUsscUJBQXFCO0FBQUUsTUFBTSxhQUFXLFVBQVUsS0FBSyxvRUFBb0U7QUFBRSxNQUFNLFdBQVM7QUFBcUUsTUFBTSxjQUFZO0FBQWlCLE1BQUksVUFBUSxPQUFPLE9BQU8sRUFBQyxXQUFVLE1BQUssYUFBd0IsYUFBWSxlQUFjLE1BQUssUUFBTyxLQUFRLEtBQVEsYUFBd0IsWUFBc0IsVUFBa0IsWUFBdUIsQ0FBQztBQUFlLE1BQU0sY0FBTixjQUEwQixNQUFLO0FBQUEsSUFBQyxZQUFZLE1BQUssUUFBTyxXQUFVO0FBQUMsWUFBTSxRQUFNLFVBQU8sUUFBTSxVQUFRLE9BQUs7QUFBRSxZQUFNLE9BQUssT0FBSyxXQUFVLEtBQUs7QUFBRSxXQUFLLE9BQUs7QUFBSyxXQUFLLFNBQU87QUFBQSxJQUFNO0FBQUEsSUFBQyxlQUFjO0FBQUMsYUFBTztBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sUUFBTyxPQUFNO0FBQUMsVUFBSSxJQUFFLFVBQVUsS0FBSyxLQUFLO0FBQUUsVUFBSSxlQUFhLFdBQVcsS0FBSyxPQUFPLFdBQVMsQ0FBQztBQUFFLFVBQUcsS0FBSyxRQUFPO0FBQUMsWUFBSSxTQUFPLGFBQWEsS0FBSyxLQUFLLE9BQUssSUFBRSxDQUFDO0FBQUUsWUFBRyxFQUFFLEdBQUcsTUFBTSxLQUFHLEVBQUUsR0FBRyxPQUFPLElBQUksR0FBRyxFQUFFLElBQUksYUFBYSxDQUFDLEdBQUU7QUFBQyxlQUFLLFlBQVksdUJBQXNCLEtBQUs7QUFBQSxRQUFDO0FBQUEsTUFBQyxXQUFTLEVBQUUsR0FBRyxNQUFNLEtBQUcsRUFBRSxHQUFHLGFBQWEsS0FBSyxLQUFLLE9BQUssQ0FBQyxDQUFDLEdBQUU7QUFBQyxhQUFLLFlBQVksdUJBQXNCLEtBQUs7QUFBQSxNQUFDO0FBQUMsVUFBRSxFQUFFLE9BQU8sS0FBSyxPQUFLLENBQUMsRUFBRSxLQUFLLEtBQUssT0FBSyxDQUFDO0FBQUUsVUFBRyxLQUFLLFFBQU87QUFBQyxZQUFFLEVBQUUsU0FBUyxLQUFLLE9BQUssQ0FBQyxFQUFFLE9BQU8sSUFBRSxPQUFPLFFBQVE7QUFBQSxNQUFDO0FBQUMsYUFBTyxPQUFPLFdBQVcsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sUUFBTztBQUFDLFVBQUksUUFBTSxPQUFPLFVBQVUsRUFBRSxLQUFLLEtBQUssT0FBSyxDQUFDO0FBQUUsVUFBRyxLQUFLLFFBQU87QUFBQyxnQkFBTSxNQUFNLFNBQVMsS0FBSyxPQUFLLENBQUM7QUFBQSxNQUFDO0FBQUMsYUFBTyxPQUFPLE9BQU8sS0FBSyxNQUFLLEtBQUs7QUFBQSxJQUFDO0FBQUEsRUFBQztBQUFDLE1BQU0sWUFBVTtBQUE2QixNQUFNLFdBQVMsSUFBSSxPQUFPLFNBQVM7QUFBRSxNQUFJO0FBQXlCLEVBQUMsVUFBUywyQkFBeUI7QUFBQyw4QkFBeUIsYUFBVztBQUFHLDhCQUF5QixTQUFPO0FBQU0sOEJBQXlCLFNBQU87QUFBTSw4QkFBeUIsVUFBUTtBQUFPLDhCQUF5QixVQUFRO0FBQUEsRUFBTSxHQUFHLDRCQUEyQiw0QkFBeUIsQ0FBQyxFQUFFO0FBQUUsTUFBSTtBQUFnQixFQUFDLFVBQVMsa0JBQWdCO0FBQUMscUJBQWdCLHlCQUF1QjtBQUErQixxQkFBZ0IsZ0JBQWM7QUFBdUIscUJBQWdCLGFBQVc7QUFBaUIscUJBQWdCLHNCQUFvQjtBQUE0QixxQkFBZ0Isa0JBQWdCO0FBQXFCLHFCQUFnQixxQkFBbUI7QUFBbUIscUJBQWdCLGNBQVk7QUFBQSxFQUF5QixHQUFHLG1CQUFrQixtQkFBZ0IsQ0FBQyxFQUFFO0FBQUUscUJBQW1CLFFBQU8sUUFBTyxPQUFNLFFBQU8sY0FBYTtBQUFDLFdBQU8sU0FBUyxtQkFBbUIsK0JBQStCLFdBQVcsVUFBUyxTQUFRLEtBQUs7QUFBQSxFQUFDO0FBQUMsc0JBQW9CLFFBQU8sUUFBTyxPQUFNLFFBQU8sY0FBYTtBQUFDLFFBQUcsV0FBUyxnQkFBZ0IsY0FBWSxXQUFTLGdCQUFnQixxQkFBb0I7QUFBQyxVQUFJLElBQUU7QUFBRSxlQUFRLElBQUUsU0FBTyxHQUFFLElBQUUsTUFBTSxRQUFPLEtBQUk7QUFBQyxZQUFHLE1BQU0sTUFBSSxNQUFJLEdBQUU7QUFBQztBQUFBLFFBQUs7QUFBQztBQUFBLE1BQUc7QUFBQyxhQUFPO0FBQUEsSUFBQztBQUFDLFFBQUcsV0FBUyxnQkFBZ0IsU0FBUTtBQUFDLGFBQU8sTUFBTSxTQUFPLFNBQU87QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQUM7QUFBQyx1QkFBcUIsUUFBTyxRQUFPLE9BQU0sUUFBTyxjQUFhO0FBQUMsUUFBRyxXQUFTLGdCQUFnQixVQUFTO0FBQUMsYUFBTyxLQUFLLFlBQVk7QUFBRSxhQUFPO0FBQUEsSUFBQztBQUFDLFdBQU8sS0FBSyxLQUFLO0FBQUUsV0FBTyxXQUFXLFFBQU8sUUFBTyxPQUFNLFFBQU8sWUFBWTtBQUFBLEVBQUM7QUFBQyxNQUFNLGlCQUFlLE9BQU8sT0FBTyxFQUFDLE9BQU0sV0FBVSxRQUFPLFlBQVcsU0FBUSxZQUFXLENBQUM7QUFBRSw2QkFBMkIsT0FBTSxTQUFRO0FBQUMsUUFBRyxXQUFTLE1BQUs7QUFBQyxnQkFBUSxlQUFlO0FBQUEsSUFBSztBQUFDLFlBQU0sU0FBUyxLQUFLO0FBQUUsVUFBTSxTQUFPLENBQUM7QUFBRSxRQUFJLElBQUU7QUFBRSxXQUFNLElBQUUsTUFBTSxRQUFPO0FBQUMsWUFBTSxJQUFFLE1BQU07QUFBSyxVQUFHLEtBQUcsTUFBSSxHQUFFO0FBQUMsZUFBTyxLQUFLLENBQUM7QUFBRTtBQUFBLE1BQVE7QUFBQyxVQUFJLGNBQVk7QUFBSyxVQUFJLGVBQWE7QUFBSyxVQUFJLEtBQUUsU0FBTyxLQUFJO0FBQUMsc0JBQVk7QUFBRSx1QkFBYTtBQUFBLE1BQUcsV0FBVSxLQUFFLFNBQU8sS0FBSTtBQUFDLHNCQUFZO0FBQUUsdUJBQWE7QUFBQSxNQUFJLFdBQVUsS0FBRSxTQUFPLEtBQUk7QUFBQyxzQkFBWTtBQUFFLHVCQUFhO0FBQUEsTUFBSyxPQUFLO0FBQUMsWUFBSSxLQUFFLFNBQU8sS0FBSTtBQUFDLGVBQUcsUUFBUSxnQkFBZ0IscUJBQW9CLElBQUUsR0FBRSxPQUFNLE1BQU07QUFBQSxRQUFDLE9BQUs7QUFBQyxlQUFHLFFBQVEsZ0JBQWdCLFlBQVcsSUFBRSxHQUFFLE9BQU0sTUFBTTtBQUFBLFFBQUM7QUFBQztBQUFBLE1BQVE7QUFBQyxVQUFHLElBQUUsSUFBRSxlQUFhLE1BQU0sUUFBTztBQUFDLGFBQUcsUUFBUSxnQkFBZ0IsU0FBUSxJQUFFLEdBQUUsT0FBTSxNQUFNO0FBQUU7QUFBQSxNQUFRO0FBQUMsVUFBSSxNQUFJLElBQUcsTUFBRyxJQUFFLGNBQVksS0FBRztBQUFFLGVBQVEsSUFBRSxHQUFFLElBQUUsYUFBWSxLQUFJO0FBQUMsWUFBSSxXQUFTLE1BQU07QUFBRyxZQUFJLFlBQVMsUUFBTSxLQUFJO0FBQUMsZUFBRyxRQUFRLGdCQUFnQixrQkFBaUIsR0FBRSxPQUFNLE1BQU07QUFBRSxnQkFBSTtBQUFLO0FBQUEsUUFBSztBQUFDLGNBQUksT0FBSyxJQUFFLFdBQVM7QUFBRztBQUFBLE1BQUc7QUFBQyxVQUFHLFFBQU0sTUFBSztBQUFDO0FBQUEsTUFBUTtBQUFDLFVBQUcsTUFBSSxTQUFRO0FBQUMsYUFBRyxRQUFRLGdCQUFnQixjQUFhLElBQUUsSUFBRSxhQUFZLE9BQU0sUUFBTyxHQUFHO0FBQUU7QUFBQSxNQUFRO0FBQUMsVUFBRyxPQUFLLFNBQU8sT0FBSyxPQUFNO0FBQUMsYUFBRyxRQUFRLGdCQUFnQixpQkFBZ0IsSUFBRSxJQUFFLGFBQVksT0FBTSxRQUFPLEdBQUc7QUFBRTtBQUFBLE1BQVE7QUFBQyxVQUFHLE9BQUssY0FBYTtBQUFDLGFBQUcsUUFBUSxnQkFBZ0IsVUFBUyxJQUFFLElBQUUsYUFBWSxPQUFNLFFBQU8sR0FBRztBQUFFO0FBQUEsTUFBUTtBQUFDLGFBQU8sS0FBSyxHQUFHO0FBQUEsSUFBQztBQUFDLFdBQU87QUFBQSxFQUFNO0FBQUMsdUJBQXFCLEtBQUksT0FBSyx5QkFBeUIsU0FBUTtBQUFDLFFBQUcsUUFBTSx5QkFBeUIsU0FBUTtBQUFDLGVBQVMsZUFBZTtBQUFFLFlBQUksSUFBSSxVQUFVLElBQUk7QUFBQSxJQUFDO0FBQUMsUUFBSSxTQUFPLENBQUM7QUFBRSxhQUFRLElBQUUsR0FBRSxJQUFFLElBQUksUUFBTyxLQUFJO0FBQUMsWUFBTSxJQUFFLElBQUksV0FBVyxDQUFDO0FBQUUsVUFBRyxJQUFFLEtBQUk7QUFBQyxlQUFPLEtBQUssQ0FBQztBQUFBLE1BQUMsV0FBUyxJQUFFLE1BQUs7QUFBQyxlQUFPLEtBQUssS0FBRyxJQUFFLEdBQUc7QUFBRSxlQUFPLEtBQUssSUFBRSxLQUFHLEdBQUc7QUFBQSxNQUFDLFdBQVUsS0FBRSxVQUFRLE9BQU07QUFBQztBQUFJLGNBQU0sS0FBRyxJQUFJLFdBQVcsQ0FBQztBQUFFLFlBQUcsS0FBRyxJQUFJLFVBQVMsTUFBRyxXQUFTLE9BQU07QUFBQyxnQkFBTSxJQUFJLE1BQU0sc0JBQXNCO0FBQUEsUUFBQztBQUFDLGNBQU0sT0FBSyxRQUFRLE1BQUUsU0FBTyxNQUFLLE1BQUc7QUFBTSxlQUFPLEtBQUssUUFBTSxLQUFHLEdBQUc7QUFBRSxlQUFPLEtBQUssUUFBTSxLQUFHLEtBQUcsR0FBRztBQUFFLGVBQU8sS0FBSyxRQUFNLElBQUUsS0FBRyxHQUFHO0FBQUUsZUFBTyxLQUFLLE9BQUssS0FBRyxHQUFHO0FBQUEsTUFBQyxPQUFLO0FBQUMsZUFBTyxLQUFLLEtBQUcsS0FBRyxHQUFHO0FBQUUsZUFBTyxLQUFLLEtBQUcsSUFBRSxLQUFHLEdBQUc7QUFBRSxlQUFPLEtBQUssSUFBRSxLQUFHLEdBQUc7QUFBQSxNQUFDO0FBQUEsSUFBQztBQUFDLFdBQU8sU0FBUyxNQUFNO0FBQUEsRUFBQztBQUFDLHNCQUFvQixPQUFNO0FBQUMsVUFBTSxPQUFJLFNBQU8sTUFBTSxTQUFTLEVBQUU7QUFBRSxXQUFNLFFBQU0sS0FBSSxVQUFVLEtBQUksU0FBTyxDQUFDO0FBQUEsRUFBQztBQUFDLGdDQUE4QixPQUFNLFNBQVE7QUFBQyxXQUFNLE1BQUksa0JBQWtCLE9BQU0sT0FBTyxFQUFFLElBQUksZUFBVztBQUFDLFVBQUcsWUFBVSxLQUFJO0FBQUMsZ0JBQU87QUFBQSxlQUFnQjtBQUFFLG1CQUFNO0FBQUEsZUFBVztBQUFFLG1CQUFNO0FBQUEsZUFBVztBQUFHLG1CQUFNO0FBQUEsZUFBVztBQUFHLG1CQUFNO0FBQUEsZUFBVztBQUFHLG1CQUFNO0FBQUEsZUFBVztBQUFHLG1CQUFNO0FBQUE7QUFBTyxZQUFHLGFBQVcsTUFBSSxZQUFVLEtBQUk7QUFBQyxpQkFBTyxPQUFPLGFBQWEsU0FBUztBQUFBLFFBQUM7QUFBQSxNQUFDO0FBQUMsVUFBRyxhQUFXLE9BQU07QUFBQyxlQUFPLFdBQVcsU0FBUztBQUFBLE1BQUM7QUFBQyxtQkFBVztBQUFNLGFBQU8sV0FBWSxjQUFXLEtBQUcsUUFBTSxLQUFLLElBQUUsV0FBWSxhQUFVLFFBQU0sS0FBSztBQUFBLElBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFFO0FBQUEsRUFBRztBQUFDLHlCQUF1QixZQUFXO0FBQUMsV0FBTyxXQUFXLElBQUksZUFBVztBQUFDLFVBQUcsYUFBVyxPQUFNO0FBQUMsZUFBTyxPQUFPLGFBQWEsU0FBUztBQUFBLE1BQUM7QUFBQyxtQkFBVztBQUFNLGFBQU8sT0FBTyxhQUFjLGNBQVcsS0FBRyxRQUFNLE9BQU8sYUFBVSxRQUFNLEtBQUs7QUFBQSxJQUFDLENBQUMsRUFBRSxLQUFLLEVBQUU7QUFBQSxFQUFDO0FBQUMsd0JBQXNCLE9BQU0sU0FBUTtBQUFDLFdBQU8sY0FBYyxrQkFBa0IsT0FBTSxPQUFPLENBQUM7QUFBQSxFQUFDO0FBQUMsNEJBQTBCLEtBQUksT0FBSyx5QkFBeUIsU0FBUTtBQUFDLFdBQU8sa0JBQWtCLFlBQVksS0FBSSxJQUFJLENBQUM7QUFBQSxFQUFDO0FBQWMsK0JBQTZCLE1BQUs7QUFBQyxVQUFNLFFBQU0sWUFBWSxJQUFJO0FBQUUsUUFBRyxNQUFNLFNBQU8sSUFBRztBQUFDLFlBQU0sSUFBSSxNQUFNLDJDQUEyQztBQUFBLElBQUM7QUFBQyxXQUFPLFFBQVEsT0FBTyxDQUFDLE9BQU0sUUFBUSxDQUFDLEVBQUUsTUFBTSxHQUFFLEVBQUUsQ0FBQztBQUFBLEVBQUM7QUFBQyw4QkFBNEIsT0FBTTtBQUFDLFVBQU0sUUFBSyxTQUFTLEtBQUs7QUFBRSxRQUFHLE1BQUssV0FBUyxJQUFHO0FBQUMsWUFBTSxJQUFJLE1BQU0scUNBQXFDO0FBQUEsSUFBQztBQUFDLFFBQUcsTUFBSyxRQUFNLEdBQUU7QUFBQyxZQUFNLElBQUksTUFBTSw2Q0FBNkM7QUFBQSxJQUFDO0FBQUMsUUFBSSxTQUFPO0FBQUcsV0FBTSxNQUFLLFNBQU8sT0FBSyxHQUFFO0FBQUM7QUFBQSxJQUFRO0FBQUMsV0FBTyxhQUFhLE1BQUssTUFBTSxHQUFFLE1BQU0sQ0FBQztBQUFBLEVBQUM7QUFBYyxrQkFBZ0IsT0FBSztBQUFDLFFBQUcsTUFBSyxTQUFPLE1BQUksR0FBRTtBQUFDLFlBQU0sSUFBSSxNQUFNLFVBQVU7QUFBQSxJQUFDO0FBQUMsUUFBSSxTQUFPLENBQUM7QUFBRSxhQUFRLElBQUUsR0FBRSxJQUFFLE1BQUssUUFBTyxLQUFHLEdBQUU7QUFBQyxhQUFPLEtBQUssU0FBUyxNQUFLLFVBQVUsR0FBRSxJQUFFLENBQUMsR0FBRSxFQUFFLENBQUM7QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQU07QUFBQyx1QkFBcUIsT0FBSyxNQUFLO0FBQUMsUUFBRyxDQUFDLE1BQUs7QUFBQyxhQUFLLFNBQVMsT0FBTTtBQUFDLGVBQU0sQ0FBQyxTQUFTLE9BQU0sRUFBRSxDQUFDO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQyxRQUFJLEtBQUc7QUFBRSxRQUFJLFNBQU8sQ0FBQztBQUFFLFVBQUssTUFBTSxHQUFHLEVBQUUsUUFBUSxVQUFNO0FBQUMsVUFBSSxRQUFNLEtBQUssTUFBTSxHQUFHO0FBQUUsWUFBSSxTQUFTLE1BQU0sSUFBRyxFQUFFO0FBQUUsYUFBTyxNQUFJLEtBQUssTUFBTSxFQUFFO0FBQUEsSUFBQyxDQUFDO0FBQUUsV0FBTztBQUFBLEVBQU07QUFBQyw0QkFBMEIsT0FBSztBQUFDLFFBQUksS0FBRztBQUFFLFdBQU8sTUFBSyxNQUFNLEdBQUcsRUFBRSxJQUFJLE9BQUc7QUFBQyxVQUFJLFFBQU0sRUFBRSxNQUFNLEdBQUc7QUFBRSxVQUFHLE1BQU0sV0FBUyxHQUFFO0FBQUMsY0FBTSxLQUFHO0FBQUEsTUFBRyxXQUFTLE1BQU0sT0FBSyxJQUFHO0FBQUMsY0FBTSxLQUFHO0FBQUEsTUFBRztBQUFDLFVBQUksS0FBRyxLQUFHLFNBQVMsTUFBTSxJQUFHLEVBQUU7QUFBRSxXQUFHLFNBQVMsTUFBTSxJQUFHLEVBQUU7QUFBRSxhQUFNLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRTtBQUFBLElBQUMsQ0FBQztBQUFBLEVBQUM7QUFBQyxvQkFBa0IsT0FBTSxRQUFPO0FBQUMsUUFBSSxLQUFHO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxPQUFPLFFBQU8sS0FBSTtBQUFDLFVBQUksU0FBTSxPQUFPO0FBQUcsWUFBSSxPQUFNO0FBQUUsVUFBRyxTQUFPLE1BQUksU0FBTyxLQUFHLE9BQU0sS0FBSSxTQUFNLE1BQUssUUFBTSxLQUFHLE9BQUssR0FBRTtBQUFDLFlBQUcsT0FBTSxLQUFHLE9BQU0sRUFBRSxRQUFRLFFBQU0sRUFBRSxNQUFJLElBQUc7QUFBQztBQUFBLFFBQVE7QUFBQyxlQUFPO0FBQUEsTUFBSztBQUFBLElBQUM7QUFBQyxXQUFPO0FBQUEsRUFBSTtBQUFDLE1BQU0sbUJBQWlCLGlCQUFpQiw4N0NBQTg3QztBQUFFLE1BQU0sa0JBQWdCLHNEQUFzRCxNQUFNLEdBQUcsRUFBRSxJQUFJLE9BQUcsU0FBUyxHQUFFLEVBQUUsQ0FBQztBQUFFLE1BQU0sbUJBQWlCLENBQUMsRUFBQyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLENBQUMsRUFBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLENBQUMsRUFBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsQ0FBQyxHQUFFLEdBQUUsQ0FBQyxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLENBQUMsSUFBRyxJQUFHLEVBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsQ0FBQyxFQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLENBQUMsRUFBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsS0FBSSxHQUFFLEdBQUUsR0FBRSxNQUFLLEdBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEtBQUksR0FBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxNQUFLLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsS0FBSSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLE1BQUssR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxTQUFRLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLENBQUMsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxFQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxTQUFRLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLENBQUMsR0FBRSxHQUFFLEdBQUUsRUFBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLENBQUMsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxTQUFRLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxTQUFRLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxDQUFDLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxDQUFDLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxDQUFDLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxF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QUUsS0FBRyxFQUFFLElBQUUsTUFBSSxFQUFFLElBQUUsS0FBSSxDQUFDO0FBQUUsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyxRQUFJLElBQUUsS0FBSyxFQUFFO0FBQUcsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyxTQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxLQUFJO0FBQUMsVUFBSSxLQUFFLENBQUMsQ0FBRSxLQUFFO0FBQUksVUFBSSxJQUFFLFVBQVUsU0FBUyxHQUFFLENBQUMsR0FBRSxPQUFPLElBQUUsR0FBRSxHQUFFLENBQUMsR0FBRSxHQUFFLEVBQUUsSUFBRyxPQUFPLEdBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRTtBQUFFLFVBQUUsU0FBUyxHQUFFLEVBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRTtBQUFBLElBQUM7QUFBQyxTQUFLLEVBQUUsS0FBRyxRQUFRLEtBQUssRUFBRSxJQUFHLENBQUM7QUFBRSxTQUFLLEVBQUUsS0FBRyxRQUFRLEtBQUssRUFBRSxJQUFHLENBQUM7QUFBRSxTQUFLLEVBQUUsS0FBRyxRQUFRLEtBQUssRUFBRSxJQUFHLENBQUM7QUFBRSxTQUFLLEVBQUUsS0FBRyxRQUFRLEtBQUssRUFBRSxJQUFHLENBQUM7QUFBRSxTQUFLLEVBQUUsS0FBRyxRQUFRLEtBQUssRUFBRSxJQUFHLENBQUM7QUFBQSxFQUFDO0FBQUUsT0FBSyxVQUFVLFVBQVEsaUJBQWdCLEtBQUk7QUFBQyxRQUFHLFFBQU07QUFBTSxhQUFPLE1BQU0sUUFBUSxLQUFLLEdBQUUsS0FBSztBQUFBO0FBQU8sYUFBTyxNQUFNLFFBQVEsS0FBSyxHQUFFLEtBQUs7QUFBQSxFQUFDO0FBQWUsTUFBSSxVQUFRLE1BQU07QUFBTSxNQUFJLFlBQVUsTUFBTTtBQUFRLE1BQUksWUFBVSxNQUFNO0FBQVEsTUFBSSxTQUFPLFNBQVM7QUFBSyxNQUFJLFVBQVEsU0FBUztBQUFNLE1BQUksV0FBUyxTQUFTO0FBQU8sTUFBSSxXQUFTLFNBQVM7QUFBTyxNQUFJLFdBQVMsU0FBUztBQUFPLE1BQUksV0FBUyxTQUFTO0FBQU8sTUFBSSxjQUFZLE9BQU87QUFBVSxNQUFJLFdBQVMsQ0FBQyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFVO0FBQUUsb0JBQWlCO0FBQUMsUUFBRyxDQUFFLGlCQUFnQjtBQUFRLGFBQU8sSUFBSTtBQUFPLGdCQUFZLEtBQUssSUFBSTtBQUFFLFNBQUssSUFBRSxDQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsVUFBVTtBQUFFLFNBQUssSUFBRTtBQUFTLFNBQUssSUFBRSxJQUFJLE1BQU0sRUFBRTtBQUFBLEVBQUM7QUFBQyxRQUFNLFNBQVMsUUFBTyxXQUFXO0FBQUUsTUFBSSxPQUFLO0FBQU8sU0FBTyxZQUFVO0FBQUksU0FBTyxVQUFRO0FBQUksU0FBTyxlQUFhO0FBQUksU0FBTyxZQUFVO0FBQUcsU0FBTyxVQUFVLFVBQVEsa0JBQWlCLEtBQUksT0FBTTtBQUFDLFFBQUksSUFBRSxLQUFLO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxJQUFHO0FBQUksUUFBRSxLQUFHLElBQUksUUFBTTtBQUFHLFdBQUssSUFBRSxFQUFFLFFBQU87QUFBSSxRQUFFLEtBQUcsVUFBVSxTQUFTLEVBQUUsSUFBRSxFQUFFLEdBQUUsRUFBRSxJQUFFLElBQUcsU0FBUyxFQUFFLElBQUUsR0FBRyxHQUFFLEVBQUUsSUFBRSxHQUFHO0FBQUUsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyxRQUFJLElBQUUsS0FBSyxFQUFFO0FBQUcsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyxRQUFJLEtBQUUsS0FBSyxFQUFFO0FBQUcsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyx1QkFBbUIsS0FBSyxFQUFFLFdBQVMsRUFBRSxNQUFNO0FBQUUsU0FBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLFVBQUksS0FBRyxVQUFVLEdBQUUsU0FBUyxDQUFDLEdBQUUsT0FBTyxHQUFFLElBQUUsQ0FBQyxHQUFFLEtBQUssRUFBRSxJQUFHLEVBQUUsRUFBRTtBQUFFLFVBQUksS0FBRyxRQUFRLFNBQVMsQ0FBQyxHQUFFLFFBQVEsR0FBRSxHQUFFLENBQUMsQ0FBQztBQUFFLFVBQUU7QUFBRSxVQUFFO0FBQUUsV0FBRTtBQUFFLFVBQUUsUUFBUSxHQUFFLEVBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRTtBQUFFLFVBQUU7QUFBRSxVQUFFLFFBQVEsSUFBRyxFQUFFO0FBQUEsSUFBQztBQUFDLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsRUFBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFBLEVBQUM7QUFBRSxTQUFPLFVBQVUsVUFBUSxpQkFBZ0IsS0FBSTtBQUFDLFFBQUcsUUFBTTtBQUFNLGFBQU8sTUFBTSxRQUFRLEtBQUssR0FBRSxLQUFLO0FBQUE7QUFBTyxhQUFPLE1BQU0sUUFBUSxLQUFLLEdBQUUsS0FBSztBQUFBLEVBQUM7QUFBZSxvQkFBaUI7QUFBQyxRQUFHLENBQUUsaUJBQWdCO0FBQVEsYUFBTyxJQUFJO0FBQU8sU0FBSyxLQUFLLElBQUk7QUFBRSxTQUFLLElBQUUsQ0FBQyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVU7QUFBQSxFQUFDO0FBQUMsUUFBTSxTQUFTLFFBQU8sSUFBSTtBQUFFLE1BQUksT0FBSztBQUFPLFNBQU8sWUFBVTtBQUFJLFNBQU8sVUFBUTtBQUFJLFNBQU8sZUFBYTtBQUFJLFNBQU8sWUFBVTtBQUFHLFNBQU8sVUFBVSxVQUFRLGlCQUFnQixLQUFJO0FBQUMsUUFBRyxRQUFNO0FBQU0sYUFBTyxNQUFNLFFBQVEsS0FBSyxFQUFFLE1BQU0sR0FBRSxDQUFDLEdBQUUsS0FBSztBQUFBO0FBQU8sYUFBTyxNQUFNLFFBQVEsS0FBSyxFQUFFLE1BQU0sR0FBRSxDQUFDLEdBQUUsS0FBSztBQUFBLEVBQUM7QUFBZSxNQUFJLGNBQVksTUFBTTtBQUFVLE1BQUksY0FBWSxNQUFNO0FBQVUsTUFBSSxhQUFXLE1BQU07QUFBUyxNQUFJLGFBQVcsTUFBTTtBQUFTLE1BQUksVUFBUSxNQUFNO0FBQU0sTUFBSSxhQUFXLE1BQU07QUFBUyxNQUFJLGFBQVcsTUFBTTtBQUFTLE1BQUksZUFBYSxNQUFNO0FBQVcsTUFBSSxlQUFhLE1BQU07QUFBVyxNQUFJLGVBQWEsTUFBTTtBQUFXLE1BQUksZUFBYSxNQUFNO0FBQVcsTUFBSSxjQUFZLE9BQU87QUFBVSxNQUFJLFdBQVMsQ0FBQyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxVQUFVO0FBQUUsb0JBQWlCO0FBQUMsUUFBRyxDQUFFLGlCQUFnQjtBQUFRLGFBQU8sSUFBSTtBQUFPLGdCQUFZLEtBQUssSUFBSTtBQUFFLFNBQUssSUFBRSxDQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFNBQVM7QUFBRSxTQUFLLElBQUU7QUFBUyxTQUFLLElBQUUsSUFBSSxNQUFNLEdBQUc7QUFBQSxFQUFDO0FBQUMsUUFBTSxTQUFTLFFBQU8sV0FBVztBQUFFLE1BQUksT0FBSztBQUFPLFNBQU8sWUFBVTtBQUFLLFNBQU8sVUFBUTtBQUFJLFNBQU8sZUFBYTtBQUFJLFNBQU8sWUFBVTtBQUFJLFNBQU8sVUFBVSxnQkFBYyx1QkFBdUIsS0FBSSxPQUFNO0FBQUMsUUFBSSxJQUFFLEtBQUs7QUFBRSxhQUFRLElBQUUsR0FBRSxJQUFFLElBQUc7QUFBSSxRQUFFLEtBQUcsSUFBSSxRQUFNO0FBQUcsV0FBSyxJQUFFLEVBQUUsUUFBTyxLQUFHLEdBQUU7QUFBQyxVQUFJLFFBQU0sVUFBVSxFQUFFLElBQUUsSUFBRyxFQUFFLElBQUUsRUFBRTtBQUFFLFVBQUksUUFBTSxVQUFVLEVBQUUsSUFBRSxJQUFHLEVBQUUsSUFBRSxFQUFFO0FBQUUsVUFBSSxRQUFNLEVBQUUsSUFBRTtBQUFJLFVBQUksUUFBTSxFQUFFLElBQUU7QUFBSSxVQUFJLFFBQU0sVUFBVSxFQUFFLElBQUUsS0FBSSxFQUFFLElBQUUsR0FBRztBQUFFLFVBQUksUUFBTSxVQUFVLEVBQUUsSUFBRSxLQUFJLEVBQUUsSUFBRSxHQUFHO0FBQUUsVUFBSSxRQUFNLEVBQUUsSUFBRTtBQUFJLFVBQUksUUFBTSxFQUFFLElBQUU7QUFBSSxRQUFFLEtBQUcsYUFBYSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLEtBQUs7QUFBRSxRQUFFLElBQUUsS0FBRyxhQUFhLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sS0FBSztBQUFBLElBQUM7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLFVBQVEsa0JBQWlCLEtBQUksT0FBTTtBQUFDLFNBQUssY0FBYyxLQUFJLEtBQUs7QUFBRSxRQUFJLElBQUUsS0FBSztBQUFFLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBRyxRQUFJLEtBQUcsS0FBSyxFQUFFO0FBQUcsUUFBSSxLQUFHLEtBQUssRUFBRTtBQUFHLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBRyxRQUFJLEtBQUcsS0FBSyxFQUFFO0FBQUcsUUFBSSxLQUFHLEtBQUssRUFBRTtBQUFHLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBRyxRQUFJLEtBQUcsS0FBSyxFQUFFO0FBQUcsUUFBSSxLQUFHLEtBQUssRUFBRTtBQUFHLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBRyxRQUFJLEtBQUcsS0FBSyxFQUFFO0FBQUksUUFBSSxLQUFHLEtBQUssRUFBRTtBQUFJLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBSSxRQUFJLEtBQUcsS0FBSyxFQUFFO0FBQUksUUFBSSxLQUFHLEtBQUssRUFBRTtBQUFJLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBSSx1QkFBbUIsS0FBSyxFQUFFLFdBQVMsRUFBRSxNQUFNO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBRyxHQUFFO0FBQUMsVUFBSSxRQUFNO0FBQUcsVUFBSSxRQUFNO0FBQUcsVUFBSSxRQUFNLFVBQVUsSUFBRyxFQUFFO0FBQUUsVUFBSSxRQUFNLFVBQVUsSUFBRyxFQUFFO0FBQUUsVUFBSSxRQUFNLFFBQVEsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEVBQUU7QUFBRSxVQUFJLFFBQU0sUUFBUSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsRUFBRTtBQUFFLFVBQUksUUFBTSxLQUFLLEVBQUU7QUFBRyxVQUFJLFFBQU0sS0FBSyxFQUFFLElBQUU7QUFBRyxVQUFJLFFBQU0sRUFBRTtBQUFHLFVBQUksUUFBTSxFQUFFLElBQUU7QUFBRyxVQUFJLFFBQU0sYUFBYSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxLQUFLO0FBQUUsVUFBSSxRQUFNLGFBQWEsT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sS0FBSztBQUFFLGNBQU0sVUFBVSxJQUFHLEVBQUU7QUFBRSxjQUFNLFVBQVUsSUFBRyxFQUFFO0FBQUUsY0FBTSxTQUFTLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxFQUFFO0FBQUUsY0FBTSxTQUFTLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxFQUFFO0FBQUUsVUFBSSxRQUFNLFdBQVcsT0FBTSxPQUFNLE9BQU0sS0FBSztBQUFFLFVBQUksUUFBTSxXQUFXLE9BQU0sT0FBTSxPQUFNLEtBQUs7QUFBRSxXQUFHO0FBQUcsV0FBRztBQUFHLFdBQUc7QUFBRyxXQUFHO0FBQUcsV0FBRztBQUFHLFdBQUc7QUFBRyxXQUFHLFdBQVcsSUFBRyxJQUFHLE9BQU0sS0FBSztBQUFFLFdBQUcsV0FBVyxJQUFHLElBQUcsT0FBTSxLQUFLO0FBQUUsV0FBRztBQUFHLFdBQUc7QUFBRyxXQUFHO0FBQUcsV0FBRztBQUFHLFdBQUc7QUFBRyxXQUFHO0FBQUcsV0FBRyxXQUFXLE9BQU0sT0FBTSxPQUFNLEtBQUs7QUFBRSxXQUFHLFdBQVcsT0FBTSxPQUFNLE9BQU0sS0FBSztBQUFBLElBQUM7QUFBQyxZQUFRLEtBQUssR0FBRSxHQUFFLElBQUcsRUFBRTtBQUFFLFlBQVEsS0FBSyxHQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUUsWUFBUSxLQUFLLEdBQUUsR0FBRSxJQUFHLEVBQUU7QUFBRSxZQUFRLEtBQUssR0FBRSxHQUFFLElBQUcsRUFBRTtBQUFFLFlBQVEsS0FBSyxHQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUUsWUFBUSxLQUFLLEdBQUUsSUFBRyxJQUFHLEVBQUU7QUFBRSxZQUFRLEtBQUssR0FBRSxJQUFHLElBQUcsRUFBRTtBQUFFLFlBQVEsS0FBSyxHQUFFLElBQUcsSUFBRyxFQUFFO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxVQUFRLGlCQUFnQixLQUFJO0FBQUMsUUFBRyxRQUFNO0FBQU0sYUFBTyxNQUFNLFFBQVEsS0FBSyxHQUFFLEtBQUs7QUFBQTtBQUFPLGFBQU8sTUFBTSxRQUFRLEtBQUssR0FBRSxLQUFLO0FBQUEsRUFBQztBQUFFLG1CQUFpQixJQUFHLElBQUcsSUFBRyxJQUFHLElBQUc7QUFBQyxRQUFJLEtBQUUsS0FBRyxLQUFHLENBQUMsS0FBRztBQUFHLFFBQUcsS0FBRTtBQUFFLFlBQUc7QUFBVyxXQUFPO0FBQUEsRUFBQztBQUFDLG1CQUFpQixJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRztBQUFDLFFBQUksS0FBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsUUFBRyxLQUFFO0FBQUUsWUFBRztBQUFXLFdBQU87QUFBQSxFQUFDO0FBQUMsb0JBQWtCLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRztBQUFDLFFBQUksS0FBRSxLQUFHLEtBQUcsS0FBRyxLQUFHLEtBQUc7QUFBRyxRQUFHLEtBQUU7QUFBRSxZQUFHO0FBQVcsV0FBTztBQUFBLEVBQUM7QUFBQyxvQkFBa0IsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUc7QUFBQyxRQUFJLEtBQUUsS0FBRyxLQUFHLEtBQUcsS0FBRyxLQUFHO0FBQUcsUUFBRyxLQUFFO0FBQUUsWUFBRztBQUFXLFdBQU87QUFBQSxFQUFDO0FBQUMscUJBQW1CLElBQUcsSUFBRztBQUFDLFFBQUksUUFBTSxZQUFZLElBQUcsSUFBRyxFQUFFO0FBQUUsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLENBQUM7QUFBRSxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsQ0FBQztBQUFFLFFBQUksS0FBRSxRQUFNLFFBQU07QUFBTSxRQUFHLEtBQUU7QUFBRSxZQUFHO0FBQVcsV0FBTztBQUFBLEVBQUM7QUFBQyxxQkFBbUIsSUFBRyxJQUFHO0FBQUMsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLEVBQUU7QUFBRSxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsQ0FBQztBQUFFLFFBQUksUUFBTSxZQUFZLElBQUcsSUFBRyxDQUFDO0FBQUUsUUFBSSxLQUFFLFFBQU0sUUFBTTtBQUFNLFFBQUcsS0FBRTtBQUFFLFlBQUc7QUFBVyxXQUFPO0FBQUEsRUFBQztBQUFDLHFCQUFtQixJQUFHLElBQUc7QUFBQyxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsRUFBRTtBQUFFLFFBQUksUUFBTSxZQUFZLElBQUcsSUFBRyxFQUFFO0FBQUUsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLENBQUM7QUFBRSxRQUFJLEtBQUUsUUFBTSxRQUFNO0FBQU0sUUFBRyxLQUFFO0FBQUUsWUFBRztBQUFXLFdBQU87QUFBQSxFQUFDO0FBQUMscUJBQW1CLElBQUcsSUFBRztBQUFDLFFBQUksUUFBTSxZQUFZLElBQUcsSUFBRyxFQUFFO0FBQUUsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLEVBQUU7QUFBRSxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsQ0FBQztBQUFFLFFBQUksS0FBRSxRQUFNLFFBQU07QUFBTSxRQUFHLEtBQUU7QUFBRSxZQUFHO0FBQVcsV0FBTztBQUFBLEVBQUM7QUFBQyxxQkFBbUIsSUFBRyxJQUFHO0FBQUMsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLENBQUM7QUFBRSxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsQ0FBQztBQUFFLFFBQUksUUFBTSxXQUFXLElBQUcsSUFBRyxDQUFDO0FBQUUsUUFBSSxLQUFFLFFBQU0sUUFBTTtBQUFNLFFBQUcsS0FBRTtBQUFFLFlBQUc7QUFBVyxXQUFPO0FBQUEsRUFBQztBQUFDLHFCQUFtQixJQUFHLElBQUc7QUFBQyxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsQ0FBQztBQUFFLFFBQUksUUFBTSxZQUFZLElBQUcsSUFBRyxDQUFDO0FBQUUsUUFBSSxRQUFNLFdBQVcsSUFBRyxJQUFHLENBQUM7QUFBRSxRQUFJLEtBQUUsUUFBTSxRQUFNO0FBQU0sUUFBRyxLQUFFO0FBQUUsWUFBRztBQUFXLFdBQU87QUFBQSxFQUFDO0FBQUMscUJBQW1CLElBQUcsSUFBRztBQUFDLFFBQUksUUFBTSxZQUFZLElBQUcsSUFBRyxFQUFFO0FBQUUsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLEVBQUU7QUFBRSxRQUFJLFFBQU0sV0FBVyxJQUFHLElBQUcsQ0FBQztBQUFFLFFBQUksS0FBRSxRQUFNLFFBQU07QUFBTSxRQUFHLEtBQUU7QUFBRSxZQUFHO0FBQVcsV0FBTztBQUFBLEVBQUM7QUFBQyxxQkFBbUIsSUFBRyxJQUFHO0FBQUMsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLEVBQUU7QUFBRSxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsRUFBRTtBQUFFLFFBQUksUUFBTSxXQUFXLElBQUcsSUFBRyxDQUFDO0FBQUUsUUFBSSxLQUFFLFFBQU0sUUFBTTtBQUFNLFFBQUcsS0FBRTtBQUFFLFlBQUc7QUFBVyxXQUFPO0FBQUEsRUFBQztBQUFjLG9CQUFpQjtBQUFDLFFBQUcsQ0FBRSxpQkFBZ0I7QUFBUSxhQUFPLElBQUk7QUFBTyxTQUFLLEtBQUssSUFBSTtBQUFFLFNBQUssSUFBRSxDQUFDLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVU7QUFBQSxFQUFDO0FBQUMsUUFBTSxTQUFTLFFBQU8sSUFBSTtBQUFFLE1BQUksT0FBSztBQUFPLFNBQU8sWUFBVTtBQUFLLFNBQU8sVUFBUTtBQUFJLFNBQU8sZUFBYTtBQUFJLFNBQU8sWUFBVTtBQUFJLFNBQU8sVUFBVSxVQUFRLGlCQUFnQixLQUFJO0FBQUMsUUFBRyxRQUFNO0FBQU0sYUFBTyxNQUFNLFFBQVEsS0FBSyxFQUFFLE1BQU0sR0FBRSxFQUFFLEdBQUUsS0FBSztBQUFBO0FBQU8sYUFBTyxNQUFNLFFBQVEsS0FBSyxFQUFFLE1BQU0sR0FBRSxFQUFFLEdBQUUsS0FBSztBQUFBLEVBQUM7QUFBZSxNQUFJLE9BQUs7QUFBRyxNQUFJLFNBQU87QUFBSyxNQUFJLFNBQU87QUFBSyxNQUFJLFNBQU87QUFBSyxNQUFJLFNBQU87QUFBSyxNQUFJLE1BQUksRUFBQyxNQUFVLFFBQWMsUUFBYyxRQUFjLE9BQWE7QUFBZSxNQUFJLFdBQVMsTUFBTTtBQUFPLE1BQUksVUFBUSxNQUFNO0FBQU0sTUFBSSxZQUFVLE1BQU07QUFBUSxNQUFJLFlBQVUsTUFBTTtBQUFRLE1BQUksY0FBWSxPQUFPO0FBQVUsdUJBQW9CO0FBQUMsUUFBRyxDQUFFLGlCQUFnQjtBQUFXLGFBQU8sSUFBSTtBQUFVLGdCQUFZLEtBQUssSUFBSTtBQUFFLFNBQUssSUFBRSxDQUFDLFlBQVcsWUFBVyxZQUFXLFdBQVUsVUFBVTtBQUFFLFNBQUssU0FBTztBQUFBLEVBQVE7QUFBQyxRQUFNLFNBQVMsV0FBVSxXQUFXO0FBQUUsTUFBSSxZQUFVO0FBQVUsWUFBVSxZQUFVO0FBQUksWUFBVSxVQUFRO0FBQUksWUFBVSxlQUFhO0FBQUksWUFBVSxZQUFVO0FBQUcsWUFBVSxVQUFVLFVBQVEsaUJBQWdCLEtBQUksT0FBTTtBQUFDLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyxRQUFJLElBQUUsS0FBSyxFQUFFO0FBQUcsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyxRQUFJLElBQUUsS0FBSyxFQUFFO0FBQUcsUUFBSSxLQUFHO0FBQUUsUUFBSSxLQUFHO0FBQUUsUUFBSSxLQUFHO0FBQUUsUUFBSSxLQUFHO0FBQUUsUUFBSSxLQUFHO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxJQUFHLEtBQUk7QUFBQyxVQUFJLElBQUUsUUFBUSxTQUFTLFVBQVUsR0FBRSxFQUFFLEdBQUUsR0FBRSxHQUFFLENBQUMsR0FBRSxJQUFJLEVBQUUsS0FBRyxRQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUUsRUFBRSxFQUFFLEdBQUUsQ0FBQztBQUFFLFVBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRSxTQUFTLEdBQUUsRUFBRTtBQUFFLFVBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRSxRQUFRLFNBQVMsVUFBVSxJQUFHLEVBQUUsS0FBRyxHQUFFLElBQUcsSUFBRyxFQUFFLEdBQUUsSUFBSSxHQUFHLEtBQUcsUUFBTyxHQUFHLENBQUMsQ0FBQyxHQUFFLEdBQUcsRUFBRSxHQUFFLEVBQUU7QUFBRSxXQUFHO0FBQUcsV0FBRztBQUFHLFdBQUcsU0FBUyxJQUFHLEVBQUU7QUFBRSxXQUFHO0FBQUcsV0FBRztBQUFBLElBQUM7QUFBQyxRQUFFLFVBQVUsS0FBSyxFQUFFLElBQUcsR0FBRSxFQUFFO0FBQUUsU0FBSyxFQUFFLEtBQUcsVUFBVSxLQUFLLEVBQUUsSUFBRyxHQUFFLEVBQUU7QUFBRSxTQUFLLEVBQUUsS0FBRyxVQUFVLEtBQUssRUFBRSxJQUFHLEdBQUUsRUFBRTtBQUFFLFNBQUssRUFBRSxLQUFHLFVBQVUsS0FBSyxFQUFFLElBQUcsR0FBRSxFQUFFO0FBQUUsU0FBSyxFQUFFLEtBQUcsVUFBVSxLQUFLLEVBQUUsSUFBRyxHQUFFLEVBQUU7QUFBRSxTQUFLLEVBQUUsS0FBRztBQUFBLEVBQUM7QUFBRSxZQUFVLFVBQVUsVUFBUSxpQkFBZ0IsS0FBSTtBQUFDLFFBQUcsUUFBTTtBQUFNLGFBQU8sTUFBTSxRQUFRLEtBQUssR0FBRSxRQUFRO0FBQUE7QUFBTyxhQUFPLE1BQU0sUUFBUSxLQUFLLEdBQUUsUUFBUTtBQUFBLEVBQUM7QUFBRSxhQUFXLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLEtBQUc7QUFBRyxhQUFPLElBQUUsSUFBRTtBQUFBLGFBQVUsS0FBRztBQUFHLGFBQU8sSUFBRSxJQUFFLENBQUMsSUFBRTtBQUFBLGFBQVUsS0FBRztBQUFHLGFBQU8sS0FBRSxDQUFDLEtBQUc7QUFBQSxhQUFVLEtBQUc7QUFBRyxhQUFPLElBQUUsSUFBRSxJQUFFLENBQUM7QUFBQTtBQUFPLGFBQU8sSUFBRyxLQUFFLENBQUM7QUFBQSxFQUFFO0FBQUMsYUFBVyxHQUFFO0FBQUMsUUFBRyxLQUFHO0FBQUcsYUFBTztBQUFBLGFBQVUsS0FBRztBQUFHLGFBQU87QUFBQSxhQUFtQixLQUFHO0FBQUcsYUFBTztBQUFBLGFBQW1CLEtBQUc7QUFBRyxhQUFPO0FBQUE7QUFBZ0IsYUFBTztBQUFBLEVBQVU7QUFBQyxjQUFZLEdBQUU7QUFBQyxRQUFHLEtBQUc7QUFBRyxhQUFPO0FBQUEsYUFBbUIsS0FBRztBQUFHLGFBQU87QUFBQSxhQUFtQixLQUFHO0FBQUcsYUFBTztBQUFBLGFBQW1CLEtBQUc7QUFBRyxhQUFPO0FBQUE7QUFBZ0IsYUFBTztBQUFBLEVBQUM7QUFBQyxNQUFJLElBQUUsQ0FBQyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEVBQUU7QUFBRSxNQUFJLEtBQUcsQ0FBQyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEVBQUU7QUFBRSxNQUFJLElBQUUsQ0FBQyxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLENBQUM7QUFBRSxNQUFJLEtBQUcsQ0FBQyxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxHQUFFLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLEVBQUU7QUFBRSxNQUFJLFNBQU8sRUFBQyxVQUFtQjtBQUFlLGdCQUFjLE1BQUssTUFBSSxLQUFJO0FBQUMsUUFBRyxDQUFFLGlCQUFnQjtBQUFN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QU0sUUFBTSxRQUFRO0FBQU0sV0FBTSxTQUFPLFFBQVE7QUFBTyxxQkFBZ0IsS0FBSSxHQUFFLE1BQUs7QUFBQyxVQUFJLE1BQUksSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLFVBQVUsR0FBRSxJQUFJLElBQUUsQ0FBQztBQUFFLFVBQUksS0FBSyxDQUFDO0FBQUUsVUFBSSxLQUFHLEtBQUcsSUFBRTtBQUFFLFVBQUksSUFBRSxJQUFJLE1BQU07QUFBRSxlQUFRLElBQUUsR0FBRSxJQUFFLElBQUksUUFBTyxLQUFJO0FBQUMsWUFBSTtBQUFFLFlBQUksTUFBSSxFQUFFLE1BQU0sS0FBRyxDQUFDO0FBQUUsWUFBRyxFQUFFLE1BQU0sR0FBRTtBQUFDLGNBQUcsTUFBSyxPQUFJLEtBQUc7QUFBRSxnQkFBRyxPQUFJLEtBQUc7QUFBQTtBQUFTLGdCQUFFO0FBQUksWUFBRSxNQUFNLENBQUM7QUFBQSxRQUFDLE9BQUs7QUFBQyxjQUFFO0FBQUEsUUFBQztBQUFDLFlBQUksS0FBRztBQUFFLFVBQUUsT0FBTyxDQUFDO0FBQUEsTUFBQztBQUFDLGFBQU87QUFBQSxJQUFHO0FBQUMsV0FBTSxTQUFPO0FBQU8scUJBQWdCLElBQUcsSUFBRztBQUFDLFVBQUksTUFBSSxDQUFDLENBQUMsR0FBRSxDQUFDLENBQUM7QUFBRSxXQUFHLEdBQUcsTUFBTTtBQUFFLFdBQUcsR0FBRyxNQUFNO0FBQUUsVUFBSSxLQUFHO0FBQUUsVUFBSSxLQUFHO0FBQUUsVUFBSTtBQUFHLGFBQU0sR0FBRyxLQUFLLENBQUMsRUFBRSxJQUFFLEtBQUcsR0FBRyxLQUFLLENBQUMsRUFBRSxJQUFFLEdBQUU7QUFBQyxZQUFJLE1BQUksR0FBRyxNQUFNLENBQUMsSUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEdBQUcsTUFBTSxDQUFDLElBQUUsS0FBRztBQUFFLFlBQUcsUUFBTTtBQUFFLGdCQUFJO0FBQUcsWUFBRyxRQUFNO0FBQUUsZ0JBQUk7QUFBRyxZQUFJO0FBQUcsWUFBSSxPQUFJLE9BQUssR0FBRTtBQUFDLGVBQUc7QUFBQSxRQUFD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QUFBTyxRQUFJLE1BQUksT0FBTyxHQUFFLEdBQUUsS0FBSyxVQUFVO0FBQUUsUUFBSSxNQUFJLEtBQUssT0FBTyxNQUFLLE1BQUssSUFBSTtBQUFFLGFBQVEsSUFBRSxJQUFJLFNBQU8sR0FBRSxLQUFHLEdBQUUsS0FBSTtBQUFDLGVBQVEsSUFBRSxHQUFFLEtBQUcsS0FBRyxJQUFJLE9BQUssR0FBRTtBQUFJO0FBQUksVUFBRyxLQUFHO0FBQUU7QUFBSSxZQUFJLElBQUksS0FBSyxDQUFDO0FBQUUsVUFBRyxJQUFFO0FBQUU7QUFBTSxVQUFJLElBQUUsSUFBSTtBQUFHLGlCQUFXLE1BQUksQ0FBQztBQUFFLFVBQUcsRUFBRSxTQUFPLFVBQVM7QUFBQyxZQUFHLElBQUU7QUFBRSxnQkFBSSxJQUFJLFNBQVMsSUFBSSxJQUFFLEtBQUcsRUFBRTtBQUFBO0FBQU8sZ0JBQUksSUFBSSxTQUFTLElBQUksQ0FBQyxJQUFFLEtBQUcsR0FBRyxJQUFJLENBQUM7QUFBQSxNQUFDLE9BQUs7QUFBQyxZQUFHLElBQUU7QUFBRSxnQkFBSSxJQUFJLElBQUksSUFBSSxJQUFFLEtBQUcsRUFBRTtBQUFBO0FBQU8sZ0JBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFFLEtBQUcsR0FBRyxJQUFJLENBQUM7QUFBQSxNQUFDO0FBQUEsSUFBQztBQUFDLFdBQU8sRUFBRSxTQUFPLFdBQVMsSUFBSSxJQUFJLElBQUU7QUFBQSxFQUFHO0FBQUUsWUFBVSxVQUFVLGNBQVkscUJBQXFCLE1BQUssUUFBTyxRQUFPLEtBQUksZ0JBQWU7QUFBQyxRQUFJLFdBQVMsS0FBSztBQUFRLFFBQUksTUFBSSxLQUFLO0FBQVEsUUFBSSxNQUFJLEtBQUs7QUFBUSxRQUFJLE1BQUk7QUFBRSxRQUFJO0FBQUUsUUFBSTtBQUFFLFFBQUk7QUFBRSxTQUFJLElBQUUsR0FBRSxJQUFFLEtBQUksS0FBSTtBQUFDLFVBQUUsT0FBTztBQUFHLFVBQUksWUFBVSxFQUFFLGNBQWMsSUFBSTtBQUFFLGVBQVMsS0FBRyxVQUFVO0FBQUksVUFBSSxLQUFHLFVBQVU7QUFBQSxJQUFNO0FBQUMsU0FBSSxJQUFFLE1BQUksR0FBRSxLQUFHLEdBQUUsS0FBRyxHQUFFO0FBQUMsVUFBSSxJQUFFLElBQUU7QUFBRSxVQUFJLElBQUU7QUFBRSxVQUFHLFNBQVMsT0FBSyxLQUFHLFNBQVMsT0FBSyxHQUFFO0FBQUMsWUFBSSxLQUFHLE9BQU8sT0FBTyxJQUFHLFNBQVMsSUFBRyxLQUFLLFVBQVU7QUFBRSxZQUFJLEtBQUcsT0FBTyxPQUFPLElBQUcsU0FBUyxJQUFHLEtBQUssVUFBVTtBQUFFLGNBQUksS0FBSyxJQUFJLElBQUksR0FBRyxRQUFPLEdBQUc7QUFBRSxjQUFJLEtBQUssSUFBSSxJQUFJLEdBQUcsUUFBTyxHQUFHO0FBQUU7QUFBQSxNQUFRO0FBQUMsVUFBSSxPQUFLLENBQUMsT0FBTyxJQUFHLE1BQUssTUFBSyxPQUFPLEVBQUU7QUFBRSxVQUFHLE9BQU8sR0FBRyxFQUFFLElBQUksT0FBTyxHQUFHLENBQUMsTUFBSSxHQUFFO0FBQUMsYUFBSyxLQUFHLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRTtBQUFFLGFBQUssS0FBRyxPQUFPLEdBQUcsSUFBSSxFQUFFLFNBQVMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUFBLE1BQUMsV0FBUyxPQUFPLEdBQUcsRUFBRSxJQUFJLE9BQU8sR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFJLEdBQUU7QUFBQyxhQUFLLEtBQUcsT0FBTyxHQUFHLElBQUksRUFBRSxTQUFTLE9BQU8sRUFBRTtBQUFFLGFBQUssS0FBRyxPQUFPLEdBQUcsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQUEsTUFBQyxPQUFLO0FBQUMsYUFBSyxLQUFHLE9BQU8sR0FBRyxJQUFJLEVBQUUsU0FBUyxPQUFPLEVBQUU7QUFBRSxhQUFLLEtBQUcsT0FBTyxHQUFHLElBQUksRUFBRSxTQUFTLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFBQSxNQUFDO0FBQUMsVUFBSSxTQUFNLENBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLENB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QUk7QUFBQyxRQUFJLE1BQUksUUFBTSxLQUFLLElBQUUsS0FBSyxNQUFJLEdBQUcsS0FBSyxHQUFHO0FBQUUsUUFBSSxPQUFLLElBQUksR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLEVBQUUsUUFBUTtBQUFFLFFBQUksUUFBTSxLQUFLLE9BQU87QUFBRSxRQUFJLEtBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sSUFBSTtBQUFFLFFBQUksS0FBRyxNQUFNLE9BQU8sRUFBQyxFQUFFLFFBQVE7QUFBRSxRQUFJLEtBQUcsTUFBTSxPQUFPLEVBQUMsRUFBRSxRQUFRO0FBQUUsV0FBTSxDQUFDLElBQUcsRUFBRTtBQUFBLEVBQUM7QUFBRSxhQUFXLFVBQVUsZ0JBQWMsdUJBQXVCLFFBQU87QUFBQyxRQUFJLFdBQVMsS0FBSyxFQUFFLE1BQU0sS0FBSyxNQUFNLEtBQUssRUFBRSxVQUFVLElBQUUsQ0FBQyxDQUFDO0FBQUUsUUFBSSxJQUFFO0FBQU8sUUFBSSxJQUFFLEtBQUssRUFBRSxNQUFNO0FBQUUsUUFBSSxLQUFHLElBQUksR0FBRyxDQUFDO0FBQUUsUUFBSSxLQUFHLElBQUksR0FBRyxDQUFDO0FBQUUsUUFBSSxLQUFHLElBQUksR0FBRyxDQUFDO0FBQUUsUUFBSSxLQUFHLElBQUksR0FBRyxDQUFDO0FBQUUsUUFBSTtBQUFHLFFBQUk7QUFBRyxRQUFJO0FBQUcsUUFBSTtBQUFHLFFBQUk7QUFBRyxRQUFJO0FBQUcsUUFBSTtBQUFNLFFBQUksSUFBRTtBQUFFLFFBQUk7QUFBRSxRQUFJO0FBQUUsV0FBTSxFQUFFLEtBQUssQ0FBQyxNQUFJLEdBQUU7QUFBQyxVQUFJLElBQUUsRUFBRSxJQUFJLENBQUM7QUFBRSxXQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQUUsVUFBRSxHQUFHLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUFFLFVBQUksSUFBRSxHQUFHLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUFFLFVBQUcsQ0FBQyxNQUFJLEdBQUUsSUFBSSxRQUFRLElBQUUsR0FBRTtBQUFDLGFBQUcsTUFBTSxJQUFJO0FBQUUsYUFBRztBQUFHLGFBQUcsR0FBRSxJQUFJO0FBQUUsYUFBRztBQUFBLE1BQUMsV0FBUyxNQUFJLEVBQUUsTUFBSSxHQUFFO0FBQUM7QUFBQSxNQUFLO0FBQUMsY0FBTTtBQUFFLFVBQUU7QUFBRSxVQUFFO0FBQUUsV0FBRztBQUFHLFdBQUc7QUFBRSxXQUFHO0FBQUcsV0FBRztBQUFBLElBQUM7QUFBQyxTQUFHLEdBQUUsSUFBSTtBQUFFLFNBQUc7QUFBRSxRQUFJLE9BQUssR0FBRyxJQUFJLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQztBQUFFLFFBQUksT0FBSyxHQUFHLElBQUksRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQUUsUUFBRyxLQUFLLElBQUksSUFBSSxLQUFHLEdBQUU7QUFBQyxXQUFHO0FBQUcsV0FBRztBQUFBLElBQUU7QUFBQyxRQUFHLEdBQUcsVUFBUztBQUFDLFdBQUcsR0FBRyxJQUFJO0FBQUUsV0FBRyxHQUFHLElBQUk7QUFBQSxJQUFDO0FBQUMsUUFBRyxHQUFHLFVBQVM7QUFBQyxXQUFHLEdBQUcsSUFBSTtBQUFFLFdBQUcsR0FBRyxJQUFJO0FBQUEsSUFBQztBQUFDLFdBQU0sQ0FBQyxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsQ0FBQztBQUFBLEVBQUM7QUFBRSxhQUFXLFVBQVUsYUFBVyxvQkFBb0IsR0FBRTtBQUFDLFFBQUksUUFBTSxLQUFLLEtBQUs7QUFBTSxRQUFJLEtBQUcsTUFBTTtBQUFHLFFBQUksS0FBRyxNQUFNO0FBQUcsUUFBSSxLQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxTQUFTLEtBQUssQ0FBQztBQUFFLFFBQUksS0FBRyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLFNBQVMsS0FBSyxDQUFDO0FBQUUsUUFBSSxLQUFHLEdBQUcsSUFBSSxHQUFHLENB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LFNBQVEsSUFBSSxXQUFTLEVBQUMsTUFBSyxJQUFJLFFBQVEsTUFBSyxRQUFPLElBQUksUUFBUSxPQUFPLElBQUksTUFBTSxFQUFDLEVBQUM7QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQUc7QUFBRSxRQUFNLFVBQVUsTUFBSSxlQUFjO0FBQUMsUUFBRyxLQUFLO0FBQUksYUFBTyxLQUFLLE1BQU0sT0FBTyxNQUFLLE1BQUssSUFBSTtBQUFFLFFBQUksTUFBSSxLQUFLLE1BQU0sT0FBTyxLQUFLLEdBQUUsS0FBSyxHQUFFLEtBQUssTUFBTSxHQUFHO0FBQUUsV0FBTztBQUFBLEVBQUc7QUFBRSxrQkFBZ0IsT0FBTSxHQUFFLEdBQUUsR0FBRTtBQUFDLFNBQUssVUFBVSxLQUFLLE1BQUssT0FBTSxVQUFVO0FBQUUsUUFBRyxNQUFJLFFBQU0sTUFBSSxRQUFNLE1BQUksTUFBSztBQUFDLFdBQUssSUFBRSxLQUFLLE1BQU07QUFBSSxXQUFLLElBQUUsS0FBSyxNQUFNO0FBQUksV0FBSyxJQUFFLElBQUksR0FBRyxDQUFDO0FBQUEsSUFBQyxPQUFLO0FBQUMsV0FBSyxJQUFFLElBQUksR0FBRyxHQUFFLEVBQUU7QUFBRSxXQUFLLElBQUUsSUFBSSxHQUFHLEdBQUUsRUFBRTtBQUFFLFdBQUssSUFBRSxJQUFJLEdBQUcsR0FBRSxFQUFFO0FBQUEsSUFBQztBQUFDLFFBQUcsQ0FBQyxLQUFLLEVBQUU7QUFBSSxXQUFLLElBQUUsS0FBSyxFQUFFLE1BQU0sS0FBSyxNQUFNLEdBQUc7QUFBRSxRQUFHLENBQUMsS0FBSyxFQUFFO0FBQUksV0FBSyxJQUFFLEtBQUssRUFBRSxNQUFNLEtBQUssTUFBTSxHQUFHO0FBQUUsUUFBRyxDQUFDLEtBQUssRUFBRTtBQUFJLFdBQUssSUFBRSxLQUFLLEVBQUUsTUFBTSxLQUFLLE1BQU0sR0FBRztBQUFFLFNBQUssT0FBSyxLQUFLLE1BQUksS0FBSyxNQUFNO0FBQUEsRUFBRztBQUFDLHFCQUFtQixRQUFPLEtBQUssU0FBUztBQUFFLGFBQVcsVUFBVSxTQUFPLGdCQUFnQixHQUFFLEdBQUUsR0FBRTtBQUFDLFdBQU8sSUFBSSxPQUFPLE1BQUssR0FBRSxHQUFFLENBQUM7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLE1BQUksZUFBYztBQUFDLFFBQUcsS0FBSyxXQUFXO0FBQUUsYUFBTyxLQUFLLE1BQU0sTUFBTSxNQUFLLElBQUk7QUFBRSxRQUFJLE9BQUssS0FBSyxFQUFFLFFBQVE7QUFBRSxRQUFJLFFBQU0sS0FBSyxPQUFPO0FBQUUsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPLEtBQUs7QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU8sS0FBSyxFQUFFLE9BQU8sSUFBSTtBQUFFLFdBQU8sS0FBSyxNQUFNLE1BQU0sSUFBRyxFQUFFO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxNQUFJLGdCQUFjO0FBQUMsV0FBTyxLQUFLLE1BQU0sT0FBTyxLQUFLLEdBQUUsS0FBSyxFQUFFLE9BQU8sR0FBRSxLQUFLLENBQUM7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLE1BQUksY0FBYSxHQUFFO0FBQUMsUUFBRyxLQUFLLFdBQVc7QUFBRSxhQUFPO0FBQUUsUUFBRyxFQUFFLFdBQVc7QUFBRSxhQUFPO0FBQUssUUFBSSxNQUFJLEVBQUUsRUFBRSxPQUFPO0FBQUUsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPO0FBQUUsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPLEdBQUc7QUFBRSxRQUFJLEtBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRTtBQUFFLFFBQUksS0FBRyxLQUFLLEVBQUUsT0FBTyxJQUFJLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFBRSxRQUFJLEtBQUcsRUFBRSxFQUFFLE9BQU8sR0FBRyxPQUFPLEtBQUssQ0FBQyxDQUFDO0FBQUUsUUFBSSxJQUFFLEdBQUcsT0FBTyxFQUFFO0FBQUUsUUFBSSxLQUFFLEdBQUcsT0FBTyxFQUFFO0FBQUUsUUFBRyxFQUFFLEtBQUssQ0FBQyxNQUFJLEdBQUU7QUFBQyxVQUFHLEdBQUUsS0FBSyxDQUFDLE1BQUk7QUFBRSxlQUFPLEtBQUssTUFBTSxPQUFPLE1BQUssTUFBSyxJQUFJO0FBQUE7QUFBTyxlQUFPLEtBQUssSUFBSTtBQUFBLElBQUM7QUFBQyxRQUFJLEtBQUcsRUFBRSxPQUFPO0FBQUUsUUFBSSxLQUFHLEdBQUcsT0FBTyxDQUFDO0FBQUUsUUFBSSxJQUFFLEdBQUcsT0FBTyxFQUFFO0FBQUUsUUFBSSxLQUFHLEdBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQztBQUFFLFFBQUksS0FBRyxHQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLFFBQVEsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUFFLFFBQUksS0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUM7QUFBRSxXQUFPLEtBQUssTUFBTSxPQUFPLElBQUcsSUFBRyxFQUFFO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxXQUFTLGtCQUFrQixHQUFFO0FBQUMsUUFBRyxLQUFLLFdBQVc7QUFBRSxhQUFPLEVBQUUsSUFBSTtBQUFFLFFBQUcsRUFBRSxXQUFXO0FBQUUsYUFBTztBQUFLLFFBQUksS0FBRyxLQUFLLEVBQUUsT0FBTztBQUFFLFFBQUksS0FBRyxLQUFLO0FBQUUsUUFBSSxLQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUU7QUFBRSxRQUFJLEtBQUcsS0FBSztBQUFFLFFBQUksS0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFBRSxRQUFJLElBQUUsR0FBRyxPQUFPLEVBQUU7QUFBRSxRQUFJLEtBQUUsR0FBRyxPQUFPLEVBQUU7QUFBRSxRQUFHLEVBQUUsS0FBSyxDQUFDLE1BQUksR0FBRTtBQUFDLFVBQUcsR0FBRSxLQUFLLENBQUMsTUFBSTtBQUFFLGVBQU8sS0FBSyxNQUFNLE9BQU8sTUFBSyxNQUFLLElBQUk7QUFBQTtBQUFPLGVBQU8sS0FBSyxJQUFJO0FBQUEsSUFBQztBQUFDLFFBQUksS0FBRyxFQUFFLE9BQU87QUFBRSxRQUFJLEtBQUcsR0FBRyxPQUFPLENBQUM7QUFBRSxRQUFJLElBQUUsR0FBRyxPQUFPLEVBQUU7QUFBRSxRQUFJLEtBQUcsR0FBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDO0FBQUUsUUFBSSxLQUFHLEdBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsUUFBUSxHQUFHLE9BQU8sRUFBRSxDQUFDO0FBQUUsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPLENBQUM7QUFBRSxXQUFPLEtBQUssTUFBTSxPQUFPLElBQUcsSUFBRyxFQUFFO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxPQUFLLGVBQWMsS0FBSTtBQUFDLFFBQUcsUUFBTTtBQUFFLGFBQU87QUFBSyxRQUFHLEtBQUssV0FBVztBQUFFLGFBQU87QUFBSyxRQUFHLENBQUM7QUFBSSxhQUFPLEtBQUssSUFBSTtBQUFFLFFBQUk7QUFBRSxRQUFHLEtBQUssTUFBTSxTQUFPLEtBQUssTUFBTSxRQUFPO0FBQUMsVUFBSSxLQUFFO0FBQUssV0FBSSxJQUFFLEdBQUUsSUFBRSxLQUFJO0FBQUksYUFBRSxHQUFFLElBQUk7QUFBRSxhQUFPO0FBQUEsSUFBQztBQUFDLFFBQUksSUFBRSxLQUFLLE1BQU07QUFBRSxRQUFJLE9BQUssS0FBSyxNQUFNO0FBQUssUUFBSSxLQUFHLEtBQUs7QUFBRSxRQUFJLEtBQUcsS0FBSztBQUFFLFFBQUksS0FBRyxLQUFLO0FBQUUsUUFBSSxNQUFJLEdBQUcsT0FBTyxFQUFFLE9BQU87QUFBRSxRQUFJLE1BQUksR0FBRyxPQUFPLEVBQUU7QUFBRSxTQUFJLElBQUUsR0FBRSxJQUFFLEtBQUksS0FBSTtBQUFDLFVBQUksTUFBSSxHQUFHLE9BQU87QUFBRSxVQUFJLE9BQUssSUFBSSxPQUFPO0FBQUUsVUFBSSxPQUFLLEtBQUssT0FBTztBQUFFLFVBQUksSUFBRSxJQUFJLE9BQU8sR0FBRyxFQUFFLFFBQVEsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEdBQUcsQ0FBQztBQUFFLFVBQUksS0FBRyxHQUFHLE9BQU8sSUFBSTtBQUFFLFVBQUksS0FBRyxFQUFFLE9BQU8sRUFBRSxRQUFRLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFBRSxVQUFJLEtBQUcsR0FBRyxRQUFRLEVBQUU7QUFBRSxVQUFJLE1BQUksRUFBRSxPQUFPLEVBQUU7QUFBRSxZQUFJLElBQUksUUFBUSxHQUFHLEVBQUUsUUFBUSxJQUFJO0FBQUUsVUFBSSxLQUFHLElBQUksT0FBTyxFQUFFO0FBQUUsVUFBRyxJQUFFLElBQUU7QUFBSSxjQUFJLElBQUksT0FBTyxJQUFJO0FBQUUsV0FBRztBQUFHLFdBQUc7QUFBRyxZQUFJO0FBQUEsSUFBRztBQUFDLFdBQU8sS0FBSyxNQUFNLE9BQU8sSUFBRyxJQUFJLE9BQU8sSUFBSSxHQUFFLEVBQUU7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLE1BQUksZ0JBQWM7QUFBQyxRQUFHLEtBQUssV0FBVztBQUFFLGFBQU87QUFBSyxRQUFHLEtBQUssTUFBTTtBQUFNLGFBQU8sS0FBSyxTQUFTO0FBQUEsYUFBVSxLQUFLLE1BQU07QUFBTyxhQUFPLEtBQUssVUFBVTtBQUFBO0FBQU8sYUFBTyxLQUFLLEtBQUs7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLFdBQVMsb0JBQW1CO0FBQUMsUUFBSTtBQUFHLFFBQUk7QUFBRyxRQUFJO0FBQUcsUUFBRyxLQUFLLE1BQUs7QUFBQyxVQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLE9BQUssR0FBRyxPQUFPO0FBQUUsVUFBSSxLQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxJQUFJO0FBQUUsV0FBRSxHQUFFLFFBQVEsRUFBQztBQUFFLFVBQUksSUFBRSxHQUFHLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRTtBQUFFLFVBQUksSUFBRSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUMsRUFBRSxRQUFRLEVBQUM7QUFBRSxVQUFJLFFBQU0sS0FBSyxRQUFRLElBQUk7QUFBRSxjQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUUsY0FBTSxNQUFNLFFBQVEsS0FBSztBQUFFLFdBQUc7QUFBRSxXQUFHLEVBQUUsT0FBTyxHQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxLQUFLO0FBQUUsV0FBRyxLQUFLLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFBQSxJQUFDLE9BQUs7QUFBQyxVQUFJLElBQUUsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLElBQUUsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLElBQUUsRUFBRSxPQUFPO0FBQUUsVUFBSSxJQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDO0FBQUUsVUFBRSxFQUFFLFFBQVEsQ0FBQztBQUFFLFVBQUksSUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLFFBQVEsQ0FBQztBQUFFLFVBQUksS0FBRSxFQUFFLE9BQU87QUFBRSxVQUFJLEtBQUcsRUFBRSxRQUFRLENBQUM7QUFBRSxXQUFHLEdBQUcsUUFBUSxFQUFFO0FBQUUsV0FBRyxHQUFHLFFBQVEsRUFBRTtBQUFFLFdBQUcsR0FBRSxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUM7QUFBRSxXQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFO0FBQUUsV0FBRyxLQUFLLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFBRSxXQUFHLEdBQUcsUUFBUSxFQUFFO0FBQUEsSUFBQztBQUFDLFdBQU8sS0FBSyxNQUFNLE9BQU8sSUFBRyxJQUFHLEVBQUU7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLFlBQVUscUJBQW9CO0FBQUMsUUFBSTtBQUFHLFFBQUk7QUFBRyxRQUFJO0FBQUcsUUFBRyxLQUFLLE1BQUs7QUFBQyxVQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLE9BQUssR0FBRyxPQUFPO0FBQUUsVUFBSSxLQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxJQUFJO0FBQUUsV0FBRSxHQUFFLFFBQVEsRUFBQztBQUFFLFVBQUksSUFBRSxHQUFHLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsS0FBSyxNQUFNLENBQUM7QUFBRSxVQUFJLElBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDLEVBQUUsUUFBUSxFQUFDO0FBQUUsV0FBRztBQUFFLFVBQUksUUFBTSxLQUFLLFFBQVEsSUFBSTtBQUFFLGNBQU0sTUFBTSxRQUFRLEtBQUs7QUFBRSxjQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUUsV0FBRyxFQUFFLE9BQU8sR0FBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsS0FBSztBQUFFLFdBQUcsS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQUEsSUFBQyxPQUFLO0FBQUMsVUFBSSxRQUFNLEtBQUssRUFBRSxPQUFPO0FBQUUsVUFBSSxRQUFNLEtBQUssRUFBRSxPQUFPO0FBQUUsVUFBSSxPQUFLLEtBQUssRUFBRSxPQUFPLEtBQUs7QUFBRSxVQUFJLFFBQU0sS0FBSyxFQUFFLE9BQU8sS0FBSyxFQUFFLE9BQU8sS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQUUsY0FBTSxNQUFNLE9BQU8sS0FBSyxFQUFFLFFBQVEsS0FBSztBQUFFLFVBQUksUUFBTSxLQUFLLFFBQVEsSUFBSTtBQUFFLGNBQU0sTUFBTSxRQUFRLEtBQUs7QUFBRSxVQUFJLFFBQU0sTUFBTSxPQUFPLEtBQUs7QUFBRSxXQUFHLE1BQU0sT0FBTyxFQUFFLFFBQVEsS0FBSztBQUFFLFdBQUcsS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsS0FBSyxFQUFFLFFBQVEsS0FBSztBQUFFLFVBQUksVUFBUSxNQUFNLE9BQU87QUFBRSxnQkFBUSxRQUFRLFFBQVEsT0FBTztBQUFFLGdCQUFRLFFBQVEsUUFBUSxPQUFPO0FBQUUsZ0JBQVEsUUFBUSxRQUFRLE9BQU87QUFBRSxXQUFHLE1BQU0sT0FBTyxNQUFNLFFBQVEsRUFBRSxDQUFDLEVBQUUsUUFBUSxPQUFPO0FBQUEsSUFBQztBQUFDLFdBQU8sS0FBSyxNQUFNLE9BQU8sSUFBRyxJQUFHLEVBQUU7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLE9BQUssZ0JBQWU7QUFBQyxRQUFJLElBQUUsS0FBSyxNQUFNO0FBQUUsUUFBSSxLQUFHLEtBQUs7QUFBRSxRQUFJLEtBQUcsS0FBSztBQUFFLFFBQUksS0FBRyxLQUFLO0FBQUUsUUFBSSxNQUFJLEdBQUcsT0FBTyxFQUFFLE9BQU87QUFBRSxRQUFJLE1BQUksR0FBRyxPQUFPO0FBQUUsUUFBSSxNQUFJLEdBQUcsT0FBTztBQUFFLFFBQUksSUFBRSxJQUFJLE9BQU8sR0FBRyxFQUFFLFFBQVEsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEdBQUcsQ0FBQztBQUFFLFFBQUksT0FBSyxHQUFHLE9BQU8sRUFBRTtBQUFFLFdBQUssS0FBSyxRQUFRLElBQUk7QUFBRSxRQUFJLEtBQUcsS0FBSyxPQUFPLEdBQUc7QUFBRSxRQUFJLEtBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxHQUFHLE9BQU8sRUFBRSxDQUFDO0FBQUUsUUFBSSxLQUFHLEdBQUcsUUFBUSxFQUFFO0FBQUUsUUFBSSxPQUFLLElBQUksT0FBTztBQUFFLFdBQUssS0FBSyxRQUFRLElBQUk7QUFBRSxXQUFLLEtBQUssUUFBUSxJQUFJO0FBQUUsV0FBSyxLQUFLLFFBQVEsSUFBSTtBQUFFLFFBQUksS0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLFFBQVEsSUFBSTtBQUFFLFFBQUksS0FBRyxHQUFHLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRTtBQUFFLFdBQU8sS0FBSyxNQUFNLE9BQU8sSUFBRyxJQUFHLEVBQUU7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLE9BQUssZ0JBQWU7QUFBQyxRQUFHLENBQUMsS0FBSyxNQUFNO0FBQU0sYUFBTyxLQUFLLElBQUksRUFBRSxJQUFJLElBQUk7QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxRQUFJLE9BQUssR0FBRyxPQUFPO0FBQUUsUUFBSSxJQUFFLEdBQUcsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFO0FBQUUsUUFBSSxLQUFHLEVBQUUsT0FBTztBQUFFLFFBQUksSUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsSUFBSTtBQUFFLFFBQUUsRUFBRSxRQUFRLENBQUM7QUFBRSxRQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsUUFBUSxDQUFDO0FBQUUsUUFBRSxFQUFFLFFBQVEsRUFBRTtBQUFFLFFBQUksS0FBRyxFQUFFLE9BQU87QUFBRSxRQUFJLElBQUUsS0FBSyxRQUFRLElBQUk7QUFBRSxRQUFFLEVBQUUsUUFBUSxDQUFDO0FBQUUsUUFBRSxFQUFFLFFBQVEsQ0FBQztBQUFFLFFBQUUsRUFBRSxRQUFRLENBQUM7QUFBRSxRQUFJLElBQUUsRUFBRSxRQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxDQUFDO0FBQUUsUUFBSSxPQUFLLEdBQUcsT0FBTyxDQUFDO0FBQUUsV0FBSyxLQUFLLFFBQVEsSUFBSTtBQUFFLFdBQUssS0FBSyxRQUFRLElBQUk7QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLFFBQVEsSUFBSTtBQUFFLFNBQUcsR0FBRyxRQUFRLEVBQUU7QUFBRSxTQUFHLEdBQUcsUUFBUSxFQUFFO0FBQUUsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFBRSxTQUFHLEdBQUcsUUFBUSxFQUFFO0FBQUUsU0FBRyxHQUFHLFFBQVEsRUFBRTtBQUFFLFNBQUcsR0FBRyxRQUFRLEVBQUU7QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUU7QUFBRSxXQUFPLEtBQUssTUFBTSxPQUFPLElBQUcsSUFBRyxFQUFFO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxNQUFJLGNBQWEsR0FBRSxPQUFNO0FBQUMsUUFBRSxJQUFJLEdBQUcsR0FBRSxLQUFLO0FBQUUsV0FBTyxLQUFLLE1BQU0sU0FBUyxNQUFLLENBQUM7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLEtBQUcsYUFBWSxHQUFFO0FBQUMsUUFBRyxFQUFFLFNBQU87QUFBUyxhQUFPLEtBQUssR0FBRyxFQUFFLElBQUksQ0FBQztBQUFFLFFBQUcsU0FBTztBQUFFLGFBQU87QUFBSyxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxRQUFJLE1BQUksRUFBRSxFQUFFLE9BQU87QUFBRSxRQUFHLEtBQUssRUFBRSxPQUFPLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFJO0FBQUUsYUFBTztBQUFNLFFBQUksS0FBRyxHQUFHLE9BQU8sS0FBSyxDQUFDO0FBQUUsUUFBSSxNQUFJLElBQUksT0FBTyxFQUFFLENBQUM7QUFBRSxXQUFPLEtBQUssRUFBRSxPQUFPLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFJO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxTQUFPLGdCQUFnQixHQUFFO0FBQUMsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPO0FBQUUsUUFBSSxLQUFHLEVBQUUsTUFBTSxLQUFLLE1BQU0sR0FBRyxFQUFFLE9BQU8sRUFBRTtBQUFFLFFBQUcsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFJO0FBQUUsYUFBTztBQUFLLFFBQUksS0FBRyxFQUFFLE1BQU07QUFBRSxRQUFJLElBQUUsS0FBSyxNQUFNLEtBQUssT0FB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O0FBQUMsYUFBTztBQUFBLElBQU87QUFBQyxRQUFJLFdBQVMsVUFBUTtBQUFHLFFBQUcsYUFBVyxLQUFHLFdBQVMsR0FBRTtBQUFDLGFBQU87QUFBQSxJQUFLO0FBQUMsUUFBSSxNQUFJO0FBQUUsYUFBUSxJQUFFLEdBQUUsTUFBSSxFQUFFLE9BQU0sSUFBRSxVQUFTLEtBQUksT0FBTTtBQUFDLGNBQU07QUFBRSxhQUFLLElBQUk7QUFBSyxlQUFPO0FBQUEsSUFBQztBQUFDLFFBQUcsT0FBSyxLQUFJO0FBQUMsYUFBTztBQUFBLElBQUs7QUFBQyxNQUFFLFFBQU07QUFBSSxXQUFPO0FBQUEsRUFBRztBQUFDLHFCQUFtQixLQUFJO0FBQUMsUUFBSSxJQUFFO0FBQUUsUUFBSSxNQUFJLElBQUksU0FBTztBQUFFLFdBQU0sQ0FBQyxJQUFJLE1BQUksQ0FBRSxLQUFJLElBQUUsS0FBRyxRQUFNLElBQUUsS0FBSTtBQUFDO0FBQUEsSUFBRztBQUFDLFFBQUcsTUFBSSxHQUFFO0FBQUMsYUFBTztBQUFBLElBQUc7QUFBQyxXQUFPLElBQUksTUFBTSxDQUFDO0FBQUEsRUFBQztBQUFDLFlBQVUsVUFBVSxhQUFXLG9CQUFvQixPQUFLLEtBQUk7QUFBQyxZQUFLLFVBQVUsUUFBUSxPQUFLLEdBQUc7QUFBRSxRQUFJLElBQUUsSUFBSTtBQUFTLFFBQUcsTUFBSyxFQUFFLGFBQVcsSUFBRztBQUFDLGFBQU87QUFBQSxJQUFLO0FBQUMsUUFBSSxNQUFJLFVBQVUsT0FBSyxDQUFDO0FBQUUsUUFBRyxRQUFNLE9BQU07QUFBQyxhQUFPO0FBQUEsSUFBSztBQUFDLFFBQUcsTUFBSSxFQUFFLFVBQVEsTUFBSyxRQUFPO0FBQUMsYUFBTztBQUFBLElBQUs7QUFBQyxRQUFHLE1BQUssRUFBRSxhQUFXLEdBQUU7QUFBQyxhQUFPO0FBQUEsSUFBSztBQUFDLFFBQUksT0FBSyxVQUFVLE9BQUssQ0FBQztBQUFFLFFBQUcsU0FBTyxPQUFNO0FBQUMsYUFBTztBQUFBLElBQUs7QUFBQyxRQUFJLEtBQUUsTUFBSyxNQUFNLEVBQUUs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QVUsZUFBYSxzQkFBc0IsS0FBSSxXQUFVO0FBQUMsUUFBSSxRQUFNLElBQUksV0FBVyxJQUFFLElBQUUsS0FBSyxFQUFFLFVBQVU7QUFBRSxRQUFHLFFBQU07QUFBRSxZQUFJLElBQUksTUFBTSxLQUFLO0FBQUUsUUFBRyxDQUFDLGFBQVcsSUFBSSxJQUFJLEtBQUssQ0FBQyxLQUFHO0FBQUUsYUFBTyxJQUFJLElBQUksS0FBSyxDQUFDO0FBQUE7QUFBTyxhQUFPO0FBQUEsRUFBRztBQUFFLEtBQUcsVUFBVSxPQUFLLGVBQWMsS0FBSSxNQUFJLEtBQUksU0FBUTtBQUFDLFFBQUcsT0FBTyxRQUFNLFVBQVM7QUFBQyxnQkFBUTtBQUFJLFlBQUk7QUFBQSxJQUFJO0FBQUMsUUFBRyxDQUFDO0FBQVEsZ0JBQVEsQ0FBQztBQUFFLFdBQUksS0FBSyxlQUFlLE1BQUksR0FBRztBQUFFLFVBQUksS0FBSyxhQUFhLElBQUksR0FBRyxLQUFJLEVBQUUsQ0FBQztBQUFFLFFBQUksUUFBTSxLQUFLLEVBQUUsV0FBVztBQUFFLFFBQUksT0FBSyxLQUFJLFdBQVcsRUFBRSxRQUFRLE1BQUssS0FBSztBQUFFLFFBQUksUUFBTSxJQUFJLFFBQVEsTUFBSyxLQUFLO0FBQUUsUUFBSSxPQUFLLElBQUksU0FBUyxFQUFDLE1BQUssS0FBSyxNQUFLLFNBQVEsTUFBSyxPQUFZLE1BQUssUUFBUSxNQUFLLFNBQVEsUUFBUSxXQUFTLE9BQU0sQ0FBQztBQUFFLFFBQUksTUFBSSxLQUFLLEVBQUUsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQUUsYUFBUSxPQUFLLEtBQUcsUUFBTztBQUFDLFVBQUksSUFBRSxRQUFRLElBQUUsUUFBUSxFQUFFLElBQUksSUFBRSxJQUFJLEdBQUcsS0FBSyxTQUFTLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztBQUFFLFVBQUUsS0FBSyxhQUFhLEdBQUUsSUFBSTtBQUFFLFVBQUcsRUFBRSxLQUFLLENBQUMsS0FBRyxLQUFHLEVBQUUsSUFBSSxHQUFHLEtBQUc7QUFBRTtBQUFTLFVBQUksS0FB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QUFHLEtBQUksSUFBRyxJQUFHLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEdBQUc7QUFBRSxVQUFJLElBQUUsQ0FBQyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxHQUFFLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsSUFBRyxHQUFFLEtBQUksSUFBRyxLQUFJLElBQUcsS0FBSSxHQUFFLEtBQUksR0FBRSxJQUFHLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLEdBQUUsS0FBSSxJQUFHLElBQUcsSUFBRyxLQUFJLElBQUcsS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLEdBQUUsS0FBSSxJQUFHLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLElBQUcsSUFBRyxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsSUFBRyxJQUFHLEtBQUksSUFBRyxLQUFJLEdBQUUsS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxJQUFHLEtBQUksSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLElBQUcsS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksR0FBRSxLQUFJLEtBQUksSUFBRyxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxHQUFFLEtBQUksSUFBRyxJQUFHLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLElBQUcsS0FBSSxFQUFFO0FBQUUsVUFBSSxLQUFHLENBQUMsSUFBRyxHQUFFLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLElBQUcsSUFBRyxLQUFJLElBQUcsS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsR0FBRSxJQUFHLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLElBQUcsS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksR0FBRSxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxJQUFHLEdBQUUsS0FBSSxLQUFJLElBQUcsR0FBRSxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksSUFBRyxJQUFHLEdBQUUsS0FBSSxLQUFJLEtBQUksR0FBRSxHQUFFLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsSUFBRyxLQUFJLElBQUcsS0FBSSxJQUFHLEtBQUksSUFBRyxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEdBQUUsS0FBSSxJQUFHLEtBQUksSUFBRyxJQUFHLElBQUcsSUFBRyxLQUFJLEtBQUksSUFBRyxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxJQUFHLEdBQUUsS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRztBQUFFLFVBQUksS0FBRyxDQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsR0FBRSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFNBQVM7QUFBRSxVQUFJLEtBQUcsQ0FBQyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLEdBQUUsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFVBQVMsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxTQUFTO0FBQUUsVUFBSSxLQUFHLENBQUMsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsVUFBUyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsVUFBUyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsVUFBUyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxHQUFFLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsU0FBUztBQUFFLFVBQUksS0FBRyxDQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFVBQVMsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFVBQVMsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFVBQVMsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsR0FBRSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFNBQVM7QUFBRSxVQUFJLEtBQUcsQ0FBQyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsVUFBUyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxHQUFFLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFVO0FBQUUsVUFBSSxLQUFHLENBQUMsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsR0FBRSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBVTtBQUFFLFVBQUksS0FBRyxDQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLEdBQUUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVU7QUFBRSxVQUFJLEtBQUcsQ0FBQyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsVUFBUyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxVQUFTLFlBQVcsVUFBUyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxVQUFTLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxHQUFFLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxVQUFVO0FBQUUsVUFBSSxLQUFHLENBQUMsR0FBRSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxVQUFTLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFVBQVMsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxVQUFTLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBVTtBQUFFLFVBQUksS0FBRyxDQUFDLEdBQUUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsVUFBUyxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxVQUFTLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVU7QUFBRSxVQUFJLEtBQUcsQ0FBQyxHQUFFLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxVQUFTLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFVO0FBQUUsVUFBSSxLQUFHLENBQUMsR0FBRSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxVQUFTLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsV0FBVSxXQUFVLFdBQVUsV0FBVSxVQUFTLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFVBQVMsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZ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QUFJLElBQUUsR0FBRSxJQUFFO0FBQUUsaUJBQU0sSUFBRSxNQUFJLElBQUUsZUFBYztBQUFDLGlCQUFFLEtBQUc7QUFBRSxnQkFBRSxJQUFFO0FBQUUsaUJBQUssSUFBSSxJQUFHLEtBQUcsR0FBRztBQUFHLGlCQUFLLElBQUksU0FBTyxJQUFHLEtBQUcsR0FBRztBQUFLO0FBQUEsVUFBRztBQUFBLFFBQUM7QUFBQyxpQkFBUSxLQUFFLEdBQUUsS0FBRSxRQUFPLE1BQUk7QUFBQyxtQkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFLEtBQUk7QUFBQyxpQkFBRyxLQUFLLElBQUksSUFBRztBQUFHLGlCQUFLLElBQUksSUFBRyxLQUFHLEdBQUcsTUFBSSxLQUFHLE9BQUssR0FBRyxNQUFJLEtBQUcsT0FBSyxHQUFHLE1BQUksSUFBRSxPQUFLLEdBQUcsS0FBRztBQUFBLFVBQUk7QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFFLFVBQUksVUFBVSxVQUFRLFNBQVMsV0FBVTtBQUFDLFlBQUcsVUFBVSxVQUFRLElBQUc7QUFBQyxnQkFBTSxJQUFJLE1BQU0sMkNBQTJDO0FBQUEsUUFBQztBQUFDLFlBQUksU0FBTyxLQUFLLElBQUksU0FBTztBQUFFLFlBQUksSUFBRSxDQUFDLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBRSxZQUFJLElBQUUsZUFBZSxTQUFTO0FBQUUsaUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFJO0FBQUMsWUFBRSxNQUFJLEtBQUssSUFBSSxHQUFHO0FBQUEsUUFBRTtBQUFDLGlCQUFRLEtBQUUsR0FBRSxLQUFFLFFBQU8sTUFBSTtBQUFDLG1CQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsS0FBSTtBQUFDLGNBQUUsS0FBRyxHQUFHLEVBQUUsTUFBSSxLQUFHLE9BQUssR0FBRyxFQUFHLEtBQUUsS0FBRyxNQUFJLEtBQUcsT0FBSyxHQUFHLEVBQUcsS0FBRSxLQUFHLE1BQUksSUFBRSxPQUFLLEdBQUcsRUFBRyxLQUFFLEtBQUcsS0FBRyxPQUFLLEtBQUssSUFBSSxJQUFHO0FBQUEsVUFBRTtB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QUFFO0FBQU8saUJBQU0sT0FBSyxJQUFHO0FBQUMsZ0JBQUksSUFBRSxJQUFHLElBQUUsSUFBRyxJQUFFLElBQUcsSUFBRSxJQUFHLElBQUUsSUFBRyxLQUFFLElBQUcsSUFBRSxJQUFHLElBQUUsSUFBRyxHQUFFLElBQUUsR0FBRSxJQUFHO0FBQUcsaUJBQUksS0FBRSxHQUFFLEtBQUUsSUFBRyxNQUFJO0FBQUMsa0JBQUUsTUFBSSxLQUFFO0FBQUUsZ0JBQUUsTUFBSSxJQUFFLEtBQUcsUUFBTSxLQUFJLElBQUUsSUFBRSxLQUFHLFFBQU0sS0FBSSxJQUFFLElBQUUsS0FBRyxRQUFNLElBQUUsR0FBRSxJQUFFLEtBQUc7QUFBQSxZQUFHO0FBQUMsaUJBQUksS0FBRSxJQUFHLEtBQUUsSUFBRyxNQUFJO0FBQUMsa0JBQUUsRUFBRSxLQUFFO0FBQUcsbUJBQUksT0FBSSxLQUFHLEtBQUcsS0FBRyxNQUFLLE9BQUksS0FBRyxLQUFHLEtBQUcsTUFBSSxNQUFJO0FBQUcsa0JBQUUsRUFBRSxLQUFFO0FBQUksbUJBQUksT0FBSSxJQUFFLEtBQUcsS0FBRyxLQUFJLE9BQUksS0FBRyxLQUFHLEtBQUcsTUFBSSxNQUFJO0FBQUUsZ0JBQUUsTUFBSSxNQUFHLEVBQUUsS0FBRSxLQUFHLEtBQUksTUFBRyxFQUFFLEtBQUUsTUFBSSxLQUFHO0FBQUEsWUFBQztBQUFDLGlCQUFJLEtBQUUsR0FBRSxLQUFFLElBQUcsTUFBSTtBQUFDLG1CQUFNLFNBQUksSUFBRSxLQUFHLEtBQUcsS0FBSSxPQUFJLEtBQUcsS0FBRyxLQUFHLE1BQUssT0FBSSxLQUFHLEtBQUcsS0FBRyxPQUFNLEtBQUUsS0FBRSxDQUFDLElBQUUsS0FBRyxLQUFJLEtBQUcsSUFBRSxNQUFHLEVBQUUsTUFBRyxLQUFHLEtBQUc7QUFBRSxtQkFBSyxRQUFJLElBQUUsS0FBRyxLQUFHLEtBQUksT0FBSSxLQUFHLEtBQUcsS0FBRyxNQUFLLE9BQUksS0FBRyxLQUFHLEtBQUcsT0FBTSxLQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsS0FBRztBQUFFLGtCQUFFO0FBQUUsa0JBQUU7QUFBRSxtQkFBRTtBQUFFLGtCQUFFLElBQUUsS0FBRztBQUFFLGtCQUFFO0FBQUUsa0JBQUU7QUFBRSxrQkFBRTtBQUFFLGtCQUFFLEtBQUcsS0FBRztBQUFBLFlBQUM7QUFBQyxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLEtBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxtQkFBSztBQUFHLG1CQUFLO0FBQUEsVUFBRTtBQUFBLFFBQUM7QUFBQyxlQUFPLENBQUM7QUFBRSxZQUFJLEdBQUUsWUFBVSxFQUFFLFNBQU8sSUFBRyxXQUFTLEVBQUUsU0FBTyxZQUFVLEdBQUUsV0FBUyxFQUFFLFVBQVEsR0FBRSxXQUFTLFlBQVUsS0FBRyxLQUFHLEtBQUksSUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFPLFdBQVUsRUFBRSxNQUFNO0FBQUUsVUFBRSxLQUFLLEdBQUc7QUFBRSxhQUFJLElBQUUsWUFBVSxHQUFFLElBQUUsVUFBUyxLQUFJO0FBQUMsWUFBRSxLQUFLLENBQUM7QUFBQSxRQUFDO0FBQUMsVUFBRSxLQUFLLGFBQVcsS0FBRyxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsS0FBRyxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsSUFBRSxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsSUFBRSxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsS0FBRyxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsS0FBRyxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsSUFBRSxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsSUFBRSxHQUFHO0FBQUUsZUFBTyxDQUFDO0FBQUUsZUFBTSxDQUFDLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxHQUFHO0FBQUEsTUFBQztBQUFDLDBDQUFvQyxVQUFTLE1BQUssT0FBTTtBQUFDLG1CQUFTLFNBQVMsVUFBUSxLQUFHLFdBQVMsUUFBTyxRQUFRO0FBQUUsY0FBTSxXQUFTLEtBQUcsS0FBSyxTQUFPO0FBQUUsY0FBTSxRQUFNLElBQUksTUFBTSxRQUFRO0FBQUUsY0FBTSxXQUFTLElBQUksTUFBTSxFQUFFO0FBQUUsWUFBSTtBQUFFLFlBQUksS0FBRyxDQUFDO0FBQUUsYUFBSSxJQUFFLEdBQUUsSUFBRSxJQUFHLEtBQUk7QUFBQyxnQkFBTSxLQUFHO0FBQUEsUUFBRTtBQUFDLGFBQUksSUFBRSxHQUFFLElBQUUsU0FBUyxRQUFPLEtBQUk7QUFBQyxnQkFBTSxNQUFJLFNBQVM7QUFBQSxRQUFFO0FBQUMsYUFBSSxJQUFFLEdBQUUsSUFBRSxLQUFLLFFBQU8sS0FBSTtBQUFDLGdCQUFNLEtBQUcsS0FBRyxLQUFLO0FBQUEsUUFBRTtBQUFDLGFBQUksSUFBRSxXQUFTLEdBQUUsSUFBRSxVQUFTLEtBQUk7QUFBQyxnQkFBTSxLQUFHO0FBQUEsUUFBQztBQUFDLGFBQUksSUFBRSxHQUFFLElBQUUsSUFBRztBQUFJLG1CQUFTLEtBQUc7QUFBRyxhQUFJLElBQUUsR0FBRSxJQUFFLFNBQVMsUUFBTztBQUFJLG1CQUFTLE1BQUksU0FBUztBQUFHLG9DQUEyQjtBQUFDLG1CQUFRLEtBQUUsV0FBUyxHQUFFLE1BQUcsV0FBUyxHQUFFLE1BQUk7QUFBQyxrQkFBTTtBQUFLLGdCQUFHLE1BQU0sT0FBSTtBQUFJO0FBQU8sa0JBQU0sTUFBRztBQUFBLFVBQUM7QUFBQSxRQUFDO0FBQUMsZUFBTSxTQUFPLElBQUc7QUFBQywyQkFBaUI7QUFBRSxlQUFHLEdBQUcsT0FBTyxRQUFPLFNBQVMsT0FBTyxRQUFPLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFBRSxtQkFBTztBQUFBLFFBQUU7QUFBQyxZQUFHLFFBQU0sR0FBRTtBQUFDLDJCQUFpQjtBQUFFLGVBQUcsR0FBRyxPQUFPLFFBQU8sU0FBUyxPQUFPLFFBQU8sS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUUsS0FBSyxDQUFDO0FBQUEsUUFBQztBQUFDLGVBQU87QUFBQSxNQUFFO0FBQUMsK0JBQXlCLElBQUcsSUFBRyxJQUFFLEdBQUUsSUFBRztBQUFDLFlBQUk7QUFBRSxrQkFBVSxJQUFJLEtBQUUsS0FBRSxLQUFHLElBQUcsSUFBRyxHQUFFLEVBQUU7QUFBRSxhQUFJLElBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxLQUFJO0FBQUMsbUJBQVMsSUFBRyxJQUFFLElBQUcsSUFBRyxFQUFFO0FBQUUsb0JBQVUsSUFBRyxDQUFDO0FBQUUsb0JBQVUsSUFBRyxHQUFFLElBQUcsS0FBRyxJQUFFLElBQUcsRUFBRTtBQUFBLFFBQUM7QUFBQyxhQUFJLElBQUUsR0FBRSxJQUFFLElBQUUsS0FBSTtBQUFDLG9CQUFVLElBQUcsS0FBRyxJQUFFLElBQUUsSUFBRyxJQUFHLElBQUUsSUFBRyxFQUFFO0FBQUEsUUFBQztBQUFDLGFBQUksSUFBRSxHQUFFLElBQUUsSUFBRSxLQUFJO0FBQUMsb0JBQVUsSUFBRyxLQUFJLEtBQUUsSUFBRSxLQUFHLElBQUcsSUFBSSxLQUFFLE1BQUcsSUFBRyxFQUFFO0FBQUEsUUFBQztBQUFBLE1BQUM7QUFBQyxpQkFBVyxHQUFFLEdBQUU7QUFBQyxlQUFPLEtBQUcsSUFBRSxNQUFJLEtBQUc7QUFBQSxNQUFDO0FBQUMseUJBQW1CLEdBQUUsR0FBRTtBQUFDLGtCQUFVLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRTtBQUFFLGlCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsS0FBRyxHQUFFO0FBQUMsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxNQUFJLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxNQUFJLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsS0FBSSxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxNQUFJLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxNQUFJLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsS0FBSSxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxNQUFJLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxNQUFJLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxNQUFJLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxNQUFJLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsS0FBSSxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxNQUFJLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxNQUFJLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxNQUFJLEVBQUUsS0FBSSxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxNQUFJLEVBQUUsS0FBSSxFQUFFO0FBQUEsUUFBQztBQUFDLGlCQUFRLElBQUUsR0FBRSxJQUFFLElBQUcsRUFBRSxHQUFFO0FBQUMsWUFBRSxNQUFJLEVBQUU7QUFBQSxRQUFFO0FBQUEsTUFBQztBQUFDLHdCQUFrQixHQUFFLElBQUcsR0FBRSxLQUFJO0FBQUMsaUJBQVEsSUFBRSxHQUFFLElB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QU8sS0FBSztBQUFBLElBQUc7QUFBQSxJQUFDLElBQUksT0FBTTtBQUFDLGFBQU8sS0FBSyxJQUFJLE1BQU0sR0FBRyxFQUFFO0FBQUEsSUFBRTtBQUFBLElBQUMsSUFBSSxPQUFNO0FBQUMsWUFBTSxRQUFNLEtBQUssSUFBSSxNQUFNLEdBQUc7QUFBRSxVQUFHLE1BQU0sT0FBSyxNQUFLO0FBQUMsZUFBTztBQUFBLE1BQUk7QUFBQyxhQUFPLE1BQU07QUFBQSxJQUFFO0FBQUEsSUFBQyxJQUFJLFNBQVE7QUFBQyxZQUFNLFFBQU0sS0FBSyxJQUFJLE1BQU0sR0FBRztBQUFFLFVBQUcsTUFBTSxPQUFLLFVBQVM7QUFBQyxlQUFPO0FBQUEsTUFBSTtBQUFDLFlBQU0sVUFBUSxNQUFNO0FBQUcsWUFBTSxTQUFPLGtCQUFrQixNQUFNLEVBQUU7QUFBRSxZQUFNLFNBQU8sQ0FBQztBQUFFLFVBQUcsT0FBTyxTQUFPLEdBQUU7QUFBQyxlQUFPLFNBQU87QUFBQSxNQUFNO0FBQUMsVUFBRyxXQUFTLFlBQVUsS0FBSTtBQUFDLGVBQU8sVUFBUTtBQUFBLE1BQU87QUFBQyxhQUFPO0FBQUEsSUFBTTtBQUFBLElBQUMsV0FBVTtBQUFDLGFBQU8sS0FBSyxJQUFJLFFBQVEsR0FBRyxLQUFHLEtBQUcsZUFBZSxRQUFRLEtBQUssR0FBRyxLQUFHO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBQyxNQUFNLFlBQVUsRUFBQyxHQUFFLEVBQUMsUUFBTyxPQUFNLE9BQU0sR0FBRSxNQUFLLEdBQUUsUUFBTyxLQUFJLEdBQUUsR0FBRSxFQUFDLFFBQU8sT0FBTSxPQUFNLElBQUcsTUFBSyxJQUFHLFFBQU8sTUFBSyxHQUFFLEdBQUUsRUFBQyxRQUFPLFFBQU8sT0FBTSxJQUFHLE1BQUssR0FBRSxHQUFFLElBQUcsRUFBQyxRQUFPLE9BQU0sS0FBSSxNQUFLLEdBQUUsSUFBRyxFQUFDLFFBQU8sT0FBTSxLQUFJLE1BQUssR0FBRSxLQUFJLEVBQUMsUUFBTyxRQUFPLEtBQUksTUFBSyxFQUFDO0FBQUUsc0JBQW9CLE9BQU07QUFBQyxXQUFPLFdBQVcsVUFBVSxLQUFLLEtBQUssRUFBRSxZQUFZLEdBQUUsRUFBRTtBQUFBLEVBQUM7QUFBQyx3QkFBc0IsT0FBSztBQUFDLFdBQU8sT0FBTyxPQUFPLE9BQU8sQ0FBQyxPQUFLLGFBQWEsU0FBUyxTQUFTLEtBQUksQ0FBQyxHQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUFBLEVBQUM7QUFBQyxNQUFNLFdBQU4sTUFBYztBQUFBLElBQUMsWUFBWSxVQUFTLFNBQVEsT0FBSztBQUFDLHFCQUFlLE1BQUssWUFBVyxRQUFRO0FBQUUscUJBQWUsTUFBSyxRQUFPLEtBQUk7QUFBRSxxQkFBZSxNQUFLLFdBQVUsU0FBUyxVQUFVLFFBQVEsT0FBTyxDQUFDO0FBQUEsSUFBQztBQUFBLElBQUMsWUFBWSxVQUFTLFlBQVc7QUFBQyxhQUFPLFlBQVksTUFBSyxRQUFPLFFBQU8sYUFBVztBQUFDLGNBQU0sY0FBWSxFQUFDLElBQUcsS0FBSyxTQUFRLE1BQUssVUFBVSxDQUFDLFVBQVMsU0FBUyxLQUFLLElBQUksR0FBRSxjQUFZLElBQUksQ0FBQyxFQUFDO0FBQUUsY0FBTSxTQUFPLE1BQU0sS0FBSyxTQUFTLEtBQUssV0FBVztBQUFFLFlBQUcsV0FBUyxNQUFLO0FBQUMsaUJBQU87QUFBQSxRQUFJO0FBQUMsY0FBTSxTQUFPLFVBQVUsS0FBSyxhQUFhLFFBQU8sR0FBRSxFQUFFLENBQUMsRUFBRSxTQUFTO0FBQUUsY0FBTSxTQUFPLFVBQVUsS0FBSyxhQUFhLFFBQU8sUUFBTyxTQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVM7QUFBRSxlQUFPLGFBQWEsUUFBTyxTQUFPLElBQUcsU0FBTyxLQUFHLE1BQU07QUFBQSxNQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxZQUFZLFVBQVMsVUFBUztBQUFDLFlBQU0sV0FBUyxVQUFVLE9BQU8sUUFBUTtBQUFHLFVBQUcsWUFBVSxNQUFLO0FBQUMsaUJBQVMsV0FBVywwQkFBMEIsWUFBVyxPQUFPLE9BQU8sdUJBQXNCLEVBQUMsV0FBVSxjQUFjLFlBQVcsQ0FBQztBQUFBLE1BQUM7QUFBQyxVQUFHLFNBQVMsUUFBTSxPQUFNO0FBQUMsZUFBTyxLQUFLLFNBQVMsVUFBVSxRQUFRLFFBQVE7QUFBQSxNQUFDO0FBQUMsWUFBTSxRQUFNLFNBQVMsUUFBUTtBQUFFLFVBQUcsU0FBUyxTQUFPLE1BQUs7QUFBQyxjQUFNLFFBQU0sU0FBUyxNQUFNLDJDQUEyQztBQUFFLFlBQUcsT0FBTTtBQUFDLGdCQUFNLFNBQU8sU0FBUyxNQUFNLElBQUcsRUFBRTtBQUFFLGNBQUcsTUFBTSxHQUFHLFdBQVMsU0FBTyxLQUFHLFVBQVEsS0FBRyxVQUFRLElBQUc7QUFBQyxtQkFBTyxhQUFhLE9BQU8sQ0FBQyxDQUFDLFNBQVMsS0FBSyxHQUFFLE9BQUssTUFBTSxFQUFFLENBQUMsQ0FBQztBQUFBLFVBQUM7QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFDLFVBQUcsU0FBUyxRQUFNLE1BQUs7QUFBQyxjQUFNLE9BQUssU0FBUyxNQUFNLHVDQUF1QztBQUFFLFlBQUcsTUFBSztBQUFDLGdCQUFNLFNBQU8sU0FBUyxLQUFLLElBQUcsRUFBRTtBQUFFLGNBQUcsS0FBSyxHQUFHLFdBQVMsU0FBTyxLQUFHLFVBQVEsS0FBRyxVQUFRLElBQUc7QUFBQyxtQkFBTyxhQUFhLE9BQU8sQ0FBQyxDQUFDLFNBQVMsSUFBSSxHQUFFLE9BQUssS0FBSyxFQUFFLENBQUMsQ0FBQztBQUFBLFVBQUM7QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFDLFVBQUcsU0FBUyxVQUFRLE1BQUs7QUFBQyxjQUFNLFNBQU8sTUFBTTtBQUFHLFlBQUksV0FBUSxNQUFNO0FBQUcsWUFBRyxhQUFVLEdBQUU7QUFBQyxjQUFHLFdBQVMsTUFBSSxXQUFTLElBQUc7QUFBQyx1QkFBUTtBQUFBLFVBQUU7QUFBQSxRQUFDLE9BQUs7QUFBQyxxQkFBUTtBQUFBLFFBQUU7QUFBQyxZQUFHLFlBQVMsS0FBRyxNQUFNLFdBQVMsSUFBRSxVQUFRLFVBQVEsS0FBRyxVQUFRLElBQUc7QUFBQyxnQkFBTSxTQUFNLE9BQU8sUUFBUSxN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
